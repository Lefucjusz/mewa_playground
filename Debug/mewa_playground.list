
mewa_playground.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f5c8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b8c  0800f868  0800f868  0001f868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080103f4  080103f4  000203f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080103f8  080103f8  000203f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  24000000  080103fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000458  2400007c  08010478  0003007c  2**2
                  ALLOC
  7 .sdram        00010518  c0000000  c0000000  00040000  2**2
                  ALLOC
  8 ._user_heap_stack 00005004  240004d4  240004d4  000304d4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d421  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003f67  00000000  00000000  0004d4cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001700  00000000  00000000  00051438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000014f0  00000000  00000000  00052b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a9e7  00000000  00000000  00054028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021aea  00000000  00000000  0008ea0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f78c  00000000  00000000  000b04f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0020fc85  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006278  00000000  00000000  0020fcd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f850 	.word	0x0800f850

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	0800f850 	.word	0x0800f850

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <cs4270_reset>:
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void cs4270_reset(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS4270_NRESET_GPIO, CS4270_NRESET_PIN, GPIO_PIN_RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	2110      	movs	r1, #16
 8000398:	4807      	ldr	r0, [pc, #28]	; (80003b8 <cs4270_reset+0x28>)
 800039a:	f004 fb29 	bl	80049f0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800039e:	2001      	movs	r0, #1
 80003a0:	f001 fc28 	bl	8001bf4 <HAL_Delay>
	HAL_GPIO_WritePin(CS4270_NRESET_GPIO, CS4270_NRESET_PIN, GPIO_PIN_SET);
 80003a4:	2201      	movs	r2, #1
 80003a6:	2110      	movs	r1, #16
 80003a8:	4803      	ldr	r0, [pc, #12]	; (80003b8 <cs4270_reset+0x28>)
 80003aa:	f004 fb21 	bl	80049f0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80003ae:	2001      	movs	r0, #1
 80003b0:	f001 fc20 	bl	8001bf4 <HAL_Delay>
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	58020c00 	.word	0x58020c00

080003bc <cs4270_init>:

bool cs4270_init(I2C_HandleTypeDef *hi2c1, uint8_t address)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b088      	sub	sp, #32
 80003c0:	af04      	add	r7, sp, #16
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	460b      	mov	r3, r1
 80003c6:	70fb      	strb	r3, [r7, #3]
	bool status;
	HAL_StatusTypeDef i2c_status;
	uint8_t reg_value;

	ctx.i2c = hi2c1;
 80003c8:	4a36      	ldr	r2, [pc, #216]	; (80004a4 <cs4270_init+0xe8>)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	6013      	str	r3, [r2, #0]
	ctx.address = ((CS4270_FIXED_ADDRESS | address) << 1);
 80003ce:	78fb      	ldrb	r3, [r7, #3]
 80003d0:	005b      	lsls	r3, r3, #1
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	f063 036f 	orn	r3, r3, #111	; 0x6f
 80003d8:	b2da      	uxtb	r2, r3
 80003da:	4b32      	ldr	r3, [pc, #200]	; (80004a4 <cs4270_init+0xe8>)
 80003dc:	711a      	strb	r2, [r3, #4]

	/* Reset the chip */
	cs4270_reset();
 80003de:	f7ff ffd7 	bl	8000390 <cs4270_reset>

	/* Check device's ID */
	if (cs4270_get_id() != CS4270_DEVICE_ID) {
 80003e2:	f000 f861 	bl	80004a8 <cs4270_get_id>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b0c      	cmp	r3, #12
 80003ea:	d001      	beq.n	80003f0 <cs4270_init+0x34>
		return false;
 80003ec:	2300      	movs	r3, #0
 80003ee:	e054      	b.n	800049a <cs4270_init+0xde>
	}

	/* Configure ADC and DAC: unfreeze ADC HPFs, disable digital loopback, set both ADC and DAC format to I2S */
	reg_value = 0b00001001;
 80003f0:	2309      	movs	r3, #9
 80003f2:	737b      	strb	r3, [r7, #13]
	i2c_status = HAL_I2C_Mem_Write(ctx.i2c, ctx.address, CS4270_ADC_DAC_CTRL_REG, CS4270_ADDRESS_SIZE, &reg_value, sizeof(reg_value), CS4270_I2C_TIMEOUT_MS);
 80003f4:	4b2b      	ldr	r3, [pc, #172]	; (80004a4 <cs4270_init+0xe8>)
 80003f6:	6818      	ldr	r0, [r3, #0]
 80003f8:	4b2a      	ldr	r3, [pc, #168]	; (80004a4 <cs4270_init+0xe8>)
 80003fa:	791b      	ldrb	r3, [r3, #4]
 80003fc:	b299      	uxth	r1, r3
 80003fe:	2364      	movs	r3, #100	; 0x64
 8000400:	9302      	str	r3, [sp, #8]
 8000402:	2301      	movs	r3, #1
 8000404:	9301      	str	r3, [sp, #4]
 8000406:	f107 030d 	add.w	r3, r7, #13
 800040a:	9300      	str	r3, [sp, #0]
 800040c:	2301      	movs	r3, #1
 800040e:	2204      	movs	r2, #4
 8000410:	f004 fc8c 	bl	8004d2c <HAL_I2C_Mem_Write>
 8000414:	4603      	mov	r3, r0
 8000416:	73fb      	strb	r3, [r7, #15]

	/* Configure transition: enable DAC single volume control, enable Soft Ramp and Zero Cross, disable signal inversion, disable de-emphasis */
	reg_value = 0b11100000;
 8000418:	23e0      	movs	r3, #224	; 0xe0
 800041a:	737b      	strb	r3, [r7, #13]
	i2c_status |= HAL_I2C_Mem_Write(ctx.i2c, ctx.address, CS4270_TRANSITION_CTRL_REG, CS4270_ADDRESS_SIZE, &reg_value, sizeof(reg_value), CS4270_I2C_TIMEOUT_MS);
 800041c:	4b21      	ldr	r3, [pc, #132]	; (80004a4 <cs4270_init+0xe8>)
 800041e:	6818      	ldr	r0, [r3, #0]
 8000420:	4b20      	ldr	r3, [pc, #128]	; (80004a4 <cs4270_init+0xe8>)
 8000422:	791b      	ldrb	r3, [r3, #4]
 8000424:	b299      	uxth	r1, r3
 8000426:	2364      	movs	r3, #100	; 0x64
 8000428:	9302      	str	r3, [sp, #8]
 800042a:	2301      	movs	r3, #1
 800042c:	9301      	str	r3, [sp, #4]
 800042e:	f107 030d 	add.w	r3, r7, #13
 8000432:	9300      	str	r3, [sp, #0]
 8000434:	2301      	movs	r3, #1
 8000436:	2205      	movs	r2, #5
 8000438:	f004 fc78 	bl	8004d2c <HAL_I2C_Mem_Write>
 800043c:	4603      	mov	r3, r0
 800043e:	461a      	mov	r2, r3
 8000440:	7bfb      	ldrb	r3, [r7, #15]
 8000442:	4313      	orrs	r3, r2
 8000444:	73fb      	strb	r3, [r7, #15]

	/* Configure muting: disable Auto-Mute, mute ADC channels, set active low mute signals polarity, disable DAC channels mute */
	reg_value = 0b00011000;
 8000446:	2318      	movs	r3, #24
 8000448:	737b      	strb	r3, [r7, #13]
	i2c_status |= HAL_I2C_Mem_Write(ctx.i2c, ctx.address, CS4270_MUTE_CTRL_REG, CS4270_ADDRESS_SIZE, &reg_value, sizeof(reg_value), CS4270_I2C_TIMEOUT_MS);
 800044a:	4b16      	ldr	r3, [pc, #88]	; (80004a4 <cs4270_init+0xe8>)
 800044c:	6818      	ldr	r0, [r3, #0]
 800044e:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <cs4270_init+0xe8>)
 8000450:	791b      	ldrb	r3, [r3, #4]
 8000452:	b299      	uxth	r1, r3
 8000454:	2364      	movs	r3, #100	; 0x64
 8000456:	9302      	str	r3, [sp, #8]
 8000458:	2301      	movs	r3, #1
 800045a:	9301      	str	r3, [sp, #4]
 800045c:	f107 030d 	add.w	r3, r7, #13
 8000460:	9300      	str	r3, [sp, #0]
 8000462:	2301      	movs	r3, #1
 8000464:	2206      	movs	r2, #6
 8000466:	f004 fc61 	bl	8004d2c <HAL_I2C_Mem_Write>
 800046a:	4603      	mov	r3, r0
 800046c:	461a      	mov	r2, r3
 800046e:	7bfb      	ldrb	r3, [r7, #15]
 8000470:	4313      	orrs	r3, r2
 8000472:	73fb      	strb	r3, [r7, #15]

	/* Set initial volume */
	status = cs4270_set_attenuation(CS4270_INITIAL_ATTENUATION_DB * CS4270_STEPS_PER_DB);
 8000474:	2030      	movs	r0, #48	; 0x30
 8000476:	f000 f835 	bl	80004e4 <cs4270_set_attenuation>
 800047a:	4603      	mov	r3, r0
 800047c:	73bb      	strb	r3, [r7, #14]
	status &= (i2c_status == HAL_OK);
 800047e:	7bbb      	ldrb	r3, [r7, #14]
 8000480:	7bfa      	ldrb	r2, [r7, #15]
 8000482:	2a00      	cmp	r2, #0
 8000484:	bf0c      	ite	eq
 8000486:	2201      	moveq	r2, #1
 8000488:	2200      	movne	r2, #0
 800048a:	b2d2      	uxtb	r2, r2
 800048c:	4013      	ands	r3, r2
 800048e:	2b00      	cmp	r3, #0
 8000490:	bf14      	ite	ne
 8000492:	2301      	movne	r3, #1
 8000494:	2300      	moveq	r3, #0
 8000496:	73bb      	strb	r3, [r7, #14]

	return status;
 8000498:	7bbb      	ldrb	r3, [r7, #14]
}
 800049a:	4618      	mov	r0, r3
 800049c:	3710      	adds	r7, #16
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	24000098 	.word	0x24000098

080004a8 <cs4270_get_id>:

uint8_t cs4270_get_id(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af04      	add	r7, sp, #16
	uint8_t reg_value = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(ctx.i2c, ctx.address, CS4270_DEVICE_ID_REG, CS4270_ADDRESS_SIZE, &reg_value, sizeof(reg_value), CS4270_I2C_TIMEOUT_MS);
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <cs4270_get_id+0x38>)
 80004b4:	6818      	ldr	r0, [r3, #0]
 80004b6:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <cs4270_get_id+0x38>)
 80004b8:	791b      	ldrb	r3, [r3, #4]
 80004ba:	b299      	uxth	r1, r3
 80004bc:	2364      	movs	r3, #100	; 0x64
 80004be:	9302      	str	r3, [sp, #8]
 80004c0:	2301      	movs	r3, #1
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	1dfb      	adds	r3, r7, #7
 80004c6:	9300      	str	r3, [sp, #0]
 80004c8:	2301      	movs	r3, #1
 80004ca:	2201      	movs	r2, #1
 80004cc:	f004 fd42 	bl	8004f54 <HAL_I2C_Mem_Read>
	return ((reg_value & CS4270_DEVICE_ID_MASK) >> CS4270_DEVICE_ID_SHIFT);
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	091b      	lsrs	r3, r3, #4
 80004d4:	b2db      	uxtb	r3, r3
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	24000098 	.word	0x24000098

080004e4 <cs4270_set_attenuation>:
	HAL_I2C_Mem_Read(ctx.i2c, ctx.address, CS4270_DEVICE_ID_REG, CS4270_ADDRESS_SIZE, &reg_value, sizeof(reg_value), CS4270_I2C_TIMEOUT_MS);
	return ((reg_value & CS4270_REVISION_MASK) >> CS4270_REVISION_SHIFT);
}

bool cs4270_set_attenuation(uint8_t steps)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af04      	add	r7, sp, #16
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef i2c_status;
	i2c_status = HAL_I2C_Mem_Write(ctx.i2c, ctx.address, CS4270_DAC_CH_A_VOL_REG, CS4270_ADDRESS_SIZE, &steps, sizeof(steps), CS4270_I2C_TIMEOUT_MS);
 80004ee:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <cs4270_set_attenuation+0x40>)
 80004f0:	6818      	ldr	r0, [r3, #0]
 80004f2:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <cs4270_set_attenuation+0x40>)
 80004f4:	791b      	ldrb	r3, [r3, #4]
 80004f6:	b299      	uxth	r1, r3
 80004f8:	2364      	movs	r3, #100	; 0x64
 80004fa:	9302      	str	r3, [sp, #8]
 80004fc:	2301      	movs	r3, #1
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	1dfb      	adds	r3, r7, #7
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	2301      	movs	r3, #1
 8000506:	2207      	movs	r2, #7
 8000508:	f004 fc10 	bl	8004d2c <HAL_I2C_Mem_Write>
 800050c:	4603      	mov	r3, r0
 800050e:	73fb      	strb	r3, [r7, #15]
	return (i2c_status == HAL_OK);
 8000510:	7bfb      	ldrb	r3, [r7, #15]
 8000512:	2b00      	cmp	r3, #0
 8000514:	bf0c      	ite	eq
 8000516:	2301      	moveq	r3, #1
 8000518:	2300      	movne	r3, #0
 800051a:	b2db      	uxtb	r3, r3
}
 800051c:	4618      	mov	r0, r3
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	24000098 	.word	0x24000098

08000528 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
	...

08000538 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af04      	add	r7, sp, #16
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000546:	9302      	str	r3, [sp, #8]
 8000548:	2301      	movs	r3, #1
 800054a:	9301      	str	r3, [sp, #4]
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	2301      	movs	r3, #1
 8000552:	2200      	movs	r2, #0
 8000554:	2178      	movs	r1, #120	; 0x78
 8000556:	4803      	ldr	r0, [pc, #12]	; (8000564 <ssd1306_WriteCommand+0x2c>)
 8000558:	f004 fbe8 	bl	8004d2c <HAL_I2C_Mem_Write>
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	240000a8 	.word	0x240000a8

08000568 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af04      	add	r7, sp, #16
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	b29b      	uxth	r3, r3
 8000576:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800057a:	9202      	str	r2, [sp, #8]
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2301      	movs	r3, #1
 8000584:	2240      	movs	r2, #64	; 0x40
 8000586:	2178      	movs	r1, #120	; 0x78
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <ssd1306_WriteData+0x30>)
 800058a:	f004 fbcf 	bl	8004d2c <HAL_I2C_Mem_Write>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	240000a8 	.word	0x240000a8

0800059c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80005a0:	f7ff ffc2 	bl	8000528 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80005a4:	2064      	movs	r0, #100	; 0x64
 80005a6:	f001 fb25 	bl	8001bf4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80005aa:	2000      	movs	r0, #0
 80005ac:	f000 f9da 	bl	8000964 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80005b0:	2020      	movs	r0, #32
 80005b2:	f7ff ffc1 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80005b6:	2000      	movs	r0, #0
 80005b8:	f7ff ffbe 	bl	8000538 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80005bc:	20b0      	movs	r0, #176	; 0xb0
 80005be:	f7ff ffbb 	bl	8000538 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80005c2:	20c8      	movs	r0, #200	; 0xc8
 80005c4:	f7ff ffb8 	bl	8000538 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80005c8:	2000      	movs	r0, #0
 80005ca:	f7ff ffb5 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80005ce:	2010      	movs	r0, #16
 80005d0:	f7ff ffb2 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80005d4:	2040      	movs	r0, #64	; 0x40
 80005d6:	f7ff ffaf 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80005da:	20ff      	movs	r0, #255	; 0xff
 80005dc:	f000 f9ae 	bl	800093c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80005e0:	20a1      	movs	r0, #161	; 0xa1
 80005e2:	f7ff ffa9 	bl	8000538 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80005e6:	20a6      	movs	r0, #166	; 0xa6
 80005e8:	f7ff ffa6 	bl	8000538 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80005ec:	20a8      	movs	r0, #168	; 0xa8
 80005ee:	f7ff ffa3 	bl	8000538 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 80005f2:	201f      	movs	r0, #31
 80005f4:	f7ff ffa0 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80005f8:	20a4      	movs	r0, #164	; 0xa4
 80005fa:	f7ff ff9d 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80005fe:	20d3      	movs	r0, #211	; 0xd3
 8000600:	f7ff ff9a 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000604:	2000      	movs	r0, #0
 8000606:	f7ff ff97 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800060a:	20d5      	movs	r0, #213	; 0xd5
 800060c:	f7ff ff94 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000610:	20f0      	movs	r0, #240	; 0xf0
 8000612:	f7ff ff91 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000616:	20d9      	movs	r0, #217	; 0xd9
 8000618:	f7ff ff8e 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800061c:	2022      	movs	r0, #34	; 0x22
 800061e:	f7ff ff8b 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000622:	20da      	movs	r0, #218	; 0xda
 8000624:	f7ff ff88 	bl	8000538 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8000628:	2002      	movs	r0, #2
 800062a:	f7ff ff85 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800062e:	20db      	movs	r0, #219	; 0xdb
 8000630:	f7ff ff82 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000634:	2020      	movs	r0, #32
 8000636:	f7ff ff7f 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800063a:	208d      	movs	r0, #141	; 0x8d
 800063c:	f7ff ff7c 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000640:	2014      	movs	r0, #20
 8000642:	f7ff ff79 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000646:	2001      	movs	r0, #1
 8000648:	f000 f98c 	bl	8000964 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800064c:	2000      	movs	r0, #0
 800064e:	f000 f80f 	bl	8000670 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000652:	f000 f831 	bl	80006b8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <ssd1306_Init+0xd0>)
 8000658:	2200      	movs	r2, #0
 800065a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <ssd1306_Init+0xd0>)
 800065e:	2200      	movs	r2, #0
 8000660:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000662:	4b02      	ldr	r3, [pc, #8]	; (800066c <ssd1306_Init+0xd0>)
 8000664:	2201      	movs	r2, #1
 8000666:	711a      	strb	r2, [r3, #4]
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	c0000200 	.word	0xc0000200

08000670 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	e00d      	b.n	800069c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d101      	bne.n	800068a <ssd1306_Fill+0x1a>
 8000686:	2100      	movs	r1, #0
 8000688:	e000      	b.n	800068c <ssd1306_Fill+0x1c>
 800068a:	21ff      	movs	r1, #255	; 0xff
 800068c:	4a09      	ldr	r2, [pc, #36]	; (80006b4 <ssd1306_Fill+0x44>)
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	4413      	add	r3, r2
 8000692:	460a      	mov	r2, r1
 8000694:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	3301      	adds	r3, #1
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006a2:	d3ed      	bcc.n	8000680 <ssd1306_Fill+0x10>
    }
}
 80006a4:	bf00      	nop
 80006a6:	bf00      	nop
 80006a8:	3714      	adds	r7, #20
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	c0000000 	.word	0xc0000000

080006b8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80006be:	2300      	movs	r3, #0
 80006c0:	71fb      	strb	r3, [r7, #7]
 80006c2:	e016      	b.n	80006f2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	3b50      	subs	r3, #80	; 0x50
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff ff34 	bl	8000538 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80006d0:	2000      	movs	r0, #0
 80006d2:	f7ff ff31 	bl	8000538 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80006d6:	2010      	movs	r0, #16
 80006d8:	f7ff ff2e 	bl	8000538 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	01db      	lsls	r3, r3, #7
 80006e0:	4a08      	ldr	r2, [pc, #32]	; (8000704 <ssd1306_UpdateScreen+0x4c>)
 80006e2:	4413      	add	r3, r2
 80006e4:	2180      	movs	r1, #128	; 0x80
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff3e 	bl	8000568 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	3301      	adds	r3, #1
 80006f0:	71fb      	strb	r3, [r7, #7]
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b03      	cmp	r3, #3
 80006f6:	d9e5      	bls.n	80006c4 <ssd1306_UpdateScreen+0xc>
    }
}
 80006f8:	bf00      	nop
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	c0000000 	.word	0xc0000000

08000708 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	460b      	mov	r3, r1
 8000714:	71bb      	strb	r3, [r7, #6]
 8000716:	4613      	mov	r3, r2
 8000718:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	2b00      	cmp	r3, #0
 8000720:	db3d      	blt.n	800079e <ssd1306_DrawPixel+0x96>
 8000722:	79bb      	ldrb	r3, [r7, #6]
 8000724:	2b1f      	cmp	r3, #31
 8000726:	d83a      	bhi.n	800079e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000728:	797b      	ldrb	r3, [r7, #5]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d11a      	bne.n	8000764 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800072e:	79fa      	ldrb	r2, [r7, #7]
 8000730:	79bb      	ldrb	r3, [r7, #6]
 8000732:	08db      	lsrs	r3, r3, #3
 8000734:	b2d8      	uxtb	r0, r3
 8000736:	4603      	mov	r3, r0
 8000738:	01db      	lsls	r3, r3, #7
 800073a:	4413      	add	r3, r2
 800073c:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <ssd1306_DrawPixel+0xa4>)
 800073e:	5cd3      	ldrb	r3, [r2, r3]
 8000740:	b25a      	sxtb	r2, r3
 8000742:	79bb      	ldrb	r3, [r7, #6]
 8000744:	f003 0307 	and.w	r3, r3, #7
 8000748:	2101      	movs	r1, #1
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	b25b      	sxtb	r3, r3
 8000750:	4313      	orrs	r3, r2
 8000752:	b259      	sxtb	r1, r3
 8000754:	79fa      	ldrb	r2, [r7, #7]
 8000756:	4603      	mov	r3, r0
 8000758:	01db      	lsls	r3, r3, #7
 800075a:	4413      	add	r3, r2
 800075c:	b2c9      	uxtb	r1, r1
 800075e:	4a13      	ldr	r2, [pc, #76]	; (80007ac <ssd1306_DrawPixel+0xa4>)
 8000760:	54d1      	strb	r1, [r2, r3]
 8000762:	e01d      	b.n	80007a0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000764:	79fa      	ldrb	r2, [r7, #7]
 8000766:	79bb      	ldrb	r3, [r7, #6]
 8000768:	08db      	lsrs	r3, r3, #3
 800076a:	b2d8      	uxtb	r0, r3
 800076c:	4603      	mov	r3, r0
 800076e:	01db      	lsls	r3, r3, #7
 8000770:	4413      	add	r3, r2
 8000772:	4a0e      	ldr	r2, [pc, #56]	; (80007ac <ssd1306_DrawPixel+0xa4>)
 8000774:	5cd3      	ldrb	r3, [r2, r3]
 8000776:	b25a      	sxtb	r2, r3
 8000778:	79bb      	ldrb	r3, [r7, #6]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	2101      	movs	r1, #1
 8000780:	fa01 f303 	lsl.w	r3, r1, r3
 8000784:	b25b      	sxtb	r3, r3
 8000786:	43db      	mvns	r3, r3
 8000788:	b25b      	sxtb	r3, r3
 800078a:	4013      	ands	r3, r2
 800078c:	b259      	sxtb	r1, r3
 800078e:	79fa      	ldrb	r2, [r7, #7]
 8000790:	4603      	mov	r3, r0
 8000792:	01db      	lsls	r3, r3, #7
 8000794:	4413      	add	r3, r2
 8000796:	b2c9      	uxtb	r1, r1
 8000798:	4a04      	ldr	r2, [pc, #16]	; (80007ac <ssd1306_DrawPixel+0xa4>)
 800079a:	54d1      	strb	r1, [r2, r3]
 800079c:	e000      	b.n	80007a0 <ssd1306_DrawPixel+0x98>
        return;
 800079e:	bf00      	nop
    }
}
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	c0000000 	.word	0xc0000000

080007b0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b089      	sub	sp, #36	; 0x24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4604      	mov	r4, r0
 80007b8:	1d38      	adds	r0, r7, #4
 80007ba:	e880 0006 	stmia.w	r0, {r1, r2}
 80007be:	461a      	mov	r2, r3
 80007c0:	4623      	mov	r3, r4
 80007c2:	73fb      	strb	r3, [r7, #15]
 80007c4:	4613      	mov	r3, r2
 80007c6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	2b1f      	cmp	r3, #31
 80007cc:	d902      	bls.n	80007d4 <ssd1306_WriteChar+0x24>
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	2b7e      	cmp	r3, #126	; 0x7e
 80007d2:	d901      	bls.n	80007d8 <ssd1306_WriteChar+0x28>
        return 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e06d      	b.n	80008b4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80007d8:	4b38      	ldr	r3, [pc, #224]	; (80008bc <ssd1306_WriteChar+0x10c>)
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	793b      	ldrb	r3, [r7, #4]
 80007e0:	4413      	add	r3, r2
 80007e2:	2b80      	cmp	r3, #128	; 0x80
 80007e4:	dc06      	bgt.n	80007f4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80007e6:	4b35      	ldr	r3, [pc, #212]	; (80008bc <ssd1306_WriteChar+0x10c>)
 80007e8:	885b      	ldrh	r3, [r3, #2]
 80007ea:	461a      	mov	r2, r3
 80007ec:	797b      	ldrb	r3, [r7, #5]
 80007ee:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80007f0:	2b20      	cmp	r3, #32
 80007f2:	dd01      	ble.n	80007f8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	e05d      	b.n	80008b4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
 80007fc:	e04c      	b.n	8000898 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80007fe:	68ba      	ldr	r2, [r7, #8]
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	3b20      	subs	r3, #32
 8000804:	7979      	ldrb	r1, [r7, #5]
 8000806:	fb01 f303 	mul.w	r3, r1, r3
 800080a:	4619      	mov	r1, r3
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	440b      	add	r3, r1
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	4413      	add	r3, r2
 8000814:	881b      	ldrh	r3, [r3, #0]
 8000816:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
 800081c:	e034      	b.n	8000888 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800081e:	697a      	ldr	r2, [r7, #20]
 8000820:	69bb      	ldr	r3, [r7, #24]
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
 8000826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800082a:	2b00      	cmp	r3, #0
 800082c:	d012      	beq.n	8000854 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800082e:	4b23      	ldr	r3, [pc, #140]	; (80008bc <ssd1306_WriteChar+0x10c>)
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	b2da      	uxtb	r2, r3
 8000834:	69bb      	ldr	r3, [r7, #24]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4413      	add	r3, r2
 800083a:	b2d8      	uxtb	r0, r3
 800083c:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <ssd1306_WriteChar+0x10c>)
 800083e:	885b      	ldrh	r3, [r3, #2]
 8000840:	b2da      	uxtb	r2, r3
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4413      	add	r3, r2
 8000848:	b2db      	uxtb	r3, r3
 800084a:	7bba      	ldrb	r2, [r7, #14]
 800084c:	4619      	mov	r1, r3
 800084e:	f7ff ff5b 	bl	8000708 <ssd1306_DrawPixel>
 8000852:	e016      	b.n	8000882 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000854:	4b19      	ldr	r3, [pc, #100]	; (80008bc <ssd1306_WriteChar+0x10c>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	b2da      	uxtb	r2, r3
 800085a:	69bb      	ldr	r3, [r7, #24]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4413      	add	r3, r2
 8000860:	b2d8      	uxtb	r0, r3
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <ssd1306_WriteChar+0x10c>)
 8000864:	885b      	ldrh	r3, [r3, #2]
 8000866:	b2da      	uxtb	r2, r3
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	4413      	add	r3, r2
 800086e:	b2d9      	uxtb	r1, r3
 8000870:	7bbb      	ldrb	r3, [r7, #14]
 8000872:	2b00      	cmp	r3, #0
 8000874:	bf0c      	ite	eq
 8000876:	2301      	moveq	r3, #1
 8000878:	2300      	movne	r3, #0
 800087a:	b2db      	uxtb	r3, r3
 800087c:	461a      	mov	r2, r3
 800087e:	f7ff ff43 	bl	8000708 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000882:	69bb      	ldr	r3, [r7, #24]
 8000884:	3301      	adds	r3, #1
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	793b      	ldrb	r3, [r7, #4]
 800088a:	461a      	mov	r2, r3
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	4293      	cmp	r3, r2
 8000890:	d3c5      	bcc.n	800081e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3301      	adds	r3, #1
 8000896:	61fb      	str	r3, [r7, #28]
 8000898:	797b      	ldrb	r3, [r7, #5]
 800089a:	461a      	mov	r2, r3
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	4293      	cmp	r3, r2
 80008a0:	d3ad      	bcc.n	80007fe <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <ssd1306_WriteChar+0x10c>)
 80008a4:	881a      	ldrh	r2, [r3, #0]
 80008a6:	793b      	ldrb	r3, [r7, #4]
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	4413      	add	r3, r2
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	4b03      	ldr	r3, [pc, #12]	; (80008bc <ssd1306_WriteChar+0x10c>)
 80008b0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3724      	adds	r7, #36	; 0x24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd90      	pop	{r4, r7, pc}
 80008bc:	c0000200 	.word	0xc0000200

080008c0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	1d38      	adds	r0, r7, #4
 80008ca:	e880 0006 	stmia.w	r0, {r1, r2}
 80008ce:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80008d0:	e012      	b.n	80008f8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	7818      	ldrb	r0, [r3, #0]
 80008d6:	78fb      	ldrb	r3, [r7, #3]
 80008d8:	1d3a      	adds	r2, r7, #4
 80008da:	ca06      	ldmia	r2, {r1, r2}
 80008dc:	f7ff ff68 	bl	80007b0 <ssd1306_WriteChar>
 80008e0:	4603      	mov	r3, r0
 80008e2:	461a      	mov	r2, r3
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d002      	beq.n	80008f2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	e008      	b.n	8000904 <ssd1306_WriteString+0x44>
        }
        str++;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	3301      	adds	r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d1e8      	bne.n	80008d2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	781b      	ldrb	r3, [r3, #0]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	460a      	mov	r2, r1
 8000916:	71fb      	strb	r3, [r7, #7]
 8000918:	4613      	mov	r3, r2
 800091a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	b29a      	uxth	r2, r3
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <ssd1306_SetCursor+0x2c>)
 8000922:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000924:	79bb      	ldrb	r3, [r7, #6]
 8000926:	b29a      	uxth	r2, r3
 8000928:	4b03      	ldr	r3, [pc, #12]	; (8000938 <ssd1306_SetCursor+0x2c>)
 800092a:	805a      	strh	r2, [r3, #2]
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	c0000200 	.word	0xc0000200

0800093c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000946:	2381      	movs	r3, #129	; 0x81
 8000948:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fdf3 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fdef 	bl	8000538 <ssd1306_WriteCommand>
}
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d005      	beq.n	8000980 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000974:	23af      	movs	r3, #175	; 0xaf
 8000976:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <ssd1306_SetDisplayOn+0x38>)
 800097a:	2201      	movs	r2, #1
 800097c:	715a      	strb	r2, [r3, #5]
 800097e:	e004      	b.n	800098a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000980:	23ae      	movs	r3, #174	; 0xae
 8000982:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <ssd1306_SetDisplayOn+0x38>)
 8000986:	2200      	movs	r2, #0
 8000988:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fdd3 	bl	8000538 <ssd1306_WriteCommand>
}
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	c0000200 	.word	0xc0000200

080009a0 <tca9548_write>:
};

static struct tca9548a_ctx_t ctx = {0};

static bool tca9548_write()
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af02      	add	r7, sp, #8
	return (HAL_I2C_Master_Transmit(ctx.i2c, ctx.address, &ctx.ctrl_reg_shadow, sizeof(ctx.ctrl_reg_shadow), TCA9548A_I2C_TIMEOUT_MS) == HAL_OK);
 80009a6:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <tca9548_write+0x30>)
 80009a8:	6818      	ldr	r0, [r3, #0]
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <tca9548_write+0x30>)
 80009ac:	791b      	ldrb	r3, [r3, #4]
 80009ae:	b299      	uxth	r1, r3
 80009b0:	2364      	movs	r3, #100	; 0x64
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	2301      	movs	r3, #1
 80009b6:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <tca9548_write+0x34>)
 80009b8:	f004 f8c4 	bl	8004b44 <HAL_I2C_Master_Transmit>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	bf0c      	ite	eq
 80009c2:	2301      	moveq	r3, #1
 80009c4:	2300      	movne	r3, #0
 80009c6:	b2db      	uxtb	r3, r3
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	240000a0 	.word	0x240000a0
 80009d4:	240000a5 	.word	0x240000a5

080009d8 <tca9548a_reset>:

void tca9548a_reset(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	/* Reset the chip */
	HAL_GPIO_WritePin(TCA9548A_NRESET_GPIO, TCA9548A_NRESET_PIN, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2120      	movs	r1, #32
 80009e0:	4809      	ldr	r0, [pc, #36]	; (8000a08 <tca9548a_reset+0x30>)
 80009e2:	f004 f805 	bl	80049f0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009e6:	2001      	movs	r0, #1
 80009e8:	f001 f904 	bl	8001bf4 <HAL_Delay>
	HAL_GPIO_WritePin(TCA9548A_NRESET_GPIO, TCA9548A_NRESET_PIN, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2120      	movs	r1, #32
 80009f0:	4805      	ldr	r0, [pc, #20]	; (8000a08 <tca9548a_reset+0x30>)
 80009f2:	f003 fffd 	bl	80049f0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009f6:	2001      	movs	r0, #1
 80009f8:	f001 f8fc 	bl	8001bf4 <HAL_Delay>

	/* Update control register shadow with initial value */
	ctx.ctrl_reg_shadow = 0;
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <tca9548a_reset+0x34>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	715a      	strb	r2, [r3, #5]
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	58020400 	.word	0x58020400
 8000a0c:	240000a0 	.word	0x240000a0

08000a10 <tca9548a_init>:

bool tca9548a_init(I2C_HandleTypeDef *hi2c1, uint8_t address)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	460b      	mov	r3, r1
 8000a1a:	70fb      	strb	r3, [r7, #3]
	ctx.i2c = hi2c1;
 8000a1c:	4a09      	ldr	r2, [pc, #36]	; (8000a44 <tca9548a_init+0x34>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6013      	str	r3, [r2, #0]
	ctx.address = ((TCA9548A_FIXED_ADDRESS | address) << 1);
 8000a22:	78fb      	ldrb	r3, [r7, #3]
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	f063 031f 	orn	r3, r3, #31
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <tca9548a_init+0x34>)
 8000a30:	711a      	strb	r2, [r3, #4]
	tca9548a_reset();
 8000a32:	f7ff ffd1 	bl	80009d8 <tca9548a_reset>
	return tca9548a_close_all();
 8000a36:	f000 f821 	bl	8000a7c <tca9548a_close_all>
 8000a3a:	4603      	mov	r3, r0
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	240000a0 	.word	0x240000a0

08000a48 <tca9548a_switch_to>:

	return tca9548_write();
}

bool tca9548a_switch_to(uint8_t channel)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
	if (channel >= TCA9548A_CHANNELS_NUM) {
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	2b07      	cmp	r3, #7
 8000a56:	d901      	bls.n	8000a5c <tca9548a_switch_to+0x14>
		return false;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	e009      	b.n	8000a70 <tca9548a_switch_to+0x28>
	}

	ctx.ctrl_reg_shadow = (uint8_t)(1 << channel);
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	2201      	movs	r2, #1
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <tca9548a_switch_to+0x30>)
 8000a68:	715a      	strb	r2, [r3, #5]

	return tca9548_write();
 8000a6a:	f7ff ff99 	bl	80009a0 <tca9548_write>
 8000a6e:	4603      	mov	r3, r0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	240000a0 	.word	0x240000a0

08000a7c <tca9548a_close_all>:
	ctx.ctrl_reg_shadow = TCA9548A_ENABLE_ALL;
	return tca9548_write();
}

bool tca9548a_close_all(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	ctx.ctrl_reg_shadow = TCA9548A_DISABLE_ALL;
 8000a80:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <tca9548a_close_all+0x14>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	715a      	strb	r2, [r3, #5]
	return tca9548_write();
 8000a86:	f7ff ff8b 	bl	80009a0 <tca9548_write>
 8000a8a:	4603      	mov	r3, r0
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	240000a0 	.word	0x240000a0

08000a94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9c:	f001 f818 	bl	8001ad0 <HAL_Init>
  /* USER CODE BEGIN Init */
  // TODO setup MPU and caches
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa0:	f000 f914 	bl	8000ccc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa4:	f000 fa9e 	bl	8000fe4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aa8:	f000 fa2a 	bl	8000f00 <MX_DMA_Init>
  MX_FMC_Init();
 8000aac:	f000 fa48 	bl	8000f40 <MX_FMC_Init>
  MX_I2S1_Init();
 8000ab0:	f000 f9d4 	bl	8000e5c <MX_I2S1_Init>
  MX_SDMMC1_SD_Init();
 8000ab4:	f000 fa06 	bl	8000ec4 <MX_SDMMC1_SD_Init>
  MX_I2C1_Init();
 8000ab8:	f000 f990 	bl	8000ddc <MX_I2C1_Init>
  MX_FATFS_Init();
 8000abc:	f00b f940 	bl	800bd40 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  tca9548a_init(&hi2c1, 0);
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	486b      	ldr	r0, [pc, #428]	; (8000c70 <main+0x1dc>)
 8000ac4:	f7ff ffa4 	bl	8000a10 <tca9548a_init>
  tca9548a_switch_to(1);
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f7ff ffbd 	bl	8000a48 <tca9548a_switch_to>
  ssd1306_Init();
 8000ace:	f7ff fd65 	bl	800059c <ssd1306_Init>
  logger_init();
 8000ad2:	f00b facd 	bl	800c070 <logger_init>

  bool codec_ret = cs4270_init(&hi2c1, 0);
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4865      	ldr	r0, [pc, #404]	; (8000c70 <main+0x1dc>)
 8000ada:	f7ff fc6f 	bl	80003bc <cs4270_init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247

  cs4270_set_attenuation(24);
 8000ae4:	2018      	movs	r0, #24
 8000ae6:	f7ff fcfd 	bl	80004e4 <cs4270_set_attenuation>

  logger_log("Codec %s", codec_ret ? "OK" : "fail");
 8000aea:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <main+0x62>
 8000af2:	4b60      	ldr	r3, [pc, #384]	; (8000c74 <main+0x1e0>)
 8000af4:	e000      	b.n	8000af8 <main+0x64>
 8000af6:	4b60      	ldr	r3, [pc, #384]	; (8000c78 <main+0x1e4>)
 8000af8:	4619      	mov	r1, r3
 8000afa:	4860      	ldr	r0, [pc, #384]	; (8000c7c <main+0x1e8>)
 8000afc:	f00b fac4 	bl	800c088 <logger_log>

  const char *const mount_point = "";
 8000b00:	4b5f      	ldr	r3, [pc, #380]	; (8000c80 <main+0x1ec>)
 8000b02:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
  const char *const file_path = "01. A Gallant Gentleman.wav";
 8000b06:	4b5f      	ldr	r3, [pc, #380]	; (8000c84 <main+0x1f0>)
 8000b08:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

  FRESULT ret;
  FIL f;

  logger_log("Mounting SD card...");
 8000b0c:	485e      	ldr	r0, [pc, #376]	; (8000c88 <main+0x1f4>)
 8000b0e:	f00b fabb 	bl	800c088 <logger_log>

  ret = f_mount(&fatfs, mount_point, 1);
 8000b12:	2201      	movs	r2, #1
 8000b14:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8000b18:	485c      	ldr	r0, [pc, #368]	; (8000c8c <main+0x1f8>)
 8000b1a:	f00d fc9d 	bl	800e458 <f_mount>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
  if (ret) {
 8000b24:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d003      	beq.n	8000b34 <main+0xa0>
	  logger_log("Failed");
 8000b2c:	4858      	ldr	r0, [pc, #352]	; (8000c90 <main+0x1fc>)
 8000b2e:	f00b faab 	bl	800c088 <logger_log>
	  while(1);
 8000b32:	e7fe      	b.n	8000b32 <main+0x9e>
  }

  logger_log("Opening %s...", file_path);
 8000b34:	f8d7 123c 	ldr.w	r1, [r7, #572]	; 0x23c
 8000b38:	4856      	ldr	r0, [pc, #344]	; (8000c94 <main+0x200>)
 8000b3a:	f00b faa5 	bl	800c088 <logger_log>
  ret = f_open(&f, file_path, FA_READ);
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	2201      	movs	r2, #1
 8000b42:	f8d7 123c 	ldr.w	r1, [r7, #572]	; 0x23c
 8000b46:	4618      	mov	r0, r3
 8000b48:	f00d fccc 	bl	800e4e4 <f_open>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
  if (ret) {
 8000b52:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <main+0xce>
	  logger_log("Failed");
 8000b5a:	484d      	ldr	r0, [pc, #308]	; (8000c90 <main+0x1fc>)
 8000b5c:	f00b fa94 	bl	800c088 <logger_log>
	  while(1);
 8000b60:	e7fe      	b.n	8000b60 <main+0xcc>
  }

  logger_log("Reading file...");
 8000b62:	484d      	ldr	r0, [pc, #308]	; (8000c98 <main+0x204>)
 8000b64:	f00b fa90 	bl	800c088 <logger_log>
  const size_t file_size = f_size(&f);
 8000b68:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8000b6c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
  logger_log("File size: %uB", file_size);
 8000b76:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 8000b7a:	4848      	ldr	r0, [pc, #288]	; (8000c9c <main+0x208>)
 8000b7c:	f00b fa84 	bl	800c088 <logger_log>
//	  seek_val++;
//  }
//
//  f_lseek(&f, seek_val);

  logger_log("Filling buffer...");
 8000b80:	4847      	ldr	r0, [pc, #284]	; (8000ca0 <main+0x20c>)
 8000b82:	f00b fa81 	bl	800c088 <logger_log>
  size_t bytes_read;
  ret = f_read(&f, audio_buffer, 2 * 16384 * sizeof(audio_buffer[0]), &bytes_read);
 8000b86:	463b      	mov	r3, r7
 8000b88:	1d38      	adds	r0, r7, #4
 8000b8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b8e:	4945      	ldr	r1, [pc, #276]	; (8000ca4 <main+0x210>)
 8000b90:	f00d fe66 	bl	800e860 <f_read>
 8000b94:	4603      	mov	r3, r0
 8000b96:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
  if (ret) {
 8000b9a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d003      	beq.n	8000baa <main+0x116>
  	  logger_log("Failed");
 8000ba2:	483b      	ldr	r0, [pc, #236]	; (8000c90 <main+0x1fc>)
 8000ba4:	f00b fa70 	bl	800c088 <logger_log>
  	  while(1);
 8000ba8:	e7fe      	b.n	8000ba8 <main+0x114>
  }

  HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t *)audio_buffer, sizeof(audio_buffer)/sizeof(audio_buffer[0]));
 8000baa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bae:	493d      	ldr	r1, [pc, #244]	; (8000ca4 <main+0x210>)
 8000bb0:	483d      	ldr	r0, [pc, #244]	; (8000ca8 <main+0x214>)
 8000bb2:	f004 ff5b 	bl	8005a6c <HAL_I2S_Transmit_DMA>

  logger_log("Playing");
 8000bb6:	483d      	ldr	r0, [pc, #244]	; (8000cac <main+0x218>)
 8000bb8:	f00b fa66 	bl	800c088 <logger_log>

  while (1) {
	  if (first_half) {
 8000bbc:	4b3c      	ldr	r3, [pc, #240]	; (8000cb0 <main+0x21c>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d009      	beq.n	8000bda <main+0x146>
		  first_half = false;
 8000bc6:	4b3a      	ldr	r3, [pc, #232]	; (8000cb0 <main+0x21c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
		  f_read(&f, audio_buffer, 16384 * sizeof(audio_buffer[0]), &bytes_read);
 8000bcc:	463b      	mov	r3, r7
 8000bce:	1d38      	adds	r0, r7, #4
 8000bd0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bd4:	4933      	ldr	r1, [pc, #204]	; (8000ca4 <main+0x210>)
 8000bd6:	f00d fe43 	bl	800e860 <f_read>
	  }

	  if (second_half) {
 8000bda:	4b36      	ldr	r3, [pc, #216]	; (8000cb4 <main+0x220>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d009      	beq.n	8000bf8 <main+0x164>
		  second_half = false;
 8000be4:	4b33      	ldr	r3, [pc, #204]	; (8000cb4 <main+0x220>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
		  f_read(&f, &audio_buffer[16384], 16384 * sizeof(audio_buffer[0]), &bytes_read);
 8000bea:	463b      	mov	r3, r7
 8000bec:	1d38      	adds	r0, r7, #4
 8000bee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bf2:	4931      	ldr	r1, [pc, #196]	; (8000cb8 <main+0x224>)
 8000bf4:	f00d fe34 	bl	800e860 <f_read>
	  }

	  if (bytes_read == 0) {
 8000bf8:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8000bfc:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d000      	beq.n	8000c08 <main+0x174>
	  if (first_half) {
 8000c06:	e7d9      	b.n	8000bbc <main+0x128>
		  break;
 8000c08:	bf00      	nop
	  }
  }

  HAL_I2S_DMAStop(&hi2s1);
 8000c0a:	4827      	ldr	r0, [pc, #156]	; (8000ca8 <main+0x214>)
 8000c0c:	f004 ffd0 	bl	8005bb0 <HAL_I2S_DMAStop>
  logger_log("Playback done");
 8000c10:	482a      	ldr	r0, [pc, #168]	; (8000cbc <main+0x228>)
 8000c12:	f00b fa39 	bl	800c088 <logger_log>

  logger_log("Closing %s...", file_path);
 8000c16:	f8d7 123c 	ldr.w	r1, [r7, #572]	; 0x23c
 8000c1a:	4829      	ldr	r0, [pc, #164]	; (8000cc0 <main+0x22c>)
 8000c1c:	f00b fa34 	bl	800c088 <logger_log>
  ret = f_close(&f);
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	4618      	mov	r0, r3
 8000c24:	f00d ffd9 	bl	800ebda <f_close>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
  if (ret) {
 8000c2e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d003      	beq.n	8000c3e <main+0x1aa>
      logger_log("Failed");
 8000c36:	4816      	ldr	r0, [pc, #88]	; (8000c90 <main+0x1fc>)
 8000c38:	f00b fa26 	bl	800c088 <logger_log>
      while(1);
 8000c3c:	e7fe      	b.n	8000c3c <main+0x1a8>
  }

  logger_log("Unmounting SD card...");
 8000c3e:	4821      	ldr	r0, [pc, #132]	; (8000cc4 <main+0x230>)
 8000c40:	f00b fa22 	bl	800c088 <logger_log>
  ret = f_mount(0, mount_point, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f00d fc04 	bl	800e458 <f_mount>
 8000c50:	4603      	mov	r3, r0
 8000c52:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
  if (ret) {
 8000c56:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d003      	beq.n	8000c66 <main+0x1d2>
      logger_log("Failed");
 8000c5e:	480c      	ldr	r0, [pc, #48]	; (8000c90 <main+0x1fc>)
 8000c60:	f00b fa12 	bl	800c088 <logger_log>
      while(1);
 8000c64:	e7fe      	b.n	8000c64 <main+0x1d0>
  }

  logger_log("Success!");
 8000c66:	4818      	ldr	r0, [pc, #96]	; (8000cc8 <main+0x234>)
 8000c68:	f00b fa0e 	bl	800c088 <logger_log>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <main+0x1d8>
 8000c6e:	bf00      	nop
 8000c70:	240000a8 	.word	0x240000a8
 8000c74:	0800f868 	.word	0x0800f868
 8000c78:	0800f86c 	.word	0x0800f86c
 8000c7c:	0800f874 	.word	0x0800f874
 8000c80:	0800f880 	.word	0x0800f880
 8000c84:	0800f884 	.word	0x0800f884
 8000c88:	0800f8a0 	.word	0x0800f8a0
 8000c8c:	c0000208 	.word	0xc0000208
 8000c90:	0800f8b4 	.word	0x0800f8b4
 8000c94:	0800f8bc 	.word	0x0800f8bc
 8000c98:	0800f8cc 	.word	0x0800f8cc
 8000c9c:	0800f8dc 	.word	0x0800f8dc
 8000ca0:	0800f8ec 	.word	0x0800f8ec
 8000ca4:	c000043c 	.word	0xc000043c
 8000ca8:	240000fc 	.word	0x240000fc
 8000cac:	0800f900 	.word	0x0800f900
 8000cb0:	24000278 	.word	0x24000278
 8000cb4:	24000279 	.word	0x24000279
 8000cb8:	c000843c 	.word	0xc000843c
 8000cbc:	0800f908 	.word	0x0800f908
 8000cc0:	0800f918 	.word	0x0800f918
 8000cc4:	0800f928 	.word	0x0800f928
 8000cc8:	0800f940 	.word	0x0800f940

08000ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b09c      	sub	sp, #112	; 0x70
 8000cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd6:	224c      	movs	r2, #76	; 0x4c
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f00e f91c 	bl	800ef18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	2220      	movs	r2, #32
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f00e f916 	bl	800ef18 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cec:	2002      	movs	r0, #2
 8000cee:	f005 f80d 	bl	8005d0c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	603b      	str	r3, [r7, #0]
 8000cf6:	4b36      	ldr	r3, [pc, #216]	; (8000dd0 <SystemClock_Config+0x104>)
 8000cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cfa:	4a35      	ldr	r2, [pc, #212]	; (8000dd0 <SystemClock_Config+0x104>)
 8000cfc:	f023 0301 	bic.w	r3, r3, #1
 8000d00:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d02:	4b33      	ldr	r3, [pc, #204]	; (8000dd0 <SystemClock_Config+0x104>)
 8000d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	4b31      	ldr	r3, [pc, #196]	; (8000dd4 <SystemClock_Config+0x108>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d14:	4a2f      	ldr	r2, [pc, #188]	; (8000dd4 <SystemClock_Config+0x108>)
 8000d16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b2d      	ldr	r3, [pc, #180]	; (8000dd4 <SystemClock_Config+0x108>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d24:	603b      	str	r3, [r7, #0]
 8000d26:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d28:	bf00      	nop
 8000d2a:	4b2a      	ldr	r3, [pc, #168]	; (8000dd4 <SystemClock_Config+0x108>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d36:	d1f8      	bne.n	8000d2a <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000d38:	4b27      	ldr	r3, [pc, #156]	; (8000dd8 <SystemClock_Config+0x10c>)
 8000d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3c:	f023 0303 	bic.w	r3, r3, #3
 8000d40:	4a25      	ldr	r2, [pc, #148]	; (8000dd8 <SystemClock_Config+0x10c>)
 8000d42:	f043 0302 	orr.w	r3, r3, #2
 8000d46:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d52:	2302      	movs	r3, #2
 8000d54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d56:	2302      	movs	r3, #2
 8000d58:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 23;
 8000d5e:	2317      	movs	r3, #23
 8000d60:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d62:	2302      	movs	r3, #2
 8000d64:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 18;
 8000d66:	2312      	movs	r3, #18
 8000d68:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d6e:	230c      	movs	r3, #12
 8000d70:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3584;
 8000d76:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000d7a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d80:	4618      	mov	r0, r3
 8000d82:	f004 fffd 	bl	8005d80 <HAL_RCC_OscConfig>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d8c:	f000 fa86 	bl	800129c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d90:	233f      	movs	r3, #63	; 0x3f
 8000d92:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d94:	2303      	movs	r3, #3
 8000d96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d9c:	2308      	movs	r3, #8
 8000d9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000da0:	2340      	movs	r3, #64	; 0x40
 8000da2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000da4:	2340      	movs	r3, #64	; 0x40
 8000da6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000dae:	2340      	movs	r3, #64	; 0x40
 8000db0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2101      	movs	r1, #1
 8000db6:	4618      	mov	r0, r3
 8000db8:	f005 fc3c 	bl	8006634 <HAL_RCC_ClockConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000dc2:	f000 fa6b 	bl	800129c <Error_Handler>
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	3770      	adds	r7, #112	; 0x70
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	58000400 	.word	0x58000400
 8000dd4:	58024800 	.word	0x58024800
 8000dd8:	58024400 	.word	0x58024400

08000ddc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000de0:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000de2:	4a1c      	ldr	r2, [pc, #112]	; (8000e54 <MX_I2C1_Init+0x78>)
 8000de4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301739;
 8000de6:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000de8:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <MX_I2C1_Init+0x7c>)
 8000dea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000dec:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000df8:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dfe:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e16:	480e      	ldr	r0, [pc, #56]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000e18:	f003 fe04 	bl	8004a24 <HAL_I2C_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e22:	f000 fa3b 	bl	800129c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e26:	2100      	movs	r1, #0
 8000e28:	4809      	ldr	r0, [pc, #36]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000e2a:	f004 fc65 	bl	80056f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e34:	f000 fa32 	bl	800129c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000e3c:	f004 fca7 	bl	800578e <HAL_I2CEx_ConfigDigitalFilter>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e46:	f000 fa29 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	240000a8 	.word	0x240000a8
 8000e54:	40005400 	.word	0x40005400
 8000e58:	00301739 	.word	0x00301739

08000e5c <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000e60:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <MX_I2S1_Init+0x60>)
 8000e62:	4a17      	ldr	r2, [pc, #92]	; (8000ec0 <MX_I2S1_Init+0x64>)
 8000e64:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <MX_I2S1_Init+0x60>)
 8000e68:	220a      	movs	r2, #10
 8000e6a:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <MX_I2S1_Init+0x60>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <MX_I2S1_Init+0x60>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <MX_I2S1_Init+0x60>)
 8000e7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e7e:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000e80:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_I2S1_Init+0x60>)
 8000e82:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000e86:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_I2S1_Init+0x60>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <MX_I2S1_Init+0x60>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_I2S1_Init+0x60>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <MX_I2S1_Init+0x60>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_I2S1_Init+0x60>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_I2S1_Init+0x60>)
 8000ea8:	f004 fcbe 	bl	8005828 <HAL_I2S_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_I2S1_Init+0x5a>
  {
    Error_Handler();
 8000eb2:	f000 f9f3 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	240000fc 	.word	0x240000fc
 8000ec0:	40013000 	.word	0x40013000

08000ec4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <MX_SDMMC1_SD_Init+0x34>)
 8000eca:	4a0c      	ldr	r2, [pc, #48]	; (8000efc <MX_SDMMC1_SD_Init+0x38>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <MX_SDMMC1_SD_Init+0x34>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <MX_SDMMC1_SD_Init+0x34>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000eda:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <MX_SDMMC1_SD_Init+0x34>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <MX_SDMMC1_SD_Init+0x34>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <MX_SDMMC1_SD_Init+0x34>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	240001c8 	.word	0x240001c8
 8000efc:	52007000 	.word	0x52007000

08000f00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <MX_DMA_Init+0x3c>)
 8000f08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f0c:	4a0b      	ldr	r2, [pc, #44]	; (8000f3c <MX_DMA_Init+0x3c>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <MX_DMA_Init+0x3c>)
 8000f18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2100      	movs	r1, #0
 8000f28:	200b      	movs	r0, #11
 8000f2a:	f000 ff6e 	bl	8001e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f2e:	200b      	movs	r0, #11
 8000f30:	f000 ff85 	bl	8001e3e <HAL_NVIC_EnableIRQ>

}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	58024400 	.word	0x58024400

08000f40 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
 8000f54:	615a      	str	r2, [r3, #20]
 8000f56:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f58:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <MX_FMC_Init+0x9c>)
 8000f5a:	4a21      	ldr	r2, [pc, #132]	; (8000fe0 <MX_FMC_Init+0xa0>)
 8000f5c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000f5e:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <MX_FMC_Init+0x9c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000f64:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <MX_FMC_Init+0x9c>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000f6a:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <MX_FMC_Init+0x9c>)
 8000f6c:	2208      	movs	r2, #8
 8000f6e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000f70:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <MX_FMC_Init+0x9c>)
 8000f72:	2210      	movs	r2, #16
 8000f74:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f76:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <MX_FMC_Init+0x9c>)
 8000f78:	2240      	movs	r2, #64	; 0x40
 8000f7a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000f7c:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <MX_FMC_Init+0x9c>)
 8000f7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f82:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f84:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <MX_FMC_Init+0x9c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <MX_FMC_Init+0x9c>)
 8000f8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f90:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <MX_FMC_Init+0x9c>)
 8000f94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <MX_FMC_Init+0x9c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 1;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 5;
 8000fa4:	2305      	movs	r3, #5
 8000fa6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000fa8:	2304      	movs	r3, #4
 8000faa:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 5;
 8000fac:	2305      	movs	r3, #5
 8000fae:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4806      	ldr	r0, [pc, #24]	; (8000fdc <MX_FMC_Init+0x9c>)
 8000fc2:	f009 ff57 	bl	800ae74 <HAL_SDRAM_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000fcc:	f000 f966 	bl	800129c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  SDRAM_Init();
 8000fd0:	f000 f8ca 	bl	8001168 <SDRAM_Init>
  /* USER CODE END FMC_Init 2 */
}
 8000fd4:	bf00      	nop
 8000fd6:	3720      	adds	r7, #32
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	24000244 	.word	0x24000244
 8000fe0:	52004140 	.word	0x52004140

08000fe4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08e      	sub	sp, #56	; 0x38
 8000fe8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ffa:	4b57      	ldr	r3, [pc, #348]	; (8001158 <MX_GPIO_Init+0x174>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001000:	4a55      	ldr	r2, [pc, #340]	; (8001158 <MX_GPIO_Init+0x174>)
 8001002:	f043 0320 	orr.w	r3, r3, #32
 8001006:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100a:	4b53      	ldr	r3, [pc, #332]	; (8001158 <MX_GPIO_Init+0x174>)
 800100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001010:	f003 0320 	and.w	r3, r3, #32
 8001014:	623b      	str	r3, [r7, #32]
 8001016:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001018:	4b4f      	ldr	r3, [pc, #316]	; (8001158 <MX_GPIO_Init+0x174>)
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101e:	4a4e      	ldr	r2, [pc, #312]	; (8001158 <MX_GPIO_Init+0x174>)
 8001020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001024:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001028:	4b4b      	ldr	r3, [pc, #300]	; (8001158 <MX_GPIO_Init+0x174>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001032:	61fb      	str	r3, [r7, #28]
 8001034:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001036:	4b48      	ldr	r3, [pc, #288]	; (8001158 <MX_GPIO_Init+0x174>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103c:	4a46      	ldr	r2, [pc, #280]	; (8001158 <MX_GPIO_Init+0x174>)
 800103e:	f043 0304 	orr.w	r3, r3, #4
 8001042:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001046:	4b44      	ldr	r3, [pc, #272]	; (8001158 <MX_GPIO_Init+0x174>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104c:	f003 0304 	and.w	r3, r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
 8001052:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001054:	4b40      	ldr	r3, [pc, #256]	; (8001158 <MX_GPIO_Init+0x174>)
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105a:	4a3f      	ldr	r2, [pc, #252]	; (8001158 <MX_GPIO_Init+0x174>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001064:	4b3c      	ldr	r3, [pc, #240]	; (8001158 <MX_GPIO_Init+0x174>)
 8001066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001072:	4b39      	ldr	r3, [pc, #228]	; (8001158 <MX_GPIO_Init+0x174>)
 8001074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001078:	4a37      	ldr	r2, [pc, #220]	; (8001158 <MX_GPIO_Init+0x174>)
 800107a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800107e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001082:	4b35      	ldr	r3, [pc, #212]	; (8001158 <MX_GPIO_Init+0x174>)
 8001084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001090:	4b31      	ldr	r3, [pc, #196]	; (8001158 <MX_GPIO_Init+0x174>)
 8001092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001096:	4a30      	ldr	r2, [pc, #192]	; (8001158 <MX_GPIO_Init+0x174>)
 8001098:	f043 0310 	orr.w	r3, r3, #16
 800109c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a0:	4b2d      	ldr	r3, [pc, #180]	; (8001158 <MX_GPIO_Init+0x174>)
 80010a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a6:	f003 0310 	and.w	r3, r3, #16
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ae:	4b2a      	ldr	r3, [pc, #168]	; (8001158 <MX_GPIO_Init+0x174>)
 80010b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b4:	4a28      	ldr	r2, [pc, #160]	; (8001158 <MX_GPIO_Init+0x174>)
 80010b6:	f043 0308 	orr.w	r3, r3, #8
 80010ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010be:	4b26      	ldr	r3, [pc, #152]	; (8001158 <MX_GPIO_Init+0x174>)
 80010c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010cc:	4b22      	ldr	r3, [pc, #136]	; (8001158 <MX_GPIO_Init+0x174>)
 80010ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d2:	4a21      	ldr	r2, [pc, #132]	; (8001158 <MX_GPIO_Init+0x174>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010dc:	4b1e      	ldr	r3, [pc, #120]	; (8001158 <MX_GPIO_Init+0x174>)
 80010de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS4270_NRESET_GPIO_Port, CS4270_NRESET_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2110      	movs	r1, #16
 80010ee:	481b      	ldr	r0, [pc, #108]	; (800115c <MX_GPIO_Init+0x178>)
 80010f0:	f003 fc7e 	bl	80049f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TCA9548A_NRESET_GPIO_Port, TCA9548A_NRESET_Pin, GPIO_PIN_RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2120      	movs	r1, #32
 80010f8:	4819      	ldr	r0, [pc, #100]	; (8001160 <MX_GPIO_Init+0x17c>)
 80010fa:	f003 fc79 	bl	80049f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS4270_NRESET_Pin */
  GPIO_InitStruct.Pin = CS4270_NRESET_Pin;
 80010fe:	2310      	movs	r3, #16
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001102:	2301      	movs	r3, #1
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS4270_NRESET_GPIO_Port, &GPIO_InitStruct);
 800110e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001112:	4619      	mov	r1, r3
 8001114:	4811      	ldr	r0, [pc, #68]	; (800115c <MX_GPIO_Init+0x178>)
 8001116:	f003 faa3 	bl	8004660 <HAL_GPIO_Init>

  /*Configure GPIO pin : DBG_PAD1_Pin */
  GPIO_InitStruct.Pin = DBG_PAD1_Pin;
 800111a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001120:	2300      	movs	r3, #0
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001124:	2302      	movs	r3, #2
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DBG_PAD1_GPIO_Port, &GPIO_InitStruct);
 8001128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112c:	4619      	mov	r1, r3
 800112e:	480d      	ldr	r0, [pc, #52]	; (8001164 <MX_GPIO_Init+0x180>)
 8001130:	f003 fa96 	bl	8004660 <HAL_GPIO_Init>

  /*Configure GPIO pin : TCA9548A_NRESET_Pin */
  GPIO_InitStruct.Pin = TCA9548A_NRESET_Pin;
 8001134:	2320      	movs	r3, #32
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001138:	2301      	movs	r3, #1
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TCA9548A_NRESET_GPIO_Port, &GPIO_InitStruct);
 8001144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001148:	4619      	mov	r1, r3
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_GPIO_Init+0x17c>)
 800114c:	f003 fa88 	bl	8004660 <HAL_GPIO_Init>

}
 8001150:	bf00      	nop
 8001152:	3738      	adds	r7, #56	; 0x38
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	58024400 	.word	0x58024400
 800115c:	58020c00 	.word	0x58020c00
 8001160:	58020400 	.word	0x58020400
 8001164:	58021800 	.word	0x58021800

08001168 <SDRAM_Init>:

/* USER CODE BEGIN 4 */

static void SDRAM_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
	FMC_SDRAM_CommandTypeDef cmd = {0};
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
	HAL_StatusTypeDef status = HAL_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	75fb      	strb	r3, [r7, #23]

	/* Send clock configuration enable command */
	cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800117e:	2310      	movs	r3, #16
 8001180:	60bb      	str	r3, [r7, #8]
	cmd.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8001182:	2301      	movs	r3, #1
 8001184:	607b      	str	r3, [r7, #4]
	cmd.AutoRefreshNumber = 1;
 8001186:	2301      	movs	r3, #1
 8001188:	60fb      	str	r3, [r7, #12]
	cmd.ModeRegisterDefinition = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
	status = HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0xFFFF); // TODO magic number
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001194:	4619      	mov	r1, r3
 8001196:	4830      	ldr	r0, [pc, #192]	; (8001258 <SDRAM_Init+0xf0>)
 8001198:	f009 fea8 	bl	800aeec <HAL_SDRAM_SendCommand>
 800119c:	4603      	mov	r3, r0
 800119e:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 80011a0:	7dfb      	ldrb	r3, [r7, #23]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SDRAM_Init+0x42>
		Error_Handler();
 80011a6:	f000 f879 	bl	800129c <Error_Handler>
	}

	/* Wait for at least 100us */
	HAL_Delay(1);
 80011aa:	2001      	movs	r0, #1
 80011ac:	f000 fd22 	bl	8001bf4 <HAL_Delay>

	/* Send Precharge All command */
	cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80011b0:	2310      	movs	r3, #16
 80011b2:	60bb      	str	r3, [r7, #8]
	cmd.CommandMode = FMC_SDRAM_CMD_PALL;
 80011b4:	2302      	movs	r3, #2
 80011b6:	607b      	str	r3, [r7, #4]
	cmd.AutoRefreshNumber = 1;
 80011b8:	2301      	movs	r3, #1
 80011ba:	60fb      	str	r3, [r7, #12]
	cmd.ModeRegisterDefinition = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
	status = HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0xFFFF); // TODO magic number
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011c6:	4619      	mov	r1, r3
 80011c8:	4823      	ldr	r0, [pc, #140]	; (8001258 <SDRAM_Init+0xf0>)
 80011ca:	f009 fe8f 	bl	800aeec <HAL_SDRAM_SendCommand>
 80011ce:	4603      	mov	r3, r0
 80011d0:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 80011d2:	7dfb      	ldrb	r3, [r7, #23]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <SDRAM_Init+0x74>
		Error_Handler();
 80011d8:	f000 f860 	bl	800129c <Error_Handler>
	}

	/* Send Auto Refresh command 8 times */
	cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80011dc:	2310      	movs	r3, #16
 80011de:	60bb      	str	r3, [r7, #8]
	cmd.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80011e0:	2303      	movs	r3, #3
 80011e2:	607b      	str	r3, [r7, #4]
	cmd.AutoRefreshNumber = 8;
 80011e4:	2308      	movs	r3, #8
 80011e6:	60fb      	str	r3, [r7, #12]
	cmd.ModeRegisterDefinition = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	613b      	str	r3, [r7, #16]
	status = HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0xFFFF); // TODO magic number
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011f2:	4619      	mov	r1, r3
 80011f4:	4818      	ldr	r0, [pc, #96]	; (8001258 <SDRAM_Init+0xf0>)
 80011f6:	f009 fe79 	bl	800aeec <HAL_SDRAM_SendCommand>
 80011fa:	4603      	mov	r3, r0
 80011fc:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 80011fe:	7dfb      	ldrb	r3, [r7, #23]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SDRAM_Init+0xa0>
		Error_Handler();
 8001204:	f000 f84a 	bl	800129c <Error_Handler>
	}

	/* Program the external memory mode register */
	cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001208:	2310      	movs	r3, #16
 800120a:	60bb      	str	r3, [r7, #8]
	cmd.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800120c:	2304      	movs	r3, #4
 800120e:	607b      	str	r3, [r7, #4]
	cmd.AutoRefreshNumber = 1;
 8001210:	2301      	movs	r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
	cmd.ModeRegisterDefinition = (SDRAM_MODEREG_BURST_LENGTH_1 |
 8001214:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001218:	613b      	str	r3, [r7, #16]
							 	 SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL |
								 SDRAM_MODEREG_CAS_LATENCY_2 |
								 SDRAM_MODEREG_OPERATING_MODE_STANDARD |
								 SDRAM_MODEREG_WRITEBURST_MODE_SINGLE);
	status = HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0xFFFF); // TODO magic number
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001220:	4619      	mov	r1, r3
 8001222:	480d      	ldr	r0, [pc, #52]	; (8001258 <SDRAM_Init+0xf0>)
 8001224:	f009 fe62 	bl	800aeec <HAL_SDRAM_SendCommand>
 8001228:	4603      	mov	r3, r0
 800122a:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <SDRAM_Init+0xce>
		Error_Handler();
 8001232:	f000 f833 	bl	800129c <Error_Handler>

	/* Set the rate refresh counter:
	 * refresh_rate = (FMC_freq * (full_refresh_time / refresh_cycles)) - 20
	 * refresh_rate = (72MHz * (64ms/8192)) - 20 = (72MHz * 7.8125us) - 20 = 542
	 *  */
	status = HAL_SDRAM_ProgramRefreshRate(&hsdram1, 542);
 8001236:	f240 211e 	movw	r1, #542	; 0x21e
 800123a:	4807      	ldr	r0, [pc, #28]	; (8001258 <SDRAM_Init+0xf0>)
 800123c:	f009 fe8b 	bl	800af56 <HAL_SDRAM_ProgramRefreshRate>
 8001240:	4603      	mov	r3, r0
 8001242:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <SDRAM_Init+0xe6>
		Error_Handler();
 800124a:	f000 f827 	bl	800129c <Error_Handler>
	}
}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	24000244 	.word	0x24000244

0800125c <HAL_I2S_TxHalfCpltCallback>:

// TODO this shouldn't be here
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	first_half = true;
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <HAL_I2S_TxHalfCpltCallback+0x1c>)
 8001266:	2201      	movs	r2, #1
 8001268:	701a      	strb	r2, [r3, #0]
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	24000278 	.word	0x24000278

0800127c <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	second_half = true;
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <HAL_I2S_TxCpltCallback+0x1c>)
 8001286:	2201      	movs	r2, #1
 8001288:	701a      	strb	r2, [r3, #0]
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	24000279 	.word	0x24000279

0800129c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a0:	b672      	cpsid	i
}
 80012a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <Error_Handler+0x8>
	...

080012a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_MspInit+0x30>)
 80012b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012b4:	4a08      	ldr	r2, [pc, #32]	; (80012d8 <HAL_MspInit+0x30>)
 80012b6:	f043 0302 	orr.w	r3, r3, #2
 80012ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <HAL_MspInit+0x30>)
 80012c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	58024400 	.word	0x58024400

080012dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b0ba      	sub	sp, #232	; 0xe8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	22c0      	movs	r2, #192	; 0xc0
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f00d fe0b 	bl	800ef18 <memset>
  if(hi2c->Instance==I2C1)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a26      	ldr	r2, [pc, #152]	; (80013a0 <HAL_I2C_MspInit+0xc4>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d145      	bne.n	8001398 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800130c:	f04f 0208 	mov.w	r2, #8
 8001310:	f04f 0300 	mov.w	r3, #0
 8001314:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001318:	2300      	movs	r3, #0
 800131a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800131e:	f107 0310 	add.w	r3, r7, #16
 8001322:	4618      	mov	r0, r3
 8001324:	f005 fcfc 	bl	8006d20 <HAL_RCCEx_PeriphCLKConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800132e:	f7ff ffb5 	bl	800129c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001332:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <HAL_I2C_MspInit+0xc8>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001338:	4a1a      	ldr	r2, [pc, #104]	; (80013a4 <HAL_I2C_MspInit+0xc8>)
 800133a:	f043 0302 	orr.w	r3, r3, #2
 800133e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001342:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <HAL_I2C_MspInit+0xc8>)
 8001344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001350:	23c0      	movs	r3, #192	; 0xc0
 8001352:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001356:	2312      	movs	r3, #18
 8001358:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001368:	2304      	movs	r3, #4
 800136a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001372:	4619      	mov	r1, r3
 8001374:	480c      	ldr	r0, [pc, #48]	; (80013a8 <HAL_I2C_MspInit+0xcc>)
 8001376:	f003 f973 	bl	8004660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800137a:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <HAL_I2C_MspInit+0xc8>)
 800137c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001380:	4a08      	ldr	r2, [pc, #32]	; (80013a4 <HAL_I2C_MspInit+0xc8>)
 8001382:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001386:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_I2C_MspInit+0xc8>)
 800138c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001398:	bf00      	nop
 800139a:	37e8      	adds	r7, #232	; 0xe8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40005400 	.word	0x40005400
 80013a4:	58024400 	.word	0x58024400
 80013a8:	58020400 	.word	0x58020400

080013ac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b0be      	sub	sp, #248	; 0xf8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013c4:	f107 0320 	add.w	r3, r7, #32
 80013c8:	22c0      	movs	r2, #192	; 0xc0
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f00d fda3 	bl	800ef18 <memset>
  if(hi2s->Instance==SPI1)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a7e      	ldr	r2, [pc, #504]	; (80015d0 <HAL_I2S_MspInit+0x224>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	f040 80f5 	bne.w	80015c8 <HAL_I2S_MspInit+0x21c>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80013de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013e2:	f04f 0300 	mov.w	r3, #0
 80013e6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80013ea:	2301      	movs	r3, #1
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 80013ee:	2310      	movs	r3, #16
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 80013f2:	2304      	movs	r3, #4
 80013f4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80013f6:	2302      	movs	r3, #2
 80013f8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80013fa:	2302      	movs	r3, #2
 80013fc:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80013fe:	23c0      	movs	r3, #192	; 0xc0
 8001400:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001402:	2300      	movs	r3, #0
 8001404:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800140a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001412:	f107 0320 	add.w	r3, r7, #32
 8001416:	4618      	mov	r0, r3
 8001418:	f005 fc82 	bl	8006d20 <HAL_RCCEx_PeriphCLKConfig>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_I2S_MspInit+0x7a>
    {
      Error_Handler();
 8001422:	f7ff ff3b 	bl	800129c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001426:	4b6b      	ldr	r3, [pc, #428]	; (80015d4 <HAL_I2S_MspInit+0x228>)
 8001428:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800142c:	4a69      	ldr	r2, [pc, #420]	; (80015d4 <HAL_I2S_MspInit+0x228>)
 800142e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001432:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001436:	4b67      	ldr	r3, [pc, #412]	; (80015d4 <HAL_I2S_MspInit+0x228>)
 8001438:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800143c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001440:	61fb      	str	r3, [r7, #28]
 8001442:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001444:	4b63      	ldr	r3, [pc, #396]	; (80015d4 <HAL_I2S_MspInit+0x228>)
 8001446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144a:	4a62      	ldr	r2, [pc, #392]	; (80015d4 <HAL_I2S_MspInit+0x228>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001454:	4b5f      	ldr	r3, [pc, #380]	; (80015d4 <HAL_I2S_MspInit+0x228>)
 8001456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	61bb      	str	r3, [r7, #24]
 8001460:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001462:	4b5c      	ldr	r3, [pc, #368]	; (80015d4 <HAL_I2S_MspInit+0x228>)
 8001464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001468:	4a5a      	ldr	r2, [pc, #360]	; (80015d4 <HAL_I2S_MspInit+0x228>)
 800146a:	f043 0304 	orr.w	r3, r3, #4
 800146e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001472:	4b58      	ldr	r3, [pc, #352]	; (80015d4 <HAL_I2S_MspInit+0x228>)
 8001474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001480:	4b54      	ldr	r3, [pc, #336]	; (80015d4 <HAL_I2S_MspInit+0x228>)
 8001482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001486:	4a53      	ldr	r2, [pc, #332]	; (80015d4 <HAL_I2S_MspInit+0x228>)
 8001488:	f043 0308 	orr.w	r3, r3, #8
 800148c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001490:	4b50      	ldr	r3, [pc, #320]	; (80015d4 <HAL_I2S_MspInit+0x228>)
 8001492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800149e:	4b4d      	ldr	r3, [pc, #308]	; (80015d4 <HAL_I2S_MspInit+0x228>)
 80014a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a4:	4a4b      	ldr	r2, [pc, #300]	; (80015d4 <HAL_I2S_MspInit+0x228>)
 80014a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ae:	4b49      	ldr	r3, [pc, #292]	; (80015d4 <HAL_I2S_MspInit+0x228>)
 80014b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> I2S1_MCK
    PA15 (JTDI)     ------> I2S1_WS
    PD7     ------> I2S1_SDO
    PG9     ------> I2S1_SDI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 80014bc:	f248 0320 	movw	r3, #32800	; 0x8020
 80014c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014d6:	2305      	movs	r3, #5
 80014d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014e0:	4619      	mov	r1, r3
 80014e2:	483d      	ldr	r0, [pc, #244]	; (80015d8 <HAL_I2S_MspInit+0x22c>)
 80014e4:	f003 f8bc 	bl	8004660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014e8:	2310      	movs	r3, #16
 80014ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001500:	2305      	movs	r3, #5
 8001502:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001506:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800150a:	4619      	mov	r1, r3
 800150c:	4833      	ldr	r0, [pc, #204]	; (80015dc <HAL_I2S_MspInit+0x230>)
 800150e:	f003 f8a7 	bl	8004660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001512:	2380      	movs	r3, #128	; 0x80
 8001514:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	2302      	movs	r3, #2
 800151a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800152a:	2305      	movs	r3, #5
 800152c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001530:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001534:	4619      	mov	r1, r3
 8001536:	482a      	ldr	r0, [pc, #168]	; (80015e0 <HAL_I2S_MspInit+0x234>)
 8001538:	f003 f892 	bl	8004660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800153c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001540:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001556:	2305      	movs	r3, #5
 8001558:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800155c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001560:	4619      	mov	r1, r3
 8001562:	4820      	ldr	r0, [pc, #128]	; (80015e4 <HAL_I2S_MspInit+0x238>)
 8001564:	f003 f87c 	bl	8004660 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001568:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <HAL_I2S_MspInit+0x23c>)
 800156a:	4a20      	ldr	r2, [pc, #128]	; (80015ec <HAL_I2S_MspInit+0x240>)
 800156c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800156e:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <HAL_I2S_MspInit+0x23c>)
 8001570:	2226      	movs	r2, #38	; 0x26
 8001572:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001574:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <HAL_I2S_MspInit+0x23c>)
 8001576:	2240      	movs	r2, #64	; 0x40
 8001578:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800157a:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <HAL_I2S_MspInit+0x23c>)
 800157c:	2200      	movs	r2, #0
 800157e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <HAL_I2S_MspInit+0x23c>)
 8001582:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001586:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <HAL_I2S_MspInit+0x23c>)
 800158a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800158e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001590:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <HAL_I2S_MspInit+0x23c>)
 8001592:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001596:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <HAL_I2S_MspInit+0x23c>)
 800159a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800159e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <HAL_I2S_MspInit+0x23c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <HAL_I2S_MspInit+0x23c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80015ac:	480e      	ldr	r0, [pc, #56]	; (80015e8 <HAL_I2S_MspInit+0x23c>)
 80015ae:	f000 fc61 	bl	8001e74 <HAL_DMA_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <HAL_I2S_MspInit+0x210>
    {
      Error_Handler();
 80015b8:	f7ff fe70 	bl	800129c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <HAL_I2S_MspInit+0x23c>)
 80015c0:	645a      	str	r2, [r3, #68]	; 0x44
 80015c2:	4a09      	ldr	r2, [pc, #36]	; (80015e8 <HAL_I2S_MspInit+0x23c>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015c8:	bf00      	nop
 80015ca:	37f8      	adds	r7, #248	; 0xf8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40013000 	.word	0x40013000
 80015d4:	58024400 	.word	0x58024400
 80015d8:	58020000 	.word	0x58020000
 80015dc:	58020800 	.word	0x58020800
 80015e0:	58020c00 	.word	0x58020c00
 80015e4:	58021800 	.word	0x58021800
 80015e8:	24000150 	.word	0x24000150
 80015ec:	40020010 	.word	0x40020010

080015f0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b0bc      	sub	sp, #240	; 0xf0
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001608:	f107 0318 	add.w	r3, r7, #24
 800160c:	22c0      	movs	r2, #192	; 0xc0
 800160e:	2100      	movs	r1, #0
 8001610:	4618      	mov	r0, r3
 8001612:	f00d fc81 	bl	800ef18 <memset>
  if(hsd->Instance==SDMMC1)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a38      	ldr	r2, [pc, #224]	; (80016fc <HAL_SD_MspInit+0x10c>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d169      	bne.n	80016f4 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001620:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001624:	f04f 0300 	mov.w	r3, #0
 8001628:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800162c:	2300      	movs	r3, #0
 800162e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001630:	f107 0318 	add.w	r3, r7, #24
 8001634:	4618      	mov	r0, r3
 8001636:	f005 fb73 	bl	8006d20 <HAL_RCCEx_PeriphCLKConfig>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001640:	f7ff fe2c 	bl	800129c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001644:	4b2e      	ldr	r3, [pc, #184]	; (8001700 <HAL_SD_MspInit+0x110>)
 8001646:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800164a:	4a2d      	ldr	r2, [pc, #180]	; (8001700 <HAL_SD_MspInit+0x110>)
 800164c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001650:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001654:	4b2a      	ldr	r3, [pc, #168]	; (8001700 <HAL_SD_MspInit+0x110>)
 8001656:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800165a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001662:	4b27      	ldr	r3, [pc, #156]	; (8001700 <HAL_SD_MspInit+0x110>)
 8001664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001668:	4a25      	ldr	r2, [pc, #148]	; (8001700 <HAL_SD_MspInit+0x110>)
 800166a:	f043 0304 	orr.w	r3, r3, #4
 800166e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001672:	4b23      	ldr	r3, [pc, #140]	; (8001700 <HAL_SD_MspInit+0x110>)
 8001674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001680:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <HAL_SD_MspInit+0x110>)
 8001682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001686:	4a1e      	ldr	r2, [pc, #120]	; (8001700 <HAL_SD_MspInit+0x110>)
 8001688:	f043 0308 	orr.w	r3, r3, #8
 800168c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <HAL_SD_MspInit+0x110>)
 8001692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800169e:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80016a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b2:	2303      	movs	r3, #3
 80016b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80016b8:	230c      	movs	r3, #12
 80016ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016be:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016c2:	4619      	mov	r1, r3
 80016c4:	480f      	ldr	r0, [pc, #60]	; (8001704 <HAL_SD_MspInit+0x114>)
 80016c6:	f002 ffcb 	bl	8004660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016ca:	2304      	movs	r3, #4
 80016cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016dc:	2303      	movs	r3, #3
 80016de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80016e2:	230c      	movs	r3, #12
 80016e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016ec:	4619      	mov	r1, r3
 80016ee:	4806      	ldr	r0, [pc, #24]	; (8001708 <HAL_SD_MspInit+0x118>)
 80016f0:	f002 ffb6 	bl	8004660 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80016f4:	bf00      	nop
 80016f6:	37f0      	adds	r7, #240	; 0xf0
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	52007000 	.word	0x52007000
 8001700:	58024400 	.word	0x58024400
 8001704:	58020800 	.word	0x58020800
 8001708:	58020c00 	.word	0x58020c00

0800170c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800170c:	b580      	push	{r7, lr}
 800170e:	b0b8      	sub	sp, #224	; 0xe0
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001712:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001722:	4b51      	ldr	r3, [pc, #324]	; (8001868 <HAL_FMC_MspInit+0x15c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	f040 8099 	bne.w	800185e <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 800172c:	4b4e      	ldr	r3, [pc, #312]	; (8001868 <HAL_FMC_MspInit+0x15c>)
 800172e:	2201      	movs	r2, #1
 8001730:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001732:	f107 0308 	add.w	r3, r7, #8
 8001736:	22c0      	movs	r2, #192	; 0xc0
 8001738:	2100      	movs	r1, #0
 800173a:	4618      	mov	r0, r3
 800173c:	f00d fbec 	bl	800ef18 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001740:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800174c:	2300      	movs	r3, #0
 800174e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001750:	f107 0308 	add.w	r3, r7, #8
 8001754:	4618      	mov	r0, r3
 8001756:	f005 fae3 	bl	8006d20 <HAL_RCCEx_PeriphCLKConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8001760:	f7ff fd9c 	bl	800129c <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001764:	4b41      	ldr	r3, [pc, #260]	; (800186c <HAL_FMC_MspInit+0x160>)
 8001766:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800176a:	4a40      	ldr	r2, [pc, #256]	; (800186c <HAL_FMC_MspInit+0x160>)
 800176c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001770:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001774:	4b3d      	ldr	r3, [pc, #244]	; (800186c <HAL_FMC_MspInit+0x160>)
 8001776:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800177a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001782:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001786:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001796:	2303      	movs	r3, #3
 8001798:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800179c:	230c      	movs	r3, #12
 800179e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017a2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017a6:	4619      	mov	r1, r3
 80017a8:	4831      	ldr	r0, [pc, #196]	; (8001870 <HAL_FMC_MspInit+0x164>)
 80017aa:	f002 ff59 	bl	8004660 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80017ae:	230d      	movs	r3, #13
 80017b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c0:	2303      	movs	r3, #3
 80017c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017c6:	230c      	movs	r3, #12
 80017c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017d0:	4619      	mov	r1, r3
 80017d2:	4828      	ldr	r0, [pc, #160]	; (8001874 <HAL_FMC_MspInit+0x168>)
 80017d4:	f002 ff44 	bl	8004660 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80017d8:	f248 1337 	movw	r3, #33079	; 0x8137
 80017dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ec:	2303      	movs	r3, #3
 80017ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017f2:	230c      	movs	r3, #12
 80017f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017fc:	4619      	mov	r1, r3
 80017fe:	481e      	ldr	r0, [pc, #120]	; (8001878 <HAL_FMC_MspInit+0x16c>)
 8001800:	f002 ff2e 	bl	8004660 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001804:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001808:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180c:	2302      	movs	r3, #2
 800180e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001818:	2303      	movs	r3, #3
 800181a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800181e:	230c      	movs	r3, #12
 8001820:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001824:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001828:	4619      	mov	r1, r3
 800182a:	4814      	ldr	r0, [pc, #80]	; (800187c <HAL_FMC_MspInit+0x170>)
 800182c:	f002 ff18 	bl	8004660 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001830:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001834:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001838:	2302      	movs	r3, #2
 800183a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800184a:	230c      	movs	r3, #12
 800184c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001850:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001854:	4619      	mov	r1, r3
 8001856:	480a      	ldr	r0, [pc, #40]	; (8001880 <HAL_FMC_MspInit+0x174>)
 8001858:	f002 ff02 	bl	8004660 <HAL_GPIO_Init>
 800185c:	e000      	b.n	8001860 <HAL_FMC_MspInit+0x154>
    return;
 800185e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001860:	37e0      	adds	r7, #224	; 0xe0
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	2400027c 	.word	0x2400027c
 800186c:	58024400 	.word	0x58024400
 8001870:	58021400 	.word	0x58021400
 8001874:	58020800 	.word	0x58020800
 8001878:	58021800 	.word	0x58021800
 800187c:	58021000 	.word	0x58021000
 8001880:	58020c00 	.word	0x58020c00

08001884 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800188c:	f7ff ff3e 	bl	800170c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800189c:	e7fe      	b.n	800189c <NMI_Handler+0x4>

0800189e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <HardFault_Handler+0x4>

080018a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <MemManage_Handler+0x4>

080018aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <BusFault_Handler+0x4>

080018b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <UsageFault_Handler+0x4>

080018b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e4:	f000 f966 	bl	8001bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}

080018ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80018f0:	4802      	ldr	r0, [pc, #8]	; (80018fc <DMA1_Stream0_IRQHandler+0x10>)
 80018f2:	f001 fba3 	bl	800303c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	24000150 	.word	0x24000150

08001900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001908:	4a14      	ldr	r2, [pc, #80]	; (800195c <_sbrk+0x5c>)
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <_sbrk+0x60>)
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <_sbrk+0x64>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d102      	bne.n	8001922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <_sbrk+0x64>)
 800191e:	4a12      	ldr	r2, [pc, #72]	; (8001968 <_sbrk+0x68>)
 8001920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <_sbrk+0x64>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	429a      	cmp	r2, r3
 800192e:	d207      	bcs.n	8001940 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001930:	f00d faa0 	bl	800ee74 <__errno>
 8001934:	4603      	mov	r3, r0
 8001936:	220c      	movs	r2, #12
 8001938:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800193a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800193e:	e009      	b.n	8001954 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <_sbrk+0x64>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001946:	4b07      	ldr	r3, [pc, #28]	; (8001964 <_sbrk+0x64>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	4a05      	ldr	r2, [pc, #20]	; (8001964 <_sbrk+0x64>)
 8001950:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001952:	68fb      	ldr	r3, [r7, #12]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	24080000 	.word	0x24080000
 8001960:	00004000 	.word	0x00004000
 8001964:	24000280 	.word	0x24000280
 8001968:	240004d8 	.word	0x240004d8

0800196c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001970:	4b37      	ldr	r3, [pc, #220]	; (8001a50 <SystemInit+0xe4>)
 8001972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001976:	4a36      	ldr	r2, [pc, #216]	; (8001a50 <SystemInit+0xe4>)
 8001978:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800197c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001980:	4b34      	ldr	r3, [pc, #208]	; (8001a54 <SystemInit+0xe8>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 030f 	and.w	r3, r3, #15
 8001988:	2b06      	cmp	r3, #6
 800198a:	d807      	bhi.n	800199c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800198c:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <SystemInit+0xe8>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f023 030f 	bic.w	r3, r3, #15
 8001994:	4a2f      	ldr	r2, [pc, #188]	; (8001a54 <SystemInit+0xe8>)
 8001996:	f043 0307 	orr.w	r3, r3, #7
 800199a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800199c:	4b2e      	ldr	r3, [pc, #184]	; (8001a58 <SystemInit+0xec>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a2d      	ldr	r2, [pc, #180]	; (8001a58 <SystemInit+0xec>)
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019a8:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <SystemInit+0xec>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80019ae:	4b2a      	ldr	r3, [pc, #168]	; (8001a58 <SystemInit+0xec>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	4929      	ldr	r1, [pc, #164]	; (8001a58 <SystemInit+0xec>)
 80019b4:	4b29      	ldr	r3, [pc, #164]	; (8001a5c <SystemInit+0xf0>)
 80019b6:	4013      	ands	r3, r2
 80019b8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019ba:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <SystemInit+0xe8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d007      	beq.n	80019d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019c6:	4b23      	ldr	r3, [pc, #140]	; (8001a54 <SystemInit+0xe8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 030f 	bic.w	r3, r3, #15
 80019ce:	4a21      	ldr	r2, [pc, #132]	; (8001a54 <SystemInit+0xe8>)
 80019d0:	f043 0307 	orr.w	r3, r3, #7
 80019d4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80019d6:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <SystemInit+0xec>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80019dc:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <SystemInit+0xec>)
 80019de:	2200      	movs	r2, #0
 80019e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80019e2:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <SystemInit+0xec>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80019e8:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <SystemInit+0xec>)
 80019ea:	4a1d      	ldr	r2, [pc, #116]	; (8001a60 <SystemInit+0xf4>)
 80019ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80019ee:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <SystemInit+0xec>)
 80019f0:	4a1c      	ldr	r2, [pc, #112]	; (8001a64 <SystemInit+0xf8>)
 80019f2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80019f4:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <SystemInit+0xec>)
 80019f6:	4a1c      	ldr	r2, [pc, #112]	; (8001a68 <SystemInit+0xfc>)
 80019f8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80019fa:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <SystemInit+0xec>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a00:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <SystemInit+0xec>)
 8001a02:	4a19      	ldr	r2, [pc, #100]	; (8001a68 <SystemInit+0xfc>)
 8001a04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a06:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <SystemInit+0xec>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <SystemInit+0xec>)
 8001a0e:	4a16      	ldr	r2, [pc, #88]	; (8001a68 <SystemInit+0xfc>)
 8001a10:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a12:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <SystemInit+0xec>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a18:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <SystemInit+0xec>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a0e      	ldr	r2, [pc, #56]	; (8001a58 <SystemInit+0xec>)
 8001a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a22:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <SystemInit+0xec>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <SystemInit+0x100>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <SystemInit+0x104>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a36:	d202      	bcs.n	8001a3e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001a38:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <SystemInit+0x108>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <SystemInit+0x10c>)
 8001a40:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001a44:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000ed00 	.word	0xe000ed00
 8001a54:	52002000 	.word	0x52002000
 8001a58:	58024400 	.word	0x58024400
 8001a5c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a60:	02020200 	.word	0x02020200
 8001a64:	01ff0000 	.word	0x01ff0000
 8001a68:	01010280 	.word	0x01010280
 8001a6c:	5c001000 	.word	0x5c001000
 8001a70:	ffff0000 	.word	0xffff0000
 8001a74:	51008108 	.word	0x51008108
 8001a78:	52004000 	.word	0x52004000

08001a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a80:	f7ff ff74 	bl	800196c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a84:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a86:	490d      	ldr	r1, [pc, #52]	; (8001abc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a88:	4a0d      	ldr	r2, [pc, #52]	; (8001ac0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a8c:	e002      	b.n	8001a94 <LoopCopyDataInit>

08001a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a92:	3304      	adds	r3, #4

08001a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a98:	d3f9      	bcc.n	8001a8e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a9c:	4c0a      	ldr	r4, [pc, #40]	; (8001ac8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa0:	e001      	b.n	8001aa6 <LoopFillZerobss>

08001aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa4:	3204      	adds	r2, #4

08001aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa8:	d3fb      	bcc.n	8001aa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aaa:	f00d f9e9 	bl	800ee80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aae:	f7fe fff1 	bl	8000a94 <main>
  bx  lr
 8001ab2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ab4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ab8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001abc:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8001ac0:	080103fc 	.word	0x080103fc
  ldr r2, =_sbss
 8001ac4:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8001ac8:	240004d4 	.word	0x240004d4

08001acc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001acc:	e7fe      	b.n	8001acc <ADC3_IRQHandler>
	...

08001ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad6:	2003      	movs	r0, #3
 8001ad8:	f000 f98c 	bl	8001df4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001adc:	f004 ff60 	bl	80069a0 <HAL_RCC_GetSysClockFreq>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <HAL_Init+0x68>)
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	0a1b      	lsrs	r3, r3, #8
 8001ae8:	f003 030f 	and.w	r3, r3, #15
 8001aec:	4913      	ldr	r1, [pc, #76]	; (8001b3c <HAL_Init+0x6c>)
 8001aee:	5ccb      	ldrb	r3, [r1, r3]
 8001af0:	f003 031f 	and.w	r3, r3, #31
 8001af4:	fa22 f303 	lsr.w	r3, r2, r3
 8001af8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001afa:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <HAL_Init+0x68>)
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	4a0e      	ldr	r2, [pc, #56]	; (8001b3c <HAL_Init+0x6c>)
 8001b04:	5cd3      	ldrb	r3, [r2, r3]
 8001b06:	f003 031f 	and.w	r3, r3, #31
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b10:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <HAL_Init+0x70>)
 8001b12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b14:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <HAL_Init+0x74>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b1a:	200f      	movs	r0, #15
 8001b1c:	f000 f814 	bl	8001b48 <HAL_InitTick>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e002      	b.n	8001b30 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b2a:	f7ff fbbd 	bl	80012a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	58024400 	.word	0x58024400
 8001b3c:	0800ff54 	.word	0x0800ff54
 8001b40:	2400000c 	.word	0x2400000c
 8001b44:	24000008 	.word	0x24000008

08001b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b50:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_InitTick+0x60>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e021      	b.n	8001ba0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b5c:	4b13      	ldr	r3, [pc, #76]	; (8001bac <HAL_InitTick+0x64>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_InitTick+0x60>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	4619      	mov	r1, r3
 8001b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 f971 	bl	8001e5a <HAL_SYSTICK_Config>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e00e      	b.n	8001ba0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b0f      	cmp	r3, #15
 8001b86:	d80a      	bhi.n	8001b9e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b90:	f000 f93b 	bl	8001e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b94:	4a06      	ldr	r2, [pc, #24]	; (8001bb0 <HAL_InitTick+0x68>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	e000      	b.n	8001ba0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	24000014 	.word	0x24000014
 8001bac:	24000008 	.word	0x24000008
 8001bb0:	24000010 	.word	0x24000010

08001bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_IncTick+0x20>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_IncTick+0x24>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <HAL_IncTick+0x24>)
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	24000014 	.word	0x24000014
 8001bd8:	24000284 	.word	0x24000284

08001bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return uwTick;
 8001be0:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <HAL_GetTick+0x14>)
 8001be2:	681b      	ldr	r3, [r3, #0]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	24000284 	.word	0x24000284

08001bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bfc:	f7ff ffee 	bl	8001bdc <HAL_GetTick>
 8001c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c0c:	d005      	beq.n	8001c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_Delay+0x44>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4413      	add	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c1a:	bf00      	nop
 8001c1c:	f7ff ffde 	bl	8001bdc <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d8f7      	bhi.n	8001c1c <HAL_Delay+0x28>
  {
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	24000014 	.word	0x24000014

08001c3c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <HAL_GetREVID+0x14>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	0c1b      	lsrs	r3, r3, #16
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	5c001000 	.word	0x5c001000

08001c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <__NVIC_SetPriorityGrouping+0x40>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c70:	4013      	ands	r3, r2
 8001c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <__NVIC_SetPriorityGrouping+0x44>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c82:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <__NVIC_SetPriorityGrouping+0x40>)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	60d3      	str	r3, [r2, #12]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00
 8001c98:	05fa0000 	.word	0x05fa0000

08001c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	0a1b      	lsrs	r3, r3, #8
 8001ca6:	f003 0307 	and.w	r3, r3, #7
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	db0b      	blt.n	8001ce2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	f003 021f 	and.w	r2, r3, #31
 8001cd0:	4907      	ldr	r1, [pc, #28]	; (8001cf0 <__NVIC_EnableIRQ+0x38>)
 8001cd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cd6:	095b      	lsrs	r3, r3, #5
 8001cd8:	2001      	movs	r0, #1
 8001cda:	fa00 f202 	lsl.w	r2, r0, r2
 8001cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000e100 	.word	0xe000e100

08001cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	6039      	str	r1, [r7, #0]
 8001cfe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	db0a      	blt.n	8001d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	490c      	ldr	r1, [pc, #48]	; (8001d40 <__NVIC_SetPriority+0x4c>)
 8001d0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d12:	0112      	lsls	r2, r2, #4
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	440b      	add	r3, r1
 8001d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d1c:	e00a      	b.n	8001d34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4908      	ldr	r1, [pc, #32]	; (8001d44 <__NVIC_SetPriority+0x50>)
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	3b04      	subs	r3, #4
 8001d2c:	0112      	lsls	r2, r2, #4
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	440b      	add	r3, r1
 8001d32:	761a      	strb	r2, [r3, #24]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000e100 	.word	0xe000e100
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	; 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f1c3 0307 	rsb	r3, r3, #7
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	bf28      	it	cs
 8001d66:	2304      	movcs	r3, #4
 8001d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	2b06      	cmp	r3, #6
 8001d70:	d902      	bls.n	8001d78 <NVIC_EncodePriority+0x30>
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3b03      	subs	r3, #3
 8001d76:	e000      	b.n	8001d7a <NVIC_EncodePriority+0x32>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43da      	mvns	r2, r3
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	43d9      	mvns	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	4313      	orrs	r3, r2
         );
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3724      	adds	r7, #36	; 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc0:	d301      	bcc.n	8001dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00f      	b.n	8001de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <SysTick_Config+0x40>)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dce:	210f      	movs	r1, #15
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dd4:	f7ff ff8e 	bl	8001cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <SysTick_Config+0x40>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dde:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <SysTick_Config+0x40>)
 8001de0:	2207      	movs	r2, #7
 8001de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	e000e010 	.word	0xe000e010

08001df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ff29 	bl	8001c54 <__NVIC_SetPriorityGrouping>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b086      	sub	sp, #24
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	4603      	mov	r3, r0
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e18:	f7ff ff40 	bl	8001c9c <__NVIC_GetPriorityGrouping>
 8001e1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	6978      	ldr	r0, [r7, #20]
 8001e24:	f7ff ff90 	bl	8001d48 <NVIC_EncodePriority>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff5f 	bl	8001cf4 <__NVIC_SetPriority>
}
 8001e36:	bf00      	nop
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff33 	bl	8001cb8 <__NVIC_EnableIRQ>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff ffa4 	bl	8001db0 <SysTick_Config>
 8001e68:	4603      	mov	r3, r0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001e7c:	f7ff feae 	bl	8001bdc <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e316      	b.n	80024ba <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a66      	ldr	r2, [pc, #408]	; (800202c <HAL_DMA_Init+0x1b8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d04a      	beq.n	8001f2c <HAL_DMA_Init+0xb8>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a65      	ldr	r2, [pc, #404]	; (8002030 <HAL_DMA_Init+0x1bc>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d045      	beq.n	8001f2c <HAL_DMA_Init+0xb8>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a63      	ldr	r2, [pc, #396]	; (8002034 <HAL_DMA_Init+0x1c0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d040      	beq.n	8001f2c <HAL_DMA_Init+0xb8>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a62      	ldr	r2, [pc, #392]	; (8002038 <HAL_DMA_Init+0x1c4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d03b      	beq.n	8001f2c <HAL_DMA_Init+0xb8>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a60      	ldr	r2, [pc, #384]	; (800203c <HAL_DMA_Init+0x1c8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d036      	beq.n	8001f2c <HAL_DMA_Init+0xb8>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a5f      	ldr	r2, [pc, #380]	; (8002040 <HAL_DMA_Init+0x1cc>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d031      	beq.n	8001f2c <HAL_DMA_Init+0xb8>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a5d      	ldr	r2, [pc, #372]	; (8002044 <HAL_DMA_Init+0x1d0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d02c      	beq.n	8001f2c <HAL_DMA_Init+0xb8>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a5c      	ldr	r2, [pc, #368]	; (8002048 <HAL_DMA_Init+0x1d4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d027      	beq.n	8001f2c <HAL_DMA_Init+0xb8>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a5a      	ldr	r2, [pc, #360]	; (800204c <HAL_DMA_Init+0x1d8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d022      	beq.n	8001f2c <HAL_DMA_Init+0xb8>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a59      	ldr	r2, [pc, #356]	; (8002050 <HAL_DMA_Init+0x1dc>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d01d      	beq.n	8001f2c <HAL_DMA_Init+0xb8>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a57      	ldr	r2, [pc, #348]	; (8002054 <HAL_DMA_Init+0x1e0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d018      	beq.n	8001f2c <HAL_DMA_Init+0xb8>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a56      	ldr	r2, [pc, #344]	; (8002058 <HAL_DMA_Init+0x1e4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d013      	beq.n	8001f2c <HAL_DMA_Init+0xb8>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a54      	ldr	r2, [pc, #336]	; (800205c <HAL_DMA_Init+0x1e8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00e      	beq.n	8001f2c <HAL_DMA_Init+0xb8>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a53      	ldr	r2, [pc, #332]	; (8002060 <HAL_DMA_Init+0x1ec>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d009      	beq.n	8001f2c <HAL_DMA_Init+0xb8>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a51      	ldr	r2, [pc, #324]	; (8002064 <HAL_DMA_Init+0x1f0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d004      	beq.n	8001f2c <HAL_DMA_Init+0xb8>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a50      	ldr	r2, [pc, #320]	; (8002068 <HAL_DMA_Init+0x1f4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d101      	bne.n	8001f30 <HAL_DMA_Init+0xbc>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <HAL_DMA_Init+0xbe>
 8001f30:	2300      	movs	r3, #0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 813b 	beq.w	80021ae <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a37      	ldr	r2, [pc, #220]	; (800202c <HAL_DMA_Init+0x1b8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d04a      	beq.n	8001fe8 <HAL_DMA_Init+0x174>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a36      	ldr	r2, [pc, #216]	; (8002030 <HAL_DMA_Init+0x1bc>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d045      	beq.n	8001fe8 <HAL_DMA_Init+0x174>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a34      	ldr	r2, [pc, #208]	; (8002034 <HAL_DMA_Init+0x1c0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d040      	beq.n	8001fe8 <HAL_DMA_Init+0x174>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a33      	ldr	r2, [pc, #204]	; (8002038 <HAL_DMA_Init+0x1c4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d03b      	beq.n	8001fe8 <HAL_DMA_Init+0x174>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a31      	ldr	r2, [pc, #196]	; (800203c <HAL_DMA_Init+0x1c8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d036      	beq.n	8001fe8 <HAL_DMA_Init+0x174>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a30      	ldr	r2, [pc, #192]	; (8002040 <HAL_DMA_Init+0x1cc>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d031      	beq.n	8001fe8 <HAL_DMA_Init+0x174>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a2e      	ldr	r2, [pc, #184]	; (8002044 <HAL_DMA_Init+0x1d0>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d02c      	beq.n	8001fe8 <HAL_DMA_Init+0x174>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a2d      	ldr	r2, [pc, #180]	; (8002048 <HAL_DMA_Init+0x1d4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d027      	beq.n	8001fe8 <HAL_DMA_Init+0x174>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a2b      	ldr	r2, [pc, #172]	; (800204c <HAL_DMA_Init+0x1d8>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d022      	beq.n	8001fe8 <HAL_DMA_Init+0x174>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a2a      	ldr	r2, [pc, #168]	; (8002050 <HAL_DMA_Init+0x1dc>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d01d      	beq.n	8001fe8 <HAL_DMA_Init+0x174>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a28      	ldr	r2, [pc, #160]	; (8002054 <HAL_DMA_Init+0x1e0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d018      	beq.n	8001fe8 <HAL_DMA_Init+0x174>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a27      	ldr	r2, [pc, #156]	; (8002058 <HAL_DMA_Init+0x1e4>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d013      	beq.n	8001fe8 <HAL_DMA_Init+0x174>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a25      	ldr	r2, [pc, #148]	; (800205c <HAL_DMA_Init+0x1e8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d00e      	beq.n	8001fe8 <HAL_DMA_Init+0x174>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a24      	ldr	r2, [pc, #144]	; (8002060 <HAL_DMA_Init+0x1ec>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d009      	beq.n	8001fe8 <HAL_DMA_Init+0x174>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a22      	ldr	r2, [pc, #136]	; (8002064 <HAL_DMA_Init+0x1f0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d004      	beq.n	8001fe8 <HAL_DMA_Init+0x174>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a21      	ldr	r2, [pc, #132]	; (8002068 <HAL_DMA_Init+0x1f4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d108      	bne.n	8001ffa <HAL_DMA_Init+0x186>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0201 	bic.w	r2, r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	e007      	b.n	800200a <HAL_DMA_Init+0x196>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0201 	bic.w	r2, r2, #1
 8002008:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800200a:	e02f      	b.n	800206c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800200c:	f7ff fde6 	bl	8001bdc <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b05      	cmp	r3, #5
 8002018:	d928      	bls.n	800206c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2220      	movs	r2, #32
 800201e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2203      	movs	r2, #3
 8002024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e246      	b.n	80024ba <HAL_DMA_Init+0x646>
 800202c:	40020010 	.word	0x40020010
 8002030:	40020028 	.word	0x40020028
 8002034:	40020040 	.word	0x40020040
 8002038:	40020058 	.word	0x40020058
 800203c:	40020070 	.word	0x40020070
 8002040:	40020088 	.word	0x40020088
 8002044:	400200a0 	.word	0x400200a0
 8002048:	400200b8 	.word	0x400200b8
 800204c:	40020410 	.word	0x40020410
 8002050:	40020428 	.word	0x40020428
 8002054:	40020440 	.word	0x40020440
 8002058:	40020458 	.word	0x40020458
 800205c:	40020470 	.word	0x40020470
 8002060:	40020488 	.word	0x40020488
 8002064:	400204a0 	.word	0x400204a0
 8002068:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1c8      	bne.n	800200c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	4b83      	ldr	r3, [pc, #524]	; (8002294 <HAL_DMA_Init+0x420>)
 8002086:	4013      	ands	r3, r2
 8002088:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002092:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800209e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020aa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d107      	bne.n	80020d0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c8:	4313      	orrs	r3, r2
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80020d0:	4b71      	ldr	r3, [pc, #452]	; (8002298 <HAL_DMA_Init+0x424>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4b71      	ldr	r3, [pc, #452]	; (800229c <HAL_DMA_Init+0x428>)
 80020d6:	4013      	ands	r3, r2
 80020d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020dc:	d328      	bcc.n	8002130 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b28      	cmp	r3, #40	; 0x28
 80020e4:	d903      	bls.n	80020ee <HAL_DMA_Init+0x27a>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b2e      	cmp	r3, #46	; 0x2e
 80020ec:	d917      	bls.n	800211e <HAL_DMA_Init+0x2aa>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b3e      	cmp	r3, #62	; 0x3e
 80020f4:	d903      	bls.n	80020fe <HAL_DMA_Init+0x28a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b42      	cmp	r3, #66	; 0x42
 80020fc:	d90f      	bls.n	800211e <HAL_DMA_Init+0x2aa>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b46      	cmp	r3, #70	; 0x46
 8002104:	d903      	bls.n	800210e <HAL_DMA_Init+0x29a>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b48      	cmp	r3, #72	; 0x48
 800210c:	d907      	bls.n	800211e <HAL_DMA_Init+0x2aa>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b4e      	cmp	r3, #78	; 0x4e
 8002114:	d905      	bls.n	8002122 <HAL_DMA_Init+0x2ae>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b52      	cmp	r3, #82	; 0x52
 800211c:	d801      	bhi.n	8002122 <HAL_DMA_Init+0x2ae>
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <HAL_DMA_Init+0x2b0>
 8002122:	2300      	movs	r3, #0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800212e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f023 0307 	bic.w	r3, r3, #7
 8002146:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	4313      	orrs	r3, r2
 8002150:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	2b04      	cmp	r3, #4
 8002158:	d117      	bne.n	800218a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	4313      	orrs	r3, r2
 8002162:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00e      	beq.n	800218a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f002 f8ed 	bl	800434c <DMA_CheckFifoParam>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d008      	beq.n	800218a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2240      	movs	r2, #64	; 0x40
 800217c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e197      	b.n	80024ba <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f002 f828 	bl	80041e8 <DMA_CalcBaseAndBitshift>
 8002198:	4603      	mov	r3, r0
 800219a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a0:	f003 031f 	and.w	r3, r3, #31
 80021a4:	223f      	movs	r2, #63	; 0x3f
 80021a6:	409a      	lsls	r2, r3
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	e0cd      	b.n	800234a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a3b      	ldr	r2, [pc, #236]	; (80022a0 <HAL_DMA_Init+0x42c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d022      	beq.n	80021fe <HAL_DMA_Init+0x38a>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a39      	ldr	r2, [pc, #228]	; (80022a4 <HAL_DMA_Init+0x430>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01d      	beq.n	80021fe <HAL_DMA_Init+0x38a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a38      	ldr	r2, [pc, #224]	; (80022a8 <HAL_DMA_Init+0x434>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d018      	beq.n	80021fe <HAL_DMA_Init+0x38a>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a36      	ldr	r2, [pc, #216]	; (80022ac <HAL_DMA_Init+0x438>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d013      	beq.n	80021fe <HAL_DMA_Init+0x38a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a35      	ldr	r2, [pc, #212]	; (80022b0 <HAL_DMA_Init+0x43c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d00e      	beq.n	80021fe <HAL_DMA_Init+0x38a>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a33      	ldr	r2, [pc, #204]	; (80022b4 <HAL_DMA_Init+0x440>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d009      	beq.n	80021fe <HAL_DMA_Init+0x38a>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a32      	ldr	r2, [pc, #200]	; (80022b8 <HAL_DMA_Init+0x444>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d004      	beq.n	80021fe <HAL_DMA_Init+0x38a>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a30      	ldr	r2, [pc, #192]	; (80022bc <HAL_DMA_Init+0x448>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d101      	bne.n	8002202 <HAL_DMA_Init+0x38e>
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <HAL_DMA_Init+0x390>
 8002202:	2300      	movs	r3, #0
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 8097 	beq.w	8002338 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a24      	ldr	r2, [pc, #144]	; (80022a0 <HAL_DMA_Init+0x42c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d021      	beq.n	8002258 <HAL_DMA_Init+0x3e4>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a22      	ldr	r2, [pc, #136]	; (80022a4 <HAL_DMA_Init+0x430>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d01c      	beq.n	8002258 <HAL_DMA_Init+0x3e4>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a21      	ldr	r2, [pc, #132]	; (80022a8 <HAL_DMA_Init+0x434>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d017      	beq.n	8002258 <HAL_DMA_Init+0x3e4>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a1f      	ldr	r2, [pc, #124]	; (80022ac <HAL_DMA_Init+0x438>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d012      	beq.n	8002258 <HAL_DMA_Init+0x3e4>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a1e      	ldr	r2, [pc, #120]	; (80022b0 <HAL_DMA_Init+0x43c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d00d      	beq.n	8002258 <HAL_DMA_Init+0x3e4>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a1c      	ldr	r2, [pc, #112]	; (80022b4 <HAL_DMA_Init+0x440>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d008      	beq.n	8002258 <HAL_DMA_Init+0x3e4>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a1b      	ldr	r2, [pc, #108]	; (80022b8 <HAL_DMA_Init+0x444>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d003      	beq.n	8002258 <HAL_DMA_Init+0x3e4>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a19      	ldr	r2, [pc, #100]	; (80022bc <HAL_DMA_Init+0x448>)
 8002256:	4293      	cmp	r3, r2
 8002258:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2202      	movs	r2, #2
 800225e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <HAL_DMA_Init+0x44c>)
 8002276:	4013      	ands	r3, r2
 8002278:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2b40      	cmp	r3, #64	; 0x40
 8002280:	d020      	beq.n	80022c4 <HAL_DMA_Init+0x450>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	2b80      	cmp	r3, #128	; 0x80
 8002288:	d102      	bne.n	8002290 <HAL_DMA_Init+0x41c>
 800228a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800228e:	e01a      	b.n	80022c6 <HAL_DMA_Init+0x452>
 8002290:	2300      	movs	r3, #0
 8002292:	e018      	b.n	80022c6 <HAL_DMA_Init+0x452>
 8002294:	fe10803f 	.word	0xfe10803f
 8002298:	5c001000 	.word	0x5c001000
 800229c:	ffff0000 	.word	0xffff0000
 80022a0:	58025408 	.word	0x58025408
 80022a4:	5802541c 	.word	0x5802541c
 80022a8:	58025430 	.word	0x58025430
 80022ac:	58025444 	.word	0x58025444
 80022b0:	58025458 	.word	0x58025458
 80022b4:	5802546c 	.word	0x5802546c
 80022b8:	58025480 	.word	0x58025480
 80022bc:	58025494 	.word	0x58025494
 80022c0:	fffe000f 	.word	0xfffe000f
 80022c4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68d2      	ldr	r2, [r2, #12]
 80022ca:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80022cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80022d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80022dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80022e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80022ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80022f4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	4b6e      	ldr	r3, [pc, #440]	; (80024c4 <HAL_DMA_Init+0x650>)
 800230c:	4413      	add	r3, r2
 800230e:	4a6e      	ldr	r2, [pc, #440]	; (80024c8 <HAL_DMA_Init+0x654>)
 8002310:	fba2 2303 	umull	r2, r3, r2, r3
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	009a      	lsls	r2, r3, #2
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f001 ff63 	bl	80041e8 <DMA_CalcBaseAndBitshift>
 8002322:	4603      	mov	r3, r0
 8002324:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232a:	f003 031f 	and.w	r3, r3, #31
 800232e:	2201      	movs	r2, #1
 8002330:	409a      	lsls	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	e008      	b.n	800234a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2240      	movs	r2, #64	; 0x40
 800233c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2203      	movs	r2, #3
 8002342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e0b7      	b.n	80024ba <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a5f      	ldr	r2, [pc, #380]	; (80024cc <HAL_DMA_Init+0x658>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d072      	beq.n	800243a <HAL_DMA_Init+0x5c6>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a5d      	ldr	r2, [pc, #372]	; (80024d0 <HAL_DMA_Init+0x65c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d06d      	beq.n	800243a <HAL_DMA_Init+0x5c6>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a5c      	ldr	r2, [pc, #368]	; (80024d4 <HAL_DMA_Init+0x660>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d068      	beq.n	800243a <HAL_DMA_Init+0x5c6>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a5a      	ldr	r2, [pc, #360]	; (80024d8 <HAL_DMA_Init+0x664>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d063      	beq.n	800243a <HAL_DMA_Init+0x5c6>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a59      	ldr	r2, [pc, #356]	; (80024dc <HAL_DMA_Init+0x668>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d05e      	beq.n	800243a <HAL_DMA_Init+0x5c6>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a57      	ldr	r2, [pc, #348]	; (80024e0 <HAL_DMA_Init+0x66c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d059      	beq.n	800243a <HAL_DMA_Init+0x5c6>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a56      	ldr	r2, [pc, #344]	; (80024e4 <HAL_DMA_Init+0x670>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d054      	beq.n	800243a <HAL_DMA_Init+0x5c6>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a54      	ldr	r2, [pc, #336]	; (80024e8 <HAL_DMA_Init+0x674>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d04f      	beq.n	800243a <HAL_DMA_Init+0x5c6>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a53      	ldr	r2, [pc, #332]	; (80024ec <HAL_DMA_Init+0x678>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d04a      	beq.n	800243a <HAL_DMA_Init+0x5c6>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a51      	ldr	r2, [pc, #324]	; (80024f0 <HAL_DMA_Init+0x67c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d045      	beq.n	800243a <HAL_DMA_Init+0x5c6>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a50      	ldr	r2, [pc, #320]	; (80024f4 <HAL_DMA_Init+0x680>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d040      	beq.n	800243a <HAL_DMA_Init+0x5c6>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a4e      	ldr	r2, [pc, #312]	; (80024f8 <HAL_DMA_Init+0x684>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d03b      	beq.n	800243a <HAL_DMA_Init+0x5c6>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a4d      	ldr	r2, [pc, #308]	; (80024fc <HAL_DMA_Init+0x688>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d036      	beq.n	800243a <HAL_DMA_Init+0x5c6>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a4b      	ldr	r2, [pc, #300]	; (8002500 <HAL_DMA_Init+0x68c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d031      	beq.n	800243a <HAL_DMA_Init+0x5c6>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a4a      	ldr	r2, [pc, #296]	; (8002504 <HAL_DMA_Init+0x690>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d02c      	beq.n	800243a <HAL_DMA_Init+0x5c6>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a48      	ldr	r2, [pc, #288]	; (8002508 <HAL_DMA_Init+0x694>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d027      	beq.n	800243a <HAL_DMA_Init+0x5c6>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a47      	ldr	r2, [pc, #284]	; (800250c <HAL_DMA_Init+0x698>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d022      	beq.n	800243a <HAL_DMA_Init+0x5c6>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a45      	ldr	r2, [pc, #276]	; (8002510 <HAL_DMA_Init+0x69c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d01d      	beq.n	800243a <HAL_DMA_Init+0x5c6>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a44      	ldr	r2, [pc, #272]	; (8002514 <HAL_DMA_Init+0x6a0>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d018      	beq.n	800243a <HAL_DMA_Init+0x5c6>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a42      	ldr	r2, [pc, #264]	; (8002518 <HAL_DMA_Init+0x6a4>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d013      	beq.n	800243a <HAL_DMA_Init+0x5c6>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a41      	ldr	r2, [pc, #260]	; (800251c <HAL_DMA_Init+0x6a8>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d00e      	beq.n	800243a <HAL_DMA_Init+0x5c6>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a3f      	ldr	r2, [pc, #252]	; (8002520 <HAL_DMA_Init+0x6ac>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d009      	beq.n	800243a <HAL_DMA_Init+0x5c6>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a3e      	ldr	r2, [pc, #248]	; (8002524 <HAL_DMA_Init+0x6b0>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d004      	beq.n	800243a <HAL_DMA_Init+0x5c6>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a3c      	ldr	r2, [pc, #240]	; (8002528 <HAL_DMA_Init+0x6b4>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d101      	bne.n	800243e <HAL_DMA_Init+0x5ca>
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <HAL_DMA_Init+0x5cc>
 800243e:	2300      	movs	r3, #0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d032      	beq.n	80024aa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f001 fffd 	bl	8004444 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b80      	cmp	r3, #128	; 0x80
 8002450:	d102      	bne.n	8002458 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800246c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d010      	beq.n	8002498 <HAL_DMA_Init+0x624>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b08      	cmp	r3, #8
 800247c:	d80c      	bhi.n	8002498 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f002 f87a 	bl	8004578 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	e008      	b.n	80024aa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	a7fdabf8 	.word	0xa7fdabf8
 80024c8:	cccccccd 	.word	0xcccccccd
 80024cc:	40020010 	.word	0x40020010
 80024d0:	40020028 	.word	0x40020028
 80024d4:	40020040 	.word	0x40020040
 80024d8:	40020058 	.word	0x40020058
 80024dc:	40020070 	.word	0x40020070
 80024e0:	40020088 	.word	0x40020088
 80024e4:	400200a0 	.word	0x400200a0
 80024e8:	400200b8 	.word	0x400200b8
 80024ec:	40020410 	.word	0x40020410
 80024f0:	40020428 	.word	0x40020428
 80024f4:	40020440 	.word	0x40020440
 80024f8:	40020458 	.word	0x40020458
 80024fc:	40020470 	.word	0x40020470
 8002500:	40020488 	.word	0x40020488
 8002504:	400204a0 	.word	0x400204a0
 8002508:	400204b8 	.word	0x400204b8
 800250c:	58025408 	.word	0x58025408
 8002510:	5802541c 	.word	0x5802541c
 8002514:	58025430 	.word	0x58025430
 8002518:	58025444 	.word	0x58025444
 800251c:	58025458 	.word	0x58025458
 8002520:	5802546c 	.word	0x5802546c
 8002524:	58025480 	.word	0x58025480
 8002528:	58025494 	.word	0x58025494

0800252c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
 8002538:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e226      	b.n	8002996 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <HAL_DMA_Start_IT+0x2a>
 8002552:	2302      	movs	r3, #2
 8002554:	e21f      	b.n	8002996 <HAL_DMA_Start_IT+0x46a>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b01      	cmp	r3, #1
 8002568:	f040 820a 	bne.w	8002980 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a68      	ldr	r2, [pc, #416]	; (8002720 <HAL_DMA_Start_IT+0x1f4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d04a      	beq.n	800261a <HAL_DMA_Start_IT+0xee>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a66      	ldr	r2, [pc, #408]	; (8002724 <HAL_DMA_Start_IT+0x1f8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d045      	beq.n	800261a <HAL_DMA_Start_IT+0xee>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a65      	ldr	r2, [pc, #404]	; (8002728 <HAL_DMA_Start_IT+0x1fc>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d040      	beq.n	800261a <HAL_DMA_Start_IT+0xee>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a63      	ldr	r2, [pc, #396]	; (800272c <HAL_DMA_Start_IT+0x200>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d03b      	beq.n	800261a <HAL_DMA_Start_IT+0xee>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a62      	ldr	r2, [pc, #392]	; (8002730 <HAL_DMA_Start_IT+0x204>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d036      	beq.n	800261a <HAL_DMA_Start_IT+0xee>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a60      	ldr	r2, [pc, #384]	; (8002734 <HAL_DMA_Start_IT+0x208>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d031      	beq.n	800261a <HAL_DMA_Start_IT+0xee>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a5f      	ldr	r2, [pc, #380]	; (8002738 <HAL_DMA_Start_IT+0x20c>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d02c      	beq.n	800261a <HAL_DMA_Start_IT+0xee>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a5d      	ldr	r2, [pc, #372]	; (800273c <HAL_DMA_Start_IT+0x210>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d027      	beq.n	800261a <HAL_DMA_Start_IT+0xee>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a5c      	ldr	r2, [pc, #368]	; (8002740 <HAL_DMA_Start_IT+0x214>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d022      	beq.n	800261a <HAL_DMA_Start_IT+0xee>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a5a      	ldr	r2, [pc, #360]	; (8002744 <HAL_DMA_Start_IT+0x218>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d01d      	beq.n	800261a <HAL_DMA_Start_IT+0xee>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a59      	ldr	r2, [pc, #356]	; (8002748 <HAL_DMA_Start_IT+0x21c>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d018      	beq.n	800261a <HAL_DMA_Start_IT+0xee>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a57      	ldr	r2, [pc, #348]	; (800274c <HAL_DMA_Start_IT+0x220>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d013      	beq.n	800261a <HAL_DMA_Start_IT+0xee>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a56      	ldr	r2, [pc, #344]	; (8002750 <HAL_DMA_Start_IT+0x224>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d00e      	beq.n	800261a <HAL_DMA_Start_IT+0xee>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a54      	ldr	r2, [pc, #336]	; (8002754 <HAL_DMA_Start_IT+0x228>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d009      	beq.n	800261a <HAL_DMA_Start_IT+0xee>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a53      	ldr	r2, [pc, #332]	; (8002758 <HAL_DMA_Start_IT+0x22c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d004      	beq.n	800261a <HAL_DMA_Start_IT+0xee>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a51      	ldr	r2, [pc, #324]	; (800275c <HAL_DMA_Start_IT+0x230>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d108      	bne.n	800262c <HAL_DMA_Start_IT+0x100>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0201 	bic.w	r2, r2, #1
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	e007      	b.n	800263c <HAL_DMA_Start_IT+0x110>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0201 	bic.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68b9      	ldr	r1, [r7, #8]
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f001 fc24 	bl	8003e90 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a34      	ldr	r2, [pc, #208]	; (8002720 <HAL_DMA_Start_IT+0x1f4>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d04a      	beq.n	80026e8 <HAL_DMA_Start_IT+0x1bc>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a33      	ldr	r2, [pc, #204]	; (8002724 <HAL_DMA_Start_IT+0x1f8>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d045      	beq.n	80026e8 <HAL_DMA_Start_IT+0x1bc>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a31      	ldr	r2, [pc, #196]	; (8002728 <HAL_DMA_Start_IT+0x1fc>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d040      	beq.n	80026e8 <HAL_DMA_Start_IT+0x1bc>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a30      	ldr	r2, [pc, #192]	; (800272c <HAL_DMA_Start_IT+0x200>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d03b      	beq.n	80026e8 <HAL_DMA_Start_IT+0x1bc>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a2e      	ldr	r2, [pc, #184]	; (8002730 <HAL_DMA_Start_IT+0x204>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d036      	beq.n	80026e8 <HAL_DMA_Start_IT+0x1bc>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a2d      	ldr	r2, [pc, #180]	; (8002734 <HAL_DMA_Start_IT+0x208>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d031      	beq.n	80026e8 <HAL_DMA_Start_IT+0x1bc>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a2b      	ldr	r2, [pc, #172]	; (8002738 <HAL_DMA_Start_IT+0x20c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d02c      	beq.n	80026e8 <HAL_DMA_Start_IT+0x1bc>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a2a      	ldr	r2, [pc, #168]	; (800273c <HAL_DMA_Start_IT+0x210>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d027      	beq.n	80026e8 <HAL_DMA_Start_IT+0x1bc>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a28      	ldr	r2, [pc, #160]	; (8002740 <HAL_DMA_Start_IT+0x214>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d022      	beq.n	80026e8 <HAL_DMA_Start_IT+0x1bc>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a27      	ldr	r2, [pc, #156]	; (8002744 <HAL_DMA_Start_IT+0x218>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d01d      	beq.n	80026e8 <HAL_DMA_Start_IT+0x1bc>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a25      	ldr	r2, [pc, #148]	; (8002748 <HAL_DMA_Start_IT+0x21c>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d018      	beq.n	80026e8 <HAL_DMA_Start_IT+0x1bc>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a24      	ldr	r2, [pc, #144]	; (800274c <HAL_DMA_Start_IT+0x220>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d013      	beq.n	80026e8 <HAL_DMA_Start_IT+0x1bc>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a22      	ldr	r2, [pc, #136]	; (8002750 <HAL_DMA_Start_IT+0x224>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00e      	beq.n	80026e8 <HAL_DMA_Start_IT+0x1bc>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a21      	ldr	r2, [pc, #132]	; (8002754 <HAL_DMA_Start_IT+0x228>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d009      	beq.n	80026e8 <HAL_DMA_Start_IT+0x1bc>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a1f      	ldr	r2, [pc, #124]	; (8002758 <HAL_DMA_Start_IT+0x22c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d004      	beq.n	80026e8 <HAL_DMA_Start_IT+0x1bc>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a1e      	ldr	r2, [pc, #120]	; (800275c <HAL_DMA_Start_IT+0x230>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d101      	bne.n	80026ec <HAL_DMA_Start_IT+0x1c0>
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <HAL_DMA_Start_IT+0x1c2>
 80026ec:	2300      	movs	r3, #0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d036      	beq.n	8002760 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f023 021e 	bic.w	r2, r3, #30
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f042 0216 	orr.w	r2, r2, #22
 8002704:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	2b00      	cmp	r3, #0
 800270c:	d03e      	beq.n	800278c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0208 	orr.w	r2, r2, #8
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	e035      	b.n	800278c <HAL_DMA_Start_IT+0x260>
 8002720:	40020010 	.word	0x40020010
 8002724:	40020028 	.word	0x40020028
 8002728:	40020040 	.word	0x40020040
 800272c:	40020058 	.word	0x40020058
 8002730:	40020070 	.word	0x40020070
 8002734:	40020088 	.word	0x40020088
 8002738:	400200a0 	.word	0x400200a0
 800273c:	400200b8 	.word	0x400200b8
 8002740:	40020410 	.word	0x40020410
 8002744:	40020428 	.word	0x40020428
 8002748:	40020440 	.word	0x40020440
 800274c:	40020458 	.word	0x40020458
 8002750:	40020470 	.word	0x40020470
 8002754:	40020488 	.word	0x40020488
 8002758:	400204a0 	.word	0x400204a0
 800275c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 020e 	bic.w	r2, r3, #14
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 020a 	orr.w	r2, r2, #10
 8002772:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	2b00      	cmp	r3, #0
 800277a:	d007      	beq.n	800278c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0204 	orr.w	r2, r2, #4
 800278a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a83      	ldr	r2, [pc, #524]	; (80029a0 <HAL_DMA_Start_IT+0x474>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d072      	beq.n	800287c <HAL_DMA_Start_IT+0x350>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a82      	ldr	r2, [pc, #520]	; (80029a4 <HAL_DMA_Start_IT+0x478>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d06d      	beq.n	800287c <HAL_DMA_Start_IT+0x350>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a80      	ldr	r2, [pc, #512]	; (80029a8 <HAL_DMA_Start_IT+0x47c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d068      	beq.n	800287c <HAL_DMA_Start_IT+0x350>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a7f      	ldr	r2, [pc, #508]	; (80029ac <HAL_DMA_Start_IT+0x480>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d063      	beq.n	800287c <HAL_DMA_Start_IT+0x350>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a7d      	ldr	r2, [pc, #500]	; (80029b0 <HAL_DMA_Start_IT+0x484>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d05e      	beq.n	800287c <HAL_DMA_Start_IT+0x350>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a7c      	ldr	r2, [pc, #496]	; (80029b4 <HAL_DMA_Start_IT+0x488>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d059      	beq.n	800287c <HAL_DMA_Start_IT+0x350>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a7a      	ldr	r2, [pc, #488]	; (80029b8 <HAL_DMA_Start_IT+0x48c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d054      	beq.n	800287c <HAL_DMA_Start_IT+0x350>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a79      	ldr	r2, [pc, #484]	; (80029bc <HAL_DMA_Start_IT+0x490>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d04f      	beq.n	800287c <HAL_DMA_Start_IT+0x350>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a77      	ldr	r2, [pc, #476]	; (80029c0 <HAL_DMA_Start_IT+0x494>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d04a      	beq.n	800287c <HAL_DMA_Start_IT+0x350>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a76      	ldr	r2, [pc, #472]	; (80029c4 <HAL_DMA_Start_IT+0x498>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d045      	beq.n	800287c <HAL_DMA_Start_IT+0x350>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a74      	ldr	r2, [pc, #464]	; (80029c8 <HAL_DMA_Start_IT+0x49c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d040      	beq.n	800287c <HAL_DMA_Start_IT+0x350>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a73      	ldr	r2, [pc, #460]	; (80029cc <HAL_DMA_Start_IT+0x4a0>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d03b      	beq.n	800287c <HAL_DMA_Start_IT+0x350>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a71      	ldr	r2, [pc, #452]	; (80029d0 <HAL_DMA_Start_IT+0x4a4>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d036      	beq.n	800287c <HAL_DMA_Start_IT+0x350>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a70      	ldr	r2, [pc, #448]	; (80029d4 <HAL_DMA_Start_IT+0x4a8>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d031      	beq.n	800287c <HAL_DMA_Start_IT+0x350>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a6e      	ldr	r2, [pc, #440]	; (80029d8 <HAL_DMA_Start_IT+0x4ac>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d02c      	beq.n	800287c <HAL_DMA_Start_IT+0x350>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a6d      	ldr	r2, [pc, #436]	; (80029dc <HAL_DMA_Start_IT+0x4b0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d027      	beq.n	800287c <HAL_DMA_Start_IT+0x350>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a6b      	ldr	r2, [pc, #428]	; (80029e0 <HAL_DMA_Start_IT+0x4b4>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d022      	beq.n	800287c <HAL_DMA_Start_IT+0x350>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a6a      	ldr	r2, [pc, #424]	; (80029e4 <HAL_DMA_Start_IT+0x4b8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d01d      	beq.n	800287c <HAL_DMA_Start_IT+0x350>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a68      	ldr	r2, [pc, #416]	; (80029e8 <HAL_DMA_Start_IT+0x4bc>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d018      	beq.n	800287c <HAL_DMA_Start_IT+0x350>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a67      	ldr	r2, [pc, #412]	; (80029ec <HAL_DMA_Start_IT+0x4c0>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d013      	beq.n	800287c <HAL_DMA_Start_IT+0x350>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a65      	ldr	r2, [pc, #404]	; (80029f0 <HAL_DMA_Start_IT+0x4c4>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00e      	beq.n	800287c <HAL_DMA_Start_IT+0x350>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a64      	ldr	r2, [pc, #400]	; (80029f4 <HAL_DMA_Start_IT+0x4c8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d009      	beq.n	800287c <HAL_DMA_Start_IT+0x350>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a62      	ldr	r2, [pc, #392]	; (80029f8 <HAL_DMA_Start_IT+0x4cc>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d004      	beq.n	800287c <HAL_DMA_Start_IT+0x350>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a61      	ldr	r2, [pc, #388]	; (80029fc <HAL_DMA_Start_IT+0x4d0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d101      	bne.n	8002880 <HAL_DMA_Start_IT+0x354>
 800287c:	2301      	movs	r3, #1
 800287e:	e000      	b.n	8002882 <HAL_DMA_Start_IT+0x356>
 8002880:	2300      	movs	r3, #0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d01a      	beq.n	80028bc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d007      	beq.n	80028a4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800289e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028a2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d007      	beq.n	80028bc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028ba:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a37      	ldr	r2, [pc, #220]	; (80029a0 <HAL_DMA_Start_IT+0x474>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d04a      	beq.n	800295c <HAL_DMA_Start_IT+0x430>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a36      	ldr	r2, [pc, #216]	; (80029a4 <HAL_DMA_Start_IT+0x478>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d045      	beq.n	800295c <HAL_DMA_Start_IT+0x430>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a34      	ldr	r2, [pc, #208]	; (80029a8 <HAL_DMA_Start_IT+0x47c>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d040      	beq.n	800295c <HAL_DMA_Start_IT+0x430>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a33      	ldr	r2, [pc, #204]	; (80029ac <HAL_DMA_Start_IT+0x480>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d03b      	beq.n	800295c <HAL_DMA_Start_IT+0x430>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a31      	ldr	r2, [pc, #196]	; (80029b0 <HAL_DMA_Start_IT+0x484>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d036      	beq.n	800295c <HAL_DMA_Start_IT+0x430>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a30      	ldr	r2, [pc, #192]	; (80029b4 <HAL_DMA_Start_IT+0x488>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d031      	beq.n	800295c <HAL_DMA_Start_IT+0x430>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a2e      	ldr	r2, [pc, #184]	; (80029b8 <HAL_DMA_Start_IT+0x48c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d02c      	beq.n	800295c <HAL_DMA_Start_IT+0x430>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a2d      	ldr	r2, [pc, #180]	; (80029bc <HAL_DMA_Start_IT+0x490>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d027      	beq.n	800295c <HAL_DMA_Start_IT+0x430>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a2b      	ldr	r2, [pc, #172]	; (80029c0 <HAL_DMA_Start_IT+0x494>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d022      	beq.n	800295c <HAL_DMA_Start_IT+0x430>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a2a      	ldr	r2, [pc, #168]	; (80029c4 <HAL_DMA_Start_IT+0x498>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d01d      	beq.n	800295c <HAL_DMA_Start_IT+0x430>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a28      	ldr	r2, [pc, #160]	; (80029c8 <HAL_DMA_Start_IT+0x49c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d018      	beq.n	800295c <HAL_DMA_Start_IT+0x430>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a27      	ldr	r2, [pc, #156]	; (80029cc <HAL_DMA_Start_IT+0x4a0>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d013      	beq.n	800295c <HAL_DMA_Start_IT+0x430>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a25      	ldr	r2, [pc, #148]	; (80029d0 <HAL_DMA_Start_IT+0x4a4>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00e      	beq.n	800295c <HAL_DMA_Start_IT+0x430>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a24      	ldr	r2, [pc, #144]	; (80029d4 <HAL_DMA_Start_IT+0x4a8>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d009      	beq.n	800295c <HAL_DMA_Start_IT+0x430>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a22      	ldr	r2, [pc, #136]	; (80029d8 <HAL_DMA_Start_IT+0x4ac>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d004      	beq.n	800295c <HAL_DMA_Start_IT+0x430>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a21      	ldr	r2, [pc, #132]	; (80029dc <HAL_DMA_Start_IT+0x4b0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d108      	bne.n	800296e <HAL_DMA_Start_IT+0x442>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	e012      	b.n	8002994 <HAL_DMA_Start_IT+0x468>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f042 0201 	orr.w	r2, r2, #1
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	e009      	b.n	8002994 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002986:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002994:	7dfb      	ldrb	r3, [r7, #23]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40020010 	.word	0x40020010
 80029a4:	40020028 	.word	0x40020028
 80029a8:	40020040 	.word	0x40020040
 80029ac:	40020058 	.word	0x40020058
 80029b0:	40020070 	.word	0x40020070
 80029b4:	40020088 	.word	0x40020088
 80029b8:	400200a0 	.word	0x400200a0
 80029bc:	400200b8 	.word	0x400200b8
 80029c0:	40020410 	.word	0x40020410
 80029c4:	40020428 	.word	0x40020428
 80029c8:	40020440 	.word	0x40020440
 80029cc:	40020458 	.word	0x40020458
 80029d0:	40020470 	.word	0x40020470
 80029d4:	40020488 	.word	0x40020488
 80029d8:	400204a0 	.word	0x400204a0
 80029dc:	400204b8 	.word	0x400204b8
 80029e0:	58025408 	.word	0x58025408
 80029e4:	5802541c 	.word	0x5802541c
 80029e8:	58025430 	.word	0x58025430
 80029ec:	58025444 	.word	0x58025444
 80029f0:	58025458 	.word	0x58025458
 80029f4:	5802546c 	.word	0x5802546c
 80029f8:	58025480 	.word	0x58025480
 80029fc:	58025494 	.word	0x58025494

08002a00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002a08:	f7ff f8e8 	bl	8001bdc <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e2dc      	b.n	8002fd2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d008      	beq.n	8002a36 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2280      	movs	r2, #128	; 0x80
 8002a28:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e2cd      	b.n	8002fd2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a76      	ldr	r2, [pc, #472]	; (8002c14 <HAL_DMA_Abort+0x214>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d04a      	beq.n	8002ad6 <HAL_DMA_Abort+0xd6>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a74      	ldr	r2, [pc, #464]	; (8002c18 <HAL_DMA_Abort+0x218>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d045      	beq.n	8002ad6 <HAL_DMA_Abort+0xd6>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a73      	ldr	r2, [pc, #460]	; (8002c1c <HAL_DMA_Abort+0x21c>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d040      	beq.n	8002ad6 <HAL_DMA_Abort+0xd6>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a71      	ldr	r2, [pc, #452]	; (8002c20 <HAL_DMA_Abort+0x220>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d03b      	beq.n	8002ad6 <HAL_DMA_Abort+0xd6>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a70      	ldr	r2, [pc, #448]	; (8002c24 <HAL_DMA_Abort+0x224>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d036      	beq.n	8002ad6 <HAL_DMA_Abort+0xd6>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a6e      	ldr	r2, [pc, #440]	; (8002c28 <HAL_DMA_Abort+0x228>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d031      	beq.n	8002ad6 <HAL_DMA_Abort+0xd6>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a6d      	ldr	r2, [pc, #436]	; (8002c2c <HAL_DMA_Abort+0x22c>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d02c      	beq.n	8002ad6 <HAL_DMA_Abort+0xd6>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a6b      	ldr	r2, [pc, #428]	; (8002c30 <HAL_DMA_Abort+0x230>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d027      	beq.n	8002ad6 <HAL_DMA_Abort+0xd6>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a6a      	ldr	r2, [pc, #424]	; (8002c34 <HAL_DMA_Abort+0x234>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d022      	beq.n	8002ad6 <HAL_DMA_Abort+0xd6>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a68      	ldr	r2, [pc, #416]	; (8002c38 <HAL_DMA_Abort+0x238>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d01d      	beq.n	8002ad6 <HAL_DMA_Abort+0xd6>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a67      	ldr	r2, [pc, #412]	; (8002c3c <HAL_DMA_Abort+0x23c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d018      	beq.n	8002ad6 <HAL_DMA_Abort+0xd6>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a65      	ldr	r2, [pc, #404]	; (8002c40 <HAL_DMA_Abort+0x240>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d013      	beq.n	8002ad6 <HAL_DMA_Abort+0xd6>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a64      	ldr	r2, [pc, #400]	; (8002c44 <HAL_DMA_Abort+0x244>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d00e      	beq.n	8002ad6 <HAL_DMA_Abort+0xd6>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a62      	ldr	r2, [pc, #392]	; (8002c48 <HAL_DMA_Abort+0x248>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d009      	beq.n	8002ad6 <HAL_DMA_Abort+0xd6>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a61      	ldr	r2, [pc, #388]	; (8002c4c <HAL_DMA_Abort+0x24c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d004      	beq.n	8002ad6 <HAL_DMA_Abort+0xd6>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a5f      	ldr	r2, [pc, #380]	; (8002c50 <HAL_DMA_Abort+0x250>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d101      	bne.n	8002ada <HAL_DMA_Abort+0xda>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <HAL_DMA_Abort+0xdc>
 8002ada:	2300      	movs	r3, #0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d013      	beq.n	8002b08 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 021e 	bic.w	r2, r2, #30
 8002aee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695a      	ldr	r2, [r3, #20]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002afe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	e00a      	b.n	8002b1e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 020e 	bic.w	r2, r2, #14
 8002b16:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a3c      	ldr	r2, [pc, #240]	; (8002c14 <HAL_DMA_Abort+0x214>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d072      	beq.n	8002c0e <HAL_DMA_Abort+0x20e>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a3a      	ldr	r2, [pc, #232]	; (8002c18 <HAL_DMA_Abort+0x218>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d06d      	beq.n	8002c0e <HAL_DMA_Abort+0x20e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a39      	ldr	r2, [pc, #228]	; (8002c1c <HAL_DMA_Abort+0x21c>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d068      	beq.n	8002c0e <HAL_DMA_Abort+0x20e>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a37      	ldr	r2, [pc, #220]	; (8002c20 <HAL_DMA_Abort+0x220>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d063      	beq.n	8002c0e <HAL_DMA_Abort+0x20e>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a36      	ldr	r2, [pc, #216]	; (8002c24 <HAL_DMA_Abort+0x224>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d05e      	beq.n	8002c0e <HAL_DMA_Abort+0x20e>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a34      	ldr	r2, [pc, #208]	; (8002c28 <HAL_DMA_Abort+0x228>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d059      	beq.n	8002c0e <HAL_DMA_Abort+0x20e>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a33      	ldr	r2, [pc, #204]	; (8002c2c <HAL_DMA_Abort+0x22c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d054      	beq.n	8002c0e <HAL_DMA_Abort+0x20e>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a31      	ldr	r2, [pc, #196]	; (8002c30 <HAL_DMA_Abort+0x230>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d04f      	beq.n	8002c0e <HAL_DMA_Abort+0x20e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a30      	ldr	r2, [pc, #192]	; (8002c34 <HAL_DMA_Abort+0x234>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d04a      	beq.n	8002c0e <HAL_DMA_Abort+0x20e>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a2e      	ldr	r2, [pc, #184]	; (8002c38 <HAL_DMA_Abort+0x238>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d045      	beq.n	8002c0e <HAL_DMA_Abort+0x20e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a2d      	ldr	r2, [pc, #180]	; (8002c3c <HAL_DMA_Abort+0x23c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d040      	beq.n	8002c0e <HAL_DMA_Abort+0x20e>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a2b      	ldr	r2, [pc, #172]	; (8002c40 <HAL_DMA_Abort+0x240>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d03b      	beq.n	8002c0e <HAL_DMA_Abort+0x20e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a2a      	ldr	r2, [pc, #168]	; (8002c44 <HAL_DMA_Abort+0x244>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d036      	beq.n	8002c0e <HAL_DMA_Abort+0x20e>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a28      	ldr	r2, [pc, #160]	; (8002c48 <HAL_DMA_Abort+0x248>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d031      	beq.n	8002c0e <HAL_DMA_Abort+0x20e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a27      	ldr	r2, [pc, #156]	; (8002c4c <HAL_DMA_Abort+0x24c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d02c      	beq.n	8002c0e <HAL_DMA_Abort+0x20e>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a25      	ldr	r2, [pc, #148]	; (8002c50 <HAL_DMA_Abort+0x250>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d027      	beq.n	8002c0e <HAL_DMA_Abort+0x20e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a24      	ldr	r2, [pc, #144]	; (8002c54 <HAL_DMA_Abort+0x254>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d022      	beq.n	8002c0e <HAL_DMA_Abort+0x20e>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a22      	ldr	r2, [pc, #136]	; (8002c58 <HAL_DMA_Abort+0x258>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d01d      	beq.n	8002c0e <HAL_DMA_Abort+0x20e>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a21      	ldr	r2, [pc, #132]	; (8002c5c <HAL_DMA_Abort+0x25c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d018      	beq.n	8002c0e <HAL_DMA_Abort+0x20e>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a1f      	ldr	r2, [pc, #124]	; (8002c60 <HAL_DMA_Abort+0x260>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d013      	beq.n	8002c0e <HAL_DMA_Abort+0x20e>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a1e      	ldr	r2, [pc, #120]	; (8002c64 <HAL_DMA_Abort+0x264>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00e      	beq.n	8002c0e <HAL_DMA_Abort+0x20e>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a1c      	ldr	r2, [pc, #112]	; (8002c68 <HAL_DMA_Abort+0x268>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d009      	beq.n	8002c0e <HAL_DMA_Abort+0x20e>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a1b      	ldr	r2, [pc, #108]	; (8002c6c <HAL_DMA_Abort+0x26c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d004      	beq.n	8002c0e <HAL_DMA_Abort+0x20e>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a19      	ldr	r2, [pc, #100]	; (8002c70 <HAL_DMA_Abort+0x270>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d132      	bne.n	8002c74 <HAL_DMA_Abort+0x274>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e031      	b.n	8002c76 <HAL_DMA_Abort+0x276>
 8002c12:	bf00      	nop
 8002c14:	40020010 	.word	0x40020010
 8002c18:	40020028 	.word	0x40020028
 8002c1c:	40020040 	.word	0x40020040
 8002c20:	40020058 	.word	0x40020058
 8002c24:	40020070 	.word	0x40020070
 8002c28:	40020088 	.word	0x40020088
 8002c2c:	400200a0 	.word	0x400200a0
 8002c30:	400200b8 	.word	0x400200b8
 8002c34:	40020410 	.word	0x40020410
 8002c38:	40020428 	.word	0x40020428
 8002c3c:	40020440 	.word	0x40020440
 8002c40:	40020458 	.word	0x40020458
 8002c44:	40020470 	.word	0x40020470
 8002c48:	40020488 	.word	0x40020488
 8002c4c:	400204a0 	.word	0x400204a0
 8002c50:	400204b8 	.word	0x400204b8
 8002c54:	58025408 	.word	0x58025408
 8002c58:	5802541c 	.word	0x5802541c
 8002c5c:	58025430 	.word	0x58025430
 8002c60:	58025444 	.word	0x58025444
 8002c64:	58025458 	.word	0x58025458
 8002c68:	5802546c 	.word	0x5802546c
 8002c6c:	58025480 	.word	0x58025480
 8002c70:	58025494 	.word	0x58025494
 8002c74:	2300      	movs	r3, #0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d007      	beq.n	8002c8a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c88:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a6d      	ldr	r2, [pc, #436]	; (8002e44 <HAL_DMA_Abort+0x444>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d04a      	beq.n	8002d2a <HAL_DMA_Abort+0x32a>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a6b      	ldr	r2, [pc, #428]	; (8002e48 <HAL_DMA_Abort+0x448>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d045      	beq.n	8002d2a <HAL_DMA_Abort+0x32a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a6a      	ldr	r2, [pc, #424]	; (8002e4c <HAL_DMA_Abort+0x44c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d040      	beq.n	8002d2a <HAL_DMA_Abort+0x32a>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a68      	ldr	r2, [pc, #416]	; (8002e50 <HAL_DMA_Abort+0x450>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d03b      	beq.n	8002d2a <HAL_DMA_Abort+0x32a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a67      	ldr	r2, [pc, #412]	; (8002e54 <HAL_DMA_Abort+0x454>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d036      	beq.n	8002d2a <HAL_DMA_Abort+0x32a>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a65      	ldr	r2, [pc, #404]	; (8002e58 <HAL_DMA_Abort+0x458>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d031      	beq.n	8002d2a <HAL_DMA_Abort+0x32a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a64      	ldr	r2, [pc, #400]	; (8002e5c <HAL_DMA_Abort+0x45c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d02c      	beq.n	8002d2a <HAL_DMA_Abort+0x32a>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a62      	ldr	r2, [pc, #392]	; (8002e60 <HAL_DMA_Abort+0x460>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d027      	beq.n	8002d2a <HAL_DMA_Abort+0x32a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a61      	ldr	r2, [pc, #388]	; (8002e64 <HAL_DMA_Abort+0x464>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d022      	beq.n	8002d2a <HAL_DMA_Abort+0x32a>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a5f      	ldr	r2, [pc, #380]	; (8002e68 <HAL_DMA_Abort+0x468>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d01d      	beq.n	8002d2a <HAL_DMA_Abort+0x32a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a5e      	ldr	r2, [pc, #376]	; (8002e6c <HAL_DMA_Abort+0x46c>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d018      	beq.n	8002d2a <HAL_DMA_Abort+0x32a>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a5c      	ldr	r2, [pc, #368]	; (8002e70 <HAL_DMA_Abort+0x470>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d013      	beq.n	8002d2a <HAL_DMA_Abort+0x32a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a5b      	ldr	r2, [pc, #364]	; (8002e74 <HAL_DMA_Abort+0x474>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d00e      	beq.n	8002d2a <HAL_DMA_Abort+0x32a>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a59      	ldr	r2, [pc, #356]	; (8002e78 <HAL_DMA_Abort+0x478>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d009      	beq.n	8002d2a <HAL_DMA_Abort+0x32a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a58      	ldr	r2, [pc, #352]	; (8002e7c <HAL_DMA_Abort+0x47c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d004      	beq.n	8002d2a <HAL_DMA_Abort+0x32a>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a56      	ldr	r2, [pc, #344]	; (8002e80 <HAL_DMA_Abort+0x480>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d108      	bne.n	8002d3c <HAL_DMA_Abort+0x33c>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0201 	bic.w	r2, r2, #1
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	e007      	b.n	8002d4c <HAL_DMA_Abort+0x34c>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0201 	bic.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002d4c:	e013      	b.n	8002d76 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d4e:	f7fe ff45 	bl	8001bdc <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b05      	cmp	r3, #5
 8002d5a:	d90c      	bls.n	8002d76 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2203      	movs	r2, #3
 8002d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e12d      	b.n	8002fd2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1e5      	bne.n	8002d4e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a2f      	ldr	r2, [pc, #188]	; (8002e44 <HAL_DMA_Abort+0x444>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d04a      	beq.n	8002e22 <HAL_DMA_Abort+0x422>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a2d      	ldr	r2, [pc, #180]	; (8002e48 <HAL_DMA_Abort+0x448>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d045      	beq.n	8002e22 <HAL_DMA_Abort+0x422>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a2c      	ldr	r2, [pc, #176]	; (8002e4c <HAL_DMA_Abort+0x44c>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d040      	beq.n	8002e22 <HAL_DMA_Abort+0x422>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a2a      	ldr	r2, [pc, #168]	; (8002e50 <HAL_DMA_Abort+0x450>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d03b      	beq.n	8002e22 <HAL_DMA_Abort+0x422>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a29      	ldr	r2, [pc, #164]	; (8002e54 <HAL_DMA_Abort+0x454>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d036      	beq.n	8002e22 <HAL_DMA_Abort+0x422>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a27      	ldr	r2, [pc, #156]	; (8002e58 <HAL_DMA_Abort+0x458>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d031      	beq.n	8002e22 <HAL_DMA_Abort+0x422>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a26      	ldr	r2, [pc, #152]	; (8002e5c <HAL_DMA_Abort+0x45c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d02c      	beq.n	8002e22 <HAL_DMA_Abort+0x422>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a24      	ldr	r2, [pc, #144]	; (8002e60 <HAL_DMA_Abort+0x460>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d027      	beq.n	8002e22 <HAL_DMA_Abort+0x422>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a23      	ldr	r2, [pc, #140]	; (8002e64 <HAL_DMA_Abort+0x464>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d022      	beq.n	8002e22 <HAL_DMA_Abort+0x422>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a21      	ldr	r2, [pc, #132]	; (8002e68 <HAL_DMA_Abort+0x468>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d01d      	beq.n	8002e22 <HAL_DMA_Abort+0x422>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a20      	ldr	r2, [pc, #128]	; (8002e6c <HAL_DMA_Abort+0x46c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d018      	beq.n	8002e22 <HAL_DMA_Abort+0x422>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1e      	ldr	r2, [pc, #120]	; (8002e70 <HAL_DMA_Abort+0x470>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d013      	beq.n	8002e22 <HAL_DMA_Abort+0x422>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a1d      	ldr	r2, [pc, #116]	; (8002e74 <HAL_DMA_Abort+0x474>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d00e      	beq.n	8002e22 <HAL_DMA_Abort+0x422>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a1b      	ldr	r2, [pc, #108]	; (8002e78 <HAL_DMA_Abort+0x478>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d009      	beq.n	8002e22 <HAL_DMA_Abort+0x422>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a1a      	ldr	r2, [pc, #104]	; (8002e7c <HAL_DMA_Abort+0x47c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d004      	beq.n	8002e22 <HAL_DMA_Abort+0x422>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a18      	ldr	r2, [pc, #96]	; (8002e80 <HAL_DMA_Abort+0x480>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d101      	bne.n	8002e26 <HAL_DMA_Abort+0x426>
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <HAL_DMA_Abort+0x428>
 8002e26:	2300      	movs	r3, #0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d02b      	beq.n	8002e84 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e30:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e36:	f003 031f 	and.w	r3, r3, #31
 8002e3a:	223f      	movs	r2, #63	; 0x3f
 8002e3c:	409a      	lsls	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	609a      	str	r2, [r3, #8]
 8002e42:	e02a      	b.n	8002e9a <HAL_DMA_Abort+0x49a>
 8002e44:	40020010 	.word	0x40020010
 8002e48:	40020028 	.word	0x40020028
 8002e4c:	40020040 	.word	0x40020040
 8002e50:	40020058 	.word	0x40020058
 8002e54:	40020070 	.word	0x40020070
 8002e58:	40020088 	.word	0x40020088
 8002e5c:	400200a0 	.word	0x400200a0
 8002e60:	400200b8 	.word	0x400200b8
 8002e64:	40020410 	.word	0x40020410
 8002e68:	40020428 	.word	0x40020428
 8002e6c:	40020440 	.word	0x40020440
 8002e70:	40020458 	.word	0x40020458
 8002e74:	40020470 	.word	0x40020470
 8002e78:	40020488 	.word	0x40020488
 8002e7c:	400204a0 	.word	0x400204a0
 8002e80:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e88:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8e:	f003 031f 	and.w	r3, r3, #31
 8002e92:	2201      	movs	r2, #1
 8002e94:	409a      	lsls	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a4f      	ldr	r2, [pc, #316]	; (8002fdc <HAL_DMA_Abort+0x5dc>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d072      	beq.n	8002f8a <HAL_DMA_Abort+0x58a>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a4d      	ldr	r2, [pc, #308]	; (8002fe0 <HAL_DMA_Abort+0x5e0>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d06d      	beq.n	8002f8a <HAL_DMA_Abort+0x58a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a4c      	ldr	r2, [pc, #304]	; (8002fe4 <HAL_DMA_Abort+0x5e4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d068      	beq.n	8002f8a <HAL_DMA_Abort+0x58a>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a4a      	ldr	r2, [pc, #296]	; (8002fe8 <HAL_DMA_Abort+0x5e8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d063      	beq.n	8002f8a <HAL_DMA_Abort+0x58a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a49      	ldr	r2, [pc, #292]	; (8002fec <HAL_DMA_Abort+0x5ec>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d05e      	beq.n	8002f8a <HAL_DMA_Abort+0x58a>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a47      	ldr	r2, [pc, #284]	; (8002ff0 <HAL_DMA_Abort+0x5f0>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d059      	beq.n	8002f8a <HAL_DMA_Abort+0x58a>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a46      	ldr	r2, [pc, #280]	; (8002ff4 <HAL_DMA_Abort+0x5f4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d054      	beq.n	8002f8a <HAL_DMA_Abort+0x58a>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a44      	ldr	r2, [pc, #272]	; (8002ff8 <HAL_DMA_Abort+0x5f8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d04f      	beq.n	8002f8a <HAL_DMA_Abort+0x58a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a43      	ldr	r2, [pc, #268]	; (8002ffc <HAL_DMA_Abort+0x5fc>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d04a      	beq.n	8002f8a <HAL_DMA_Abort+0x58a>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a41      	ldr	r2, [pc, #260]	; (8003000 <HAL_DMA_Abort+0x600>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d045      	beq.n	8002f8a <HAL_DMA_Abort+0x58a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a40      	ldr	r2, [pc, #256]	; (8003004 <HAL_DMA_Abort+0x604>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d040      	beq.n	8002f8a <HAL_DMA_Abort+0x58a>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a3e      	ldr	r2, [pc, #248]	; (8003008 <HAL_DMA_Abort+0x608>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d03b      	beq.n	8002f8a <HAL_DMA_Abort+0x58a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a3d      	ldr	r2, [pc, #244]	; (800300c <HAL_DMA_Abort+0x60c>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d036      	beq.n	8002f8a <HAL_DMA_Abort+0x58a>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a3b      	ldr	r2, [pc, #236]	; (8003010 <HAL_DMA_Abort+0x610>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d031      	beq.n	8002f8a <HAL_DMA_Abort+0x58a>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a3a      	ldr	r2, [pc, #232]	; (8003014 <HAL_DMA_Abort+0x614>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d02c      	beq.n	8002f8a <HAL_DMA_Abort+0x58a>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a38      	ldr	r2, [pc, #224]	; (8003018 <HAL_DMA_Abort+0x618>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d027      	beq.n	8002f8a <HAL_DMA_Abort+0x58a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a37      	ldr	r2, [pc, #220]	; (800301c <HAL_DMA_Abort+0x61c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d022      	beq.n	8002f8a <HAL_DMA_Abort+0x58a>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a35      	ldr	r2, [pc, #212]	; (8003020 <HAL_DMA_Abort+0x620>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d01d      	beq.n	8002f8a <HAL_DMA_Abort+0x58a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a34      	ldr	r2, [pc, #208]	; (8003024 <HAL_DMA_Abort+0x624>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d018      	beq.n	8002f8a <HAL_DMA_Abort+0x58a>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a32      	ldr	r2, [pc, #200]	; (8003028 <HAL_DMA_Abort+0x628>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d013      	beq.n	8002f8a <HAL_DMA_Abort+0x58a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a31      	ldr	r2, [pc, #196]	; (800302c <HAL_DMA_Abort+0x62c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d00e      	beq.n	8002f8a <HAL_DMA_Abort+0x58a>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a2f      	ldr	r2, [pc, #188]	; (8003030 <HAL_DMA_Abort+0x630>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d009      	beq.n	8002f8a <HAL_DMA_Abort+0x58a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a2e      	ldr	r2, [pc, #184]	; (8003034 <HAL_DMA_Abort+0x634>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d004      	beq.n	8002f8a <HAL_DMA_Abort+0x58a>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a2c      	ldr	r2, [pc, #176]	; (8003038 <HAL_DMA_Abort+0x638>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d101      	bne.n	8002f8e <HAL_DMA_Abort+0x58e>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <HAL_DMA_Abort+0x590>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d015      	beq.n	8002fc0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f9c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00c      	beq.n	8002fc0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fb4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002fbe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40020010 	.word	0x40020010
 8002fe0:	40020028 	.word	0x40020028
 8002fe4:	40020040 	.word	0x40020040
 8002fe8:	40020058 	.word	0x40020058
 8002fec:	40020070 	.word	0x40020070
 8002ff0:	40020088 	.word	0x40020088
 8002ff4:	400200a0 	.word	0x400200a0
 8002ff8:	400200b8 	.word	0x400200b8
 8002ffc:	40020410 	.word	0x40020410
 8003000:	40020428 	.word	0x40020428
 8003004:	40020440 	.word	0x40020440
 8003008:	40020458 	.word	0x40020458
 800300c:	40020470 	.word	0x40020470
 8003010:	40020488 	.word	0x40020488
 8003014:	400204a0 	.word	0x400204a0
 8003018:	400204b8 	.word	0x400204b8
 800301c:	58025408 	.word	0x58025408
 8003020:	5802541c 	.word	0x5802541c
 8003024:	58025430 	.word	0x58025430
 8003028:	58025444 	.word	0x58025444
 800302c:	58025458 	.word	0x58025458
 8003030:	5802546c 	.word	0x5802546c
 8003034:	58025480 	.word	0x58025480
 8003038:	58025494 	.word	0x58025494

0800303c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08a      	sub	sp, #40	; 0x28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003048:	4b67      	ldr	r3, [pc, #412]	; (80031e8 <HAL_DMA_IRQHandler+0x1ac>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a67      	ldr	r2, [pc, #412]	; (80031ec <HAL_DMA_IRQHandler+0x1b0>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	0a9b      	lsrs	r3, r3, #10
 8003054:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003060:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a5f      	ldr	r2, [pc, #380]	; (80031f0 <HAL_DMA_IRQHandler+0x1b4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d04a      	beq.n	800310e <HAL_DMA_IRQHandler+0xd2>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a5d      	ldr	r2, [pc, #372]	; (80031f4 <HAL_DMA_IRQHandler+0x1b8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d045      	beq.n	800310e <HAL_DMA_IRQHandler+0xd2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a5c      	ldr	r2, [pc, #368]	; (80031f8 <HAL_DMA_IRQHandler+0x1bc>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d040      	beq.n	800310e <HAL_DMA_IRQHandler+0xd2>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a5a      	ldr	r2, [pc, #360]	; (80031fc <HAL_DMA_IRQHandler+0x1c0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d03b      	beq.n	800310e <HAL_DMA_IRQHandler+0xd2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a59      	ldr	r2, [pc, #356]	; (8003200 <HAL_DMA_IRQHandler+0x1c4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d036      	beq.n	800310e <HAL_DMA_IRQHandler+0xd2>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a57      	ldr	r2, [pc, #348]	; (8003204 <HAL_DMA_IRQHandler+0x1c8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d031      	beq.n	800310e <HAL_DMA_IRQHandler+0xd2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a56      	ldr	r2, [pc, #344]	; (8003208 <HAL_DMA_IRQHandler+0x1cc>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d02c      	beq.n	800310e <HAL_DMA_IRQHandler+0xd2>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a54      	ldr	r2, [pc, #336]	; (800320c <HAL_DMA_IRQHandler+0x1d0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d027      	beq.n	800310e <HAL_DMA_IRQHandler+0xd2>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a53      	ldr	r2, [pc, #332]	; (8003210 <HAL_DMA_IRQHandler+0x1d4>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d022      	beq.n	800310e <HAL_DMA_IRQHandler+0xd2>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a51      	ldr	r2, [pc, #324]	; (8003214 <HAL_DMA_IRQHandler+0x1d8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d01d      	beq.n	800310e <HAL_DMA_IRQHandler+0xd2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a50      	ldr	r2, [pc, #320]	; (8003218 <HAL_DMA_IRQHandler+0x1dc>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d018      	beq.n	800310e <HAL_DMA_IRQHandler+0xd2>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a4e      	ldr	r2, [pc, #312]	; (800321c <HAL_DMA_IRQHandler+0x1e0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d013      	beq.n	800310e <HAL_DMA_IRQHandler+0xd2>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a4d      	ldr	r2, [pc, #308]	; (8003220 <HAL_DMA_IRQHandler+0x1e4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d00e      	beq.n	800310e <HAL_DMA_IRQHandler+0xd2>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a4b      	ldr	r2, [pc, #300]	; (8003224 <HAL_DMA_IRQHandler+0x1e8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d009      	beq.n	800310e <HAL_DMA_IRQHandler+0xd2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a4a      	ldr	r2, [pc, #296]	; (8003228 <HAL_DMA_IRQHandler+0x1ec>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d004      	beq.n	800310e <HAL_DMA_IRQHandler+0xd2>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a48      	ldr	r2, [pc, #288]	; (800322c <HAL_DMA_IRQHandler+0x1f0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d101      	bne.n	8003112 <HAL_DMA_IRQHandler+0xd6>
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <HAL_DMA_IRQHandler+0xd8>
 8003112:	2300      	movs	r3, #0
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 842b 	beq.w	8003970 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311e:	f003 031f 	and.w	r3, r3, #31
 8003122:	2208      	movs	r2, #8
 8003124:	409a      	lsls	r2, r3
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 80a2 	beq.w	8003274 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a2e      	ldr	r2, [pc, #184]	; (80031f0 <HAL_DMA_IRQHandler+0x1b4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d04a      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x194>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a2d      	ldr	r2, [pc, #180]	; (80031f4 <HAL_DMA_IRQHandler+0x1b8>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d045      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x194>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a2b      	ldr	r2, [pc, #172]	; (80031f8 <HAL_DMA_IRQHandler+0x1bc>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d040      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x194>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a2a      	ldr	r2, [pc, #168]	; (80031fc <HAL_DMA_IRQHandler+0x1c0>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d03b      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x194>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a28      	ldr	r2, [pc, #160]	; (8003200 <HAL_DMA_IRQHandler+0x1c4>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d036      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x194>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a27      	ldr	r2, [pc, #156]	; (8003204 <HAL_DMA_IRQHandler+0x1c8>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d031      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x194>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a25      	ldr	r2, [pc, #148]	; (8003208 <HAL_DMA_IRQHandler+0x1cc>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d02c      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x194>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a24      	ldr	r2, [pc, #144]	; (800320c <HAL_DMA_IRQHandler+0x1d0>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d027      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x194>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a22      	ldr	r2, [pc, #136]	; (8003210 <HAL_DMA_IRQHandler+0x1d4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d022      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x194>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a21      	ldr	r2, [pc, #132]	; (8003214 <HAL_DMA_IRQHandler+0x1d8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d01d      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x194>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a1f      	ldr	r2, [pc, #124]	; (8003218 <HAL_DMA_IRQHandler+0x1dc>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d018      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x194>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a1e      	ldr	r2, [pc, #120]	; (800321c <HAL_DMA_IRQHandler+0x1e0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d013      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x194>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a1c      	ldr	r2, [pc, #112]	; (8003220 <HAL_DMA_IRQHandler+0x1e4>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d00e      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x194>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a1b      	ldr	r2, [pc, #108]	; (8003224 <HAL_DMA_IRQHandler+0x1e8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d009      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x194>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a19      	ldr	r2, [pc, #100]	; (8003228 <HAL_DMA_IRQHandler+0x1ec>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d004      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x194>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a18      	ldr	r2, [pc, #96]	; (800322c <HAL_DMA_IRQHandler+0x1f0>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d12f      	bne.n	8003230 <HAL_DMA_IRQHandler+0x1f4>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	2b00      	cmp	r3, #0
 80031dc:	bf14      	ite	ne
 80031de:	2301      	movne	r3, #1
 80031e0:	2300      	moveq	r3, #0
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	e02e      	b.n	8003244 <HAL_DMA_IRQHandler+0x208>
 80031e6:	bf00      	nop
 80031e8:	24000008 	.word	0x24000008
 80031ec:	1b4e81b5 	.word	0x1b4e81b5
 80031f0:	40020010 	.word	0x40020010
 80031f4:	40020028 	.word	0x40020028
 80031f8:	40020040 	.word	0x40020040
 80031fc:	40020058 	.word	0x40020058
 8003200:	40020070 	.word	0x40020070
 8003204:	40020088 	.word	0x40020088
 8003208:	400200a0 	.word	0x400200a0
 800320c:	400200b8 	.word	0x400200b8
 8003210:	40020410 	.word	0x40020410
 8003214:	40020428 	.word	0x40020428
 8003218:	40020440 	.word	0x40020440
 800321c:	40020458 	.word	0x40020458
 8003220:	40020470 	.word	0x40020470
 8003224:	40020488 	.word	0x40020488
 8003228:	400204a0 	.word	0x400204a0
 800322c:	400204b8 	.word	0x400204b8
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0308 	and.w	r3, r3, #8
 800323a:	2b00      	cmp	r3, #0
 800323c:	bf14      	ite	ne
 800323e:	2301      	movne	r3, #1
 8003240:	2300      	moveq	r3, #0
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d015      	beq.n	8003274 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0204 	bic.w	r2, r2, #4
 8003256:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325c:	f003 031f 	and.w	r3, r3, #31
 8003260:	2208      	movs	r2, #8
 8003262:	409a      	lsls	r2, r3
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326c:	f043 0201 	orr.w	r2, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003278:	f003 031f 	and.w	r3, r3, #31
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	fa22 f303 	lsr.w	r3, r2, r3
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d06e      	beq.n	8003368 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a69      	ldr	r2, [pc, #420]	; (8003434 <HAL_DMA_IRQHandler+0x3f8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d04a      	beq.n	800332a <HAL_DMA_IRQHandler+0x2ee>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a67      	ldr	r2, [pc, #412]	; (8003438 <HAL_DMA_IRQHandler+0x3fc>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d045      	beq.n	800332a <HAL_DMA_IRQHandler+0x2ee>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a66      	ldr	r2, [pc, #408]	; (800343c <HAL_DMA_IRQHandler+0x400>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d040      	beq.n	800332a <HAL_DMA_IRQHandler+0x2ee>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a64      	ldr	r2, [pc, #400]	; (8003440 <HAL_DMA_IRQHandler+0x404>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d03b      	beq.n	800332a <HAL_DMA_IRQHandler+0x2ee>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a63      	ldr	r2, [pc, #396]	; (8003444 <HAL_DMA_IRQHandler+0x408>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d036      	beq.n	800332a <HAL_DMA_IRQHandler+0x2ee>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a61      	ldr	r2, [pc, #388]	; (8003448 <HAL_DMA_IRQHandler+0x40c>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d031      	beq.n	800332a <HAL_DMA_IRQHandler+0x2ee>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a60      	ldr	r2, [pc, #384]	; (800344c <HAL_DMA_IRQHandler+0x410>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d02c      	beq.n	800332a <HAL_DMA_IRQHandler+0x2ee>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a5e      	ldr	r2, [pc, #376]	; (8003450 <HAL_DMA_IRQHandler+0x414>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d027      	beq.n	800332a <HAL_DMA_IRQHandler+0x2ee>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a5d      	ldr	r2, [pc, #372]	; (8003454 <HAL_DMA_IRQHandler+0x418>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d022      	beq.n	800332a <HAL_DMA_IRQHandler+0x2ee>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a5b      	ldr	r2, [pc, #364]	; (8003458 <HAL_DMA_IRQHandler+0x41c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d01d      	beq.n	800332a <HAL_DMA_IRQHandler+0x2ee>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a5a      	ldr	r2, [pc, #360]	; (800345c <HAL_DMA_IRQHandler+0x420>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d018      	beq.n	800332a <HAL_DMA_IRQHandler+0x2ee>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a58      	ldr	r2, [pc, #352]	; (8003460 <HAL_DMA_IRQHandler+0x424>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d013      	beq.n	800332a <HAL_DMA_IRQHandler+0x2ee>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a57      	ldr	r2, [pc, #348]	; (8003464 <HAL_DMA_IRQHandler+0x428>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d00e      	beq.n	800332a <HAL_DMA_IRQHandler+0x2ee>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a55      	ldr	r2, [pc, #340]	; (8003468 <HAL_DMA_IRQHandler+0x42c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d009      	beq.n	800332a <HAL_DMA_IRQHandler+0x2ee>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a54      	ldr	r2, [pc, #336]	; (800346c <HAL_DMA_IRQHandler+0x430>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d004      	beq.n	800332a <HAL_DMA_IRQHandler+0x2ee>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a52      	ldr	r2, [pc, #328]	; (8003470 <HAL_DMA_IRQHandler+0x434>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d10a      	bne.n	8003340 <HAL_DMA_IRQHandler+0x304>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003334:	2b00      	cmp	r3, #0
 8003336:	bf14      	ite	ne
 8003338:	2301      	movne	r3, #1
 800333a:	2300      	moveq	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	e003      	b.n	8003348 <HAL_DMA_IRQHandler+0x30c>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2300      	movs	r3, #0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00d      	beq.n	8003368 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003350:	f003 031f 	and.w	r3, r3, #31
 8003354:	2201      	movs	r2, #1
 8003356:	409a      	lsls	r2, r3
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003360:	f043 0202 	orr.w	r2, r3, #2
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336c:	f003 031f 	and.w	r3, r3, #31
 8003370:	2204      	movs	r2, #4
 8003372:	409a      	lsls	r2, r3
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	4013      	ands	r3, r2
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 808f 	beq.w	800349c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a2c      	ldr	r2, [pc, #176]	; (8003434 <HAL_DMA_IRQHandler+0x3f8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d04a      	beq.n	800341e <HAL_DMA_IRQHandler+0x3e2>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a2a      	ldr	r2, [pc, #168]	; (8003438 <HAL_DMA_IRQHandler+0x3fc>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d045      	beq.n	800341e <HAL_DMA_IRQHandler+0x3e2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a29      	ldr	r2, [pc, #164]	; (800343c <HAL_DMA_IRQHandler+0x400>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d040      	beq.n	800341e <HAL_DMA_IRQHandler+0x3e2>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a27      	ldr	r2, [pc, #156]	; (8003440 <HAL_DMA_IRQHandler+0x404>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d03b      	beq.n	800341e <HAL_DMA_IRQHandler+0x3e2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a26      	ldr	r2, [pc, #152]	; (8003444 <HAL_DMA_IRQHandler+0x408>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d036      	beq.n	800341e <HAL_DMA_IRQHandler+0x3e2>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a24      	ldr	r2, [pc, #144]	; (8003448 <HAL_DMA_IRQHandler+0x40c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d031      	beq.n	800341e <HAL_DMA_IRQHandler+0x3e2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a23      	ldr	r2, [pc, #140]	; (800344c <HAL_DMA_IRQHandler+0x410>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d02c      	beq.n	800341e <HAL_DMA_IRQHandler+0x3e2>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a21      	ldr	r2, [pc, #132]	; (8003450 <HAL_DMA_IRQHandler+0x414>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d027      	beq.n	800341e <HAL_DMA_IRQHandler+0x3e2>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a20      	ldr	r2, [pc, #128]	; (8003454 <HAL_DMA_IRQHandler+0x418>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d022      	beq.n	800341e <HAL_DMA_IRQHandler+0x3e2>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a1e      	ldr	r2, [pc, #120]	; (8003458 <HAL_DMA_IRQHandler+0x41c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d01d      	beq.n	800341e <HAL_DMA_IRQHandler+0x3e2>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a1d      	ldr	r2, [pc, #116]	; (800345c <HAL_DMA_IRQHandler+0x420>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d018      	beq.n	800341e <HAL_DMA_IRQHandler+0x3e2>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a1b      	ldr	r2, [pc, #108]	; (8003460 <HAL_DMA_IRQHandler+0x424>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d013      	beq.n	800341e <HAL_DMA_IRQHandler+0x3e2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a1a      	ldr	r2, [pc, #104]	; (8003464 <HAL_DMA_IRQHandler+0x428>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d00e      	beq.n	800341e <HAL_DMA_IRQHandler+0x3e2>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a18      	ldr	r2, [pc, #96]	; (8003468 <HAL_DMA_IRQHandler+0x42c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d009      	beq.n	800341e <HAL_DMA_IRQHandler+0x3e2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a17      	ldr	r2, [pc, #92]	; (800346c <HAL_DMA_IRQHandler+0x430>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d004      	beq.n	800341e <HAL_DMA_IRQHandler+0x3e2>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a15      	ldr	r2, [pc, #84]	; (8003470 <HAL_DMA_IRQHandler+0x434>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d12a      	bne.n	8003474 <HAL_DMA_IRQHandler+0x438>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	bf14      	ite	ne
 800342c:	2301      	movne	r3, #1
 800342e:	2300      	moveq	r3, #0
 8003430:	b2db      	uxtb	r3, r3
 8003432:	e023      	b.n	800347c <HAL_DMA_IRQHandler+0x440>
 8003434:	40020010 	.word	0x40020010
 8003438:	40020028 	.word	0x40020028
 800343c:	40020040 	.word	0x40020040
 8003440:	40020058 	.word	0x40020058
 8003444:	40020070 	.word	0x40020070
 8003448:	40020088 	.word	0x40020088
 800344c:	400200a0 	.word	0x400200a0
 8003450:	400200b8 	.word	0x400200b8
 8003454:	40020410 	.word	0x40020410
 8003458:	40020428 	.word	0x40020428
 800345c:	40020440 	.word	0x40020440
 8003460:	40020458 	.word	0x40020458
 8003464:	40020470 	.word	0x40020470
 8003468:	40020488 	.word	0x40020488
 800346c:	400204a0 	.word	0x400204a0
 8003470:	400204b8 	.word	0x400204b8
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2300      	movs	r3, #0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00d      	beq.n	800349c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003484:	f003 031f 	and.w	r3, r3, #31
 8003488:	2204      	movs	r2, #4
 800348a:	409a      	lsls	r2, r3
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003494:	f043 0204 	orr.w	r2, r3, #4
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a0:	f003 031f 	and.w	r3, r3, #31
 80034a4:	2210      	movs	r2, #16
 80034a6:	409a      	lsls	r2, r3
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 80a6 	beq.w	80035fe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a85      	ldr	r2, [pc, #532]	; (80036cc <HAL_DMA_IRQHandler+0x690>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d04a      	beq.n	8003552 <HAL_DMA_IRQHandler+0x516>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a83      	ldr	r2, [pc, #524]	; (80036d0 <HAL_DMA_IRQHandler+0x694>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d045      	beq.n	8003552 <HAL_DMA_IRQHandler+0x516>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a82      	ldr	r2, [pc, #520]	; (80036d4 <HAL_DMA_IRQHandler+0x698>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d040      	beq.n	8003552 <HAL_DMA_IRQHandler+0x516>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a80      	ldr	r2, [pc, #512]	; (80036d8 <HAL_DMA_IRQHandler+0x69c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d03b      	beq.n	8003552 <HAL_DMA_IRQHandler+0x516>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a7f      	ldr	r2, [pc, #508]	; (80036dc <HAL_DMA_IRQHandler+0x6a0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d036      	beq.n	8003552 <HAL_DMA_IRQHandler+0x516>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a7d      	ldr	r2, [pc, #500]	; (80036e0 <HAL_DMA_IRQHandler+0x6a4>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d031      	beq.n	8003552 <HAL_DMA_IRQHandler+0x516>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a7c      	ldr	r2, [pc, #496]	; (80036e4 <HAL_DMA_IRQHandler+0x6a8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d02c      	beq.n	8003552 <HAL_DMA_IRQHandler+0x516>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a7a      	ldr	r2, [pc, #488]	; (80036e8 <HAL_DMA_IRQHandler+0x6ac>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d027      	beq.n	8003552 <HAL_DMA_IRQHandler+0x516>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a79      	ldr	r2, [pc, #484]	; (80036ec <HAL_DMA_IRQHandler+0x6b0>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d022      	beq.n	8003552 <HAL_DMA_IRQHandler+0x516>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a77      	ldr	r2, [pc, #476]	; (80036f0 <HAL_DMA_IRQHandler+0x6b4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d01d      	beq.n	8003552 <HAL_DMA_IRQHandler+0x516>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a76      	ldr	r2, [pc, #472]	; (80036f4 <HAL_DMA_IRQHandler+0x6b8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d018      	beq.n	8003552 <HAL_DMA_IRQHandler+0x516>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a74      	ldr	r2, [pc, #464]	; (80036f8 <HAL_DMA_IRQHandler+0x6bc>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d013      	beq.n	8003552 <HAL_DMA_IRQHandler+0x516>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a73      	ldr	r2, [pc, #460]	; (80036fc <HAL_DMA_IRQHandler+0x6c0>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00e      	beq.n	8003552 <HAL_DMA_IRQHandler+0x516>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a71      	ldr	r2, [pc, #452]	; (8003700 <HAL_DMA_IRQHandler+0x6c4>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d009      	beq.n	8003552 <HAL_DMA_IRQHandler+0x516>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a70      	ldr	r2, [pc, #448]	; (8003704 <HAL_DMA_IRQHandler+0x6c8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d004      	beq.n	8003552 <HAL_DMA_IRQHandler+0x516>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a6e      	ldr	r2, [pc, #440]	; (8003708 <HAL_DMA_IRQHandler+0x6cc>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d10a      	bne.n	8003568 <HAL_DMA_IRQHandler+0x52c>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0308 	and.w	r3, r3, #8
 800355c:	2b00      	cmp	r3, #0
 800355e:	bf14      	ite	ne
 8003560:	2301      	movne	r3, #1
 8003562:	2300      	moveq	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	e009      	b.n	800357c <HAL_DMA_IRQHandler+0x540>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0304 	and.w	r3, r3, #4
 8003572:	2b00      	cmp	r3, #0
 8003574:	bf14      	ite	ne
 8003576:	2301      	movne	r3, #1
 8003578:	2300      	moveq	r3, #0
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	d03e      	beq.n	80035fe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003584:	f003 031f 	and.w	r3, r3, #31
 8003588:	2210      	movs	r2, #16
 800358a:	409a      	lsls	r2, r3
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d018      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d108      	bne.n	80035be <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d024      	beq.n	80035fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	4798      	blx	r3
 80035bc:	e01f      	b.n	80035fe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d01b      	beq.n	80035fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	4798      	blx	r3
 80035ce:	e016      	b.n	80035fe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d107      	bne.n	80035ee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0208 	bic.w	r2, r2, #8
 80035ec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003602:	f003 031f 	and.w	r3, r3, #31
 8003606:	2220      	movs	r2, #32
 8003608:	409a      	lsls	r2, r3
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	4013      	ands	r3, r2
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 8110 	beq.w	8003834 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a2c      	ldr	r2, [pc, #176]	; (80036cc <HAL_DMA_IRQHandler+0x690>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d04a      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x678>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a2b      	ldr	r2, [pc, #172]	; (80036d0 <HAL_DMA_IRQHandler+0x694>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d045      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x678>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a29      	ldr	r2, [pc, #164]	; (80036d4 <HAL_DMA_IRQHandler+0x698>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d040      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x678>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a28      	ldr	r2, [pc, #160]	; (80036d8 <HAL_DMA_IRQHandler+0x69c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d03b      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x678>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a26      	ldr	r2, [pc, #152]	; (80036dc <HAL_DMA_IRQHandler+0x6a0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d036      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x678>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a25      	ldr	r2, [pc, #148]	; (80036e0 <HAL_DMA_IRQHandler+0x6a4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d031      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x678>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a23      	ldr	r2, [pc, #140]	; (80036e4 <HAL_DMA_IRQHandler+0x6a8>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d02c      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x678>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a22      	ldr	r2, [pc, #136]	; (80036e8 <HAL_DMA_IRQHandler+0x6ac>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d027      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x678>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a20      	ldr	r2, [pc, #128]	; (80036ec <HAL_DMA_IRQHandler+0x6b0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d022      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x678>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a1f      	ldr	r2, [pc, #124]	; (80036f0 <HAL_DMA_IRQHandler+0x6b4>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d01d      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x678>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a1d      	ldr	r2, [pc, #116]	; (80036f4 <HAL_DMA_IRQHandler+0x6b8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d018      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x678>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1c      	ldr	r2, [pc, #112]	; (80036f8 <HAL_DMA_IRQHandler+0x6bc>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d013      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x678>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a1a      	ldr	r2, [pc, #104]	; (80036fc <HAL_DMA_IRQHandler+0x6c0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d00e      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x678>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a19      	ldr	r2, [pc, #100]	; (8003700 <HAL_DMA_IRQHandler+0x6c4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d009      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x678>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a17      	ldr	r2, [pc, #92]	; (8003704 <HAL_DMA_IRQHandler+0x6c8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d004      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x678>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a16      	ldr	r2, [pc, #88]	; (8003708 <HAL_DMA_IRQHandler+0x6cc>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d12b      	bne.n	800370c <HAL_DMA_IRQHandler+0x6d0>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0310 	and.w	r3, r3, #16
 80036be:	2b00      	cmp	r3, #0
 80036c0:	bf14      	ite	ne
 80036c2:	2301      	movne	r3, #1
 80036c4:	2300      	moveq	r3, #0
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	e02a      	b.n	8003720 <HAL_DMA_IRQHandler+0x6e4>
 80036ca:	bf00      	nop
 80036cc:	40020010 	.word	0x40020010
 80036d0:	40020028 	.word	0x40020028
 80036d4:	40020040 	.word	0x40020040
 80036d8:	40020058 	.word	0x40020058
 80036dc:	40020070 	.word	0x40020070
 80036e0:	40020088 	.word	0x40020088
 80036e4:	400200a0 	.word	0x400200a0
 80036e8:	400200b8 	.word	0x400200b8
 80036ec:	40020410 	.word	0x40020410
 80036f0:	40020428 	.word	0x40020428
 80036f4:	40020440 	.word	0x40020440
 80036f8:	40020458 	.word	0x40020458
 80036fc:	40020470 	.word	0x40020470
 8003700:	40020488 	.word	0x40020488
 8003704:	400204a0 	.word	0x400204a0
 8003708:	400204b8 	.word	0x400204b8
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	bf14      	ite	ne
 800371a:	2301      	movne	r3, #1
 800371c:	2300      	moveq	r3, #0
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 8087 	beq.w	8003834 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372a:	f003 031f 	and.w	r3, r3, #31
 800372e:	2220      	movs	r2, #32
 8003730:	409a      	lsls	r2, r3
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b04      	cmp	r3, #4
 8003740:	d139      	bne.n	80037b6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0216 	bic.w	r2, r2, #22
 8003750:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695a      	ldr	r2, [r3, #20]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003760:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	2b00      	cmp	r3, #0
 8003768:	d103      	bne.n	8003772 <HAL_DMA_IRQHandler+0x736>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800376e:	2b00      	cmp	r3, #0
 8003770:	d007      	beq.n	8003782 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0208 	bic.w	r2, r2, #8
 8003780:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003786:	f003 031f 	and.w	r3, r3, #31
 800378a:	223f      	movs	r2, #63	; 0x3f
 800378c:	409a      	lsls	r2, r3
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 834a 	beq.w	8003e40 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	4798      	blx	r3
          }
          return;
 80037b4:	e344      	b.n	8003e40 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d018      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d108      	bne.n	80037e4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d02c      	beq.n	8003834 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	4798      	blx	r3
 80037e2:	e027      	b.n	8003834 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d023      	beq.n	8003834 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	4798      	blx	r3
 80037f4:	e01e      	b.n	8003834 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10f      	bne.n	8003824 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0210 	bic.w	r2, r2, #16
 8003812:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 8306 	beq.w	8003e4a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 8088 	beq.w	800395c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2204      	movs	r2, #4
 8003850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a7a      	ldr	r2, [pc, #488]	; (8003a44 <HAL_DMA_IRQHandler+0xa08>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d04a      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x8b8>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a79      	ldr	r2, [pc, #484]	; (8003a48 <HAL_DMA_IRQHandler+0xa0c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d045      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x8b8>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a77      	ldr	r2, [pc, #476]	; (8003a4c <HAL_DMA_IRQHandler+0xa10>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d040      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x8b8>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a76      	ldr	r2, [pc, #472]	; (8003a50 <HAL_DMA_IRQHandler+0xa14>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d03b      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x8b8>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a74      	ldr	r2, [pc, #464]	; (8003a54 <HAL_DMA_IRQHandler+0xa18>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d036      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x8b8>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a73      	ldr	r2, [pc, #460]	; (8003a58 <HAL_DMA_IRQHandler+0xa1c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d031      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x8b8>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a71      	ldr	r2, [pc, #452]	; (8003a5c <HAL_DMA_IRQHandler+0xa20>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d02c      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x8b8>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a70      	ldr	r2, [pc, #448]	; (8003a60 <HAL_DMA_IRQHandler+0xa24>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d027      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x8b8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a6e      	ldr	r2, [pc, #440]	; (8003a64 <HAL_DMA_IRQHandler+0xa28>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d022      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x8b8>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a6d      	ldr	r2, [pc, #436]	; (8003a68 <HAL_DMA_IRQHandler+0xa2c>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d01d      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x8b8>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a6b      	ldr	r2, [pc, #428]	; (8003a6c <HAL_DMA_IRQHandler+0xa30>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d018      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x8b8>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a6a      	ldr	r2, [pc, #424]	; (8003a70 <HAL_DMA_IRQHandler+0xa34>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d013      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x8b8>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a68      	ldr	r2, [pc, #416]	; (8003a74 <HAL_DMA_IRQHandler+0xa38>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00e      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x8b8>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a67      	ldr	r2, [pc, #412]	; (8003a78 <HAL_DMA_IRQHandler+0xa3c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d009      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x8b8>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a65      	ldr	r2, [pc, #404]	; (8003a7c <HAL_DMA_IRQHandler+0xa40>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d004      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x8b8>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a64      	ldr	r2, [pc, #400]	; (8003a80 <HAL_DMA_IRQHandler+0xa44>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d108      	bne.n	8003906 <HAL_DMA_IRQHandler+0x8ca>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0201 	bic.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	e007      	b.n	8003916 <HAL_DMA_IRQHandler+0x8da>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0201 	bic.w	r2, r2, #1
 8003914:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	3301      	adds	r3, #1
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800391e:	429a      	cmp	r2, r3
 8003920:	d307      	bcc.n	8003932 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1f2      	bne.n	8003916 <HAL_DMA_IRQHandler+0x8da>
 8003930:	e000      	b.n	8003934 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003932:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d004      	beq.n	800394c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2203      	movs	r2, #3
 8003946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800394a:	e003      	b.n	8003954 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 8272 	beq.w	8003e4a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	4798      	blx	r3
 800396e:	e26c      	b.n	8003e4a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a43      	ldr	r2, [pc, #268]	; (8003a84 <HAL_DMA_IRQHandler+0xa48>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d022      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x984>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a42      	ldr	r2, [pc, #264]	; (8003a88 <HAL_DMA_IRQHandler+0xa4c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d01d      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x984>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a40      	ldr	r2, [pc, #256]	; (8003a8c <HAL_DMA_IRQHandler+0xa50>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d018      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x984>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a3f      	ldr	r2, [pc, #252]	; (8003a90 <HAL_DMA_IRQHandler+0xa54>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d013      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x984>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a3d      	ldr	r2, [pc, #244]	; (8003a94 <HAL_DMA_IRQHandler+0xa58>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00e      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x984>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a3c      	ldr	r2, [pc, #240]	; (8003a98 <HAL_DMA_IRQHandler+0xa5c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d009      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x984>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a3a      	ldr	r2, [pc, #232]	; (8003a9c <HAL_DMA_IRQHandler+0xa60>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d004      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x984>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a39      	ldr	r2, [pc, #228]	; (8003aa0 <HAL_DMA_IRQHandler+0xa64>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d101      	bne.n	80039c4 <HAL_DMA_IRQHandler+0x988>
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <HAL_DMA_IRQHandler+0x98a>
 80039c4:	2300      	movs	r3, #0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 823f 	beq.w	8003e4a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d8:	f003 031f 	and.w	r3, r3, #31
 80039dc:	2204      	movs	r2, #4
 80039de:	409a      	lsls	r2, r3
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	4013      	ands	r3, r2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 80cd 	beq.w	8003b84 <HAL_DMA_IRQHandler+0xb48>
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80c7 	beq.w	8003b84 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fa:	f003 031f 	and.w	r3, r3, #31
 80039fe:	2204      	movs	r2, #4
 8003a00:	409a      	lsls	r2, r3
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d049      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 8210 	beq.w	8003e44 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a2c:	e20a      	b.n	8003e44 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 8206 	beq.w	8003e44 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a40:	e200      	b.n	8003e44 <HAL_DMA_IRQHandler+0xe08>
 8003a42:	bf00      	nop
 8003a44:	40020010 	.word	0x40020010
 8003a48:	40020028 	.word	0x40020028
 8003a4c:	40020040 	.word	0x40020040
 8003a50:	40020058 	.word	0x40020058
 8003a54:	40020070 	.word	0x40020070
 8003a58:	40020088 	.word	0x40020088
 8003a5c:	400200a0 	.word	0x400200a0
 8003a60:	400200b8 	.word	0x400200b8
 8003a64:	40020410 	.word	0x40020410
 8003a68:	40020428 	.word	0x40020428
 8003a6c:	40020440 	.word	0x40020440
 8003a70:	40020458 	.word	0x40020458
 8003a74:	40020470 	.word	0x40020470
 8003a78:	40020488 	.word	0x40020488
 8003a7c:	400204a0 	.word	0x400204a0
 8003a80:	400204b8 	.word	0x400204b8
 8003a84:	58025408 	.word	0x58025408
 8003a88:	5802541c 	.word	0x5802541c
 8003a8c:	58025430 	.word	0x58025430
 8003a90:	58025444 	.word	0x58025444
 8003a94:	58025458 	.word	0x58025458
 8003a98:	5802546c 	.word	0x5802546c
 8003a9c:	58025480 	.word	0x58025480
 8003aa0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d160      	bne.n	8003b70 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a7f      	ldr	r2, [pc, #508]	; (8003cb0 <HAL_DMA_IRQHandler+0xc74>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d04a      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb12>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a7d      	ldr	r2, [pc, #500]	; (8003cb4 <HAL_DMA_IRQHandler+0xc78>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d045      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb12>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a7c      	ldr	r2, [pc, #496]	; (8003cb8 <HAL_DMA_IRQHandler+0xc7c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d040      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb12>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a7a      	ldr	r2, [pc, #488]	; (8003cbc <HAL_DMA_IRQHandler+0xc80>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d03b      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb12>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a79      	ldr	r2, [pc, #484]	; (8003cc0 <HAL_DMA_IRQHandler+0xc84>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d036      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb12>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a77      	ldr	r2, [pc, #476]	; (8003cc4 <HAL_DMA_IRQHandler+0xc88>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d031      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb12>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a76      	ldr	r2, [pc, #472]	; (8003cc8 <HAL_DMA_IRQHandler+0xc8c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d02c      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb12>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a74      	ldr	r2, [pc, #464]	; (8003ccc <HAL_DMA_IRQHandler+0xc90>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d027      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb12>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a73      	ldr	r2, [pc, #460]	; (8003cd0 <HAL_DMA_IRQHandler+0xc94>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d022      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb12>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a71      	ldr	r2, [pc, #452]	; (8003cd4 <HAL_DMA_IRQHandler+0xc98>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d01d      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb12>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a70      	ldr	r2, [pc, #448]	; (8003cd8 <HAL_DMA_IRQHandler+0xc9c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d018      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb12>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a6e      	ldr	r2, [pc, #440]	; (8003cdc <HAL_DMA_IRQHandler+0xca0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d013      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb12>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a6d      	ldr	r2, [pc, #436]	; (8003ce0 <HAL_DMA_IRQHandler+0xca4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d00e      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb12>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a6b      	ldr	r2, [pc, #428]	; (8003ce4 <HAL_DMA_IRQHandler+0xca8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d009      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb12>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a6a      	ldr	r2, [pc, #424]	; (8003ce8 <HAL_DMA_IRQHandler+0xcac>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d004      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb12>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a68      	ldr	r2, [pc, #416]	; (8003cec <HAL_DMA_IRQHandler+0xcb0>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d108      	bne.n	8003b60 <HAL_DMA_IRQHandler+0xb24>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0208 	bic.w	r2, r2, #8
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	e007      	b.n	8003b70 <HAL_DMA_IRQHandler+0xb34>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0204 	bic.w	r2, r2, #4
 8003b6e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 8165 	beq.w	8003e44 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b82:	e15f      	b.n	8003e44 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b88:	f003 031f 	and.w	r3, r3, #31
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	409a      	lsls	r2, r3
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	4013      	ands	r3, r2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 80c5 	beq.w	8003d24 <HAL_DMA_IRQHandler+0xce8>
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 80bf 	beq.w	8003d24 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003baa:	f003 031f 	and.w	r3, r3, #31
 8003bae:	2202      	movs	r2, #2
 8003bb0:	409a      	lsls	r2, r3
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d018      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d109      	bne.n	8003bde <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 813a 	beq.w	8003e48 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bdc:	e134      	b.n	8003e48 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 8130 	beq.w	8003e48 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bf0:	e12a      	b.n	8003e48 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f040 8089 	bne.w	8003d10 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a2b      	ldr	r2, [pc, #172]	; (8003cb0 <HAL_DMA_IRQHandler+0xc74>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d04a      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xc62>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a29      	ldr	r2, [pc, #164]	; (8003cb4 <HAL_DMA_IRQHandler+0xc78>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d045      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xc62>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a28      	ldr	r2, [pc, #160]	; (8003cb8 <HAL_DMA_IRQHandler+0xc7c>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d040      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xc62>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a26      	ldr	r2, [pc, #152]	; (8003cbc <HAL_DMA_IRQHandler+0xc80>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d03b      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xc62>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a25      	ldr	r2, [pc, #148]	; (8003cc0 <HAL_DMA_IRQHandler+0xc84>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d036      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xc62>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a23      	ldr	r2, [pc, #140]	; (8003cc4 <HAL_DMA_IRQHandler+0xc88>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d031      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xc62>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a22      	ldr	r2, [pc, #136]	; (8003cc8 <HAL_DMA_IRQHandler+0xc8c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d02c      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xc62>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a20      	ldr	r2, [pc, #128]	; (8003ccc <HAL_DMA_IRQHandler+0xc90>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d027      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xc62>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a1f      	ldr	r2, [pc, #124]	; (8003cd0 <HAL_DMA_IRQHandler+0xc94>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d022      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xc62>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a1d      	ldr	r2, [pc, #116]	; (8003cd4 <HAL_DMA_IRQHandler+0xc98>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d01d      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xc62>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a1c      	ldr	r2, [pc, #112]	; (8003cd8 <HAL_DMA_IRQHandler+0xc9c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d018      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xc62>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a1a      	ldr	r2, [pc, #104]	; (8003cdc <HAL_DMA_IRQHandler+0xca0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d013      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xc62>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a19      	ldr	r2, [pc, #100]	; (8003ce0 <HAL_DMA_IRQHandler+0xca4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d00e      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xc62>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a17      	ldr	r2, [pc, #92]	; (8003ce4 <HAL_DMA_IRQHandler+0xca8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d009      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xc62>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a16      	ldr	r2, [pc, #88]	; (8003ce8 <HAL_DMA_IRQHandler+0xcac>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d004      	beq.n	8003c9e <HAL_DMA_IRQHandler+0xc62>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a14      	ldr	r2, [pc, #80]	; (8003cec <HAL_DMA_IRQHandler+0xcb0>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d128      	bne.n	8003cf0 <HAL_DMA_IRQHandler+0xcb4>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0214 	bic.w	r2, r2, #20
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	e027      	b.n	8003d00 <HAL_DMA_IRQHandler+0xcc4>
 8003cb0:	40020010 	.word	0x40020010
 8003cb4:	40020028 	.word	0x40020028
 8003cb8:	40020040 	.word	0x40020040
 8003cbc:	40020058 	.word	0x40020058
 8003cc0:	40020070 	.word	0x40020070
 8003cc4:	40020088 	.word	0x40020088
 8003cc8:	400200a0 	.word	0x400200a0
 8003ccc:	400200b8 	.word	0x400200b8
 8003cd0:	40020410 	.word	0x40020410
 8003cd4:	40020428 	.word	0x40020428
 8003cd8:	40020440 	.word	0x40020440
 8003cdc:	40020458 	.word	0x40020458
 8003ce0:	40020470 	.word	0x40020470
 8003ce4:	40020488 	.word	0x40020488
 8003ce8:	400204a0 	.word	0x400204a0
 8003cec:	400204b8 	.word	0x400204b8
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 020a 	bic.w	r2, r2, #10
 8003cfe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 8097 	beq.w	8003e48 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d22:	e091      	b.n	8003e48 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d28:	f003 031f 	and.w	r3, r3, #31
 8003d2c:	2208      	movs	r2, #8
 8003d2e:	409a      	lsls	r2, r3
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	4013      	ands	r3, r2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 8088 	beq.w	8003e4a <HAL_DMA_IRQHandler+0xe0e>
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 8082 	beq.w	8003e4a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a41      	ldr	r2, [pc, #260]	; (8003e50 <HAL_DMA_IRQHandler+0xe14>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d04a      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xdaa>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a3f      	ldr	r2, [pc, #252]	; (8003e54 <HAL_DMA_IRQHandler+0xe18>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d045      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xdaa>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a3e      	ldr	r2, [pc, #248]	; (8003e58 <HAL_DMA_IRQHandler+0xe1c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d040      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xdaa>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a3c      	ldr	r2, [pc, #240]	; (8003e5c <HAL_DMA_IRQHandler+0xe20>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d03b      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xdaa>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a3b      	ldr	r2, [pc, #236]	; (8003e60 <HAL_DMA_IRQHandler+0xe24>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d036      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xdaa>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a39      	ldr	r2, [pc, #228]	; (8003e64 <HAL_DMA_IRQHandler+0xe28>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d031      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xdaa>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a38      	ldr	r2, [pc, #224]	; (8003e68 <HAL_DMA_IRQHandler+0xe2c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d02c      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xdaa>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a36      	ldr	r2, [pc, #216]	; (8003e6c <HAL_DMA_IRQHandler+0xe30>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d027      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xdaa>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a35      	ldr	r2, [pc, #212]	; (8003e70 <HAL_DMA_IRQHandler+0xe34>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d022      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xdaa>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a33      	ldr	r2, [pc, #204]	; (8003e74 <HAL_DMA_IRQHandler+0xe38>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d01d      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xdaa>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a32      	ldr	r2, [pc, #200]	; (8003e78 <HAL_DMA_IRQHandler+0xe3c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d018      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xdaa>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a30      	ldr	r2, [pc, #192]	; (8003e7c <HAL_DMA_IRQHandler+0xe40>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d013      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xdaa>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a2f      	ldr	r2, [pc, #188]	; (8003e80 <HAL_DMA_IRQHandler+0xe44>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d00e      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xdaa>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a2d      	ldr	r2, [pc, #180]	; (8003e84 <HAL_DMA_IRQHandler+0xe48>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d009      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xdaa>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a2c      	ldr	r2, [pc, #176]	; (8003e88 <HAL_DMA_IRQHandler+0xe4c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d004      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xdaa>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a2a      	ldr	r2, [pc, #168]	; (8003e8c <HAL_DMA_IRQHandler+0xe50>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d108      	bne.n	8003df8 <HAL_DMA_IRQHandler+0xdbc>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 021c 	bic.w	r2, r2, #28
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	e007      	b.n	8003e08 <HAL_DMA_IRQHandler+0xdcc>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 020e 	bic.w	r2, r2, #14
 8003e06:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0c:	f003 031f 	and.w	r3, r3, #31
 8003e10:	2201      	movs	r2, #1
 8003e12:	409a      	lsls	r2, r3
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d009      	beq.n	8003e4a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	4798      	blx	r3
 8003e3e:	e004      	b.n	8003e4a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003e40:	bf00      	nop
 8003e42:	e002      	b.n	8003e4a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e44:	bf00      	nop
 8003e46:	e000      	b.n	8003e4a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e48:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e4a:	3728      	adds	r7, #40	; 0x28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40020010 	.word	0x40020010
 8003e54:	40020028 	.word	0x40020028
 8003e58:	40020040 	.word	0x40020040
 8003e5c:	40020058 	.word	0x40020058
 8003e60:	40020070 	.word	0x40020070
 8003e64:	40020088 	.word	0x40020088
 8003e68:	400200a0 	.word	0x400200a0
 8003e6c:	400200b8 	.word	0x400200b8
 8003e70:	40020410 	.word	0x40020410
 8003e74:	40020428 	.word	0x40020428
 8003e78:	40020440 	.word	0x40020440
 8003e7c:	40020458 	.word	0x40020458
 8003e80:	40020470 	.word	0x40020470
 8003e84:	40020488 	.word	0x40020488
 8003e88:	400204a0 	.word	0x400204a0
 8003e8c:	400204b8 	.word	0x400204b8

08003e90 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
 8003e9c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a7f      	ldr	r2, [pc, #508]	; (80040ac <DMA_SetConfig+0x21c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d072      	beq.n	8003f9a <DMA_SetConfig+0x10a>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a7d      	ldr	r2, [pc, #500]	; (80040b0 <DMA_SetConfig+0x220>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d06d      	beq.n	8003f9a <DMA_SetConfig+0x10a>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a7c      	ldr	r2, [pc, #496]	; (80040b4 <DMA_SetConfig+0x224>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d068      	beq.n	8003f9a <DMA_SetConfig+0x10a>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a7a      	ldr	r2, [pc, #488]	; (80040b8 <DMA_SetConfig+0x228>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d063      	beq.n	8003f9a <DMA_SetConfig+0x10a>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a79      	ldr	r2, [pc, #484]	; (80040bc <DMA_SetConfig+0x22c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d05e      	beq.n	8003f9a <DMA_SetConfig+0x10a>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a77      	ldr	r2, [pc, #476]	; (80040c0 <DMA_SetConfig+0x230>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d059      	beq.n	8003f9a <DMA_SetConfig+0x10a>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a76      	ldr	r2, [pc, #472]	; (80040c4 <DMA_SetConfig+0x234>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d054      	beq.n	8003f9a <DMA_SetConfig+0x10a>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a74      	ldr	r2, [pc, #464]	; (80040c8 <DMA_SetConfig+0x238>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d04f      	beq.n	8003f9a <DMA_SetConfig+0x10a>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a73      	ldr	r2, [pc, #460]	; (80040cc <DMA_SetConfig+0x23c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d04a      	beq.n	8003f9a <DMA_SetConfig+0x10a>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a71      	ldr	r2, [pc, #452]	; (80040d0 <DMA_SetConfig+0x240>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d045      	beq.n	8003f9a <DMA_SetConfig+0x10a>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a70      	ldr	r2, [pc, #448]	; (80040d4 <DMA_SetConfig+0x244>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d040      	beq.n	8003f9a <DMA_SetConfig+0x10a>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a6e      	ldr	r2, [pc, #440]	; (80040d8 <DMA_SetConfig+0x248>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d03b      	beq.n	8003f9a <DMA_SetConfig+0x10a>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a6d      	ldr	r2, [pc, #436]	; (80040dc <DMA_SetConfig+0x24c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d036      	beq.n	8003f9a <DMA_SetConfig+0x10a>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a6b      	ldr	r2, [pc, #428]	; (80040e0 <DMA_SetConfig+0x250>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d031      	beq.n	8003f9a <DMA_SetConfig+0x10a>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a6a      	ldr	r2, [pc, #424]	; (80040e4 <DMA_SetConfig+0x254>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d02c      	beq.n	8003f9a <DMA_SetConfig+0x10a>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a68      	ldr	r2, [pc, #416]	; (80040e8 <DMA_SetConfig+0x258>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d027      	beq.n	8003f9a <DMA_SetConfig+0x10a>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a67      	ldr	r2, [pc, #412]	; (80040ec <DMA_SetConfig+0x25c>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d022      	beq.n	8003f9a <DMA_SetConfig+0x10a>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a65      	ldr	r2, [pc, #404]	; (80040f0 <DMA_SetConfig+0x260>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d01d      	beq.n	8003f9a <DMA_SetConfig+0x10a>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a64      	ldr	r2, [pc, #400]	; (80040f4 <DMA_SetConfig+0x264>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d018      	beq.n	8003f9a <DMA_SetConfig+0x10a>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a62      	ldr	r2, [pc, #392]	; (80040f8 <DMA_SetConfig+0x268>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d013      	beq.n	8003f9a <DMA_SetConfig+0x10a>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a61      	ldr	r2, [pc, #388]	; (80040fc <DMA_SetConfig+0x26c>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d00e      	beq.n	8003f9a <DMA_SetConfig+0x10a>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a5f      	ldr	r2, [pc, #380]	; (8004100 <DMA_SetConfig+0x270>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d009      	beq.n	8003f9a <DMA_SetConfig+0x10a>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a5e      	ldr	r2, [pc, #376]	; (8004104 <DMA_SetConfig+0x274>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d004      	beq.n	8003f9a <DMA_SetConfig+0x10a>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a5c      	ldr	r2, [pc, #368]	; (8004108 <DMA_SetConfig+0x278>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d101      	bne.n	8003f9e <DMA_SetConfig+0x10e>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e000      	b.n	8003fa0 <DMA_SetConfig+0x110>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00d      	beq.n	8003fc0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003fac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d004      	beq.n	8003fc0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003fbe:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a39      	ldr	r2, [pc, #228]	; (80040ac <DMA_SetConfig+0x21c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d04a      	beq.n	8004060 <DMA_SetConfig+0x1d0>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a38      	ldr	r2, [pc, #224]	; (80040b0 <DMA_SetConfig+0x220>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d045      	beq.n	8004060 <DMA_SetConfig+0x1d0>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a36      	ldr	r2, [pc, #216]	; (80040b4 <DMA_SetConfig+0x224>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d040      	beq.n	8004060 <DMA_SetConfig+0x1d0>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a35      	ldr	r2, [pc, #212]	; (80040b8 <DMA_SetConfig+0x228>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d03b      	beq.n	8004060 <DMA_SetConfig+0x1d0>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a33      	ldr	r2, [pc, #204]	; (80040bc <DMA_SetConfig+0x22c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d036      	beq.n	8004060 <DMA_SetConfig+0x1d0>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a32      	ldr	r2, [pc, #200]	; (80040c0 <DMA_SetConfig+0x230>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d031      	beq.n	8004060 <DMA_SetConfig+0x1d0>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a30      	ldr	r2, [pc, #192]	; (80040c4 <DMA_SetConfig+0x234>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d02c      	beq.n	8004060 <DMA_SetConfig+0x1d0>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a2f      	ldr	r2, [pc, #188]	; (80040c8 <DMA_SetConfig+0x238>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d027      	beq.n	8004060 <DMA_SetConfig+0x1d0>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a2d      	ldr	r2, [pc, #180]	; (80040cc <DMA_SetConfig+0x23c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d022      	beq.n	8004060 <DMA_SetConfig+0x1d0>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a2c      	ldr	r2, [pc, #176]	; (80040d0 <DMA_SetConfig+0x240>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d01d      	beq.n	8004060 <DMA_SetConfig+0x1d0>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a2a      	ldr	r2, [pc, #168]	; (80040d4 <DMA_SetConfig+0x244>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d018      	beq.n	8004060 <DMA_SetConfig+0x1d0>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a29      	ldr	r2, [pc, #164]	; (80040d8 <DMA_SetConfig+0x248>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d013      	beq.n	8004060 <DMA_SetConfig+0x1d0>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a27      	ldr	r2, [pc, #156]	; (80040dc <DMA_SetConfig+0x24c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d00e      	beq.n	8004060 <DMA_SetConfig+0x1d0>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a26      	ldr	r2, [pc, #152]	; (80040e0 <DMA_SetConfig+0x250>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d009      	beq.n	8004060 <DMA_SetConfig+0x1d0>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a24      	ldr	r2, [pc, #144]	; (80040e4 <DMA_SetConfig+0x254>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d004      	beq.n	8004060 <DMA_SetConfig+0x1d0>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a23      	ldr	r2, [pc, #140]	; (80040e8 <DMA_SetConfig+0x258>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d101      	bne.n	8004064 <DMA_SetConfig+0x1d4>
 8004060:	2301      	movs	r3, #1
 8004062:	e000      	b.n	8004066 <DMA_SetConfig+0x1d6>
 8004064:	2300      	movs	r3, #0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d059      	beq.n	800411e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406e:	f003 031f 	and.w	r3, r3, #31
 8004072:	223f      	movs	r2, #63	; 0x3f
 8004074:	409a      	lsls	r2, r3
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004088:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	2b40      	cmp	r3, #64	; 0x40
 8004098:	d138      	bne.n	800410c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80040aa:	e086      	b.n	80041ba <DMA_SetConfig+0x32a>
 80040ac:	40020010 	.word	0x40020010
 80040b0:	40020028 	.word	0x40020028
 80040b4:	40020040 	.word	0x40020040
 80040b8:	40020058 	.word	0x40020058
 80040bc:	40020070 	.word	0x40020070
 80040c0:	40020088 	.word	0x40020088
 80040c4:	400200a0 	.word	0x400200a0
 80040c8:	400200b8 	.word	0x400200b8
 80040cc:	40020410 	.word	0x40020410
 80040d0:	40020428 	.word	0x40020428
 80040d4:	40020440 	.word	0x40020440
 80040d8:	40020458 	.word	0x40020458
 80040dc:	40020470 	.word	0x40020470
 80040e0:	40020488 	.word	0x40020488
 80040e4:	400204a0 	.word	0x400204a0
 80040e8:	400204b8 	.word	0x400204b8
 80040ec:	58025408 	.word	0x58025408
 80040f0:	5802541c 	.word	0x5802541c
 80040f4:	58025430 	.word	0x58025430
 80040f8:	58025444 	.word	0x58025444
 80040fc:	58025458 	.word	0x58025458
 8004100:	5802546c 	.word	0x5802546c
 8004104:	58025480 	.word	0x58025480
 8004108:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	60da      	str	r2, [r3, #12]
}
 800411c:	e04d      	b.n	80041ba <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a29      	ldr	r2, [pc, #164]	; (80041c8 <DMA_SetConfig+0x338>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d022      	beq.n	800416e <DMA_SetConfig+0x2de>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a27      	ldr	r2, [pc, #156]	; (80041cc <DMA_SetConfig+0x33c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d01d      	beq.n	800416e <DMA_SetConfig+0x2de>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a26      	ldr	r2, [pc, #152]	; (80041d0 <DMA_SetConfig+0x340>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d018      	beq.n	800416e <DMA_SetConfig+0x2de>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a24      	ldr	r2, [pc, #144]	; (80041d4 <DMA_SetConfig+0x344>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d013      	beq.n	800416e <DMA_SetConfig+0x2de>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a23      	ldr	r2, [pc, #140]	; (80041d8 <DMA_SetConfig+0x348>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d00e      	beq.n	800416e <DMA_SetConfig+0x2de>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a21      	ldr	r2, [pc, #132]	; (80041dc <DMA_SetConfig+0x34c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d009      	beq.n	800416e <DMA_SetConfig+0x2de>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a20      	ldr	r2, [pc, #128]	; (80041e0 <DMA_SetConfig+0x350>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d004      	beq.n	800416e <DMA_SetConfig+0x2de>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a1e      	ldr	r2, [pc, #120]	; (80041e4 <DMA_SetConfig+0x354>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d101      	bne.n	8004172 <DMA_SetConfig+0x2e2>
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <DMA_SetConfig+0x2e4>
 8004172:	2300      	movs	r3, #0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d020      	beq.n	80041ba <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	2201      	movs	r2, #1
 8004182:	409a      	lsls	r2, r3
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	2b40      	cmp	r3, #64	; 0x40
 8004196:	d108      	bne.n	80041aa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	60da      	str	r2, [r3, #12]
}
 80041a8:	e007      	b.n	80041ba <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	60da      	str	r2, [r3, #12]
}
 80041ba:	bf00      	nop
 80041bc:	371c      	adds	r7, #28
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	58025408 	.word	0x58025408
 80041cc:	5802541c 	.word	0x5802541c
 80041d0:	58025430 	.word	0x58025430
 80041d4:	58025444 	.word	0x58025444
 80041d8:	58025458 	.word	0x58025458
 80041dc:	5802546c 	.word	0x5802546c
 80041e0:	58025480 	.word	0x58025480
 80041e4:	58025494 	.word	0x58025494

080041e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a42      	ldr	r2, [pc, #264]	; (8004300 <DMA_CalcBaseAndBitshift+0x118>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d04a      	beq.n	8004290 <DMA_CalcBaseAndBitshift+0xa8>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a41      	ldr	r2, [pc, #260]	; (8004304 <DMA_CalcBaseAndBitshift+0x11c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d045      	beq.n	8004290 <DMA_CalcBaseAndBitshift+0xa8>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a3f      	ldr	r2, [pc, #252]	; (8004308 <DMA_CalcBaseAndBitshift+0x120>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d040      	beq.n	8004290 <DMA_CalcBaseAndBitshift+0xa8>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a3e      	ldr	r2, [pc, #248]	; (800430c <DMA_CalcBaseAndBitshift+0x124>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d03b      	beq.n	8004290 <DMA_CalcBaseAndBitshift+0xa8>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a3c      	ldr	r2, [pc, #240]	; (8004310 <DMA_CalcBaseAndBitshift+0x128>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d036      	beq.n	8004290 <DMA_CalcBaseAndBitshift+0xa8>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a3b      	ldr	r2, [pc, #236]	; (8004314 <DMA_CalcBaseAndBitshift+0x12c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d031      	beq.n	8004290 <DMA_CalcBaseAndBitshift+0xa8>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a39      	ldr	r2, [pc, #228]	; (8004318 <DMA_CalcBaseAndBitshift+0x130>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d02c      	beq.n	8004290 <DMA_CalcBaseAndBitshift+0xa8>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a38      	ldr	r2, [pc, #224]	; (800431c <DMA_CalcBaseAndBitshift+0x134>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d027      	beq.n	8004290 <DMA_CalcBaseAndBitshift+0xa8>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a36      	ldr	r2, [pc, #216]	; (8004320 <DMA_CalcBaseAndBitshift+0x138>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d022      	beq.n	8004290 <DMA_CalcBaseAndBitshift+0xa8>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a35      	ldr	r2, [pc, #212]	; (8004324 <DMA_CalcBaseAndBitshift+0x13c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d01d      	beq.n	8004290 <DMA_CalcBaseAndBitshift+0xa8>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a33      	ldr	r2, [pc, #204]	; (8004328 <DMA_CalcBaseAndBitshift+0x140>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d018      	beq.n	8004290 <DMA_CalcBaseAndBitshift+0xa8>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a32      	ldr	r2, [pc, #200]	; (800432c <DMA_CalcBaseAndBitshift+0x144>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d013      	beq.n	8004290 <DMA_CalcBaseAndBitshift+0xa8>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a30      	ldr	r2, [pc, #192]	; (8004330 <DMA_CalcBaseAndBitshift+0x148>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00e      	beq.n	8004290 <DMA_CalcBaseAndBitshift+0xa8>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a2f      	ldr	r2, [pc, #188]	; (8004334 <DMA_CalcBaseAndBitshift+0x14c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d009      	beq.n	8004290 <DMA_CalcBaseAndBitshift+0xa8>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a2d      	ldr	r2, [pc, #180]	; (8004338 <DMA_CalcBaseAndBitshift+0x150>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d004      	beq.n	8004290 <DMA_CalcBaseAndBitshift+0xa8>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a2c      	ldr	r2, [pc, #176]	; (800433c <DMA_CalcBaseAndBitshift+0x154>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d101      	bne.n	8004294 <DMA_CalcBaseAndBitshift+0xac>
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <DMA_CalcBaseAndBitshift+0xae>
 8004294:	2300      	movs	r3, #0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d024      	beq.n	80042e4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	3b10      	subs	r3, #16
 80042a2:	4a27      	ldr	r2, [pc, #156]	; (8004340 <DMA_CalcBaseAndBitshift+0x158>)
 80042a4:	fba2 2303 	umull	r2, r3, r2, r3
 80042a8:	091b      	lsrs	r3, r3, #4
 80042aa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	4a24      	ldr	r2, [pc, #144]	; (8004344 <DMA_CalcBaseAndBitshift+0x15c>)
 80042b4:	5cd3      	ldrb	r3, [r2, r3]
 80042b6:	461a      	mov	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2b03      	cmp	r3, #3
 80042c0:	d908      	bls.n	80042d4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	4b1f      	ldr	r3, [pc, #124]	; (8004348 <DMA_CalcBaseAndBitshift+0x160>)
 80042ca:	4013      	ands	r3, r2
 80042cc:	1d1a      	adds	r2, r3, #4
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	659a      	str	r2, [r3, #88]	; 0x58
 80042d2:	e00d      	b.n	80042f0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	4b1b      	ldr	r3, [pc, #108]	; (8004348 <DMA_CalcBaseAndBitshift+0x160>)
 80042dc:	4013      	ands	r3, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6593      	str	r3, [r2, #88]	; 0x58
 80042e2:	e005      	b.n	80042f0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	40020010 	.word	0x40020010
 8004304:	40020028 	.word	0x40020028
 8004308:	40020040 	.word	0x40020040
 800430c:	40020058 	.word	0x40020058
 8004310:	40020070 	.word	0x40020070
 8004314:	40020088 	.word	0x40020088
 8004318:	400200a0 	.word	0x400200a0
 800431c:	400200b8 	.word	0x400200b8
 8004320:	40020410 	.word	0x40020410
 8004324:	40020428 	.word	0x40020428
 8004328:	40020440 	.word	0x40020440
 800432c:	40020458 	.word	0x40020458
 8004330:	40020470 	.word	0x40020470
 8004334:	40020488 	.word	0x40020488
 8004338:	400204a0 	.word	0x400204a0
 800433c:	400204b8 	.word	0x400204b8
 8004340:	aaaaaaab 	.word	0xaaaaaaab
 8004344:	0800ff64 	.word	0x0800ff64
 8004348:	fffffc00 	.word	0xfffffc00

0800434c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004354:	2300      	movs	r3, #0
 8004356:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d120      	bne.n	80043a2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004364:	2b03      	cmp	r3, #3
 8004366:	d858      	bhi.n	800441a <DMA_CheckFifoParam+0xce>
 8004368:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <DMA_CheckFifoParam+0x24>)
 800436a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436e:	bf00      	nop
 8004370:	08004381 	.word	0x08004381
 8004374:	08004393 	.word	0x08004393
 8004378:	08004381 	.word	0x08004381
 800437c:	0800441b 	.word	0x0800441b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d048      	beq.n	800441e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004390:	e045      	b.n	800441e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004396:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800439a:	d142      	bne.n	8004422 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043a0:	e03f      	b.n	8004422 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043aa:	d123      	bne.n	80043f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b0:	2b03      	cmp	r3, #3
 80043b2:	d838      	bhi.n	8004426 <DMA_CheckFifoParam+0xda>
 80043b4:	a201      	add	r2, pc, #4	; (adr r2, 80043bc <DMA_CheckFifoParam+0x70>)
 80043b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ba:	bf00      	nop
 80043bc:	080043cd 	.word	0x080043cd
 80043c0:	080043d3 	.word	0x080043d3
 80043c4:	080043cd 	.word	0x080043cd
 80043c8:	080043e5 	.word	0x080043e5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	73fb      	strb	r3, [r7, #15]
        break;
 80043d0:	e030      	b.n	8004434 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d025      	beq.n	800442a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043e2:	e022      	b.n	800442a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043ec:	d11f      	bne.n	800442e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043f2:	e01c      	b.n	800442e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d902      	bls.n	8004402 <DMA_CheckFifoParam+0xb6>
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d003      	beq.n	8004408 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004400:	e018      	b.n	8004434 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	73fb      	strb	r3, [r7, #15]
        break;
 8004406:	e015      	b.n	8004434 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00e      	beq.n	8004432 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	73fb      	strb	r3, [r7, #15]
    break;
 8004418:	e00b      	b.n	8004432 <DMA_CheckFifoParam+0xe6>
        break;
 800441a:	bf00      	nop
 800441c:	e00a      	b.n	8004434 <DMA_CheckFifoParam+0xe8>
        break;
 800441e:	bf00      	nop
 8004420:	e008      	b.n	8004434 <DMA_CheckFifoParam+0xe8>
        break;
 8004422:	bf00      	nop
 8004424:	e006      	b.n	8004434 <DMA_CheckFifoParam+0xe8>
        break;
 8004426:	bf00      	nop
 8004428:	e004      	b.n	8004434 <DMA_CheckFifoParam+0xe8>
        break;
 800442a:	bf00      	nop
 800442c:	e002      	b.n	8004434 <DMA_CheckFifoParam+0xe8>
        break;
 800442e:	bf00      	nop
 8004430:	e000      	b.n	8004434 <DMA_CheckFifoParam+0xe8>
    break;
 8004432:	bf00      	nop
    }
  }

  return status;
 8004434:	7bfb      	ldrb	r3, [r7, #15]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop

08004444 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a38      	ldr	r2, [pc, #224]	; (8004538 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d022      	beq.n	80044a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a36      	ldr	r2, [pc, #216]	; (800453c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d01d      	beq.n	80044a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a35      	ldr	r2, [pc, #212]	; (8004540 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d018      	beq.n	80044a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a33      	ldr	r2, [pc, #204]	; (8004544 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d013      	beq.n	80044a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a32      	ldr	r2, [pc, #200]	; (8004548 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d00e      	beq.n	80044a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a30      	ldr	r2, [pc, #192]	; (800454c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d009      	beq.n	80044a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a2f      	ldr	r2, [pc, #188]	; (8004550 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d004      	beq.n	80044a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a2d      	ldr	r2, [pc, #180]	; (8004554 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d101      	bne.n	80044a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80044a2:	2301      	movs	r3, #1
 80044a4:	e000      	b.n	80044a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80044a6:	2300      	movs	r3, #0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d01a      	beq.n	80044e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	3b08      	subs	r3, #8
 80044b4:	4a28      	ldr	r2, [pc, #160]	; (8004558 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80044b6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ba:	091b      	lsrs	r3, r3, #4
 80044bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	4b26      	ldr	r3, [pc, #152]	; (800455c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80044c2:	4413      	add	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	461a      	mov	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a24      	ldr	r2, [pc, #144]	; (8004560 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80044d0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f003 031f 	and.w	r3, r3, #31
 80044d8:	2201      	movs	r2, #1
 80044da:	409a      	lsls	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80044e0:	e024      	b.n	800452c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	3b10      	subs	r3, #16
 80044ea:	4a1e      	ldr	r2, [pc, #120]	; (8004564 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80044ec:	fba2 2303 	umull	r2, r3, r2, r3
 80044f0:	091b      	lsrs	r3, r3, #4
 80044f2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4a1c      	ldr	r2, [pc, #112]	; (8004568 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d806      	bhi.n	800450a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4a1b      	ldr	r2, [pc, #108]	; (800456c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d902      	bls.n	800450a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	3308      	adds	r3, #8
 8004508:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4b18      	ldr	r3, [pc, #96]	; (8004570 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800450e:	4413      	add	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	461a      	mov	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a16      	ldr	r2, [pc, #88]	; (8004574 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800451c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f003 031f 	and.w	r3, r3, #31
 8004524:	2201      	movs	r2, #1
 8004526:	409a      	lsls	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800452c:	bf00      	nop
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	58025408 	.word	0x58025408
 800453c:	5802541c 	.word	0x5802541c
 8004540:	58025430 	.word	0x58025430
 8004544:	58025444 	.word	0x58025444
 8004548:	58025458 	.word	0x58025458
 800454c:	5802546c 	.word	0x5802546c
 8004550:	58025480 	.word	0x58025480
 8004554:	58025494 	.word	0x58025494
 8004558:	cccccccd 	.word	0xcccccccd
 800455c:	16009600 	.word	0x16009600
 8004560:	58025880 	.word	0x58025880
 8004564:	aaaaaaab 	.word	0xaaaaaaab
 8004568:	400204b8 	.word	0x400204b8
 800456c:	4002040f 	.word	0x4002040f
 8004570:	10008200 	.word	0x10008200
 8004574:	40020880 	.word	0x40020880

08004578 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	b2db      	uxtb	r3, r3
 8004586:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d04a      	beq.n	8004624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2b08      	cmp	r3, #8
 8004592:	d847      	bhi.n	8004624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a25      	ldr	r2, [pc, #148]	; (8004630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d022      	beq.n	80045e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a24      	ldr	r2, [pc, #144]	; (8004634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d01d      	beq.n	80045e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a22      	ldr	r2, [pc, #136]	; (8004638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d018      	beq.n	80045e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a21      	ldr	r2, [pc, #132]	; (800463c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d013      	beq.n	80045e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a1f      	ldr	r2, [pc, #124]	; (8004640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d00e      	beq.n	80045e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a1e      	ldr	r2, [pc, #120]	; (8004644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d009      	beq.n	80045e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a1c      	ldr	r2, [pc, #112]	; (8004648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d004      	beq.n	80045e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a1b      	ldr	r2, [pc, #108]	; (800464c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d101      	bne.n	80045e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80045e4:	2301      	movs	r3, #1
 80045e6:	e000      	b.n	80045ea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80045e8:	2300      	movs	r3, #0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	4b17      	ldr	r3, [pc, #92]	; (8004650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80045f2:	4413      	add	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	461a      	mov	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a15      	ldr	r2, [pc, #84]	; (8004654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004600:	671a      	str	r2, [r3, #112]	; 0x70
 8004602:	e009      	b.n	8004618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	4b14      	ldr	r3, [pc, #80]	; (8004658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004608:	4413      	add	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	461a      	mov	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a11      	ldr	r2, [pc, #68]	; (800465c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004616:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	3b01      	subs	r3, #1
 800461c:	2201      	movs	r2, #1
 800461e:	409a      	lsls	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004624:	bf00      	nop
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	58025408 	.word	0x58025408
 8004634:	5802541c 	.word	0x5802541c
 8004638:	58025430 	.word	0x58025430
 800463c:	58025444 	.word	0x58025444
 8004640:	58025458 	.word	0x58025458
 8004644:	5802546c 	.word	0x5802546c
 8004648:	58025480 	.word	0x58025480
 800464c:	58025494 	.word	0x58025494
 8004650:	1600963f 	.word	0x1600963f
 8004654:	58025940 	.word	0x58025940
 8004658:	1000823f 	.word	0x1000823f
 800465c:	40020940 	.word	0x40020940

08004660 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004660:	b480      	push	{r7}
 8004662:	b089      	sub	sp, #36	; 0x24
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800466a:	2300      	movs	r3, #0
 800466c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800466e:	4b89      	ldr	r3, [pc, #548]	; (8004894 <HAL_GPIO_Init+0x234>)
 8004670:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004672:	e194      	b.n	800499e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	2101      	movs	r1, #1
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	fa01 f303 	lsl.w	r3, r1, r3
 8004680:	4013      	ands	r3, r2
 8004682:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 8186 	beq.w	8004998 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f003 0303 	and.w	r3, r3, #3
 8004694:	2b01      	cmp	r3, #1
 8004696:	d005      	beq.n	80046a4 <HAL_GPIO_Init+0x44>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f003 0303 	and.w	r3, r3, #3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d130      	bne.n	8004706 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	2203      	movs	r2, #3
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	43db      	mvns	r3, r3
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	4013      	ands	r3, r2
 80046ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046da:	2201      	movs	r2, #1
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	fa02 f303 	lsl.w	r3, r2, r3
 80046e2:	43db      	mvns	r3, r3
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	4013      	ands	r3, r2
 80046e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	091b      	lsrs	r3, r3, #4
 80046f0:	f003 0201 	and.w	r2, r3, #1
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	2b03      	cmp	r3, #3
 8004710:	d017      	beq.n	8004742 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	2203      	movs	r2, #3
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	43db      	mvns	r3, r3
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	4013      	ands	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	4313      	orrs	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d123      	bne.n	8004796 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	08da      	lsrs	r2, r3, #3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3208      	adds	r2, #8
 8004756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800475a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	220f      	movs	r2, #15
 8004766:	fa02 f303 	lsl.w	r3, r2, r3
 800476a:	43db      	mvns	r3, r3
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	4013      	ands	r3, r2
 8004770:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	4313      	orrs	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	08da      	lsrs	r2, r3, #3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3208      	adds	r2, #8
 8004790:	69b9      	ldr	r1, [r7, #24]
 8004792:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	2203      	movs	r2, #3
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	43db      	mvns	r3, r3
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4013      	ands	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f003 0203 	and.w	r2, r3, #3
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	fa02 f303 	lsl.w	r3, r2, r3
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 80e0 	beq.w	8004998 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047d8:	4b2f      	ldr	r3, [pc, #188]	; (8004898 <HAL_GPIO_Init+0x238>)
 80047da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047de:	4a2e      	ldr	r2, [pc, #184]	; (8004898 <HAL_GPIO_Init+0x238>)
 80047e0:	f043 0302 	orr.w	r3, r3, #2
 80047e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80047e8:	4b2b      	ldr	r3, [pc, #172]	; (8004898 <HAL_GPIO_Init+0x238>)
 80047ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047f6:	4a29      	ldr	r2, [pc, #164]	; (800489c <HAL_GPIO_Init+0x23c>)
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	089b      	lsrs	r3, r3, #2
 80047fc:	3302      	adds	r3, #2
 80047fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004802:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	220f      	movs	r2, #15
 800480e:	fa02 f303 	lsl.w	r3, r2, r3
 8004812:	43db      	mvns	r3, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	4013      	ands	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a20      	ldr	r2, [pc, #128]	; (80048a0 <HAL_GPIO_Init+0x240>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d052      	beq.n	80048c8 <HAL_GPIO_Init+0x268>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a1f      	ldr	r2, [pc, #124]	; (80048a4 <HAL_GPIO_Init+0x244>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d031      	beq.n	800488e <HAL_GPIO_Init+0x22e>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a1e      	ldr	r2, [pc, #120]	; (80048a8 <HAL_GPIO_Init+0x248>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d02b      	beq.n	800488a <HAL_GPIO_Init+0x22a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a1d      	ldr	r2, [pc, #116]	; (80048ac <HAL_GPIO_Init+0x24c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d025      	beq.n	8004886 <HAL_GPIO_Init+0x226>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a1c      	ldr	r2, [pc, #112]	; (80048b0 <HAL_GPIO_Init+0x250>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d01f      	beq.n	8004882 <HAL_GPIO_Init+0x222>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a1b      	ldr	r2, [pc, #108]	; (80048b4 <HAL_GPIO_Init+0x254>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d019      	beq.n	800487e <HAL_GPIO_Init+0x21e>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a1a      	ldr	r2, [pc, #104]	; (80048b8 <HAL_GPIO_Init+0x258>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d013      	beq.n	800487a <HAL_GPIO_Init+0x21a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a19      	ldr	r2, [pc, #100]	; (80048bc <HAL_GPIO_Init+0x25c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00d      	beq.n	8004876 <HAL_GPIO_Init+0x216>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a18      	ldr	r2, [pc, #96]	; (80048c0 <HAL_GPIO_Init+0x260>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d007      	beq.n	8004872 <HAL_GPIO_Init+0x212>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a17      	ldr	r2, [pc, #92]	; (80048c4 <HAL_GPIO_Init+0x264>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d101      	bne.n	800486e <HAL_GPIO_Init+0x20e>
 800486a:	2309      	movs	r3, #9
 800486c:	e02d      	b.n	80048ca <HAL_GPIO_Init+0x26a>
 800486e:	230a      	movs	r3, #10
 8004870:	e02b      	b.n	80048ca <HAL_GPIO_Init+0x26a>
 8004872:	2308      	movs	r3, #8
 8004874:	e029      	b.n	80048ca <HAL_GPIO_Init+0x26a>
 8004876:	2307      	movs	r3, #7
 8004878:	e027      	b.n	80048ca <HAL_GPIO_Init+0x26a>
 800487a:	2306      	movs	r3, #6
 800487c:	e025      	b.n	80048ca <HAL_GPIO_Init+0x26a>
 800487e:	2305      	movs	r3, #5
 8004880:	e023      	b.n	80048ca <HAL_GPIO_Init+0x26a>
 8004882:	2304      	movs	r3, #4
 8004884:	e021      	b.n	80048ca <HAL_GPIO_Init+0x26a>
 8004886:	2303      	movs	r3, #3
 8004888:	e01f      	b.n	80048ca <HAL_GPIO_Init+0x26a>
 800488a:	2302      	movs	r3, #2
 800488c:	e01d      	b.n	80048ca <HAL_GPIO_Init+0x26a>
 800488e:	2301      	movs	r3, #1
 8004890:	e01b      	b.n	80048ca <HAL_GPIO_Init+0x26a>
 8004892:	bf00      	nop
 8004894:	58000080 	.word	0x58000080
 8004898:	58024400 	.word	0x58024400
 800489c:	58000400 	.word	0x58000400
 80048a0:	58020000 	.word	0x58020000
 80048a4:	58020400 	.word	0x58020400
 80048a8:	58020800 	.word	0x58020800
 80048ac:	58020c00 	.word	0x58020c00
 80048b0:	58021000 	.word	0x58021000
 80048b4:	58021400 	.word	0x58021400
 80048b8:	58021800 	.word	0x58021800
 80048bc:	58021c00 	.word	0x58021c00
 80048c0:	58022000 	.word	0x58022000
 80048c4:	58022400 	.word	0x58022400
 80048c8:	2300      	movs	r3, #0
 80048ca:	69fa      	ldr	r2, [r7, #28]
 80048cc:	f002 0203 	and.w	r2, r2, #3
 80048d0:	0092      	lsls	r2, r2, #2
 80048d2:	4093      	lsls	r3, r2
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048da:	4938      	ldr	r1, [pc, #224]	; (80049bc <HAL_GPIO_Init+0x35c>)
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	089b      	lsrs	r3, r3, #2
 80048e0:	3302      	adds	r3, #2
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	43db      	mvns	r3, r3
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	4013      	ands	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	4313      	orrs	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800490e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	43db      	mvns	r3, r3
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	4013      	ands	r3, r2
 8004926:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	4313      	orrs	r3, r2
 800493a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800493c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	43db      	mvns	r3, r3
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	4013      	ands	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	43db      	mvns	r3, r3
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	4013      	ands	r3, r2
 800497c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	3301      	adds	r3, #1
 800499c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	fa22 f303 	lsr.w	r3, r2, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f47f ae63 	bne.w	8004674 <HAL_GPIO_Init+0x14>
  }
}
 80049ae:	bf00      	nop
 80049b0:	bf00      	nop
 80049b2:	3724      	adds	r7, #36	; 0x24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	58000400 	.word	0x58000400

080049c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	460b      	mov	r3, r1
 80049ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	887b      	ldrh	r3, [r7, #2]
 80049d2:	4013      	ands	r3, r2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049d8:	2301      	movs	r3, #1
 80049da:	73fb      	strb	r3, [r7, #15]
 80049dc:	e001      	b.n	80049e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049de:	2300      	movs	r3, #0
 80049e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	460b      	mov	r3, r1
 80049fa:	807b      	strh	r3, [r7, #2]
 80049fc:	4613      	mov	r3, r2
 80049fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a00:	787b      	ldrb	r3, [r7, #1]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a06:	887a      	ldrh	r2, [r7, #2]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004a0c:	e003      	b.n	8004a16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004a0e:	887b      	ldrh	r3, [r7, #2]
 8004a10:	041a      	lsls	r2, r3, #16
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	619a      	str	r2, [r3, #24]
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
	...

08004a24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e07f      	b.n	8004b36 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d106      	bne.n	8004a50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7fc fc46 	bl	80012dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2224      	movs	r2, #36	; 0x24
 8004a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0201 	bic.w	r2, r2, #1
 8004a66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d107      	bne.n	8004a9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689a      	ldr	r2, [r3, #8]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a9a:	609a      	str	r2, [r3, #8]
 8004a9c:	e006      	b.n	8004aac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004aaa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d104      	bne.n	8004abe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004abc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6859      	ldr	r1, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	4b1d      	ldr	r3, [pc, #116]	; (8004b40 <HAL_I2C_Init+0x11c>)
 8004aca:	430b      	orrs	r3, r1
 8004acc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68da      	ldr	r2, [r3, #12]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004adc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691a      	ldr	r2, [r3, #16]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	69d9      	ldr	r1, [r3, #28]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a1a      	ldr	r2, [r3, #32]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0201 	orr.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	02008000 	.word	0x02008000

08004b44 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	607a      	str	r2, [r7, #4]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	460b      	mov	r3, r1
 8004b52:	817b      	strh	r3, [r7, #10]
 8004b54:	4613      	mov	r3, r2
 8004b56:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b20      	cmp	r3, #32
 8004b62:	f040 80da 	bne.w	8004d1a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <HAL_I2C_Master_Transmit+0x30>
 8004b70:	2302      	movs	r3, #2
 8004b72:	e0d3      	b.n	8004d1c <HAL_I2C_Master_Transmit+0x1d8>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b7c:	f7fd f82e 	bl	8001bdc <HAL_GetTick>
 8004b80:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	2319      	movs	r3, #25
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 fbc6 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e0be      	b.n	8004d1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2221      	movs	r2, #33	; 0x21
 8004ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2210      	movs	r2, #16
 8004baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	893a      	ldrh	r2, [r7, #8]
 8004bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2bff      	cmp	r3, #255	; 0xff
 8004bce:	d90e      	bls.n	8004bee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	22ff      	movs	r2, #255	; 0xff
 8004bd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	8979      	ldrh	r1, [r7, #10]
 8004bde:	4b51      	ldr	r3, [pc, #324]	; (8004d24 <HAL_I2C_Master_Transmit+0x1e0>)
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 fd54 	bl	8005694 <I2C_TransferConfig>
 8004bec:	e06c      	b.n	8004cc8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	8979      	ldrh	r1, [r7, #10]
 8004c00:	4b48      	ldr	r3, [pc, #288]	; (8004d24 <HAL_I2C_Master_Transmit+0x1e0>)
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 fd43 	bl	8005694 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004c0e:	e05b      	b.n	8004cc8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	6a39      	ldr	r1, [r7, #32]
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 fbd2 	bl	80053be <I2C_WaitOnTXISFlagUntilTimeout>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e07b      	b.n	8004d1c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	781a      	ldrb	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	3b01      	subs	r3, #1
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d034      	beq.n	8004cc8 <HAL_I2C_Master_Transmit+0x184>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d130      	bne.n	8004cc8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2180      	movs	r1, #128	; 0x80
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 fb55 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e04d      	b.n	8004d1c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2bff      	cmp	r3, #255	; 0xff
 8004c88:	d90e      	bls.n	8004ca8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	22ff      	movs	r2, #255	; 0xff
 8004c8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	8979      	ldrh	r1, [r7, #10]
 8004c98:	2300      	movs	r3, #0
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 fcf7 	bl	8005694 <I2C_TransferConfig>
 8004ca6:	e00f      	b.n	8004cc8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb6:	b2da      	uxtb	r2, r3
 8004cb8:	8979      	ldrh	r1, [r7, #10]
 8004cba:	2300      	movs	r3, #0
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 fce6 	bl	8005694 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d19e      	bne.n	8004c10 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	6a39      	ldr	r1, [r7, #32]
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 fbb8 	bl	800544c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e01a      	b.n	8004d1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2220      	movs	r2, #32
 8004cec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6859      	ldr	r1, [r3, #4]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	4b0b      	ldr	r3, [pc, #44]	; (8004d28 <HAL_I2C_Master_Transmit+0x1e4>)
 8004cfa:	400b      	ands	r3, r1
 8004cfc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2220      	movs	r2, #32
 8004d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d16:	2300      	movs	r3, #0
 8004d18:	e000      	b.n	8004d1c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004d1a:	2302      	movs	r3, #2
  }
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	80002000 	.word	0x80002000
 8004d28:	fe00e800 	.word	0xfe00e800

08004d2c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b088      	sub	sp, #32
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	4608      	mov	r0, r1
 8004d36:	4611      	mov	r1, r2
 8004d38:	461a      	mov	r2, r3
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	817b      	strh	r3, [r7, #10]
 8004d3e:	460b      	mov	r3, r1
 8004d40:	813b      	strh	r3, [r7, #8]
 8004d42:	4613      	mov	r3, r2
 8004d44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b20      	cmp	r3, #32
 8004d50:	f040 80f9 	bne.w	8004f46 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <HAL_I2C_Mem_Write+0x34>
 8004d5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d105      	bne.n	8004d6c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d66:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e0ed      	b.n	8004f48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d101      	bne.n	8004d7a <HAL_I2C_Mem_Write+0x4e>
 8004d76:	2302      	movs	r3, #2
 8004d78:	e0e6      	b.n	8004f48 <HAL_I2C_Mem_Write+0x21c>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d82:	f7fc ff2b 	bl	8001bdc <HAL_GetTick>
 8004d86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	2319      	movs	r3, #25
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 fac3 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e0d1      	b.n	8004f48 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2221      	movs	r2, #33	; 0x21
 8004da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2240      	movs	r2, #64	; 0x40
 8004db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a3a      	ldr	r2, [r7, #32]
 8004dbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004dcc:	88f8      	ldrh	r0, [r7, #6]
 8004dce:	893a      	ldrh	r2, [r7, #8]
 8004dd0:	8979      	ldrh	r1, [r7, #10]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	9301      	str	r3, [sp, #4]
 8004dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	4603      	mov	r3, r0
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 f9d3 	bl	8005188 <I2C_RequestMemoryWrite>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d005      	beq.n	8004df4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e0a9      	b.n	8004f48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2bff      	cmp	r3, #255	; 0xff
 8004dfc:	d90e      	bls.n	8004e1c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	22ff      	movs	r2, #255	; 0xff
 8004e02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	8979      	ldrh	r1, [r7, #10]
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 fc3d 	bl	8005694 <I2C_TransferConfig>
 8004e1a:	e00f      	b.n	8004e3c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	8979      	ldrh	r1, [r7, #10]
 8004e2e:	2300      	movs	r3, #0
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 fc2c 	bl	8005694 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 fabc 	bl	80053be <I2C_WaitOnTXISFlagUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e07b      	b.n	8004f48 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	781a      	ldrb	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d034      	beq.n	8004ef4 <HAL_I2C_Mem_Write+0x1c8>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d130      	bne.n	8004ef4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e98:	2200      	movs	r2, #0
 8004e9a:	2180      	movs	r1, #128	; 0x80
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 fa3f 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e04d      	b.n	8004f48 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	2bff      	cmp	r3, #255	; 0xff
 8004eb4:	d90e      	bls.n	8004ed4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	22ff      	movs	r2, #255	; 0xff
 8004eba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	8979      	ldrh	r1, [r7, #10]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 fbe1 	bl	8005694 <I2C_TransferConfig>
 8004ed2:	e00f      	b.n	8004ef4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	8979      	ldrh	r1, [r7, #10]
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 fbd0 	bl	8005694 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d19e      	bne.n	8004e3c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 faa2 	bl	800544c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e01a      	b.n	8004f48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2220      	movs	r2, #32
 8004f18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6859      	ldr	r1, [r3, #4]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <HAL_I2C_Mem_Write+0x224>)
 8004f26:	400b      	ands	r3, r1
 8004f28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f42:	2300      	movs	r3, #0
 8004f44:	e000      	b.n	8004f48 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004f46:	2302      	movs	r3, #2
  }
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	fe00e800 	.word	0xfe00e800

08004f54 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b088      	sub	sp, #32
 8004f58:	af02      	add	r7, sp, #8
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	4608      	mov	r0, r1
 8004f5e:	4611      	mov	r1, r2
 8004f60:	461a      	mov	r2, r3
 8004f62:	4603      	mov	r3, r0
 8004f64:	817b      	strh	r3, [r7, #10]
 8004f66:	460b      	mov	r3, r1
 8004f68:	813b      	strh	r3, [r7, #8]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b20      	cmp	r3, #32
 8004f78:	f040 80fd 	bne.w	8005176 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d002      	beq.n	8004f88 <HAL_I2C_Mem_Read+0x34>
 8004f82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d105      	bne.n	8004f94 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f8e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e0f1      	b.n	8005178 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d101      	bne.n	8004fa2 <HAL_I2C_Mem_Read+0x4e>
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	e0ea      	b.n	8005178 <HAL_I2C_Mem_Read+0x224>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004faa:	f7fc fe17 	bl	8001bdc <HAL_GetTick>
 8004fae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	2319      	movs	r3, #25
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 f9af 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e0d5      	b.n	8005178 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2222      	movs	r2, #34	; 0x22
 8004fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2240      	movs	r2, #64	; 0x40
 8004fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6a3a      	ldr	r2, [r7, #32]
 8004fe6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004fec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ff4:	88f8      	ldrh	r0, [r7, #6]
 8004ff6:	893a      	ldrh	r2, [r7, #8]
 8004ff8:	8979      	ldrh	r1, [r7, #10]
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	9301      	str	r3, [sp, #4]
 8004ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	4603      	mov	r3, r0
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 f913 	bl	8005230 <I2C_RequestMemoryRead>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d005      	beq.n	800501c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e0ad      	b.n	8005178 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005020:	b29b      	uxth	r3, r3
 8005022:	2bff      	cmp	r3, #255	; 0xff
 8005024:	d90e      	bls.n	8005044 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	22ff      	movs	r2, #255	; 0xff
 800502a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005030:	b2da      	uxtb	r2, r3
 8005032:	8979      	ldrh	r1, [r7, #10]
 8005034:	4b52      	ldr	r3, [pc, #328]	; (8005180 <HAL_I2C_Mem_Read+0x22c>)
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 fb29 	bl	8005694 <I2C_TransferConfig>
 8005042:	e00f      	b.n	8005064 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005048:	b29a      	uxth	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005052:	b2da      	uxtb	r2, r3
 8005054:	8979      	ldrh	r1, [r7, #10]
 8005056:	4b4a      	ldr	r3, [pc, #296]	; (8005180 <HAL_I2C_Mem_Read+0x22c>)
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 fb18 	bl	8005694 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506a:	2200      	movs	r2, #0
 800506c:	2104      	movs	r1, #4
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f000 f956 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e07c      	b.n	8005178 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	b2d2      	uxtb	r2, r2
 800508a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509a:	3b01      	subs	r3, #1
 800509c:	b29a      	uxth	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d034      	beq.n	8005124 <HAL_I2C_Mem_Read+0x1d0>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d130      	bne.n	8005124 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c8:	2200      	movs	r2, #0
 80050ca:	2180      	movs	r1, #128	; 0x80
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 f927 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e04d      	b.n	8005178 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	2bff      	cmp	r3, #255	; 0xff
 80050e4:	d90e      	bls.n	8005104 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	22ff      	movs	r2, #255	; 0xff
 80050ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	8979      	ldrh	r1, [r7, #10]
 80050f4:	2300      	movs	r3, #0
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f000 fac9 	bl	8005694 <I2C_TransferConfig>
 8005102:	e00f      	b.n	8005124 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005108:	b29a      	uxth	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005112:	b2da      	uxtb	r2, r3
 8005114:	8979      	ldrh	r1, [r7, #10]
 8005116:	2300      	movs	r3, #0
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 fab8 	bl	8005694 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005128:	b29b      	uxth	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d19a      	bne.n	8005064 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 f98a 	bl	800544c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e01a      	b.n	8005178 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2220      	movs	r2, #32
 8005148:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	6859      	ldr	r1, [r3, #4]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	4b0b      	ldr	r3, [pc, #44]	; (8005184 <HAL_I2C_Mem_Read+0x230>)
 8005156:	400b      	ands	r3, r1
 8005158:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2220      	movs	r2, #32
 800515e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005172:	2300      	movs	r3, #0
 8005174:	e000      	b.n	8005178 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005176:	2302      	movs	r3, #2
  }
}
 8005178:	4618      	mov	r0, r3
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	80002400 	.word	0x80002400
 8005184:	fe00e800 	.word	0xfe00e800

08005188 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af02      	add	r7, sp, #8
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	4608      	mov	r0, r1
 8005192:	4611      	mov	r1, r2
 8005194:	461a      	mov	r2, r3
 8005196:	4603      	mov	r3, r0
 8005198:	817b      	strh	r3, [r7, #10]
 800519a:	460b      	mov	r3, r1
 800519c:	813b      	strh	r3, [r7, #8]
 800519e:	4613      	mov	r3, r2
 80051a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80051a2:	88fb      	ldrh	r3, [r7, #6]
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	8979      	ldrh	r1, [r7, #10]
 80051a8:	4b20      	ldr	r3, [pc, #128]	; (800522c <I2C_RequestMemoryWrite+0xa4>)
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 fa6f 	bl	8005694 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051b6:	69fa      	ldr	r2, [r7, #28]
 80051b8:	69b9      	ldr	r1, [r7, #24]
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 f8ff 	bl	80053be <I2C_WaitOnTXISFlagUntilTimeout>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e02c      	b.n	8005224 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051ca:	88fb      	ldrh	r3, [r7, #6]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d105      	bne.n	80051dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051d0:	893b      	ldrh	r3, [r7, #8]
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	629a      	str	r2, [r3, #40]	; 0x28
 80051da:	e015      	b.n	8005208 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80051dc:	893b      	ldrh	r3, [r7, #8]
 80051de:	0a1b      	lsrs	r3, r3, #8
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051ea:	69fa      	ldr	r2, [r7, #28]
 80051ec:	69b9      	ldr	r1, [r7, #24]
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 f8e5 	bl	80053be <I2C_WaitOnTXISFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e012      	b.n	8005224 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051fe:	893b      	ldrh	r3, [r7, #8]
 8005200:	b2da      	uxtb	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	2200      	movs	r2, #0
 8005210:	2180      	movs	r1, #128	; 0x80
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 f884 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e000      	b.n	8005224 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	80002000 	.word	0x80002000

08005230 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af02      	add	r7, sp, #8
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	4608      	mov	r0, r1
 800523a:	4611      	mov	r1, r2
 800523c:	461a      	mov	r2, r3
 800523e:	4603      	mov	r3, r0
 8005240:	817b      	strh	r3, [r7, #10]
 8005242:	460b      	mov	r3, r1
 8005244:	813b      	strh	r3, [r7, #8]
 8005246:	4613      	mov	r3, r2
 8005248:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800524a:	88fb      	ldrh	r3, [r7, #6]
 800524c:	b2da      	uxtb	r2, r3
 800524e:	8979      	ldrh	r1, [r7, #10]
 8005250:	4b20      	ldr	r3, [pc, #128]	; (80052d4 <I2C_RequestMemoryRead+0xa4>)
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	2300      	movs	r3, #0
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 fa1c 	bl	8005694 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800525c:	69fa      	ldr	r2, [r7, #28]
 800525e:	69b9      	ldr	r1, [r7, #24]
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 f8ac 	bl	80053be <I2C_WaitOnTXISFlagUntilTimeout>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e02c      	b.n	80052ca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005270:	88fb      	ldrh	r3, [r7, #6]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d105      	bne.n	8005282 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005276:	893b      	ldrh	r3, [r7, #8]
 8005278:	b2da      	uxtb	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	629a      	str	r2, [r3, #40]	; 0x28
 8005280:	e015      	b.n	80052ae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005282:	893b      	ldrh	r3, [r7, #8]
 8005284:	0a1b      	lsrs	r3, r3, #8
 8005286:	b29b      	uxth	r3, r3
 8005288:	b2da      	uxtb	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005290:	69fa      	ldr	r2, [r7, #28]
 8005292:	69b9      	ldr	r1, [r7, #24]
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 f892 	bl	80053be <I2C_WaitOnTXISFlagUntilTimeout>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e012      	b.n	80052ca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052a4:	893b      	ldrh	r3, [r7, #8]
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	2200      	movs	r2, #0
 80052b6:	2140      	movs	r1, #64	; 0x40
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 f831 	bl	8005320 <I2C_WaitOnFlagUntilTimeout>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e000      	b.n	80052ca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	80002000 	.word	0x80002000

080052d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d103      	bne.n	80052f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2200      	movs	r2, #0
 80052f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b01      	cmp	r3, #1
 8005302:	d007      	beq.n	8005314 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	699a      	ldr	r2, [r3, #24]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0201 	orr.w	r2, r2, #1
 8005312:	619a      	str	r2, [r3, #24]
  }
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	603b      	str	r3, [r7, #0]
 800532c:	4613      	mov	r3, r2
 800532e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005330:	e031      	b.n	8005396 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005338:	d02d      	beq.n	8005396 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800533a:	f7fc fc4f 	bl	8001bdc <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	429a      	cmp	r2, r3
 8005348:	d302      	bcc.n	8005350 <I2C_WaitOnFlagUntilTimeout+0x30>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d122      	bne.n	8005396 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	699a      	ldr	r2, [r3, #24]
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	4013      	ands	r3, r2
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	429a      	cmp	r2, r3
 800535e:	bf0c      	ite	eq
 8005360:	2301      	moveq	r3, #1
 8005362:	2300      	movne	r3, #0
 8005364:	b2db      	uxtb	r3, r3
 8005366:	461a      	mov	r2, r3
 8005368:	79fb      	ldrb	r3, [r7, #7]
 800536a:	429a      	cmp	r2, r3
 800536c:	d113      	bne.n	8005396 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005372:	f043 0220 	orr.w	r2, r3, #32
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2220      	movs	r2, #32
 800537e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e00f      	b.n	80053b6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	699a      	ldr	r2, [r3, #24]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4013      	ands	r3, r2
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	bf0c      	ite	eq
 80053a6:	2301      	moveq	r3, #1
 80053a8:	2300      	movne	r3, #0
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	461a      	mov	r2, r3
 80053ae:	79fb      	ldrb	r3, [r7, #7]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d0be      	beq.n	8005332 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b084      	sub	sp, #16
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	60f8      	str	r0, [r7, #12]
 80053c6:	60b9      	str	r1, [r7, #8]
 80053c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053ca:	e033      	b.n	8005434 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	68b9      	ldr	r1, [r7, #8]
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 f87f 	bl	80054d4 <I2C_IsErrorOccurred>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e031      	b.n	8005444 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053e6:	d025      	beq.n	8005434 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053e8:	f7fc fbf8 	bl	8001bdc <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d302      	bcc.n	80053fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d11a      	bne.n	8005434 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b02      	cmp	r3, #2
 800540a:	d013      	beq.n	8005434 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005410:	f043 0220 	orr.w	r2, r3, #32
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2220      	movs	r2, #32
 800541c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e007      	b.n	8005444 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b02      	cmp	r3, #2
 8005440:	d1c4      	bne.n	80053cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005458:	e02f      	b.n	80054ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	68b9      	ldr	r1, [r7, #8]
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 f838 	bl	80054d4 <I2C_IsErrorOccurred>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e02d      	b.n	80054ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800546e:	f7fc fbb5 	bl	8001bdc <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	429a      	cmp	r2, r3
 800547c:	d302      	bcc.n	8005484 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d11a      	bne.n	80054ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	f003 0320 	and.w	r3, r3, #32
 800548e:	2b20      	cmp	r3, #32
 8005490:	d013      	beq.n	80054ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005496:	f043 0220 	orr.w	r2, r3, #32
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2220      	movs	r2, #32
 80054a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e007      	b.n	80054ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	f003 0320 	and.w	r3, r3, #32
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	d1c8      	bne.n	800545a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
	...

080054d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b08a      	sub	sp, #40	; 0x28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054e0:	2300      	movs	r3, #0
 80054e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80054ee:	2300      	movs	r3, #0
 80054f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	f003 0310 	and.w	r3, r3, #16
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d068      	beq.n	80055d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2210      	movs	r2, #16
 8005506:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005508:	e049      	b.n	800559e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005510:	d045      	beq.n	800559e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005512:	f7fc fb63 	bl	8001bdc <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	429a      	cmp	r2, r3
 8005520:	d302      	bcc.n	8005528 <I2C_IsErrorOccurred+0x54>
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d13a      	bne.n	800559e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005532:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800553a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800554a:	d121      	bne.n	8005590 <I2C_IsErrorOccurred+0xbc>
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005552:	d01d      	beq.n	8005590 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005554:	7cfb      	ldrb	r3, [r7, #19]
 8005556:	2b20      	cmp	r3, #32
 8005558:	d01a      	beq.n	8005590 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005568:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800556a:	f7fc fb37 	bl	8001bdc <HAL_GetTick>
 800556e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005570:	e00e      	b.n	8005590 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005572:	f7fc fb33 	bl	8001bdc <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b19      	cmp	r3, #25
 800557e:	d907      	bls.n	8005590 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005580:	6a3b      	ldr	r3, [r7, #32]
 8005582:	f043 0320 	orr.w	r3, r3, #32
 8005586:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800558e:	e006      	b.n	800559e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	f003 0320 	and.w	r3, r3, #32
 800559a:	2b20      	cmp	r3, #32
 800559c:	d1e9      	bne.n	8005572 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	f003 0320 	and.w	r3, r3, #32
 80055a8:	2b20      	cmp	r3, #32
 80055aa:	d003      	beq.n	80055b4 <I2C_IsErrorOccurred+0xe0>
 80055ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0aa      	beq.n	800550a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80055b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d103      	bne.n	80055c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2220      	movs	r2, #32
 80055c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	f043 0304 	orr.w	r3, r3, #4
 80055ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00b      	beq.n	80055fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	f043 0301 	orr.w	r3, r3, #1
 80055ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00b      	beq.n	800561e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	f043 0308 	orr.w	r3, r3, #8
 800560c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005616:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00b      	beq.n	8005640 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	f043 0302 	orr.w	r3, r3, #2
 800562e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005638:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005644:	2b00      	cmp	r3, #0
 8005646:	d01c      	beq.n	8005682 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f7ff fe45 	bl	80052d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6859      	ldr	r1, [r3, #4]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	4b0d      	ldr	r3, [pc, #52]	; (8005690 <I2C_IsErrorOccurred+0x1bc>)
 800565a:	400b      	ands	r3, r1
 800565c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	431a      	orrs	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2220      	movs	r2, #32
 800566e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005682:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005686:	4618      	mov	r0, r3
 8005688:	3728      	adds	r7, #40	; 0x28
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	fe00e800 	.word	0xfe00e800

08005694 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005694:	b480      	push	{r7}
 8005696:	b087      	sub	sp, #28
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	607b      	str	r3, [r7, #4]
 800569e:	460b      	mov	r3, r1
 80056a0:	817b      	strh	r3, [r7, #10]
 80056a2:	4613      	mov	r3, r2
 80056a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056a6:	897b      	ldrh	r3, [r7, #10]
 80056a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80056ac:	7a7b      	ldrb	r3, [r7, #9]
 80056ae:	041b      	lsls	r3, r3, #16
 80056b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056ba:	6a3b      	ldr	r3, [r7, #32]
 80056bc:	4313      	orrs	r3, r2
 80056be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	6a3b      	ldr	r3, [r7, #32]
 80056cc:	0d5b      	lsrs	r3, r3, #21
 80056ce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80056d2:	4b08      	ldr	r3, [pc, #32]	; (80056f4 <I2C_TransferConfig+0x60>)
 80056d4:	430b      	orrs	r3, r1
 80056d6:	43db      	mvns	r3, r3
 80056d8:	ea02 0103 	and.w	r1, r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80056e6:	bf00      	nop
 80056e8:	371c      	adds	r7, #28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	03ff63ff 	.word	0x03ff63ff

080056f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b20      	cmp	r3, #32
 800570c:	d138      	bne.n	8005780 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005718:	2302      	movs	r3, #2
 800571a:	e032      	b.n	8005782 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2224      	movs	r2, #36	; 0x24
 8005728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 0201 	bic.w	r2, r2, #1
 800573a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800574a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6819      	ldr	r1, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	430a      	orrs	r2, r1
 800575a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f042 0201 	orr.w	r2, r2, #1
 800576a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2220      	movs	r2, #32
 8005770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800577c:	2300      	movs	r3, #0
 800577e:	e000      	b.n	8005782 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005780:	2302      	movs	r3, #2
  }
}
 8005782:	4618      	mov	r0, r3
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800578e:	b480      	push	{r7}
 8005790:	b085      	sub	sp, #20
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
 8005796:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b20      	cmp	r3, #32
 80057a2:	d139      	bne.n	8005818 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d101      	bne.n	80057b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80057ae:	2302      	movs	r3, #2
 80057b0:	e033      	b.n	800581a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2224      	movs	r2, #36	; 0x24
 80057be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 0201 	bic.w	r2, r2, #1
 80057d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80057e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	021b      	lsls	r3, r3, #8
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f042 0201 	orr.w	r2, r2, #1
 8005802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2220      	movs	r2, #32
 8005808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005814:	2300      	movs	r3, #0
 8005816:	e000      	b.n	800581a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005818:	2302      	movs	r3, #2
  }
}
 800581a:	4618      	mov	r0, r3
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
	...

08005828 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b088      	sub	sp, #32
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e10d      	b.n	8005a56 <HAL_I2S_Init+0x22e>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d106      	bne.n	8005854 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7fb fdac 	bl	80013ac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2202      	movs	r2, #2
 8005858:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b01      	cmp	r3, #1
 8005868:	d107      	bne.n	800587a <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0201 	bic.w	r2, r2, #1
 8005878:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2200      	movs	r2, #0
 8005880:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	2b04      	cmp	r3, #4
 8005888:	d008      	beq.n	800589c <HAL_I2S_Init+0x74>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	2b06      	cmp	r3, #6
 8005890:	d004      	beq.n	800589c <HAL_I2S_Init+0x74>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	2b0a      	cmp	r3, #10
 8005898:	f040 8087 	bne.w	80059aa <HAL_I2S_Init+0x182>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d05a      	beq.n	800595a <HAL_I2S_Init+0x132>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d002      	beq.n	80058b2 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 80058ac:	2302      	movs	r3, #2
 80058ae:	617b      	str	r3, [r7, #20]
 80058b0:	e001      	b.n	80058b6 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 80058b2:	2301      	movs	r3, #1
 80058b4:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	2b30      	cmp	r3, #48	; 0x30
 80058bc:	d003      	beq.n	80058c6 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80058c2:	2bb0      	cmp	r3, #176	; 0xb0
 80058c4:	d102      	bne.n	80058cc <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 80058c6:	2301      	movs	r3, #1
 80058c8:	60fb      	str	r3, [r7, #12]
 80058ca:	e001      	b.n	80058d0 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 80058cc:	2300      	movs	r3, #0
 80058ce:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 80058d0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80058d4:	f04f 0100 	mov.w	r1, #0
 80058d8:	f002 fc2c 	bl	8008134 <HAL_RCCEx_GetPeriphCLKFreq>
 80058dc:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058e6:	d113      	bne.n	8005910 <HAL_I2S_Init+0xe8>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80058e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	fa22 f303 	lsr.w	r3, r2, r3
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80058f8:	4613      	mov	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	461a      	mov	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	fbb2 f3f3 	udiv	r3, r2, r3
 800590a:	3305      	adds	r3, #5
 800590c:	613b      	str	r3, [r7, #16]
 800590e:	e014      	b.n	800593a <HAL_I2S_Init+0x112>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8005910:	2220      	movs	r2, #32
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	fa22 f303 	lsr.w	r3, r2, r3
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	fb02 f303 	mul.w	r3, r2, r3
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	fbb2 f2f3 	udiv	r2, r2, r3
 8005924:	4613      	mov	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	461a      	mov	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	fbb2 f3f3 	udiv	r3, r2, r3
 8005936:	3305      	adds	r3, #5
 8005938:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	4a48      	ldr	r2, [pc, #288]	; (8005a60 <HAL_I2S_Init+0x238>)
 800593e:	fba2 2303 	umull	r2, r3, r2, r3
 8005942:	08db      	lsrs	r3, r3, #3
 8005944:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	085b      	lsrs	r3, r3, #1
 8005956:	61fb      	str	r3, [r7, #28]
 8005958:	e003      	b.n	8005962 <HAL_I2S_Init+0x13a>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 800595a:	2302      	movs	r3, #2
 800595c:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 800595e:	2300      	movs	r3, #0
 8005960:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d102      	bne.n	800596e <HAL_I2S_Init+0x146>
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d002      	beq.n	8005974 <HAL_I2S_Init+0x14c>
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	2bff      	cmp	r3, #255	; 0xff
 8005972:	d907      	bls.n	8005984 <HAL_I2S_Init+0x15c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005978:	f043 0210 	orr.w	r2, r3, #16
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e068      	b.n	8005a56 <HAL_I2S_Init+0x22e>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <HAL_I2S_Init+0x166>
    {
      i2sodd = 1UL;
 800598a:	2301      	movs	r3, #1
 800598c:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005994:	4b33      	ldr	r3, [pc, #204]	; (8005a64 <HAL_I2S_Init+0x23c>)
 8005996:	4013      	ands	r3, r2
 8005998:	69fa      	ldr	r2, [r7, #28]
 800599a:	0411      	lsls	r1, r2, #16
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	0612      	lsls	r2, r2, #24
 80059a0:	4311      	orrs	r1, r2
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	6812      	ldr	r2, [r2, #0]
 80059a6:	430b      	orrs	r3, r1
 80059a8:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059b0:	4b2d      	ldr	r3, [pc, #180]	; (8005a68 <HAL_I2S_Init+0x240>)
 80059b2:	4013      	ands	r3, r2
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6851      	ldr	r1, [r2, #4]
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	6892      	ldr	r2, [r2, #8]
 80059bc:	4311      	orrs	r1, r2
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	68d2      	ldr	r2, [r2, #12]
 80059c2:	4311      	orrs	r1, r2
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6992      	ldr	r2, [r2, #24]
 80059c8:	4311      	orrs	r1, r2
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6a12      	ldr	r2, [r2, #32]
 80059ce:	4311      	orrs	r1, r2
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059d4:	4311      	orrs	r1, r2
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	6912      	ldr	r2, [r2, #16]
 80059da:	430a      	orrs	r2, r1
 80059dc:	431a      	orrs	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0201 	orr.w	r2, r2, #1
 80059e6:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f640 72f8 	movw	r2, #4088	; 0xff8
 80059f0:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005a00:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	69da      	ldr	r2, [r3, #28]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	2b04      	cmp	r3, #4
 8005a1e:	d007      	beq.n	8005a30 <HAL_I2S_Init+0x208>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	2b06      	cmp	r3, #6
 8005a26:	d003      	beq.n	8005a30 <HAL_I2S_Init+0x208>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	2b0a      	cmp	r3, #10
 8005a2e:	d10a      	bne.n	8005a46 <HAL_I2S_Init+0x21e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3720      	adds	r7, #32
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	cccccccd 	.word	0xcccccccd
 8005a64:	fe00ffff 	.word	0xfe00ffff
 8005a68:	fdff9040 	.word	0xfdff9040

08005a6c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, const uint16_t *pData, uint16_t Size)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	4613      	mov	r3, r2
 8005a78:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	75fb      	strb	r3, [r7, #23]

  if ((pData == NULL) || (Size == 0UL))
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <HAL_I2S_Transmit_DMA+0x1e>
 8005a84:	88fb      	ldrh	r3, [r7, #6]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_I2S_Transmit_DMA+0x22>
  {
    return  HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e086      	b.n	8005b9c <HAL_I2S_Transmit_DMA+0x130>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d001      	beq.n	8005a9e <HAL_I2S_Transmit_DMA+0x32>
  {
    return HAL_BUSY;
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	e07e      	b.n	8005b9c <HAL_I2S_Transmit_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_I2S_Transmit_DMA+0x42>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e076      	b.n	8005b9c <HAL_I2S_Transmit_DMA+0x130>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_TX;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2203      	movs	r2, #3
 8005aba:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->pTxBuffPtr  = (const uint16_t *)pData;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->TxXferSize  = Size;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	88fa      	ldrh	r2, [r7, #6]
 8005ace:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = Size;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	88fa      	ldrh	r2, [r7, #6]
 8005ad4:	865a      	strh	r2, [r3, #50]	; 0x32

  /* Init field not used in handle to zero */
  hi2s->pRxBuffPtr  = NULL;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	635a      	str	r2, [r3, #52]	; 0x34
  hi2s->RxXferSize  = (uint16_t)0UL;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = (uint16_t)0UL;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aec:	4a2d      	ldr	r2, [pc, #180]	; (8005ba4 <HAL_I2S_Transmit_DMA+0x138>)
 8005aee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af4:	4a2c      	ldr	r2, [pc, #176]	; (8005ba8 <HAL_I2S_Transmit_DMA+0x13c>)
 8005af6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afc:	4a2b      	ldr	r2, [pc, #172]	; (8005bac <HAL_I2S_Transmit_DMA+0x140>)
 8005afe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b08:	4619      	mov	r1, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	3320      	adds	r3, #32
 8005b10:	461a      	mov	r2, r3
                                 hi2s->TxXferCount))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b16:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8005b18:	f7fc fd08 	bl	800252c <HAL_DMA_Start_IT>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d011      	beq.n	8005b46 <HAL_I2S_Transmit_DMA+0xda>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b26:	f043 0208 	orr.w	r2, r3, #8
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    __HAL_UNLOCK(hi2s);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    errorcode = HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8005b42:	7dfb      	ldrb	r3, [r7, #23]
 8005b44:	e02a      	b.n	8005b9c <HAL_I2S_Transmit_DMA+0x130>
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN))
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d107      	bne.n	8005b64 <HAL_I2S_Transmit_DMA+0xf8>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689a      	ldr	r2, [r3, #8]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b62:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d107      	bne.n	8005b82 <HAL_I2S_Transmit_DMA+0x116>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f042 0201 	orr.w	r2, r2, #1
 8005b80:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b90:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return errorcode;
 8005b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3718      	adds	r7, #24
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	08005ca5 	.word	0x08005ca5
 8005ba8:	08005c63 	.word	0x08005c63
 8005bac:	08005cc1 	.word	0x08005cc1

08005bb0 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  /* Disable the I2S Tx/Rx DMA requests */
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689a      	ldr	r2, [r3, #8]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bca:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689a      	ldr	r2, [r3, #8]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005bda:	609a      	str	r2, [r3, #8]

  /* Abort the I2S DMA tx Stream/Channel */
  if (hi2s->hdmatx != NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00f      	beq.n	8005c04 <HAL_I2S_DMAStop+0x54>
  {
    /* Disable the I2S DMA tx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fc ff09 	bl	8002a00 <HAL_DMA_Abort>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d007      	beq.n	8005c04 <HAL_I2S_DMAStop+0x54>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bf8:	f043 0208 	orr.w	r2, r3, #8
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	651a      	str	r2, [r3, #80]	; 0x50
      errorcode = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Abort the I2S DMA rx Stream/Channel */
  if (hi2s->hdmarx != NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00f      	beq.n	8005c2c <HAL_I2S_DMAStop+0x7c>
  {
    /* Disable the I2S DMA rx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7fc fef5 	bl	8002a00 <HAL_DMA_Abort>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d007      	beq.n	8005c2c <HAL_I2S_DMAStop+0x7c>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c20:	f043 0208 	orr.w	r2, r3, #8
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	651a      	str	r2, [r3, #80]	; 0x50
      errorcode = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable I2S peripheral */
  __HAL_I2S_DISABLE(hi2s);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 0201 	bic.w	r2, r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]

  hi2s->State = HAL_I2S_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return errorcode;
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b084      	sub	sp, #16
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10e      	bne.n	8005c96 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689a      	ldr	r2, [r3, #8]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c86:	609a      	str	r2, [r3, #8]

    hi2s->TxXferCount = (uint16_t) 0UL;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f7fb faf0 	bl	800127c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005c9c:	bf00      	nop
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f7fb fad2 	bl	800125c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005cb8:	bf00      	nop
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ccc:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005cdc:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cf6:	f043 0208 	orr.w	r2, r3, #8
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	651a      	str	r2, [r3, #80]	; 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f7ff ffa5 	bl	8005c4e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005d04:	bf00      	nop
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005d14:	4b19      	ldr	r3, [pc, #100]	; (8005d7c <HAL_PWREx_ConfigSupply+0x70>)
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b04      	cmp	r3, #4
 8005d1e:	d00a      	beq.n	8005d36 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005d20:	4b16      	ldr	r3, [pc, #88]	; (8005d7c <HAL_PWREx_ConfigSupply+0x70>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f003 0307 	and.w	r3, r3, #7
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d001      	beq.n	8005d32 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e01f      	b.n	8005d72 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005d32:	2300      	movs	r3, #0
 8005d34:	e01d      	b.n	8005d72 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005d36:	4b11      	ldr	r3, [pc, #68]	; (8005d7c <HAL_PWREx_ConfigSupply+0x70>)
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f023 0207 	bic.w	r2, r3, #7
 8005d3e:	490f      	ldr	r1, [pc, #60]	; (8005d7c <HAL_PWREx_ConfigSupply+0x70>)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005d46:	f7fb ff49 	bl	8001bdc <HAL_GetTick>
 8005d4a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d4c:	e009      	b.n	8005d62 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005d4e:	f7fb ff45 	bl	8001bdc <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d5c:	d901      	bls.n	8005d62 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e007      	b.n	8005d72 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d62:	4b06      	ldr	r3, [pc, #24]	; (8005d7c <HAL_PWREx_ConfigSupply+0x70>)
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d6e:	d1ee      	bne.n	8005d4e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	58024800 	.word	0x58024800

08005d80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b08c      	sub	sp, #48	; 0x30
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d102      	bne.n	8005d94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	f000 bc48 	b.w	8006624 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 8088 	beq.w	8005eb2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005da2:	4b99      	ldr	r3, [pc, #612]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005dac:	4b96      	ldr	r3, [pc, #600]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db4:	2b10      	cmp	r3, #16
 8005db6:	d007      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x48>
 8005db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dba:	2b18      	cmp	r3, #24
 8005dbc:	d111      	bne.n	8005de2 <HAL_RCC_OscConfig+0x62>
 8005dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc0:	f003 0303 	and.w	r3, r3, #3
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d10c      	bne.n	8005de2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dc8:	4b8f      	ldr	r3, [pc, #572]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d06d      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x130>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d169      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	f000 bc21 	b.w	8006624 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dea:	d106      	bne.n	8005dfa <HAL_RCC_OscConfig+0x7a>
 8005dec:	4b86      	ldr	r3, [pc, #536]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a85      	ldr	r2, [pc, #532]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	e02e      	b.n	8005e58 <HAL_RCC_OscConfig+0xd8>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10c      	bne.n	8005e1c <HAL_RCC_OscConfig+0x9c>
 8005e02:	4b81      	ldr	r3, [pc, #516]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a80      	ldr	r2, [pc, #512]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e0c:	6013      	str	r3, [r2, #0]
 8005e0e:	4b7e      	ldr	r3, [pc, #504]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a7d      	ldr	r2, [pc, #500]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005e14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	e01d      	b.n	8005e58 <HAL_RCC_OscConfig+0xd8>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e24:	d10c      	bne.n	8005e40 <HAL_RCC_OscConfig+0xc0>
 8005e26:	4b78      	ldr	r3, [pc, #480]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a77      	ldr	r2, [pc, #476]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005e2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e30:	6013      	str	r3, [r2, #0]
 8005e32:	4b75      	ldr	r3, [pc, #468]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a74      	ldr	r2, [pc, #464]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	e00b      	b.n	8005e58 <HAL_RCC_OscConfig+0xd8>
 8005e40:	4b71      	ldr	r3, [pc, #452]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a70      	ldr	r2, [pc, #448]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e4a:	6013      	str	r3, [r2, #0]
 8005e4c:	4b6e      	ldr	r3, [pc, #440]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a6d      	ldr	r2, [pc, #436]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005e52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d013      	beq.n	8005e88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e60:	f7fb febc 	bl	8001bdc <HAL_GetTick>
 8005e64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e66:	e008      	b.n	8005e7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e68:	f7fb feb8 	bl	8001bdc <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b64      	cmp	r3, #100	; 0x64
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e3d4      	b.n	8006624 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e7a:	4b63      	ldr	r3, [pc, #396]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d0f0      	beq.n	8005e68 <HAL_RCC_OscConfig+0xe8>
 8005e86:	e014      	b.n	8005eb2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e88:	f7fb fea8 	bl	8001bdc <HAL_GetTick>
 8005e8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e90:	f7fb fea4 	bl	8001bdc <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b64      	cmp	r3, #100	; 0x64
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e3c0      	b.n	8006624 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ea2:	4b59      	ldr	r3, [pc, #356]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1f0      	bne.n	8005e90 <HAL_RCC_OscConfig+0x110>
 8005eae:	e000      	b.n	8005eb2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f000 80ca 	beq.w	8006054 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ec0:	4b51      	ldr	r3, [pc, #324]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ec8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005eca:	4b4f      	ldr	r3, [pc, #316]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ece:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d007      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x166>
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	2b18      	cmp	r3, #24
 8005eda:	d156      	bne.n	8005f8a <HAL_RCC_OscConfig+0x20a>
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	f003 0303 	and.w	r3, r3, #3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d151      	bne.n	8005f8a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ee6:	4b48      	ldr	r3, [pc, #288]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0304 	and.w	r3, r3, #4
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d005      	beq.n	8005efe <HAL_RCC_OscConfig+0x17e>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e392      	b.n	8006624 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005efe:	4b42      	ldr	r3, [pc, #264]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f023 0219 	bic.w	r2, r3, #25
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	493f      	ldr	r1, [pc, #252]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f10:	f7fb fe64 	bl	8001bdc <HAL_GetTick>
 8005f14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f16:	e008      	b.n	8005f2a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f18:	f7fb fe60 	bl	8001bdc <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e37c      	b.n	8006624 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f2a:	4b37      	ldr	r3, [pc, #220]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0304 	and.w	r3, r3, #4
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d0f0      	beq.n	8005f18 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f36:	f7fb fe81 	bl	8001c3c <HAL_GetREVID>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d817      	bhi.n	8005f74 <HAL_RCC_OscConfig+0x1f4>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	2b40      	cmp	r3, #64	; 0x40
 8005f4a:	d108      	bne.n	8005f5e <HAL_RCC_OscConfig+0x1de>
 8005f4c:	4b2e      	ldr	r3, [pc, #184]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005f54:	4a2c      	ldr	r2, [pc, #176]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005f56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f5a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f5c:	e07a      	b.n	8006054 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f5e:	4b2a      	ldr	r3, [pc, #168]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	031b      	lsls	r3, r3, #12
 8005f6c:	4926      	ldr	r1, [pc, #152]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f72:	e06f      	b.n	8006054 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f74:	4b24      	ldr	r3, [pc, #144]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	061b      	lsls	r3, r3, #24
 8005f82:	4921      	ldr	r1, [pc, #132]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f88:	e064      	b.n	8006054 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d047      	beq.n	8006022 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f92:	4b1d      	ldr	r3, [pc, #116]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f023 0219 	bic.w	r2, r3, #25
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	491a      	ldr	r1, [pc, #104]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa4:	f7fb fe1a 	bl	8001bdc <HAL_GetTick>
 8005fa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005faa:	e008      	b.n	8005fbe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fac:	f7fb fe16 	bl	8001bdc <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e332      	b.n	8006624 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fbe:	4b12      	ldr	r3, [pc, #72]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0304 	and.w	r3, r3, #4
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d0f0      	beq.n	8005fac <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fca:	f7fb fe37 	bl	8001c3c <HAL_GetREVID>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	f241 0203 	movw	r2, #4099	; 0x1003
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d819      	bhi.n	800600c <HAL_RCC_OscConfig+0x28c>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	2b40      	cmp	r3, #64	; 0x40
 8005fde:	d108      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x272>
 8005fe0:	4b09      	ldr	r3, [pc, #36]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005fe8:	4a07      	ldr	r2, [pc, #28]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005fea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fee:	6053      	str	r3, [r2, #4]
 8005ff0:	e030      	b.n	8006054 <HAL_RCC_OscConfig+0x2d4>
 8005ff2:	4b05      	ldr	r3, [pc, #20]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	031b      	lsls	r3, r3, #12
 8006000:	4901      	ldr	r1, [pc, #4]	; (8006008 <HAL_RCC_OscConfig+0x288>)
 8006002:	4313      	orrs	r3, r2
 8006004:	604b      	str	r3, [r1, #4]
 8006006:	e025      	b.n	8006054 <HAL_RCC_OscConfig+0x2d4>
 8006008:	58024400 	.word	0x58024400
 800600c:	4b9a      	ldr	r3, [pc, #616]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	061b      	lsls	r3, r3, #24
 800601a:	4997      	ldr	r1, [pc, #604]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 800601c:	4313      	orrs	r3, r2
 800601e:	604b      	str	r3, [r1, #4]
 8006020:	e018      	b.n	8006054 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006022:	4b95      	ldr	r3, [pc, #596]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a94      	ldr	r2, [pc, #592]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 8006028:	f023 0301 	bic.w	r3, r3, #1
 800602c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800602e:	f7fb fdd5 	bl	8001bdc <HAL_GetTick>
 8006032:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006034:	e008      	b.n	8006048 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006036:	f7fb fdd1 	bl	8001bdc <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	2b02      	cmp	r3, #2
 8006042:	d901      	bls.n	8006048 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e2ed      	b.n	8006624 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006048:	4b8b      	ldr	r3, [pc, #556]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0304 	and.w	r3, r3, #4
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1f0      	bne.n	8006036 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0310 	and.w	r3, r3, #16
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 80a9 	beq.w	80061b4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006062:	4b85      	ldr	r3, [pc, #532]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800606a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800606c:	4b82      	ldr	r3, [pc, #520]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 800606e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006070:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	2b08      	cmp	r3, #8
 8006076:	d007      	beq.n	8006088 <HAL_RCC_OscConfig+0x308>
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	2b18      	cmp	r3, #24
 800607c:	d13a      	bne.n	80060f4 <HAL_RCC_OscConfig+0x374>
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	f003 0303 	and.w	r3, r3, #3
 8006084:	2b01      	cmp	r3, #1
 8006086:	d135      	bne.n	80060f4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006088:	4b7b      	ldr	r3, [pc, #492]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006090:	2b00      	cmp	r3, #0
 8006092:	d005      	beq.n	80060a0 <HAL_RCC_OscConfig+0x320>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	69db      	ldr	r3, [r3, #28]
 8006098:	2b80      	cmp	r3, #128	; 0x80
 800609a:	d001      	beq.n	80060a0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e2c1      	b.n	8006624 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060a0:	f7fb fdcc 	bl	8001c3c <HAL_GetREVID>
 80060a4:	4603      	mov	r3, r0
 80060a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d817      	bhi.n	80060de <HAL_RCC_OscConfig+0x35e>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	2b20      	cmp	r3, #32
 80060b4:	d108      	bne.n	80060c8 <HAL_RCC_OscConfig+0x348>
 80060b6:	4b70      	ldr	r3, [pc, #448]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80060be:	4a6e      	ldr	r2, [pc, #440]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 80060c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060c4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060c6:	e075      	b.n	80061b4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060c8:	4b6b      	ldr	r3, [pc, #428]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	069b      	lsls	r3, r3, #26
 80060d6:	4968      	ldr	r1, [pc, #416]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060dc:	e06a      	b.n	80061b4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060de:	4b66      	ldr	r3, [pc, #408]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	061b      	lsls	r3, r3, #24
 80060ec:	4962      	ldr	r1, [pc, #392]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060f2:	e05f      	b.n	80061b4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d042      	beq.n	8006182 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80060fc:	4b5e      	ldr	r3, [pc, #376]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a5d      	ldr	r2, [pc, #372]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 8006102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006108:	f7fb fd68 	bl	8001bdc <HAL_GetTick>
 800610c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800610e:	e008      	b.n	8006122 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006110:	f7fb fd64 	bl	8001bdc <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b02      	cmp	r3, #2
 800611c:	d901      	bls.n	8006122 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e280      	b.n	8006624 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006122:	4b55      	ldr	r3, [pc, #340]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800612a:	2b00      	cmp	r3, #0
 800612c:	d0f0      	beq.n	8006110 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800612e:	f7fb fd85 	bl	8001c3c <HAL_GetREVID>
 8006132:	4603      	mov	r3, r0
 8006134:	f241 0203 	movw	r2, #4099	; 0x1003
 8006138:	4293      	cmp	r3, r2
 800613a:	d817      	bhi.n	800616c <HAL_RCC_OscConfig+0x3ec>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	2b20      	cmp	r3, #32
 8006142:	d108      	bne.n	8006156 <HAL_RCC_OscConfig+0x3d6>
 8006144:	4b4c      	ldr	r3, [pc, #304]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800614c:	4a4a      	ldr	r2, [pc, #296]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 800614e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006152:	6053      	str	r3, [r2, #4]
 8006154:	e02e      	b.n	80061b4 <HAL_RCC_OscConfig+0x434>
 8006156:	4b48      	ldr	r3, [pc, #288]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	069b      	lsls	r3, r3, #26
 8006164:	4944      	ldr	r1, [pc, #272]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 8006166:	4313      	orrs	r3, r2
 8006168:	604b      	str	r3, [r1, #4]
 800616a:	e023      	b.n	80061b4 <HAL_RCC_OscConfig+0x434>
 800616c:	4b42      	ldr	r3, [pc, #264]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	061b      	lsls	r3, r3, #24
 800617a:	493f      	ldr	r1, [pc, #252]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 800617c:	4313      	orrs	r3, r2
 800617e:	60cb      	str	r3, [r1, #12]
 8006180:	e018      	b.n	80061b4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006182:	4b3d      	ldr	r3, [pc, #244]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a3c      	ldr	r2, [pc, #240]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 8006188:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800618c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800618e:	f7fb fd25 	bl	8001bdc <HAL_GetTick>
 8006192:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006194:	e008      	b.n	80061a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006196:	f7fb fd21 	bl	8001bdc <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d901      	bls.n	80061a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e23d      	b.n	8006624 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80061a8:	4b33      	ldr	r3, [pc, #204]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1f0      	bne.n	8006196 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0308 	and.w	r3, r3, #8
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d036      	beq.n	800622e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d019      	beq.n	80061fc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061c8:	4b2b      	ldr	r3, [pc, #172]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 80061ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061cc:	4a2a      	ldr	r2, [pc, #168]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 80061ce:	f043 0301 	orr.w	r3, r3, #1
 80061d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061d4:	f7fb fd02 	bl	8001bdc <HAL_GetTick>
 80061d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061da:	e008      	b.n	80061ee <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061dc:	f7fb fcfe 	bl	8001bdc <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d901      	bls.n	80061ee <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e21a      	b.n	8006624 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061ee:	4b22      	ldr	r3, [pc, #136]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 80061f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d0f0      	beq.n	80061dc <HAL_RCC_OscConfig+0x45c>
 80061fa:	e018      	b.n	800622e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061fc:	4b1e      	ldr	r3, [pc, #120]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 80061fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006200:	4a1d      	ldr	r2, [pc, #116]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 8006202:	f023 0301 	bic.w	r3, r3, #1
 8006206:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006208:	f7fb fce8 	bl	8001bdc <HAL_GetTick>
 800620c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800620e:	e008      	b.n	8006222 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006210:	f7fb fce4 	bl	8001bdc <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	2b02      	cmp	r3, #2
 800621c:	d901      	bls.n	8006222 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e200      	b.n	8006624 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006222:	4b15      	ldr	r3, [pc, #84]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 8006224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1f0      	bne.n	8006210 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0320 	and.w	r3, r3, #32
 8006236:	2b00      	cmp	r3, #0
 8006238:	d039      	beq.n	80062ae <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d01c      	beq.n	800627c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006242:	4b0d      	ldr	r3, [pc, #52]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a0c      	ldr	r2, [pc, #48]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 8006248:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800624c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800624e:	f7fb fcc5 	bl	8001bdc <HAL_GetTick>
 8006252:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006254:	e008      	b.n	8006268 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006256:	f7fb fcc1 	bl	8001bdc <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d901      	bls.n	8006268 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e1dd      	b.n	8006624 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006268:	4b03      	ldr	r3, [pc, #12]	; (8006278 <HAL_RCC_OscConfig+0x4f8>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d0f0      	beq.n	8006256 <HAL_RCC_OscConfig+0x4d6>
 8006274:	e01b      	b.n	80062ae <HAL_RCC_OscConfig+0x52e>
 8006276:	bf00      	nop
 8006278:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800627c:	4b9b      	ldr	r3, [pc, #620]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a9a      	ldr	r2, [pc, #616]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 8006282:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006286:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006288:	f7fb fca8 	bl	8001bdc <HAL_GetTick>
 800628c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800628e:	e008      	b.n	80062a2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006290:	f7fb fca4 	bl	8001bdc <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b02      	cmp	r3, #2
 800629c:	d901      	bls.n	80062a2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e1c0      	b.n	8006624 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80062a2:	4b92      	ldr	r3, [pc, #584]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1f0      	bne.n	8006290 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0304 	and.w	r3, r3, #4
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 8081 	beq.w	80063be <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80062bc:	4b8c      	ldr	r3, [pc, #560]	; (80064f0 <HAL_RCC_OscConfig+0x770>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a8b      	ldr	r2, [pc, #556]	; (80064f0 <HAL_RCC_OscConfig+0x770>)
 80062c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062c8:	f7fb fc88 	bl	8001bdc <HAL_GetTick>
 80062cc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062ce:	e008      	b.n	80062e2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062d0:	f7fb fc84 	bl	8001bdc <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	2b64      	cmp	r3, #100	; 0x64
 80062dc:	d901      	bls.n	80062e2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e1a0      	b.n	8006624 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062e2:	4b83      	ldr	r3, [pc, #524]	; (80064f0 <HAL_RCC_OscConfig+0x770>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d0f0      	beq.n	80062d0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d106      	bne.n	8006304 <HAL_RCC_OscConfig+0x584>
 80062f6:	4b7d      	ldr	r3, [pc, #500]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 80062f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062fa:	4a7c      	ldr	r2, [pc, #496]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 80062fc:	f043 0301 	orr.w	r3, r3, #1
 8006300:	6713      	str	r3, [r2, #112]	; 0x70
 8006302:	e02d      	b.n	8006360 <HAL_RCC_OscConfig+0x5e0>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10c      	bne.n	8006326 <HAL_RCC_OscConfig+0x5a6>
 800630c:	4b77      	ldr	r3, [pc, #476]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 800630e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006310:	4a76      	ldr	r2, [pc, #472]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 8006312:	f023 0301 	bic.w	r3, r3, #1
 8006316:	6713      	str	r3, [r2, #112]	; 0x70
 8006318:	4b74      	ldr	r3, [pc, #464]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 800631a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631c:	4a73      	ldr	r2, [pc, #460]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 800631e:	f023 0304 	bic.w	r3, r3, #4
 8006322:	6713      	str	r3, [r2, #112]	; 0x70
 8006324:	e01c      	b.n	8006360 <HAL_RCC_OscConfig+0x5e0>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	2b05      	cmp	r3, #5
 800632c:	d10c      	bne.n	8006348 <HAL_RCC_OscConfig+0x5c8>
 800632e:	4b6f      	ldr	r3, [pc, #444]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 8006330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006332:	4a6e      	ldr	r2, [pc, #440]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 8006334:	f043 0304 	orr.w	r3, r3, #4
 8006338:	6713      	str	r3, [r2, #112]	; 0x70
 800633a:	4b6c      	ldr	r3, [pc, #432]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 800633c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800633e:	4a6b      	ldr	r2, [pc, #428]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 8006340:	f043 0301 	orr.w	r3, r3, #1
 8006344:	6713      	str	r3, [r2, #112]	; 0x70
 8006346:	e00b      	b.n	8006360 <HAL_RCC_OscConfig+0x5e0>
 8006348:	4b68      	ldr	r3, [pc, #416]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 800634a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634c:	4a67      	ldr	r2, [pc, #412]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 800634e:	f023 0301 	bic.w	r3, r3, #1
 8006352:	6713      	str	r3, [r2, #112]	; 0x70
 8006354:	4b65      	ldr	r3, [pc, #404]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 8006356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006358:	4a64      	ldr	r2, [pc, #400]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 800635a:	f023 0304 	bic.w	r3, r3, #4
 800635e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d015      	beq.n	8006394 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006368:	f7fb fc38 	bl	8001bdc <HAL_GetTick>
 800636c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800636e:	e00a      	b.n	8006386 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006370:	f7fb fc34 	bl	8001bdc <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	f241 3288 	movw	r2, #5000	; 0x1388
 800637e:	4293      	cmp	r3, r2
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e14e      	b.n	8006624 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006386:	4b59      	ldr	r3, [pc, #356]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 8006388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d0ee      	beq.n	8006370 <HAL_RCC_OscConfig+0x5f0>
 8006392:	e014      	b.n	80063be <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006394:	f7fb fc22 	bl	8001bdc <HAL_GetTick>
 8006398:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800639a:	e00a      	b.n	80063b2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800639c:	f7fb fc1e 	bl	8001bdc <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d901      	bls.n	80063b2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e138      	b.n	8006624 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80063b2:	4b4e      	ldr	r3, [pc, #312]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 80063b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1ee      	bne.n	800639c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 812d 	beq.w	8006622 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80063c8:	4b48      	ldr	r3, [pc, #288]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063d0:	2b18      	cmp	r3, #24
 80063d2:	f000 80bd 	beq.w	8006550 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	2b02      	cmp	r3, #2
 80063dc:	f040 809e 	bne.w	800651c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063e0:	4b42      	ldr	r3, [pc, #264]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a41      	ldr	r2, [pc, #260]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 80063e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ec:	f7fb fbf6 	bl	8001bdc <HAL_GetTick>
 80063f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063f2:	e008      	b.n	8006406 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063f4:	f7fb fbf2 	bl	8001bdc <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d901      	bls.n	8006406 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e10e      	b.n	8006624 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006406:	4b39      	ldr	r3, [pc, #228]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1f0      	bne.n	80063f4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006412:	4b36      	ldr	r3, [pc, #216]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 8006414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006416:	4b37      	ldr	r3, [pc, #220]	; (80064f4 <HAL_RCC_OscConfig+0x774>)
 8006418:	4013      	ands	r3, r2
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006422:	0112      	lsls	r2, r2, #4
 8006424:	430a      	orrs	r2, r1
 8006426:	4931      	ldr	r1, [pc, #196]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 8006428:	4313      	orrs	r3, r2
 800642a:	628b      	str	r3, [r1, #40]	; 0x28
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006430:	3b01      	subs	r3, #1
 8006432:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800643a:	3b01      	subs	r3, #1
 800643c:	025b      	lsls	r3, r3, #9
 800643e:	b29b      	uxth	r3, r3
 8006440:	431a      	orrs	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006446:	3b01      	subs	r3, #1
 8006448:	041b      	lsls	r3, r3, #16
 800644a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800644e:	431a      	orrs	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006454:	3b01      	subs	r3, #1
 8006456:	061b      	lsls	r3, r3, #24
 8006458:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800645c:	4923      	ldr	r1, [pc, #140]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 800645e:	4313      	orrs	r3, r2
 8006460:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006462:	4b22      	ldr	r3, [pc, #136]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 8006464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006466:	4a21      	ldr	r2, [pc, #132]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 8006468:	f023 0301 	bic.w	r3, r3, #1
 800646c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800646e:	4b1f      	ldr	r3, [pc, #124]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 8006470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006472:	4b21      	ldr	r3, [pc, #132]	; (80064f8 <HAL_RCC_OscConfig+0x778>)
 8006474:	4013      	ands	r3, r2
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800647a:	00d2      	lsls	r2, r2, #3
 800647c:	491b      	ldr	r1, [pc, #108]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 800647e:	4313      	orrs	r3, r2
 8006480:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006482:	4b1a      	ldr	r3, [pc, #104]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 8006484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006486:	f023 020c 	bic.w	r2, r3, #12
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648e:	4917      	ldr	r1, [pc, #92]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 8006490:	4313      	orrs	r3, r2
 8006492:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006494:	4b15      	ldr	r3, [pc, #84]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 8006496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006498:	f023 0202 	bic.w	r2, r3, #2
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a0:	4912      	ldr	r1, [pc, #72]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80064a6:	4b11      	ldr	r3, [pc, #68]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 80064a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064aa:	4a10      	ldr	r2, [pc, #64]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 80064ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064b2:	4b0e      	ldr	r3, [pc, #56]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 80064b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b6:	4a0d      	ldr	r2, [pc, #52]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 80064b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80064be:	4b0b      	ldr	r3, [pc, #44]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 80064c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c2:	4a0a      	ldr	r2, [pc, #40]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 80064c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80064ca:	4b08      	ldr	r3, [pc, #32]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 80064cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ce:	4a07      	ldr	r2, [pc, #28]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 80064d0:	f043 0301 	orr.w	r3, r3, #1
 80064d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064d6:	4b05      	ldr	r3, [pc, #20]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a04      	ldr	r2, [pc, #16]	; (80064ec <HAL_RCC_OscConfig+0x76c>)
 80064dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e2:	f7fb fb7b 	bl	8001bdc <HAL_GetTick>
 80064e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064e8:	e011      	b.n	800650e <HAL_RCC_OscConfig+0x78e>
 80064ea:	bf00      	nop
 80064ec:	58024400 	.word	0x58024400
 80064f0:	58024800 	.word	0x58024800
 80064f4:	fffffc0c 	.word	0xfffffc0c
 80064f8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064fc:	f7fb fb6e 	bl	8001bdc <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b02      	cmp	r3, #2
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e08a      	b.n	8006624 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800650e:	4b47      	ldr	r3, [pc, #284]	; (800662c <HAL_RCC_OscConfig+0x8ac>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0f0      	beq.n	80064fc <HAL_RCC_OscConfig+0x77c>
 800651a:	e082      	b.n	8006622 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800651c:	4b43      	ldr	r3, [pc, #268]	; (800662c <HAL_RCC_OscConfig+0x8ac>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a42      	ldr	r2, [pc, #264]	; (800662c <HAL_RCC_OscConfig+0x8ac>)
 8006522:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006528:	f7fb fb58 	bl	8001bdc <HAL_GetTick>
 800652c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800652e:	e008      	b.n	8006542 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006530:	f7fb fb54 	bl	8001bdc <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b02      	cmp	r3, #2
 800653c:	d901      	bls.n	8006542 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e070      	b.n	8006624 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006542:	4b3a      	ldr	r3, [pc, #232]	; (800662c <HAL_RCC_OscConfig+0x8ac>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1f0      	bne.n	8006530 <HAL_RCC_OscConfig+0x7b0>
 800654e:	e068      	b.n	8006622 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006550:	4b36      	ldr	r3, [pc, #216]	; (800662c <HAL_RCC_OscConfig+0x8ac>)
 8006552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006554:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006556:	4b35      	ldr	r3, [pc, #212]	; (800662c <HAL_RCC_OscConfig+0x8ac>)
 8006558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006560:	2b01      	cmp	r3, #1
 8006562:	d031      	beq.n	80065c8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	f003 0203 	and.w	r2, r3, #3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800656e:	429a      	cmp	r2, r3
 8006570:	d12a      	bne.n	80065c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	091b      	lsrs	r3, r3, #4
 8006576:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800657e:	429a      	cmp	r2, r3
 8006580:	d122      	bne.n	80065c8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800658e:	429a      	cmp	r2, r3
 8006590:	d11a      	bne.n	80065c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	0a5b      	lsrs	r3, r3, #9
 8006596:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800659e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d111      	bne.n	80065c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	0c1b      	lsrs	r3, r3, #16
 80065a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d108      	bne.n	80065c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	0e1b      	lsrs	r3, r3, #24
 80065ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d001      	beq.n	80065cc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e02b      	b.n	8006624 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80065cc:	4b17      	ldr	r3, [pc, #92]	; (800662c <HAL_RCC_OscConfig+0x8ac>)
 80065ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d0:	08db      	lsrs	r3, r3, #3
 80065d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065d6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d01f      	beq.n	8006622 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80065e2:	4b12      	ldr	r3, [pc, #72]	; (800662c <HAL_RCC_OscConfig+0x8ac>)
 80065e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e6:	4a11      	ldr	r2, [pc, #68]	; (800662c <HAL_RCC_OscConfig+0x8ac>)
 80065e8:	f023 0301 	bic.w	r3, r3, #1
 80065ec:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80065ee:	f7fb faf5 	bl	8001bdc <HAL_GetTick>
 80065f2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80065f4:	bf00      	nop
 80065f6:	f7fb faf1 	bl	8001bdc <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	4293      	cmp	r3, r2
 8006600:	d0f9      	beq.n	80065f6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006602:	4b0a      	ldr	r3, [pc, #40]	; (800662c <HAL_RCC_OscConfig+0x8ac>)
 8006604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006606:	4b0a      	ldr	r3, [pc, #40]	; (8006630 <HAL_RCC_OscConfig+0x8b0>)
 8006608:	4013      	ands	r3, r2
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800660e:	00d2      	lsls	r2, r2, #3
 8006610:	4906      	ldr	r1, [pc, #24]	; (800662c <HAL_RCC_OscConfig+0x8ac>)
 8006612:	4313      	orrs	r3, r2
 8006614:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006616:	4b05      	ldr	r3, [pc, #20]	; (800662c <HAL_RCC_OscConfig+0x8ac>)
 8006618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661a:	4a04      	ldr	r2, [pc, #16]	; (800662c <HAL_RCC_OscConfig+0x8ac>)
 800661c:	f043 0301 	orr.w	r3, r3, #1
 8006620:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3730      	adds	r7, #48	; 0x30
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	58024400 	.word	0x58024400
 8006630:	ffff0007 	.word	0xffff0007

08006634 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b086      	sub	sp, #24
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d101      	bne.n	8006648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e19c      	b.n	8006982 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006648:	4b8a      	ldr	r3, [pc, #552]	; (8006874 <HAL_RCC_ClockConfig+0x240>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 030f 	and.w	r3, r3, #15
 8006650:	683a      	ldr	r2, [r7, #0]
 8006652:	429a      	cmp	r2, r3
 8006654:	d910      	bls.n	8006678 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006656:	4b87      	ldr	r3, [pc, #540]	; (8006874 <HAL_RCC_ClockConfig+0x240>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f023 020f 	bic.w	r2, r3, #15
 800665e:	4985      	ldr	r1, [pc, #532]	; (8006874 <HAL_RCC_ClockConfig+0x240>)
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	4313      	orrs	r3, r2
 8006664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006666:	4b83      	ldr	r3, [pc, #524]	; (8006874 <HAL_RCC_ClockConfig+0x240>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 030f 	and.w	r3, r3, #15
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	429a      	cmp	r2, r3
 8006672:	d001      	beq.n	8006678 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e184      	b.n	8006982 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b00      	cmp	r3, #0
 8006682:	d010      	beq.n	80066a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	691a      	ldr	r2, [r3, #16]
 8006688:	4b7b      	ldr	r3, [pc, #492]	; (8006878 <HAL_RCC_ClockConfig+0x244>)
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006690:	429a      	cmp	r2, r3
 8006692:	d908      	bls.n	80066a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006694:	4b78      	ldr	r3, [pc, #480]	; (8006878 <HAL_RCC_ClockConfig+0x244>)
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	4975      	ldr	r1, [pc, #468]	; (8006878 <HAL_RCC_ClockConfig+0x244>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0308 	and.w	r3, r3, #8
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d010      	beq.n	80066d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	695a      	ldr	r2, [r3, #20]
 80066b6:	4b70      	ldr	r3, [pc, #448]	; (8006878 <HAL_RCC_ClockConfig+0x244>)
 80066b8:	69db      	ldr	r3, [r3, #28]
 80066ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066be:	429a      	cmp	r2, r3
 80066c0:	d908      	bls.n	80066d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80066c2:	4b6d      	ldr	r3, [pc, #436]	; (8006878 <HAL_RCC_ClockConfig+0x244>)
 80066c4:	69db      	ldr	r3, [r3, #28]
 80066c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	496a      	ldr	r1, [pc, #424]	; (8006878 <HAL_RCC_ClockConfig+0x244>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0310 	and.w	r3, r3, #16
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d010      	beq.n	8006702 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	699a      	ldr	r2, [r3, #24]
 80066e4:	4b64      	ldr	r3, [pc, #400]	; (8006878 <HAL_RCC_ClockConfig+0x244>)
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d908      	bls.n	8006702 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80066f0:	4b61      	ldr	r3, [pc, #388]	; (8006878 <HAL_RCC_ClockConfig+0x244>)
 80066f2:	69db      	ldr	r3, [r3, #28]
 80066f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	495e      	ldr	r1, [pc, #376]	; (8006878 <HAL_RCC_ClockConfig+0x244>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0320 	and.w	r3, r3, #32
 800670a:	2b00      	cmp	r3, #0
 800670c:	d010      	beq.n	8006730 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	69da      	ldr	r2, [r3, #28]
 8006712:	4b59      	ldr	r3, [pc, #356]	; (8006878 <HAL_RCC_ClockConfig+0x244>)
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800671a:	429a      	cmp	r2, r3
 800671c:	d908      	bls.n	8006730 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800671e:	4b56      	ldr	r3, [pc, #344]	; (8006878 <HAL_RCC_ClockConfig+0x244>)
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	69db      	ldr	r3, [r3, #28]
 800672a:	4953      	ldr	r1, [pc, #332]	; (8006878 <HAL_RCC_ClockConfig+0x244>)
 800672c:	4313      	orrs	r3, r2
 800672e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0302 	and.w	r3, r3, #2
 8006738:	2b00      	cmp	r3, #0
 800673a:	d010      	beq.n	800675e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68da      	ldr	r2, [r3, #12]
 8006740:	4b4d      	ldr	r3, [pc, #308]	; (8006878 <HAL_RCC_ClockConfig+0x244>)
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	f003 030f 	and.w	r3, r3, #15
 8006748:	429a      	cmp	r2, r3
 800674a:	d908      	bls.n	800675e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800674c:	4b4a      	ldr	r3, [pc, #296]	; (8006878 <HAL_RCC_ClockConfig+0x244>)
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	f023 020f 	bic.w	r2, r3, #15
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	4947      	ldr	r1, [pc, #284]	; (8006878 <HAL_RCC_ClockConfig+0x244>)
 800675a:	4313      	orrs	r3, r2
 800675c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	d055      	beq.n	8006816 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800676a:	4b43      	ldr	r3, [pc, #268]	; (8006878 <HAL_RCC_ClockConfig+0x244>)
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	4940      	ldr	r1, [pc, #256]	; (8006878 <HAL_RCC_ClockConfig+0x244>)
 8006778:	4313      	orrs	r3, r2
 800677a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	2b02      	cmp	r3, #2
 8006782:	d107      	bne.n	8006794 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006784:	4b3c      	ldr	r3, [pc, #240]	; (8006878 <HAL_RCC_ClockConfig+0x244>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d121      	bne.n	80067d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e0f6      	b.n	8006982 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	2b03      	cmp	r3, #3
 800679a:	d107      	bne.n	80067ac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800679c:	4b36      	ldr	r3, [pc, #216]	; (8006878 <HAL_RCC_ClockConfig+0x244>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d115      	bne.n	80067d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e0ea      	b.n	8006982 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d107      	bne.n	80067c4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067b4:	4b30      	ldr	r3, [pc, #192]	; (8006878 <HAL_RCC_ClockConfig+0x244>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d109      	bne.n	80067d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e0de      	b.n	8006982 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067c4:	4b2c      	ldr	r3, [pc, #176]	; (8006878 <HAL_RCC_ClockConfig+0x244>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0304 	and.w	r3, r3, #4
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e0d6      	b.n	8006982 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80067d4:	4b28      	ldr	r3, [pc, #160]	; (8006878 <HAL_RCC_ClockConfig+0x244>)
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	f023 0207 	bic.w	r2, r3, #7
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	4925      	ldr	r1, [pc, #148]	; (8006878 <HAL_RCC_ClockConfig+0x244>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067e6:	f7fb f9f9 	bl	8001bdc <HAL_GetTick>
 80067ea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ec:	e00a      	b.n	8006804 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067ee:	f7fb f9f5 	bl	8001bdc <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d901      	bls.n	8006804 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e0be      	b.n	8006982 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006804:	4b1c      	ldr	r3, [pc, #112]	; (8006878 <HAL_RCC_ClockConfig+0x244>)
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	00db      	lsls	r3, r3, #3
 8006812:	429a      	cmp	r2, r3
 8006814:	d1eb      	bne.n	80067ee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0302 	and.w	r3, r3, #2
 800681e:	2b00      	cmp	r3, #0
 8006820:	d010      	beq.n	8006844 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68da      	ldr	r2, [r3, #12]
 8006826:	4b14      	ldr	r3, [pc, #80]	; (8006878 <HAL_RCC_ClockConfig+0x244>)
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	f003 030f 	and.w	r3, r3, #15
 800682e:	429a      	cmp	r2, r3
 8006830:	d208      	bcs.n	8006844 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006832:	4b11      	ldr	r3, [pc, #68]	; (8006878 <HAL_RCC_ClockConfig+0x244>)
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	f023 020f 	bic.w	r2, r3, #15
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	490e      	ldr	r1, [pc, #56]	; (8006878 <HAL_RCC_ClockConfig+0x244>)
 8006840:	4313      	orrs	r3, r2
 8006842:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006844:	4b0b      	ldr	r3, [pc, #44]	; (8006874 <HAL_RCC_ClockConfig+0x240>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 030f 	and.w	r3, r3, #15
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	429a      	cmp	r2, r3
 8006850:	d214      	bcs.n	800687c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006852:	4b08      	ldr	r3, [pc, #32]	; (8006874 <HAL_RCC_ClockConfig+0x240>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f023 020f 	bic.w	r2, r3, #15
 800685a:	4906      	ldr	r1, [pc, #24]	; (8006874 <HAL_RCC_ClockConfig+0x240>)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	4313      	orrs	r3, r2
 8006860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006862:	4b04      	ldr	r3, [pc, #16]	; (8006874 <HAL_RCC_ClockConfig+0x240>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 030f 	and.w	r3, r3, #15
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	429a      	cmp	r2, r3
 800686e:	d005      	beq.n	800687c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e086      	b.n	8006982 <HAL_RCC_ClockConfig+0x34e>
 8006874:	52002000 	.word	0x52002000
 8006878:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0304 	and.w	r3, r3, #4
 8006884:	2b00      	cmp	r3, #0
 8006886:	d010      	beq.n	80068aa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	691a      	ldr	r2, [r3, #16]
 800688c:	4b3f      	ldr	r3, [pc, #252]	; (800698c <HAL_RCC_ClockConfig+0x358>)
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006894:	429a      	cmp	r2, r3
 8006896:	d208      	bcs.n	80068aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006898:	4b3c      	ldr	r3, [pc, #240]	; (800698c <HAL_RCC_ClockConfig+0x358>)
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	4939      	ldr	r1, [pc, #228]	; (800698c <HAL_RCC_ClockConfig+0x358>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0308 	and.w	r3, r3, #8
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d010      	beq.n	80068d8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	695a      	ldr	r2, [r3, #20]
 80068ba:	4b34      	ldr	r3, [pc, #208]	; (800698c <HAL_RCC_ClockConfig+0x358>)
 80068bc:	69db      	ldr	r3, [r3, #28]
 80068be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d208      	bcs.n	80068d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80068c6:	4b31      	ldr	r3, [pc, #196]	; (800698c <HAL_RCC_ClockConfig+0x358>)
 80068c8:	69db      	ldr	r3, [r3, #28]
 80068ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	492e      	ldr	r1, [pc, #184]	; (800698c <HAL_RCC_ClockConfig+0x358>)
 80068d4:	4313      	orrs	r3, r2
 80068d6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0310 	and.w	r3, r3, #16
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d010      	beq.n	8006906 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	699a      	ldr	r2, [r3, #24]
 80068e8:	4b28      	ldr	r3, [pc, #160]	; (800698c <HAL_RCC_ClockConfig+0x358>)
 80068ea:	69db      	ldr	r3, [r3, #28]
 80068ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d208      	bcs.n	8006906 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80068f4:	4b25      	ldr	r3, [pc, #148]	; (800698c <HAL_RCC_ClockConfig+0x358>)
 80068f6:	69db      	ldr	r3, [r3, #28]
 80068f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	4922      	ldr	r1, [pc, #136]	; (800698c <HAL_RCC_ClockConfig+0x358>)
 8006902:	4313      	orrs	r3, r2
 8006904:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0320 	and.w	r3, r3, #32
 800690e:	2b00      	cmp	r3, #0
 8006910:	d010      	beq.n	8006934 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	69da      	ldr	r2, [r3, #28]
 8006916:	4b1d      	ldr	r3, [pc, #116]	; (800698c <HAL_RCC_ClockConfig+0x358>)
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800691e:	429a      	cmp	r2, r3
 8006920:	d208      	bcs.n	8006934 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006922:	4b1a      	ldr	r3, [pc, #104]	; (800698c <HAL_RCC_ClockConfig+0x358>)
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	4917      	ldr	r1, [pc, #92]	; (800698c <HAL_RCC_ClockConfig+0x358>)
 8006930:	4313      	orrs	r3, r2
 8006932:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006934:	f000 f834 	bl	80069a0 <HAL_RCC_GetSysClockFreq>
 8006938:	4602      	mov	r2, r0
 800693a:	4b14      	ldr	r3, [pc, #80]	; (800698c <HAL_RCC_ClockConfig+0x358>)
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	0a1b      	lsrs	r3, r3, #8
 8006940:	f003 030f 	and.w	r3, r3, #15
 8006944:	4912      	ldr	r1, [pc, #72]	; (8006990 <HAL_RCC_ClockConfig+0x35c>)
 8006946:	5ccb      	ldrb	r3, [r1, r3]
 8006948:	f003 031f 	and.w	r3, r3, #31
 800694c:	fa22 f303 	lsr.w	r3, r2, r3
 8006950:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006952:	4b0e      	ldr	r3, [pc, #56]	; (800698c <HAL_RCC_ClockConfig+0x358>)
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	f003 030f 	and.w	r3, r3, #15
 800695a:	4a0d      	ldr	r2, [pc, #52]	; (8006990 <HAL_RCC_ClockConfig+0x35c>)
 800695c:	5cd3      	ldrb	r3, [r2, r3]
 800695e:	f003 031f 	and.w	r3, r3, #31
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	fa22 f303 	lsr.w	r3, r2, r3
 8006968:	4a0a      	ldr	r2, [pc, #40]	; (8006994 <HAL_RCC_ClockConfig+0x360>)
 800696a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800696c:	4a0a      	ldr	r2, [pc, #40]	; (8006998 <HAL_RCC_ClockConfig+0x364>)
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006972:	4b0a      	ldr	r3, [pc, #40]	; (800699c <HAL_RCC_ClockConfig+0x368>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4618      	mov	r0, r3
 8006978:	f7fb f8e6 	bl	8001b48 <HAL_InitTick>
 800697c:	4603      	mov	r3, r0
 800697e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006980:	7bfb      	ldrb	r3, [r7, #15]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3718      	adds	r7, #24
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	58024400 	.word	0x58024400
 8006990:	0800ff54 	.word	0x0800ff54
 8006994:	2400000c 	.word	0x2400000c
 8006998:	24000008 	.word	0x24000008
 800699c:	24000010 	.word	0x24000010

080069a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b089      	sub	sp, #36	; 0x24
 80069a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069a6:	4bb3      	ldr	r3, [pc, #716]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069ae:	2b18      	cmp	r3, #24
 80069b0:	f200 8155 	bhi.w	8006c5e <HAL_RCC_GetSysClockFreq+0x2be>
 80069b4:	a201      	add	r2, pc, #4	; (adr r2, 80069bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80069b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ba:	bf00      	nop
 80069bc:	08006a21 	.word	0x08006a21
 80069c0:	08006c5f 	.word	0x08006c5f
 80069c4:	08006c5f 	.word	0x08006c5f
 80069c8:	08006c5f 	.word	0x08006c5f
 80069cc:	08006c5f 	.word	0x08006c5f
 80069d0:	08006c5f 	.word	0x08006c5f
 80069d4:	08006c5f 	.word	0x08006c5f
 80069d8:	08006c5f 	.word	0x08006c5f
 80069dc:	08006a47 	.word	0x08006a47
 80069e0:	08006c5f 	.word	0x08006c5f
 80069e4:	08006c5f 	.word	0x08006c5f
 80069e8:	08006c5f 	.word	0x08006c5f
 80069ec:	08006c5f 	.word	0x08006c5f
 80069f0:	08006c5f 	.word	0x08006c5f
 80069f4:	08006c5f 	.word	0x08006c5f
 80069f8:	08006c5f 	.word	0x08006c5f
 80069fc:	08006a4d 	.word	0x08006a4d
 8006a00:	08006c5f 	.word	0x08006c5f
 8006a04:	08006c5f 	.word	0x08006c5f
 8006a08:	08006c5f 	.word	0x08006c5f
 8006a0c:	08006c5f 	.word	0x08006c5f
 8006a10:	08006c5f 	.word	0x08006c5f
 8006a14:	08006c5f 	.word	0x08006c5f
 8006a18:	08006c5f 	.word	0x08006c5f
 8006a1c:	08006a53 	.word	0x08006a53
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a20:	4b94      	ldr	r3, [pc, #592]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0320 	and.w	r3, r3, #32
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d009      	beq.n	8006a40 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a2c:	4b91      	ldr	r3, [pc, #580]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	08db      	lsrs	r3, r3, #3
 8006a32:	f003 0303 	and.w	r3, r3, #3
 8006a36:	4a90      	ldr	r2, [pc, #576]	; (8006c78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a38:	fa22 f303 	lsr.w	r3, r2, r3
 8006a3c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006a3e:	e111      	b.n	8006c64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006a40:	4b8d      	ldr	r3, [pc, #564]	; (8006c78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a42:	61bb      	str	r3, [r7, #24]
      break;
 8006a44:	e10e      	b.n	8006c64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006a46:	4b8d      	ldr	r3, [pc, #564]	; (8006c7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006a48:	61bb      	str	r3, [r7, #24]
      break;
 8006a4a:	e10b      	b.n	8006c64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006a4c:	4b8c      	ldr	r3, [pc, #560]	; (8006c80 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006a4e:	61bb      	str	r3, [r7, #24]
      break;
 8006a50:	e108      	b.n	8006c64 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a52:	4b88      	ldr	r3, [pc, #544]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a56:	f003 0303 	and.w	r3, r3, #3
 8006a5a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006a5c:	4b85      	ldr	r3, [pc, #532]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a60:	091b      	lsrs	r3, r3, #4
 8006a62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a66:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006a68:	4b82      	ldr	r3, [pc, #520]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006a72:	4b80      	ldr	r3, [pc, #512]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a76:	08db      	lsrs	r3, r3, #3
 8006a78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	fb02 f303 	mul.w	r3, r2, r3
 8006a82:	ee07 3a90 	vmov	s15, r3
 8006a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a8a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 80e1 	beq.w	8006c58 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	f000 8083 	beq.w	8006ba4 <HAL_RCC_GetSysClockFreq+0x204>
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	f200 80a1 	bhi.w	8006be8 <HAL_RCC_GetSysClockFreq+0x248>
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d003      	beq.n	8006ab4 <HAL_RCC_GetSysClockFreq+0x114>
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d056      	beq.n	8006b60 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006ab2:	e099      	b.n	8006be8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ab4:	4b6f      	ldr	r3, [pc, #444]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0320 	and.w	r3, r3, #32
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d02d      	beq.n	8006b1c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ac0:	4b6c      	ldr	r3, [pc, #432]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	08db      	lsrs	r3, r3, #3
 8006ac6:	f003 0303 	and.w	r3, r3, #3
 8006aca:	4a6b      	ldr	r2, [pc, #428]	; (8006c78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006acc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	ee07 3a90 	vmov	s15, r3
 8006ad8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	ee07 3a90 	vmov	s15, r3
 8006ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aea:	4b62      	ldr	r3, [pc, #392]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af2:	ee07 3a90 	vmov	s15, r3
 8006af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8006afe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006c84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b16:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006b1a:	e087      	b.n	8006c2c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	ee07 3a90 	vmov	s15, r3
 8006b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b26:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006c88 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b2e:	4b51      	ldr	r3, [pc, #324]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b36:	ee07 3a90 	vmov	s15, r3
 8006b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b42:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006c84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b5e:	e065      	b.n	8006c2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	ee07 3a90 	vmov	s15, r3
 8006b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b6a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006c8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b72:	4b40      	ldr	r3, [pc, #256]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b82:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b86:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006c84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006ba2:	e043      	b.n	8006c2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	ee07 3a90 	vmov	s15, r3
 8006baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006c90 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bb6:	4b2f      	ldr	r3, [pc, #188]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bbe:	ee07 3a90 	vmov	s15, r3
 8006bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006c84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006be2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006be6:	e021      	b.n	8006c2c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	ee07 3a90 	vmov	s15, r3
 8006bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006c8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bfa:	4b1e      	ldr	r3, [pc, #120]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c02:	ee07 3a90 	vmov	s15, r3
 8006c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c0e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006c84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c2a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006c2c:	4b11      	ldr	r3, [pc, #68]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c30:	0a5b      	lsrs	r3, r3, #9
 8006c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c36:	3301      	adds	r3, #1
 8006c38:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	ee07 3a90 	vmov	s15, r3
 8006c40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c44:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c50:	ee17 3a90 	vmov	r3, s15
 8006c54:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006c56:	e005      	b.n	8006c64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	61bb      	str	r3, [r7, #24]
      break;
 8006c5c:	e002      	b.n	8006c64 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006c5e:	4b07      	ldr	r3, [pc, #28]	; (8006c7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c60:	61bb      	str	r3, [r7, #24]
      break;
 8006c62:	bf00      	nop
  }

  return sysclockfreq;
 8006c64:	69bb      	ldr	r3, [r7, #24]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3724      	adds	r7, #36	; 0x24
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	58024400 	.word	0x58024400
 8006c78:	03d09000 	.word	0x03d09000
 8006c7c:	003d0900 	.word	0x003d0900
 8006c80:	00bb8000 	.word	0x00bb8000
 8006c84:	46000000 	.word	0x46000000
 8006c88:	4c742400 	.word	0x4c742400
 8006c8c:	4a742400 	.word	0x4a742400
 8006c90:	4b3b8000 	.word	0x4b3b8000

08006c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006c9a:	f7ff fe81 	bl	80069a0 <HAL_RCC_GetSysClockFreq>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	4b10      	ldr	r3, [pc, #64]	; (8006ce4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	0a1b      	lsrs	r3, r3, #8
 8006ca6:	f003 030f 	and.w	r3, r3, #15
 8006caa:	490f      	ldr	r1, [pc, #60]	; (8006ce8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006cac:	5ccb      	ldrb	r3, [r1, r3]
 8006cae:	f003 031f 	and.w	r3, r3, #31
 8006cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8006cb6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006cb8:	4b0a      	ldr	r3, [pc, #40]	; (8006ce4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	f003 030f 	and.w	r3, r3, #15
 8006cc0:	4a09      	ldr	r2, [pc, #36]	; (8006ce8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006cc2:	5cd3      	ldrb	r3, [r2, r3]
 8006cc4:	f003 031f 	and.w	r3, r3, #31
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	fa22 f303 	lsr.w	r3, r2, r3
 8006cce:	4a07      	ldr	r2, [pc, #28]	; (8006cec <HAL_RCC_GetHCLKFreq+0x58>)
 8006cd0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006cd2:	4a07      	ldr	r2, [pc, #28]	; (8006cf0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006cd8:	4b04      	ldr	r3, [pc, #16]	; (8006cec <HAL_RCC_GetHCLKFreq+0x58>)
 8006cda:	681b      	ldr	r3, [r3, #0]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	58024400 	.word	0x58024400
 8006ce8:	0800ff54 	.word	0x0800ff54
 8006cec:	2400000c 	.word	0x2400000c
 8006cf0:	24000008 	.word	0x24000008

08006cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006cf8:	f7ff ffcc 	bl	8006c94 <HAL_RCC_GetHCLKFreq>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	4b06      	ldr	r3, [pc, #24]	; (8006d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	091b      	lsrs	r3, r3, #4
 8006d04:	f003 0307 	and.w	r3, r3, #7
 8006d08:	4904      	ldr	r1, [pc, #16]	; (8006d1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d0a:	5ccb      	ldrb	r3, [r1, r3]
 8006d0c:	f003 031f 	and.w	r3, r3, #31
 8006d10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	58024400 	.word	0x58024400
 8006d1c:	0800ff54 	.word	0x0800ff54

08006d20 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d24:	b0ca      	sub	sp, #296	; 0x128
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d32:	2300      	movs	r3, #0
 8006d34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d40:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006d44:	2500      	movs	r5, #0
 8006d46:	ea54 0305 	orrs.w	r3, r4, r5
 8006d4a:	d049      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d56:	d02f      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006d58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d5c:	d828      	bhi.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d62:	d01a      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006d64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d68:	d822      	bhi.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d003      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006d6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d72:	d007      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006d74:	e01c      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d76:	4bb8      	ldr	r3, [pc, #736]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7a:	4ab7      	ldr	r2, [pc, #732]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d82:	e01a      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d88:	3308      	adds	r3, #8
 8006d8a:	2102      	movs	r1, #2
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f002 fb5b 	bl	8009448 <RCCEx_PLL2_Config>
 8006d92:	4603      	mov	r3, r0
 8006d94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d98:	e00f      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d9e:	3328      	adds	r3, #40	; 0x28
 8006da0:	2102      	movs	r1, #2
 8006da2:	4618      	mov	r0, r3
 8006da4:	f002 fc02 	bl	80095ac <RCCEx_PLL3_Config>
 8006da8:	4603      	mov	r3, r0
 8006daa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006dae:	e004      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006db6:	e000      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006db8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10a      	bne.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006dc2:	4ba5      	ldr	r3, [pc, #660]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dc6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dd0:	4aa1      	ldr	r2, [pc, #644]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dd2:	430b      	orrs	r3, r1
 8006dd4:	6513      	str	r3, [r2, #80]	; 0x50
 8006dd6:	e003      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ddc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006dec:	f04f 0900 	mov.w	r9, #0
 8006df0:	ea58 0309 	orrs.w	r3, r8, r9
 8006df4:	d047      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dfc:	2b04      	cmp	r3, #4
 8006dfe:	d82a      	bhi.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006e00:	a201      	add	r2, pc, #4	; (adr r2, 8006e08 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e06:	bf00      	nop
 8006e08:	08006e1d 	.word	0x08006e1d
 8006e0c:	08006e2b 	.word	0x08006e2b
 8006e10:	08006e41 	.word	0x08006e41
 8006e14:	08006e5f 	.word	0x08006e5f
 8006e18:	08006e5f 	.word	0x08006e5f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e1c:	4b8e      	ldr	r3, [pc, #568]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e20:	4a8d      	ldr	r2, [pc, #564]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e28:	e01a      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e2e:	3308      	adds	r3, #8
 8006e30:	2100      	movs	r1, #0
 8006e32:	4618      	mov	r0, r3
 8006e34:	f002 fb08 	bl	8009448 <RCCEx_PLL2_Config>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e3e:	e00f      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e44:	3328      	adds	r3, #40	; 0x28
 8006e46:	2100      	movs	r1, #0
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f002 fbaf 	bl	80095ac <RCCEx_PLL3_Config>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e54:	e004      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e5c:	e000      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006e5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10a      	bne.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e68:	4b7b      	ldr	r3, [pc, #492]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e6c:	f023 0107 	bic.w	r1, r3, #7
 8006e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e76:	4a78      	ldr	r2, [pc, #480]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e78:	430b      	orrs	r3, r1
 8006e7a:	6513      	str	r3, [r2, #80]	; 0x50
 8006e7c:	e003      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006e92:	f04f 0b00 	mov.w	fp, #0
 8006e96:	ea5a 030b 	orrs.w	r3, sl, fp
 8006e9a:	d04c      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ea6:	d030      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eac:	d829      	bhi.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006eae:	2bc0      	cmp	r3, #192	; 0xc0
 8006eb0:	d02d      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006eb2:	2bc0      	cmp	r3, #192	; 0xc0
 8006eb4:	d825      	bhi.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006eb6:	2b80      	cmp	r3, #128	; 0x80
 8006eb8:	d018      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006eba:	2b80      	cmp	r3, #128	; 0x80
 8006ebc:	d821      	bhi.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d002      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006ec2:	2b40      	cmp	r3, #64	; 0x40
 8006ec4:	d007      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006ec6:	e01c      	b.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ec8:	4b63      	ldr	r3, [pc, #396]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ecc:	4a62      	ldr	r2, [pc, #392]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ed2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006ed4:	e01c      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eda:	3308      	adds	r3, #8
 8006edc:	2100      	movs	r1, #0
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f002 fab2 	bl	8009448 <RCCEx_PLL2_Config>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006eea:	e011      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ef0:	3328      	adds	r3, #40	; 0x28
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f002 fb59 	bl	80095ac <RCCEx_PLL3_Config>
 8006efa:	4603      	mov	r3, r0
 8006efc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006f00:	e006      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f08:	e002      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006f0a:	bf00      	nop
 8006f0c:	e000      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006f0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10a      	bne.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006f18:	4b4f      	ldr	r3, [pc, #316]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f1c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f26:	4a4c      	ldr	r2, [pc, #304]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f28:	430b      	orrs	r3, r1
 8006f2a:	6513      	str	r3, [r2, #80]	; 0x50
 8006f2c:	e003      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006f42:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006f46:	2300      	movs	r3, #0
 8006f48:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006f4c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006f50:	460b      	mov	r3, r1
 8006f52:	4313      	orrs	r3, r2
 8006f54:	d053      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f62:	d035      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006f64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f68:	d82e      	bhi.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f6a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f6e:	d031      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006f70:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f74:	d828      	bhi.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f7a:	d01a      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006f7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f80:	d822      	bhi.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d003      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006f86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f8a:	d007      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006f8c:	e01c      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f8e:	4b32      	ldr	r3, [pc, #200]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f92:	4a31      	ldr	r2, [pc, #196]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f9a:	e01c      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fa0:	3308      	adds	r3, #8
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f002 fa4f 	bl	8009448 <RCCEx_PLL2_Config>
 8006faa:	4603      	mov	r3, r0
 8006fac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006fb0:	e011      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fb6:	3328      	adds	r3, #40	; 0x28
 8006fb8:	2100      	movs	r1, #0
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f002 faf6 	bl	80095ac <RCCEx_PLL3_Config>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fc6:	e006      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006fce:	e002      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006fd0:	bf00      	nop
 8006fd2:	e000      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006fd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10b      	bne.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006fde:	4b1e      	ldr	r3, [pc, #120]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fe2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006fee:	4a1a      	ldr	r2, [pc, #104]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ff0:	430b      	orrs	r3, r1
 8006ff2:	6593      	str	r3, [r2, #88]	; 0x58
 8006ff4:	e003      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ffa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007006:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800700a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800700e:	2300      	movs	r3, #0
 8007010:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007014:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007018:	460b      	mov	r3, r1
 800701a:	4313      	orrs	r3, r2
 800701c:	d056      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800701e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007022:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007026:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800702a:	d038      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800702c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007030:	d831      	bhi.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007032:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007036:	d034      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007038:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800703c:	d82b      	bhi.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800703e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007042:	d01d      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007044:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007048:	d825      	bhi.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800704a:	2b00      	cmp	r3, #0
 800704c:	d006      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800704e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007052:	d00a      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007054:	e01f      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007056:	bf00      	nop
 8007058:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800705c:	4ba2      	ldr	r3, [pc, #648]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007060:	4aa1      	ldr	r2, [pc, #644]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007066:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007068:	e01c      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800706a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800706e:	3308      	adds	r3, #8
 8007070:	2100      	movs	r1, #0
 8007072:	4618      	mov	r0, r3
 8007074:	f002 f9e8 	bl	8009448 <RCCEx_PLL2_Config>
 8007078:	4603      	mov	r3, r0
 800707a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800707e:	e011      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007084:	3328      	adds	r3, #40	; 0x28
 8007086:	2100      	movs	r1, #0
 8007088:	4618      	mov	r0, r3
 800708a:	f002 fa8f 	bl	80095ac <RCCEx_PLL3_Config>
 800708e:	4603      	mov	r3, r0
 8007090:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007094:	e006      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800709c:	e002      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800709e:	bf00      	nop
 80070a0:	e000      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80070a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10b      	bne.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80070ac:	4b8e      	ldr	r3, [pc, #568]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80070b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80070bc:	4a8a      	ldr	r2, [pc, #552]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070be:	430b      	orrs	r3, r1
 80070c0:	6593      	str	r3, [r2, #88]	; 0x58
 80070c2:	e003      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80070cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80070d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80070dc:	2300      	movs	r3, #0
 80070de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80070e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80070e6:	460b      	mov	r3, r1
 80070e8:	4313      	orrs	r3, r2
 80070ea:	d03a      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80070ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070f2:	2b30      	cmp	r3, #48	; 0x30
 80070f4:	d01f      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80070f6:	2b30      	cmp	r3, #48	; 0x30
 80070f8:	d819      	bhi.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80070fa:	2b20      	cmp	r3, #32
 80070fc:	d00c      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80070fe:	2b20      	cmp	r3, #32
 8007100:	d815      	bhi.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007102:	2b00      	cmp	r3, #0
 8007104:	d019      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007106:	2b10      	cmp	r3, #16
 8007108:	d111      	bne.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800710a:	4b77      	ldr	r3, [pc, #476]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800710c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710e:	4a76      	ldr	r2, [pc, #472]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007114:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007116:	e011      	b.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800711c:	3308      	adds	r3, #8
 800711e:	2102      	movs	r1, #2
 8007120:	4618      	mov	r0, r3
 8007122:	f002 f991 	bl	8009448 <RCCEx_PLL2_Config>
 8007126:	4603      	mov	r3, r0
 8007128:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800712c:	e006      	b.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007134:	e002      	b.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007136:	bf00      	nop
 8007138:	e000      	b.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800713a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800713c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10a      	bne.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007144:	4b68      	ldr	r3, [pc, #416]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007148:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800714c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007152:	4a65      	ldr	r2, [pc, #404]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007154:	430b      	orrs	r3, r1
 8007156:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007158:	e003      	b.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800715a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800715e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800716e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007172:	2300      	movs	r3, #0
 8007174:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007178:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800717c:	460b      	mov	r3, r1
 800717e:	4313      	orrs	r3, r2
 8007180:	d051      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007188:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800718c:	d035      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800718e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007192:	d82e      	bhi.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007194:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007198:	d031      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800719a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800719e:	d828      	bhi.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80071a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071a4:	d01a      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80071a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071aa:	d822      	bhi.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d003      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80071b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071b4:	d007      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80071b6:	e01c      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071b8:	4b4b      	ldr	r3, [pc, #300]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071bc:	4a4a      	ldr	r2, [pc, #296]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80071c4:	e01c      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071ca:	3308      	adds	r3, #8
 80071cc:	2100      	movs	r1, #0
 80071ce:	4618      	mov	r0, r3
 80071d0:	f002 f93a 	bl	8009448 <RCCEx_PLL2_Config>
 80071d4:	4603      	mov	r3, r0
 80071d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80071da:	e011      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071e0:	3328      	adds	r3, #40	; 0x28
 80071e2:	2100      	movs	r1, #0
 80071e4:	4618      	mov	r0, r3
 80071e6:	f002 f9e1 	bl	80095ac <RCCEx_PLL3_Config>
 80071ea:	4603      	mov	r3, r0
 80071ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80071f0:	e006      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80071f8:	e002      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80071fa:	bf00      	nop
 80071fc:	e000      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80071fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007200:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10a      	bne.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007208:	4b37      	ldr	r3, [pc, #220]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800720a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800720c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007216:	4a34      	ldr	r2, [pc, #208]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007218:	430b      	orrs	r3, r1
 800721a:	6513      	str	r3, [r2, #80]	; 0x50
 800721c:	e003      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800721e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007222:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800722a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007232:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007236:	2300      	movs	r3, #0
 8007238:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800723c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007240:	460b      	mov	r3, r1
 8007242:	4313      	orrs	r3, r2
 8007244:	d056      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800724a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800724c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007250:	d033      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007252:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007256:	d82c      	bhi.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007258:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800725c:	d02f      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800725e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007262:	d826      	bhi.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007264:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007268:	d02b      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800726a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800726e:	d820      	bhi.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007270:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007274:	d012      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007276:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800727a:	d81a      	bhi.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800727c:	2b00      	cmp	r3, #0
 800727e:	d022      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007284:	d115      	bne.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800728a:	3308      	adds	r3, #8
 800728c:	2101      	movs	r1, #1
 800728e:	4618      	mov	r0, r3
 8007290:	f002 f8da 	bl	8009448 <RCCEx_PLL2_Config>
 8007294:	4603      	mov	r3, r0
 8007296:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800729a:	e015      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800729c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072a0:	3328      	adds	r3, #40	; 0x28
 80072a2:	2101      	movs	r1, #1
 80072a4:	4618      	mov	r0, r3
 80072a6:	f002 f981 	bl	80095ac <RCCEx_PLL3_Config>
 80072aa:	4603      	mov	r3, r0
 80072ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80072b0:	e00a      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80072b8:	e006      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80072ba:	bf00      	nop
 80072bc:	e004      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80072be:	bf00      	nop
 80072c0:	e002      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80072c2:	bf00      	nop
 80072c4:	e000      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80072c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10d      	bne.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80072d0:	4b05      	ldr	r3, [pc, #20]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072d4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80072d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072de:	4a02      	ldr	r2, [pc, #8]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072e0:	430b      	orrs	r3, r1
 80072e2:	6513      	str	r3, [r2, #80]	; 0x50
 80072e4:	e006      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80072e6:	bf00      	nop
 80072e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80072f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007300:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007304:	2300      	movs	r3, #0
 8007306:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800730a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800730e:	460b      	mov	r3, r1
 8007310:	4313      	orrs	r3, r2
 8007312:	d055      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007318:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800731c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007320:	d033      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007322:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007326:	d82c      	bhi.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800732c:	d02f      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800732e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007332:	d826      	bhi.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007334:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007338:	d02b      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800733a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800733e:	d820      	bhi.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007340:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007344:	d012      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007346:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800734a:	d81a      	bhi.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800734c:	2b00      	cmp	r3, #0
 800734e:	d022      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007350:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007354:	d115      	bne.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800735a:	3308      	adds	r3, #8
 800735c:	2101      	movs	r1, #1
 800735e:	4618      	mov	r0, r3
 8007360:	f002 f872 	bl	8009448 <RCCEx_PLL2_Config>
 8007364:	4603      	mov	r3, r0
 8007366:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800736a:	e015      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800736c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007370:	3328      	adds	r3, #40	; 0x28
 8007372:	2101      	movs	r1, #1
 8007374:	4618      	mov	r0, r3
 8007376:	f002 f919 	bl	80095ac <RCCEx_PLL3_Config>
 800737a:	4603      	mov	r3, r0
 800737c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007380:	e00a      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007388:	e006      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800738a:	bf00      	nop
 800738c:	e004      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800738e:	bf00      	nop
 8007390:	e002      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007392:	bf00      	nop
 8007394:	e000      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007396:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007398:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10b      	bne.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80073a0:	4ba3      	ldr	r3, [pc, #652]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073a4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80073a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80073b0:	4a9f      	ldr	r2, [pc, #636]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073b2:	430b      	orrs	r3, r1
 80073b4:	6593      	str	r3, [r2, #88]	; 0x58
 80073b6:	e003      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80073c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80073cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073d0:	2300      	movs	r3, #0
 80073d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80073d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80073da:	460b      	mov	r3, r1
 80073dc:	4313      	orrs	r3, r2
 80073de:	d037      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80073e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073ea:	d00e      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80073ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073f0:	d816      	bhi.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d018      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80073f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073fa:	d111      	bne.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073fc:	4b8c      	ldr	r3, [pc, #560]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007400:	4a8b      	ldr	r2, [pc, #556]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007406:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007408:	e00f      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800740a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800740e:	3308      	adds	r3, #8
 8007410:	2101      	movs	r1, #1
 8007412:	4618      	mov	r0, r3
 8007414:	f002 f818 	bl	8009448 <RCCEx_PLL2_Config>
 8007418:	4603      	mov	r3, r0
 800741a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800741e:	e004      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007426:	e000      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007428:	bf00      	nop
    }

    if (ret == HAL_OK)
 800742a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800742e:	2b00      	cmp	r3, #0
 8007430:	d10a      	bne.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007432:	4b7f      	ldr	r3, [pc, #508]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007436:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800743a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800743e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007440:	4a7b      	ldr	r2, [pc, #492]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007442:	430b      	orrs	r3, r1
 8007444:	6513      	str	r3, [r2, #80]	; 0x50
 8007446:	e003      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007448:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800744c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007458:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800745c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007460:	2300      	movs	r3, #0
 8007462:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007466:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800746a:	460b      	mov	r3, r1
 800746c:	4313      	orrs	r3, r2
 800746e:	d039      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007476:	2b03      	cmp	r3, #3
 8007478:	d81c      	bhi.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800747a:	a201      	add	r2, pc, #4	; (adr r2, 8007480 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800747c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007480:	080074bd 	.word	0x080074bd
 8007484:	08007491 	.word	0x08007491
 8007488:	0800749f 	.word	0x0800749f
 800748c:	080074bd 	.word	0x080074bd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007490:	4b67      	ldr	r3, [pc, #412]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007494:	4a66      	ldr	r2, [pc, #408]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800749a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800749c:	e00f      	b.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800749e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074a2:	3308      	adds	r3, #8
 80074a4:	2102      	movs	r1, #2
 80074a6:	4618      	mov	r0, r3
 80074a8:	f001 ffce 	bl	8009448 <RCCEx_PLL2_Config>
 80074ac:	4603      	mov	r3, r0
 80074ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80074b2:	e004      	b.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80074ba:	e000      	b.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80074bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10a      	bne.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80074c6:	4b5a      	ldr	r3, [pc, #360]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ca:	f023 0103 	bic.w	r1, r3, #3
 80074ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074d4:	4a56      	ldr	r2, [pc, #344]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074d6:	430b      	orrs	r3, r1
 80074d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074da:	e003      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80074e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ec:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80074f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074f4:	2300      	movs	r3, #0
 80074f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80074fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80074fe:	460b      	mov	r3, r1
 8007500:	4313      	orrs	r3, r2
 8007502:	f000 809f 	beq.w	8007644 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007506:	4b4b      	ldr	r3, [pc, #300]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a4a      	ldr	r2, [pc, #296]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800750c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007510:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007512:	f7fa fb63 	bl	8001bdc <HAL_GetTick>
 8007516:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800751a:	e00b      	b.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800751c:	f7fa fb5e 	bl	8001bdc <HAL_GetTick>
 8007520:	4602      	mov	r2, r0
 8007522:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	2b64      	cmp	r3, #100	; 0x64
 800752a:	d903      	bls.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800752c:	2303      	movs	r3, #3
 800752e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007532:	e005      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007534:	4b3f      	ldr	r3, [pc, #252]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800753c:	2b00      	cmp	r3, #0
 800753e:	d0ed      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007540:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007544:	2b00      	cmp	r3, #0
 8007546:	d179      	bne.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007548:	4b39      	ldr	r3, [pc, #228]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800754a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800754c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007550:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007554:	4053      	eors	r3, r2
 8007556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800755a:	2b00      	cmp	r3, #0
 800755c:	d015      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800755e:	4b34      	ldr	r3, [pc, #208]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007566:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800756a:	4b31      	ldr	r3, [pc, #196]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800756c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800756e:	4a30      	ldr	r2, [pc, #192]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007574:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007576:	4b2e      	ldr	r3, [pc, #184]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800757a:	4a2d      	ldr	r2, [pc, #180]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800757c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007580:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007582:	4a2b      	ldr	r2, [pc, #172]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007584:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007588:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800758a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800758e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007596:	d118      	bne.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007598:	f7fa fb20 	bl	8001bdc <HAL_GetTick>
 800759c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075a0:	e00d      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075a2:	f7fa fb1b 	bl	8001bdc <HAL_GetTick>
 80075a6:	4602      	mov	r2, r0
 80075a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80075ac:	1ad2      	subs	r2, r2, r3
 80075ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d903      	bls.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80075bc:	e005      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075be:	4b1c      	ldr	r3, [pc, #112]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c2:	f003 0302 	and.w	r3, r3, #2
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d0eb      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80075ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d129      	bne.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80075da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075e2:	d10e      	bne.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80075e4:	4b12      	ldr	r3, [pc, #72]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80075ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80075f4:	091a      	lsrs	r2, r3, #4
 80075f6:	4b10      	ldr	r3, [pc, #64]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80075f8:	4013      	ands	r3, r2
 80075fa:	4a0d      	ldr	r2, [pc, #52]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075fc:	430b      	orrs	r3, r1
 80075fe:	6113      	str	r3, [r2, #16]
 8007600:	e005      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007602:	4b0b      	ldr	r3, [pc, #44]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	4a0a      	ldr	r2, [pc, #40]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007608:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800760c:	6113      	str	r3, [r2, #16]
 800760e:	4b08      	ldr	r3, [pc, #32]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007610:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007616:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800761a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800761e:	4a04      	ldr	r2, [pc, #16]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007620:	430b      	orrs	r3, r1
 8007622:	6713      	str	r3, [r2, #112]	; 0x70
 8007624:	e00e      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007626:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800762a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800762e:	e009      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007630:	58024400 	.word	0x58024400
 8007634:	58024800 	.word	0x58024800
 8007638:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800763c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007640:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764c:	f002 0301 	and.w	r3, r2, #1
 8007650:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007654:	2300      	movs	r3, #0
 8007656:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800765a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800765e:	460b      	mov	r3, r1
 8007660:	4313      	orrs	r3, r2
 8007662:	f000 8089 	beq.w	8007778 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800766a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800766c:	2b28      	cmp	r3, #40	; 0x28
 800766e:	d86b      	bhi.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007670:	a201      	add	r2, pc, #4	; (adr r2, 8007678 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007676:	bf00      	nop
 8007678:	08007751 	.word	0x08007751
 800767c:	08007749 	.word	0x08007749
 8007680:	08007749 	.word	0x08007749
 8007684:	08007749 	.word	0x08007749
 8007688:	08007749 	.word	0x08007749
 800768c:	08007749 	.word	0x08007749
 8007690:	08007749 	.word	0x08007749
 8007694:	08007749 	.word	0x08007749
 8007698:	0800771d 	.word	0x0800771d
 800769c:	08007749 	.word	0x08007749
 80076a0:	08007749 	.word	0x08007749
 80076a4:	08007749 	.word	0x08007749
 80076a8:	08007749 	.word	0x08007749
 80076ac:	08007749 	.word	0x08007749
 80076b0:	08007749 	.word	0x08007749
 80076b4:	08007749 	.word	0x08007749
 80076b8:	08007733 	.word	0x08007733
 80076bc:	08007749 	.word	0x08007749
 80076c0:	08007749 	.word	0x08007749
 80076c4:	08007749 	.word	0x08007749
 80076c8:	08007749 	.word	0x08007749
 80076cc:	08007749 	.word	0x08007749
 80076d0:	08007749 	.word	0x08007749
 80076d4:	08007749 	.word	0x08007749
 80076d8:	08007751 	.word	0x08007751
 80076dc:	08007749 	.word	0x08007749
 80076e0:	08007749 	.word	0x08007749
 80076e4:	08007749 	.word	0x08007749
 80076e8:	08007749 	.word	0x08007749
 80076ec:	08007749 	.word	0x08007749
 80076f0:	08007749 	.word	0x08007749
 80076f4:	08007749 	.word	0x08007749
 80076f8:	08007751 	.word	0x08007751
 80076fc:	08007749 	.word	0x08007749
 8007700:	08007749 	.word	0x08007749
 8007704:	08007749 	.word	0x08007749
 8007708:	08007749 	.word	0x08007749
 800770c:	08007749 	.word	0x08007749
 8007710:	08007749 	.word	0x08007749
 8007714:	08007749 	.word	0x08007749
 8007718:	08007751 	.word	0x08007751
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800771c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007720:	3308      	adds	r3, #8
 8007722:	2101      	movs	r1, #1
 8007724:	4618      	mov	r0, r3
 8007726:	f001 fe8f 	bl	8009448 <RCCEx_PLL2_Config>
 800772a:	4603      	mov	r3, r0
 800772c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007730:	e00f      	b.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007736:	3328      	adds	r3, #40	; 0x28
 8007738:	2101      	movs	r1, #1
 800773a:	4618      	mov	r0, r3
 800773c:	f001 ff36 	bl	80095ac <RCCEx_PLL3_Config>
 8007740:	4603      	mov	r3, r0
 8007742:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007746:	e004      	b.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800774e:	e000      	b.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007750:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007752:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10a      	bne.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800775a:	4bbf      	ldr	r3, [pc, #764]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800775c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800775e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007766:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007768:	4abb      	ldr	r2, [pc, #748]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800776a:	430b      	orrs	r3, r1
 800776c:	6553      	str	r3, [r2, #84]	; 0x54
 800776e:	e003      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007770:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007774:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800777c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007780:	f002 0302 	and.w	r3, r2, #2
 8007784:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007788:	2300      	movs	r3, #0
 800778a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800778e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007792:	460b      	mov	r3, r1
 8007794:	4313      	orrs	r3, r2
 8007796:	d041      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800779c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800779e:	2b05      	cmp	r3, #5
 80077a0:	d824      	bhi.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80077a2:	a201      	add	r2, pc, #4	; (adr r2, 80077a8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80077a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a8:	080077f5 	.word	0x080077f5
 80077ac:	080077c1 	.word	0x080077c1
 80077b0:	080077d7 	.word	0x080077d7
 80077b4:	080077f5 	.word	0x080077f5
 80077b8:	080077f5 	.word	0x080077f5
 80077bc:	080077f5 	.word	0x080077f5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077c4:	3308      	adds	r3, #8
 80077c6:	2101      	movs	r1, #1
 80077c8:	4618      	mov	r0, r3
 80077ca:	f001 fe3d 	bl	8009448 <RCCEx_PLL2_Config>
 80077ce:	4603      	mov	r3, r0
 80077d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80077d4:	e00f      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077da:	3328      	adds	r3, #40	; 0x28
 80077dc:	2101      	movs	r1, #1
 80077de:	4618      	mov	r0, r3
 80077e0:	f001 fee4 	bl	80095ac <RCCEx_PLL3_Config>
 80077e4:	4603      	mov	r3, r0
 80077e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80077ea:	e004      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80077f2:	e000      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80077f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10a      	bne.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80077fe:	4b96      	ldr	r3, [pc, #600]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007802:	f023 0107 	bic.w	r1, r3, #7
 8007806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800780a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800780c:	4a92      	ldr	r2, [pc, #584]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800780e:	430b      	orrs	r3, r1
 8007810:	6553      	str	r3, [r2, #84]	; 0x54
 8007812:	e003      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007814:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007818:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800781c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007824:	f002 0304 	and.w	r3, r2, #4
 8007828:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800782c:	2300      	movs	r3, #0
 800782e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007832:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007836:	460b      	mov	r3, r1
 8007838:	4313      	orrs	r3, r2
 800783a:	d044      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800783c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007840:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007844:	2b05      	cmp	r3, #5
 8007846:	d825      	bhi.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007848:	a201      	add	r2, pc, #4	; (adr r2, 8007850 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800784a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784e:	bf00      	nop
 8007850:	0800789d 	.word	0x0800789d
 8007854:	08007869 	.word	0x08007869
 8007858:	0800787f 	.word	0x0800787f
 800785c:	0800789d 	.word	0x0800789d
 8007860:	0800789d 	.word	0x0800789d
 8007864:	0800789d 	.word	0x0800789d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800786c:	3308      	adds	r3, #8
 800786e:	2101      	movs	r1, #1
 8007870:	4618      	mov	r0, r3
 8007872:	f001 fde9 	bl	8009448 <RCCEx_PLL2_Config>
 8007876:	4603      	mov	r3, r0
 8007878:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800787c:	e00f      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800787e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007882:	3328      	adds	r3, #40	; 0x28
 8007884:	2101      	movs	r1, #1
 8007886:	4618      	mov	r0, r3
 8007888:	f001 fe90 	bl	80095ac <RCCEx_PLL3_Config>
 800788c:	4603      	mov	r3, r0
 800788e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007892:	e004      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800789a:	e000      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800789c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800789e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10b      	bne.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80078a6:	4b6c      	ldr	r3, [pc, #432]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078aa:	f023 0107 	bic.w	r1, r3, #7
 80078ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078b6:	4a68      	ldr	r2, [pc, #416]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078b8:	430b      	orrs	r3, r1
 80078ba:	6593      	str	r3, [r2, #88]	; 0x58
 80078bc:	e003      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80078c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ce:	f002 0320 	and.w	r3, r2, #32
 80078d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80078d6:	2300      	movs	r3, #0
 80078d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80078e0:	460b      	mov	r3, r1
 80078e2:	4313      	orrs	r3, r2
 80078e4:	d055      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80078e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078f2:	d033      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80078f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078f8:	d82c      	bhi.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80078fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078fe:	d02f      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007904:	d826      	bhi.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007906:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800790a:	d02b      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800790c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007910:	d820      	bhi.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007912:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007916:	d012      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800791c:	d81a      	bhi.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800791e:	2b00      	cmp	r3, #0
 8007920:	d022      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007922:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007926:	d115      	bne.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800792c:	3308      	adds	r3, #8
 800792e:	2100      	movs	r1, #0
 8007930:	4618      	mov	r0, r3
 8007932:	f001 fd89 	bl	8009448 <RCCEx_PLL2_Config>
 8007936:	4603      	mov	r3, r0
 8007938:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800793c:	e015      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800793e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007942:	3328      	adds	r3, #40	; 0x28
 8007944:	2102      	movs	r1, #2
 8007946:	4618      	mov	r0, r3
 8007948:	f001 fe30 	bl	80095ac <RCCEx_PLL3_Config>
 800794c:	4603      	mov	r3, r0
 800794e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007952:	e00a      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800795a:	e006      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800795c:	bf00      	nop
 800795e:	e004      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007960:	bf00      	nop
 8007962:	e002      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007964:	bf00      	nop
 8007966:	e000      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007968:	bf00      	nop
    }

    if (ret == HAL_OK)
 800796a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10b      	bne.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007972:	4b39      	ldr	r3, [pc, #228]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007976:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800797a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800797e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007982:	4a35      	ldr	r2, [pc, #212]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007984:	430b      	orrs	r3, r1
 8007986:	6553      	str	r3, [r2, #84]	; 0x54
 8007988:	e003      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800798a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800798e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800799e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80079a2:	2300      	movs	r3, #0
 80079a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80079a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80079ac:	460b      	mov	r3, r1
 80079ae:	4313      	orrs	r3, r2
 80079b0:	d058      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80079b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80079be:	d033      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80079c0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80079c4:	d82c      	bhi.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ca:	d02f      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80079cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d0:	d826      	bhi.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079d6:	d02b      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80079d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079dc:	d820      	bhi.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079e2:	d012      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80079e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079e8:	d81a      	bhi.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d022      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80079ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079f2:	d115      	bne.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079f8:	3308      	adds	r3, #8
 80079fa:	2100      	movs	r1, #0
 80079fc:	4618      	mov	r0, r3
 80079fe:	f001 fd23 	bl	8009448 <RCCEx_PLL2_Config>
 8007a02:	4603      	mov	r3, r0
 8007a04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007a08:	e015      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a0e:	3328      	adds	r3, #40	; 0x28
 8007a10:	2102      	movs	r1, #2
 8007a12:	4618      	mov	r0, r3
 8007a14:	f001 fdca 	bl	80095ac <RCCEx_PLL3_Config>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007a1e:	e00a      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a26:	e006      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a28:	bf00      	nop
 8007a2a:	e004      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a2c:	bf00      	nop
 8007a2e:	e002      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a30:	bf00      	nop
 8007a32:	e000      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10e      	bne.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007a3e:	4b06      	ldr	r3, [pc, #24]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a42:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a4e:	4a02      	ldr	r2, [pc, #8]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a50:	430b      	orrs	r3, r1
 8007a52:	6593      	str	r3, [r2, #88]	; 0x58
 8007a54:	e006      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007a56:	bf00      	nop
 8007a58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007a70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007a74:	2300      	movs	r3, #0
 8007a76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a7a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007a7e:	460b      	mov	r3, r1
 8007a80:	4313      	orrs	r3, r2
 8007a82:	d055      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a8c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007a90:	d033      	beq.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007a92:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007a96:	d82c      	bhi.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a9c:	d02f      	beq.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007aa2:	d826      	bhi.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007aa4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007aa8:	d02b      	beq.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007aaa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007aae:	d820      	bhi.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007ab0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ab4:	d012      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007ab6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007aba:	d81a      	bhi.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d022      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ac4:	d115      	bne.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aca:	3308      	adds	r3, #8
 8007acc:	2100      	movs	r1, #0
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f001 fcba 	bl	8009448 <RCCEx_PLL2_Config>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007ada:	e015      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ae0:	3328      	adds	r3, #40	; 0x28
 8007ae2:	2102      	movs	r1, #2
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f001 fd61 	bl	80095ac <RCCEx_PLL3_Config>
 8007aea:	4603      	mov	r3, r0
 8007aec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007af0:	e00a      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007af8:	e006      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007afa:	bf00      	nop
 8007afc:	e004      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007afe:	bf00      	nop
 8007b00:	e002      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007b02:	bf00      	nop
 8007b04:	e000      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10b      	bne.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007b10:	4ba1      	ldr	r3, [pc, #644]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b14:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b20:	4a9d      	ldr	r2, [pc, #628]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b22:	430b      	orrs	r3, r1
 8007b24:	6593      	str	r3, [r2, #88]	; 0x58
 8007b26:	e003      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b38:	f002 0308 	and.w	r3, r2, #8
 8007b3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b40:	2300      	movs	r3, #0
 8007b42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007b46:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	d01e      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b5c:	d10c      	bne.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b62:	3328      	adds	r3, #40	; 0x28
 8007b64:	2102      	movs	r1, #2
 8007b66:	4618      	mov	r0, r3
 8007b68:	f001 fd20 	bl	80095ac <RCCEx_PLL3_Config>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d002      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007b78:	4b87      	ldr	r3, [pc, #540]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b7c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b88:	4a83      	ldr	r2, [pc, #524]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b8a:	430b      	orrs	r3, r1
 8007b8c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b96:	f002 0310 	and.w	r3, r2, #16
 8007b9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007ba4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007ba8:	460b      	mov	r3, r1
 8007baa:	4313      	orrs	r3, r2
 8007bac:	d01e      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bba:	d10c      	bne.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bc0:	3328      	adds	r3, #40	; 0x28
 8007bc2:	2102      	movs	r1, #2
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f001 fcf1 	bl	80095ac <RCCEx_PLL3_Config>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d002      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007bd6:	4b70      	ldr	r3, [pc, #448]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007be2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007be6:	4a6c      	ldr	r2, [pc, #432]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007be8:	430b      	orrs	r3, r1
 8007bea:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007bf8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c02:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007c06:	460b      	mov	r3, r1
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	d03e      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007c14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c18:	d022      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007c1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c1e:	d81b      	bhi.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d003      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c28:	d00b      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007c2a:	e015      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c30:	3308      	adds	r3, #8
 8007c32:	2100      	movs	r1, #0
 8007c34:	4618      	mov	r0, r3
 8007c36:	f001 fc07 	bl	8009448 <RCCEx_PLL2_Config>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007c40:	e00f      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c46:	3328      	adds	r3, #40	; 0x28
 8007c48:	2102      	movs	r1, #2
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f001 fcae 	bl	80095ac <RCCEx_PLL3_Config>
 8007c50:	4603      	mov	r3, r0
 8007c52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007c56:	e004      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c5e:	e000      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007c60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10b      	bne.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c6a:	4b4b      	ldr	r3, [pc, #300]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c6e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007c7a:	4a47      	ldr	r2, [pc, #284]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c7c:	430b      	orrs	r3, r1
 8007c7e:	6593      	str	r3, [r2, #88]	; 0x58
 8007c80:	e003      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c92:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007c96:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c98:	2300      	movs	r3, #0
 8007c9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c9c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	d03b      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007cb2:	d01f      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007cb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007cb8:	d818      	bhi.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007cba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cbe:	d003      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007cc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007cc4:	d007      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007cc6:	e011      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cc8:	4b33      	ldr	r3, [pc, #204]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ccc:	4a32      	ldr	r2, [pc, #200]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007cd4:	e00f      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cda:	3328      	adds	r3, #40	; 0x28
 8007cdc:	2101      	movs	r1, #1
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f001 fc64 	bl	80095ac <RCCEx_PLL3_Config>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007cea:	e004      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007cf2:	e000      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007cf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10b      	bne.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007cfe:	4b26      	ldr	r3, [pc, #152]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d02:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d0e:	4a22      	ldr	r2, [pc, #136]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d10:	430b      	orrs	r3, r1
 8007d12:	6553      	str	r3, [r2, #84]	; 0x54
 8007d14:	e003      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d26:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007d2a:	673b      	str	r3, [r7, #112]	; 0x70
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	677b      	str	r3, [r7, #116]	; 0x74
 8007d30:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007d34:	460b      	mov	r3, r1
 8007d36:	4313      	orrs	r3, r2
 8007d38:	d034      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d003      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d48:	d007      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007d4a:	e011      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d4c:	4b12      	ldr	r3, [pc, #72]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d50:	4a11      	ldr	r2, [pc, #68]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007d58:	e00e      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d5e:	3308      	adds	r3, #8
 8007d60:	2102      	movs	r1, #2
 8007d62:	4618      	mov	r0, r3
 8007d64:	f001 fb70 	bl	8009448 <RCCEx_PLL2_Config>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007d6e:	e003      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d10d      	bne.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007d80:	4b05      	ldr	r3, [pc, #20]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d8e:	4a02      	ldr	r2, [pc, #8]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d90:	430b      	orrs	r3, r1
 8007d92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007d94:	e006      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007d96:	bf00      	nop
 8007d98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007da0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dac:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007db0:	66bb      	str	r3, [r7, #104]	; 0x68
 8007db2:	2300      	movs	r3, #0
 8007db4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007db6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007dba:	460b      	mov	r3, r1
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	d00c      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dc4:	3328      	adds	r3, #40	; 0x28
 8007dc6:	2102      	movs	r1, #2
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f001 fbef 	bl	80095ac <RCCEx_PLL3_Config>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007de6:	663b      	str	r3, [r7, #96]	; 0x60
 8007de8:	2300      	movs	r3, #0
 8007dea:	667b      	str	r3, [r7, #100]	; 0x64
 8007dec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007df0:	460b      	mov	r3, r1
 8007df2:	4313      	orrs	r3, r2
 8007df4:	d038      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e02:	d018      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007e04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e08:	d811      	bhi.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007e0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e0e:	d014      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e14:	d80b      	bhi.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d011      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e1e:	d106      	bne.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e20:	4bc3      	ldr	r3, [pc, #780]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e24:	4ac2      	ldr	r2, [pc, #776]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007e2c:	e008      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e34:	e004      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e36:	bf00      	nop
 8007e38:	e002      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e3a:	bf00      	nop
 8007e3c:	e000      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10b      	bne.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e48:	4bb9      	ldr	r3, [pc, #740]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e4c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e58:	4ab5      	ldr	r2, [pc, #724]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e5a:	430b      	orrs	r3, r1
 8007e5c:	6553      	str	r3, [r2, #84]	; 0x54
 8007e5e:	e003      	b.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e70:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007e74:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e76:	2300      	movs	r3, #0
 8007e78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e7a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007e7e:	460b      	mov	r3, r1
 8007e80:	4313      	orrs	r3, r2
 8007e82:	d009      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e84:	4baa      	ldr	r3, [pc, #680]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e92:	4aa7      	ldr	r2, [pc, #668]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e94:	430b      	orrs	r3, r1
 8007e96:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007ea4:	653b      	str	r3, [r7, #80]	; 0x50
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	657b      	str	r3, [r7, #84]	; 0x54
 8007eaa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007eae:	460b      	mov	r3, r1
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	d00a      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007eb4:	4b9e      	ldr	r3, [pc, #632]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ec0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007ec4:	4a9a      	ldr	r2, [pc, #616]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ec6:	430b      	orrs	r3, r1
 8007ec8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007ed6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ed8:	2300      	movs	r3, #0
 8007eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007edc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	d009      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007ee6:	4b92      	ldr	r3, [pc, #584]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eea:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ef4:	4a8e      	ldr	r2, [pc, #568]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ef6:	430b      	orrs	r3, r1
 8007ef8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f02:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007f06:	643b      	str	r3, [r7, #64]	; 0x40
 8007f08:	2300      	movs	r3, #0
 8007f0a:	647b      	str	r3, [r7, #68]	; 0x44
 8007f0c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007f10:	460b      	mov	r3, r1
 8007f12:	4313      	orrs	r3, r2
 8007f14:	d00e      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007f16:	4b86      	ldr	r3, [pc, #536]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	4a85      	ldr	r2, [pc, #532]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f20:	6113      	str	r3, [r2, #16]
 8007f22:	4b83      	ldr	r3, [pc, #524]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f24:	6919      	ldr	r1, [r3, #16]
 8007f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007f2e:	4a80      	ldr	r2, [pc, #512]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f30:	430b      	orrs	r3, r1
 8007f32:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007f40:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f42:	2300      	movs	r3, #0
 8007f44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f46:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	d009      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007f50:	4b77      	ldr	r3, [pc, #476]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f54:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f5e:	4a74      	ldr	r2, [pc, #464]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f60:	430b      	orrs	r3, r1
 8007f62:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007f70:	633b      	str	r3, [r7, #48]	; 0x30
 8007f72:	2300      	movs	r3, #0
 8007f74:	637b      	str	r3, [r7, #52]	; 0x34
 8007f76:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	d00a      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007f80:	4b6b      	ldr	r3, [pc, #428]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f84:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f90:	4a67      	ldr	r2, [pc, #412]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f92:	430b      	orrs	r3, r1
 8007f94:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	62b9      	str	r1, [r7, #40]	; 0x28
 8007fa2:	f003 0301 	and.w	r3, r3, #1
 8007fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fa8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007fac:	460b      	mov	r3, r1
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	d011      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fb6:	3308      	adds	r3, #8
 8007fb8:	2100      	movs	r1, #0
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f001 fa44 	bl	8009448 <RCCEx_PLL2_Config>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d003      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fde:	2100      	movs	r1, #0
 8007fe0:	6239      	str	r1, [r7, #32]
 8007fe2:	f003 0302 	and.w	r3, r3, #2
 8007fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8007fe8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007fec:	460b      	mov	r3, r1
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	d011      	beq.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ff6:	3308      	adds	r3, #8
 8007ff8:	2101      	movs	r1, #1
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f001 fa24 	bl	8009448 <RCCEx_PLL2_Config>
 8008000:	4603      	mov	r3, r0
 8008002:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008006:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800800a:	2b00      	cmp	r3, #0
 800800c:	d003      	beq.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800800e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008012:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800801a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801e:	2100      	movs	r1, #0
 8008020:	61b9      	str	r1, [r7, #24]
 8008022:	f003 0304 	and.w	r3, r3, #4
 8008026:	61fb      	str	r3, [r7, #28]
 8008028:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800802c:	460b      	mov	r3, r1
 800802e:	4313      	orrs	r3, r2
 8008030:	d011      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008036:	3308      	adds	r3, #8
 8008038:	2102      	movs	r1, #2
 800803a:	4618      	mov	r0, r3
 800803c:	f001 fa04 	bl	8009448 <RCCEx_PLL2_Config>
 8008040:	4603      	mov	r3, r0
 8008042:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008046:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800804a:	2b00      	cmp	r3, #0
 800804c:	d003      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800804e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008052:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008056:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800805a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805e:	2100      	movs	r1, #0
 8008060:	6139      	str	r1, [r7, #16]
 8008062:	f003 0308 	and.w	r3, r3, #8
 8008066:	617b      	str	r3, [r7, #20]
 8008068:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800806c:	460b      	mov	r3, r1
 800806e:	4313      	orrs	r3, r2
 8008070:	d011      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008076:	3328      	adds	r3, #40	; 0x28
 8008078:	2100      	movs	r1, #0
 800807a:	4618      	mov	r0, r3
 800807c:	f001 fa96 	bl	80095ac <RCCEx_PLL3_Config>
 8008080:	4603      	mov	r3, r0
 8008082:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008086:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800808a:	2b00      	cmp	r3, #0
 800808c:	d003      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800808e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008092:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800809a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809e:	2100      	movs	r1, #0
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	f003 0310 	and.w	r3, r3, #16
 80080a6:	60fb      	str	r3, [r7, #12]
 80080a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80080ac:	460b      	mov	r3, r1
 80080ae:	4313      	orrs	r3, r2
 80080b0:	d011      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080b6:	3328      	adds	r3, #40	; 0x28
 80080b8:	2101      	movs	r1, #1
 80080ba:	4618      	mov	r0, r3
 80080bc:	f001 fa76 	bl	80095ac <RCCEx_PLL3_Config>
 80080c0:	4603      	mov	r3, r0
 80080c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80080c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d003      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80080d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080de:	2100      	movs	r1, #0
 80080e0:	6039      	str	r1, [r7, #0]
 80080e2:	f003 0320 	and.w	r3, r3, #32
 80080e6:	607b      	str	r3, [r7, #4]
 80080e8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80080ec:	460b      	mov	r3, r1
 80080ee:	4313      	orrs	r3, r2
 80080f0:	d011      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080f6:	3328      	adds	r3, #40	; 0x28
 80080f8:	2102      	movs	r1, #2
 80080fa:	4618      	mov	r0, r3
 80080fc:	f001 fa56 	bl	80095ac <RCCEx_PLL3_Config>
 8008100:	4603      	mov	r3, r0
 8008102:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008106:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800810a:	2b00      	cmp	r3, #0
 800810c:	d003      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800810e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008112:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008116:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800811a:	2b00      	cmp	r3, #0
 800811c:	d101      	bne.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800811e:	2300      	movs	r3, #0
 8008120:	e000      	b.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
}
 8008124:	4618      	mov	r0, r3
 8008126:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800812a:	46bd      	mov	sp, r7
 800812c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008130:	58024400 	.word	0x58024400

08008134 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b090      	sub	sp, #64	; 0x40
 8008138:	af00      	add	r7, sp, #0
 800813a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800813e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008142:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008146:	430b      	orrs	r3, r1
 8008148:	f040 8094 	bne.w	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800814c:	4b9e      	ldr	r3, [pc, #632]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800814e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008150:	f003 0307 	and.w	r3, r3, #7
 8008154:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008158:	2b04      	cmp	r3, #4
 800815a:	f200 8087 	bhi.w	800826c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800815e:	a201      	add	r2, pc, #4	; (adr r2, 8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008164:	08008179 	.word	0x08008179
 8008168:	080081a1 	.word	0x080081a1
 800816c:	080081c9 	.word	0x080081c9
 8008170:	08008265 	.word	0x08008265
 8008174:	080081f1 	.word	0x080081f1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008178:	4b93      	ldr	r3, [pc, #588]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008180:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008184:	d108      	bne.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800818a:	4618      	mov	r0, r3
 800818c:	f001 f80a 	bl	80091a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008192:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008194:	f000 bd3f 	b.w	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008198:	2300      	movs	r3, #0
 800819a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800819c:	f000 bd3b 	b.w	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081a0:	4b89      	ldr	r3, [pc, #548]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081ac:	d108      	bne.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081ae:	f107 0318 	add.w	r3, r7, #24
 80081b2:	4618      	mov	r0, r3
 80081b4:	f000 fd4e 	bl	8008c54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081bc:	f000 bd2b 	b.w	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 80081c0:	2300      	movs	r3, #0
 80081c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081c4:	f000 bd27 	b.w	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081c8:	4b7f      	ldr	r3, [pc, #508]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081d4:	d108      	bne.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081d6:	f107 030c 	add.w	r3, r7, #12
 80081da:	4618      	mov	r0, r3
 80081dc:	f000 fe8e 	bl	8008efc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081e4:	f000 bd17 	b.w	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 80081e8:	2300      	movs	r3, #0
 80081ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081ec:	f000 bd13 	b.w	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80081f0:	4b75      	ldr	r3, [pc, #468]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081f8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80081fa:	4b73      	ldr	r3, [pc, #460]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 0304 	and.w	r3, r3, #4
 8008202:	2b04      	cmp	r3, #4
 8008204:	d10c      	bne.n	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008208:	2b00      	cmp	r3, #0
 800820a:	d109      	bne.n	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800820c:	4b6e      	ldr	r3, [pc, #440]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	08db      	lsrs	r3, r3, #3
 8008212:	f003 0303 	and.w	r3, r3, #3
 8008216:	4a6d      	ldr	r2, [pc, #436]	; (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008218:	fa22 f303 	lsr.w	r3, r2, r3
 800821c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800821e:	e01f      	b.n	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008220:	4b69      	ldr	r3, [pc, #420]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800822c:	d106      	bne.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800822e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008230:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008234:	d102      	bne.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008236:	4b66      	ldr	r3, [pc, #408]	; (80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008238:	63fb      	str	r3, [r7, #60]	; 0x3c
 800823a:	e011      	b.n	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800823c:	4b62      	ldr	r3, [pc, #392]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008244:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008248:	d106      	bne.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800824a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800824c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008250:	d102      	bne.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008252:	4b60      	ldr	r3, [pc, #384]	; (80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008254:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008256:	e003      	b.n	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008258:	2300      	movs	r3, #0
 800825a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800825c:	f000 bcdb 	b.w	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8008260:	f000 bcd9 	b.w	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008264:	4b5b      	ldr	r3, [pc, #364]	; (80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008268:	f000 bcd5 	b.w	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      default :
      {
        frequency = 0;
 800826c:	2300      	movs	r3, #0
 800826e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008270:	f000 bcd1 	b.w	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008274:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008278:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800827c:	430b      	orrs	r3, r1
 800827e:	f040 80ab 	bne.w	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008282:	4b51      	ldr	r3, [pc, #324]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008286:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800828a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800828c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008292:	d056      	beq.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800829a:	f200 8090 	bhi.w	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800829e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a0:	2bc0      	cmp	r3, #192	; 0xc0
 80082a2:	f000 8088 	beq.w	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80082a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a8:	2bc0      	cmp	r3, #192	; 0xc0
 80082aa:	f200 8088 	bhi.w	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80082ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b0:	2b80      	cmp	r3, #128	; 0x80
 80082b2:	d032      	beq.n	800831a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80082b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b6:	2b80      	cmp	r3, #128	; 0x80
 80082b8:	f200 8081 	bhi.w	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80082bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d003      	beq.n	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80082c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c4:	2b40      	cmp	r3, #64	; 0x40
 80082c6:	d014      	beq.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80082c8:	e079      	b.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80082ca:	4b3f      	ldr	r3, [pc, #252]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082d6:	d108      	bne.n	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082dc:	4618      	mov	r0, r3
 80082de:	f000 ff61 	bl	80091a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80082e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082e6:	f000 bc96 	b.w	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 80082ea:	2300      	movs	r3, #0
 80082ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082ee:	f000 bc92 	b.w	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80082f2:	4b35      	ldr	r3, [pc, #212]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082fe:	d108      	bne.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008300:	f107 0318 	add.w	r3, r7, #24
 8008304:	4618      	mov	r0, r3
 8008306:	f000 fca5 	bl	8008c54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800830e:	f000 bc82 	b.w	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008312:	2300      	movs	r3, #0
 8008314:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008316:	f000 bc7e 	b.w	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800831a:	4b2b      	ldr	r3, [pc, #172]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008322:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008326:	d108      	bne.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008328:	f107 030c 	add.w	r3, r7, #12
 800832c:	4618      	mov	r0, r3
 800832e:	f000 fde5 	bl	8008efc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008336:	f000 bc6e 	b.w	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 800833a:	2300      	movs	r3, #0
 800833c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800833e:	f000 bc6a 	b.w	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008342:	4b21      	ldr	r3, [pc, #132]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008346:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800834a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800834c:	4b1e      	ldr	r3, [pc, #120]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 0304 	and.w	r3, r3, #4
 8008354:	2b04      	cmp	r3, #4
 8008356:	d10c      	bne.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800835a:	2b00      	cmp	r3, #0
 800835c:	d109      	bne.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800835e:	4b1a      	ldr	r3, [pc, #104]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	08db      	lsrs	r3, r3, #3
 8008364:	f003 0303 	and.w	r3, r3, #3
 8008368:	4a18      	ldr	r2, [pc, #96]	; (80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800836a:	fa22 f303 	lsr.w	r3, r2, r3
 800836e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008370:	e01f      	b.n	80083b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008372:	4b15      	ldr	r3, [pc, #84]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800837a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800837e:	d106      	bne.n	800838e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008382:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008386:	d102      	bne.n	800838e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008388:	4b11      	ldr	r3, [pc, #68]	; (80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800838a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800838c:	e011      	b.n	80083b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800838e:	4b0e      	ldr	r3, [pc, #56]	; (80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008396:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800839a:	d106      	bne.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800839c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800839e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083a2:	d102      	bne.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80083a4:	4b0b      	ldr	r3, [pc, #44]	; (80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80083a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083a8:	e003      	b.n	80083b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80083aa:	2300      	movs	r3, #0
 80083ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80083ae:	f000 bc32 	b.w	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 80083b2:	f000 bc30 	b.w	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80083b6:	4b07      	ldr	r3, [pc, #28]	; (80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80083b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083ba:	f000 bc2c 	b.w	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      default :
      {
        frequency = 0;
 80083be:	2300      	movs	r3, #0
 80083c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083c2:	f000 bc28 	b.w	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 80083c6:	bf00      	nop
 80083c8:	58024400 	.word	0x58024400
 80083cc:	03d09000 	.word	0x03d09000
 80083d0:	003d0900 	.word	0x003d0900
 80083d4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80083d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083dc:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80083e0:	430b      	orrs	r3, r1
 80083e2:	f040 809c 	bne.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80083e6:	4b9e      	ldr	r3, [pc, #632]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80083e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ea:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80083ee:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80083f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083f6:	d054      	beq.n	80084a2 <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 80083f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083fe:	f200 808b 	bhi.w	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
 8008402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008404:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008408:	f000 8083 	beq.w	8008512 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
 800840c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008412:	f200 8081 	bhi.w	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
 8008416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008418:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800841c:	d02f      	beq.n	800847e <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800841e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008420:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008424:	d878      	bhi.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
 8008426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008428:	2b00      	cmp	r3, #0
 800842a:	d004      	beq.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800842c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008432:	d012      	beq.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8008434:	e070      	b.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008436:	4b8a      	ldr	r3, [pc, #552]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800843e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008442:	d107      	bne.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008448:	4618      	mov	r0, r3
 800844a:	f000 feab 	bl	80091a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800844e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008450:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008452:	e3e0      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008454:	2300      	movs	r3, #0
 8008456:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008458:	e3dd      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800845a:	4b81      	ldr	r3, [pc, #516]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008462:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008466:	d107      	bne.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008468:	f107 0318 	add.w	r3, r7, #24
 800846c:	4618      	mov	r0, r3
 800846e:	f000 fbf1 	bl	8008c54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008476:	e3ce      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008478:	2300      	movs	r3, #0
 800847a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800847c:	e3cb      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800847e:	4b78      	ldr	r3, [pc, #480]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008486:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800848a:	d107      	bne.n	800849c <HAL_RCCEx_GetPeriphCLKFreq+0x368>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800848c:	f107 030c 	add.w	r3, r7, #12
 8008490:	4618      	mov	r0, r3
 8008492:	f000 fd33 	bl	8008efc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800849a:	e3bc      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 800849c:	2300      	movs	r3, #0
 800849e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084a0:	e3b9      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80084a2:	4b6f      	ldr	r3, [pc, #444]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80084a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80084aa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084ac:	4b6c      	ldr	r3, [pc, #432]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0304 	and.w	r3, r3, #4
 80084b4:	2b04      	cmp	r3, #4
 80084b6:	d10c      	bne.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 80084b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d109      	bne.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084be:	4b68      	ldr	r3, [pc, #416]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	08db      	lsrs	r3, r3, #3
 80084c4:	f003 0303 	and.w	r3, r3, #3
 80084c8:	4a66      	ldr	r2, [pc, #408]	; (8008664 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084ca:	fa22 f303 	lsr.w	r3, r2, r3
 80084ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084d0:	e01e      	b.n	8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80084d2:	4b63      	ldr	r3, [pc, #396]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084de:	d106      	bne.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 80084e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084e6:	d102      	bne.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80084e8:	4b5f      	ldr	r3, [pc, #380]	; (8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80084ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084ec:	e010      	b.n	8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80084ee:	4b5c      	ldr	r3, [pc, #368]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084fa:	d106      	bne.n	800850a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80084fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008502:	d102      	bne.n	800850a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008504:	4b59      	ldr	r3, [pc, #356]	; (800866c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008508:	e002      	b.n	8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800850a:	2300      	movs	r3, #0
 800850c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800850e:	e382      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8008510:	e381      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008512:	4b56      	ldr	r3, [pc, #344]	; (800866c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008514:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008516:	e37e      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      default :
      {
        frequency = 0;
 8008518:	2300      	movs	r3, #0
 800851a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800851c:	e37b      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800851e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008522:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008526:	430b      	orrs	r3, r1
 8008528:	f040 80a5 	bne.w	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800852c:	4b4c      	ldr	r3, [pc, #304]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800852e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008530:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008534:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008538:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800853c:	d055      	beq.n	80085ea <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 800853e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008540:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008544:	f200 8094 	bhi.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
 8008548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800854e:	f000 8084 	beq.w	800865a <HAL_RCCEx_GetPeriphCLKFreq+0x526>
 8008552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008554:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008558:	f200 808a 	bhi.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
 800855c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008562:	d030      	beq.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8008564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008566:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800856a:	f200 8081 	bhi.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
 800856e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008570:	2b00      	cmp	r3, #0
 8008572:	d004      	beq.n	800857e <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
 8008574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008576:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800857a:	d012      	beq.n	80085a2 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 800857c:	e078      	b.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800857e:	4b38      	ldr	r3, [pc, #224]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008586:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800858a:	d107      	bne.n	800859c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800858c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008590:	4618      	mov	r0, r3
 8008592:	f000 fe07 	bl	80091a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008598:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800859a:	e33c      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 800859c:	2300      	movs	r3, #0
 800859e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085a0:	e339      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085a2:	4b2f      	ldr	r3, [pc, #188]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085ae:	d107      	bne.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085b0:	f107 0318 	add.w	r3, r7, #24
 80085b4:	4618      	mov	r0, r3
 80085b6:	f000 fb4d 	bl	8008c54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085be:	e32a      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 80085c0:	2300      	movs	r3, #0
 80085c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085c4:	e327      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085c6:	4b26      	ldr	r3, [pc, #152]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085d2:	d107      	bne.n	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085d4:	f107 030c 	add.w	r3, r7, #12
 80085d8:	4618      	mov	r0, r3
 80085da:	f000 fc8f 	bl	8008efc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085e2:	e318      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 80085e4:	2300      	movs	r3, #0
 80085e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085e8:	e315      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80085ea:	4b1d      	ldr	r3, [pc, #116]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80085ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80085f2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085f4:	4b1a      	ldr	r3, [pc, #104]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 0304 	and.w	r3, r3, #4
 80085fc:	2b04      	cmp	r3, #4
 80085fe:	d10c      	bne.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8008600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008602:	2b00      	cmp	r3, #0
 8008604:	d109      	bne.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008606:	4b16      	ldr	r3, [pc, #88]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	08db      	lsrs	r3, r3, #3
 800860c:	f003 0303 	and.w	r3, r3, #3
 8008610:	4a14      	ldr	r2, [pc, #80]	; (8008664 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008612:	fa22 f303 	lsr.w	r3, r2, r3
 8008616:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008618:	e01e      	b.n	8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800861a:	4b11      	ldr	r3, [pc, #68]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008626:	d106      	bne.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8008628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800862a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800862e:	d102      	bne.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008630:	4b0d      	ldr	r3, [pc, #52]	; (8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008632:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008634:	e010      	b.n	8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008636:	4b0a      	ldr	r3, [pc, #40]	; (8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800863e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008642:	d106      	bne.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800864a:	d102      	bne.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800864c:	4b07      	ldr	r3, [pc, #28]	; (800866c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800864e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008650:	e002      	b.n	8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008652:	2300      	movs	r3, #0
 8008654:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008656:	e2de      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8008658:	e2dd      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800865a:	4b04      	ldr	r3, [pc, #16]	; (800866c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800865c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800865e:	e2da      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8008660:	58024400 	.word	0x58024400
 8008664:	03d09000 	.word	0x03d09000
 8008668:	003d0900 	.word	0x003d0900
 800866c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008670:	2300      	movs	r3, #0
 8008672:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008674:	e2cf      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008676:	e9d7 2300 	ldrd	r2, r3, [r7]
 800867a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800867e:	430b      	orrs	r3, r1
 8008680:	f040 809c 	bne.w	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x688>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008684:	4b93      	ldr	r3, [pc, #588]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008688:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800868c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800868e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008690:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008694:	d054      	beq.n	8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8008696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008698:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800869c:	f200 808b 	bhi.w	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 80086a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80086a6:	f000 8083 	beq.w	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80086aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80086b0:	f200 8081 	bhi.w	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 80086b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086ba:	d02f      	beq.n	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80086bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086c2:	d878      	bhi.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 80086c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d004      	beq.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 80086ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086d0:	d012      	beq.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 80086d2:	e070      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086d4:	4b7f      	ldr	r3, [pc, #508]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086e0:	d107      	bne.n	80086f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086e6:	4618      	mov	r0, r3
 80086e8:	f000 fd5c 	bl	80091a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086f0:	e291      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 80086f2:	2300      	movs	r3, #0
 80086f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086f6:	e28e      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086f8:	4b76      	ldr	r3, [pc, #472]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008700:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008704:	d107      	bne.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008706:	f107 0318 	add.w	r3, r7, #24
 800870a:	4618      	mov	r0, r3
 800870c:	f000 faa2 	bl	8008c54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008714:	e27f      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008716:	2300      	movs	r3, #0
 8008718:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800871a:	e27c      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800871c:	4b6d      	ldr	r3, [pc, #436]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008724:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008728:	d107      	bne.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800872a:	f107 030c 	add.w	r3, r7, #12
 800872e:	4618      	mov	r0, r3
 8008730:	f000 fbe4 	bl	8008efc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008738:	e26d      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 800873a:	2300      	movs	r3, #0
 800873c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800873e:	e26a      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008740:	4b64      	ldr	r3, [pc, #400]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008744:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008748:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800874a:	4b62      	ldr	r3, [pc, #392]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 0304 	and.w	r3, r3, #4
 8008752:	2b04      	cmp	r3, #4
 8008754:	d10c      	bne.n	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8008756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008758:	2b00      	cmp	r3, #0
 800875a:	d109      	bne.n	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800875c:	4b5d      	ldr	r3, [pc, #372]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	08db      	lsrs	r3, r3, #3
 8008762:	f003 0303 	and.w	r3, r3, #3
 8008766:	4a5c      	ldr	r2, [pc, #368]	; (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8008768:	fa22 f303 	lsr.w	r3, r2, r3
 800876c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800876e:	e01e      	b.n	80087ae <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008770:	4b58      	ldr	r3, [pc, #352]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800877c:	d106      	bne.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800877e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008780:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008784:	d102      	bne.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008786:	4b55      	ldr	r3, [pc, #340]	; (80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008788:	63fb      	str	r3, [r7, #60]	; 0x3c
 800878a:	e010      	b.n	80087ae <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800878c:	4b51      	ldr	r3, [pc, #324]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008794:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008798:	d106      	bne.n	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
 800879a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800879c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087a0:	d102      	bne.n	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80087a2:	4b4f      	ldr	r3, [pc, #316]	; (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80087a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087a6:	e002      	b.n	80087ae <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80087a8:	2300      	movs	r3, #0
 80087aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80087ac:	e233      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 80087ae:	e232      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80087b0:	4b4b      	ldr	r3, [pc, #300]	; (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80087b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087b4:	e22f      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      default :
      {
        frequency = 0;
 80087b6:	2300      	movs	r3, #0
 80087b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087ba:	e22c      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80087bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087c0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80087c4:	430b      	orrs	r3, r1
 80087c6:	f040 808d 	bne.w	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80087ca:	4b42      	ldr	r3, [pc, #264]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80087cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087ce:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80087d2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80087d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087da:	d06b      	beq.n	80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
 80087dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087e2:	d874      	bhi.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80087e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80087ea:	d056      	beq.n	800889a <HAL_RCCEx_GetPeriphCLKFreq+0x766>
 80087ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80087f2:	d86c      	bhi.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80087f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80087fa:	d03b      	beq.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x740>
 80087fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008802:	d864      	bhi.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008806:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800880a:	d021      	beq.n	8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 800880c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008812:	d85c      	bhi.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008816:	2b00      	cmp	r3, #0
 8008818:	d004      	beq.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
 800881a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008820:	d004      	beq.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008822:	e054      	b.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008824:	f7fe fa66 	bl	8006cf4 <HAL_RCC_GetPCLK1Freq>
 8008828:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800882a:	e1f4      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800882c:	4b29      	ldr	r3, [pc, #164]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008838:	d107      	bne.n	800884a <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800883a:	f107 0318 	add.w	r3, r7, #24
 800883e:	4618      	mov	r0, r3
 8008840:	f000 fa08 	bl	8008c54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008848:	e1e5      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 800884a:	2300      	movs	r3, #0
 800884c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800884e:	e1e2      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008850:	4b20      	ldr	r3, [pc, #128]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800885c:	d107      	bne.n	800886e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800885e:	f107 030c 	add.w	r3, r7, #12
 8008862:	4618      	mov	r0, r3
 8008864:	f000 fb4a 	bl	8008efc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800886c:	e1d3      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 800886e:	2300      	movs	r3, #0
 8008870:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008872:	e1d0      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008874:	4b17      	ldr	r3, [pc, #92]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 0304 	and.w	r3, r3, #4
 800887c:	2b04      	cmp	r3, #4
 800887e:	d109      	bne.n	8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008880:	4b14      	ldr	r3, [pc, #80]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	08db      	lsrs	r3, r3, #3
 8008886:	f003 0303 	and.w	r3, r3, #3
 800888a:	4a13      	ldr	r2, [pc, #76]	; (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800888c:	fa22 f303 	lsr.w	r3, r2, r3
 8008890:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008892:	e1c0      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008894:	2300      	movs	r3, #0
 8008896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008898:	e1bd      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800889a:	4b0e      	ldr	r3, [pc, #56]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088a6:	d102      	bne.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
        {
          frequency = CSI_VALUE;
 80088a8:	4b0c      	ldr	r3, [pc, #48]	; (80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80088aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088ac:	e1b3      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 80088ae:	2300      	movs	r3, #0
 80088b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088b2:	e1b0      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80088b4:	4b07      	ldr	r3, [pc, #28]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088c0:	d102      	bne.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HSE_VALUE;
 80088c2:	4b07      	ldr	r3, [pc, #28]	; (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80088c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088c6:	e1a6      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 80088c8:	2300      	movs	r3, #0
 80088ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088cc:	e1a3      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      default :
      {
        frequency = 0;
 80088ce:	2300      	movs	r3, #0
 80088d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088d2:	e1a0      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 80088d4:	58024400 	.word	0x58024400
 80088d8:	03d09000 	.word	0x03d09000
 80088dc:	003d0900 	.word	0x003d0900
 80088e0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80088e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088e8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80088ec:	430b      	orrs	r3, r1
 80088ee:	d173      	bne.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80088f0:	4b9c      	ldr	r3, [pc, #624]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 80088f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80088f8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80088fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008900:	d02f      	beq.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
 8008902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008904:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008908:	d863      	bhi.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800890a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890c:	2b00      	cmp	r3, #0
 800890e:	d004      	beq.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8008910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008916:	d012      	beq.n	800893e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8008918:	e05b      	b.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800891a:	4b92      	ldr	r3, [pc, #584]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008922:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008926:	d107      	bne.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008928:	f107 0318 	add.w	r3, r7, #24
 800892c:	4618      	mov	r0, r3
 800892e:	f000 f991 	bl	8008c54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008936:	e16e      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008938:	2300      	movs	r3, #0
 800893a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800893c:	e16b      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800893e:	4b89      	ldr	r3, [pc, #548]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800894a:	d107      	bne.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800894c:	f107 030c 	add.w	r3, r7, #12
 8008950:	4618      	mov	r0, r3
 8008952:	f000 fad3 	bl	8008efc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800895a:	e15c      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 800895c:	2300      	movs	r3, #0
 800895e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008960:	e159      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008962:	4b80      	ldr	r3, [pc, #512]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008966:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800896a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800896c:	4b7d      	ldr	r3, [pc, #500]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 0304 	and.w	r3, r3, #4
 8008974:	2b04      	cmp	r3, #4
 8008976:	d10c      	bne.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8008978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800897a:	2b00      	cmp	r3, #0
 800897c:	d109      	bne.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800897e:	4b79      	ldr	r3, [pc, #484]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	08db      	lsrs	r3, r3, #3
 8008984:	f003 0303 	and.w	r3, r3, #3
 8008988:	4a77      	ldr	r2, [pc, #476]	; (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>)
 800898a:	fa22 f303 	lsr.w	r3, r2, r3
 800898e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008990:	e01e      	b.n	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008992:	4b74      	ldr	r3, [pc, #464]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800899a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800899e:	d106      	bne.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
 80089a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089a6:	d102      	bne.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80089a8:	4b70      	ldr	r3, [pc, #448]	; (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0xa38>)
 80089aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089ac:	e010      	b.n	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089ae:	4b6d      	ldr	r3, [pc, #436]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089ba:	d106      	bne.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x896>
 80089bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089c2:	d102      	bne.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x896>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80089c4:	4b6a      	ldr	r3, [pc, #424]	; (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089c8:	e002      	b.n	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80089ca:	2300      	movs	r3, #0
 80089cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80089ce:	e122      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 80089d0:	e121      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      default :
      {
        frequency = 0;
 80089d2:	2300      	movs	r3, #0
 80089d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089d6:	e11e      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80089d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089dc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80089e0:	430b      	orrs	r3, r1
 80089e2:	d133      	bne.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80089e4:	4b5f      	ldr	r3, [pc, #380]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 80089e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089ec:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80089ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d004      	beq.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80089f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089fa:	d012      	beq.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
 80089fc:	e023      	b.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x912>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089fe:	4b59      	ldr	r3, [pc, #356]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a0a:	d107      	bne.n	8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 fbc7 	bl	80091a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a1a:	e0fc      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a20:	e0f9      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a22:	4b50      	ldr	r3, [pc, #320]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a2e:	d107      	bne.n	8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a30:	f107 0318 	add.w	r3, r7, #24
 8008a34:	4618      	mov	r0, r3
 8008a36:	f000 f90d 	bl	8008c54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008a3a:	6a3b      	ldr	r3, [r7, #32]
 8008a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a3e:	e0ea      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008a40:	2300      	movs	r3, #0
 8008a42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a44:	e0e7      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      default :
      {
        frequency = 0;
 8008a46:	2300      	movs	r3, #0
 8008a48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a4a:	e0e4      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008a4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a50:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008a54:	430b      	orrs	r3, r1
 8008a56:	f040 808d 	bne.w	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008a5a:	4b42      	ldr	r3, [pc, #264]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a5e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008a62:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a6a:	d06b      	beq.n	8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>
 8008a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a72:	d874      	bhi.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8008a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a7a:	d056      	beq.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8008a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a82:	d86c      	bhi.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8008a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a8a:	d03b      	beq.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8008a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a92:	d864      	bhi.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8008a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a9a:	d021      	beq.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8008a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008aa2:	d85c      	bhi.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8008aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d004      	beq.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ab0:	d004      	beq.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008ab2:	e054      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008ab4:	f000 f8b8 	bl	8008c28 <HAL_RCCEx_GetD3PCLK1Freq>
 8008ab8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008aba:	e0ac      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008abc:	4b29      	ldr	r3, [pc, #164]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ac4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ac8:	d107      	bne.n	8008ada <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008aca:	f107 0318 	add.w	r3, r7, #24
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 f8c0 	bl	8008c54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ad8:	e09d      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008ada:	2300      	movs	r3, #0
 8008adc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ade:	e09a      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ae0:	4b20      	ldr	r3, [pc, #128]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008aec:	d107      	bne.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008aee:	f107 030c 	add.w	r3, r7, #12
 8008af2:	4618      	mov	r0, r3
 8008af4:	f000 fa02 	bl	8008efc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008afc:	e08b      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008afe:	2300      	movs	r3, #0
 8008b00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b02:	e088      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b04:	4b17      	ldr	r3, [pc, #92]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 0304 	and.w	r3, r3, #4
 8008b0c:	2b04      	cmp	r3, #4
 8008b0e:	d109      	bne.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x9f0>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b10:	4b14      	ldr	r3, [pc, #80]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	08db      	lsrs	r3, r3, #3
 8008b16:	f003 0303 	and.w	r3, r3, #3
 8008b1a:	4a13      	ldr	r2, [pc, #76]	; (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>)
 8008b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b22:	e078      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008b24:	2300      	movs	r3, #0
 8008b26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b28:	e075      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008b2a:	4b0e      	ldr	r3, [pc, #56]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b36:	d102      	bne.n	8008b3e <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
        {
          frequency = CSI_VALUE;
 8008b38:	4b0c      	ldr	r3, [pc, #48]	; (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0xa38>)
 8008b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b3c:	e06b      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b42:	e068      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008b44:	4b07      	ldr	r3, [pc, #28]	; (8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b50:	d102      	bne.n	8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
        {
          frequency = HSE_VALUE;
 8008b52:	4b07      	ldr	r3, [pc, #28]	; (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b56:	e05e      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b5c:	e05b      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b62:	e058      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8008b64:	58024400 	.word	0x58024400
 8008b68:	03d09000 	.word	0x03d09000
 8008b6c:	003d0900 	.word	0x003d0900
 8008b70:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008b74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b78:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008b7c:	430b      	orrs	r3, r1
 8008b7e:	d148      	bne.n	8008c12 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008b80:	4b27      	ldr	r3, [pc, #156]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8008b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b88:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b90:	d02a      	beq.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8008b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b98:	d838      	bhi.n	8008c0c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
 8008b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d004      	beq.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8008ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ba6:	d00d      	beq.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>
 8008ba8:	e030      	b.n	8008c0c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008baa:	4b1d      	ldr	r3, [pc, #116]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bb6:	d102      	bne.n	8008bbe <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
        {
          frequency = HSE_VALUE;
 8008bb8:	4b1a      	ldr	r3, [pc, #104]	; (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008bba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bbc:	e02b      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bc2:	e028      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008bc4:	4b16      	ldr	r3, [pc, #88]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bd0:	d107      	bne.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f000 fae4 	bl	80091a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008be0:	e019      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008be2:	2300      	movs	r3, #0
 8008be4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008be6:	e016      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008be8:	4b0d      	ldr	r3, [pc, #52]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bf4:	d107      	bne.n	8008c06 <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bf6:	f107 0318 	add.w	r3, r7, #24
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f000 f82a 	bl	8008c54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c04:	e007      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008c06:	2300      	movs	r3, #0
 8008c08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c0a:	e004      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      default :
      {
        frequency = 0;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c10:	e001      	b.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
    }
  }
  else
  {
    frequency = 0;
 8008c12:	2300      	movs	r3, #0
 8008c14:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8008c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3740      	adds	r7, #64	; 0x40
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	58024400 	.word	0x58024400
 8008c24:	00bb8000 	.word	0x00bb8000

08008c28 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008c2c:	f7fe f832 	bl	8006c94 <HAL_RCC_GetHCLKFreq>
 8008c30:	4602      	mov	r2, r0
 8008c32:	4b06      	ldr	r3, [pc, #24]	; (8008c4c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008c34:	6a1b      	ldr	r3, [r3, #32]
 8008c36:	091b      	lsrs	r3, r3, #4
 8008c38:	f003 0307 	and.w	r3, r3, #7
 8008c3c:	4904      	ldr	r1, [pc, #16]	; (8008c50 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008c3e:	5ccb      	ldrb	r3, [r1, r3]
 8008c40:	f003 031f 	and.w	r3, r3, #31
 8008c44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	58024400 	.word	0x58024400
 8008c50:	0800ff54 	.word	0x0800ff54

08008c54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b089      	sub	sp, #36	; 0x24
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c5c:	4ba1      	ldr	r3, [pc, #644]	; (8008ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c60:	f003 0303 	and.w	r3, r3, #3
 8008c64:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008c66:	4b9f      	ldr	r3, [pc, #636]	; (8008ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c6a:	0b1b      	lsrs	r3, r3, #12
 8008c6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c70:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008c72:	4b9c      	ldr	r3, [pc, #624]	; (8008ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c76:	091b      	lsrs	r3, r3, #4
 8008c78:	f003 0301 	and.w	r3, r3, #1
 8008c7c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008c7e:	4b99      	ldr	r3, [pc, #612]	; (8008ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c82:	08db      	lsrs	r3, r3, #3
 8008c84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c88:	693a      	ldr	r2, [r7, #16]
 8008c8a:	fb02 f303 	mul.w	r3, r2, r3
 8008c8e:	ee07 3a90 	vmov	s15, r3
 8008c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f000 8111 	beq.w	8008ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	f000 8083 	beq.w	8008db0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	2b02      	cmp	r3, #2
 8008cae:	f200 80a1 	bhi.w	8008df4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d003      	beq.n	8008cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d056      	beq.n	8008d6c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008cbe:	e099      	b.n	8008df4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cc0:	4b88      	ldr	r3, [pc, #544]	; (8008ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f003 0320 	and.w	r3, r3, #32
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d02d      	beq.n	8008d28 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ccc:	4b85      	ldr	r3, [pc, #532]	; (8008ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	08db      	lsrs	r3, r3, #3
 8008cd2:	f003 0303 	and.w	r3, r3, #3
 8008cd6:	4a84      	ldr	r2, [pc, #528]	; (8008ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8008cdc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	ee07 3a90 	vmov	s15, r3
 8008ce4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	ee07 3a90 	vmov	s15, r3
 8008cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cf6:	4b7b      	ldr	r3, [pc, #492]	; (8008ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cfe:	ee07 3a90 	vmov	s15, r3
 8008d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008eec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008d26:	e087      	b.n	8008e38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	ee07 3a90 	vmov	s15, r3
 8008d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d3a:	4b6a      	ldr	r3, [pc, #424]	; (8008ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d42:	ee07 3a90 	vmov	s15, r3
 8008d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008eec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d6a:	e065      	b.n	8008e38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	ee07 3a90 	vmov	s15, r3
 8008d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d7e:	4b59      	ldr	r3, [pc, #356]	; (8008ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d86:	ee07 3a90 	vmov	s15, r3
 8008d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d92:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008eec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008daa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dae:	e043      	b.n	8008e38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	ee07 3a90 	vmov	s15, r3
 8008db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dc2:	4b48      	ldr	r3, [pc, #288]	; (8008ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dca:	ee07 3a90 	vmov	s15, r3
 8008dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dd6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008eec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008de2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008df2:	e021      	b.n	8008e38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	ee07 3a90 	vmov	s15, r3
 8008dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dfe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e06:	4b37      	ldr	r3, [pc, #220]	; (8008ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e0e:	ee07 3a90 	vmov	s15, r3
 8008e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e1a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008eec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e36:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008e38:	4b2a      	ldr	r3, [pc, #168]	; (8008ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e3c:	0a5b      	lsrs	r3, r3, #9
 8008e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e42:	ee07 3a90 	vmov	s15, r3
 8008e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e52:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e5e:	ee17 2a90 	vmov	r2, s15
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008e66:	4b1f      	ldr	r3, [pc, #124]	; (8008ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6a:	0c1b      	lsrs	r3, r3, #16
 8008e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e70:	ee07 3a90 	vmov	s15, r3
 8008e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e80:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e8c:	ee17 2a90 	vmov	r2, s15
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008e94:	4b13      	ldr	r3, [pc, #76]	; (8008ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e98:	0e1b      	lsrs	r3, r3, #24
 8008e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e9e:	ee07 3a90 	vmov	s15, r3
 8008ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008eaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008eae:	edd7 6a07 	vldr	s13, [r7, #28]
 8008eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008eba:	ee17 2a90 	vmov	r2, s15
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008ec2:	e008      	b.n	8008ed6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	609a      	str	r2, [r3, #8]
}
 8008ed6:	bf00      	nop
 8008ed8:	3724      	adds	r7, #36	; 0x24
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	58024400 	.word	0x58024400
 8008ee8:	03d09000 	.word	0x03d09000
 8008eec:	46000000 	.word	0x46000000
 8008ef0:	4c742400 	.word	0x4c742400
 8008ef4:	4a742400 	.word	0x4a742400
 8008ef8:	4b3b8000 	.word	0x4b3b8000

08008efc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b089      	sub	sp, #36	; 0x24
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f04:	4ba1      	ldr	r3, [pc, #644]	; (800918c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f08:	f003 0303 	and.w	r3, r3, #3
 8008f0c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008f0e:	4b9f      	ldr	r3, [pc, #636]	; (800918c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f12:	0d1b      	lsrs	r3, r3, #20
 8008f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f18:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008f1a:	4b9c      	ldr	r3, [pc, #624]	; (800918c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f1e:	0a1b      	lsrs	r3, r3, #8
 8008f20:	f003 0301 	and.w	r3, r3, #1
 8008f24:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008f26:	4b99      	ldr	r3, [pc, #612]	; (800918c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f2a:	08db      	lsrs	r3, r3, #3
 8008f2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f30:	693a      	ldr	r2, [r7, #16]
 8008f32:	fb02 f303 	mul.w	r3, r2, r3
 8008f36:	ee07 3a90 	vmov	s15, r3
 8008f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f000 8111 	beq.w	800916c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	f000 8083 	beq.w	8009058 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	f200 80a1 	bhi.w	800909c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d003      	beq.n	8008f68 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d056      	beq.n	8009014 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008f66:	e099      	b.n	800909c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f68:	4b88      	ldr	r3, [pc, #544]	; (800918c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f003 0320 	and.w	r3, r3, #32
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d02d      	beq.n	8008fd0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f74:	4b85      	ldr	r3, [pc, #532]	; (800918c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	08db      	lsrs	r3, r3, #3
 8008f7a:	f003 0303 	and.w	r3, r3, #3
 8008f7e:	4a84      	ldr	r2, [pc, #528]	; (8009190 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008f80:	fa22 f303 	lsr.w	r3, r2, r3
 8008f84:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	ee07 3a90 	vmov	s15, r3
 8008f8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	ee07 3a90 	vmov	s15, r3
 8008f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f9e:	4b7b      	ldr	r3, [pc, #492]	; (800918c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fa6:	ee07 3a90 	vmov	s15, r3
 8008faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fae:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fb2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009194 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008fce:	e087      	b.n	80090e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	ee07 3a90 	vmov	s15, r3
 8008fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fda:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009198 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fe2:	4b6a      	ldr	r3, [pc, #424]	; (800918c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fea:	ee07 3a90 	vmov	s15, r3
 8008fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ff2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ff6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009194 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800900a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800900e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009012:	e065      	b.n	80090e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	ee07 3a90 	vmov	s15, r3
 800901a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800901e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800919c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009026:	4b59      	ldr	r3, [pc, #356]	; (800918c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800902a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800902e:	ee07 3a90 	vmov	s15, r3
 8009032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009036:	ed97 6a03 	vldr	s12, [r7, #12]
 800903a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009194 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800903e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800904a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800904e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009052:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009056:	e043      	b.n	80090e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	ee07 3a90 	vmov	s15, r3
 800905e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009062:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800906a:	4b48      	ldr	r3, [pc, #288]	; (800918c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800906c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800906e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009072:	ee07 3a90 	vmov	s15, r3
 8009076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800907a:	ed97 6a03 	vldr	s12, [r7, #12]
 800907e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009194 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800908a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800908e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009096:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800909a:	e021      	b.n	80090e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	ee07 3a90 	vmov	s15, r3
 80090a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800919c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80090aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090ae:	4b37      	ldr	r3, [pc, #220]	; (800918c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090b6:	ee07 3a90 	vmov	s15, r3
 80090ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090be:	ed97 6a03 	vldr	s12, [r7, #12]
 80090c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009194 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090de:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80090e0:	4b2a      	ldr	r3, [pc, #168]	; (800918c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e4:	0a5b      	lsrs	r3, r3, #9
 80090e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090ea:	ee07 3a90 	vmov	s15, r3
 80090ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80090fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009106:	ee17 2a90 	vmov	r2, s15
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800910e:	4b1f      	ldr	r3, [pc, #124]	; (800918c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009112:	0c1b      	lsrs	r3, r3, #16
 8009114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009118:	ee07 3a90 	vmov	s15, r3
 800911c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009120:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009124:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009128:	edd7 6a07 	vldr	s13, [r7, #28]
 800912c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009134:	ee17 2a90 	vmov	r2, s15
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800913c:	4b13      	ldr	r3, [pc, #76]	; (800918c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800913e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009140:	0e1b      	lsrs	r3, r3, #24
 8009142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009146:	ee07 3a90 	vmov	s15, r3
 800914a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800914e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009152:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009156:	edd7 6a07 	vldr	s13, [r7, #28]
 800915a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800915e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009162:	ee17 2a90 	vmov	r2, s15
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800916a:	e008      	b.n	800917e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	609a      	str	r2, [r3, #8]
}
 800917e:	bf00      	nop
 8009180:	3724      	adds	r7, #36	; 0x24
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	58024400 	.word	0x58024400
 8009190:	03d09000 	.word	0x03d09000
 8009194:	46000000 	.word	0x46000000
 8009198:	4c742400 	.word	0x4c742400
 800919c:	4a742400 	.word	0x4a742400
 80091a0:	4b3b8000 	.word	0x4b3b8000

080091a4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b089      	sub	sp, #36	; 0x24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80091ac:	4ba0      	ldr	r3, [pc, #640]	; (8009430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b0:	f003 0303 	and.w	r3, r3, #3
 80091b4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80091b6:	4b9e      	ldr	r3, [pc, #632]	; (8009430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ba:	091b      	lsrs	r3, r3, #4
 80091bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091c0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80091c2:	4b9b      	ldr	r3, [pc, #620]	; (8009430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c6:	f003 0301 	and.w	r3, r3, #1
 80091ca:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80091cc:	4b98      	ldr	r3, [pc, #608]	; (8009430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091d0:	08db      	lsrs	r3, r3, #3
 80091d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80091d6:	693a      	ldr	r2, [r7, #16]
 80091d8:	fb02 f303 	mul.w	r3, r2, r3
 80091dc:	ee07 3a90 	vmov	s15, r3
 80091e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091e4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f000 8111 	beq.w	8009412 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	2b02      	cmp	r3, #2
 80091f4:	f000 8083 	beq.w	80092fe <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80091f8:	69bb      	ldr	r3, [r7, #24]
 80091fa:	2b02      	cmp	r3, #2
 80091fc:	f200 80a1 	bhi.w	8009342 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d003      	beq.n	800920e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	2b01      	cmp	r3, #1
 800920a:	d056      	beq.n	80092ba <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800920c:	e099      	b.n	8009342 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800920e:	4b88      	ldr	r3, [pc, #544]	; (8009430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f003 0320 	and.w	r3, r3, #32
 8009216:	2b00      	cmp	r3, #0
 8009218:	d02d      	beq.n	8009276 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800921a:	4b85      	ldr	r3, [pc, #532]	; (8009430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	08db      	lsrs	r3, r3, #3
 8009220:	f003 0303 	and.w	r3, r3, #3
 8009224:	4a83      	ldr	r2, [pc, #524]	; (8009434 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009226:	fa22 f303 	lsr.w	r3, r2, r3
 800922a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	ee07 3a90 	vmov	s15, r3
 8009232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	ee07 3a90 	vmov	s15, r3
 800923c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009240:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009244:	4b7a      	ldr	r3, [pc, #488]	; (8009430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800924c:	ee07 3a90 	vmov	s15, r3
 8009250:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009254:	ed97 6a03 	vldr	s12, [r7, #12]
 8009258:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009438 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800925c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009260:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009264:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009268:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800926c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009270:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009274:	e087      	b.n	8009386 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	ee07 3a90 	vmov	s15, r3
 800927c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009280:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800943c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009284:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009288:	4b69      	ldr	r3, [pc, #420]	; (8009430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800928a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009290:	ee07 3a90 	vmov	s15, r3
 8009294:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009298:	ed97 6a03 	vldr	s12, [r7, #12]
 800929c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009438 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80092a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092b8:	e065      	b.n	8009386 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	ee07 3a90 	vmov	s15, r3
 80092c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092c4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009440 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80092c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092cc:	4b58      	ldr	r3, [pc, #352]	; (8009430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092d4:	ee07 3a90 	vmov	s15, r3
 80092d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80092e0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009438 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80092e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092fc:	e043      	b.n	8009386 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	ee07 3a90 	vmov	s15, r3
 8009304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009308:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800930c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009310:	4b47      	ldr	r3, [pc, #284]	; (8009430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009318:	ee07 3a90 	vmov	s15, r3
 800931c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009320:	ed97 6a03 	vldr	s12, [r7, #12]
 8009324:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009438 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009328:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800932c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009330:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009334:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800933c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009340:	e021      	b.n	8009386 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	ee07 3a90 	vmov	s15, r3
 8009348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800934c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800943c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009350:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009354:	4b36      	ldr	r3, [pc, #216]	; (8009430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800935c:	ee07 3a90 	vmov	s15, r3
 8009360:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009364:	ed97 6a03 	vldr	s12, [r7, #12]
 8009368:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009438 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800936c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009370:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009374:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009378:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800937c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009380:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009384:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009386:	4b2a      	ldr	r3, [pc, #168]	; (8009430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800938a:	0a5b      	lsrs	r3, r3, #9
 800938c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009390:	ee07 3a90 	vmov	s15, r3
 8009394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009398:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800939c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80093a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093ac:	ee17 2a90 	vmov	r2, s15
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80093b4:	4b1e      	ldr	r3, [pc, #120]	; (8009430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b8:	0c1b      	lsrs	r3, r3, #16
 80093ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093be:	ee07 3a90 	vmov	s15, r3
 80093c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80093d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093da:	ee17 2a90 	vmov	r2, s15
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80093e2:	4b13      	ldr	r3, [pc, #76]	; (8009430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e6:	0e1b      	lsrs	r3, r3, #24
 80093e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093ec:	ee07 3a90 	vmov	s15, r3
 80093f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009408:	ee17 2a90 	vmov	r2, s15
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009410:	e008      	b.n	8009424 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	609a      	str	r2, [r3, #8]
}
 8009424:	bf00      	nop
 8009426:	3724      	adds	r7, #36	; 0x24
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr
 8009430:	58024400 	.word	0x58024400
 8009434:	03d09000 	.word	0x03d09000
 8009438:	46000000 	.word	0x46000000
 800943c:	4c742400 	.word	0x4c742400
 8009440:	4a742400 	.word	0x4a742400
 8009444:	4b3b8000 	.word	0x4b3b8000

08009448 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009452:	2300      	movs	r3, #0
 8009454:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009456:	4b53      	ldr	r3, [pc, #332]	; (80095a4 <RCCEx_PLL2_Config+0x15c>)
 8009458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800945a:	f003 0303 	and.w	r3, r3, #3
 800945e:	2b03      	cmp	r3, #3
 8009460:	d101      	bne.n	8009466 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e099      	b.n	800959a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009466:	4b4f      	ldr	r3, [pc, #316]	; (80095a4 <RCCEx_PLL2_Config+0x15c>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a4e      	ldr	r2, [pc, #312]	; (80095a4 <RCCEx_PLL2_Config+0x15c>)
 800946c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009470:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009472:	f7f8 fbb3 	bl	8001bdc <HAL_GetTick>
 8009476:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009478:	e008      	b.n	800948c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800947a:	f7f8 fbaf 	bl	8001bdc <HAL_GetTick>
 800947e:	4602      	mov	r2, r0
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	1ad3      	subs	r3, r2, r3
 8009484:	2b02      	cmp	r3, #2
 8009486:	d901      	bls.n	800948c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009488:	2303      	movs	r3, #3
 800948a:	e086      	b.n	800959a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800948c:	4b45      	ldr	r3, [pc, #276]	; (80095a4 <RCCEx_PLL2_Config+0x15c>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009494:	2b00      	cmp	r3, #0
 8009496:	d1f0      	bne.n	800947a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009498:	4b42      	ldr	r3, [pc, #264]	; (80095a4 <RCCEx_PLL2_Config+0x15c>)
 800949a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800949c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	031b      	lsls	r3, r3, #12
 80094a6:	493f      	ldr	r1, [pc, #252]	; (80095a4 <RCCEx_PLL2_Config+0x15c>)
 80094a8:	4313      	orrs	r3, r2
 80094aa:	628b      	str	r3, [r1, #40]	; 0x28
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	3b01      	subs	r3, #1
 80094b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	689b      	ldr	r3, [r3, #8]
 80094ba:	3b01      	subs	r3, #1
 80094bc:	025b      	lsls	r3, r3, #9
 80094be:	b29b      	uxth	r3, r3
 80094c0:	431a      	orrs	r2, r3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	3b01      	subs	r3, #1
 80094c8:	041b      	lsls	r3, r3, #16
 80094ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80094ce:	431a      	orrs	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	3b01      	subs	r3, #1
 80094d6:	061b      	lsls	r3, r3, #24
 80094d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80094dc:	4931      	ldr	r1, [pc, #196]	; (80095a4 <RCCEx_PLL2_Config+0x15c>)
 80094de:	4313      	orrs	r3, r2
 80094e0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80094e2:	4b30      	ldr	r3, [pc, #192]	; (80095a4 <RCCEx_PLL2_Config+0x15c>)
 80094e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	695b      	ldr	r3, [r3, #20]
 80094ee:	492d      	ldr	r1, [pc, #180]	; (80095a4 <RCCEx_PLL2_Config+0x15c>)
 80094f0:	4313      	orrs	r3, r2
 80094f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80094f4:	4b2b      	ldr	r3, [pc, #172]	; (80095a4 <RCCEx_PLL2_Config+0x15c>)
 80094f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f8:	f023 0220 	bic.w	r2, r3, #32
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	4928      	ldr	r1, [pc, #160]	; (80095a4 <RCCEx_PLL2_Config+0x15c>)
 8009502:	4313      	orrs	r3, r2
 8009504:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009506:	4b27      	ldr	r3, [pc, #156]	; (80095a4 <RCCEx_PLL2_Config+0x15c>)
 8009508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950a:	4a26      	ldr	r2, [pc, #152]	; (80095a4 <RCCEx_PLL2_Config+0x15c>)
 800950c:	f023 0310 	bic.w	r3, r3, #16
 8009510:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009512:	4b24      	ldr	r3, [pc, #144]	; (80095a4 <RCCEx_PLL2_Config+0x15c>)
 8009514:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009516:	4b24      	ldr	r3, [pc, #144]	; (80095a8 <RCCEx_PLL2_Config+0x160>)
 8009518:	4013      	ands	r3, r2
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	69d2      	ldr	r2, [r2, #28]
 800951e:	00d2      	lsls	r2, r2, #3
 8009520:	4920      	ldr	r1, [pc, #128]	; (80095a4 <RCCEx_PLL2_Config+0x15c>)
 8009522:	4313      	orrs	r3, r2
 8009524:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009526:	4b1f      	ldr	r3, [pc, #124]	; (80095a4 <RCCEx_PLL2_Config+0x15c>)
 8009528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952a:	4a1e      	ldr	r2, [pc, #120]	; (80095a4 <RCCEx_PLL2_Config+0x15c>)
 800952c:	f043 0310 	orr.w	r3, r3, #16
 8009530:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d106      	bne.n	8009546 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009538:	4b1a      	ldr	r3, [pc, #104]	; (80095a4 <RCCEx_PLL2_Config+0x15c>)
 800953a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953c:	4a19      	ldr	r2, [pc, #100]	; (80095a4 <RCCEx_PLL2_Config+0x15c>)
 800953e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009542:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009544:	e00f      	b.n	8009566 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	2b01      	cmp	r3, #1
 800954a:	d106      	bne.n	800955a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800954c:	4b15      	ldr	r3, [pc, #84]	; (80095a4 <RCCEx_PLL2_Config+0x15c>)
 800954e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009550:	4a14      	ldr	r2, [pc, #80]	; (80095a4 <RCCEx_PLL2_Config+0x15c>)
 8009552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009556:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009558:	e005      	b.n	8009566 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800955a:	4b12      	ldr	r3, [pc, #72]	; (80095a4 <RCCEx_PLL2_Config+0x15c>)
 800955c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800955e:	4a11      	ldr	r2, [pc, #68]	; (80095a4 <RCCEx_PLL2_Config+0x15c>)
 8009560:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009564:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009566:	4b0f      	ldr	r3, [pc, #60]	; (80095a4 <RCCEx_PLL2_Config+0x15c>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a0e      	ldr	r2, [pc, #56]	; (80095a4 <RCCEx_PLL2_Config+0x15c>)
 800956c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009570:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009572:	f7f8 fb33 	bl	8001bdc <HAL_GetTick>
 8009576:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009578:	e008      	b.n	800958c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800957a:	f7f8 fb2f 	bl	8001bdc <HAL_GetTick>
 800957e:	4602      	mov	r2, r0
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	1ad3      	subs	r3, r2, r3
 8009584:	2b02      	cmp	r3, #2
 8009586:	d901      	bls.n	800958c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009588:	2303      	movs	r3, #3
 800958a:	e006      	b.n	800959a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800958c:	4b05      	ldr	r3, [pc, #20]	; (80095a4 <RCCEx_PLL2_Config+0x15c>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009594:	2b00      	cmp	r3, #0
 8009596:	d0f0      	beq.n	800957a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009598:	7bfb      	ldrb	r3, [r7, #15]
}
 800959a:	4618      	mov	r0, r3
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	58024400 	.word	0x58024400
 80095a8:	ffff0007 	.word	0xffff0007

080095ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80095b6:	2300      	movs	r3, #0
 80095b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80095ba:	4b53      	ldr	r3, [pc, #332]	; (8009708 <RCCEx_PLL3_Config+0x15c>)
 80095bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095be:	f003 0303 	and.w	r3, r3, #3
 80095c2:	2b03      	cmp	r3, #3
 80095c4:	d101      	bne.n	80095ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80095c6:	2301      	movs	r3, #1
 80095c8:	e099      	b.n	80096fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80095ca:	4b4f      	ldr	r3, [pc, #316]	; (8009708 <RCCEx_PLL3_Config+0x15c>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a4e      	ldr	r2, [pc, #312]	; (8009708 <RCCEx_PLL3_Config+0x15c>)
 80095d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095d6:	f7f8 fb01 	bl	8001bdc <HAL_GetTick>
 80095da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80095dc:	e008      	b.n	80095f0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80095de:	f7f8 fafd 	bl	8001bdc <HAL_GetTick>
 80095e2:	4602      	mov	r2, r0
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	2b02      	cmp	r3, #2
 80095ea:	d901      	bls.n	80095f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80095ec:	2303      	movs	r3, #3
 80095ee:	e086      	b.n	80096fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80095f0:	4b45      	ldr	r3, [pc, #276]	; (8009708 <RCCEx_PLL3_Config+0x15c>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1f0      	bne.n	80095de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80095fc:	4b42      	ldr	r3, [pc, #264]	; (8009708 <RCCEx_PLL3_Config+0x15c>)
 80095fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009600:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	051b      	lsls	r3, r3, #20
 800960a:	493f      	ldr	r1, [pc, #252]	; (8009708 <RCCEx_PLL3_Config+0x15c>)
 800960c:	4313      	orrs	r3, r2
 800960e:	628b      	str	r3, [r1, #40]	; 0x28
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	3b01      	subs	r3, #1
 8009616:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	3b01      	subs	r3, #1
 8009620:	025b      	lsls	r3, r3, #9
 8009622:	b29b      	uxth	r3, r3
 8009624:	431a      	orrs	r2, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	3b01      	subs	r3, #1
 800962c:	041b      	lsls	r3, r3, #16
 800962e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009632:	431a      	orrs	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	3b01      	subs	r3, #1
 800963a:	061b      	lsls	r3, r3, #24
 800963c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009640:	4931      	ldr	r1, [pc, #196]	; (8009708 <RCCEx_PLL3_Config+0x15c>)
 8009642:	4313      	orrs	r3, r2
 8009644:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009646:	4b30      	ldr	r3, [pc, #192]	; (8009708 <RCCEx_PLL3_Config+0x15c>)
 8009648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	695b      	ldr	r3, [r3, #20]
 8009652:	492d      	ldr	r1, [pc, #180]	; (8009708 <RCCEx_PLL3_Config+0x15c>)
 8009654:	4313      	orrs	r3, r2
 8009656:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009658:	4b2b      	ldr	r3, [pc, #172]	; (8009708 <RCCEx_PLL3_Config+0x15c>)
 800965a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800965c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	699b      	ldr	r3, [r3, #24]
 8009664:	4928      	ldr	r1, [pc, #160]	; (8009708 <RCCEx_PLL3_Config+0x15c>)
 8009666:	4313      	orrs	r3, r2
 8009668:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800966a:	4b27      	ldr	r3, [pc, #156]	; (8009708 <RCCEx_PLL3_Config+0x15c>)
 800966c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800966e:	4a26      	ldr	r2, [pc, #152]	; (8009708 <RCCEx_PLL3_Config+0x15c>)
 8009670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009674:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009676:	4b24      	ldr	r3, [pc, #144]	; (8009708 <RCCEx_PLL3_Config+0x15c>)
 8009678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800967a:	4b24      	ldr	r3, [pc, #144]	; (800970c <RCCEx_PLL3_Config+0x160>)
 800967c:	4013      	ands	r3, r2
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	69d2      	ldr	r2, [r2, #28]
 8009682:	00d2      	lsls	r2, r2, #3
 8009684:	4920      	ldr	r1, [pc, #128]	; (8009708 <RCCEx_PLL3_Config+0x15c>)
 8009686:	4313      	orrs	r3, r2
 8009688:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800968a:	4b1f      	ldr	r3, [pc, #124]	; (8009708 <RCCEx_PLL3_Config+0x15c>)
 800968c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800968e:	4a1e      	ldr	r2, [pc, #120]	; (8009708 <RCCEx_PLL3_Config+0x15c>)
 8009690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009694:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d106      	bne.n	80096aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800969c:	4b1a      	ldr	r3, [pc, #104]	; (8009708 <RCCEx_PLL3_Config+0x15c>)
 800969e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a0:	4a19      	ldr	r2, [pc, #100]	; (8009708 <RCCEx_PLL3_Config+0x15c>)
 80096a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80096a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80096a8:	e00f      	b.n	80096ca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d106      	bne.n	80096be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80096b0:	4b15      	ldr	r3, [pc, #84]	; (8009708 <RCCEx_PLL3_Config+0x15c>)
 80096b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b4:	4a14      	ldr	r2, [pc, #80]	; (8009708 <RCCEx_PLL3_Config+0x15c>)
 80096b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80096ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80096bc:	e005      	b.n	80096ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80096be:	4b12      	ldr	r3, [pc, #72]	; (8009708 <RCCEx_PLL3_Config+0x15c>)
 80096c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c2:	4a11      	ldr	r2, [pc, #68]	; (8009708 <RCCEx_PLL3_Config+0x15c>)
 80096c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80096c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80096ca:	4b0f      	ldr	r3, [pc, #60]	; (8009708 <RCCEx_PLL3_Config+0x15c>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a0e      	ldr	r2, [pc, #56]	; (8009708 <RCCEx_PLL3_Config+0x15c>)
 80096d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096d6:	f7f8 fa81 	bl	8001bdc <HAL_GetTick>
 80096da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80096dc:	e008      	b.n	80096f0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80096de:	f7f8 fa7d 	bl	8001bdc <HAL_GetTick>
 80096e2:	4602      	mov	r2, r0
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	1ad3      	subs	r3, r2, r3
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d901      	bls.n	80096f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80096ec:	2303      	movs	r3, #3
 80096ee:	e006      	b.n	80096fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80096f0:	4b05      	ldr	r3, [pc, #20]	; (8009708 <RCCEx_PLL3_Config+0x15c>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d0f0      	beq.n	80096de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80096fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	58024400 	.word	0x58024400
 800970c:	ffff0007 	.word	0xffff0007

08009710 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b08a      	sub	sp, #40	; 0x28
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d101      	bne.n	8009722 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	e075      	b.n	800980e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009728:	b2db      	uxtb	r3, r3
 800972a:	2b00      	cmp	r3, #0
 800972c:	d105      	bne.n	800973a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7f7 ff5b 	bl	80015f0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2204      	movs	r2, #4
 800973e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f868 	bl	8009818 <HAL_SD_InitCard>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d001      	beq.n	8009752 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	e05d      	b.n	800980e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009752:	f107 0308 	add.w	r3, r7, #8
 8009756:	4619      	mov	r1, r3
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 fdb5 	bl	800a2c8 <HAL_SD_GetCardStatus>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d001      	beq.n	8009768 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	e052      	b.n	800980e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009768:	7e3b      	ldrb	r3, [r7, #24]
 800976a:	b2db      	uxtb	r3, r3
 800976c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800976e:	7e7b      	ldrb	r3, [r7, #25]
 8009770:	b2db      	uxtb	r3, r3
 8009772:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009778:	2b01      	cmp	r3, #1
 800977a:	d10a      	bne.n	8009792 <HAL_SD_Init+0x82>
 800977c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977e:	2b00      	cmp	r3, #0
 8009780:	d102      	bne.n	8009788 <HAL_SD_Init+0x78>
 8009782:	6a3b      	ldr	r3, [r7, #32]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d004      	beq.n	8009792 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800978e:	659a      	str	r2, [r3, #88]	; 0x58
 8009790:	e00b      	b.n	80097aa <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009796:	2b01      	cmp	r3, #1
 8009798:	d104      	bne.n	80097a4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80097a0:	659a      	str	r2, [r3, #88]	; 0x58
 80097a2:	e002      	b.n	80097aa <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	4619      	mov	r1, r3
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 fe73 	bl	800a49c <HAL_SD_ConfigWideBusOperation>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d001      	beq.n	80097c0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	e026      	b.n	800980e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80097c0:	f7f8 fa0c 	bl	8001bdc <HAL_GetTick>
 80097c4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80097c6:	e011      	b.n	80097ec <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80097c8:	f7f8 fa08 	bl	8001bdc <HAL_GetTick>
 80097cc:	4602      	mov	r2, r0
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097d6:	d109      	bne.n	80097ec <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80097de:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80097e8:	2303      	movs	r3, #3
 80097ea:	e010      	b.n	800980e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 ff67 	bl	800a6c0 <HAL_SD_GetCardState>
 80097f2:	4603      	mov	r3, r0
 80097f4:	2b04      	cmp	r3, #4
 80097f6:	d1e7      	bne.n	80097c8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800980c:	2300      	movs	r3, #0
}
 800980e:	4618      	mov	r0, r3
 8009810:	3728      	adds	r7, #40	; 0x28
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
	...

08009818 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009818:	b590      	push	{r4, r7, lr}
 800981a:	b08d      	sub	sp, #52	; 0x34
 800981c:	af02      	add	r7, sp, #8
 800981e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009820:	2300      	movs	r3, #0
 8009822:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009824:	2300      	movs	r3, #0
 8009826:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009828:	2300      	movs	r3, #0
 800982a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800982c:	2300      	movs	r3, #0
 800982e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009830:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009834:	f04f 0100 	mov.w	r1, #0
 8009838:	f7fe fc7c 	bl	8008134 <HAL_RCCEx_GetPeriphCLKFreq>
 800983c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800983e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009840:	2b00      	cmp	r3, #0
 8009842:	d109      	bne.n	8009858 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009852:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009854:	2301      	movs	r3, #1
 8009856:	e070      	b.n	800993a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985a:	0a1b      	lsrs	r3, r3, #8
 800985c:	4a39      	ldr	r2, [pc, #228]	; (8009944 <HAL_SD_InitCard+0x12c>)
 800985e:	fba2 2303 	umull	r2, r3, r2, r3
 8009862:	091b      	lsrs	r3, r3, #4
 8009864:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681c      	ldr	r4, [r3, #0]
 800986a:	466a      	mov	r2, sp
 800986c:	f107 0318 	add.w	r3, r7, #24
 8009870:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009874:	e882 0003 	stmia.w	r2, {r0, r1}
 8009878:	f107 030c 	add.w	r3, r7, #12
 800987c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800987e:	4620      	mov	r0, r4
 8009880:	f001 fc94 	bl	800b1ac <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4618      	mov	r0, r3
 800988a:	f001 fcd7 	bl	800b23c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d005      	beq.n	80098a0 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	005b      	lsls	r3, r3, #1
 8009898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800989a:	fbb2 f3f3 	udiv	r3, r2, r3
 800989e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 80098a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d007      	beq.n	80098b6 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80098a6:	4a28      	ldr	r2, [pc, #160]	; (8009948 <HAL_SD_InitCard+0x130>)
 80098a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80098ae:	3301      	adds	r3, #1
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7f8 f99f 	bl	8001bf4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 fff0 	bl	800a89c <SD_PowerON>
 80098bc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80098be:	6a3b      	ldr	r3, [r7, #32]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00b      	beq.n	80098dc <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098d0:	6a3b      	ldr	r3, [r7, #32]
 80098d2:	431a      	orrs	r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80098d8:	2301      	movs	r3, #1
 80098da:	e02e      	b.n	800993a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 ff0f 	bl	800a700 <SD_InitCard>
 80098e2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80098e4:	6a3b      	ldr	r3, [r7, #32]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00b      	beq.n	8009902 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2201      	movs	r2, #1
 80098ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098f6:	6a3b      	ldr	r3, [r7, #32]
 80098f8:	431a      	orrs	r2, r3
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80098fe:	2301      	movs	r3, #1
 8009900:	e01b      	b.n	800993a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f44f 7100 	mov.w	r1, #512	; 0x200
 800990a:	4618      	mov	r0, r3
 800990c:	f001 fd2c 	bl	800b368 <SDMMC_CmdBlockLength>
 8009910:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009912:	6a3b      	ldr	r3, [r7, #32]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00f      	beq.n	8009938 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a0b      	ldr	r2, [pc, #44]	; (800994c <HAL_SD_InitCard+0x134>)
 800991e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009924:	6a3b      	ldr	r3, [r7, #32]
 8009926:	431a      	orrs	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2201      	movs	r2, #1
 8009930:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009934:	2301      	movs	r3, #1
 8009936:	e000      	b.n	800993a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	372c      	adds	r7, #44	; 0x2c
 800993e:	46bd      	mov	sp, r7
 8009940:	bd90      	pop	{r4, r7, pc}
 8009942:	bf00      	nop
 8009944:	014f8b59 	.word	0x014f8b59
 8009948:	00012110 	.word	0x00012110
 800994c:	1fe00fff 	.word	0x1fe00fff

08009950 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b092      	sub	sp, #72	; 0x48
 8009954:	af00      	add	r7, sp, #0
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	60b9      	str	r1, [r7, #8]
 800995a:	607a      	str	r2, [r7, #4]
 800995c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800995e:	f7f8 f93d 	bl	8001bdc <HAL_GetTick>
 8009962:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d107      	bne.n	8009982 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009976:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	e167      	b.n	8009c52 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009988:	b2db      	uxtb	r3, r3
 800998a:	2b01      	cmp	r3, #1
 800998c:	f040 815a 	bne.w	8009c44 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2200      	movs	r2, #0
 8009994:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009996:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	441a      	add	r2, r3
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d907      	bls.n	80099b4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099a8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	e14e      	b.n	8009c52 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2203      	movs	r2, #3
 80099b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2200      	movs	r2, #0
 80099c2:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d002      	beq.n	80099d2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80099cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ce:	025b      	lsls	r3, r3, #9
 80099d0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80099d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099d6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	025b      	lsls	r3, r3, #9
 80099dc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80099de:	2390      	movs	r3, #144	; 0x90
 80099e0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80099e2:	2302      	movs	r3, #2
 80099e4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80099e6:	2300      	movs	r3, #0
 80099e8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80099ea:	2300      	movs	r3, #0
 80099ec:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f107 0214 	add.w	r2, r7, #20
 80099f6:	4611      	mov	r1, r2
 80099f8:	4618      	mov	r0, r3
 80099fa:	f001 fc89 	bl	800b310 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68da      	ldr	r2, [r3, #12]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a0c:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d90a      	bls.n	8009a2a <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2202      	movs	r2, #2
 8009a18:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a20:	4618      	mov	r0, r3
 8009a22:	f001 fce7 	bl	800b3f4 <SDMMC_CmdReadMultiBlock>
 8009a26:	6478      	str	r0, [r7, #68]	; 0x44
 8009a28:	e009      	b.n	8009a3e <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a36:	4618      	mov	r0, r3
 8009a38:	f001 fcb9 	bl	800b3ae <SDMMC_CmdReadSingleBlock>
 8009a3c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d012      	beq.n	8009a6a <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a84      	ldr	r2, [pc, #528]	; (8009c5c <HAL_SD_ReadBlocks+0x30c>)
 8009a4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a52:	431a      	orrs	r2, r3
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2200      	movs	r2, #0
 8009a64:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	e0f3      	b.n	8009c52 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8009a6a:	69bb      	ldr	r3, [r7, #24]
 8009a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009a6e:	e058      	b.n	8009b22 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d033      	beq.n	8009ae6 <HAL_SD_ReadBlocks+0x196>
 8009a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a80:	2b1f      	cmp	r3, #31
 8009a82:	d930      	bls.n	8009ae6 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8009a84:	2300      	movs	r3, #0
 8009a86:	643b      	str	r3, [r7, #64]	; 0x40
 8009a88:	e027      	b.n	8009ada <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f001 fbb6 	bl	800b200 <SDMMC_ReadFIFO>
 8009a94:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a98:	b2da      	uxtb	r2, r3
 8009a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a9c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa6:	0a1b      	lsrs	r3, r3, #8
 8009aa8:	b2da      	uxtb	r2, r3
 8009aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aac:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab6:	0c1b      	lsrs	r3, r3, #16
 8009ab8:	b2da      	uxtb	r2, r3
 8009aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009abc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac6:	0e1b      	lsrs	r3, r3, #24
 8009ac8:	b2da      	uxtb	r2, r3
 8009aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009acc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8009ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	643b      	str	r3, [r7, #64]	; 0x40
 8009ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009adc:	2b07      	cmp	r3, #7
 8009ade:	d9d4      	bls.n	8009a8a <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8009ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ae2:	3b20      	subs	r3, #32
 8009ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8009ae6:	f7f8 f879 	bl	8001bdc <HAL_GetTick>
 8009aea:	4602      	mov	r2, r0
 8009aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d902      	bls.n	8009afc <HAL_SD_ReadBlocks+0x1ac>
 8009af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d112      	bne.n	8009b22 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a56      	ldr	r2, [pc, #344]	; (8009c5c <HAL_SD_ReadBlocks+0x30c>)
 8009b02:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8009b1e:	2303      	movs	r3, #3
 8009b20:	e097      	b.n	8009c52 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b28:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d09f      	beq.n	8009a70 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68da      	ldr	r2, [r3, #12]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b3e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d022      	beq.n	8009b94 <HAL_SD_ReadBlocks+0x244>
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d91f      	bls.n	8009b94 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b58:	2b03      	cmp	r3, #3
 8009b5a:	d01b      	beq.n	8009b94 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4618      	mov	r0, r3
 8009b62:	f001 fcb1 	bl	800b4c8 <SDMMC_CmdStopTransfer>
 8009b66:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8009b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d012      	beq.n	8009b94 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a3a      	ldr	r2, [pc, #232]	; (8009c5c <HAL_SD_ReadBlocks+0x30c>)
 8009b74:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b7c:	431a      	orrs	r2, r3
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2201      	movs	r2, #1
 8009b86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8009b90:	2301      	movs	r3, #1
 8009b92:	e05e      	b.n	8009c52 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b9a:	f003 0308 	and.w	r3, r3, #8
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d012      	beq.n	8009bc8 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a2d      	ldr	r2, [pc, #180]	; (8009c5c <HAL_SD_ReadBlocks+0x30c>)
 8009ba8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bae:	f043 0208 	orr.w	r2, r3, #8
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2201      	movs	r2, #1
 8009bba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	e044      	b.n	8009c52 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bce:	f003 0302 	and.w	r3, r3, #2
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d012      	beq.n	8009bfc <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a20      	ldr	r2, [pc, #128]	; (8009c5c <HAL_SD_ReadBlocks+0x30c>)
 8009bdc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009be2:	f043 0202 	orr.w	r2, r3, #2
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2201      	movs	r2, #1
 8009bee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	e02a      	b.n	8009c52 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c02:	f003 0320 	and.w	r3, r3, #32
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d012      	beq.n	8009c30 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a13      	ldr	r2, [pc, #76]	; (8009c5c <HAL_SD_ReadBlocks+0x30c>)
 8009c10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c16:	f043 0220 	orr.w	r2, r3, #32
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2201      	movs	r2, #1
 8009c22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e010      	b.n	8009c52 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a0a      	ldr	r2, [pc, #40]	; (8009c60 <HAL_SD_ReadBlocks+0x310>)
 8009c36:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8009c40:	2300      	movs	r3, #0
 8009c42:	e006      	b.n	8009c52 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c48:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
  }
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3748      	adds	r7, #72	; 0x48
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	1fe00fff 	.word	0x1fe00fff
 8009c60:	18000f3a 	.word	0x18000f3a

08009c64 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b092      	sub	sp, #72	; 0x48
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	607a      	str	r2, [r7, #4]
 8009c70:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009c72:	f7f7 ffb3 	bl	8001bdc <HAL_GetTick>
 8009c76:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint8_t *tempbuff = pData;
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d107      	bne.n	8009c96 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c8a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	e16b      	b.n	8009f6e <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	f040 815e 	bne.w	8009f60 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009caa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	441a      	add	r2, r3
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d907      	bls.n	8009cc8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cbc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	e152      	b.n	8009f6e <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2203      	movs	r2, #3
 8009ccc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d002      	beq.n	8009ce6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce2:	025b      	lsls	r3, r3, #9
 8009ce4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009ce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cea:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	025b      	lsls	r3, r3, #9
 8009cf0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009cf2:	2390      	movs	r3, #144	; 0x90
 8009cf4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f107 0218 	add.w	r2, r7, #24
 8009d0a:	4611      	mov	r1, r2
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f001 faff 	bl	800b310 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	68da      	ldr	r2, [r3, #12]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d20:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d90a      	bls.n	8009d3e <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2220      	movs	r2, #32
 8009d2c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d34:	4618      	mov	r0, r3
 8009d36:	f001 fba3 	bl	800b480 <SDMMC_CmdWriteMultiBlock>
 8009d3a:	6478      	str	r0, [r7, #68]	; 0x44
 8009d3c:	e009      	b.n	8009d52 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2210      	movs	r2, #16
 8009d42:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f001 fb75 	bl	800b43a <SDMMC_CmdWriteSingleBlock>
 8009d50:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d012      	beq.n	8009d7e <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a86      	ldr	r2, [pc, #536]	; (8009f78 <HAL_SD_WriteBlocks+0x314>)
 8009d5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d66:	431a      	orrs	r2, r3
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2200      	movs	r2, #0
 8009d78:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e0f7      	b.n	8009f6e <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8009d82:	e05c      	b.n	8009e3e <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d037      	beq.n	8009e02 <HAL_SD_WriteBlocks+0x19e>
 8009d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d94:	2b1f      	cmp	r3, #31
 8009d96:	d934      	bls.n	8009e02 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8009d98:	2300      	movs	r3, #0
 8009d9a:	643b      	str	r3, [r7, #64]	; 0x40
 8009d9c:	e02b      	b.n	8009df6 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8009d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009da6:	3301      	adds	r3, #1
 8009da8:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8009daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	021a      	lsls	r2, r3, #8
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	4313      	orrs	r3, r2
 8009db4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009db8:	3301      	adds	r3, #1
 8009dba:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	041a      	lsls	r2, r3, #16
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dca:	3301      	adds	r3, #1
 8009dcc:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	061a      	lsls	r2, r3, #24
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ddc:	3301      	adds	r3, #1
 8009dde:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f107 0214 	add.w	r2, r7, #20
 8009de8:	4611      	mov	r1, r2
 8009dea:	4618      	mov	r0, r3
 8009dec:	f001 fa15 	bl	800b21a <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8009df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009df2:	3301      	adds	r3, #1
 8009df4:	643b      	str	r3, [r7, #64]	; 0x40
 8009df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009df8:	2b07      	cmp	r3, #7
 8009dfa:	d9d0      	bls.n	8009d9e <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8009dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dfe:	3b20      	subs	r3, #32
 8009e00:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8009e02:	f7f7 feeb 	bl	8001bdc <HAL_GetTick>
 8009e06:	4602      	mov	r2, r0
 8009e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0a:	1ad3      	subs	r3, r2, r3
 8009e0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d902      	bls.n	8009e18 <HAL_SD_WriteBlocks+0x1b4>
 8009e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d112      	bne.n	8009e3e <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a56      	ldr	r2, [pc, #344]	; (8009f78 <HAL_SD_WriteBlocks+0x314>)
 8009e1e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e26:	431a      	orrs	r2, r3
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2200      	movs	r2, #0
 8009e38:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8009e3a:	2303      	movs	r3, #3
 8009e3c:	e097      	b.n	8009f6e <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e44:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d09b      	beq.n	8009d84 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	68da      	ldr	r2, [r3, #12]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e5a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d022      	beq.n	8009eb0 <HAL_SD_WriteBlocks+0x24c>
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d91f      	bls.n	8009eb0 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e74:	2b03      	cmp	r3, #3
 8009e76:	d01b      	beq.n	8009eb0 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f001 fb23 	bl	800b4c8 <SDMMC_CmdStopTransfer>
 8009e82:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8009e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d012      	beq.n	8009eb0 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a3a      	ldr	r2, [pc, #232]	; (8009f78 <HAL_SD_WriteBlocks+0x314>)
 8009e90:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e98:	431a      	orrs	r2, r3
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	e05e      	b.n	8009f6e <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eb6:	f003 0308 	and.w	r3, r3, #8
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d012      	beq.n	8009ee4 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a2d      	ldr	r2, [pc, #180]	; (8009f78 <HAL_SD_WriteBlocks+0x314>)
 8009ec4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eca:	f043 0208 	orr.w	r2, r3, #8
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2200      	movs	r2, #0
 8009ede:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	e044      	b.n	8009f6e <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eea:	f003 0302 	and.w	r3, r3, #2
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d012      	beq.n	8009f18 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a20      	ldr	r2, [pc, #128]	; (8009f78 <HAL_SD_WriteBlocks+0x314>)
 8009ef8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009efe:	f043 0202 	orr.w	r2, r3, #2
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2200      	movs	r2, #0
 8009f12:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	e02a      	b.n	8009f6e <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f1e:	f003 0310 	and.w	r3, r3, #16
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d012      	beq.n	8009f4c <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a13      	ldr	r2, [pc, #76]	; (8009f78 <HAL_SD_WriteBlocks+0x314>)
 8009f2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f32:	f043 0210 	orr.w	r2, r3, #16
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2200      	movs	r2, #0
 8009f46:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e010      	b.n	8009f6e <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a0a      	ldr	r2, [pc, #40]	; (8009f7c <HAL_SD_WriteBlocks+0x318>)
 8009f52:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2201      	movs	r2, #1
 8009f58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	e006      	b.n	8009f6e <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f64:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009f6c:	2301      	movs	r3, #1
  }
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3748      	adds	r7, #72	; 0x48
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	1fe00fff 	.word	0x1fe00fff
 8009f7c:	18000f3a 	.word	0x18000f3a

08009f80 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f8e:	0f9b      	lsrs	r3, r3, #30
 8009f90:	b2da      	uxtb	r2, r3
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f9a:	0e9b      	lsrs	r3, r3, #26
 8009f9c:	b2db      	uxtb	r3, r3
 8009f9e:	f003 030f 	and.w	r3, r3, #15
 8009fa2:	b2da      	uxtb	r2, r3
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fac:	0e1b      	lsrs	r3, r3, #24
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	f003 0303 	and.w	r3, r3, #3
 8009fb4:	b2da      	uxtb	r2, r3
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fbe:	0c1b      	lsrs	r3, r3, #16
 8009fc0:	b2da      	uxtb	r2, r3
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fca:	0a1b      	lsrs	r3, r3, #8
 8009fcc:	b2da      	uxtb	r2, r3
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fd6:	b2da      	uxtb	r2, r3
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fe0:	0d1b      	lsrs	r3, r3, #20
 8009fe2:	b29a      	uxth	r2, r3
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fec:	0c1b      	lsrs	r3, r3, #16
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	f003 030f 	and.w	r3, r3, #15
 8009ff4:	b2da      	uxtb	r2, r3
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ffe:	0bdb      	lsrs	r3, r3, #15
 800a000:	b2db      	uxtb	r3, r3
 800a002:	f003 0301 	and.w	r3, r3, #1
 800a006:	b2da      	uxtb	r2, r3
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a010:	0b9b      	lsrs	r3, r3, #14
 800a012:	b2db      	uxtb	r3, r3
 800a014:	f003 0301 	and.w	r3, r3, #1
 800a018:	b2da      	uxtb	r2, r3
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a022:	0b5b      	lsrs	r3, r3, #13
 800a024:	b2db      	uxtb	r3, r3
 800a026:	f003 0301 	and.w	r3, r3, #1
 800a02a:	b2da      	uxtb	r2, r3
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a034:	0b1b      	lsrs	r3, r3, #12
 800a036:	b2db      	uxtb	r3, r3
 800a038:	f003 0301 	and.w	r3, r3, #1
 800a03c:	b2da      	uxtb	r2, r3
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	2200      	movs	r2, #0
 800a046:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d163      	bne.n	800a118 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a054:	009a      	lsls	r2, r3, #2
 800a056:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a05a:	4013      	ands	r3, r2
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800a060:	0f92      	lsrs	r2, r2, #30
 800a062:	431a      	orrs	r2, r3
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a06c:	0edb      	lsrs	r3, r3, #27
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	f003 0307 	and.w	r3, r3, #7
 800a074:	b2da      	uxtb	r2, r3
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a07e:	0e1b      	lsrs	r3, r3, #24
 800a080:	b2db      	uxtb	r3, r3
 800a082:	f003 0307 	and.w	r3, r3, #7
 800a086:	b2da      	uxtb	r2, r3
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a090:	0d5b      	lsrs	r3, r3, #21
 800a092:	b2db      	uxtb	r3, r3
 800a094:	f003 0307 	and.w	r3, r3, #7
 800a098:	b2da      	uxtb	r2, r3
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0a2:	0c9b      	lsrs	r3, r3, #18
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	f003 0307 	and.w	r3, r3, #7
 800a0aa:	b2da      	uxtb	r2, r3
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0b4:	0bdb      	lsrs	r3, r3, #15
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	f003 0307 	and.w	r3, r3, #7
 800a0bc:	b2da      	uxtb	r2, r3
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	691b      	ldr	r3, [r3, #16]
 800a0c6:	1c5a      	adds	r2, r3, #1
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	7e1b      	ldrb	r3, [r3, #24]
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	f003 0307 	and.w	r3, r3, #7
 800a0d6:	3302      	adds	r3, #2
 800a0d8:	2201      	movs	r2, #1
 800a0da:	fa02 f303 	lsl.w	r3, r2, r3
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a0e2:	fb03 f202 	mul.w	r2, r3, r2
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	7a1b      	ldrb	r3, [r3, #8]
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	f003 030f 	and.w	r3, r3, #15
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	409a      	lsls	r2, r3
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a104:	0a52      	lsrs	r2, r2, #9
 800a106:	fb03 f202 	mul.w	r2, r3, r2
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a114:	655a      	str	r2, [r3, #84]	; 0x54
 800a116:	e031      	b.n	800a17c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d11d      	bne.n	800a15c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a124:	041b      	lsls	r3, r3, #16
 800a126:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a12e:	0c1b      	lsrs	r3, r3, #16
 800a130:	431a      	orrs	r2, r3
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	3301      	adds	r3, #1
 800a13c:	029a      	lsls	r2, r3, #10
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a150:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	655a      	str	r2, [r3, #84]	; 0x54
 800a15a:	e00f      	b.n	800a17c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a58      	ldr	r2, [pc, #352]	; (800a2c4 <HAL_SD_GetCardCSD+0x344>)
 800a162:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a168:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2201      	movs	r2, #1
 800a174:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	e09d      	b.n	800a2b8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a180:	0b9b      	lsrs	r3, r3, #14
 800a182:	b2db      	uxtb	r3, r3
 800a184:	f003 0301 	and.w	r3, r3, #1
 800a188:	b2da      	uxtb	r2, r3
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a192:	09db      	lsrs	r3, r3, #7
 800a194:	b2db      	uxtb	r3, r3
 800a196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a19a:	b2da      	uxtb	r2, r3
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1aa:	b2da      	uxtb	r2, r3
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1b4:	0fdb      	lsrs	r3, r3, #31
 800a1b6:	b2da      	uxtb	r2, r3
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1c0:	0f5b      	lsrs	r3, r3, #29
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	f003 0303 	and.w	r3, r3, #3
 800a1c8:	b2da      	uxtb	r2, r3
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1d2:	0e9b      	lsrs	r3, r3, #26
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	f003 0307 	and.w	r3, r3, #7
 800a1da:	b2da      	uxtb	r2, r3
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1e4:	0d9b      	lsrs	r3, r3, #22
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	f003 030f 	and.w	r3, r3, #15
 800a1ec:	b2da      	uxtb	r2, r3
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1f6:	0d5b      	lsrs	r3, r3, #21
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	f003 0301 	and.w	r3, r3, #1
 800a1fe:	b2da      	uxtb	r2, r3
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	2200      	movs	r2, #0
 800a20a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a212:	0c1b      	lsrs	r3, r3, #16
 800a214:	b2db      	uxtb	r3, r3
 800a216:	f003 0301 	and.w	r3, r3, #1
 800a21a:	b2da      	uxtb	r2, r3
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a226:	0bdb      	lsrs	r3, r3, #15
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	f003 0301 	and.w	r3, r3, #1
 800a22e:	b2da      	uxtb	r2, r3
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a23a:	0b9b      	lsrs	r3, r3, #14
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	f003 0301 	and.w	r3, r3, #1
 800a242:	b2da      	uxtb	r2, r3
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a24e:	0b5b      	lsrs	r3, r3, #13
 800a250:	b2db      	uxtb	r3, r3
 800a252:	f003 0301 	and.w	r3, r3, #1
 800a256:	b2da      	uxtb	r2, r3
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a262:	0b1b      	lsrs	r3, r3, #12
 800a264:	b2db      	uxtb	r3, r3
 800a266:	f003 0301 	and.w	r3, r3, #1
 800a26a:	b2da      	uxtb	r2, r3
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a276:	0a9b      	lsrs	r3, r3, #10
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	f003 0303 	and.w	r3, r3, #3
 800a27e:	b2da      	uxtb	r2, r3
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a28a:	0a1b      	lsrs	r3, r3, #8
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	f003 0303 	and.w	r3, r3, #3
 800a292:	b2da      	uxtb	r2, r3
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a29e:	085b      	lsrs	r3, r3, #1
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2a6:	b2da      	uxtb	r2, r3
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a2b6:	2300      	movs	r3, #0
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr
 800a2c4:	1fe00fff 	.word	0x1fe00fff

0800a2c8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b094      	sub	sp, #80	; 0x50
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	2b03      	cmp	r3, #3
 800a2e2:	d101      	bne.n	800a2e8 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	e0a7      	b.n	800a438 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a2e8:	f107 0308 	add.w	r3, r7, #8
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 fb62 	bl	800a9b8 <SD_SendSDStatus>
 800a2f4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a2f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d011      	beq.n	800a320 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a4f      	ldr	r2, [pc, #316]	; (800a440 <HAL_SD_GetCardStatus+0x178>)
 800a302:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a30a:	431a      	orrs	r2, r3
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a31e:	e070      	b.n	800a402 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	099b      	lsrs	r3, r3, #6
 800a324:	b2db      	uxtb	r3, r3
 800a326:	f003 0303 	and.w	r3, r3, #3
 800a32a:	b2da      	uxtb	r2, r3
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	095b      	lsrs	r3, r3, #5
 800a334:	b2db      	uxtb	r3, r3
 800a336:	f003 0301 	and.w	r3, r3, #1
 800a33a:	b2da      	uxtb	r2, r3
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	0a1b      	lsrs	r3, r3, #8
 800a344:	b29b      	uxth	r3, r3
 800a346:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a34a:	b29a      	uxth	r2, r3
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	0e1b      	lsrs	r3, r3, #24
 800a350:	b29b      	uxth	r3, r3
 800a352:	4313      	orrs	r3, r2
 800a354:	b29a      	uxth	r2, r3
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	061a      	lsls	r2, r3, #24
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	021b      	lsls	r3, r3, #8
 800a362:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a366:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	0a1b      	lsrs	r3, r3, #8
 800a36c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a370:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	0e1b      	lsrs	r3, r3, #24
 800a376:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	b2da      	uxtb	r2, r3
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	0a1b      	lsrs	r3, r3, #8
 800a388:	b2da      	uxtb	r2, r3
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	0d1b      	lsrs	r3, r3, #20
 800a392:	b2db      	uxtb	r3, r3
 800a394:	f003 030f 	and.w	r3, r3, #15
 800a398:	b2da      	uxtb	r2, r3
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	0c1b      	lsrs	r3, r3, #16
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a3a8:	b29a      	uxth	r2, r3
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	0a9b      	lsrs	r3, r3, #10
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3c4:	b2da      	uxtb	r2, r3
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	0a1b      	lsrs	r3, r3, #8
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	f003 0303 	and.w	r3, r3, #3
 800a3d4:	b2da      	uxtb	r2, r3
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	091b      	lsrs	r3, r3, #4
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	f003 030f 	and.w	r3, r3, #15
 800a3e4:	b2da      	uxtb	r2, r3
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	f003 030f 	and.w	r3, r3, #15
 800a3f2:	b2da      	uxtb	r2, r3
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a3f8:	69bb      	ldr	r3, [r7, #24]
 800a3fa:	0e1b      	lsrs	r3, r3, #24
 800a3fc:	b2da      	uxtb	r2, r3
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a40a:	4618      	mov	r0, r3
 800a40c:	f000 ffac 	bl	800b368 <SDMMC_CmdBlockLength>
 800a410:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a414:	2b00      	cmp	r3, #0
 800a416:	d00d      	beq.n	800a434 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a08      	ldr	r2, [pc, #32]	; (800a440 <HAL_SD_GetCardStatus+0x178>)
 800a41e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a424:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2201      	movs	r2, #1
 800a42a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800a434:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3750      	adds	r7, #80	; 0x50
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	1fe00fff 	.word	0x1fe00fff

0800a444 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	370c      	adds	r7, #12
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a49c:	b590      	push	{r4, r7, lr}
 800a49e:	b08d      	sub	sp, #52	; 0x34
 800a4a0:	af02      	add	r7, sp, #8
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2203      	movs	r2, #3
 800a4b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b8:	2b03      	cmp	r3, #3
 800a4ba:	d02e      	beq.n	800a51a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4c2:	d106      	bne.n	800a4d2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	635a      	str	r2, [r3, #52]	; 0x34
 800a4d0:	e029      	b.n	800a526 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4d8:	d10a      	bne.n	800a4f0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 fb64 	bl	800aba8 <SD_WideBus_Enable>
 800a4e0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4e6:	6a3b      	ldr	r3, [r7, #32]
 800a4e8:	431a      	orrs	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	635a      	str	r2, [r3, #52]	; 0x34
 800a4ee:	e01a      	b.n	800a526 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d10a      	bne.n	800a50c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 fba1 	bl	800ac3e <SD_WideBus_Disable>
 800a4fc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a502:	6a3b      	ldr	r3, [r7, #32]
 800a504:	431a      	orrs	r2, r3
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	635a      	str	r2, [r3, #52]	; 0x34
 800a50a:	e00c      	b.n	800a526 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a510:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	635a      	str	r2, [r3, #52]	; 0x34
 800a518:	e005      	b.n	800a526 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a51e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d007      	beq.n	800a53e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4a5f      	ldr	r2, [pc, #380]	; (800a6b0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a534:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a536:	2301      	movs	r3, #1
 800a538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a53c:	e096      	b.n	800a66c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a53e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a542:	f04f 0100 	mov.w	r1, #0
 800a546:	f7fd fdf5 	bl	8008134 <HAL_RCCEx_GetPeriphCLKFreq>
 800a54a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	f000 8083 	beq.w	800a65a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	695a      	ldr	r2, [r3, #20]
 800a56e:	69fb      	ldr	r3, [r7, #28]
 800a570:	4950      	ldr	r1, [pc, #320]	; (800a6b4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a572:	fba1 1303 	umull	r1, r3, r1, r3
 800a576:	0e1b      	lsrs	r3, r3, #24
 800a578:	429a      	cmp	r2, r3
 800a57a:	d303      	bcc.n	800a584 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	695b      	ldr	r3, [r3, #20]
 800a580:	61bb      	str	r3, [r7, #24]
 800a582:	e05a      	b.n	800a63a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a58c:	d103      	bne.n	800a596 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	695b      	ldr	r3, [r3, #20]
 800a592:	61bb      	str	r3, [r7, #24]
 800a594:	e051      	b.n	800a63a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a59a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a59e:	d126      	bne.n	800a5ee <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	695b      	ldr	r3, [r3, #20]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d10e      	bne.n	800a5c6 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	4a43      	ldr	r2, [pc, #268]	; (800a6b8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d906      	bls.n	800a5be <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a5b0:	69fb      	ldr	r3, [r7, #28]
 800a5b2:	4a40      	ldr	r2, [pc, #256]	; (800a6b4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a5b4:	fba2 2303 	umull	r2, r3, r2, r3
 800a5b8:	0e5b      	lsrs	r3, r3, #25
 800a5ba:	61bb      	str	r3, [r7, #24]
 800a5bc:	e03d      	b.n	800a63a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	695b      	ldr	r3, [r3, #20]
 800a5c2:	61bb      	str	r3, [r7, #24]
 800a5c4:	e039      	b.n	800a63a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	695b      	ldr	r3, [r3, #20]
 800a5ca:	005b      	lsls	r3, r3, #1
 800a5cc:	69fa      	ldr	r2, [r7, #28]
 800a5ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5d2:	4a39      	ldr	r2, [pc, #228]	; (800a6b8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d906      	bls.n	800a5e6 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a5d8:	69fb      	ldr	r3, [r7, #28]
 800a5da:	4a36      	ldr	r2, [pc, #216]	; (800a6b4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a5dc:	fba2 2303 	umull	r2, r3, r2, r3
 800a5e0:	0e5b      	lsrs	r3, r3, #25
 800a5e2:	61bb      	str	r3, [r7, #24]
 800a5e4:	e029      	b.n	800a63a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	695b      	ldr	r3, [r3, #20]
 800a5ea:	61bb      	str	r3, [r7, #24]
 800a5ec:	e025      	b.n	800a63a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	695b      	ldr	r3, [r3, #20]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d10e      	bne.n	800a614 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800a5f6:	69fb      	ldr	r3, [r7, #28]
 800a5f8:	4a30      	ldr	r2, [pc, #192]	; (800a6bc <HAL_SD_ConfigWideBusOperation+0x220>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d906      	bls.n	800a60c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	4a2c      	ldr	r2, [pc, #176]	; (800a6b4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a602:	fba2 2303 	umull	r2, r3, r2, r3
 800a606:	0e1b      	lsrs	r3, r3, #24
 800a608:	61bb      	str	r3, [r7, #24]
 800a60a:	e016      	b.n	800a63a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	695b      	ldr	r3, [r3, #20]
 800a610:	61bb      	str	r3, [r7, #24]
 800a612:	e012      	b.n	800a63a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	695b      	ldr	r3, [r3, #20]
 800a618:	005b      	lsls	r3, r3, #1
 800a61a:	69fa      	ldr	r2, [r7, #28]
 800a61c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a620:	4a26      	ldr	r2, [pc, #152]	; (800a6bc <HAL_SD_ConfigWideBusOperation+0x220>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d906      	bls.n	800a634 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	4a22      	ldr	r2, [pc, #136]	; (800a6b4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a62a:	fba2 2303 	umull	r2, r3, r2, r3
 800a62e:	0e1b      	lsrs	r3, r3, #24
 800a630:	61bb      	str	r3, [r7, #24]
 800a632:	e002      	b.n	800a63a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	695b      	ldr	r3, [r3, #20]
 800a638:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681c      	ldr	r4, [r3, #0]
 800a63e:	466a      	mov	r2, sp
 800a640:	f107 0314 	add.w	r3, r7, #20
 800a644:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a648:	e882 0003 	stmia.w	r2, {r0, r1}
 800a64c:	f107 0308 	add.w	r3, r7, #8
 800a650:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a652:	4620      	mov	r0, r4
 800a654:	f000 fdaa 	bl	800b1ac <SDMMC_Init>
 800a658:	e008      	b.n	800a66c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a65e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800a666:	2301      	movs	r3, #1
 800a668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a674:	4618      	mov	r0, r3
 800a676:	f000 fe77 	bl	800b368 <SDMMC_CmdBlockLength>
 800a67a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a67c:	6a3b      	ldr	r3, [r7, #32]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d00c      	beq.n	800a69c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a0a      	ldr	r2, [pc, #40]	; (800a6b0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a688:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a68e:	6a3b      	ldr	r3, [r7, #32]
 800a690:	431a      	orrs	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800a6a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	372c      	adds	r7, #44	; 0x2c
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd90      	pop	{r4, r7, pc}
 800a6b0:	1fe00fff 	.word	0x1fe00fff
 800a6b4:	55e63b89 	.word	0x55e63b89
 800a6b8:	02faf080 	.word	0x02faf080
 800a6bc:	017d7840 	.word	0x017d7840

0800a6c0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b086      	sub	sp, #24
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a6cc:	f107 030c 	add.w	r3, r7, #12
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 fa40 	bl	800ab58 <SD_SendStatus>
 800a6d8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d005      	beq.n	800a6ec <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	431a      	orrs	r2, r3
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	0a5b      	lsrs	r3, r3, #9
 800a6f0:	f003 030f 	and.w	r3, r3, #15
 800a6f4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a6f6:	693b      	ldr	r3, [r7, #16]
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3718      	adds	r7, #24
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b090      	sub	sp, #64	; 0x40
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800a708:	2300      	movs	r3, #0
 800a70a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800a70c:	f7f7 fa66 	bl	8001bdc <HAL_GetTick>
 800a710:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4618      	mov	r0, r3
 800a718:	f000 fda1 	bl	800b25e <SDMMC_GetPowerState>
 800a71c:	4603      	mov	r3, r0
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d102      	bne.n	800a728 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a722:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a726:	e0b5      	b.n	800a894 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a72c:	2b03      	cmp	r3, #3
 800a72e:	d02e      	beq.n	800a78e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4618      	mov	r0, r3
 800a736:	f000 ffec 	bl	800b712 <SDMMC_CmdSendCID>
 800a73a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d001      	beq.n	800a746 <SD_InitCard+0x46>
    {
      return errorstate;
 800a742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a744:	e0a6      	b.n	800a894 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	2100      	movs	r1, #0
 800a74c:	4618      	mov	r0, r3
 800a74e:	f000 fdcc 	bl	800b2ea <SDMMC_GetResponse>
 800a752:	4602      	mov	r2, r0
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2104      	movs	r1, #4
 800a75e:	4618      	mov	r0, r3
 800a760:	f000 fdc3 	bl	800b2ea <SDMMC_GetResponse>
 800a764:	4602      	mov	r2, r0
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	2108      	movs	r1, #8
 800a770:	4618      	mov	r0, r3
 800a772:	f000 fdba 	bl	800b2ea <SDMMC_GetResponse>
 800a776:	4602      	mov	r2, r0
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	210c      	movs	r1, #12
 800a782:	4618      	mov	r0, r3
 800a784:	f000 fdb1 	bl	800b2ea <SDMMC_GetResponse>
 800a788:	4602      	mov	r2, r0
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a792:	2b03      	cmp	r3, #3
 800a794:	d01d      	beq.n	800a7d2 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800a796:	e019      	b.n	800a7cc <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f107 020a 	add.w	r2, r7, #10
 800a7a0:	4611      	mov	r1, r2
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f000 fff4 	bl	800b790 <SDMMC_CmdSetRelAdd>
 800a7a8:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800a7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d001      	beq.n	800a7b4 <SD_InitCard+0xb4>
      {
        return errorstate;
 800a7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b2:	e06f      	b.n	800a894 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800a7b4:	f7f7 fa12 	bl	8001bdc <HAL_GetTick>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7bc:	1ad3      	subs	r3, r2, r3
 800a7be:	f241 3287 	movw	r2, #4999	; 0x1387
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d902      	bls.n	800a7cc <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800a7c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a7ca:	e063      	b.n	800a894 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800a7cc:	897b      	ldrh	r3, [r7, #10]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d0e2      	beq.n	800a798 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d6:	2b03      	cmp	r3, #3
 800a7d8:	d036      	beq.n	800a848 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a7da:	897b      	ldrh	r3, [r7, #10]
 800a7dc:	461a      	mov	r2, r3
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7ea:	041b      	lsls	r3, r3, #16
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	4610      	mov	r0, r2
 800a7f0:	f000 ffae 	bl	800b750 <SDMMC_CmdSendCSD>
 800a7f4:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d001      	beq.n	800a800 <SD_InitCard+0x100>
    {
      return errorstate;
 800a7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fe:	e049      	b.n	800a894 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	2100      	movs	r1, #0
 800a806:	4618      	mov	r0, r3
 800a808:	f000 fd6f 	bl	800b2ea <SDMMC_GetResponse>
 800a80c:	4602      	mov	r2, r0
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	2104      	movs	r1, #4
 800a818:	4618      	mov	r0, r3
 800a81a:	f000 fd66 	bl	800b2ea <SDMMC_GetResponse>
 800a81e:	4602      	mov	r2, r0
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2108      	movs	r1, #8
 800a82a:	4618      	mov	r0, r3
 800a82c:	f000 fd5d 	bl	800b2ea <SDMMC_GetResponse>
 800a830:	4602      	mov	r2, r0
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	210c      	movs	r1, #12
 800a83c:	4618      	mov	r0, r3
 800a83e:	f000 fd54 	bl	800b2ea <SDMMC_GetResponse>
 800a842:	4602      	mov	r2, r0
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2104      	movs	r1, #4
 800a84e:	4618      	mov	r0, r3
 800a850:	f000 fd4b 	bl	800b2ea <SDMMC_GetResponse>
 800a854:	4603      	mov	r3, r0
 800a856:	0d1a      	lsrs	r2, r3, #20
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a85c:	f107 030c 	add.w	r3, r7, #12
 800a860:	4619      	mov	r1, r3
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f7ff fb8c 	bl	8009f80 <HAL_SD_GetCardCSD>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d002      	beq.n	800a874 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a86e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a872:	e00f      	b.n	800a894 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a87c:	041b      	lsls	r3, r3, #16
 800a87e:	4619      	mov	r1, r3
 800a880:	4610      	mov	r0, r2
 800a882:	f000 fe5d 	bl	800b540 <SDMMC_CmdSelDesel>
 800a886:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800a888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d001      	beq.n	800a892 <SD_InitCard+0x192>
  {
    return errorstate;
 800a88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a890:	e000      	b.n	800a894 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	3740      	adds	r7, #64	; 0x40
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b086      	sub	sp, #24
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f000 fe66 	bl	800b586 <SDMMC_CmdGoIdleState>
 800a8ba:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d001      	beq.n	800a8c6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	e072      	b.n	800a9ac <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f000 fe79 	bl	800b5c2 <SDMMC_CmdOperCond>
 800a8d0:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8d8:	d10d      	bne.n	800a8f6 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f000 fe4e 	bl	800b586 <SDMMC_CmdGoIdleState>
 800a8ea:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d004      	beq.n	800a8fc <SD_PowerON+0x60>
    {
      return errorstate;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	e05a      	b.n	800a9ac <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a900:	2b01      	cmp	r3, #1
 800a902:	d137      	bne.n	800a974 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	2100      	movs	r1, #0
 800a90a:	4618      	mov	r0, r3
 800a90c:	f000 fe79 	bl	800b602 <SDMMC_CmdAppCommand>
 800a910:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d02d      	beq.n	800a974 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a918:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a91c:	e046      	b.n	800a9ac <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2100      	movs	r1, #0
 800a924:	4618      	mov	r0, r3
 800a926:	f000 fe6c 	bl	800b602 <SDMMC_CmdAppCommand>
 800a92a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d001      	beq.n	800a936 <SD_PowerON+0x9a>
    {
      return errorstate;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	e03a      	b.n	800a9ac <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	491e      	ldr	r1, [pc, #120]	; (800a9b4 <SD_PowerON+0x118>)
 800a93c:	4618      	mov	r0, r3
 800a93e:	f000 fe83 	bl	800b648 <SDMMC_CmdAppOperCommand>
 800a942:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d002      	beq.n	800a950 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a94a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a94e:	e02d      	b.n	800a9ac <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	2100      	movs	r1, #0
 800a956:	4618      	mov	r0, r3
 800a958:	f000 fcc7 	bl	800b2ea <SDMMC_GetResponse>
 800a95c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	0fdb      	lsrs	r3, r3, #31
 800a962:	2b01      	cmp	r3, #1
 800a964:	d101      	bne.n	800a96a <SD_PowerON+0xce>
 800a966:	2301      	movs	r3, #1
 800a968:	e000      	b.n	800a96c <SD_PowerON+0xd0>
 800a96a:	2300      	movs	r3, #0
 800a96c:	613b      	str	r3, [r7, #16]

    count++;
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	3301      	adds	r3, #1
 800a972:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d802      	bhi.n	800a984 <SD_PowerON+0xe8>
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d0cc      	beq.n	800a91e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d902      	bls.n	800a994 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a98e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a992:	e00b      	b.n	800a9ac <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d002      	beq.n	800a9aa <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800a9aa:	2300      	movs	r3, #0
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3718      	adds	r7, #24
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	c1100000 	.word	0xc1100000

0800a9b8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b08c      	sub	sp, #48	; 0x30
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a9c2:	f7f7 f90b 	bl	8001bdc <HAL_GetTick>
 800a9c6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f000 fc89 	bl	800b2ea <SDMMC_GetResponse>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9e2:	d102      	bne.n	800a9ea <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a9e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a9e8:	e0b0      	b.n	800ab4c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	2140      	movs	r1, #64	; 0x40
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f000 fcb9 	bl	800b368 <SDMMC_CmdBlockLength>
 800a9f6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a9f8:	6a3b      	ldr	r3, [r7, #32]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d005      	beq.n	800aa0a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800aa06:	6a3b      	ldr	r3, [r7, #32]
 800aa08:	e0a0      	b.n	800ab4c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa12:	041b      	lsls	r3, r3, #16
 800aa14:	4619      	mov	r1, r3
 800aa16:	4610      	mov	r0, r2
 800aa18:	f000 fdf3 	bl	800b602 <SDMMC_CmdAppCommand>
 800aa1c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aa1e:	6a3b      	ldr	r3, [r7, #32]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d005      	beq.n	800aa30 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800aa2c:	6a3b      	ldr	r3, [r7, #32]
 800aa2e:	e08d      	b.n	800ab4c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aa30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa34:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800aa36:	2340      	movs	r3, #64	; 0x40
 800aa38:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800aa3a:	2360      	movs	r3, #96	; 0x60
 800aa3c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800aa3e:	2302      	movs	r3, #2
 800aa40:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800aa42:	2300      	movs	r3, #0
 800aa44:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800aa46:	2301      	movs	r3, #1
 800aa48:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f107 0208 	add.w	r2, r7, #8
 800aa52:	4611      	mov	r1, r2
 800aa54:	4618      	mov	r0, r3
 800aa56:	f000 fc5b 	bl	800b310 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f000 fedb 	bl	800b81a <SDMMC_CmdStatusRegister>
 800aa64:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aa66:	6a3b      	ldr	r3, [r7, #32]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d02b      	beq.n	800aac4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800aa74:	6a3b      	ldr	r3, [r7, #32]
 800aa76:	e069      	b.n	800ab4c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d013      	beq.n	800aaae <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800aa86:	2300      	movs	r3, #0
 800aa88:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa8a:	e00d      	b.n	800aaa8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4618      	mov	r0, r3
 800aa92:	f000 fbb5 	bl	800b200 <SDMMC_ReadFIFO>
 800aa96:	4602      	mov	r2, r0
 800aa98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9a:	601a      	str	r2, [r3, #0]
        pData++;
 800aa9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9e:	3304      	adds	r3, #4
 800aaa0:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800aaa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aaa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaaa:	2b07      	cmp	r3, #7
 800aaac:	d9ee      	bls.n	800aa8c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800aaae:	f7f7 f895 	bl	8001bdc <HAL_GetTick>
 800aab2:	4602      	mov	r2, r0
 800aab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab6:	1ad3      	subs	r3, r2, r3
 800aab8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aabc:	d102      	bne.n	800aac4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800aabe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aac2:	e043      	b.n	800ab4c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaca:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d0d2      	beq.n	800aa78 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aad8:	f003 0308 	and.w	r3, r3, #8
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d001      	beq.n	800aae4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800aae0:	2308      	movs	r3, #8
 800aae2:	e033      	b.n	800ab4c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaea:	f003 0302 	and.w	r3, r3, #2
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d001      	beq.n	800aaf6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800aaf2:	2302      	movs	r3, #2
 800aaf4:	e02a      	b.n	800ab4c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aafc:	f003 0320 	and.w	r3, r3, #32
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d017      	beq.n	800ab34 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800ab04:	2320      	movs	r3, #32
 800ab06:	e021      	b.n	800ab4c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f000 fb77 	bl	800b200 <SDMMC_ReadFIFO>
 800ab12:	4602      	mov	r2, r0
 800ab14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab16:	601a      	str	r2, [r3, #0]
    pData++;
 800ab18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1a:	3304      	adds	r3, #4
 800ab1c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ab1e:	f7f7 f85d 	bl	8001bdc <HAL_GetTick>
 800ab22:	4602      	mov	r2, r0
 800ab24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab26:	1ad3      	subs	r3, r2, r3
 800ab28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab2c:	d102      	bne.n	800ab34 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ab2e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab32:	e00b      	b.n	800ab4c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d1e2      	bne.n	800ab08 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	4a03      	ldr	r2, [pc, #12]	; (800ab54 <SD_SendSDStatus+0x19c>)
 800ab48:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800ab4a:	2300      	movs	r3, #0
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3730      	adds	r7, #48	; 0x30
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}
 800ab54:	18000f3a 	.word	0x18000f3a

0800ab58 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d102      	bne.n	800ab6e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ab68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ab6c:	e018      	b.n	800aba0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab76:	041b      	lsls	r3, r3, #16
 800ab78:	4619      	mov	r1, r3
 800ab7a:	4610      	mov	r0, r2
 800ab7c:	f000 fe2a 	bl	800b7d4 <SDMMC_CmdSendStatus>
 800ab80:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d001      	beq.n	800ab8c <SD_SendStatus+0x34>
  {
    return errorstate;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	e009      	b.n	800aba0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	2100      	movs	r1, #0
 800ab92:	4618      	mov	r0, r3
 800ab94:	f000 fba9 	bl	800b2ea <SDMMC_GetResponse>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ab9e:	2300      	movs	r3, #0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3710      	adds	r7, #16
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b086      	sub	sp, #24
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800abb0:	2300      	movs	r3, #0
 800abb2:	60fb      	str	r3, [r7, #12]
 800abb4:	2300      	movs	r3, #0
 800abb6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2100      	movs	r1, #0
 800abbe:	4618      	mov	r0, r3
 800abc0:	f000 fb93 	bl	800b2ea <SDMMC_GetResponse>
 800abc4:	4603      	mov	r3, r0
 800abc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800abce:	d102      	bne.n	800abd6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800abd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800abd4:	e02f      	b.n	800ac36 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800abd6:	f107 030c 	add.w	r3, r7, #12
 800abda:	4619      	mov	r1, r3
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 f879 	bl	800acd4 <SD_FindSCR>
 800abe2:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d001      	beq.n	800abee <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	e023      	b.n	800ac36 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d01c      	beq.n	800ac32 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac00:	041b      	lsls	r3, r3, #16
 800ac02:	4619      	mov	r1, r3
 800ac04:	4610      	mov	r0, r2
 800ac06:	f000 fcfc 	bl	800b602 <SDMMC_CmdAppCommand>
 800ac0a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d001      	beq.n	800ac16 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	e00f      	b.n	800ac36 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2102      	movs	r1, #2
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f000 fd33 	bl	800b688 <SDMMC_CmdBusWidth>
 800ac22:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d001      	beq.n	800ac2e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	e003      	b.n	800ac36 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	e001      	b.n	800ac36 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ac32:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3718      	adds	r7, #24
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b086      	sub	sp, #24
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ac46:	2300      	movs	r3, #0
 800ac48:	60fb      	str	r3, [r7, #12]
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	2100      	movs	r1, #0
 800ac54:	4618      	mov	r0, r3
 800ac56:	f000 fb48 	bl	800b2ea <SDMMC_GetResponse>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac64:	d102      	bne.n	800ac6c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ac66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac6a:	e02f      	b.n	800accc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ac6c:	f107 030c 	add.w	r3, r7, #12
 800ac70:	4619      	mov	r1, r3
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 f82e 	bl	800acd4 <SD_FindSCR>
 800ac78:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d001      	beq.n	800ac84 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	e023      	b.n	800accc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d01c      	beq.n	800acc8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac96:	041b      	lsls	r3, r3, #16
 800ac98:	4619      	mov	r1, r3
 800ac9a:	4610      	mov	r0, r2
 800ac9c:	f000 fcb1 	bl	800b602 <SDMMC_CmdAppCommand>
 800aca0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d001      	beq.n	800acac <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	e00f      	b.n	800accc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	2100      	movs	r1, #0
 800acb2:	4618      	mov	r0, r3
 800acb4:	f000 fce8 	bl	800b688 <SDMMC_CmdBusWidth>
 800acb8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d001      	beq.n	800acc4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	e003      	b.n	800accc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800acc4:	2300      	movs	r3, #0
 800acc6:	e001      	b.n	800accc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800acc8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800accc:	4618      	mov	r0, r3
 800acce:	3718      	adds	r7, #24
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b08e      	sub	sp, #56	; 0x38
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800acde:	f7f6 ff7d 	bl	8001bdc <HAL_GetTick>
 800ace2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ace4:	2300      	movs	r3, #0
 800ace6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ace8:	2300      	movs	r3, #0
 800acea:	60bb      	str	r3, [r7, #8]
 800acec:	2300      	movs	r3, #0
 800acee:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	2108      	movs	r1, #8
 800acfa:	4618      	mov	r0, r3
 800acfc:	f000 fb34 	bl	800b368 <SDMMC_CmdBlockLength>
 800ad00:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ad02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d001      	beq.n	800ad0c <SD_FindSCR+0x38>
  {
    return errorstate;
 800ad08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0a:	e0ad      	b.n	800ae68 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad14:	041b      	lsls	r3, r3, #16
 800ad16:	4619      	mov	r1, r3
 800ad18:	4610      	mov	r0, r2
 800ad1a:	f000 fc72 	bl	800b602 <SDMMC_CmdAppCommand>
 800ad1e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ad20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d001      	beq.n	800ad2a <SD_FindSCR+0x56>
  {
    return errorstate;
 800ad26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad28:	e09e      	b.n	800ae68 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ad2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad2e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ad30:	2308      	movs	r3, #8
 800ad32:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ad34:	2330      	movs	r3, #48	; 0x30
 800ad36:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ad38:	2302      	movs	r3, #2
 800ad3a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ad40:	2301      	movs	r3, #1
 800ad42:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f107 0210 	add.w	r2, r7, #16
 800ad4c:	4611      	mov	r1, r2
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f000 fade 	bl	800b310 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f000 fcb8 	bl	800b6ce <SDMMC_CmdSendSCR>
 800ad5e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ad60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d027      	beq.n	800adb6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800ad66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad68:	e07e      	b.n	800ae68 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d113      	bne.n	800ada0 <SD_FindSCR+0xcc>
 800ad78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d110      	bne.n	800ada0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4618      	mov	r0, r3
 800ad84:	f000 fa3c 	bl	800b200 <SDMMC_ReadFIFO>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4618      	mov	r0, r3
 800ad92:	f000 fa35 	bl	800b200 <SDMMC_ReadFIFO>
 800ad96:	4603      	mov	r3, r0
 800ad98:	60fb      	str	r3, [r7, #12]
      index++;
 800ad9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ada0:	f7f6 ff1c 	bl	8001bdc <HAL_GetTick>
 800ada4:	4602      	mov	r2, r0
 800ada6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada8:	1ad3      	subs	r3, r2, r3
 800adaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adae:	d102      	bne.n	800adb6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800adb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800adb4:	e058      	b.n	800ae68 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800adbc:	f240 532a 	movw	r3, #1322	; 0x52a
 800adc0:	4013      	ands	r3, r2
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d0d1      	beq.n	800ad6a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adcc:	f003 0308 	and.w	r3, r3, #8
 800add0:	2b00      	cmp	r3, #0
 800add2:	d005      	beq.n	800ade0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2208      	movs	r2, #8
 800adda:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800addc:	2308      	movs	r3, #8
 800adde:	e043      	b.n	800ae68 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ade6:	f003 0302 	and.w	r3, r3, #2
 800adea:	2b00      	cmp	r3, #0
 800adec:	d005      	beq.n	800adfa <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	2202      	movs	r2, #2
 800adf4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800adf6:	2302      	movs	r3, #2
 800adf8:	e036      	b.n	800ae68 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae00:	f003 0320 	and.w	r3, r3, #32
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d005      	beq.n	800ae14 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2220      	movs	r2, #32
 800ae0e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ae10:	2320      	movs	r3, #32
 800ae12:	e029      	b.n	800ae68 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a15      	ldr	r2, [pc, #84]	; (800ae70 <SD_FindSCR+0x19c>)
 800ae1a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	061a      	lsls	r2, r3, #24
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	021b      	lsls	r3, r3, #8
 800ae24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ae28:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	0a1b      	lsrs	r3, r3, #8
 800ae2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ae32:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	0e1b      	lsrs	r3, r3, #24
 800ae38:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ae3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae3c:	601a      	str	r2, [r3, #0]
    scr++;
 800ae3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae40:	3304      	adds	r3, #4
 800ae42:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	061a      	lsls	r2, r3, #24
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	021b      	lsls	r3, r3, #8
 800ae4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ae50:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	0a1b      	lsrs	r3, r3, #8
 800ae56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ae5a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	0e1b      	lsrs	r3, r3, #24
 800ae60:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ae62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae64:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ae66:	2300      	movs	r3, #0
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3738      	adds	r7, #56	; 0x38
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	18000f3a 	.word	0x18000f3a

0800ae74 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d101      	bne.n	800ae88 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	e02b      	b.n	800aee0 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d106      	bne.n	800aea2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2200      	movs	r2, #0
 800ae98:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f7f6 fcf1 	bl	8001884 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2202      	movs	r2, #2
 800aea6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	3304      	adds	r3, #4
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	4610      	mov	r0, r2
 800aeb6:	f000 f877 	bl	800afa8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6818      	ldr	r0, [r3, #0]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	461a      	mov	r2, r3
 800aec4:	6839      	ldr	r1, [r7, #0]
 800aec6:	f000 f8cb 	bl	800b060 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800aeca:	4b07      	ldr	r3, [pc, #28]	; (800aee8 <HAL_SDRAM_Init+0x74>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a06      	ldr	r2, [pc, #24]	; (800aee8 <HAL_SDRAM_Init+0x74>)
 800aed0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aed4:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2201      	movs	r2, #1
 800aeda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800aede:	2300      	movs	r3, #0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3708      	adds	r7, #8
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	52004000 	.word	0x52004000

0800aeec <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b086      	sub	sp, #24
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aefe:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800af00:	7dfb      	ldrb	r3, [r7, #23]
 800af02:	2b02      	cmp	r3, #2
 800af04:	d101      	bne.n	800af0a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800af06:	2302      	movs	r3, #2
 800af08:	e021      	b.n	800af4e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800af0a:	7dfb      	ldrb	r3, [r7, #23]
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d002      	beq.n	800af16 <HAL_SDRAM_SendCommand+0x2a>
 800af10:	7dfb      	ldrb	r3, [r7, #23]
 800af12:	2b05      	cmp	r3, #5
 800af14:	d118      	bne.n	800af48 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	2202      	movs	r2, #2
 800af1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	68b9      	ldr	r1, [r7, #8]
 800af26:	4618      	mov	r0, r3
 800af28:	f000 f904 	bl	800b134 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	2b02      	cmp	r3, #2
 800af32:	d104      	bne.n	800af3e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2205      	movs	r2, #5
 800af38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800af3c:	e006      	b.n	800af4c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2201      	movs	r2, #1
 800af42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800af46:	e001      	b.n	800af4c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800af48:	2301      	movs	r3, #1
 800af4a:	e000      	b.n	800af4e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3718      	adds	r7, #24
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800af56:	b580      	push	{r7, lr}
 800af58:	b082      	sub	sp, #8
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	6078      	str	r0, [r7, #4]
 800af5e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800af66:	b2db      	uxtb	r3, r3
 800af68:	2b02      	cmp	r3, #2
 800af6a:	d101      	bne.n	800af70 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800af6c:	2302      	movs	r3, #2
 800af6e:	e016      	b.n	800af9e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800af76:	b2db      	uxtb	r3, r3
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d10f      	bne.n	800af9c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2202      	movs	r2, #2
 800af80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	6839      	ldr	r1, [r7, #0]
 800af8a:	4618      	mov	r0, r3
 800af8c:	f000 f8f6 	bl	800b17c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2201      	movs	r2, #1
 800af94:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800af98:	2300      	movs	r3, #0
 800af9a:	e000      	b.n	800af9e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800af9c:	2301      	movs	r3, #1
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3708      	adds	r7, #8
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
	...

0800afa8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b083      	sub	sp, #12
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d121      	bne.n	800affe <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	4b27      	ldr	r3, [pc, #156]	; (800b05c <FMC_SDRAM_Init+0xb4>)
 800afc0:	4013      	ands	r3, r2
 800afc2:	683a      	ldr	r2, [r7, #0]
 800afc4:	6851      	ldr	r1, [r2, #4]
 800afc6:	683a      	ldr	r2, [r7, #0]
 800afc8:	6892      	ldr	r2, [r2, #8]
 800afca:	4311      	orrs	r1, r2
 800afcc:	683a      	ldr	r2, [r7, #0]
 800afce:	68d2      	ldr	r2, [r2, #12]
 800afd0:	4311      	orrs	r1, r2
 800afd2:	683a      	ldr	r2, [r7, #0]
 800afd4:	6912      	ldr	r2, [r2, #16]
 800afd6:	4311      	orrs	r1, r2
 800afd8:	683a      	ldr	r2, [r7, #0]
 800afda:	6952      	ldr	r2, [r2, #20]
 800afdc:	4311      	orrs	r1, r2
 800afde:	683a      	ldr	r2, [r7, #0]
 800afe0:	6992      	ldr	r2, [r2, #24]
 800afe2:	4311      	orrs	r1, r2
 800afe4:	683a      	ldr	r2, [r7, #0]
 800afe6:	69d2      	ldr	r2, [r2, #28]
 800afe8:	4311      	orrs	r1, r2
 800afea:	683a      	ldr	r2, [r7, #0]
 800afec:	6a12      	ldr	r2, [r2, #32]
 800afee:	4311      	orrs	r1, r2
 800aff0:	683a      	ldr	r2, [r7, #0]
 800aff2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aff4:	430a      	orrs	r2, r1
 800aff6:	431a      	orrs	r2, r3
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	601a      	str	r2, [r3, #0]
 800affc:	e026      	b.n	800b04c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	69d9      	ldr	r1, [r3, #28]
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	6a1b      	ldr	r3, [r3, #32]
 800b00e:	4319      	orrs	r1, r3
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b014:	430b      	orrs	r3, r1
 800b016:	431a      	orrs	r2, r3
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	685a      	ldr	r2, [r3, #4]
 800b020:	4b0e      	ldr	r3, [pc, #56]	; (800b05c <FMC_SDRAM_Init+0xb4>)
 800b022:	4013      	ands	r3, r2
 800b024:	683a      	ldr	r2, [r7, #0]
 800b026:	6851      	ldr	r1, [r2, #4]
 800b028:	683a      	ldr	r2, [r7, #0]
 800b02a:	6892      	ldr	r2, [r2, #8]
 800b02c:	4311      	orrs	r1, r2
 800b02e:	683a      	ldr	r2, [r7, #0]
 800b030:	68d2      	ldr	r2, [r2, #12]
 800b032:	4311      	orrs	r1, r2
 800b034:	683a      	ldr	r2, [r7, #0]
 800b036:	6912      	ldr	r2, [r2, #16]
 800b038:	4311      	orrs	r1, r2
 800b03a:	683a      	ldr	r2, [r7, #0]
 800b03c:	6952      	ldr	r2, [r2, #20]
 800b03e:	4311      	orrs	r1, r2
 800b040:	683a      	ldr	r2, [r7, #0]
 800b042:	6992      	ldr	r2, [r2, #24]
 800b044:	430a      	orrs	r2, r1
 800b046:	431a      	orrs	r2, r3
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b04c:	2300      	movs	r3, #0
}
 800b04e:	4618      	mov	r0, r3
 800b050:	370c      	adds	r7, #12
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr
 800b05a:	bf00      	nop
 800b05c:	ffff8000 	.word	0xffff8000

0800b060 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b060:	b480      	push	{r7}
 800b062:	b085      	sub	sp, #20
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d128      	bne.n	800b0c4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	689b      	ldr	r3, [r3, #8]
 800b076:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	1e59      	subs	r1, r3, #1
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	3b01      	subs	r3, #1
 800b086:	011b      	lsls	r3, r3, #4
 800b088:	4319      	orrs	r1, r3
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	689b      	ldr	r3, [r3, #8]
 800b08e:	3b01      	subs	r3, #1
 800b090:	021b      	lsls	r3, r3, #8
 800b092:	4319      	orrs	r1, r3
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	68db      	ldr	r3, [r3, #12]
 800b098:	3b01      	subs	r3, #1
 800b09a:	031b      	lsls	r3, r3, #12
 800b09c:	4319      	orrs	r1, r3
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	691b      	ldr	r3, [r3, #16]
 800b0a2:	3b01      	subs	r3, #1
 800b0a4:	041b      	lsls	r3, r3, #16
 800b0a6:	4319      	orrs	r1, r3
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	695b      	ldr	r3, [r3, #20]
 800b0ac:	3b01      	subs	r3, #1
 800b0ae:	051b      	lsls	r3, r3, #20
 800b0b0:	4319      	orrs	r1, r3
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	699b      	ldr	r3, [r3, #24]
 800b0b6:	3b01      	subs	r3, #1
 800b0b8:	061b      	lsls	r3, r3, #24
 800b0ba:	430b      	orrs	r3, r1
 800b0bc:	431a      	orrs	r2, r3
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	609a      	str	r2, [r3, #8]
 800b0c2:	e02d      	b.n	800b120 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	689a      	ldr	r2, [r3, #8]
 800b0c8:	4b19      	ldr	r3, [pc, #100]	; (800b130 <FMC_SDRAM_Timing_Init+0xd0>)
 800b0ca:	4013      	ands	r3, r2
 800b0cc:	68ba      	ldr	r2, [r7, #8]
 800b0ce:	68d2      	ldr	r2, [r2, #12]
 800b0d0:	3a01      	subs	r2, #1
 800b0d2:	0311      	lsls	r1, r2, #12
 800b0d4:	68ba      	ldr	r2, [r7, #8]
 800b0d6:	6952      	ldr	r2, [r2, #20]
 800b0d8:	3a01      	subs	r2, #1
 800b0da:	0512      	lsls	r2, r2, #20
 800b0dc:	430a      	orrs	r2, r1
 800b0de:	431a      	orrs	r2, r3
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	1e59      	subs	r1, r3, #1
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	3b01      	subs	r3, #1
 800b0f8:	011b      	lsls	r3, r3, #4
 800b0fa:	4319      	orrs	r1, r3
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	3b01      	subs	r3, #1
 800b102:	021b      	lsls	r3, r3, #8
 800b104:	4319      	orrs	r1, r3
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	691b      	ldr	r3, [r3, #16]
 800b10a:	3b01      	subs	r3, #1
 800b10c:	041b      	lsls	r3, r3, #16
 800b10e:	4319      	orrs	r1, r3
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	699b      	ldr	r3, [r3, #24]
 800b114:	3b01      	subs	r3, #1
 800b116:	061b      	lsls	r3, r3, #24
 800b118:	430b      	orrs	r3, r1
 800b11a:	431a      	orrs	r2, r3
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800b120:	2300      	movs	r3, #0
}
 800b122:	4618      	mov	r0, r3
 800b124:	3714      	adds	r7, #20
 800b126:	46bd      	mov	sp, r7
 800b128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12c:	4770      	bx	lr
 800b12e:	bf00      	nop
 800b130:	ff0f0fff 	.word	0xff0f0fff

0800b134 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b134:	b480      	push	{r7}
 800b136:	b085      	sub	sp, #20
 800b138:	af00      	add	r7, sp, #0
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	691a      	ldr	r2, [r3, #16]
 800b144:	4b0c      	ldr	r3, [pc, #48]	; (800b178 <FMC_SDRAM_SendCommand+0x44>)
 800b146:	4013      	ands	r3, r2
 800b148:	68ba      	ldr	r2, [r7, #8]
 800b14a:	6811      	ldr	r1, [r2, #0]
 800b14c:	68ba      	ldr	r2, [r7, #8]
 800b14e:	6852      	ldr	r2, [r2, #4]
 800b150:	4311      	orrs	r1, r2
 800b152:	68ba      	ldr	r2, [r7, #8]
 800b154:	6892      	ldr	r2, [r2, #8]
 800b156:	3a01      	subs	r2, #1
 800b158:	0152      	lsls	r2, r2, #5
 800b15a:	4311      	orrs	r1, r2
 800b15c:	68ba      	ldr	r2, [r7, #8]
 800b15e:	68d2      	ldr	r2, [r2, #12]
 800b160:	0252      	lsls	r2, r2, #9
 800b162:	430a      	orrs	r2, r1
 800b164:	431a      	orrs	r2, r3
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800b16a:	2300      	movs	r3, #0
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3714      	adds	r7, #20
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr
 800b178:	ffc00000 	.word	0xffc00000

0800b17c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b083      	sub	sp, #12
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	695a      	ldr	r2, [r3, #20]
 800b18a:	4b07      	ldr	r3, [pc, #28]	; (800b1a8 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800b18c:	4013      	ands	r3, r2
 800b18e:	683a      	ldr	r2, [r7, #0]
 800b190:	0052      	lsls	r2, r2, #1
 800b192:	431a      	orrs	r2, r3
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b198:	2300      	movs	r3, #0
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	370c      	adds	r7, #12
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr
 800b1a6:	bf00      	nop
 800b1a8:	ffffc001 	.word	0xffffc001

0800b1ac <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b1ac:	b084      	sub	sp, #16
 800b1ae:	b480      	push	{r7}
 800b1b0:	b085      	sub	sp, #20
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
 800b1b6:	f107 001c 	add.w	r0, r7, #28
 800b1ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b1c2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b1c4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b1c6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800b1ca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800b1ce:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800b1d2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b1d4:	68fa      	ldr	r2, [r7, #12]
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	685a      	ldr	r2, [r3, #4]
 800b1de:	4b07      	ldr	r3, [pc, #28]	; (800b1fc <SDMMC_Init+0x50>)
 800b1e0:	4013      	ands	r3, r2
 800b1e2:	68fa      	ldr	r2, [r7, #12]
 800b1e4:	431a      	orrs	r2, r3
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b1ea:	2300      	movs	r3, #0
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3714      	adds	r7, #20
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	b004      	add	sp, #16
 800b1f8:	4770      	bx	lr
 800b1fa:	bf00      	nop
 800b1fc:	ffc02c00 	.word	0xffc02c00

0800b200 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b20e:	4618      	mov	r0, r3
 800b210:	370c      	adds	r7, #12
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr

0800b21a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b21a:	b480      	push	{r7}
 800b21c:	b083      	sub	sp, #12
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
 800b222:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b22e:	2300      	movs	r3, #0
}
 800b230:	4618      	mov	r0, r3
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b083      	sub	sp, #12
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f043 0203 	orr.w	r2, r3, #3
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b250:	2300      	movs	r3, #0
}
 800b252:	4618      	mov	r0, r3
 800b254:	370c      	adds	r7, #12
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr

0800b25e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b25e:	b480      	push	{r7}
 800b260:	b083      	sub	sp, #12
 800b262:	af00      	add	r7, sp, #0
 800b264:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f003 0303 	and.w	r3, r3, #3
}
 800b26e:	4618      	mov	r0, r3
 800b270:	370c      	adds	r7, #12
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr
	...

0800b27c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b085      	sub	sp, #20
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b286:	2300      	movs	r3, #0
 800b288:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b29a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b2a0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b2a6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b2a8:	68fa      	ldr	r2, [r7, #12]
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	68da      	ldr	r2, [r3, #12]
 800b2b2:	4b06      	ldr	r3, [pc, #24]	; (800b2cc <SDMMC_SendCommand+0x50>)
 800b2b4:	4013      	ands	r3, r2
 800b2b6:	68fa      	ldr	r2, [r7, #12]
 800b2b8:	431a      	orrs	r2, r3
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b2be:	2300      	movs	r3, #0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3714      	adds	r7, #20
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr
 800b2cc:	fffee0c0 	.word	0xfffee0c0

0800b2d0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b083      	sub	sp, #12
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	691b      	ldr	r3, [r3, #16]
 800b2dc:	b2db      	uxtb	r3, r3
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	370c      	adds	r7, #12
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e8:	4770      	bx	lr

0800b2ea <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b2ea:	b480      	push	{r7}
 800b2ec:	b085      	sub	sp, #20
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
 800b2f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	3314      	adds	r3, #20
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
}
 800b304:	4618      	mov	r0, r3
 800b306:	3714      	adds	r7, #20
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr

0800b310 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b310:	b480      	push	{r7}
 800b312:	b085      	sub	sp, #20
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b31a:	2300      	movs	r3, #0
 800b31c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	685a      	ldr	r2, [r3, #4]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b336:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b33c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b342:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b344:	68fa      	ldr	r2, [r7, #12]
 800b346:	4313      	orrs	r3, r2
 800b348:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b34e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	431a      	orrs	r2, r3
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b35a:	2300      	movs	r3, #0

}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3714      	adds	r7, #20
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b088      	sub	sp, #32
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b376:	2310      	movs	r3, #16
 800b378:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b37a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b37e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b380:	2300      	movs	r3, #0
 800b382:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b388:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b38a:	f107 0308 	add.w	r3, r7, #8
 800b38e:	4619      	mov	r1, r3
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f7ff ff73 	bl	800b27c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b396:	f241 3288 	movw	r2, #5000	; 0x1388
 800b39a:	2110      	movs	r1, #16
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f000 fa5f 	bl	800b860 <SDMMC_GetCmdResp1>
 800b3a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3a4:	69fb      	ldr	r3, [r7, #28]
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3720      	adds	r7, #32
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}

0800b3ae <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b3ae:	b580      	push	{r7, lr}
 800b3b0:	b088      	sub	sp, #32
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
 800b3b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b3bc:	2311      	movs	r3, #17
 800b3be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3d0:	f107 0308 	add.w	r3, r7, #8
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f7ff ff50 	bl	800b27c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b3dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3e0:	2111      	movs	r1, #17
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 fa3c 	bl	800b860 <SDMMC_GetCmdResp1>
 800b3e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3ea:	69fb      	ldr	r3, [r7, #28]
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3720      	adds	r7, #32
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b088      	sub	sp, #32
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b402:	2312      	movs	r3, #18
 800b404:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b406:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b40a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b40c:	2300      	movs	r3, #0
 800b40e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b414:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b416:	f107 0308 	add.w	r3, r7, #8
 800b41a:	4619      	mov	r1, r3
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f7ff ff2d 	bl	800b27c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b422:	f241 3288 	movw	r2, #5000	; 0x1388
 800b426:	2112      	movs	r1, #18
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 fa19 	bl	800b860 <SDMMC_GetCmdResp1>
 800b42e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b430:	69fb      	ldr	r3, [r7, #28]
}
 800b432:	4618      	mov	r0, r3
 800b434:	3720      	adds	r7, #32
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}

0800b43a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b43a:	b580      	push	{r7, lr}
 800b43c:	b088      	sub	sp, #32
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
 800b442:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b448:	2318      	movs	r3, #24
 800b44a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b44c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b450:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b452:	2300      	movs	r3, #0
 800b454:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b45a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b45c:	f107 0308 	add.w	r3, r7, #8
 800b460:	4619      	mov	r1, r3
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f7ff ff0a 	bl	800b27c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b468:	f241 3288 	movw	r2, #5000	; 0x1388
 800b46c:	2118      	movs	r1, #24
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 f9f6 	bl	800b860 <SDMMC_GetCmdResp1>
 800b474:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b476:	69fb      	ldr	r3, [r7, #28]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3720      	adds	r7, #32
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b088      	sub	sp, #32
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b48e:	2319      	movs	r3, #25
 800b490:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b492:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b496:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b498:	2300      	movs	r3, #0
 800b49a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b49c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4a2:	f107 0308 	add.w	r3, r7, #8
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f7ff fee7 	bl	800b27c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b4ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4b2:	2119      	movs	r1, #25
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 f9d3 	bl	800b860 <SDMMC_GetCmdResp1>
 800b4ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4bc:	69fb      	ldr	r3, [r7, #28]
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3720      	adds	r7, #32
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
	...

0800b4c8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b088      	sub	sp, #32
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b4d4:	230c      	movs	r3, #12
 800b4d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4e6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b500:	f107 0308 	add.w	r3, r7, #8
 800b504:	4619      	mov	r1, r3
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f7ff feb8 	bl	800b27c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b50c:	4a0b      	ldr	r2, [pc, #44]	; (800b53c <SDMMC_CmdStopTransfer+0x74>)
 800b50e:	210c      	movs	r1, #12
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f000 f9a5 	bl	800b860 <SDMMC_GetCmdResp1>
 800b516:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b524:	69fb      	ldr	r3, [r7, #28]
 800b526:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b52a:	d101      	bne.n	800b530 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800b52c:	2300      	movs	r3, #0
 800b52e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800b530:	69fb      	ldr	r3, [r7, #28]
}
 800b532:	4618      	mov	r0, r3
 800b534:	3720      	adds	r7, #32
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	05f5e100 	.word	0x05f5e100

0800b540 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b088      	sub	sp, #32
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b54e:	2307      	movs	r3, #7
 800b550:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b552:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b556:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b558:	2300      	movs	r3, #0
 800b55a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b55c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b560:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b562:	f107 0308 	add.w	r3, r7, #8
 800b566:	4619      	mov	r1, r3
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f7ff fe87 	bl	800b27c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b56e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b572:	2107      	movs	r1, #7
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 f973 	bl	800b860 <SDMMC_GetCmdResp1>
 800b57a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b57c:	69fb      	ldr	r3, [r7, #28]
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3720      	adds	r7, #32
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}

0800b586 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b586:	b580      	push	{r7, lr}
 800b588:	b088      	sub	sp, #32
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b58e:	2300      	movs	r3, #0
 800b590:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b592:	2300      	movs	r3, #0
 800b594:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b596:	2300      	movs	r3, #0
 800b598:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b59a:	2300      	movs	r3, #0
 800b59c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b59e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5a4:	f107 0308 	add.w	r3, r7, #8
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f7ff fe66 	bl	800b27c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f000 fb97 	bl	800bce4 <SDMMC_GetCmdError>
 800b5b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5b8:	69fb      	ldr	r3, [r7, #28]
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3720      	adds	r7, #32
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}

0800b5c2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b5c2:	b580      	push	{r7, lr}
 800b5c4:	b088      	sub	sp, #32
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b5ca:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b5ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b5d0:	2308      	movs	r3, #8
 800b5d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5e4:	f107 0308 	add.w	r3, r7, #8
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f7ff fe46 	bl	800b27c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 fb29 	bl	800bc48 <SDMMC_GetCmdResp7>
 800b5f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5f8:	69fb      	ldr	r3, [r7, #28]
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3720      	adds	r7, #32
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b088      	sub	sp, #32
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
 800b60a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b610:	2337      	movs	r3, #55	; 0x37
 800b612:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b614:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b618:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b61a:	2300      	movs	r3, #0
 800b61c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b61e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b622:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b624:	f107 0308 	add.w	r3, r7, #8
 800b628:	4619      	mov	r1, r3
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f7ff fe26 	bl	800b27c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b630:	f241 3288 	movw	r2, #5000	; 0x1388
 800b634:	2137      	movs	r1, #55	; 0x37
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 f912 	bl	800b860 <SDMMC_GetCmdResp1>
 800b63c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b63e:	69fb      	ldr	r3, [r7, #28]
}
 800b640:	4618      	mov	r0, r3
 800b642:	3720      	adds	r7, #32
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b088      	sub	sp, #32
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b656:	2329      	movs	r3, #41	; 0x29
 800b658:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b65a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b65e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b660:	2300      	movs	r3, #0
 800b662:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b668:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b66a:	f107 0308 	add.w	r3, r7, #8
 800b66e:	4619      	mov	r1, r3
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f7ff fe03 	bl	800b27c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f000 fa2e 	bl	800bad8 <SDMMC_GetCmdResp3>
 800b67c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b67e:	69fb      	ldr	r3, [r7, #28]
}
 800b680:	4618      	mov	r0, r3
 800b682:	3720      	adds	r7, #32
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b088      	sub	sp, #32
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b696:	2306      	movs	r3, #6
 800b698:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b69a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b69e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6aa:	f107 0308 	add.w	r3, r7, #8
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f7ff fde3 	bl	800b27c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b6b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6ba:	2106      	movs	r1, #6
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 f8cf 	bl	800b860 <SDMMC_GetCmdResp1>
 800b6c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6c4:	69fb      	ldr	r3, [r7, #28]
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3720      	adds	r7, #32
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}

0800b6ce <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b6ce:	b580      	push	{r7, lr}
 800b6d0:	b088      	sub	sp, #32
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b6da:	2333      	movs	r3, #51	; 0x33
 800b6dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6ee:	f107 0308 	add.w	r3, r7, #8
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f7ff fdc1 	bl	800b27c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b6fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6fe:	2133      	movs	r1, #51	; 0x33
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 f8ad 	bl	800b860 <SDMMC_GetCmdResp1>
 800b706:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b708:	69fb      	ldr	r3, [r7, #28]
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3720      	adds	r7, #32
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}

0800b712 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b712:	b580      	push	{r7, lr}
 800b714:	b088      	sub	sp, #32
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b71a:	2300      	movs	r3, #0
 800b71c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b71e:	2302      	movs	r3, #2
 800b720:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b722:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b726:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b728:	2300      	movs	r3, #0
 800b72a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b72c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b730:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b732:	f107 0308 	add.w	r3, r7, #8
 800b736:	4619      	mov	r1, r3
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f7ff fd9f 	bl	800b27c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f000 f980 	bl	800ba44 <SDMMC_GetCmdResp2>
 800b744:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b746:	69fb      	ldr	r3, [r7, #28]
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3720      	adds	r7, #32
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b088      	sub	sp, #32
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b75e:	2309      	movs	r3, #9
 800b760:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b762:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b766:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b768:	2300      	movs	r3, #0
 800b76a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b76c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b770:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b772:	f107 0308 	add.w	r3, r7, #8
 800b776:	4619      	mov	r1, r3
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f7ff fd7f 	bl	800b27c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 f960 	bl	800ba44 <SDMMC_GetCmdResp2>
 800b784:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b786:	69fb      	ldr	r3, [r7, #28]
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3720      	adds	r7, #32
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b088      	sub	sp, #32
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b79a:	2300      	movs	r3, #0
 800b79c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b79e:	2303      	movs	r3, #3
 800b7a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7b2:	f107 0308 	add.w	r3, r7, #8
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f7ff fd5f 	bl	800b27c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b7be:	683a      	ldr	r2, [r7, #0]
 800b7c0:	2103      	movs	r1, #3
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 f9c8 	bl	800bb58 <SDMMC_GetCmdResp6>
 800b7c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7ca:	69fb      	ldr	r3, [r7, #28]
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3720      	adds	r7, #32
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b088      	sub	sp, #32
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b7e2:	230d      	movs	r3, #13
 800b7e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7f6:	f107 0308 	add.w	r3, r7, #8
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f7ff fd3d 	bl	800b27c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b802:	f241 3288 	movw	r2, #5000	; 0x1388
 800b806:	210d      	movs	r1, #13
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 f829 	bl	800b860 <SDMMC_GetCmdResp1>
 800b80e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b810:	69fb      	ldr	r3, [r7, #28]
}
 800b812:	4618      	mov	r0, r3
 800b814:	3720      	adds	r7, #32
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}

0800b81a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b81a:	b580      	push	{r7, lr}
 800b81c:	b088      	sub	sp, #32
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b822:	2300      	movs	r3, #0
 800b824:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b826:	230d      	movs	r3, #13
 800b828:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b82a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b82e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b830:	2300      	movs	r3, #0
 800b832:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b838:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b83a:	f107 0308 	add.w	r3, r7, #8
 800b83e:	4619      	mov	r1, r3
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f7ff fd1b 	bl	800b27c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b846:	f241 3288 	movw	r2, #5000	; 0x1388
 800b84a:	210d      	movs	r1, #13
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 f807 	bl	800b860 <SDMMC_GetCmdResp1>
 800b852:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b854:	69fb      	ldr	r3, [r7, #28]
}
 800b856:	4618      	mov	r0, r3
 800b858:	3720      	adds	r7, #32
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
	...

0800b860 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b088      	sub	sp, #32
 800b864:	af00      	add	r7, sp, #0
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	460b      	mov	r3, r1
 800b86a:	607a      	str	r2, [r7, #4]
 800b86c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b86e:	4b70      	ldr	r3, [pc, #448]	; (800ba30 <SDMMC_GetCmdResp1+0x1d0>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a70      	ldr	r2, [pc, #448]	; (800ba34 <SDMMC_GetCmdResp1+0x1d4>)
 800b874:	fba2 2303 	umull	r2, r3, r2, r3
 800b878:	0a5a      	lsrs	r2, r3, #9
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	fb02 f303 	mul.w	r3, r2, r3
 800b880:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b882:	69fb      	ldr	r3, [r7, #28]
 800b884:	1e5a      	subs	r2, r3, #1
 800b886:	61fa      	str	r2, [r7, #28]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d102      	bne.n	800b892 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b88c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b890:	e0c9      	b.n	800ba26 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b896:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b898:	69ba      	ldr	r2, [r7, #24]
 800b89a:	4b67      	ldr	r3, [pc, #412]	; (800ba38 <SDMMC_GetCmdResp1+0x1d8>)
 800b89c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d0ef      	beq.n	800b882 <SDMMC_GetCmdResp1+0x22>
 800b8a2:	69bb      	ldr	r3, [r7, #24]
 800b8a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d1ea      	bne.n	800b882 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8b0:	f003 0304 	and.w	r3, r3, #4
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d004      	beq.n	800b8c2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2204      	movs	r2, #4
 800b8bc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b8be:	2304      	movs	r3, #4
 800b8c0:	e0b1      	b.n	800ba26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8c6:	f003 0301 	and.w	r3, r3, #1
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d004      	beq.n	800b8d8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	e0a6      	b.n	800ba26 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	4a58      	ldr	r2, [pc, #352]	; (800ba3c <SDMMC_GetCmdResp1+0x1dc>)
 800b8dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f7ff fcf6 	bl	800b2d0 <SDMMC_GetCommandResponse>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	7afb      	ldrb	r3, [r7, #11]
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d001      	beq.n	800b8f2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e099      	b.n	800ba26 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b8f2:	2100      	movs	r1, #0
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	f7ff fcf8 	bl	800b2ea <SDMMC_GetResponse>
 800b8fa:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b8fc:	697a      	ldr	r2, [r7, #20]
 800b8fe:	4b50      	ldr	r3, [pc, #320]	; (800ba40 <SDMMC_GetCmdResp1+0x1e0>)
 800b900:	4013      	ands	r3, r2
 800b902:	2b00      	cmp	r3, #0
 800b904:	d101      	bne.n	800b90a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b906:	2300      	movs	r3, #0
 800b908:	e08d      	b.n	800ba26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	da02      	bge.n	800b916 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b910:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b914:	e087      	b.n	800ba26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d001      	beq.n	800b924 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b920:	2340      	movs	r3, #64	; 0x40
 800b922:	e080      	b.n	800ba26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d001      	beq.n	800b932 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b92e:	2380      	movs	r3, #128	; 0x80
 800b930:	e079      	b.n	800ba26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d002      	beq.n	800b942 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b93c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b940:	e071      	b.n	800ba26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d002      	beq.n	800b952 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b94c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b950:	e069      	b.n	800ba26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d002      	beq.n	800b962 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b95c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b960:	e061      	b.n	800ba26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d002      	beq.n	800b972 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b96c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b970:	e059      	b.n	800ba26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d002      	beq.n	800b982 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b97c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b980:	e051      	b.n	800ba26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d002      	beq.n	800b992 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b98c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b990:	e049      	b.n	800ba26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d002      	beq.n	800b9a2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b99c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b9a0:	e041      	b.n	800ba26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d002      	beq.n	800b9b2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b9ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b9b0:	e039      	b.n	800ba26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d002      	beq.n	800b9c2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b9bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b9c0:	e031      	b.n	800ba26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d002      	beq.n	800b9d2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b9cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b9d0:	e029      	b.n	800ba26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d002      	beq.n	800b9e2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b9dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b9e0:	e021      	b.n	800ba26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d002      	beq.n	800b9f2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b9ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b9f0:	e019      	b.n	800ba26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d002      	beq.n	800ba02 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b9fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ba00:	e011      	b.n	800ba26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d002      	beq.n	800ba12 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ba0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ba10:	e009      	b.n	800ba26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	f003 0308 	and.w	r3, r3, #8
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d002      	beq.n	800ba22 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ba1c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ba20:	e001      	b.n	800ba26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ba22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3720      	adds	r7, #32
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}
 800ba2e:	bf00      	nop
 800ba30:	24000008 	.word	0x24000008
 800ba34:	10624dd3 	.word	0x10624dd3
 800ba38:	00200045 	.word	0x00200045
 800ba3c:	002000c5 	.word	0x002000c5
 800ba40:	fdffe008 	.word	0xfdffe008

0800ba44 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b085      	sub	sp, #20
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ba4c:	4b1f      	ldr	r3, [pc, #124]	; (800bacc <SDMMC_GetCmdResp2+0x88>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4a1f      	ldr	r2, [pc, #124]	; (800bad0 <SDMMC_GetCmdResp2+0x8c>)
 800ba52:	fba2 2303 	umull	r2, r3, r2, r3
 800ba56:	0a5b      	lsrs	r3, r3, #9
 800ba58:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba5c:	fb02 f303 	mul.w	r3, r2, r3
 800ba60:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	1e5a      	subs	r2, r3, #1
 800ba66:	60fa      	str	r2, [r7, #12]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d102      	bne.n	800ba72 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba70:	e026      	b.n	800bac0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba76:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d0ef      	beq.n	800ba62 <SDMMC_GetCmdResp2+0x1e>
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d1ea      	bne.n	800ba62 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba90:	f003 0304 	and.w	r3, r3, #4
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d004      	beq.n	800baa2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2204      	movs	r2, #4
 800ba9c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba9e:	2304      	movs	r3, #4
 800baa0:	e00e      	b.n	800bac0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baa6:	f003 0301 	and.w	r3, r3, #1
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d004      	beq.n	800bab8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2201      	movs	r2, #1
 800bab2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bab4:	2301      	movs	r3, #1
 800bab6:	e003      	b.n	800bac0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	4a06      	ldr	r2, [pc, #24]	; (800bad4 <SDMMC_GetCmdResp2+0x90>)
 800babc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800babe:	2300      	movs	r3, #0
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3714      	adds	r7, #20
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr
 800bacc:	24000008 	.word	0x24000008
 800bad0:	10624dd3 	.word	0x10624dd3
 800bad4:	002000c5 	.word	0x002000c5

0800bad8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bad8:	b480      	push	{r7}
 800bada:	b085      	sub	sp, #20
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bae0:	4b1a      	ldr	r3, [pc, #104]	; (800bb4c <SDMMC_GetCmdResp3+0x74>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4a1a      	ldr	r2, [pc, #104]	; (800bb50 <SDMMC_GetCmdResp3+0x78>)
 800bae6:	fba2 2303 	umull	r2, r3, r2, r3
 800baea:	0a5b      	lsrs	r3, r3, #9
 800baec:	f241 3288 	movw	r2, #5000	; 0x1388
 800baf0:	fb02 f303 	mul.w	r3, r2, r3
 800baf4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	1e5a      	subs	r2, r3, #1
 800bafa:	60fa      	str	r2, [r7, #12]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d102      	bne.n	800bb06 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb04:	e01b      	b.n	800bb3e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb0a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d0ef      	beq.n	800baf6 <SDMMC_GetCmdResp3+0x1e>
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d1ea      	bne.n	800baf6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb24:	f003 0304 	and.w	r3, r3, #4
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d004      	beq.n	800bb36 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2204      	movs	r2, #4
 800bb30:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb32:	2304      	movs	r3, #4
 800bb34:	e003      	b.n	800bb3e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	4a06      	ldr	r2, [pc, #24]	; (800bb54 <SDMMC_GetCmdResp3+0x7c>)
 800bb3a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bb3c:	2300      	movs	r3, #0
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3714      	adds	r7, #20
 800bb42:	46bd      	mov	sp, r7
 800bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb48:	4770      	bx	lr
 800bb4a:	bf00      	nop
 800bb4c:	24000008 	.word	0x24000008
 800bb50:	10624dd3 	.word	0x10624dd3
 800bb54:	002000c5 	.word	0x002000c5

0800bb58 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b088      	sub	sp, #32
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	460b      	mov	r3, r1
 800bb62:	607a      	str	r2, [r7, #4]
 800bb64:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bb66:	4b35      	ldr	r3, [pc, #212]	; (800bc3c <SDMMC_GetCmdResp6+0xe4>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4a35      	ldr	r2, [pc, #212]	; (800bc40 <SDMMC_GetCmdResp6+0xe8>)
 800bb6c:	fba2 2303 	umull	r2, r3, r2, r3
 800bb70:	0a5b      	lsrs	r3, r3, #9
 800bb72:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb76:	fb02 f303 	mul.w	r3, r2, r3
 800bb7a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bb7c:	69fb      	ldr	r3, [r7, #28]
 800bb7e:	1e5a      	subs	r2, r3, #1
 800bb80:	61fa      	str	r2, [r7, #28]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d102      	bne.n	800bb8c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb86:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb8a:	e052      	b.n	800bc32 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb90:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bb92:	69bb      	ldr	r3, [r7, #24]
 800bb94:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d0ef      	beq.n	800bb7c <SDMMC_GetCmdResp6+0x24>
 800bb9c:	69bb      	ldr	r3, [r7, #24]
 800bb9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d1ea      	bne.n	800bb7c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbaa:	f003 0304 	and.w	r3, r3, #4
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d004      	beq.n	800bbbc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2204      	movs	r2, #4
 800bbb6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bbb8:	2304      	movs	r3, #4
 800bbba:	e03a      	b.n	800bc32 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbc0:	f003 0301 	and.w	r3, r3, #1
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d004      	beq.n	800bbd2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2201      	movs	r2, #1
 800bbcc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bbce:	2301      	movs	r3, #1
 800bbd0:	e02f      	b.n	800bc32 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bbd2:	68f8      	ldr	r0, [r7, #12]
 800bbd4:	f7ff fb7c 	bl	800b2d0 <SDMMC_GetCommandResponse>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	461a      	mov	r2, r3
 800bbdc:	7afb      	ldrb	r3, [r7, #11]
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d001      	beq.n	800bbe6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	e025      	b.n	800bc32 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	4a16      	ldr	r2, [pc, #88]	; (800bc44 <SDMMC_GetCmdResp6+0xec>)
 800bbea:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bbec:	2100      	movs	r1, #0
 800bbee:	68f8      	ldr	r0, [r7, #12]
 800bbf0:	f7ff fb7b 	bl	800b2ea <SDMMC_GetResponse>
 800bbf4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d106      	bne.n	800bc0e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	0c1b      	lsrs	r3, r3, #16
 800bc04:	b29a      	uxth	r2, r3
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	e011      	b.n	800bc32 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d002      	beq.n	800bc1e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bc18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bc1c:	e009      	b.n	800bc32 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d002      	beq.n	800bc2e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bc28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc2c:	e001      	b.n	800bc32 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bc2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3720      	adds	r7, #32
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	24000008 	.word	0x24000008
 800bc40:	10624dd3 	.word	0x10624dd3
 800bc44:	002000c5 	.word	0x002000c5

0800bc48 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bc50:	4b22      	ldr	r3, [pc, #136]	; (800bcdc <SDMMC_GetCmdResp7+0x94>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	4a22      	ldr	r2, [pc, #136]	; (800bce0 <SDMMC_GetCmdResp7+0x98>)
 800bc56:	fba2 2303 	umull	r2, r3, r2, r3
 800bc5a:	0a5b      	lsrs	r3, r3, #9
 800bc5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc60:	fb02 f303 	mul.w	r3, r2, r3
 800bc64:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	1e5a      	subs	r2, r3, #1
 800bc6a:	60fa      	str	r2, [r7, #12]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d102      	bne.n	800bc76 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc74:	e02c      	b.n	800bcd0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc7a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d0ef      	beq.n	800bc66 <SDMMC_GetCmdResp7+0x1e>
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d1ea      	bne.n	800bc66 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc94:	f003 0304 	and.w	r3, r3, #4
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d004      	beq.n	800bca6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2204      	movs	r2, #4
 800bca0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bca2:	2304      	movs	r3, #4
 800bca4:	e014      	b.n	800bcd0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcaa:	f003 0301 	and.w	r3, r3, #1
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d004      	beq.n	800bcbc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bcb8:	2301      	movs	r3, #1
 800bcba:	e009      	b.n	800bcd0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d002      	beq.n	800bcce <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2240      	movs	r2, #64	; 0x40
 800bccc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bcce:	2300      	movs	r3, #0

}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3714      	adds	r7, #20
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr
 800bcdc:	24000008 	.word	0x24000008
 800bce0:	10624dd3 	.word	0x10624dd3

0800bce4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b085      	sub	sp, #20
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bcec:	4b11      	ldr	r3, [pc, #68]	; (800bd34 <SDMMC_GetCmdError+0x50>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4a11      	ldr	r2, [pc, #68]	; (800bd38 <SDMMC_GetCmdError+0x54>)
 800bcf2:	fba2 2303 	umull	r2, r3, r2, r3
 800bcf6:	0a5b      	lsrs	r3, r3, #9
 800bcf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcfc:	fb02 f303 	mul.w	r3, r2, r3
 800bd00:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	1e5a      	subs	r2, r3, #1
 800bd06:	60fa      	str	r2, [r7, #12]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d102      	bne.n	800bd12 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd10:	e009      	b.n	800bd26 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d0f1      	beq.n	800bd02 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	4a06      	ldr	r2, [pc, #24]	; (800bd3c <SDMMC_GetCmdError+0x58>)
 800bd22:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800bd24:	2300      	movs	r3, #0
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3714      	adds	r7, #20
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr
 800bd32:	bf00      	nop
 800bd34:	24000008 	.word	0x24000008
 800bd38:	10624dd3 	.word	0x10624dd3
 800bd3c:	002000c5 	.word	0x002000c5

0800bd40 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bd44:	4904      	ldr	r1, [pc, #16]	; (800bd58 <MX_FATFS_Init+0x18>)
 800bd46:	4805      	ldr	r0, [pc, #20]	; (800bd5c <MX_FATFS_Init+0x1c>)
 800bd48:	f002 ffbe 	bl	800ecc8 <FATFS_LinkDriver>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	461a      	mov	r2, r3
 800bd50:	4b03      	ldr	r3, [pc, #12]	; (800bd60 <MX_FATFS_Init+0x20>)
 800bd52:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bd54:	bf00      	nop
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	2400028c 	.word	0x2400028c
 800bd5c:	0800ff6c 	.word	0x0800ff6c
 800bd60:	24000288 	.word	0x24000288

0800bd64 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bd64:	b480      	push	{r7}
 800bd66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bd68:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr

0800bd74 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b082      	sub	sp, #8
 800bd78:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bd7e:	f000 f86b 	bl	800be58 <BSP_SD_IsDetected>
 800bd82:	4603      	mov	r3, r0
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	d001      	beq.n	800bd8c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bd88:	2302      	movs	r3, #2
 800bd8a:	e005      	b.n	800bd98 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bd8c:	4804      	ldr	r0, [pc, #16]	; (800bda0 <BSP_SD_Init+0x2c>)
 800bd8e:	f7fd fcbf 	bl	8009710 <HAL_SD_Init>
 800bd92:	4603      	mov	r3, r0
 800bd94:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800bd96:	79fb      	ldrb	r3, [r7, #7]
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3708      	adds	r7, #8
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	240001c8 	.word	0x240001c8

0800bda4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b088      	sub	sp, #32
 800bda8:	af02      	add	r7, sp, #8
 800bdaa:	60f8      	str	r0, [r7, #12]
 800bdac:	60b9      	str	r1, [r7, #8]
 800bdae:	607a      	str	r2, [r7, #4]
 800bdb0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	9300      	str	r3, [sp, #0]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	68ba      	ldr	r2, [r7, #8]
 800bdbe:	68f9      	ldr	r1, [r7, #12]
 800bdc0:	4806      	ldr	r0, [pc, #24]	; (800bddc <BSP_SD_ReadBlocks+0x38>)
 800bdc2:	f7fd fdc5 	bl	8009950 <HAL_SD_ReadBlocks>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d001      	beq.n	800bdd0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bdd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3718      	adds	r7, #24
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop
 800bddc:	240001c8 	.word	0x240001c8

0800bde0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b088      	sub	sp, #32
 800bde4:	af02      	add	r7, sp, #8
 800bde6:	60f8      	str	r0, [r7, #12]
 800bde8:	60b9      	str	r1, [r7, #8]
 800bdea:	607a      	str	r2, [r7, #4]
 800bdec:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	9300      	str	r3, [sp, #0]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	68ba      	ldr	r2, [r7, #8]
 800bdfa:	68f9      	ldr	r1, [r7, #12]
 800bdfc:	4806      	ldr	r0, [pc, #24]	; (800be18 <BSP_SD_WriteBlocks+0x38>)
 800bdfe:	f7fd ff31 	bl	8009c64 <HAL_SD_WriteBlocks>
 800be02:	4603      	mov	r3, r0
 800be04:	2b00      	cmp	r3, #0
 800be06:	d001      	beq.n	800be0c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800be08:	2301      	movs	r3, #1
 800be0a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800be0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3718      	adds	r7, #24
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	240001c8 	.word	0x240001c8

0800be1c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800be20:	4805      	ldr	r0, [pc, #20]	; (800be38 <BSP_SD_GetCardState+0x1c>)
 800be22:	f7fe fc4d 	bl	800a6c0 <HAL_SD_GetCardState>
 800be26:	4603      	mov	r3, r0
 800be28:	2b04      	cmp	r3, #4
 800be2a:	bf14      	ite	ne
 800be2c:	2301      	movne	r3, #1
 800be2e:	2300      	moveq	r3, #0
 800be30:	b2db      	uxtb	r3, r3
}
 800be32:	4618      	mov	r0, r3
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	240001c8 	.word	0x240001c8

0800be3c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800be44:	6879      	ldr	r1, [r7, #4]
 800be46:	4803      	ldr	r0, [pc, #12]	; (800be54 <BSP_SD_GetCardInfo+0x18>)
 800be48:	f7fe fafc 	bl	800a444 <HAL_SD_GetCardInfo>
}
 800be4c:	bf00      	nop
 800be4e:	3708      	adds	r7, #8
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	240001c8 	.word	0x240001c8

0800be58 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800be5e:	2301      	movs	r3, #1
 800be60:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800be62:	f000 f80b 	bl	800be7c <BSP_PlatformIsDetected>
 800be66:	4603      	mov	r3, r0
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d101      	bne.n	800be70 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800be6c:	2300      	movs	r3, #0
 800be6e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800be70:	79fb      	ldrb	r3, [r7, #7]
 800be72:	b2db      	uxtb	r3, r3
}
 800be74:	4618      	mov	r0, r3
 800be76:	3708      	adds	r7, #8
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b082      	sub	sp, #8
 800be80:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800be82:	2301      	movs	r3, #1
 800be84:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800be86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800be8a:	4806      	ldr	r0, [pc, #24]	; (800bea4 <BSP_PlatformIsDetected+0x28>)
 800be8c:	f7f8 fd98 	bl	80049c0 <HAL_GPIO_ReadPin>
 800be90:	4603      	mov	r3, r0
 800be92:	2b00      	cmp	r3, #0
 800be94:	d001      	beq.n	800be9a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800be96:	2300      	movs	r3, #0
 800be98:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800be9a:	79fb      	ldrb	r3, [r7, #7]
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3708      	adds	r7, #8
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	58021800 	.word	0x58021800

0800bea8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
 800beae:	4603      	mov	r3, r0
 800beb0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800beb2:	4b0b      	ldr	r3, [pc, #44]	; (800bee0 <SD_CheckStatus+0x38>)
 800beb4:	2201      	movs	r2, #1
 800beb6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800beb8:	f7ff ffb0 	bl	800be1c <BSP_SD_GetCardState>
 800bebc:	4603      	mov	r3, r0
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d107      	bne.n	800bed2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bec2:	4b07      	ldr	r3, [pc, #28]	; (800bee0 <SD_CheckStatus+0x38>)
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	f023 0301 	bic.w	r3, r3, #1
 800becc:	b2da      	uxtb	r2, r3
 800bece:	4b04      	ldr	r3, [pc, #16]	; (800bee0 <SD_CheckStatus+0x38>)
 800bed0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bed2:	4b03      	ldr	r3, [pc, #12]	; (800bee0 <SD_CheckStatus+0x38>)
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	b2db      	uxtb	r3, r3
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3708      	adds	r7, #8
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	24000015 	.word	0x24000015

0800bee4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
 800beea:	4603      	mov	r3, r0
 800beec:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800beee:	4b0b      	ldr	r3, [pc, #44]	; (800bf1c <SD_initialize+0x38>)
 800bef0:	2201      	movs	r2, #1
 800bef2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800bef4:	f7ff ff3e 	bl	800bd74 <BSP_SD_Init>
 800bef8:	4603      	mov	r3, r0
 800befa:	2b00      	cmp	r3, #0
 800befc:	d107      	bne.n	800bf0e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800befe:	79fb      	ldrb	r3, [r7, #7]
 800bf00:	4618      	mov	r0, r3
 800bf02:	f7ff ffd1 	bl	800bea8 <SD_CheckStatus>
 800bf06:	4603      	mov	r3, r0
 800bf08:	461a      	mov	r2, r3
 800bf0a:	4b04      	ldr	r3, [pc, #16]	; (800bf1c <SD_initialize+0x38>)
 800bf0c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bf0e:	4b03      	ldr	r3, [pc, #12]	; (800bf1c <SD_initialize+0x38>)
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	b2db      	uxtb	r3, r3
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3708      	adds	r7, #8
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}
 800bf1c:	24000015 	.word	0x24000015

0800bf20 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	4603      	mov	r3, r0
 800bf28:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bf2a:	79fb      	ldrb	r3, [r7, #7]
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f7ff ffbb 	bl	800bea8 <SD_CheckStatus>
 800bf32:	4603      	mov	r3, r0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3708      	adds	r7, #8
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b086      	sub	sp, #24
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	60b9      	str	r1, [r7, #8]
 800bf44:	607a      	str	r2, [r7, #4]
 800bf46:	603b      	str	r3, [r7, #0]
 800bf48:	4603      	mov	r3, r0
 800bf4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800bf50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf54:	683a      	ldr	r2, [r7, #0]
 800bf56:	6879      	ldr	r1, [r7, #4]
 800bf58:	68b8      	ldr	r0, [r7, #8]
 800bf5a:	f7ff ff23 	bl	800bda4 <BSP_SD_ReadBlocks>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d107      	bne.n	800bf74 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800bf64:	bf00      	nop
 800bf66:	f7ff ff59 	bl	800be1c <BSP_SD_GetCardState>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d1fa      	bne.n	800bf66 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800bf70:	2300      	movs	r3, #0
 800bf72:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800bf74:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3718      	adds	r7, #24
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}

0800bf7e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bf7e:	b580      	push	{r7, lr}
 800bf80:	b086      	sub	sp, #24
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	60b9      	str	r1, [r7, #8]
 800bf86:	607a      	str	r2, [r7, #4]
 800bf88:	603b      	str	r3, [r7, #0]
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bf8e:	2301      	movs	r3, #1
 800bf90:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800bf92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf96:	683a      	ldr	r2, [r7, #0]
 800bf98:	6879      	ldr	r1, [r7, #4]
 800bf9a:	68b8      	ldr	r0, [r7, #8]
 800bf9c:	f7ff ff20 	bl	800bde0 <BSP_SD_WriteBlocks>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d107      	bne.n	800bfb6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800bfa6:	bf00      	nop
 800bfa8:	f7ff ff38 	bl	800be1c <BSP_SD_GetCardState>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d1fa      	bne.n	800bfa8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800bfb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3718      	adds	r7, #24
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b08c      	sub	sp, #48	; 0x30
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	603a      	str	r2, [r7, #0]
 800bfca:	71fb      	strb	r3, [r7, #7]
 800bfcc:	460b      	mov	r3, r1
 800bfce:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bfd6:	4b25      	ldr	r3, [pc, #148]	; (800c06c <SD_ioctl+0xac>)
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	b2db      	uxtb	r3, r3
 800bfdc:	f003 0301 	and.w	r3, r3, #1
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d001      	beq.n	800bfe8 <SD_ioctl+0x28>
 800bfe4:	2303      	movs	r3, #3
 800bfe6:	e03c      	b.n	800c062 <SD_ioctl+0xa2>

  switch (cmd)
 800bfe8:	79bb      	ldrb	r3, [r7, #6]
 800bfea:	2b03      	cmp	r3, #3
 800bfec:	d834      	bhi.n	800c058 <SD_ioctl+0x98>
 800bfee:	a201      	add	r2, pc, #4	; (adr r2, 800bff4 <SD_ioctl+0x34>)
 800bff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff4:	0800c005 	.word	0x0800c005
 800bff8:	0800c00d 	.word	0x0800c00d
 800bffc:	0800c025 	.word	0x0800c025
 800c000:	0800c03f 	.word	0x0800c03f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c004:	2300      	movs	r3, #0
 800c006:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c00a:	e028      	b.n	800c05e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c00c:	f107 0308 	add.w	r3, r7, #8
 800c010:	4618      	mov	r0, r3
 800c012:	f7ff ff13 	bl	800be3c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c016:	6a3a      	ldr	r2, [r7, #32]
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c01c:	2300      	movs	r3, #0
 800c01e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c022:	e01c      	b.n	800c05e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c024:	f107 0308 	add.w	r3, r7, #8
 800c028:	4618      	mov	r0, r3
 800c02a:	f7ff ff07 	bl	800be3c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c030:	b29a      	uxth	r2, r3
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c036:	2300      	movs	r3, #0
 800c038:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c03c:	e00f      	b.n	800c05e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c03e:	f107 0308 	add.w	r3, r7, #8
 800c042:	4618      	mov	r0, r3
 800c044:	f7ff fefa 	bl	800be3c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04a:	0a5a      	lsrs	r2, r3, #9
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c050:	2300      	movs	r3, #0
 800c052:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c056:	e002      	b.n	800c05e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c058:	2304      	movs	r3, #4
 800c05a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c05e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c062:	4618      	mov	r0, r3
 800c064:	3730      	adds	r7, #48	; 0x30
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	bf00      	nop
 800c06c:	24000015 	.word	0x24000015

0800c070 <logger_init>:

static struct line_buffer_t __attribute__((section(".sdram"))) line_buffer;
static char __attribute__((section(".sdram"))) msg_parsed[LOGGER_PARSE_BUFFER_SIZE];

void logger_init(void)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	af00      	add	r7, sp, #0
	memset(&line_buffer, 0, sizeof(line_buffer));
 800c074:	2259      	movs	r2, #89	; 0x59
 800c076:	2100      	movs	r1, #0
 800c078:	4802      	ldr	r0, [pc, #8]	; (800c084 <logger_init+0x14>)
 800c07a:	f002 ff4d 	bl	800ef18 <memset>
}
 800c07e:	bf00      	nop
 800c080:	bd80      	pop	{r7, pc}
 800c082:	bf00      	nop
 800c084:	c001043c 	.word	0xc001043c

0800c088 <logger_log>:

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wformat-truncation"

void logger_log(const char *msg, ...)
{
 800c088:	b40f      	push	{r0, r1, r2, r3}
 800c08a:	b580      	push	{r7, lr}
 800c08c:	b086      	sub	sp, #24
 800c08e:	af00      	add	r7, sp, #0
	va_list arg_list;

	va_start(arg_list, msg);
 800c090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c094:	603b      	str	r3, [r7, #0]
	int length = vsnprintf(msg_parsed, sizeof(msg_parsed), msg, arg_list);
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	6a3a      	ldr	r2, [r7, #32]
 800c09a:	2180      	movs	r1, #128	; 0x80
 800c09c:	4859      	ldr	r0, [pc, #356]	; (800c204 <logger_log+0x17c>)
 800c09e:	f002 ffa3 	bl	800efe8 <vsniprintf>
 800c0a2:	60f8      	str	r0, [r7, #12]
	va_end(arg_list);

	if (length == 0) {
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	f000 80a4 	beq.w	800c1f4 <logger_log+0x16c>
		return;
	}

	size_t total_copied = 0;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	617b      	str	r3, [r7, #20]
	while (total_copied < length) {
 800c0b0:	e07c      	b.n	800c1ac <logger_log+0x124>
		if (line_buffer.lines_used < LOGGER_LINES) {
 800c0b2:	4b55      	ldr	r3, [pc, #340]	; (800c208 <logger_log+0x180>)
 800c0b4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c0b8:	2b03      	cmp	r3, #3
 800c0ba:	d845      	bhi.n	800c148 <logger_log+0xc0>
			snprintf(&line_buffer.data[line_buffer.lines_used * LOGGER_LINE_SIZE], LOGGER_LINE_SIZE, "%s", &msg_parsed[total_copied]);
 800c0bc:	4b52      	ldr	r3, [pc, #328]	; (800c208 <logger_log+0x180>)
 800c0be:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	2316      	movs	r3, #22
 800c0c6:	fb02 f303 	mul.w	r3, r2, r3
 800c0ca:	4a4f      	ldr	r2, [pc, #316]	; (800c208 <logger_log+0x180>)
 800c0cc:	1898      	adds	r0, r3, r2
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	4a4c      	ldr	r2, [pc, #304]	; (800c204 <logger_log+0x17c>)
 800c0d2:	4413      	add	r3, r2
 800c0d4:	4a4d      	ldr	r2, [pc, #308]	; (800c20c <logger_log+0x184>)
 800c0d6:	2116      	movs	r1, #22
 800c0d8:	f002 ff26 	bl	800ef28 <sniprintf>

			const size_t copied = MIN(LOGGER_LINE_LENGTH, strlen(&msg_parsed[total_copied]));
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	4a49      	ldr	r2, [pc, #292]	; (800c204 <logger_log+0x17c>)
 800c0e0:	4413      	add	r3, r2
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7f4 f8fc 	bl	80002e0 <strlen>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	2b15      	cmp	r3, #21
 800c0ec:	d807      	bhi.n	800c0fe <logger_log+0x76>
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	4a44      	ldr	r2, [pc, #272]	; (800c204 <logger_log+0x17c>)
 800c0f2:	4413      	add	r3, r2
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7f4 f8f3 	bl	80002e0 <strlen>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	e000      	b.n	800c100 <logger_log+0x78>
 800c0fe:	2315      	movs	r3, #21
 800c100:	607b      	str	r3, [r7, #4]
			if (copied < LOGGER_LINE_LENGTH) {
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2b14      	cmp	r3, #20
 800c106:	d812      	bhi.n	800c12e <logger_log+0xa6>
				memset(&line_buffer.data[line_buffer.lines_used * LOGGER_LINE_SIZE + copied], ' ', LOGGER_LINE_LENGTH - copied);
 800c108:	4b3f      	ldr	r3, [pc, #252]	; (800c208 <logger_log+0x180>)
 800c10a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c10e:	461a      	mov	r2, r3
 800c110:	2316      	movs	r3, #22
 800c112:	fb02 f303 	mul.w	r3, r2, r3
 800c116:	461a      	mov	r2, r3
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	4413      	add	r3, r2
 800c11c:	4a3a      	ldr	r2, [pc, #232]	; (800c208 <logger_log+0x180>)
 800c11e:	1898      	adds	r0, r3, r2
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f1c3 0315 	rsb	r3, r3, #21
 800c126:	461a      	mov	r2, r3
 800c128:	2120      	movs	r1, #32
 800c12a:	f002 fef5 	bl	800ef18 <memset>
			}
			total_copied += copied;
 800c12e:	697a      	ldr	r2, [r7, #20]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	4413      	add	r3, r2
 800c134:	617b      	str	r3, [r7, #20]

			++line_buffer.lines_used;
 800c136:	4b34      	ldr	r3, [pc, #208]	; (800c208 <logger_log+0x180>)
 800c138:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c13c:	3301      	adds	r3, #1
 800c13e:	b2da      	uxtb	r2, r3
 800c140:	4b31      	ldr	r3, [pc, #196]	; (800c208 <logger_log+0x180>)
 800c142:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800c146:	e031      	b.n	800c1ac <logger_log+0x124>
		}
		else {
			memmove(&line_buffer.data[0], &line_buffer.data[LOGGER_LINE_SIZE], (LOGGER_LINES - 1) * LOGGER_LINE_SIZE); // Move all lines one line up
 800c148:	2242      	movs	r2, #66	; 0x42
 800c14a:	4931      	ldr	r1, [pc, #196]	; (800c210 <logger_log+0x188>)
 800c14c:	482e      	ldr	r0, [pc, #184]	; (800c208 <logger_log+0x180>)
 800c14e:	f002 fec9 	bl	800eee4 <memmove>
			snprintf(&line_buffer.data[(LOGGER_LINES - 1) * LOGGER_LINE_SIZE], LOGGER_LINE_SIZE, "%s", &msg_parsed[total_copied]); // Write to last line
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	4a2b      	ldr	r2, [pc, #172]	; (800c204 <logger_log+0x17c>)
 800c156:	4413      	add	r3, r2
 800c158:	4a2c      	ldr	r2, [pc, #176]	; (800c20c <logger_log+0x184>)
 800c15a:	2116      	movs	r1, #22
 800c15c:	482d      	ldr	r0, [pc, #180]	; (800c214 <logger_log+0x18c>)
 800c15e:	f002 fee3 	bl	800ef28 <sniprintf>

			const size_t copied = MIN(LOGGER_LINE_LENGTH, strlen(&msg_parsed[total_copied]));
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	4a27      	ldr	r2, [pc, #156]	; (800c204 <logger_log+0x17c>)
 800c166:	4413      	add	r3, r2
 800c168:	4618      	mov	r0, r3
 800c16a:	f7f4 f8b9 	bl	80002e0 <strlen>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b15      	cmp	r3, #21
 800c172:	d807      	bhi.n	800c184 <logger_log+0xfc>
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	4a23      	ldr	r2, [pc, #140]	; (800c204 <logger_log+0x17c>)
 800c178:	4413      	add	r3, r2
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7f4 f8b0 	bl	80002e0 <strlen>
 800c180:	4603      	mov	r3, r0
 800c182:	e000      	b.n	800c186 <logger_log+0xfe>
 800c184:	2315      	movs	r3, #21
 800c186:	60bb      	str	r3, [r7, #8]
			if (copied < LOGGER_LINE_LENGTH) {
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	2b14      	cmp	r3, #20
 800c18c:	d80a      	bhi.n	800c1a4 <logger_log+0x11c>
				memset(&line_buffer.data[(LOGGER_LINES - 1) * LOGGER_LINE_SIZE + copied], ' ', LOGGER_LINE_LENGTH - copied);
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	3342      	adds	r3, #66	; 0x42
 800c192:	4a1d      	ldr	r2, [pc, #116]	; (800c208 <logger_log+0x180>)
 800c194:	1898      	adds	r0, r3, r2
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	f1c3 0315 	rsb	r3, r3, #21
 800c19c:	461a      	mov	r2, r3
 800c19e:	2120      	movs	r1, #32
 800c1a0:	f002 feba 	bl	800ef18 <memset>
			}
			total_copied += copied;
 800c1a4:	697a      	ldr	r2, [r7, #20]
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	4413      	add	r3, r2
 800c1aa:	617b      	str	r3, [r7, #20]
	while (total_copied < length) {
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	697a      	ldr	r2, [r7, #20]
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	f4ff af7e 	bcc.w	800c0b2 <logger_log+0x2a>
		}
	}

	for (size_t i = 0; i < LOGGER_LINES; ++i) {
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	613b      	str	r3, [r7, #16]
 800c1ba:	e015      	b.n	800c1e8 <logger_log+0x160>
		ssd1306_SetCursor(0, i * LOGGER_FONT_HEIGHT);
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	b2db      	uxtb	r3, r3
 800c1c0:	00db      	lsls	r3, r3, #3
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	2000      	movs	r0, #0
 800c1c8:	f7f4 fba0 	bl	800090c <ssd1306_SetCursor>
		ssd1306_WriteString(&line_buffer.data[i * LOGGER_LINE_SIZE], Font_6x8, White);
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	2216      	movs	r2, #22
 800c1d0:	fb02 f303 	mul.w	r3, r2, r3
 800c1d4:	4a0c      	ldr	r2, [pc, #48]	; (800c208 <logger_log+0x180>)
 800c1d6:	1898      	adds	r0, r3, r2
 800c1d8:	4a0f      	ldr	r2, [pc, #60]	; (800c218 <logger_log+0x190>)
 800c1da:	2301      	movs	r3, #1
 800c1dc:	ca06      	ldmia	r2, {r1, r2}
 800c1de:	f7f4 fb6f 	bl	80008c0 <ssd1306_WriteString>
	for (size_t i = 0; i < LOGGER_LINES; ++i) {
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	613b      	str	r3, [r7, #16]
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	2b03      	cmp	r3, #3
 800c1ec:	d9e6      	bls.n	800c1bc <logger_log+0x134>
	}
	ssd1306_UpdateScreen();
 800c1ee:	f7f4 fa63 	bl	80006b8 <ssd1306_UpdateScreen>
 800c1f2:	e000      	b.n	800c1f6 <logger_log+0x16e>
		return;
 800c1f4:	bf00      	nop
}
 800c1f6:	3718      	adds	r7, #24
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c1fe:	b004      	add	sp, #16
 800c200:	4770      	bx	lr
 800c202:	bf00      	nop
 800c204:	c0010498 	.word	0xc0010498
 800c208:	c001043c 	.word	0xc001043c
 800c20c:	0800f94c 	.word	0x0800f94c
 800c210:	c0010452 	.word	0xc0010452
 800c214:	c001047e 	.word	0xc001047e
 800c218:	24000000 	.word	0x24000000

0800c21c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b084      	sub	sp, #16
 800c220:	af00      	add	r7, sp, #0
 800c222:	4603      	mov	r3, r0
 800c224:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c226:	79fb      	ldrb	r3, [r7, #7]
 800c228:	4a08      	ldr	r2, [pc, #32]	; (800c24c <disk_status+0x30>)
 800c22a:	009b      	lsls	r3, r3, #2
 800c22c:	4413      	add	r3, r2
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	685b      	ldr	r3, [r3, #4]
 800c232:	79fa      	ldrb	r2, [r7, #7]
 800c234:	4905      	ldr	r1, [pc, #20]	; (800c24c <disk_status+0x30>)
 800c236:	440a      	add	r2, r1
 800c238:	7a12      	ldrb	r2, [r2, #8]
 800c23a:	4610      	mov	r0, r2
 800c23c:	4798      	blx	r3
 800c23e:	4603      	mov	r3, r0
 800c240:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c242:	7bfb      	ldrb	r3, [r7, #15]
}
 800c244:	4618      	mov	r0, r3
 800c246:	3710      	adds	r7, #16
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}
 800c24c:	240004b8 	.word	0x240004b8

0800c250 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b084      	sub	sp, #16
 800c254:	af00      	add	r7, sp, #0
 800c256:	4603      	mov	r3, r0
 800c258:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c25a:	2300      	movs	r3, #0
 800c25c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c25e:	79fb      	ldrb	r3, [r7, #7]
 800c260:	4a0d      	ldr	r2, [pc, #52]	; (800c298 <disk_initialize+0x48>)
 800c262:	5cd3      	ldrb	r3, [r2, r3]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d111      	bne.n	800c28c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c268:	79fb      	ldrb	r3, [r7, #7]
 800c26a:	4a0b      	ldr	r2, [pc, #44]	; (800c298 <disk_initialize+0x48>)
 800c26c:	2101      	movs	r1, #1
 800c26e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c270:	79fb      	ldrb	r3, [r7, #7]
 800c272:	4a09      	ldr	r2, [pc, #36]	; (800c298 <disk_initialize+0x48>)
 800c274:	009b      	lsls	r3, r3, #2
 800c276:	4413      	add	r3, r2
 800c278:	685b      	ldr	r3, [r3, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	79fa      	ldrb	r2, [r7, #7]
 800c27e:	4906      	ldr	r1, [pc, #24]	; (800c298 <disk_initialize+0x48>)
 800c280:	440a      	add	r2, r1
 800c282:	7a12      	ldrb	r2, [r2, #8]
 800c284:	4610      	mov	r0, r2
 800c286:	4798      	blx	r3
 800c288:	4603      	mov	r3, r0
 800c28a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c28c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3710      	adds	r7, #16
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop
 800c298:	240004b8 	.word	0x240004b8

0800c29c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c29c:	b590      	push	{r4, r7, lr}
 800c29e:	b087      	sub	sp, #28
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	60b9      	str	r1, [r7, #8]
 800c2a4:	607a      	str	r2, [r7, #4]
 800c2a6:	603b      	str	r3, [r7, #0]
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c2ac:	7bfb      	ldrb	r3, [r7, #15]
 800c2ae:	4a0a      	ldr	r2, [pc, #40]	; (800c2d8 <disk_read+0x3c>)
 800c2b0:	009b      	lsls	r3, r3, #2
 800c2b2:	4413      	add	r3, r2
 800c2b4:	685b      	ldr	r3, [r3, #4]
 800c2b6:	689c      	ldr	r4, [r3, #8]
 800c2b8:	7bfb      	ldrb	r3, [r7, #15]
 800c2ba:	4a07      	ldr	r2, [pc, #28]	; (800c2d8 <disk_read+0x3c>)
 800c2bc:	4413      	add	r3, r2
 800c2be:	7a18      	ldrb	r0, [r3, #8]
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	68b9      	ldr	r1, [r7, #8]
 800c2c6:	47a0      	blx	r4
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	75fb      	strb	r3, [r7, #23]
  return res;
 800c2cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	371c      	adds	r7, #28
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd90      	pop	{r4, r7, pc}
 800c2d6:	bf00      	nop
 800c2d8:	240004b8 	.word	0x240004b8

0800c2dc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c2dc:	b590      	push	{r4, r7, lr}
 800c2de:	b087      	sub	sp, #28
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60b9      	str	r1, [r7, #8]
 800c2e4:	607a      	str	r2, [r7, #4]
 800c2e6:	603b      	str	r3, [r7, #0]
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c2ec:	7bfb      	ldrb	r3, [r7, #15]
 800c2ee:	4a0a      	ldr	r2, [pc, #40]	; (800c318 <disk_write+0x3c>)
 800c2f0:	009b      	lsls	r3, r3, #2
 800c2f2:	4413      	add	r3, r2
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	68dc      	ldr	r4, [r3, #12]
 800c2f8:	7bfb      	ldrb	r3, [r7, #15]
 800c2fa:	4a07      	ldr	r2, [pc, #28]	; (800c318 <disk_write+0x3c>)
 800c2fc:	4413      	add	r3, r2
 800c2fe:	7a18      	ldrb	r0, [r3, #8]
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	68b9      	ldr	r1, [r7, #8]
 800c306:	47a0      	blx	r4
 800c308:	4603      	mov	r3, r0
 800c30a:	75fb      	strb	r3, [r7, #23]
  return res;
 800c30c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c30e:	4618      	mov	r0, r3
 800c310:	371c      	adds	r7, #28
 800c312:	46bd      	mov	sp, r7
 800c314:	bd90      	pop	{r4, r7, pc}
 800c316:	bf00      	nop
 800c318:	240004b8 	.word	0x240004b8

0800c31c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	4603      	mov	r3, r0
 800c324:	603a      	str	r2, [r7, #0]
 800c326:	71fb      	strb	r3, [r7, #7]
 800c328:	460b      	mov	r3, r1
 800c32a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c32c:	79fb      	ldrb	r3, [r7, #7]
 800c32e:	4a09      	ldr	r2, [pc, #36]	; (800c354 <disk_ioctl+0x38>)
 800c330:	009b      	lsls	r3, r3, #2
 800c332:	4413      	add	r3, r2
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	691b      	ldr	r3, [r3, #16]
 800c338:	79fa      	ldrb	r2, [r7, #7]
 800c33a:	4906      	ldr	r1, [pc, #24]	; (800c354 <disk_ioctl+0x38>)
 800c33c:	440a      	add	r2, r1
 800c33e:	7a10      	ldrb	r0, [r2, #8]
 800c340:	79b9      	ldrb	r1, [r7, #6]
 800c342:	683a      	ldr	r2, [r7, #0]
 800c344:	4798      	blx	r3
 800c346:	4603      	mov	r3, r0
 800c348:	73fb      	strb	r3, [r7, #15]
  return res;
 800c34a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3710      	adds	r7, #16
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}
 800c354:	240004b8 	.word	0x240004b8

0800c358 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c358:	b480      	push	{r7}
 800c35a:	b085      	sub	sp, #20
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	3301      	adds	r3, #1
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c368:	89fb      	ldrh	r3, [r7, #14]
 800c36a:	021b      	lsls	r3, r3, #8
 800c36c:	b21a      	sxth	r2, r3
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	b21b      	sxth	r3, r3
 800c374:	4313      	orrs	r3, r2
 800c376:	b21b      	sxth	r3, r3
 800c378:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c37a:	89fb      	ldrh	r3, [r7, #14]
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3714      	adds	r7, #20
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr

0800c388 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c388:	b480      	push	{r7}
 800c38a:	b085      	sub	sp, #20
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	3303      	adds	r3, #3
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	021b      	lsls	r3, r3, #8
 800c39c:	687a      	ldr	r2, [r7, #4]
 800c39e:	3202      	adds	r2, #2
 800c3a0:	7812      	ldrb	r2, [r2, #0]
 800c3a2:	4313      	orrs	r3, r2
 800c3a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	021b      	lsls	r3, r3, #8
 800c3aa:	687a      	ldr	r2, [r7, #4]
 800c3ac:	3201      	adds	r2, #1
 800c3ae:	7812      	ldrb	r2, [r2, #0]
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	021b      	lsls	r3, r3, #8
 800c3b8:	687a      	ldr	r2, [r7, #4]
 800c3ba:	7812      	ldrb	r2, [r2, #0]
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	60fb      	str	r3, [r7, #12]
	return rv;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3714      	adds	r7, #20
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr

0800c3ce <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c3ce:	b480      	push	{r7}
 800c3d0:	b083      	sub	sp, #12
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
 800c3d6:	460b      	mov	r3, r1
 800c3d8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	1c5a      	adds	r2, r3, #1
 800c3de:	607a      	str	r2, [r7, #4]
 800c3e0:	887a      	ldrh	r2, [r7, #2]
 800c3e2:	b2d2      	uxtb	r2, r2
 800c3e4:	701a      	strb	r2, [r3, #0]
 800c3e6:	887b      	ldrh	r3, [r7, #2]
 800c3e8:	0a1b      	lsrs	r3, r3, #8
 800c3ea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	1c5a      	adds	r2, r3, #1
 800c3f0:	607a      	str	r2, [r7, #4]
 800c3f2:	887a      	ldrh	r2, [r7, #2]
 800c3f4:	b2d2      	uxtb	r2, r2
 800c3f6:	701a      	strb	r2, [r3, #0]
}
 800c3f8:	bf00      	nop
 800c3fa:	370c      	adds	r7, #12
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr

0800c404 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c404:	b480      	push	{r7}
 800c406:	b083      	sub	sp, #12
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	1c5a      	adds	r2, r3, #1
 800c412:	607a      	str	r2, [r7, #4]
 800c414:	683a      	ldr	r2, [r7, #0]
 800c416:	b2d2      	uxtb	r2, r2
 800c418:	701a      	strb	r2, [r3, #0]
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	0a1b      	lsrs	r3, r3, #8
 800c41e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	1c5a      	adds	r2, r3, #1
 800c424:	607a      	str	r2, [r7, #4]
 800c426:	683a      	ldr	r2, [r7, #0]
 800c428:	b2d2      	uxtb	r2, r2
 800c42a:	701a      	strb	r2, [r3, #0]
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	0a1b      	lsrs	r3, r3, #8
 800c430:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	1c5a      	adds	r2, r3, #1
 800c436:	607a      	str	r2, [r7, #4]
 800c438:	683a      	ldr	r2, [r7, #0]
 800c43a:	b2d2      	uxtb	r2, r2
 800c43c:	701a      	strb	r2, [r3, #0]
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	0a1b      	lsrs	r3, r3, #8
 800c442:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	1c5a      	adds	r2, r3, #1
 800c448:	607a      	str	r2, [r7, #4]
 800c44a:	683a      	ldr	r2, [r7, #0]
 800c44c:	b2d2      	uxtb	r2, r2
 800c44e:	701a      	strb	r2, [r3, #0]
}
 800c450:	bf00      	nop
 800c452:	370c      	adds	r7, #12
 800c454:	46bd      	mov	sp, r7
 800c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45a:	4770      	bx	lr

0800c45c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c45c:	b480      	push	{r7}
 800c45e:	b087      	sub	sp, #28
 800c460:	af00      	add	r7, sp, #0
 800c462:	60f8      	str	r0, [r7, #12]
 800c464:	60b9      	str	r1, [r7, #8]
 800c466:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d00d      	beq.n	800c492 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c476:	693a      	ldr	r2, [r7, #16]
 800c478:	1c53      	adds	r3, r2, #1
 800c47a:	613b      	str	r3, [r7, #16]
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	1c59      	adds	r1, r3, #1
 800c480:	6179      	str	r1, [r7, #20]
 800c482:	7812      	ldrb	r2, [r2, #0]
 800c484:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	3b01      	subs	r3, #1
 800c48a:	607b      	str	r3, [r7, #4]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d1f1      	bne.n	800c476 <mem_cpy+0x1a>
	}
}
 800c492:	bf00      	nop
 800c494:	371c      	adds	r7, #28
 800c496:	46bd      	mov	sp, r7
 800c498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49c:	4770      	bx	lr

0800c49e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c49e:	b480      	push	{r7}
 800c4a0:	b087      	sub	sp, #28
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	60f8      	str	r0, [r7, #12]
 800c4a6:	60b9      	str	r1, [r7, #8]
 800c4a8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	1c5a      	adds	r2, r3, #1
 800c4b2:	617a      	str	r2, [r7, #20]
 800c4b4:	68ba      	ldr	r2, [r7, #8]
 800c4b6:	b2d2      	uxtb	r2, r2
 800c4b8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	3b01      	subs	r3, #1
 800c4be:	607b      	str	r3, [r7, #4]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d1f3      	bne.n	800c4ae <mem_set+0x10>
}
 800c4c6:	bf00      	nop
 800c4c8:	bf00      	nop
 800c4ca:	371c      	adds	r7, #28
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr

0800c4d4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c4d4:	b480      	push	{r7}
 800c4d6:	b089      	sub	sp, #36	; 0x24
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	60f8      	str	r0, [r7, #12]
 800c4dc:	60b9      	str	r1, [r7, #8]
 800c4de:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	61fb      	str	r3, [r7, #28]
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c4ec:	69fb      	ldr	r3, [r7, #28]
 800c4ee:	1c5a      	adds	r2, r3, #1
 800c4f0:	61fa      	str	r2, [r7, #28]
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	69bb      	ldr	r3, [r7, #24]
 800c4f8:	1c5a      	adds	r2, r3, #1
 800c4fa:	61ba      	str	r2, [r7, #24]
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	1acb      	subs	r3, r1, r3
 800c500:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	3b01      	subs	r3, #1
 800c506:	607b      	str	r3, [r7, #4]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d002      	beq.n	800c514 <mem_cmp+0x40>
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d0eb      	beq.n	800c4ec <mem_cmp+0x18>

	return r;
 800c514:	697b      	ldr	r3, [r7, #20]
}
 800c516:	4618      	mov	r0, r3
 800c518:	3724      	adds	r7, #36	; 0x24
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr

0800c522 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c522:	b480      	push	{r7}
 800c524:	b083      	sub	sp, #12
 800c526:	af00      	add	r7, sp, #0
 800c528:	6078      	str	r0, [r7, #4]
 800c52a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c52c:	e002      	b.n	800c534 <chk_chr+0x12>
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	3301      	adds	r3, #1
 800c532:	607b      	str	r3, [r7, #4]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d005      	beq.n	800c548 <chk_chr+0x26>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	461a      	mov	r2, r3
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	4293      	cmp	r3, r2
 800c546:	d1f2      	bne.n	800c52e <chk_chr+0xc>
	return *str;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	781b      	ldrb	r3, [r3, #0]
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	370c      	adds	r7, #12
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c558:	b480      	push	{r7}
 800c55a:	b085      	sub	sp, #20
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c562:	2300      	movs	r3, #0
 800c564:	60bb      	str	r3, [r7, #8]
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	60fb      	str	r3, [r7, #12]
 800c56a:	e029      	b.n	800c5c0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c56c:	4a27      	ldr	r2, [pc, #156]	; (800c60c <chk_lock+0xb4>)
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	011b      	lsls	r3, r3, #4
 800c572:	4413      	add	r3, r2
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d01d      	beq.n	800c5b6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c57a:	4a24      	ldr	r2, [pc, #144]	; (800c60c <chk_lock+0xb4>)
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	011b      	lsls	r3, r3, #4
 800c580:	4413      	add	r3, r2
 800c582:	681a      	ldr	r2, [r3, #0]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	429a      	cmp	r2, r3
 800c58a:	d116      	bne.n	800c5ba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c58c:	4a1f      	ldr	r2, [pc, #124]	; (800c60c <chk_lock+0xb4>)
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	011b      	lsls	r3, r3, #4
 800c592:	4413      	add	r3, r2
 800c594:	3304      	adds	r3, #4
 800c596:	681a      	ldr	r2, [r3, #0]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d10c      	bne.n	800c5ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c5a0:	4a1a      	ldr	r2, [pc, #104]	; (800c60c <chk_lock+0xb4>)
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	011b      	lsls	r3, r3, #4
 800c5a6:	4413      	add	r3, r2
 800c5a8:	3308      	adds	r3, #8
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d102      	bne.n	800c5ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c5b4:	e007      	b.n	800c5c6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	3301      	adds	r3, #1
 800c5be:	60fb      	str	r3, [r7, #12]
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	2b01      	cmp	r3, #1
 800c5c4:	d9d2      	bls.n	800c56c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	2b02      	cmp	r3, #2
 800c5ca:	d109      	bne.n	800c5e0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d102      	bne.n	800c5d8 <chk_lock+0x80>
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	2b02      	cmp	r3, #2
 800c5d6:	d101      	bne.n	800c5dc <chk_lock+0x84>
 800c5d8:	2300      	movs	r3, #0
 800c5da:	e010      	b.n	800c5fe <chk_lock+0xa6>
 800c5dc:	2312      	movs	r3, #18
 800c5de:	e00e      	b.n	800c5fe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d108      	bne.n	800c5f8 <chk_lock+0xa0>
 800c5e6:	4a09      	ldr	r2, [pc, #36]	; (800c60c <chk_lock+0xb4>)
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	011b      	lsls	r3, r3, #4
 800c5ec:	4413      	add	r3, r2
 800c5ee:	330c      	adds	r3, #12
 800c5f0:	881b      	ldrh	r3, [r3, #0]
 800c5f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5f6:	d101      	bne.n	800c5fc <chk_lock+0xa4>
 800c5f8:	2310      	movs	r3, #16
 800c5fa:	e000      	b.n	800c5fe <chk_lock+0xa6>
 800c5fc:	2300      	movs	r3, #0
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3714      	adds	r7, #20
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr
 800c60a:	bf00      	nop
 800c60c:	24000298 	.word	0x24000298

0800c610 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c610:	b480      	push	{r7}
 800c612:	b083      	sub	sp, #12
 800c614:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c616:	2300      	movs	r3, #0
 800c618:	607b      	str	r3, [r7, #4]
 800c61a:	e002      	b.n	800c622 <enq_lock+0x12>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	3301      	adds	r3, #1
 800c620:	607b      	str	r3, [r7, #4]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2b01      	cmp	r3, #1
 800c626:	d806      	bhi.n	800c636 <enq_lock+0x26>
 800c628:	4a09      	ldr	r2, [pc, #36]	; (800c650 <enq_lock+0x40>)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	011b      	lsls	r3, r3, #4
 800c62e:	4413      	add	r3, r2
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d1f2      	bne.n	800c61c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2b02      	cmp	r3, #2
 800c63a:	bf14      	ite	ne
 800c63c:	2301      	movne	r3, #1
 800c63e:	2300      	moveq	r3, #0
 800c640:	b2db      	uxtb	r3, r3
}
 800c642:	4618      	mov	r0, r3
 800c644:	370c      	adds	r7, #12
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr
 800c64e:	bf00      	nop
 800c650:	24000298 	.word	0x24000298

0800c654 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c654:	b480      	push	{r7}
 800c656:	b085      	sub	sp, #20
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c65e:	2300      	movs	r3, #0
 800c660:	60fb      	str	r3, [r7, #12]
 800c662:	e01f      	b.n	800c6a4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c664:	4a41      	ldr	r2, [pc, #260]	; (800c76c <inc_lock+0x118>)
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	011b      	lsls	r3, r3, #4
 800c66a:	4413      	add	r3, r2
 800c66c:	681a      	ldr	r2, [r3, #0]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	429a      	cmp	r2, r3
 800c674:	d113      	bne.n	800c69e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c676:	4a3d      	ldr	r2, [pc, #244]	; (800c76c <inc_lock+0x118>)
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	011b      	lsls	r3, r3, #4
 800c67c:	4413      	add	r3, r2
 800c67e:	3304      	adds	r3, #4
 800c680:	681a      	ldr	r2, [r3, #0]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c686:	429a      	cmp	r2, r3
 800c688:	d109      	bne.n	800c69e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c68a:	4a38      	ldr	r2, [pc, #224]	; (800c76c <inc_lock+0x118>)
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	011b      	lsls	r3, r3, #4
 800c690:	4413      	add	r3, r2
 800c692:	3308      	adds	r3, #8
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d006      	beq.n	800c6ac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	3301      	adds	r3, #1
 800c6a2:	60fb      	str	r3, [r7, #12]
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2b01      	cmp	r3, #1
 800c6a8:	d9dc      	bls.n	800c664 <inc_lock+0x10>
 800c6aa:	e000      	b.n	800c6ae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c6ac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2b02      	cmp	r3, #2
 800c6b2:	d132      	bne.n	800c71a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	60fb      	str	r3, [r7, #12]
 800c6b8:	e002      	b.n	800c6c0 <inc_lock+0x6c>
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	3301      	adds	r3, #1
 800c6be:	60fb      	str	r3, [r7, #12]
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	2b01      	cmp	r3, #1
 800c6c4:	d806      	bhi.n	800c6d4 <inc_lock+0x80>
 800c6c6:	4a29      	ldr	r2, [pc, #164]	; (800c76c <inc_lock+0x118>)
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	011b      	lsls	r3, r3, #4
 800c6cc:	4413      	add	r3, r2
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d1f2      	bne.n	800c6ba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	2b02      	cmp	r3, #2
 800c6d8:	d101      	bne.n	800c6de <inc_lock+0x8a>
 800c6da:	2300      	movs	r3, #0
 800c6dc:	e040      	b.n	800c760 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681a      	ldr	r2, [r3, #0]
 800c6e2:	4922      	ldr	r1, [pc, #136]	; (800c76c <inc_lock+0x118>)
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	011b      	lsls	r3, r3, #4
 800c6e8:	440b      	add	r3, r1
 800c6ea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	689a      	ldr	r2, [r3, #8]
 800c6f0:	491e      	ldr	r1, [pc, #120]	; (800c76c <inc_lock+0x118>)
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	011b      	lsls	r3, r3, #4
 800c6f6:	440b      	add	r3, r1
 800c6f8:	3304      	adds	r3, #4
 800c6fa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	695a      	ldr	r2, [r3, #20]
 800c700:	491a      	ldr	r1, [pc, #104]	; (800c76c <inc_lock+0x118>)
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	011b      	lsls	r3, r3, #4
 800c706:	440b      	add	r3, r1
 800c708:	3308      	adds	r3, #8
 800c70a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c70c:	4a17      	ldr	r2, [pc, #92]	; (800c76c <inc_lock+0x118>)
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	011b      	lsls	r3, r3, #4
 800c712:	4413      	add	r3, r2
 800c714:	330c      	adds	r3, #12
 800c716:	2200      	movs	r2, #0
 800c718:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d009      	beq.n	800c734 <inc_lock+0xe0>
 800c720:	4a12      	ldr	r2, [pc, #72]	; (800c76c <inc_lock+0x118>)
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	011b      	lsls	r3, r3, #4
 800c726:	4413      	add	r3, r2
 800c728:	330c      	adds	r3, #12
 800c72a:	881b      	ldrh	r3, [r3, #0]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d001      	beq.n	800c734 <inc_lock+0xe0>
 800c730:	2300      	movs	r3, #0
 800c732:	e015      	b.n	800c760 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d108      	bne.n	800c74c <inc_lock+0xf8>
 800c73a:	4a0c      	ldr	r2, [pc, #48]	; (800c76c <inc_lock+0x118>)
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	011b      	lsls	r3, r3, #4
 800c740:	4413      	add	r3, r2
 800c742:	330c      	adds	r3, #12
 800c744:	881b      	ldrh	r3, [r3, #0]
 800c746:	3301      	adds	r3, #1
 800c748:	b29a      	uxth	r2, r3
 800c74a:	e001      	b.n	800c750 <inc_lock+0xfc>
 800c74c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c750:	4906      	ldr	r1, [pc, #24]	; (800c76c <inc_lock+0x118>)
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	011b      	lsls	r3, r3, #4
 800c756:	440b      	add	r3, r1
 800c758:	330c      	adds	r3, #12
 800c75a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	3301      	adds	r3, #1
}
 800c760:	4618      	mov	r0, r3
 800c762:	3714      	adds	r7, #20
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr
 800c76c:	24000298 	.word	0x24000298

0800c770 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c770:	b480      	push	{r7}
 800c772:	b085      	sub	sp, #20
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	3b01      	subs	r3, #1
 800c77c:	607b      	str	r3, [r7, #4]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2b01      	cmp	r3, #1
 800c782:	d825      	bhi.n	800c7d0 <dec_lock+0x60>
		n = Files[i].ctr;
 800c784:	4a17      	ldr	r2, [pc, #92]	; (800c7e4 <dec_lock+0x74>)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	011b      	lsls	r3, r3, #4
 800c78a:	4413      	add	r3, r2
 800c78c:	330c      	adds	r3, #12
 800c78e:	881b      	ldrh	r3, [r3, #0]
 800c790:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c792:	89fb      	ldrh	r3, [r7, #14]
 800c794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c798:	d101      	bne.n	800c79e <dec_lock+0x2e>
 800c79a:	2300      	movs	r3, #0
 800c79c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c79e:	89fb      	ldrh	r3, [r7, #14]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d002      	beq.n	800c7aa <dec_lock+0x3a>
 800c7a4:	89fb      	ldrh	r3, [r7, #14]
 800c7a6:	3b01      	subs	r3, #1
 800c7a8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c7aa:	4a0e      	ldr	r2, [pc, #56]	; (800c7e4 <dec_lock+0x74>)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	011b      	lsls	r3, r3, #4
 800c7b0:	4413      	add	r3, r2
 800c7b2:	330c      	adds	r3, #12
 800c7b4:	89fa      	ldrh	r2, [r7, #14]
 800c7b6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c7b8:	89fb      	ldrh	r3, [r7, #14]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d105      	bne.n	800c7ca <dec_lock+0x5a>
 800c7be:	4a09      	ldr	r2, [pc, #36]	; (800c7e4 <dec_lock+0x74>)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	011b      	lsls	r3, r3, #4
 800c7c4:	4413      	add	r3, r2
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	737b      	strb	r3, [r7, #13]
 800c7ce:	e001      	b.n	800c7d4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c7d0:	2302      	movs	r3, #2
 800c7d2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c7d4:	7b7b      	ldrb	r3, [r7, #13]
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3714      	adds	r7, #20
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e0:	4770      	bx	lr
 800c7e2:	bf00      	nop
 800c7e4:	24000298 	.word	0x24000298

0800c7e8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b085      	sub	sp, #20
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	60fb      	str	r3, [r7, #12]
 800c7f4:	e010      	b.n	800c818 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c7f6:	4a0d      	ldr	r2, [pc, #52]	; (800c82c <clear_lock+0x44>)
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	011b      	lsls	r3, r3, #4
 800c7fc:	4413      	add	r3, r2
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	429a      	cmp	r2, r3
 800c804:	d105      	bne.n	800c812 <clear_lock+0x2a>
 800c806:	4a09      	ldr	r2, [pc, #36]	; (800c82c <clear_lock+0x44>)
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	011b      	lsls	r3, r3, #4
 800c80c:	4413      	add	r3, r2
 800c80e:	2200      	movs	r2, #0
 800c810:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	3301      	adds	r3, #1
 800c816:	60fb      	str	r3, [r7, #12]
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	d9eb      	bls.n	800c7f6 <clear_lock+0xe>
	}
}
 800c81e:	bf00      	nop
 800c820:	bf00      	nop
 800c822:	3714      	adds	r7, #20
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr
 800c82c:	24000298 	.word	0x24000298

0800c830 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b086      	sub	sp, #24
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c838:	2300      	movs	r3, #0
 800c83a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	78db      	ldrb	r3, [r3, #3]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d034      	beq.n	800c8ae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c848:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	7858      	ldrb	r0, [r3, #1]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c854:	2301      	movs	r3, #1
 800c856:	697a      	ldr	r2, [r7, #20]
 800c858:	f7ff fd40 	bl	800c2dc <disk_write>
 800c85c:	4603      	mov	r3, r0
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d002      	beq.n	800c868 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c862:	2301      	movs	r3, #1
 800c864:	73fb      	strb	r3, [r7, #15]
 800c866:	e022      	b.n	800c8ae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2200      	movs	r2, #0
 800c86c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c872:	697a      	ldr	r2, [r7, #20]
 800c874:	1ad2      	subs	r2, r2, r3
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	69db      	ldr	r3, [r3, #28]
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d217      	bcs.n	800c8ae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	789b      	ldrb	r3, [r3, #2]
 800c882:	613b      	str	r3, [r7, #16]
 800c884:	e010      	b.n	800c8a8 <sync_window+0x78>
					wsect += fs->fsize;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	69db      	ldr	r3, [r3, #28]
 800c88a:	697a      	ldr	r2, [r7, #20]
 800c88c:	4413      	add	r3, r2
 800c88e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	7858      	ldrb	r0, [r3, #1]
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c89a:	2301      	movs	r3, #1
 800c89c:	697a      	ldr	r2, [r7, #20]
 800c89e:	f7ff fd1d 	bl	800c2dc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	3b01      	subs	r3, #1
 800c8a6:	613b      	str	r3, [r7, #16]
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	2b01      	cmp	r3, #1
 800c8ac:	d8eb      	bhi.n	800c886 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c8ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3718      	adds	r7, #24
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b084      	sub	sp, #16
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8ca:	683a      	ldr	r2, [r7, #0]
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	d01b      	beq.n	800c908 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f7ff ffad 	bl	800c830 <sync_window>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c8da:	7bfb      	ldrb	r3, [r7, #15]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d113      	bne.n	800c908 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	7858      	ldrb	r0, [r3, #1]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	683a      	ldr	r2, [r7, #0]
 800c8ee:	f7ff fcd5 	bl	800c29c <disk_read>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d004      	beq.n	800c902 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c8f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c8fc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c8fe:	2301      	movs	r3, #1
 800c900:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	683a      	ldr	r2, [r7, #0]
 800c906:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800c908:	7bfb      	ldrb	r3, [r7, #15]
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3710      	adds	r7, #16
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}
	...

0800c914 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b084      	sub	sp, #16
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f7ff ff87 	bl	800c830 <sync_window>
 800c922:	4603      	mov	r3, r0
 800c924:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c926:	7bfb      	ldrb	r3, [r7, #15]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d158      	bne.n	800c9de <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	2b03      	cmp	r3, #3
 800c932:	d148      	bne.n	800c9c6 <sync_fs+0xb2>
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	791b      	ldrb	r3, [r3, #4]
 800c938:	2b01      	cmp	r3, #1
 800c93a:	d144      	bne.n	800c9c6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	3334      	adds	r3, #52	; 0x34
 800c940:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c944:	2100      	movs	r1, #0
 800c946:	4618      	mov	r0, r3
 800c948:	f7ff fda9 	bl	800c49e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	3334      	adds	r3, #52	; 0x34
 800c950:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c954:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c958:	4618      	mov	r0, r3
 800c95a:	f7ff fd38 	bl	800c3ce <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	3334      	adds	r3, #52	; 0x34
 800c962:	4921      	ldr	r1, [pc, #132]	; (800c9e8 <sync_fs+0xd4>)
 800c964:	4618      	mov	r0, r3
 800c966:	f7ff fd4d 	bl	800c404 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	3334      	adds	r3, #52	; 0x34
 800c96e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c972:	491e      	ldr	r1, [pc, #120]	; (800c9ec <sync_fs+0xd8>)
 800c974:	4618      	mov	r0, r3
 800c976:	f7ff fd45 	bl	800c404 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	3334      	adds	r3, #52	; 0x34
 800c97e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	695b      	ldr	r3, [r3, #20]
 800c986:	4619      	mov	r1, r3
 800c988:	4610      	mov	r0, r2
 800c98a:	f7ff fd3b 	bl	800c404 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	3334      	adds	r3, #52	; 0x34
 800c992:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	691b      	ldr	r3, [r3, #16]
 800c99a:	4619      	mov	r1, r3
 800c99c:	4610      	mov	r0, r2
 800c99e:	f7ff fd31 	bl	800c404 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6a1b      	ldr	r3, [r3, #32]
 800c9a6:	1c5a      	adds	r2, r3, #1
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	7858      	ldrb	r0, [r3, #1]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	f7ff fc8e 	bl	800c2dc <disk_write>
			fs->fsi_flag = 0;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	785b      	ldrb	r3, [r3, #1]
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	2100      	movs	r1, #0
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f7ff fca4 	bl	800c31c <disk_ioctl>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d001      	beq.n	800c9de <sync_fs+0xca>
 800c9da:	2301      	movs	r3, #1
 800c9dc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c9de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3710      	adds	r7, #16
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	41615252 	.word	0x41615252
 800c9ec:	61417272 	.word	0x61417272

0800c9f0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b083      	sub	sp, #12
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	3b02      	subs	r3, #2
 800c9fe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	699b      	ldr	r3, [r3, #24]
 800ca04:	3b02      	subs	r3, #2
 800ca06:	683a      	ldr	r2, [r7, #0]
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d301      	bcc.n	800ca10 <clust2sect+0x20>
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	e008      	b.n	800ca22 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	895b      	ldrh	r3, [r3, #10]
 800ca14:	461a      	mov	r2, r3
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	fb03 f202 	mul.w	r2, r3, r2
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca20:	4413      	add	r3, r2
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	370c      	adds	r7, #12
 800ca26:	46bd      	mov	sp, r7
 800ca28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2c:	4770      	bx	lr

0800ca2e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ca2e:	b580      	push	{r7, lr}
 800ca30:	b086      	sub	sp, #24
 800ca32:	af00      	add	r7, sp, #0
 800ca34:	6078      	str	r0, [r7, #4]
 800ca36:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	d904      	bls.n	800ca4e <get_fat+0x20>
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	699b      	ldr	r3, [r3, #24]
 800ca48:	683a      	ldr	r2, [r7, #0]
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d302      	bcc.n	800ca54 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ca4e:	2301      	movs	r3, #1
 800ca50:	617b      	str	r3, [r7, #20]
 800ca52:	e08f      	b.n	800cb74 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ca54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca58:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	2b03      	cmp	r3, #3
 800ca60:	d062      	beq.n	800cb28 <get_fat+0xfa>
 800ca62:	2b03      	cmp	r3, #3
 800ca64:	dc7c      	bgt.n	800cb60 <get_fat+0x132>
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	d002      	beq.n	800ca70 <get_fat+0x42>
 800ca6a:	2b02      	cmp	r3, #2
 800ca6c:	d042      	beq.n	800caf4 <get_fat+0xc6>
 800ca6e:	e077      	b.n	800cb60 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	60fb      	str	r3, [r7, #12]
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	085b      	lsrs	r3, r3, #1
 800ca78:	68fa      	ldr	r2, [r7, #12]
 800ca7a:	4413      	add	r3, r2
 800ca7c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	0a5b      	lsrs	r3, r3, #9
 800ca86:	4413      	add	r3, r2
 800ca88:	4619      	mov	r1, r3
 800ca8a:	6938      	ldr	r0, [r7, #16]
 800ca8c:	f7ff ff14 	bl	800c8b8 <move_window>
 800ca90:	4603      	mov	r3, r0
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d167      	bne.n	800cb66 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	1c5a      	adds	r2, r3, #1
 800ca9a:	60fa      	str	r2, [r7, #12]
 800ca9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caa0:	693a      	ldr	r2, [r7, #16]
 800caa2:	4413      	add	r3, r2
 800caa4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800caa8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800caaa:	693b      	ldr	r3, [r7, #16]
 800caac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	0a5b      	lsrs	r3, r3, #9
 800cab2:	4413      	add	r3, r2
 800cab4:	4619      	mov	r1, r3
 800cab6:	6938      	ldr	r0, [r7, #16]
 800cab8:	f7ff fefe 	bl	800c8b8 <move_window>
 800cabc:	4603      	mov	r3, r0
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d153      	bne.n	800cb6a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cac8:	693a      	ldr	r2, [r7, #16]
 800caca:	4413      	add	r3, r2
 800cacc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cad0:	021b      	lsls	r3, r3, #8
 800cad2:	461a      	mov	r2, r3
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	4313      	orrs	r3, r2
 800cad8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	f003 0301 	and.w	r3, r3, #1
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d002      	beq.n	800caea <get_fat+0xbc>
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	091b      	lsrs	r3, r3, #4
 800cae8:	e002      	b.n	800caf0 <get_fat+0xc2>
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800caf0:	617b      	str	r3, [r7, #20]
			break;
 800caf2:	e03f      	b.n	800cb74 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	0a1b      	lsrs	r3, r3, #8
 800cafc:	4413      	add	r3, r2
 800cafe:	4619      	mov	r1, r3
 800cb00:	6938      	ldr	r0, [r7, #16]
 800cb02:	f7ff fed9 	bl	800c8b8 <move_window>
 800cb06:	4603      	mov	r3, r0
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d130      	bne.n	800cb6e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	005b      	lsls	r3, r3, #1
 800cb16:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800cb1a:	4413      	add	r3, r2
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f7ff fc1b 	bl	800c358 <ld_word>
 800cb22:	4603      	mov	r3, r0
 800cb24:	617b      	str	r3, [r7, #20]
			break;
 800cb26:	e025      	b.n	800cb74 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	09db      	lsrs	r3, r3, #7
 800cb30:	4413      	add	r3, r2
 800cb32:	4619      	mov	r1, r3
 800cb34:	6938      	ldr	r0, [r7, #16]
 800cb36:	f7ff febf 	bl	800c8b8 <move_window>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d118      	bne.n	800cb72 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cb40:	693b      	ldr	r3, [r7, #16]
 800cb42:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	009b      	lsls	r3, r3, #2
 800cb4a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cb4e:	4413      	add	r3, r2
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7ff fc19 	bl	800c388 <ld_dword>
 800cb56:	4603      	mov	r3, r0
 800cb58:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cb5c:	617b      	str	r3, [r7, #20]
			break;
 800cb5e:	e009      	b.n	800cb74 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cb60:	2301      	movs	r3, #1
 800cb62:	617b      	str	r3, [r7, #20]
 800cb64:	e006      	b.n	800cb74 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cb66:	bf00      	nop
 800cb68:	e004      	b.n	800cb74 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cb6a:	bf00      	nop
 800cb6c:	e002      	b.n	800cb74 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cb6e:	bf00      	nop
 800cb70:	e000      	b.n	800cb74 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cb72:	bf00      	nop
		}
	}

	return val;
 800cb74:	697b      	ldr	r3, [r7, #20]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3718      	adds	r7, #24
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}

0800cb7e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cb7e:	b590      	push	{r4, r7, lr}
 800cb80:	b089      	sub	sp, #36	; 0x24
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	60f8      	str	r0, [r7, #12]
 800cb86:	60b9      	str	r1, [r7, #8]
 800cb88:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cb8a:	2302      	movs	r3, #2
 800cb8c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	f240 80d2 	bls.w	800cd3a <put_fat+0x1bc>
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	699b      	ldr	r3, [r3, #24]
 800cb9a:	68ba      	ldr	r2, [r7, #8]
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	f080 80cc 	bcs.w	800cd3a <put_fat+0x1bc>
		switch (fs->fs_type) {
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	781b      	ldrb	r3, [r3, #0]
 800cba6:	2b03      	cmp	r3, #3
 800cba8:	f000 8096 	beq.w	800ccd8 <put_fat+0x15a>
 800cbac:	2b03      	cmp	r3, #3
 800cbae:	f300 80cd 	bgt.w	800cd4c <put_fat+0x1ce>
 800cbb2:	2b01      	cmp	r3, #1
 800cbb4:	d002      	beq.n	800cbbc <put_fat+0x3e>
 800cbb6:	2b02      	cmp	r3, #2
 800cbb8:	d06e      	beq.n	800cc98 <put_fat+0x11a>
 800cbba:	e0c7      	b.n	800cd4c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	61bb      	str	r3, [r7, #24]
 800cbc0:	69bb      	ldr	r3, [r7, #24]
 800cbc2:	085b      	lsrs	r3, r3, #1
 800cbc4:	69ba      	ldr	r2, [r7, #24]
 800cbc6:	4413      	add	r3, r2
 800cbc8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cbce:	69bb      	ldr	r3, [r7, #24]
 800cbd0:	0a5b      	lsrs	r3, r3, #9
 800cbd2:	4413      	add	r3, r2
 800cbd4:	4619      	mov	r1, r3
 800cbd6:	68f8      	ldr	r0, [r7, #12]
 800cbd8:	f7ff fe6e 	bl	800c8b8 <move_window>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cbe0:	7ffb      	ldrb	r3, [r7, #31]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	f040 80ab 	bne.w	800cd3e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cbee:	69bb      	ldr	r3, [r7, #24]
 800cbf0:	1c59      	adds	r1, r3, #1
 800cbf2:	61b9      	str	r1, [r7, #24]
 800cbf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbf8:	4413      	add	r3, r2
 800cbfa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	f003 0301 	and.w	r3, r3, #1
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d00d      	beq.n	800cc22 <put_fat+0xa4>
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	b25b      	sxtb	r3, r3
 800cc0c:	f003 030f 	and.w	r3, r3, #15
 800cc10:	b25a      	sxtb	r2, r3
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	b2db      	uxtb	r3, r3
 800cc16:	011b      	lsls	r3, r3, #4
 800cc18:	b25b      	sxtb	r3, r3
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	b25b      	sxtb	r3, r3
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	e001      	b.n	800cc26 <put_fat+0xa8>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	b2db      	uxtb	r3, r3
 800cc26:	697a      	ldr	r2, [r7, #20]
 800cc28:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	2201      	movs	r2, #1
 800cc2e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc34:	69bb      	ldr	r3, [r7, #24]
 800cc36:	0a5b      	lsrs	r3, r3, #9
 800cc38:	4413      	add	r3, r2
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	68f8      	ldr	r0, [r7, #12]
 800cc3e:	f7ff fe3b 	bl	800c8b8 <move_window>
 800cc42:	4603      	mov	r3, r0
 800cc44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cc46:	7ffb      	ldrb	r3, [r7, #31]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d17a      	bne.n	800cd42 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cc52:	69bb      	ldr	r3, [r7, #24]
 800cc54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc58:	4413      	add	r3, r2
 800cc5a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	f003 0301 	and.w	r3, r3, #1
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d003      	beq.n	800cc6e <put_fat+0xf0>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	091b      	lsrs	r3, r3, #4
 800cc6a:	b2db      	uxtb	r3, r3
 800cc6c:	e00e      	b.n	800cc8c <put_fat+0x10e>
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	b25b      	sxtb	r3, r3
 800cc74:	f023 030f 	bic.w	r3, r3, #15
 800cc78:	b25a      	sxtb	r2, r3
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	0a1b      	lsrs	r3, r3, #8
 800cc7e:	b25b      	sxtb	r3, r3
 800cc80:	f003 030f 	and.w	r3, r3, #15
 800cc84:	b25b      	sxtb	r3, r3
 800cc86:	4313      	orrs	r3, r2
 800cc88:	b25b      	sxtb	r3, r3
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	697a      	ldr	r2, [r7, #20]
 800cc8e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	2201      	movs	r2, #1
 800cc94:	70da      	strb	r2, [r3, #3]
			break;
 800cc96:	e059      	b.n	800cd4c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	0a1b      	lsrs	r3, r3, #8
 800cca0:	4413      	add	r3, r2
 800cca2:	4619      	mov	r1, r3
 800cca4:	68f8      	ldr	r0, [r7, #12]
 800cca6:	f7ff fe07 	bl	800c8b8 <move_window>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ccae:	7ffb      	ldrb	r3, [r7, #31]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d148      	bne.n	800cd46 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	005b      	lsls	r3, r3, #1
 800ccbe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ccc2:	4413      	add	r3, r2
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	b292      	uxth	r2, r2
 800ccc8:	4611      	mov	r1, r2
 800ccca:	4618      	mov	r0, r3
 800cccc:	f7ff fb7f 	bl	800c3ce <st_word>
			fs->wflag = 1;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	70da      	strb	r2, [r3, #3]
			break;
 800ccd6:	e039      	b.n	800cd4c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	09db      	lsrs	r3, r3, #7
 800cce0:	4413      	add	r3, r2
 800cce2:	4619      	mov	r1, r3
 800cce4:	68f8      	ldr	r0, [r7, #12]
 800cce6:	f7ff fde7 	bl	800c8b8 <move_window>
 800ccea:	4603      	mov	r3, r0
 800ccec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ccee:	7ffb      	ldrb	r3, [r7, #31]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d12a      	bne.n	800cd4a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	009b      	lsls	r3, r3, #2
 800cd04:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cd08:	4413      	add	r3, r2
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7ff fb3c 	bl	800c388 <ld_dword>
 800cd10:	4603      	mov	r3, r0
 800cd12:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cd16:	4323      	orrs	r3, r4
 800cd18:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	009b      	lsls	r3, r3, #2
 800cd24:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cd28:	4413      	add	r3, r2
 800cd2a:	6879      	ldr	r1, [r7, #4]
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7ff fb69 	bl	800c404 <st_dword>
			fs->wflag = 1;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	2201      	movs	r2, #1
 800cd36:	70da      	strb	r2, [r3, #3]
			break;
 800cd38:	e008      	b.n	800cd4c <put_fat+0x1ce>
		}
	}
 800cd3a:	bf00      	nop
 800cd3c:	e006      	b.n	800cd4c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cd3e:	bf00      	nop
 800cd40:	e004      	b.n	800cd4c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cd42:	bf00      	nop
 800cd44:	e002      	b.n	800cd4c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cd46:	bf00      	nop
 800cd48:	e000      	b.n	800cd4c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cd4a:	bf00      	nop
	return res;
 800cd4c:	7ffb      	ldrb	r3, [r7, #31]
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3724      	adds	r7, #36	; 0x24
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd90      	pop	{r4, r7, pc}

0800cd56 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cd56:	b580      	push	{r7, lr}
 800cd58:	b088      	sub	sp, #32
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	60f8      	str	r0, [r7, #12]
 800cd5e:	60b9      	str	r1, [r7, #8]
 800cd60:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800cd62:	2300      	movs	r3, #0
 800cd64:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	2b01      	cmp	r3, #1
 800cd70:	d904      	bls.n	800cd7c <remove_chain+0x26>
 800cd72:	69bb      	ldr	r3, [r7, #24]
 800cd74:	699b      	ldr	r3, [r3, #24]
 800cd76:	68ba      	ldr	r2, [r7, #8]
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d301      	bcc.n	800cd80 <remove_chain+0x2a>
 800cd7c:	2302      	movs	r3, #2
 800cd7e:	e04b      	b.n	800ce18 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d00c      	beq.n	800cda0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cd86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd8a:	6879      	ldr	r1, [r7, #4]
 800cd8c:	69b8      	ldr	r0, [r7, #24]
 800cd8e:	f7ff fef6 	bl	800cb7e <put_fat>
 800cd92:	4603      	mov	r3, r0
 800cd94:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cd96:	7ffb      	ldrb	r3, [r7, #31]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d001      	beq.n	800cda0 <remove_chain+0x4a>
 800cd9c:	7ffb      	ldrb	r3, [r7, #31]
 800cd9e:	e03b      	b.n	800ce18 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cda0:	68b9      	ldr	r1, [r7, #8]
 800cda2:	68f8      	ldr	r0, [r7, #12]
 800cda4:	f7ff fe43 	bl	800ca2e <get_fat>
 800cda8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d031      	beq.n	800ce14 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	2b01      	cmp	r3, #1
 800cdb4:	d101      	bne.n	800cdba <remove_chain+0x64>
 800cdb6:	2302      	movs	r3, #2
 800cdb8:	e02e      	b.n	800ce18 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdc0:	d101      	bne.n	800cdc6 <remove_chain+0x70>
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	e028      	b.n	800ce18 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	68b9      	ldr	r1, [r7, #8]
 800cdca:	69b8      	ldr	r0, [r7, #24]
 800cdcc:	f7ff fed7 	bl	800cb7e <put_fat>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cdd4:	7ffb      	ldrb	r3, [r7, #31]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d001      	beq.n	800cdde <remove_chain+0x88>
 800cdda:	7ffb      	ldrb	r3, [r7, #31]
 800cddc:	e01c      	b.n	800ce18 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cdde:	69bb      	ldr	r3, [r7, #24]
 800cde0:	695a      	ldr	r2, [r3, #20]
 800cde2:	69bb      	ldr	r3, [r7, #24]
 800cde4:	699b      	ldr	r3, [r3, #24]
 800cde6:	3b02      	subs	r3, #2
 800cde8:	429a      	cmp	r2, r3
 800cdea:	d20b      	bcs.n	800ce04 <remove_chain+0xae>
			fs->free_clst++;
 800cdec:	69bb      	ldr	r3, [r7, #24]
 800cdee:	695b      	ldr	r3, [r3, #20]
 800cdf0:	1c5a      	adds	r2, r3, #1
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800cdf6:	69bb      	ldr	r3, [r7, #24]
 800cdf8:	791b      	ldrb	r3, [r3, #4]
 800cdfa:	f043 0301 	orr.w	r3, r3, #1
 800cdfe:	b2da      	uxtb	r2, r3
 800ce00:	69bb      	ldr	r3, [r7, #24]
 800ce02:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ce08:	69bb      	ldr	r3, [r7, #24]
 800ce0a:	699b      	ldr	r3, [r3, #24]
 800ce0c:	68ba      	ldr	r2, [r7, #8]
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d3c6      	bcc.n	800cda0 <remove_chain+0x4a>
 800ce12:	e000      	b.n	800ce16 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ce14:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ce16:	2300      	movs	r3, #0
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3720      	adds	r7, #32
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}

0800ce20 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b088      	sub	sp, #32
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d10d      	bne.n	800ce52 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ce36:	693b      	ldr	r3, [r7, #16]
 800ce38:	691b      	ldr	r3, [r3, #16]
 800ce3a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ce3c:	69bb      	ldr	r3, [r7, #24]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d004      	beq.n	800ce4c <create_chain+0x2c>
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	699b      	ldr	r3, [r3, #24]
 800ce46:	69ba      	ldr	r2, [r7, #24]
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d31b      	bcc.n	800ce84 <create_chain+0x64>
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	61bb      	str	r3, [r7, #24]
 800ce50:	e018      	b.n	800ce84 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ce52:	6839      	ldr	r1, [r7, #0]
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f7ff fdea 	bl	800ca2e <get_fat>
 800ce5a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	2b01      	cmp	r3, #1
 800ce60:	d801      	bhi.n	800ce66 <create_chain+0x46>
 800ce62:	2301      	movs	r3, #1
 800ce64:	e070      	b.n	800cf48 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce6c:	d101      	bne.n	800ce72 <create_chain+0x52>
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	e06a      	b.n	800cf48 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ce72:	693b      	ldr	r3, [r7, #16]
 800ce74:	699b      	ldr	r3, [r3, #24]
 800ce76:	68fa      	ldr	r2, [r7, #12]
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d201      	bcs.n	800ce80 <create_chain+0x60>
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	e063      	b.n	800cf48 <create_chain+0x128>
		scl = clst;
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ce84:	69bb      	ldr	r3, [r7, #24]
 800ce86:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ce88:	69fb      	ldr	r3, [r7, #28]
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	699b      	ldr	r3, [r3, #24]
 800ce92:	69fa      	ldr	r2, [r7, #28]
 800ce94:	429a      	cmp	r2, r3
 800ce96:	d307      	bcc.n	800cea8 <create_chain+0x88>
				ncl = 2;
 800ce98:	2302      	movs	r3, #2
 800ce9a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ce9c:	69fa      	ldr	r2, [r7, #28]
 800ce9e:	69bb      	ldr	r3, [r7, #24]
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d901      	bls.n	800cea8 <create_chain+0x88>
 800cea4:	2300      	movs	r3, #0
 800cea6:	e04f      	b.n	800cf48 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cea8:	69f9      	ldr	r1, [r7, #28]
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f7ff fdbf 	bl	800ca2e <get_fat>
 800ceb0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d00e      	beq.n	800ced6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	2b01      	cmp	r3, #1
 800cebc:	d003      	beq.n	800cec6 <create_chain+0xa6>
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cec4:	d101      	bne.n	800ceca <create_chain+0xaa>
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	e03e      	b.n	800cf48 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ceca:	69fa      	ldr	r2, [r7, #28]
 800cecc:	69bb      	ldr	r3, [r7, #24]
 800cece:	429a      	cmp	r2, r3
 800ced0:	d1da      	bne.n	800ce88 <create_chain+0x68>
 800ced2:	2300      	movs	r3, #0
 800ced4:	e038      	b.n	800cf48 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ced6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ced8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cedc:	69f9      	ldr	r1, [r7, #28]
 800cede:	6938      	ldr	r0, [r7, #16]
 800cee0:	f7ff fe4d 	bl	800cb7e <put_fat>
 800cee4:	4603      	mov	r3, r0
 800cee6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cee8:	7dfb      	ldrb	r3, [r7, #23]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d109      	bne.n	800cf02 <create_chain+0xe2>
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d006      	beq.n	800cf02 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cef4:	69fa      	ldr	r2, [r7, #28]
 800cef6:	6839      	ldr	r1, [r7, #0]
 800cef8:	6938      	ldr	r0, [r7, #16]
 800cefa:	f7ff fe40 	bl	800cb7e <put_fat>
 800cefe:	4603      	mov	r3, r0
 800cf00:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cf02:	7dfb      	ldrb	r3, [r7, #23]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d116      	bne.n	800cf36 <create_chain+0x116>
		fs->last_clst = ncl;
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	69fa      	ldr	r2, [r7, #28]
 800cf0c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	695a      	ldr	r2, [r3, #20]
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	699b      	ldr	r3, [r3, #24]
 800cf16:	3b02      	subs	r3, #2
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d804      	bhi.n	800cf26 <create_chain+0x106>
 800cf1c:	693b      	ldr	r3, [r7, #16]
 800cf1e:	695b      	ldr	r3, [r3, #20]
 800cf20:	1e5a      	subs	r2, r3, #1
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	791b      	ldrb	r3, [r3, #4]
 800cf2a:	f043 0301 	orr.w	r3, r3, #1
 800cf2e:	b2da      	uxtb	r2, r3
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	711a      	strb	r2, [r3, #4]
 800cf34:	e007      	b.n	800cf46 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cf36:	7dfb      	ldrb	r3, [r7, #23]
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	d102      	bne.n	800cf42 <create_chain+0x122>
 800cf3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf40:	e000      	b.n	800cf44 <create_chain+0x124>
 800cf42:	2301      	movs	r3, #1
 800cf44:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cf46:	69fb      	ldr	r3, [r7, #28]
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3720      	adds	r7, #32
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}

0800cf50 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b087      	sub	sp, #28
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf64:	3304      	adds	r3, #4
 800cf66:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	0a5b      	lsrs	r3, r3, #9
 800cf6c:	68fa      	ldr	r2, [r7, #12]
 800cf6e:	8952      	ldrh	r2, [r2, #10]
 800cf70:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf74:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	1d1a      	adds	r2, r3, #4
 800cf7a:	613a      	str	r2, [r7, #16]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d101      	bne.n	800cf8a <clmt_clust+0x3a>
 800cf86:	2300      	movs	r3, #0
 800cf88:	e010      	b.n	800cfac <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800cf8a:	697a      	ldr	r2, [r7, #20]
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	d307      	bcc.n	800cfa2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800cf92:	697a      	ldr	r2, [r7, #20]
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	1ad3      	subs	r3, r2, r3
 800cf98:	617b      	str	r3, [r7, #20]
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	3304      	adds	r3, #4
 800cf9e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cfa0:	e7e9      	b.n	800cf76 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800cfa2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	681a      	ldr	r2, [r3, #0]
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	4413      	add	r3, r2
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	371c      	adds	r7, #28
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr

0800cfb8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b086      	sub	sp, #24
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cfce:	d204      	bcs.n	800cfda <dir_sdi+0x22>
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	f003 031f 	and.w	r3, r3, #31
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d001      	beq.n	800cfde <dir_sdi+0x26>
		return FR_INT_ERR;
 800cfda:	2302      	movs	r3, #2
 800cfdc:	e063      	b.n	800d0a6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	683a      	ldr	r2, [r7, #0]
 800cfe2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	689b      	ldr	r3, [r3, #8]
 800cfe8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d106      	bne.n	800cffe <dir_sdi+0x46>
 800cff0:	693b      	ldr	r3, [r7, #16]
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	2b02      	cmp	r3, #2
 800cff6:	d902      	bls.n	800cffe <dir_sdi+0x46>
		clst = fs->dirbase;
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cffc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d10c      	bne.n	800d01e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	095b      	lsrs	r3, r3, #5
 800d008:	693a      	ldr	r2, [r7, #16]
 800d00a:	8912      	ldrh	r2, [r2, #8]
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d301      	bcc.n	800d014 <dir_sdi+0x5c>
 800d010:	2302      	movs	r3, #2
 800d012:	e048      	b.n	800d0a6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	61da      	str	r2, [r3, #28]
 800d01c:	e029      	b.n	800d072 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	895b      	ldrh	r3, [r3, #10]
 800d022:	025b      	lsls	r3, r3, #9
 800d024:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d026:	e019      	b.n	800d05c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6979      	ldr	r1, [r7, #20]
 800d02c:	4618      	mov	r0, r3
 800d02e:	f7ff fcfe 	bl	800ca2e <get_fat>
 800d032:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d03a:	d101      	bne.n	800d040 <dir_sdi+0x88>
 800d03c:	2301      	movs	r3, #1
 800d03e:	e032      	b.n	800d0a6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	2b01      	cmp	r3, #1
 800d044:	d904      	bls.n	800d050 <dir_sdi+0x98>
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	699b      	ldr	r3, [r3, #24]
 800d04a:	697a      	ldr	r2, [r7, #20]
 800d04c:	429a      	cmp	r2, r3
 800d04e:	d301      	bcc.n	800d054 <dir_sdi+0x9c>
 800d050:	2302      	movs	r3, #2
 800d052:	e028      	b.n	800d0a6 <dir_sdi+0xee>
			ofs -= csz;
 800d054:	683a      	ldr	r2, [r7, #0]
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	1ad3      	subs	r3, r2, r3
 800d05a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d05c:	683a      	ldr	r2, [r7, #0]
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	429a      	cmp	r2, r3
 800d062:	d2e1      	bcs.n	800d028 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d064:	6979      	ldr	r1, [r7, #20]
 800d066:	6938      	ldr	r0, [r7, #16]
 800d068:	f7ff fcc2 	bl	800c9f0 <clust2sect>
 800d06c:	4602      	mov	r2, r0
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	697a      	ldr	r2, [r7, #20]
 800d076:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	69db      	ldr	r3, [r3, #28]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d101      	bne.n	800d084 <dir_sdi+0xcc>
 800d080:	2302      	movs	r3, #2
 800d082:	e010      	b.n	800d0a6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	69da      	ldr	r2, [r3, #28]
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	0a5b      	lsrs	r3, r3, #9
 800d08c:	441a      	add	r2, r3
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d09e:	441a      	add	r2, r3
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d0a4:	2300      	movs	r3, #0
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	3718      	adds	r7, #24
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}

0800d0ae <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d0ae:	b580      	push	{r7, lr}
 800d0b0:	b086      	sub	sp, #24
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	6078      	str	r0, [r7, #4]
 800d0b6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	695b      	ldr	r3, [r3, #20]
 800d0c2:	3320      	adds	r3, #32
 800d0c4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	69db      	ldr	r3, [r3, #28]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d003      	beq.n	800d0d6 <dir_next+0x28>
 800d0ce:	68bb      	ldr	r3, [r7, #8]
 800d0d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d0d4:	d301      	bcc.n	800d0da <dir_next+0x2c>
 800d0d6:	2304      	movs	r3, #4
 800d0d8:	e0aa      	b.n	800d230 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	f040 8098 	bne.w	800d216 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	69db      	ldr	r3, [r3, #28]
 800d0ea:	1c5a      	adds	r2, r3, #1
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	699b      	ldr	r3, [r3, #24]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d10b      	bne.n	800d110 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	095b      	lsrs	r3, r3, #5
 800d0fc:	68fa      	ldr	r2, [r7, #12]
 800d0fe:	8912      	ldrh	r2, [r2, #8]
 800d100:	4293      	cmp	r3, r2
 800d102:	f0c0 8088 	bcc.w	800d216 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2200      	movs	r2, #0
 800d10a:	61da      	str	r2, [r3, #28]
 800d10c:	2304      	movs	r3, #4
 800d10e:	e08f      	b.n	800d230 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	0a5b      	lsrs	r3, r3, #9
 800d114:	68fa      	ldr	r2, [r7, #12]
 800d116:	8952      	ldrh	r2, [r2, #10]
 800d118:	3a01      	subs	r2, #1
 800d11a:	4013      	ands	r3, r2
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d17a      	bne.n	800d216 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d120:	687a      	ldr	r2, [r7, #4]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	699b      	ldr	r3, [r3, #24]
 800d126:	4619      	mov	r1, r3
 800d128:	4610      	mov	r0, r2
 800d12a:	f7ff fc80 	bl	800ca2e <get_fat>
 800d12e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d130:	697b      	ldr	r3, [r7, #20]
 800d132:	2b01      	cmp	r3, #1
 800d134:	d801      	bhi.n	800d13a <dir_next+0x8c>
 800d136:	2302      	movs	r3, #2
 800d138:	e07a      	b.n	800d230 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d140:	d101      	bne.n	800d146 <dir_next+0x98>
 800d142:	2301      	movs	r3, #1
 800d144:	e074      	b.n	800d230 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	699b      	ldr	r3, [r3, #24]
 800d14a:	697a      	ldr	r2, [r7, #20]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d358      	bcc.n	800d202 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d104      	bne.n	800d160 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2200      	movs	r2, #0
 800d15a:	61da      	str	r2, [r3, #28]
 800d15c:	2304      	movs	r3, #4
 800d15e:	e067      	b.n	800d230 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d160:	687a      	ldr	r2, [r7, #4]
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	699b      	ldr	r3, [r3, #24]
 800d166:	4619      	mov	r1, r3
 800d168:	4610      	mov	r0, r2
 800d16a:	f7ff fe59 	bl	800ce20 <create_chain>
 800d16e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d101      	bne.n	800d17a <dir_next+0xcc>
 800d176:	2307      	movs	r3, #7
 800d178:	e05a      	b.n	800d230 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	2b01      	cmp	r3, #1
 800d17e:	d101      	bne.n	800d184 <dir_next+0xd6>
 800d180:	2302      	movs	r3, #2
 800d182:	e055      	b.n	800d230 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d18a:	d101      	bne.n	800d190 <dir_next+0xe2>
 800d18c:	2301      	movs	r3, #1
 800d18e:	e04f      	b.n	800d230 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d190:	68f8      	ldr	r0, [r7, #12]
 800d192:	f7ff fb4d 	bl	800c830 <sync_window>
 800d196:	4603      	mov	r3, r0
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d001      	beq.n	800d1a0 <dir_next+0xf2>
 800d19c:	2301      	movs	r3, #1
 800d19e:	e047      	b.n	800d230 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	3334      	adds	r3, #52	; 0x34
 800d1a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d1a8:	2100      	movs	r1, #0
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f7ff f977 	bl	800c49e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	613b      	str	r3, [r7, #16]
 800d1b4:	6979      	ldr	r1, [r7, #20]
 800d1b6:	68f8      	ldr	r0, [r7, #12]
 800d1b8:	f7ff fc1a 	bl	800c9f0 <clust2sect>
 800d1bc:	4602      	mov	r2, r0
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	631a      	str	r2, [r3, #48]	; 0x30
 800d1c2:	e012      	b.n	800d1ea <dir_next+0x13c>
						fs->wflag = 1;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	2201      	movs	r2, #1
 800d1c8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d1ca:	68f8      	ldr	r0, [r7, #12]
 800d1cc:	f7ff fb30 	bl	800c830 <sync_window>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d001      	beq.n	800d1da <dir_next+0x12c>
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	e02a      	b.n	800d230 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	3301      	adds	r3, #1
 800d1de:	613b      	str	r3, [r7, #16]
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1e4:	1c5a      	adds	r2, r3, #1
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	631a      	str	r2, [r3, #48]	; 0x30
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	895b      	ldrh	r3, [r3, #10]
 800d1ee:	461a      	mov	r2, r3
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d3e6      	bcc.n	800d1c4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	1ad2      	subs	r2, r2, r3
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	697a      	ldr	r2, [r7, #20]
 800d206:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d208:	6979      	ldr	r1, [r7, #20]
 800d20a:	68f8      	ldr	r0, [r7, #12]
 800d20c:	f7ff fbf0 	bl	800c9f0 <clust2sect>
 800d210:	4602      	mov	r2, r0
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	68ba      	ldr	r2, [r7, #8]
 800d21a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d228:	441a      	add	r2, r3
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d22e:	2300      	movs	r3, #0
}
 800d230:	4618      	mov	r0, r3
 800d232:	3718      	adds	r7, #24
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b086      	sub	sp, #24
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d248:	2100      	movs	r1, #0
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f7ff feb4 	bl	800cfb8 <dir_sdi>
 800d250:	4603      	mov	r3, r0
 800d252:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d254:	7dfb      	ldrb	r3, [r7, #23]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d12b      	bne.n	800d2b2 <dir_alloc+0x7a>
		n = 0;
 800d25a:	2300      	movs	r3, #0
 800d25c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	69db      	ldr	r3, [r3, #28]
 800d262:	4619      	mov	r1, r3
 800d264:	68f8      	ldr	r0, [r7, #12]
 800d266:	f7ff fb27 	bl	800c8b8 <move_window>
 800d26a:	4603      	mov	r3, r0
 800d26c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d26e:	7dfb      	ldrb	r3, [r7, #23]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d11d      	bne.n	800d2b0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6a1b      	ldr	r3, [r3, #32]
 800d278:	781b      	ldrb	r3, [r3, #0]
 800d27a:	2be5      	cmp	r3, #229	; 0xe5
 800d27c:	d004      	beq.n	800d288 <dir_alloc+0x50>
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6a1b      	ldr	r3, [r3, #32]
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d107      	bne.n	800d298 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	3301      	adds	r3, #1
 800d28c:	613b      	str	r3, [r7, #16]
 800d28e:	693a      	ldr	r2, [r7, #16]
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	429a      	cmp	r2, r3
 800d294:	d102      	bne.n	800d29c <dir_alloc+0x64>
 800d296:	e00c      	b.n	800d2b2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d298:	2300      	movs	r3, #0
 800d29a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d29c:	2101      	movs	r1, #1
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f7ff ff05 	bl	800d0ae <dir_next>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d2a8:	7dfb      	ldrb	r3, [r7, #23]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d0d7      	beq.n	800d25e <dir_alloc+0x26>
 800d2ae:	e000      	b.n	800d2b2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d2b0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d2b2:	7dfb      	ldrb	r3, [r7, #23]
 800d2b4:	2b04      	cmp	r3, #4
 800d2b6:	d101      	bne.n	800d2bc <dir_alloc+0x84>
 800d2b8:	2307      	movs	r3, #7
 800d2ba:	75fb      	strb	r3, [r7, #23]
	return res;
 800d2bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3718      	adds	r7, #24
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}

0800d2c6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d2c6:	b580      	push	{r7, lr}
 800d2c8:	b084      	sub	sp, #16
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	6078      	str	r0, [r7, #4]
 800d2ce:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	331a      	adds	r3, #26
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f7ff f83f 	bl	800c358 <ld_word>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	2b03      	cmp	r3, #3
 800d2e4:	d109      	bne.n	800d2fa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	3314      	adds	r3, #20
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f7ff f834 	bl	800c358 <ld_word>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	041b      	lsls	r3, r3, #16
 800d2f4:	68fa      	ldr	r2, [r7, #12]
 800d2f6:	4313      	orrs	r3, r2
 800d2f8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3710      	adds	r7, #16
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}

0800d304 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b084      	sub	sp, #16
 800d308:	af00      	add	r7, sp, #0
 800d30a:	60f8      	str	r0, [r7, #12]
 800d30c:	60b9      	str	r1, [r7, #8]
 800d30e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	331a      	adds	r3, #26
 800d314:	687a      	ldr	r2, [r7, #4]
 800d316:	b292      	uxth	r2, r2
 800d318:	4611      	mov	r1, r2
 800d31a:	4618      	mov	r0, r3
 800d31c:	f7ff f857 	bl	800c3ce <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	781b      	ldrb	r3, [r3, #0]
 800d324:	2b03      	cmp	r3, #3
 800d326:	d109      	bne.n	800d33c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	f103 0214 	add.w	r2, r3, #20
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	0c1b      	lsrs	r3, r3, #16
 800d332:	b29b      	uxth	r3, r3
 800d334:	4619      	mov	r1, r3
 800d336:	4610      	mov	r0, r2
 800d338:	f7ff f849 	bl	800c3ce <st_word>
	}
}
 800d33c:	bf00      	nop
 800d33e:	3710      	adds	r7, #16
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}

0800d344 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d344:	b590      	push	{r4, r7, lr}
 800d346:	b087      	sub	sp, #28
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	331a      	adds	r3, #26
 800d352:	4618      	mov	r0, r3
 800d354:	f7ff f800 	bl	800c358 <ld_word>
 800d358:	4603      	mov	r3, r0
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d001      	beq.n	800d362 <cmp_lfn+0x1e>
 800d35e:	2300      	movs	r3, #0
 800d360:	e059      	b.n	800d416 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	781b      	ldrb	r3, [r3, #0]
 800d366:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d36a:	1e5a      	subs	r2, r3, #1
 800d36c:	4613      	mov	r3, r2
 800d36e:	005b      	lsls	r3, r3, #1
 800d370:	4413      	add	r3, r2
 800d372:	009b      	lsls	r3, r3, #2
 800d374:	4413      	add	r3, r2
 800d376:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d378:	2301      	movs	r3, #1
 800d37a:	81fb      	strh	r3, [r7, #14]
 800d37c:	2300      	movs	r3, #0
 800d37e:	613b      	str	r3, [r7, #16]
 800d380:	e033      	b.n	800d3ea <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d382:	4a27      	ldr	r2, [pc, #156]	; (800d420 <cmp_lfn+0xdc>)
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	4413      	add	r3, r2
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	461a      	mov	r2, r3
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	4413      	add	r3, r2
 800d390:	4618      	mov	r0, r3
 800d392:	f7fe ffe1 	bl	800c358 <ld_word>
 800d396:	4603      	mov	r3, r0
 800d398:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d39a:	89fb      	ldrh	r3, [r7, #14]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d01a      	beq.n	800d3d6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	2bfe      	cmp	r3, #254	; 0xfe
 800d3a4:	d812      	bhi.n	800d3cc <cmp_lfn+0x88>
 800d3a6:	89bb      	ldrh	r3, [r7, #12]
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f001 fcd9 	bl	800ed60 <ff_wtoupper>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	461c      	mov	r4, r3
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	1c5a      	adds	r2, r3, #1
 800d3b6:	617a      	str	r2, [r7, #20]
 800d3b8:	005b      	lsls	r3, r3, #1
 800d3ba:	687a      	ldr	r2, [r7, #4]
 800d3bc:	4413      	add	r3, r2
 800d3be:	881b      	ldrh	r3, [r3, #0]
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f001 fccd 	bl	800ed60 <ff_wtoupper>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	429c      	cmp	r4, r3
 800d3ca:	d001      	beq.n	800d3d0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	e022      	b.n	800d416 <cmp_lfn+0xd2>
			}
			wc = uc;
 800d3d0:	89bb      	ldrh	r3, [r7, #12]
 800d3d2:	81fb      	strh	r3, [r7, #14]
 800d3d4:	e006      	b.n	800d3e4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d3d6:	89bb      	ldrh	r3, [r7, #12]
 800d3d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	d001      	beq.n	800d3e4 <cmp_lfn+0xa0>
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	e018      	b.n	800d416 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	3301      	adds	r3, #1
 800d3e8:	613b      	str	r3, [r7, #16]
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	2b0c      	cmp	r3, #12
 800d3ee:	d9c8      	bls.n	800d382 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d00b      	beq.n	800d414 <cmp_lfn+0xd0>
 800d3fc:	89fb      	ldrh	r3, [r7, #14]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d008      	beq.n	800d414 <cmp_lfn+0xd0>
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	005b      	lsls	r3, r3, #1
 800d406:	687a      	ldr	r2, [r7, #4]
 800d408:	4413      	add	r3, r2
 800d40a:	881b      	ldrh	r3, [r3, #0]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d001      	beq.n	800d414 <cmp_lfn+0xd0>
 800d410:	2300      	movs	r3, #0
 800d412:	e000      	b.n	800d416 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d414:	2301      	movs	r3, #1
}
 800d416:	4618      	mov	r0, r3
 800d418:	371c      	adds	r7, #28
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd90      	pop	{r4, r7, pc}
 800d41e:	bf00      	nop
 800d420:	08010000 	.word	0x08010000

0800d424 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b088      	sub	sp, #32
 800d428:	af00      	add	r7, sp, #0
 800d42a:	60f8      	str	r0, [r7, #12]
 800d42c:	60b9      	str	r1, [r7, #8]
 800d42e:	4611      	mov	r1, r2
 800d430:	461a      	mov	r2, r3
 800d432:	460b      	mov	r3, r1
 800d434:	71fb      	strb	r3, [r7, #7]
 800d436:	4613      	mov	r3, r2
 800d438:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	330d      	adds	r3, #13
 800d43e:	79ba      	ldrb	r2, [r7, #6]
 800d440:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	330b      	adds	r3, #11
 800d446:	220f      	movs	r2, #15
 800d448:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	330c      	adds	r3, #12
 800d44e:	2200      	movs	r2, #0
 800d450:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	331a      	adds	r3, #26
 800d456:	2100      	movs	r1, #0
 800d458:	4618      	mov	r0, r3
 800d45a:	f7fe ffb8 	bl	800c3ce <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d45e:	79fb      	ldrb	r3, [r7, #7]
 800d460:	1e5a      	subs	r2, r3, #1
 800d462:	4613      	mov	r3, r2
 800d464:	005b      	lsls	r3, r3, #1
 800d466:	4413      	add	r3, r2
 800d468:	009b      	lsls	r3, r3, #2
 800d46a:	4413      	add	r3, r2
 800d46c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d46e:	2300      	movs	r3, #0
 800d470:	82fb      	strh	r3, [r7, #22]
 800d472:	2300      	movs	r3, #0
 800d474:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d476:	8afb      	ldrh	r3, [r7, #22]
 800d478:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d007      	beq.n	800d490 <put_lfn+0x6c>
 800d480:	69fb      	ldr	r3, [r7, #28]
 800d482:	1c5a      	adds	r2, r3, #1
 800d484:	61fa      	str	r2, [r7, #28]
 800d486:	005b      	lsls	r3, r3, #1
 800d488:	68fa      	ldr	r2, [r7, #12]
 800d48a:	4413      	add	r3, r2
 800d48c:	881b      	ldrh	r3, [r3, #0]
 800d48e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d490:	4a17      	ldr	r2, [pc, #92]	; (800d4f0 <put_lfn+0xcc>)
 800d492:	69bb      	ldr	r3, [r7, #24]
 800d494:	4413      	add	r3, r2
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	461a      	mov	r2, r3
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	4413      	add	r3, r2
 800d49e:	8afa      	ldrh	r2, [r7, #22]
 800d4a0:	4611      	mov	r1, r2
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f7fe ff93 	bl	800c3ce <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d4a8:	8afb      	ldrh	r3, [r7, #22]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d102      	bne.n	800d4b4 <put_lfn+0x90>
 800d4ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d4b2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d4b4:	69bb      	ldr	r3, [r7, #24]
 800d4b6:	3301      	adds	r3, #1
 800d4b8:	61bb      	str	r3, [r7, #24]
 800d4ba:	69bb      	ldr	r3, [r7, #24]
 800d4bc:	2b0c      	cmp	r3, #12
 800d4be:	d9da      	bls.n	800d476 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d4c0:	8afb      	ldrh	r3, [r7, #22]
 800d4c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	d006      	beq.n	800d4d8 <put_lfn+0xb4>
 800d4ca:	69fb      	ldr	r3, [r7, #28]
 800d4cc:	005b      	lsls	r3, r3, #1
 800d4ce:	68fa      	ldr	r2, [r7, #12]
 800d4d0:	4413      	add	r3, r2
 800d4d2:	881b      	ldrh	r3, [r3, #0]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d103      	bne.n	800d4e0 <put_lfn+0xbc>
 800d4d8:	79fb      	ldrb	r3, [r7, #7]
 800d4da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4de:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	79fa      	ldrb	r2, [r7, #7]
 800d4e4:	701a      	strb	r2, [r3, #0]
}
 800d4e6:	bf00      	nop
 800d4e8:	3720      	adds	r7, #32
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}
 800d4ee:	bf00      	nop
 800d4f0:	08010000 	.word	0x08010000

0800d4f4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b08c      	sub	sp, #48	; 0x30
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	60f8      	str	r0, [r7, #12]
 800d4fc:	60b9      	str	r1, [r7, #8]
 800d4fe:	607a      	str	r2, [r7, #4]
 800d500:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d502:	220b      	movs	r2, #11
 800d504:	68b9      	ldr	r1, [r7, #8]
 800d506:	68f8      	ldr	r0, [r7, #12]
 800d508:	f7fe ffa8 	bl	800c45c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	2b05      	cmp	r3, #5
 800d510:	d929      	bls.n	800d566 <gen_numname+0x72>
		sr = seq;
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d516:	e020      	b.n	800d55a <gen_numname+0x66>
			wc = *lfn++;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	1c9a      	adds	r2, r3, #2
 800d51c:	607a      	str	r2, [r7, #4]
 800d51e:	881b      	ldrh	r3, [r3, #0]
 800d520:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d522:	2300      	movs	r3, #0
 800d524:	62bb      	str	r3, [r7, #40]	; 0x28
 800d526:	e015      	b.n	800d554 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800d528:	69fb      	ldr	r3, [r7, #28]
 800d52a:	005a      	lsls	r2, r3, #1
 800d52c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d52e:	f003 0301 	and.w	r3, r3, #1
 800d532:	4413      	add	r3, r2
 800d534:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d536:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d538:	085b      	lsrs	r3, r3, #1
 800d53a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d53c:	69fb      	ldr	r3, [r7, #28]
 800d53e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d542:	2b00      	cmp	r3, #0
 800d544:	d003      	beq.n	800d54e <gen_numname+0x5a>
 800d546:	69fa      	ldr	r2, [r7, #28]
 800d548:	4b30      	ldr	r3, [pc, #192]	; (800d60c <gen_numname+0x118>)
 800d54a:	4053      	eors	r3, r2
 800d54c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d550:	3301      	adds	r3, #1
 800d552:	62bb      	str	r3, [r7, #40]	; 0x28
 800d554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d556:	2b0f      	cmp	r3, #15
 800d558:	d9e6      	bls.n	800d528 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	881b      	ldrh	r3, [r3, #0]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d1da      	bne.n	800d518 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d562:	69fb      	ldr	r3, [r7, #28]
 800d564:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d566:	2307      	movs	r3, #7
 800d568:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	b2db      	uxtb	r3, r3
 800d56e:	f003 030f 	and.w	r3, r3, #15
 800d572:	b2db      	uxtb	r3, r3
 800d574:	3330      	adds	r3, #48	; 0x30
 800d576:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d57a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d57e:	2b39      	cmp	r3, #57	; 0x39
 800d580:	d904      	bls.n	800d58c <gen_numname+0x98>
 800d582:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d586:	3307      	adds	r3, #7
 800d588:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d58e:	1e5a      	subs	r2, r3, #1
 800d590:	62ba      	str	r2, [r7, #40]	; 0x28
 800d592:	3330      	adds	r3, #48	; 0x30
 800d594:	443b      	add	r3, r7
 800d596:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d59a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	091b      	lsrs	r3, r3, #4
 800d5a2:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d1df      	bne.n	800d56a <gen_numname+0x76>
	ns[i] = '~';
 800d5aa:	f107 0214 	add.w	r2, r7, #20
 800d5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5b0:	4413      	add	r3, r2
 800d5b2:	227e      	movs	r2, #126	; 0x7e
 800d5b4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	627b      	str	r3, [r7, #36]	; 0x24
 800d5ba:	e002      	b.n	800d5c2 <gen_numname+0xce>
 800d5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5be:	3301      	adds	r3, #1
 800d5c0:	627b      	str	r3, [r7, #36]	; 0x24
 800d5c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d205      	bcs.n	800d5d6 <gen_numname+0xe2>
 800d5ca:	68fa      	ldr	r2, [r7, #12]
 800d5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ce:	4413      	add	r3, r2
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	2b20      	cmp	r3, #32
 800d5d4:	d1f2      	bne.n	800d5bc <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d8:	2b07      	cmp	r3, #7
 800d5da:	d807      	bhi.n	800d5ec <gen_numname+0xf8>
 800d5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5de:	1c5a      	adds	r2, r3, #1
 800d5e0:	62ba      	str	r2, [r7, #40]	; 0x28
 800d5e2:	3330      	adds	r3, #48	; 0x30
 800d5e4:	443b      	add	r3, r7
 800d5e6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d5ea:	e000      	b.n	800d5ee <gen_numname+0xfa>
 800d5ec:	2120      	movs	r1, #32
 800d5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f0:	1c5a      	adds	r2, r3, #1
 800d5f2:	627a      	str	r2, [r7, #36]	; 0x24
 800d5f4:	68fa      	ldr	r2, [r7, #12]
 800d5f6:	4413      	add	r3, r2
 800d5f8:	460a      	mov	r2, r1
 800d5fa:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fe:	2b07      	cmp	r3, #7
 800d600:	d9e9      	bls.n	800d5d6 <gen_numname+0xe2>
}
 800d602:	bf00      	nop
 800d604:	bf00      	nop
 800d606:	3730      	adds	r7, #48	; 0x30
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}
 800d60c:	00011021 	.word	0x00011021

0800d610 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d610:	b480      	push	{r7}
 800d612:	b085      	sub	sp, #20
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d618:	2300      	movs	r3, #0
 800d61a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d61c:	230b      	movs	r3, #11
 800d61e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d620:	7bfb      	ldrb	r3, [r7, #15]
 800d622:	b2da      	uxtb	r2, r3
 800d624:	0852      	lsrs	r2, r2, #1
 800d626:	01db      	lsls	r3, r3, #7
 800d628:	4313      	orrs	r3, r2
 800d62a:	b2da      	uxtb	r2, r3
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	1c59      	adds	r1, r3, #1
 800d630:	6079      	str	r1, [r7, #4]
 800d632:	781b      	ldrb	r3, [r3, #0]
 800d634:	4413      	add	r3, r2
 800d636:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	3b01      	subs	r3, #1
 800d63c:	60bb      	str	r3, [r7, #8]
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d1ed      	bne.n	800d620 <sum_sfn+0x10>
	return sum;
 800d644:	7bfb      	ldrb	r3, [r7, #15]
}
 800d646:	4618      	mov	r0, r3
 800d648:	3714      	adds	r7, #20
 800d64a:	46bd      	mov	sp, r7
 800d64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d650:	4770      	bx	lr

0800d652 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d652:	b580      	push	{r7, lr}
 800d654:	b086      	sub	sp, #24
 800d656:	af00      	add	r7, sp, #0
 800d658:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d660:	2100      	movs	r1, #0
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f7ff fca8 	bl	800cfb8 <dir_sdi>
 800d668:	4603      	mov	r3, r0
 800d66a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d66c:	7dfb      	ldrb	r3, [r7, #23]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d001      	beq.n	800d676 <dir_find+0x24>
 800d672:	7dfb      	ldrb	r3, [r7, #23]
 800d674:	e0a9      	b.n	800d7ca <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d676:	23ff      	movs	r3, #255	; 0xff
 800d678:	753b      	strb	r3, [r7, #20]
 800d67a:	7d3b      	ldrb	r3, [r7, #20]
 800d67c:	757b      	strb	r3, [r7, #21]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d684:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	69db      	ldr	r3, [r3, #28]
 800d68a:	4619      	mov	r1, r3
 800d68c:	6938      	ldr	r0, [r7, #16]
 800d68e:	f7ff f913 	bl	800c8b8 <move_window>
 800d692:	4603      	mov	r3, r0
 800d694:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d696:	7dfb      	ldrb	r3, [r7, #23]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	f040 8090 	bne.w	800d7be <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6a1b      	ldr	r3, [r3, #32]
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d6a6:	7dbb      	ldrb	r3, [r7, #22]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d102      	bne.n	800d6b2 <dir_find+0x60>
 800d6ac:	2304      	movs	r3, #4
 800d6ae:	75fb      	strb	r3, [r7, #23]
 800d6b0:	e08a      	b.n	800d7c8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6a1b      	ldr	r3, [r3, #32]
 800d6b6:	330b      	adds	r3, #11
 800d6b8:	781b      	ldrb	r3, [r3, #0]
 800d6ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6be:	73fb      	strb	r3, [r7, #15]
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	7bfa      	ldrb	r2, [r7, #15]
 800d6c4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d6c6:	7dbb      	ldrb	r3, [r7, #22]
 800d6c8:	2be5      	cmp	r3, #229	; 0xe5
 800d6ca:	d007      	beq.n	800d6dc <dir_find+0x8a>
 800d6cc:	7bfb      	ldrb	r3, [r7, #15]
 800d6ce:	f003 0308 	and.w	r3, r3, #8
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d009      	beq.n	800d6ea <dir_find+0x98>
 800d6d6:	7bfb      	ldrb	r3, [r7, #15]
 800d6d8:	2b0f      	cmp	r3, #15
 800d6da:	d006      	beq.n	800d6ea <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d6dc:	23ff      	movs	r3, #255	; 0xff
 800d6de:	757b      	strb	r3, [r7, #21]
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d6e6:	631a      	str	r2, [r3, #48]	; 0x30
 800d6e8:	e05e      	b.n	800d7a8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d6ea:	7bfb      	ldrb	r3, [r7, #15]
 800d6ec:	2b0f      	cmp	r3, #15
 800d6ee:	d136      	bne.n	800d75e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d6f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d154      	bne.n	800d7a8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d6fe:	7dbb      	ldrb	r3, [r7, #22]
 800d700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d704:	2b00      	cmp	r3, #0
 800d706:	d00d      	beq.n	800d724 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6a1b      	ldr	r3, [r3, #32]
 800d70c:	7b5b      	ldrb	r3, [r3, #13]
 800d70e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d710:	7dbb      	ldrb	r3, [r7, #22]
 800d712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d716:	75bb      	strb	r3, [r7, #22]
 800d718:	7dbb      	ldrb	r3, [r7, #22]
 800d71a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	695a      	ldr	r2, [r3, #20]
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d724:	7dba      	ldrb	r2, [r7, #22]
 800d726:	7d7b      	ldrb	r3, [r7, #21]
 800d728:	429a      	cmp	r2, r3
 800d72a:	d115      	bne.n	800d758 <dir_find+0x106>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6a1b      	ldr	r3, [r3, #32]
 800d730:	330d      	adds	r3, #13
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	7d3a      	ldrb	r2, [r7, #20]
 800d736:	429a      	cmp	r2, r3
 800d738:	d10e      	bne.n	800d758 <dir_find+0x106>
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	68da      	ldr	r2, [r3, #12]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6a1b      	ldr	r3, [r3, #32]
 800d742:	4619      	mov	r1, r3
 800d744:	4610      	mov	r0, r2
 800d746:	f7ff fdfd 	bl	800d344 <cmp_lfn>
 800d74a:	4603      	mov	r3, r0
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d003      	beq.n	800d758 <dir_find+0x106>
 800d750:	7d7b      	ldrb	r3, [r7, #21]
 800d752:	3b01      	subs	r3, #1
 800d754:	b2db      	uxtb	r3, r3
 800d756:	e000      	b.n	800d75a <dir_find+0x108>
 800d758:	23ff      	movs	r3, #255	; 0xff
 800d75a:	757b      	strb	r3, [r7, #21]
 800d75c:	e024      	b.n	800d7a8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d75e:	7d7b      	ldrb	r3, [r7, #21]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d109      	bne.n	800d778 <dir_find+0x126>
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6a1b      	ldr	r3, [r3, #32]
 800d768:	4618      	mov	r0, r3
 800d76a:	f7ff ff51 	bl	800d610 <sum_sfn>
 800d76e:	4603      	mov	r3, r0
 800d770:	461a      	mov	r2, r3
 800d772:	7d3b      	ldrb	r3, [r7, #20]
 800d774:	4293      	cmp	r3, r2
 800d776:	d024      	beq.n	800d7c2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d77e:	f003 0301 	and.w	r3, r3, #1
 800d782:	2b00      	cmp	r3, #0
 800d784:	d10a      	bne.n	800d79c <dir_find+0x14a>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6a18      	ldr	r0, [r3, #32]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	3324      	adds	r3, #36	; 0x24
 800d78e:	220b      	movs	r2, #11
 800d790:	4619      	mov	r1, r3
 800d792:	f7fe fe9f 	bl	800c4d4 <mem_cmp>
 800d796:	4603      	mov	r3, r0
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d014      	beq.n	800d7c6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d79c:	23ff      	movs	r3, #255	; 0xff
 800d79e:	757b      	strb	r3, [r7, #21]
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d7a6:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d7a8:	2100      	movs	r1, #0
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f7ff fc7f 	bl	800d0ae <dir_next>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d7b4:	7dfb      	ldrb	r3, [r7, #23]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	f43f af65 	beq.w	800d686 <dir_find+0x34>
 800d7bc:	e004      	b.n	800d7c8 <dir_find+0x176>
		if (res != FR_OK) break;
 800d7be:	bf00      	nop
 800d7c0:	e002      	b.n	800d7c8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d7c2:	bf00      	nop
 800d7c4:	e000      	b.n	800d7c8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d7c6:	bf00      	nop

	return res;
 800d7c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	3718      	adds	r7, #24
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}
	...

0800d7d4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b08c      	sub	sp, #48	; 0x30
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d7e8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d001      	beq.n	800d7f4 <dir_register+0x20>
 800d7f0:	2306      	movs	r3, #6
 800d7f2:	e0e0      	b.n	800d9b6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	627b      	str	r3, [r7, #36]	; 0x24
 800d7f8:	e002      	b.n	800d800 <dir_register+0x2c>
 800d7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	627b      	str	r3, [r7, #36]	; 0x24
 800d800:	69fb      	ldr	r3, [r7, #28]
 800d802:	68da      	ldr	r2, [r3, #12]
 800d804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d806:	005b      	lsls	r3, r3, #1
 800d808:	4413      	add	r3, r2
 800d80a:	881b      	ldrh	r3, [r3, #0]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d1f4      	bne.n	800d7fa <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d816:	f107 030c 	add.w	r3, r7, #12
 800d81a:	220c      	movs	r2, #12
 800d81c:	4618      	mov	r0, r3
 800d81e:	f7fe fe1d 	bl	800c45c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d822:	7dfb      	ldrb	r3, [r7, #23]
 800d824:	f003 0301 	and.w	r3, r3, #1
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d032      	beq.n	800d892 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2240      	movs	r2, #64	; 0x40
 800d830:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d834:	2301      	movs	r3, #1
 800d836:	62bb      	str	r3, [r7, #40]	; 0x28
 800d838:	e016      	b.n	800d868 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d840:	69fb      	ldr	r3, [r7, #28]
 800d842:	68da      	ldr	r2, [r3, #12]
 800d844:	f107 010c 	add.w	r1, r7, #12
 800d848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d84a:	f7ff fe53 	bl	800d4f4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f7ff feff 	bl	800d652 <dir_find>
 800d854:	4603      	mov	r3, r0
 800d856:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d85a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d106      	bne.n	800d870 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d864:	3301      	adds	r3, #1
 800d866:	62bb      	str	r3, [r7, #40]	; 0x28
 800d868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d86a:	2b63      	cmp	r3, #99	; 0x63
 800d86c:	d9e5      	bls.n	800d83a <dir_register+0x66>
 800d86e:	e000      	b.n	800d872 <dir_register+0x9e>
			if (res != FR_OK) break;
 800d870:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d874:	2b64      	cmp	r3, #100	; 0x64
 800d876:	d101      	bne.n	800d87c <dir_register+0xa8>
 800d878:	2307      	movs	r3, #7
 800d87a:	e09c      	b.n	800d9b6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d87c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d880:	2b04      	cmp	r3, #4
 800d882:	d002      	beq.n	800d88a <dir_register+0xb6>
 800d884:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d888:	e095      	b.n	800d9b6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d88a:	7dfa      	ldrb	r2, [r7, #23]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d892:	7dfb      	ldrb	r3, [r7, #23]
 800d894:	f003 0302 	and.w	r3, r3, #2
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d007      	beq.n	800d8ac <dir_register+0xd8>
 800d89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89e:	330c      	adds	r3, #12
 800d8a0:	4a47      	ldr	r2, [pc, #284]	; (800d9c0 <dir_register+0x1ec>)
 800d8a2:	fba2 2303 	umull	r2, r3, r2, r3
 800d8a6:	089b      	lsrs	r3, r3, #2
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	e000      	b.n	800d8ae <dir_register+0xda>
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d8b0:	6a39      	ldr	r1, [r7, #32]
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f7ff fcc0 	bl	800d238 <dir_alloc>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d8be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d148      	bne.n	800d958 <dir_register+0x184>
 800d8c6:	6a3b      	ldr	r3, [r7, #32]
 800d8c8:	3b01      	subs	r3, #1
 800d8ca:	623b      	str	r3, [r7, #32]
 800d8cc:	6a3b      	ldr	r3, [r7, #32]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d042      	beq.n	800d958 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	695a      	ldr	r2, [r3, #20]
 800d8d6:	6a3b      	ldr	r3, [r7, #32]
 800d8d8:	015b      	lsls	r3, r3, #5
 800d8da:	1ad3      	subs	r3, r2, r3
 800d8dc:	4619      	mov	r1, r3
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f7ff fb6a 	bl	800cfb8 <dir_sdi>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d8ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d132      	bne.n	800d958 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	3324      	adds	r3, #36	; 0x24
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f7ff fe8a 	bl	800d610 <sum_sfn>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	69db      	ldr	r3, [r3, #28]
 800d904:	4619      	mov	r1, r3
 800d906:	69f8      	ldr	r0, [r7, #28]
 800d908:	f7fe ffd6 	bl	800c8b8 <move_window>
 800d90c:	4603      	mov	r3, r0
 800d90e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d912:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d916:	2b00      	cmp	r3, #0
 800d918:	d11d      	bne.n	800d956 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d91a:	69fb      	ldr	r3, [r7, #28]
 800d91c:	68d8      	ldr	r0, [r3, #12]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6a19      	ldr	r1, [r3, #32]
 800d922:	6a3b      	ldr	r3, [r7, #32]
 800d924:	b2da      	uxtb	r2, r3
 800d926:	7efb      	ldrb	r3, [r7, #27]
 800d928:	f7ff fd7c 	bl	800d424 <put_lfn>
				fs->wflag = 1;
 800d92c:	69fb      	ldr	r3, [r7, #28]
 800d92e:	2201      	movs	r2, #1
 800d930:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d932:	2100      	movs	r1, #0
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f7ff fbba 	bl	800d0ae <dir_next>
 800d93a:	4603      	mov	r3, r0
 800d93c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d940:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d944:	2b00      	cmp	r3, #0
 800d946:	d107      	bne.n	800d958 <dir_register+0x184>
 800d948:	6a3b      	ldr	r3, [r7, #32]
 800d94a:	3b01      	subs	r3, #1
 800d94c:	623b      	str	r3, [r7, #32]
 800d94e:	6a3b      	ldr	r3, [r7, #32]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d1d5      	bne.n	800d900 <dir_register+0x12c>
 800d954:	e000      	b.n	800d958 <dir_register+0x184>
				if (res != FR_OK) break;
 800d956:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d958:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d128      	bne.n	800d9b2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	69db      	ldr	r3, [r3, #28]
 800d964:	4619      	mov	r1, r3
 800d966:	69f8      	ldr	r0, [r7, #28]
 800d968:	f7fe ffa6 	bl	800c8b8 <move_window>
 800d96c:	4603      	mov	r3, r0
 800d96e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d972:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d976:	2b00      	cmp	r3, #0
 800d978:	d11b      	bne.n	800d9b2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6a1b      	ldr	r3, [r3, #32]
 800d97e:	2220      	movs	r2, #32
 800d980:	2100      	movs	r1, #0
 800d982:	4618      	mov	r0, r3
 800d984:	f7fe fd8b 	bl	800c49e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6a18      	ldr	r0, [r3, #32]
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	3324      	adds	r3, #36	; 0x24
 800d990:	220b      	movs	r2, #11
 800d992:	4619      	mov	r1, r3
 800d994:	f7fe fd62 	bl	800c45c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6a1b      	ldr	r3, [r3, #32]
 800d9a2:	330c      	adds	r3, #12
 800d9a4:	f002 0218 	and.w	r2, r2, #24
 800d9a8:	b2d2      	uxtb	r2, r2
 800d9aa:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d9ac:	69fb      	ldr	r3, [r7, #28]
 800d9ae:	2201      	movs	r2, #1
 800d9b0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d9b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	3730      	adds	r7, #48	; 0x30
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}
 800d9be:	bf00      	nop
 800d9c0:	4ec4ec4f 	.word	0x4ec4ec4f

0800d9c4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b08a      	sub	sp, #40	; 0x28
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	613b      	str	r3, [r7, #16]
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	68db      	ldr	r3, [r3, #12]
 800d9da:	60fb      	str	r3, [r7, #12]
 800d9dc:	2300      	movs	r3, #0
 800d9de:	617b      	str	r3, [r7, #20]
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d9e4:	69bb      	ldr	r3, [r7, #24]
 800d9e6:	1c5a      	adds	r2, r3, #1
 800d9e8:	61ba      	str	r2, [r7, #24]
 800d9ea:	693a      	ldr	r2, [r7, #16]
 800d9ec:	4413      	add	r3, r2
 800d9ee:	781b      	ldrb	r3, [r3, #0]
 800d9f0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d9f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9f4:	2b1f      	cmp	r3, #31
 800d9f6:	d940      	bls.n	800da7a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d9f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9fa:	2b2f      	cmp	r3, #47	; 0x2f
 800d9fc:	d006      	beq.n	800da0c <create_name+0x48>
 800d9fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da00:	2b5c      	cmp	r3, #92	; 0x5c
 800da02:	d110      	bne.n	800da26 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800da04:	e002      	b.n	800da0c <create_name+0x48>
 800da06:	69bb      	ldr	r3, [r7, #24]
 800da08:	3301      	adds	r3, #1
 800da0a:	61bb      	str	r3, [r7, #24]
 800da0c:	693a      	ldr	r2, [r7, #16]
 800da0e:	69bb      	ldr	r3, [r7, #24]
 800da10:	4413      	add	r3, r2
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	2b2f      	cmp	r3, #47	; 0x2f
 800da16:	d0f6      	beq.n	800da06 <create_name+0x42>
 800da18:	693a      	ldr	r2, [r7, #16]
 800da1a:	69bb      	ldr	r3, [r7, #24]
 800da1c:	4413      	add	r3, r2
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	2b5c      	cmp	r3, #92	; 0x5c
 800da22:	d0f0      	beq.n	800da06 <create_name+0x42>
			break;
 800da24:	e02a      	b.n	800da7c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	2bfe      	cmp	r3, #254	; 0xfe
 800da2a:	d901      	bls.n	800da30 <create_name+0x6c>
 800da2c:	2306      	movs	r3, #6
 800da2e:	e17d      	b.n	800dd2c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800da30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da32:	b2db      	uxtb	r3, r3
 800da34:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800da36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da38:	2101      	movs	r1, #1
 800da3a:	4618      	mov	r0, r3
 800da3c:	f001 f954 	bl	800ece8 <ff_convert>
 800da40:	4603      	mov	r3, r0
 800da42:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800da44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da46:	2b00      	cmp	r3, #0
 800da48:	d101      	bne.n	800da4e <create_name+0x8a>
 800da4a:	2306      	movs	r3, #6
 800da4c:	e16e      	b.n	800dd2c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800da4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da50:	2b7f      	cmp	r3, #127	; 0x7f
 800da52:	d809      	bhi.n	800da68 <create_name+0xa4>
 800da54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da56:	4619      	mov	r1, r3
 800da58:	488d      	ldr	r0, [pc, #564]	; (800dc90 <create_name+0x2cc>)
 800da5a:	f7fe fd62 	bl	800c522 <chk_chr>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b00      	cmp	r3, #0
 800da62:	d001      	beq.n	800da68 <create_name+0xa4>
 800da64:	2306      	movs	r3, #6
 800da66:	e161      	b.n	800dd2c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	1c5a      	adds	r2, r3, #1
 800da6c:	617a      	str	r2, [r7, #20]
 800da6e:	005b      	lsls	r3, r3, #1
 800da70:	68fa      	ldr	r2, [r7, #12]
 800da72:	4413      	add	r3, r2
 800da74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800da76:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800da78:	e7b4      	b.n	800d9e4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800da7a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800da7c:	693a      	ldr	r2, [r7, #16]
 800da7e:	69bb      	ldr	r3, [r7, #24]
 800da80:	441a      	add	r2, r3
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800da86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da88:	2b1f      	cmp	r3, #31
 800da8a:	d801      	bhi.n	800da90 <create_name+0xcc>
 800da8c:	2304      	movs	r3, #4
 800da8e:	e000      	b.n	800da92 <create_name+0xce>
 800da90:	2300      	movs	r3, #0
 800da92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800da96:	e011      	b.n	800dabc <create_name+0xf8>
		w = lfn[di - 1];
 800da98:	697a      	ldr	r2, [r7, #20]
 800da9a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800da9e:	4413      	add	r3, r2
 800daa0:	005b      	lsls	r3, r3, #1
 800daa2:	68fa      	ldr	r2, [r7, #12]
 800daa4:	4413      	add	r3, r2
 800daa6:	881b      	ldrh	r3, [r3, #0]
 800daa8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800daaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800daac:	2b20      	cmp	r3, #32
 800daae:	d002      	beq.n	800dab6 <create_name+0xf2>
 800dab0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dab2:	2b2e      	cmp	r3, #46	; 0x2e
 800dab4:	d106      	bne.n	800dac4 <create_name+0x100>
		di--;
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	3b01      	subs	r3, #1
 800daba:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dabc:	697b      	ldr	r3, [r7, #20]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d1ea      	bne.n	800da98 <create_name+0xd4>
 800dac2:	e000      	b.n	800dac6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800dac4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	005b      	lsls	r3, r3, #1
 800daca:	68fa      	ldr	r2, [r7, #12]
 800dacc:	4413      	add	r3, r2
 800dace:	2200      	movs	r2, #0
 800dad0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d101      	bne.n	800dadc <create_name+0x118>
 800dad8:	2306      	movs	r3, #6
 800dada:	e127      	b.n	800dd2c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	3324      	adds	r3, #36	; 0x24
 800dae0:	220b      	movs	r2, #11
 800dae2:	2120      	movs	r1, #32
 800dae4:	4618      	mov	r0, r3
 800dae6:	f7fe fcda 	bl	800c49e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800daea:	2300      	movs	r3, #0
 800daec:	61bb      	str	r3, [r7, #24]
 800daee:	e002      	b.n	800daf6 <create_name+0x132>
 800daf0:	69bb      	ldr	r3, [r7, #24]
 800daf2:	3301      	adds	r3, #1
 800daf4:	61bb      	str	r3, [r7, #24]
 800daf6:	69bb      	ldr	r3, [r7, #24]
 800daf8:	005b      	lsls	r3, r3, #1
 800dafa:	68fa      	ldr	r2, [r7, #12]
 800dafc:	4413      	add	r3, r2
 800dafe:	881b      	ldrh	r3, [r3, #0]
 800db00:	2b20      	cmp	r3, #32
 800db02:	d0f5      	beq.n	800daf0 <create_name+0x12c>
 800db04:	69bb      	ldr	r3, [r7, #24]
 800db06:	005b      	lsls	r3, r3, #1
 800db08:	68fa      	ldr	r2, [r7, #12]
 800db0a:	4413      	add	r3, r2
 800db0c:	881b      	ldrh	r3, [r3, #0]
 800db0e:	2b2e      	cmp	r3, #46	; 0x2e
 800db10:	d0ee      	beq.n	800daf0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800db12:	69bb      	ldr	r3, [r7, #24]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d009      	beq.n	800db2c <create_name+0x168>
 800db18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db1c:	f043 0303 	orr.w	r3, r3, #3
 800db20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800db24:	e002      	b.n	800db2c <create_name+0x168>
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	3b01      	subs	r3, #1
 800db2a:	617b      	str	r3, [r7, #20]
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d009      	beq.n	800db46 <create_name+0x182>
 800db32:	697a      	ldr	r2, [r7, #20]
 800db34:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800db38:	4413      	add	r3, r2
 800db3a:	005b      	lsls	r3, r3, #1
 800db3c:	68fa      	ldr	r2, [r7, #12]
 800db3e:	4413      	add	r3, r2
 800db40:	881b      	ldrh	r3, [r3, #0]
 800db42:	2b2e      	cmp	r3, #46	; 0x2e
 800db44:	d1ef      	bne.n	800db26 <create_name+0x162>

	i = b = 0; ni = 8;
 800db46:	2300      	movs	r3, #0
 800db48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800db4c:	2300      	movs	r3, #0
 800db4e:	623b      	str	r3, [r7, #32]
 800db50:	2308      	movs	r3, #8
 800db52:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800db54:	69bb      	ldr	r3, [r7, #24]
 800db56:	1c5a      	adds	r2, r3, #1
 800db58:	61ba      	str	r2, [r7, #24]
 800db5a:	005b      	lsls	r3, r3, #1
 800db5c:	68fa      	ldr	r2, [r7, #12]
 800db5e:	4413      	add	r3, r2
 800db60:	881b      	ldrh	r3, [r3, #0]
 800db62:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800db64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db66:	2b00      	cmp	r3, #0
 800db68:	f000 8090 	beq.w	800dc8c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800db6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db6e:	2b20      	cmp	r3, #32
 800db70:	d006      	beq.n	800db80 <create_name+0x1bc>
 800db72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db74:	2b2e      	cmp	r3, #46	; 0x2e
 800db76:	d10a      	bne.n	800db8e <create_name+0x1ca>
 800db78:	69ba      	ldr	r2, [r7, #24]
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	429a      	cmp	r2, r3
 800db7e:	d006      	beq.n	800db8e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800db80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db84:	f043 0303 	orr.w	r3, r3, #3
 800db88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800db8c:	e07d      	b.n	800dc8a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800db8e:	6a3a      	ldr	r2, [r7, #32]
 800db90:	69fb      	ldr	r3, [r7, #28]
 800db92:	429a      	cmp	r2, r3
 800db94:	d203      	bcs.n	800db9e <create_name+0x1da>
 800db96:	69ba      	ldr	r2, [r7, #24]
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d123      	bne.n	800dbe6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800db9e:	69fb      	ldr	r3, [r7, #28]
 800dba0:	2b0b      	cmp	r3, #11
 800dba2:	d106      	bne.n	800dbb2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800dba4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dba8:	f043 0303 	orr.w	r3, r3, #3
 800dbac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dbb0:	e075      	b.n	800dc9e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800dbb2:	69ba      	ldr	r2, [r7, #24]
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d005      	beq.n	800dbc6 <create_name+0x202>
 800dbba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbbe:	f043 0303 	orr.w	r3, r3, #3
 800dbc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800dbc6:	69ba      	ldr	r2, [r7, #24]
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d866      	bhi.n	800dc9c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	61bb      	str	r3, [r7, #24]
 800dbd2:	2308      	movs	r3, #8
 800dbd4:	623b      	str	r3, [r7, #32]
 800dbd6:	230b      	movs	r3, #11
 800dbd8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800dbda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dbde:	009b      	lsls	r3, r3, #2
 800dbe0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dbe4:	e051      	b.n	800dc8a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800dbe6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dbe8:	2b7f      	cmp	r3, #127	; 0x7f
 800dbea:	d914      	bls.n	800dc16 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800dbec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dbee:	2100      	movs	r1, #0
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f001 f879 	bl	800ece8 <ff_convert>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800dbfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d004      	beq.n	800dc0a <create_name+0x246>
 800dc00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc02:	3b80      	subs	r3, #128	; 0x80
 800dc04:	4a23      	ldr	r2, [pc, #140]	; (800dc94 <create_name+0x2d0>)
 800dc06:	5cd3      	ldrb	r3, [r2, r3]
 800dc08:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800dc0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc0e:	f043 0302 	orr.w	r3, r3, #2
 800dc12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800dc16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d007      	beq.n	800dc2c <create_name+0x268>
 800dc1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc1e:	4619      	mov	r1, r3
 800dc20:	481d      	ldr	r0, [pc, #116]	; (800dc98 <create_name+0x2d4>)
 800dc22:	f7fe fc7e 	bl	800c522 <chk_chr>
 800dc26:	4603      	mov	r3, r0
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d008      	beq.n	800dc3e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800dc2c:	235f      	movs	r3, #95	; 0x5f
 800dc2e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800dc30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc34:	f043 0303 	orr.w	r3, r3, #3
 800dc38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dc3c:	e01b      	b.n	800dc76 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800dc3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc40:	2b40      	cmp	r3, #64	; 0x40
 800dc42:	d909      	bls.n	800dc58 <create_name+0x294>
 800dc44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc46:	2b5a      	cmp	r3, #90	; 0x5a
 800dc48:	d806      	bhi.n	800dc58 <create_name+0x294>
					b |= 2;
 800dc4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc4e:	f043 0302 	orr.w	r3, r3, #2
 800dc52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dc56:	e00e      	b.n	800dc76 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800dc58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc5a:	2b60      	cmp	r3, #96	; 0x60
 800dc5c:	d90b      	bls.n	800dc76 <create_name+0x2b2>
 800dc5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc60:	2b7a      	cmp	r3, #122	; 0x7a
 800dc62:	d808      	bhi.n	800dc76 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800dc64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc68:	f043 0301 	orr.w	r3, r3, #1
 800dc6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dc70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc72:	3b20      	subs	r3, #32
 800dc74:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800dc76:	6a3b      	ldr	r3, [r7, #32]
 800dc78:	1c5a      	adds	r2, r3, #1
 800dc7a:	623a      	str	r2, [r7, #32]
 800dc7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dc7e:	b2d1      	uxtb	r1, r2
 800dc80:	687a      	ldr	r2, [r7, #4]
 800dc82:	4413      	add	r3, r2
 800dc84:	460a      	mov	r2, r1
 800dc86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800dc8a:	e763      	b.n	800db54 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800dc8c:	bf00      	nop
 800dc8e:	e006      	b.n	800dc9e <create_name+0x2da>
 800dc90:	0800f950 	.word	0x0800f950
 800dc94:	0800ff80 	.word	0x0800ff80
 800dc98:	0800f95c 	.word	0x0800f95c
			if (si > di) break;			/* No extension */
 800dc9c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dca4:	2be5      	cmp	r3, #229	; 0xe5
 800dca6:	d103      	bne.n	800dcb0 <create_name+0x2ec>
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2205      	movs	r2, #5
 800dcac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800dcb0:	69fb      	ldr	r3, [r7, #28]
 800dcb2:	2b08      	cmp	r3, #8
 800dcb4:	d104      	bne.n	800dcc0 <create_name+0x2fc>
 800dcb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dcba:	009b      	lsls	r3, r3, #2
 800dcbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800dcc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dcc4:	f003 030c 	and.w	r3, r3, #12
 800dcc8:	2b0c      	cmp	r3, #12
 800dcca:	d005      	beq.n	800dcd8 <create_name+0x314>
 800dccc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dcd0:	f003 0303 	and.w	r3, r3, #3
 800dcd4:	2b03      	cmp	r3, #3
 800dcd6:	d105      	bne.n	800dce4 <create_name+0x320>
 800dcd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcdc:	f043 0302 	orr.w	r3, r3, #2
 800dce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800dce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dce8:	f003 0302 	and.w	r3, r3, #2
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d117      	bne.n	800dd20 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800dcf0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dcf4:	f003 0303 	and.w	r3, r3, #3
 800dcf8:	2b01      	cmp	r3, #1
 800dcfa:	d105      	bne.n	800dd08 <create_name+0x344>
 800dcfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd00:	f043 0310 	orr.w	r3, r3, #16
 800dd04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800dd08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd0c:	f003 030c 	and.w	r3, r3, #12
 800dd10:	2b04      	cmp	r3, #4
 800dd12:	d105      	bne.n	800dd20 <create_name+0x35c>
 800dd14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd18:	f043 0308 	orr.w	r3, r3, #8
 800dd1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dd26:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800dd2a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3728      	adds	r7, #40	; 0x28
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}

0800dd34 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b086      	sub	sp, #24
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
 800dd3c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dd48:	e002      	b.n	800dd50 <follow_path+0x1c>
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	3301      	adds	r3, #1
 800dd4e:	603b      	str	r3, [r7, #0]
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	2b2f      	cmp	r3, #47	; 0x2f
 800dd56:	d0f8      	beq.n	800dd4a <follow_path+0x16>
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	781b      	ldrb	r3, [r3, #0]
 800dd5c:	2b5c      	cmp	r3, #92	; 0x5c
 800dd5e:	d0f4      	beq.n	800dd4a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	2200      	movs	r2, #0
 800dd64:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	781b      	ldrb	r3, [r3, #0]
 800dd6a:	2b1f      	cmp	r3, #31
 800dd6c:	d80a      	bhi.n	800dd84 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2280      	movs	r2, #128	; 0x80
 800dd72:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800dd76:	2100      	movs	r1, #0
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	f7ff f91d 	bl	800cfb8 <dir_sdi>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	75fb      	strb	r3, [r7, #23]
 800dd82:	e043      	b.n	800de0c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dd84:	463b      	mov	r3, r7
 800dd86:	4619      	mov	r1, r3
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f7ff fe1b 	bl	800d9c4 <create_name>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dd92:	7dfb      	ldrb	r3, [r7, #23]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d134      	bne.n	800de02 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f7ff fc5a 	bl	800d652 <dir_find>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dda8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ddaa:	7dfb      	ldrb	r3, [r7, #23]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d00a      	beq.n	800ddc6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ddb0:	7dfb      	ldrb	r3, [r7, #23]
 800ddb2:	2b04      	cmp	r3, #4
 800ddb4:	d127      	bne.n	800de06 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ddb6:	7afb      	ldrb	r3, [r7, #11]
 800ddb8:	f003 0304 	and.w	r3, r3, #4
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d122      	bne.n	800de06 <follow_path+0xd2>
 800ddc0:	2305      	movs	r3, #5
 800ddc2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ddc4:	e01f      	b.n	800de06 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ddc6:	7afb      	ldrb	r3, [r7, #11]
 800ddc8:	f003 0304 	and.w	r3, r3, #4
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d11c      	bne.n	800de0a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ddd0:	693b      	ldr	r3, [r7, #16]
 800ddd2:	799b      	ldrb	r3, [r3, #6]
 800ddd4:	f003 0310 	and.w	r3, r3, #16
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d102      	bne.n	800dde2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800dddc:	2305      	movs	r3, #5
 800ddde:	75fb      	strb	r3, [r7, #23]
 800dde0:	e014      	b.n	800de0c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	695b      	ldr	r3, [r3, #20]
 800ddec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddf0:	4413      	add	r3, r2
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	68f8      	ldr	r0, [r7, #12]
 800ddf6:	f7ff fa66 	bl	800d2c6 <ld_clust>
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800de00:	e7c0      	b.n	800dd84 <follow_path+0x50>
			if (res != FR_OK) break;
 800de02:	bf00      	nop
 800de04:	e002      	b.n	800de0c <follow_path+0xd8>
				break;
 800de06:	bf00      	nop
 800de08:	e000      	b.n	800de0c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800de0a:	bf00      	nop
			}
		}
	}

	return res;
 800de0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800de0e:	4618      	mov	r0, r3
 800de10:	3718      	adds	r7, #24
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}

0800de16 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800de16:	b480      	push	{r7}
 800de18:	b087      	sub	sp, #28
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800de1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de22:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d031      	beq.n	800de90 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	617b      	str	r3, [r7, #20]
 800de32:	e002      	b.n	800de3a <get_ldnumber+0x24>
 800de34:	697b      	ldr	r3, [r7, #20]
 800de36:	3301      	adds	r3, #1
 800de38:	617b      	str	r3, [r7, #20]
 800de3a:	697b      	ldr	r3, [r7, #20]
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	2b1f      	cmp	r3, #31
 800de40:	d903      	bls.n	800de4a <get_ldnumber+0x34>
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	781b      	ldrb	r3, [r3, #0]
 800de46:	2b3a      	cmp	r3, #58	; 0x3a
 800de48:	d1f4      	bne.n	800de34 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	2b3a      	cmp	r3, #58	; 0x3a
 800de50:	d11c      	bne.n	800de8c <get_ldnumber+0x76>
			tp = *path;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	1c5a      	adds	r2, r3, #1
 800de5c:	60fa      	str	r2, [r7, #12]
 800de5e:	781b      	ldrb	r3, [r3, #0]
 800de60:	3b30      	subs	r3, #48	; 0x30
 800de62:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	2b09      	cmp	r3, #9
 800de68:	d80e      	bhi.n	800de88 <get_ldnumber+0x72>
 800de6a:	68fa      	ldr	r2, [r7, #12]
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	429a      	cmp	r2, r3
 800de70:	d10a      	bne.n	800de88 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d107      	bne.n	800de88 <get_ldnumber+0x72>
					vol = (int)i;
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	3301      	adds	r3, #1
 800de80:	617b      	str	r3, [r7, #20]
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	697a      	ldr	r2, [r7, #20]
 800de86:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800de88:	693b      	ldr	r3, [r7, #16]
 800de8a:	e002      	b.n	800de92 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800de8c:	2300      	movs	r3, #0
 800de8e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800de90:	693b      	ldr	r3, [r7, #16]
}
 800de92:	4618      	mov	r0, r3
 800de94:	371c      	adds	r7, #28
 800de96:	46bd      	mov	sp, r7
 800de98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9c:	4770      	bx	lr
	...

0800dea0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b082      	sub	sp, #8
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2200      	movs	r2, #0
 800deae:	70da      	strb	r2, [r3, #3]
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800deb6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800deb8:	6839      	ldr	r1, [r7, #0]
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f7fe fcfc 	bl	800c8b8 <move_window>
 800dec0:	4603      	mov	r3, r0
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d001      	beq.n	800deca <check_fs+0x2a>
 800dec6:	2304      	movs	r3, #4
 800dec8:	e038      	b.n	800df3c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	3334      	adds	r3, #52	; 0x34
 800dece:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ded2:	4618      	mov	r0, r3
 800ded4:	f7fe fa40 	bl	800c358 <ld_word>
 800ded8:	4603      	mov	r3, r0
 800deda:	461a      	mov	r2, r3
 800dedc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dee0:	429a      	cmp	r2, r3
 800dee2:	d001      	beq.n	800dee8 <check_fs+0x48>
 800dee4:	2303      	movs	r3, #3
 800dee6:	e029      	b.n	800df3c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800deee:	2be9      	cmp	r3, #233	; 0xe9
 800def0:	d009      	beq.n	800df06 <check_fs+0x66>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800def8:	2beb      	cmp	r3, #235	; 0xeb
 800defa:	d11e      	bne.n	800df3a <check_fs+0x9a>
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800df02:	2b90      	cmp	r3, #144	; 0x90
 800df04:	d119      	bne.n	800df3a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	3334      	adds	r3, #52	; 0x34
 800df0a:	3336      	adds	r3, #54	; 0x36
 800df0c:	4618      	mov	r0, r3
 800df0e:	f7fe fa3b 	bl	800c388 <ld_dword>
 800df12:	4603      	mov	r3, r0
 800df14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800df18:	4a0a      	ldr	r2, [pc, #40]	; (800df44 <check_fs+0xa4>)
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d101      	bne.n	800df22 <check_fs+0x82>
 800df1e:	2300      	movs	r3, #0
 800df20:	e00c      	b.n	800df3c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	3334      	adds	r3, #52	; 0x34
 800df26:	3352      	adds	r3, #82	; 0x52
 800df28:	4618      	mov	r0, r3
 800df2a:	f7fe fa2d 	bl	800c388 <ld_dword>
 800df2e:	4603      	mov	r3, r0
 800df30:	4a05      	ldr	r2, [pc, #20]	; (800df48 <check_fs+0xa8>)
 800df32:	4293      	cmp	r3, r2
 800df34:	d101      	bne.n	800df3a <check_fs+0x9a>
 800df36:	2300      	movs	r3, #0
 800df38:	e000      	b.n	800df3c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800df3a:	2302      	movs	r3, #2
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3708      	adds	r7, #8
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}
 800df44:	00544146 	.word	0x00544146
 800df48:	33544146 	.word	0x33544146

0800df4c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b096      	sub	sp, #88	; 0x58
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	4613      	mov	r3, r2
 800df58:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	2200      	movs	r2, #0
 800df5e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800df60:	68f8      	ldr	r0, [r7, #12]
 800df62:	f7ff ff58 	bl	800de16 <get_ldnumber>
 800df66:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800df68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	da01      	bge.n	800df72 <find_volume+0x26>
 800df6e:	230b      	movs	r3, #11
 800df70:	e230      	b.n	800e3d4 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800df72:	4aa1      	ldr	r2, [pc, #644]	; (800e1f8 <find_volume+0x2ac>)
 800df74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df7a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800df7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d101      	bne.n	800df86 <find_volume+0x3a>
 800df82:	230c      	movs	r3, #12
 800df84:	e226      	b.n	800e3d4 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df8a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800df8c:	79fb      	ldrb	r3, [r7, #7]
 800df8e:	f023 0301 	bic.w	r3, r3, #1
 800df92:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800df94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df96:	781b      	ldrb	r3, [r3, #0]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d01a      	beq.n	800dfd2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800df9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9e:	785b      	ldrb	r3, [r3, #1]
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f7fe f93b 	bl	800c21c <disk_status>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dfac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dfb0:	f003 0301 	and.w	r3, r3, #1
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d10c      	bne.n	800dfd2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dfb8:	79fb      	ldrb	r3, [r7, #7]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d007      	beq.n	800dfce <find_volume+0x82>
 800dfbe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dfc2:	f003 0304 	and.w	r3, r3, #4
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d001      	beq.n	800dfce <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800dfca:	230a      	movs	r3, #10
 800dfcc:	e202      	b.n	800e3d4 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800dfce:	2300      	movs	r3, #0
 800dfd0:	e200      	b.n	800e3d4 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dfd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dfd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfda:	b2da      	uxtb	r2, r3
 800dfdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfde:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfe2:	785b      	ldrb	r3, [r3, #1]
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f7fe f933 	bl	800c250 <disk_initialize>
 800dfea:	4603      	mov	r3, r0
 800dfec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800dff0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dff4:	f003 0301 	and.w	r3, r3, #1
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d001      	beq.n	800e000 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800dffc:	2303      	movs	r3, #3
 800dffe:	e1e9      	b.n	800e3d4 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e000:	79fb      	ldrb	r3, [r7, #7]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d007      	beq.n	800e016 <find_volume+0xca>
 800e006:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e00a:	f003 0304 	and.w	r3, r3, #4
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d001      	beq.n	800e016 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e012:	230a      	movs	r3, #10
 800e014:	e1de      	b.n	800e3d4 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e016:	2300      	movs	r3, #0
 800e018:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e01a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e01c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e01e:	f7ff ff3f 	bl	800dea0 <check_fs>
 800e022:	4603      	mov	r3, r0
 800e024:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e028:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e02c:	2b02      	cmp	r3, #2
 800e02e:	d149      	bne.n	800e0c4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e030:	2300      	movs	r3, #0
 800e032:	643b      	str	r3, [r7, #64]	; 0x40
 800e034:	e01e      	b.n	800e074 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e038:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e03c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e03e:	011b      	lsls	r3, r3, #4
 800e040:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e044:	4413      	add	r3, r2
 800e046:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e04a:	3304      	adds	r3, #4
 800e04c:	781b      	ldrb	r3, [r3, #0]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d006      	beq.n	800e060 <find_volume+0x114>
 800e052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e054:	3308      	adds	r3, #8
 800e056:	4618      	mov	r0, r3
 800e058:	f7fe f996 	bl	800c388 <ld_dword>
 800e05c:	4602      	mov	r2, r0
 800e05e:	e000      	b.n	800e062 <find_volume+0x116>
 800e060:	2200      	movs	r2, #0
 800e062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e064:	009b      	lsls	r3, r3, #2
 800e066:	3358      	adds	r3, #88	; 0x58
 800e068:	443b      	add	r3, r7
 800e06a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e06e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e070:	3301      	adds	r3, #1
 800e072:	643b      	str	r3, [r7, #64]	; 0x40
 800e074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e076:	2b03      	cmp	r3, #3
 800e078:	d9dd      	bls.n	800e036 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e07a:	2300      	movs	r3, #0
 800e07c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e07e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e080:	2b00      	cmp	r3, #0
 800e082:	d002      	beq.n	800e08a <find_volume+0x13e>
 800e084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e086:	3b01      	subs	r3, #1
 800e088:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e08a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e08c:	009b      	lsls	r3, r3, #2
 800e08e:	3358      	adds	r3, #88	; 0x58
 800e090:	443b      	add	r3, r7
 800e092:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e096:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d005      	beq.n	800e0aa <find_volume+0x15e>
 800e09e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e0a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e0a2:	f7ff fefd 	bl	800dea0 <check_fs>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	e000      	b.n	800e0ac <find_volume+0x160>
 800e0aa:	2303      	movs	r3, #3
 800e0ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e0b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	d905      	bls.n	800e0c4 <find_volume+0x178>
 800e0b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0ba:	3301      	adds	r3, #1
 800e0bc:	643b      	str	r3, [r7, #64]	; 0x40
 800e0be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0c0:	2b03      	cmp	r3, #3
 800e0c2:	d9e2      	bls.n	800e08a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e0c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0c8:	2b04      	cmp	r3, #4
 800e0ca:	d101      	bne.n	800e0d0 <find_volume+0x184>
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	e181      	b.n	800e3d4 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e0d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0d4:	2b01      	cmp	r3, #1
 800e0d6:	d901      	bls.n	800e0dc <find_volume+0x190>
 800e0d8:	230d      	movs	r3, #13
 800e0da:	e17b      	b.n	800e3d4 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0de:	3334      	adds	r3, #52	; 0x34
 800e0e0:	330b      	adds	r3, #11
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f7fe f938 	bl	800c358 <ld_word>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e0ee:	d001      	beq.n	800e0f4 <find_volume+0x1a8>
 800e0f0:	230d      	movs	r3, #13
 800e0f2:	e16f      	b.n	800e3d4 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f6:	3334      	adds	r3, #52	; 0x34
 800e0f8:	3316      	adds	r3, #22
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f7fe f92c 	bl	800c358 <ld_word>
 800e100:	4603      	mov	r3, r0
 800e102:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e106:	2b00      	cmp	r3, #0
 800e108:	d106      	bne.n	800e118 <find_volume+0x1cc>
 800e10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e10c:	3334      	adds	r3, #52	; 0x34
 800e10e:	3324      	adds	r3, #36	; 0x24
 800e110:	4618      	mov	r0, r3
 800e112:	f7fe f939 	bl	800c388 <ld_dword>
 800e116:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e11a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e11c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e120:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e126:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e12a:	789b      	ldrb	r3, [r3, #2]
 800e12c:	2b01      	cmp	r3, #1
 800e12e:	d005      	beq.n	800e13c <find_volume+0x1f0>
 800e130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e132:	789b      	ldrb	r3, [r3, #2]
 800e134:	2b02      	cmp	r3, #2
 800e136:	d001      	beq.n	800e13c <find_volume+0x1f0>
 800e138:	230d      	movs	r3, #13
 800e13a:	e14b      	b.n	800e3d4 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e13e:	789b      	ldrb	r3, [r3, #2]
 800e140:	461a      	mov	r2, r3
 800e142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e144:	fb02 f303 	mul.w	r3, r2, r3
 800e148:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e14c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e150:	b29a      	uxth	r2, r3
 800e152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e154:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e158:	895b      	ldrh	r3, [r3, #10]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d008      	beq.n	800e170 <find_volume+0x224>
 800e15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e160:	895b      	ldrh	r3, [r3, #10]
 800e162:	461a      	mov	r2, r3
 800e164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e166:	895b      	ldrh	r3, [r3, #10]
 800e168:	3b01      	subs	r3, #1
 800e16a:	4013      	ands	r3, r2
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d001      	beq.n	800e174 <find_volume+0x228>
 800e170:	230d      	movs	r3, #13
 800e172:	e12f      	b.n	800e3d4 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e176:	3334      	adds	r3, #52	; 0x34
 800e178:	3311      	adds	r3, #17
 800e17a:	4618      	mov	r0, r3
 800e17c:	f7fe f8ec 	bl	800c358 <ld_word>
 800e180:	4603      	mov	r3, r0
 800e182:	461a      	mov	r2, r3
 800e184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e186:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e18a:	891b      	ldrh	r3, [r3, #8]
 800e18c:	f003 030f 	and.w	r3, r3, #15
 800e190:	b29b      	uxth	r3, r3
 800e192:	2b00      	cmp	r3, #0
 800e194:	d001      	beq.n	800e19a <find_volume+0x24e>
 800e196:	230d      	movs	r3, #13
 800e198:	e11c      	b.n	800e3d4 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e19c:	3334      	adds	r3, #52	; 0x34
 800e19e:	3313      	adds	r3, #19
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f7fe f8d9 	bl	800c358 <ld_word>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e1aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d106      	bne.n	800e1be <find_volume+0x272>
 800e1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1b2:	3334      	adds	r3, #52	; 0x34
 800e1b4:	3320      	adds	r3, #32
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7fe f8e6 	bl	800c388 <ld_dword>
 800e1bc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1c0:	3334      	adds	r3, #52	; 0x34
 800e1c2:	330e      	adds	r3, #14
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f7fe f8c7 	bl	800c358 <ld_word>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e1ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d101      	bne.n	800e1d8 <find_volume+0x28c>
 800e1d4:	230d      	movs	r3, #13
 800e1d6:	e0fd      	b.n	800e3d4 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e1d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e1da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1dc:	4413      	add	r3, r2
 800e1de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1e0:	8912      	ldrh	r2, [r2, #8]
 800e1e2:	0912      	lsrs	r2, r2, #4
 800e1e4:	b292      	uxth	r2, r2
 800e1e6:	4413      	add	r3, r2
 800e1e8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e1ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ee:	429a      	cmp	r2, r3
 800e1f0:	d204      	bcs.n	800e1fc <find_volume+0x2b0>
 800e1f2:	230d      	movs	r3, #13
 800e1f4:	e0ee      	b.n	800e3d4 <find_volume+0x488>
 800e1f6:	bf00      	nop
 800e1f8:	24000290 	.word	0x24000290
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e1fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e200:	1ad3      	subs	r3, r2, r3
 800e202:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e204:	8952      	ldrh	r2, [r2, #10]
 800e206:	fbb3 f3f2 	udiv	r3, r3, r2
 800e20a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d101      	bne.n	800e216 <find_volume+0x2ca>
 800e212:	230d      	movs	r3, #13
 800e214:	e0de      	b.n	800e3d4 <find_volume+0x488>
		fmt = FS_FAT32;
 800e216:	2303      	movs	r3, #3
 800e218:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e222:	4293      	cmp	r3, r2
 800e224:	d802      	bhi.n	800e22c <find_volume+0x2e0>
 800e226:	2302      	movs	r3, #2
 800e228:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e22e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e232:	4293      	cmp	r3, r2
 800e234:	d802      	bhi.n	800e23c <find_volume+0x2f0>
 800e236:	2301      	movs	r3, #1
 800e238:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e23e:	1c9a      	adds	r2, r3, #2
 800e240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e242:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e246:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e248:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e24a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e24c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e24e:	441a      	add	r2, r3
 800e250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e252:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e254:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e258:	441a      	add	r2, r3
 800e25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e25c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800e25e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e262:	2b03      	cmp	r3, #3
 800e264:	d11e      	bne.n	800e2a4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e268:	3334      	adds	r3, #52	; 0x34
 800e26a:	332a      	adds	r3, #42	; 0x2a
 800e26c:	4618      	mov	r0, r3
 800e26e:	f7fe f873 	bl	800c358 <ld_word>
 800e272:	4603      	mov	r3, r0
 800e274:	2b00      	cmp	r3, #0
 800e276:	d001      	beq.n	800e27c <find_volume+0x330>
 800e278:	230d      	movs	r3, #13
 800e27a:	e0ab      	b.n	800e3d4 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e27e:	891b      	ldrh	r3, [r3, #8]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d001      	beq.n	800e288 <find_volume+0x33c>
 800e284:	230d      	movs	r3, #13
 800e286:	e0a5      	b.n	800e3d4 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e28a:	3334      	adds	r3, #52	; 0x34
 800e28c:	332c      	adds	r3, #44	; 0x2c
 800e28e:	4618      	mov	r0, r3
 800e290:	f7fe f87a 	bl	800c388 <ld_dword>
 800e294:	4602      	mov	r2, r0
 800e296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e298:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e29c:	699b      	ldr	r3, [r3, #24]
 800e29e:	009b      	lsls	r3, r3, #2
 800e2a0:	647b      	str	r3, [r7, #68]	; 0x44
 800e2a2:	e01f      	b.n	800e2e4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2a6:	891b      	ldrh	r3, [r3, #8]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d101      	bne.n	800e2b0 <find_volume+0x364>
 800e2ac:	230d      	movs	r3, #13
 800e2ae:	e091      	b.n	800e3d4 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2b6:	441a      	add	r2, r3
 800e2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ba:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e2bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e2c0:	2b02      	cmp	r3, #2
 800e2c2:	d103      	bne.n	800e2cc <find_volume+0x380>
 800e2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c6:	699b      	ldr	r3, [r3, #24]
 800e2c8:	005b      	lsls	r3, r3, #1
 800e2ca:	e00a      	b.n	800e2e2 <find_volume+0x396>
 800e2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ce:	699a      	ldr	r2, [r3, #24]
 800e2d0:	4613      	mov	r3, r2
 800e2d2:	005b      	lsls	r3, r3, #1
 800e2d4:	4413      	add	r3, r2
 800e2d6:	085a      	lsrs	r2, r3, #1
 800e2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2da:	699b      	ldr	r3, [r3, #24]
 800e2dc:	f003 0301 	and.w	r3, r3, #1
 800e2e0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e2e2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e6:	69da      	ldr	r2, [r3, #28]
 800e2e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2ea:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e2ee:	0a5b      	lsrs	r3, r3, #9
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d201      	bcs.n	800e2f8 <find_volume+0x3ac>
 800e2f4:	230d      	movs	r3, #13
 800e2f6:	e06d      	b.n	800e3d4 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e2fe:	615a      	str	r2, [r3, #20]
 800e300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e302:	695a      	ldr	r2, [r3, #20]
 800e304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e306:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e30a:	2280      	movs	r2, #128	; 0x80
 800e30c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e30e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e312:	2b03      	cmp	r3, #3
 800e314:	d149      	bne.n	800e3aa <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e318:	3334      	adds	r3, #52	; 0x34
 800e31a:	3330      	adds	r3, #48	; 0x30
 800e31c:	4618      	mov	r0, r3
 800e31e:	f7fe f81b 	bl	800c358 <ld_word>
 800e322:	4603      	mov	r3, r0
 800e324:	2b01      	cmp	r3, #1
 800e326:	d140      	bne.n	800e3aa <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e32a:	3301      	adds	r3, #1
 800e32c:	4619      	mov	r1, r3
 800e32e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e330:	f7fe fac2 	bl	800c8b8 <move_window>
 800e334:	4603      	mov	r3, r0
 800e336:	2b00      	cmp	r3, #0
 800e338:	d137      	bne.n	800e3aa <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e33c:	2200      	movs	r2, #0
 800e33e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e342:	3334      	adds	r3, #52	; 0x34
 800e344:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e348:	4618      	mov	r0, r3
 800e34a:	f7fe f805 	bl	800c358 <ld_word>
 800e34e:	4603      	mov	r3, r0
 800e350:	461a      	mov	r2, r3
 800e352:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e356:	429a      	cmp	r2, r3
 800e358:	d127      	bne.n	800e3aa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e35c:	3334      	adds	r3, #52	; 0x34
 800e35e:	4618      	mov	r0, r3
 800e360:	f7fe f812 	bl	800c388 <ld_dword>
 800e364:	4603      	mov	r3, r0
 800e366:	4a1d      	ldr	r2, [pc, #116]	; (800e3dc <find_volume+0x490>)
 800e368:	4293      	cmp	r3, r2
 800e36a:	d11e      	bne.n	800e3aa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e36e:	3334      	adds	r3, #52	; 0x34
 800e370:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e374:	4618      	mov	r0, r3
 800e376:	f7fe f807 	bl	800c388 <ld_dword>
 800e37a:	4603      	mov	r3, r0
 800e37c:	4a18      	ldr	r2, [pc, #96]	; (800e3e0 <find_volume+0x494>)
 800e37e:	4293      	cmp	r3, r2
 800e380:	d113      	bne.n	800e3aa <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e384:	3334      	adds	r3, #52	; 0x34
 800e386:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e38a:	4618      	mov	r0, r3
 800e38c:	f7fd fffc 	bl	800c388 <ld_dword>
 800e390:	4602      	mov	r2, r0
 800e392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e394:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e398:	3334      	adds	r3, #52	; 0x34
 800e39a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f7fd fff2 	bl	800c388 <ld_dword>
 800e3a4:	4602      	mov	r2, r0
 800e3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3a8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ac:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e3b0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e3b2:	4b0c      	ldr	r3, [pc, #48]	; (800e3e4 <find_volume+0x498>)
 800e3b4:	881b      	ldrh	r3, [r3, #0]
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	b29a      	uxth	r2, r3
 800e3ba:	4b0a      	ldr	r3, [pc, #40]	; (800e3e4 <find_volume+0x498>)
 800e3bc:	801a      	strh	r2, [r3, #0]
 800e3be:	4b09      	ldr	r3, [pc, #36]	; (800e3e4 <find_volume+0x498>)
 800e3c0:	881a      	ldrh	r2, [r3, #0]
 800e3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c4:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c8:	4a07      	ldr	r2, [pc, #28]	; (800e3e8 <find_volume+0x49c>)
 800e3ca:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e3cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e3ce:	f7fe fa0b 	bl	800c7e8 <clear_lock>
#endif
	return FR_OK;
 800e3d2:	2300      	movs	r3, #0
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3758      	adds	r7, #88	; 0x58
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}
 800e3dc:	41615252 	.word	0x41615252
 800e3e0:	61417272 	.word	0x61417272
 800e3e4:	24000294 	.word	0x24000294
 800e3e8:	240002b8 	.word	0x240002b8

0800e3ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b084      	sub	sp, #16
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
 800e3f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e3f6:	2309      	movs	r3, #9
 800e3f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d01c      	beq.n	800e43a <validate+0x4e>
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d018      	beq.n	800e43a <validate+0x4e>
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	781b      	ldrb	r3, [r3, #0]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d013      	beq.n	800e43a <validate+0x4e>
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	889a      	ldrh	r2, [r3, #4]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	88db      	ldrh	r3, [r3, #6]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d10c      	bne.n	800e43a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	785b      	ldrb	r3, [r3, #1]
 800e426:	4618      	mov	r0, r3
 800e428:	f7fd fef8 	bl	800c21c <disk_status>
 800e42c:	4603      	mov	r3, r0
 800e42e:	f003 0301 	and.w	r3, r3, #1
 800e432:	2b00      	cmp	r3, #0
 800e434:	d101      	bne.n	800e43a <validate+0x4e>
			res = FR_OK;
 800e436:	2300      	movs	r3, #0
 800e438:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e43a:	7bfb      	ldrb	r3, [r7, #15]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d102      	bne.n	800e446 <validate+0x5a>
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	e000      	b.n	800e448 <validate+0x5c>
 800e446:	2300      	movs	r3, #0
 800e448:	683a      	ldr	r2, [r7, #0]
 800e44a:	6013      	str	r3, [r2, #0]
	return res;
 800e44c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3710      	adds	r7, #16
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}
	...

0800e458 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b088      	sub	sp, #32
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	60f8      	str	r0, [r7, #12]
 800e460:	60b9      	str	r1, [r7, #8]
 800e462:	4613      	mov	r3, r2
 800e464:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e466:	68bb      	ldr	r3, [r7, #8]
 800e468:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e46a:	f107 0310 	add.w	r3, r7, #16
 800e46e:	4618      	mov	r0, r3
 800e470:	f7ff fcd1 	bl	800de16 <get_ldnumber>
 800e474:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e476:	69fb      	ldr	r3, [r7, #28]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	da01      	bge.n	800e480 <f_mount+0x28>
 800e47c:	230b      	movs	r3, #11
 800e47e:	e02b      	b.n	800e4d8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e480:	4a17      	ldr	r2, [pc, #92]	; (800e4e0 <f_mount+0x88>)
 800e482:	69fb      	ldr	r3, [r7, #28]
 800e484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e488:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e48a:	69bb      	ldr	r3, [r7, #24]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d005      	beq.n	800e49c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e490:	69b8      	ldr	r0, [r7, #24]
 800e492:	f7fe f9a9 	bl	800c7e8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e496:	69bb      	ldr	r3, [r7, #24]
 800e498:	2200      	movs	r2, #0
 800e49a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d002      	beq.n	800e4a8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e4a8:	68fa      	ldr	r2, [r7, #12]
 800e4aa:	490d      	ldr	r1, [pc, #52]	; (800e4e0 <f_mount+0x88>)
 800e4ac:	69fb      	ldr	r3, [r7, #28]
 800e4ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d002      	beq.n	800e4be <f_mount+0x66>
 800e4b8:	79fb      	ldrb	r3, [r7, #7]
 800e4ba:	2b01      	cmp	r3, #1
 800e4bc:	d001      	beq.n	800e4c2 <f_mount+0x6a>
 800e4be:	2300      	movs	r3, #0
 800e4c0:	e00a      	b.n	800e4d8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e4c2:	f107 010c 	add.w	r1, r7, #12
 800e4c6:	f107 0308 	add.w	r3, r7, #8
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f7ff fd3d 	bl	800df4c <find_volume>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e4d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3720      	adds	r7, #32
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}
 800e4e0:	24000290 	.word	0x24000290

0800e4e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b09a      	sub	sp, #104	; 0x68
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	60f8      	str	r0, [r7, #12]
 800e4ec:	60b9      	str	r1, [r7, #8]
 800e4ee:	4613      	mov	r3, r2
 800e4f0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d101      	bne.n	800e4fc <f_open+0x18>
 800e4f8:	2309      	movs	r3, #9
 800e4fa:	e1ad      	b.n	800e858 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e4fc:	79fb      	ldrb	r3, [r7, #7]
 800e4fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e502:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e504:	79fa      	ldrb	r2, [r7, #7]
 800e506:	f107 0114 	add.w	r1, r7, #20
 800e50a:	f107 0308 	add.w	r3, r7, #8
 800e50e:	4618      	mov	r0, r3
 800e510:	f7ff fd1c 	bl	800df4c <find_volume>
 800e514:	4603      	mov	r3, r0
 800e516:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e51a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e51e:	2b00      	cmp	r3, #0
 800e520:	f040 8191 	bne.w	800e846 <f_open+0x362>
		dj.obj.fs = fs;
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e528:	68ba      	ldr	r2, [r7, #8]
 800e52a:	f107 0318 	add.w	r3, r7, #24
 800e52e:	4611      	mov	r1, r2
 800e530:	4618      	mov	r0, r3
 800e532:	f7ff fbff 	bl	800dd34 <follow_path>
 800e536:	4603      	mov	r3, r0
 800e538:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e53c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e540:	2b00      	cmp	r3, #0
 800e542:	d11a      	bne.n	800e57a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e544:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e548:	b25b      	sxtb	r3, r3
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	da03      	bge.n	800e556 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e54e:	2306      	movs	r3, #6
 800e550:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e554:	e011      	b.n	800e57a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e556:	79fb      	ldrb	r3, [r7, #7]
 800e558:	f023 0301 	bic.w	r3, r3, #1
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	bf14      	ite	ne
 800e560:	2301      	movne	r3, #1
 800e562:	2300      	moveq	r3, #0
 800e564:	b2db      	uxtb	r3, r3
 800e566:	461a      	mov	r2, r3
 800e568:	f107 0318 	add.w	r3, r7, #24
 800e56c:	4611      	mov	r1, r2
 800e56e:	4618      	mov	r0, r3
 800e570:	f7fd fff2 	bl	800c558 <chk_lock>
 800e574:	4603      	mov	r3, r0
 800e576:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e57a:	79fb      	ldrb	r3, [r7, #7]
 800e57c:	f003 031c 	and.w	r3, r3, #28
 800e580:	2b00      	cmp	r3, #0
 800e582:	d07f      	beq.n	800e684 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e584:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d017      	beq.n	800e5bc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e58c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e590:	2b04      	cmp	r3, #4
 800e592:	d10e      	bne.n	800e5b2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e594:	f7fe f83c 	bl	800c610 <enq_lock>
 800e598:	4603      	mov	r3, r0
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d006      	beq.n	800e5ac <f_open+0xc8>
 800e59e:	f107 0318 	add.w	r3, r7, #24
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f7ff f916 	bl	800d7d4 <dir_register>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	e000      	b.n	800e5ae <f_open+0xca>
 800e5ac:	2312      	movs	r3, #18
 800e5ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e5b2:	79fb      	ldrb	r3, [r7, #7]
 800e5b4:	f043 0308 	orr.w	r3, r3, #8
 800e5b8:	71fb      	strb	r3, [r7, #7]
 800e5ba:	e010      	b.n	800e5de <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e5bc:	7fbb      	ldrb	r3, [r7, #30]
 800e5be:	f003 0311 	and.w	r3, r3, #17
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d003      	beq.n	800e5ce <f_open+0xea>
					res = FR_DENIED;
 800e5c6:	2307      	movs	r3, #7
 800e5c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e5cc:	e007      	b.n	800e5de <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e5ce:	79fb      	ldrb	r3, [r7, #7]
 800e5d0:	f003 0304 	and.w	r3, r3, #4
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d002      	beq.n	800e5de <f_open+0xfa>
 800e5d8:	2308      	movs	r3, #8
 800e5da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e5de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d168      	bne.n	800e6b8 <f_open+0x1d4>
 800e5e6:	79fb      	ldrb	r3, [r7, #7]
 800e5e8:	f003 0308 	and.w	r3, r3, #8
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d063      	beq.n	800e6b8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e5f0:	f7fd fbb8 	bl	800bd64 <get_fattime>
 800e5f4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f8:	330e      	adds	r3, #14
 800e5fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f7fd ff01 	bl	800c404 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e604:	3316      	adds	r3, #22
 800e606:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e608:	4618      	mov	r0, r3
 800e60a:	f7fd fefb 	bl	800c404 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e610:	330b      	adds	r3, #11
 800e612:	2220      	movs	r2, #32
 800e614:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e61a:	4611      	mov	r1, r2
 800e61c:	4618      	mov	r0, r3
 800e61e:	f7fe fe52 	bl	800d2c6 <ld_clust>
 800e622:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e624:	697b      	ldr	r3, [r7, #20]
 800e626:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e628:	2200      	movs	r2, #0
 800e62a:	4618      	mov	r0, r3
 800e62c:	f7fe fe6a 	bl	800d304 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e632:	331c      	adds	r3, #28
 800e634:	2100      	movs	r1, #0
 800e636:	4618      	mov	r0, r3
 800e638:	f7fd fee4 	bl	800c404 <st_dword>
					fs->wflag = 1;
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	2201      	movs	r2, #1
 800e640:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e644:	2b00      	cmp	r3, #0
 800e646:	d037      	beq.n	800e6b8 <f_open+0x1d4>
						dw = fs->winsect;
 800e648:	697b      	ldr	r3, [r7, #20]
 800e64a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e64c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e64e:	f107 0318 	add.w	r3, r7, #24
 800e652:	2200      	movs	r2, #0
 800e654:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e656:	4618      	mov	r0, r3
 800e658:	f7fe fb7d 	bl	800cd56 <remove_chain>
 800e65c:	4603      	mov	r3, r0
 800e65e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e662:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e666:	2b00      	cmp	r3, #0
 800e668:	d126      	bne.n	800e6b8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e66e:	4618      	mov	r0, r3
 800e670:	f7fe f922 	bl	800c8b8 <move_window>
 800e674:	4603      	mov	r3, r0
 800e676:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e67e:	3a01      	subs	r2, #1
 800e680:	611a      	str	r2, [r3, #16]
 800e682:	e019      	b.n	800e6b8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e684:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d115      	bne.n	800e6b8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e68c:	7fbb      	ldrb	r3, [r7, #30]
 800e68e:	f003 0310 	and.w	r3, r3, #16
 800e692:	2b00      	cmp	r3, #0
 800e694:	d003      	beq.n	800e69e <f_open+0x1ba>
					res = FR_NO_FILE;
 800e696:	2304      	movs	r3, #4
 800e698:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e69c:	e00c      	b.n	800e6b8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e69e:	79fb      	ldrb	r3, [r7, #7]
 800e6a0:	f003 0302 	and.w	r3, r3, #2
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d007      	beq.n	800e6b8 <f_open+0x1d4>
 800e6a8:	7fbb      	ldrb	r3, [r7, #30]
 800e6aa:	f003 0301 	and.w	r3, r3, #1
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d002      	beq.n	800e6b8 <f_open+0x1d4>
						res = FR_DENIED;
 800e6b2:	2307      	movs	r3, #7
 800e6b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e6b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d128      	bne.n	800e712 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e6c0:	79fb      	ldrb	r3, [r7, #7]
 800e6c2:	f003 0308 	and.w	r3, r3, #8
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d003      	beq.n	800e6d2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e6ca:	79fb      	ldrb	r3, [r7, #7]
 800e6cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6d0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e6da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e6e0:	79fb      	ldrb	r3, [r7, #7]
 800e6e2:	f023 0301 	bic.w	r3, r3, #1
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	bf14      	ite	ne
 800e6ea:	2301      	movne	r3, #1
 800e6ec:	2300      	moveq	r3, #0
 800e6ee:	b2db      	uxtb	r3, r3
 800e6f0:	461a      	mov	r2, r3
 800e6f2:	f107 0318 	add.w	r3, r7, #24
 800e6f6:	4611      	mov	r1, r2
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f7fd ffab 	bl	800c654 <inc_lock>
 800e6fe:	4602      	mov	r2, r0
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	691b      	ldr	r3, [r3, #16]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d102      	bne.n	800e712 <f_open+0x22e>
 800e70c:	2302      	movs	r3, #2
 800e70e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e712:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e716:	2b00      	cmp	r3, #0
 800e718:	f040 8095 	bne.w	800e846 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e720:	4611      	mov	r1, r2
 800e722:	4618      	mov	r0, r3
 800e724:	f7fe fdcf 	bl	800d2c6 <ld_clust>
 800e728:	4602      	mov	r2, r0
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e730:	331c      	adds	r3, #28
 800e732:	4618      	mov	r0, r3
 800e734:	f7fd fe28 	bl	800c388 <ld_dword>
 800e738:	4602      	mov	r2, r0
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	2200      	movs	r2, #0
 800e742:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e744:	697a      	ldr	r2, [r7, #20]
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e74a:	697b      	ldr	r3, [r7, #20]
 800e74c:	88da      	ldrh	r2, [r3, #6]
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	79fa      	ldrb	r2, [r7, #7]
 800e756:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	2200      	movs	r2, #0
 800e75c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	2200      	movs	r2, #0
 800e762:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	2200      	movs	r2, #0
 800e768:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	3330      	adds	r3, #48	; 0x30
 800e76e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e772:	2100      	movs	r1, #0
 800e774:	4618      	mov	r0, r3
 800e776:	f7fd fe92 	bl	800c49e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e77a:	79fb      	ldrb	r3, [r7, #7]
 800e77c:	f003 0320 	and.w	r3, r3, #32
 800e780:	2b00      	cmp	r3, #0
 800e782:	d060      	beq.n	800e846 <f_open+0x362>
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	68db      	ldr	r3, [r3, #12]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d05c      	beq.n	800e846 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	68da      	ldr	r2, [r3, #12]
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	895b      	ldrh	r3, [r3, #10]
 800e798:	025b      	lsls	r3, r3, #9
 800e79a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	689b      	ldr	r3, [r3, #8]
 800e7a0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	68db      	ldr	r3, [r3, #12]
 800e7a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e7a8:	e016      	b.n	800e7d8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f7fe f93d 	bl	800ca2e <get_fat>
 800e7b4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e7b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e7b8:	2b01      	cmp	r3, #1
 800e7ba:	d802      	bhi.n	800e7c2 <f_open+0x2de>
 800e7bc:	2302      	movs	r3, #2
 800e7be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e7c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e7c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7c8:	d102      	bne.n	800e7d0 <f_open+0x2ec>
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e7d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e7d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7d4:	1ad3      	subs	r3, r2, r3
 800e7d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e7d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d103      	bne.n	800e7e8 <f_open+0x304>
 800e7e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e7e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d8e0      	bhi.n	800e7aa <f_open+0x2c6>
				}
				fp->clust = clst;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e7ec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e7ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d127      	bne.n	800e846 <f_open+0x362>
 800e7f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d022      	beq.n	800e846 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e804:	4618      	mov	r0, r3
 800e806:	f7fe f8f3 	bl	800c9f0 <clust2sect>
 800e80a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e80c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d103      	bne.n	800e81a <f_open+0x336>
						res = FR_INT_ERR;
 800e812:	2302      	movs	r3, #2
 800e814:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e818:	e015      	b.n	800e846 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e81a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e81c:	0a5a      	lsrs	r2, r3, #9
 800e81e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e820:	441a      	add	r2, r3
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	7858      	ldrb	r0, [r3, #1]
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	6a1a      	ldr	r2, [r3, #32]
 800e834:	2301      	movs	r3, #1
 800e836:	f7fd fd31 	bl	800c29c <disk_read>
 800e83a:	4603      	mov	r3, r0
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d002      	beq.n	800e846 <f_open+0x362>
 800e840:	2301      	movs	r3, #1
 800e842:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e846:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d002      	beq.n	800e854 <f_open+0x370>
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	2200      	movs	r2, #0
 800e852:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e854:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e858:	4618      	mov	r0, r3
 800e85a:	3768      	adds	r7, #104	; 0x68
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}

0800e860 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b08e      	sub	sp, #56	; 0x38
 800e864:	af00      	add	r7, sp, #0
 800e866:	60f8      	str	r0, [r7, #12]
 800e868:	60b9      	str	r1, [r7, #8]
 800e86a:	607a      	str	r2, [r7, #4]
 800e86c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e86e:	68bb      	ldr	r3, [r7, #8]
 800e870:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	2200      	movs	r2, #0
 800e876:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	f107 0214 	add.w	r2, r7, #20
 800e87e:	4611      	mov	r1, r2
 800e880:	4618      	mov	r0, r3
 800e882:	f7ff fdb3 	bl	800e3ec <validate>
 800e886:	4603      	mov	r3, r0
 800e888:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e88c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e890:	2b00      	cmp	r3, #0
 800e892:	d107      	bne.n	800e8a4 <f_read+0x44>
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	7d5b      	ldrb	r3, [r3, #21]
 800e898:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e89c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d002      	beq.n	800e8aa <f_read+0x4a>
 800e8a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e8a8:	e115      	b.n	800ead6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	7d1b      	ldrb	r3, [r3, #20]
 800e8ae:	f003 0301 	and.w	r3, r3, #1
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d101      	bne.n	800e8ba <f_read+0x5a>
 800e8b6:	2307      	movs	r3, #7
 800e8b8:	e10d      	b.n	800ead6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	68da      	ldr	r2, [r3, #12]
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	699b      	ldr	r3, [r3, #24]
 800e8c2:	1ad3      	subs	r3, r2, r3
 800e8c4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e8c6:	687a      	ldr	r2, [r7, #4]
 800e8c8:	6a3b      	ldr	r3, [r7, #32]
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	f240 80fe 	bls.w	800eacc <f_read+0x26c>
 800e8d0:	6a3b      	ldr	r3, [r7, #32]
 800e8d2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e8d4:	e0fa      	b.n	800eacc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	699b      	ldr	r3, [r3, #24]
 800e8da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	f040 80c6 	bne.w	800ea70 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	699b      	ldr	r3, [r3, #24]
 800e8e8:	0a5b      	lsrs	r3, r3, #9
 800e8ea:	697a      	ldr	r2, [r7, #20]
 800e8ec:	8952      	ldrh	r2, [r2, #10]
 800e8ee:	3a01      	subs	r2, #1
 800e8f0:	4013      	ands	r3, r2
 800e8f2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e8f4:	69fb      	ldr	r3, [r7, #28]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d12f      	bne.n	800e95a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	699b      	ldr	r3, [r3, #24]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d103      	bne.n	800e90a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	689b      	ldr	r3, [r3, #8]
 800e906:	633b      	str	r3, [r7, #48]	; 0x30
 800e908:	e013      	b.n	800e932 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d007      	beq.n	800e922 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	699b      	ldr	r3, [r3, #24]
 800e916:	4619      	mov	r1, r3
 800e918:	68f8      	ldr	r0, [r7, #12]
 800e91a:	f7fe fb19 	bl	800cf50 <clmt_clust>
 800e91e:	6338      	str	r0, [r7, #48]	; 0x30
 800e920:	e007      	b.n	800e932 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e922:	68fa      	ldr	r2, [r7, #12]
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	69db      	ldr	r3, [r3, #28]
 800e928:	4619      	mov	r1, r3
 800e92a:	4610      	mov	r0, r2
 800e92c:	f7fe f87f 	bl	800ca2e <get_fat>
 800e930:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e934:	2b01      	cmp	r3, #1
 800e936:	d804      	bhi.n	800e942 <f_read+0xe2>
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	2202      	movs	r2, #2
 800e93c:	755a      	strb	r2, [r3, #21]
 800e93e:	2302      	movs	r3, #2
 800e940:	e0c9      	b.n	800ead6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e944:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e948:	d104      	bne.n	800e954 <f_read+0xf4>
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	2201      	movs	r2, #1
 800e94e:	755a      	strb	r2, [r3, #21]
 800e950:	2301      	movs	r3, #1
 800e952:	e0c0      	b.n	800ead6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e958:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e95a:	697a      	ldr	r2, [r7, #20]
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	69db      	ldr	r3, [r3, #28]
 800e960:	4619      	mov	r1, r3
 800e962:	4610      	mov	r0, r2
 800e964:	f7fe f844 	bl	800c9f0 <clust2sect>
 800e968:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e96a:	69bb      	ldr	r3, [r7, #24]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d104      	bne.n	800e97a <f_read+0x11a>
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	2202      	movs	r2, #2
 800e974:	755a      	strb	r2, [r3, #21]
 800e976:	2302      	movs	r3, #2
 800e978:	e0ad      	b.n	800ead6 <f_read+0x276>
			sect += csect;
 800e97a:	69ba      	ldr	r2, [r7, #24]
 800e97c:	69fb      	ldr	r3, [r7, #28]
 800e97e:	4413      	add	r3, r2
 800e980:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	0a5b      	lsrs	r3, r3, #9
 800e986:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d039      	beq.n	800ea02 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e98e:	69fa      	ldr	r2, [r7, #28]
 800e990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e992:	4413      	add	r3, r2
 800e994:	697a      	ldr	r2, [r7, #20]
 800e996:	8952      	ldrh	r2, [r2, #10]
 800e998:	4293      	cmp	r3, r2
 800e99a:	d905      	bls.n	800e9a8 <f_read+0x148>
					cc = fs->csize - csect;
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	895b      	ldrh	r3, [r3, #10]
 800e9a0:	461a      	mov	r2, r3
 800e9a2:	69fb      	ldr	r3, [r7, #28]
 800e9a4:	1ad3      	subs	r3, r2, r3
 800e9a6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e9a8:	697b      	ldr	r3, [r7, #20]
 800e9aa:	7858      	ldrb	r0, [r3, #1]
 800e9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ae:	69ba      	ldr	r2, [r7, #24]
 800e9b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9b2:	f7fd fc73 	bl	800c29c <disk_read>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d004      	beq.n	800e9c6 <f_read+0x166>
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	2201      	movs	r2, #1
 800e9c0:	755a      	strb	r2, [r3, #21]
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	e087      	b.n	800ead6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	7d1b      	ldrb	r3, [r3, #20]
 800e9ca:	b25b      	sxtb	r3, r3
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	da14      	bge.n	800e9fa <f_read+0x19a>
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	6a1a      	ldr	r2, [r3, #32]
 800e9d4:	69bb      	ldr	r3, [r7, #24]
 800e9d6:	1ad3      	subs	r3, r2, r3
 800e9d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	d90d      	bls.n	800e9fa <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	6a1a      	ldr	r2, [r3, #32]
 800e9e2:	69bb      	ldr	r3, [r7, #24]
 800e9e4:	1ad3      	subs	r3, r2, r3
 800e9e6:	025b      	lsls	r3, r3, #9
 800e9e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9ea:	18d0      	adds	r0, r2, r3
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	3330      	adds	r3, #48	; 0x30
 800e9f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	f7fd fd31 	bl	800c45c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9fc:	025b      	lsls	r3, r3, #9
 800e9fe:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ea00:	e050      	b.n	800eaa4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	6a1b      	ldr	r3, [r3, #32]
 800ea06:	69ba      	ldr	r2, [r7, #24]
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d02e      	beq.n	800ea6a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	7d1b      	ldrb	r3, [r3, #20]
 800ea10:	b25b      	sxtb	r3, r3
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	da18      	bge.n	800ea48 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	7858      	ldrb	r0, [r3, #1]
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	6a1a      	ldr	r2, [r3, #32]
 800ea24:	2301      	movs	r3, #1
 800ea26:	f7fd fc59 	bl	800c2dc <disk_write>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d004      	beq.n	800ea3a <f_read+0x1da>
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	2201      	movs	r2, #1
 800ea34:	755a      	strb	r2, [r3, #21]
 800ea36:	2301      	movs	r3, #1
 800ea38:	e04d      	b.n	800ead6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	7d1b      	ldrb	r3, [r3, #20]
 800ea3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea42:	b2da      	uxtb	r2, r3
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	7858      	ldrb	r0, [r3, #1]
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea52:	2301      	movs	r3, #1
 800ea54:	69ba      	ldr	r2, [r7, #24]
 800ea56:	f7fd fc21 	bl	800c29c <disk_read>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d004      	beq.n	800ea6a <f_read+0x20a>
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	2201      	movs	r2, #1
 800ea64:	755a      	strb	r2, [r3, #21]
 800ea66:	2301      	movs	r3, #1
 800ea68:	e035      	b.n	800ead6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	69ba      	ldr	r2, [r7, #24]
 800ea6e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	699b      	ldr	r3, [r3, #24]
 800ea74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea78:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ea7c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ea7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	429a      	cmp	r2, r3
 800ea84:	d901      	bls.n	800ea8a <f_read+0x22a>
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	699b      	ldr	r3, [r3, #24]
 800ea94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea98:	4413      	add	r3, r2
 800ea9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eaa0:	f7fd fcdc 	bl	800c45c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800eaa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eaa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa8:	4413      	add	r3, r2
 800eaaa:	627b      	str	r3, [r7, #36]	; 0x24
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	699a      	ldr	r2, [r3, #24]
 800eab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eab2:	441a      	add	r2, r3
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	619a      	str	r2, [r3, #24]
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	681a      	ldr	r2, [r3, #0]
 800eabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eabe:	441a      	add	r2, r3
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	601a      	str	r2, [r3, #0]
 800eac4:	687a      	ldr	r2, [r7, #4]
 800eac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac8:	1ad3      	subs	r3, r2, r3
 800eaca:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	f47f af01 	bne.w	800e8d6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ead4:	2300      	movs	r3, #0
}
 800ead6:	4618      	mov	r0, r3
 800ead8:	3738      	adds	r7, #56	; 0x38
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd80      	pop	{r7, pc}

0800eade <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800eade:	b580      	push	{r7, lr}
 800eae0:	b086      	sub	sp, #24
 800eae2:	af00      	add	r7, sp, #0
 800eae4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f107 0208 	add.w	r2, r7, #8
 800eaec:	4611      	mov	r1, r2
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f7ff fc7c 	bl	800e3ec <validate>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800eaf8:	7dfb      	ldrb	r3, [r7, #23]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d168      	bne.n	800ebd0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	7d1b      	ldrb	r3, [r3, #20]
 800eb02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d062      	beq.n	800ebd0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	7d1b      	ldrb	r3, [r3, #20]
 800eb0e:	b25b      	sxtb	r3, r3
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	da15      	bge.n	800eb40 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	7858      	ldrb	r0, [r3, #1]
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	6a1a      	ldr	r2, [r3, #32]
 800eb22:	2301      	movs	r3, #1
 800eb24:	f7fd fbda 	bl	800c2dc <disk_write>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d001      	beq.n	800eb32 <f_sync+0x54>
 800eb2e:	2301      	movs	r3, #1
 800eb30:	e04f      	b.n	800ebd2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	7d1b      	ldrb	r3, [r3, #20]
 800eb36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb3a:	b2da      	uxtb	r2, r3
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800eb40:	f7fd f910 	bl	800bd64 <get_fattime>
 800eb44:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800eb46:	68ba      	ldr	r2, [r7, #8]
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb4c:	4619      	mov	r1, r3
 800eb4e:	4610      	mov	r0, r2
 800eb50:	f7fd feb2 	bl	800c8b8 <move_window>
 800eb54:	4603      	mov	r3, r0
 800eb56:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800eb58:	7dfb      	ldrb	r3, [r7, #23]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d138      	bne.n	800ebd0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb62:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	330b      	adds	r3, #11
 800eb68:	781a      	ldrb	r2, [r3, #0]
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	330b      	adds	r3, #11
 800eb6e:	f042 0220 	orr.w	r2, r2, #32
 800eb72:	b2d2      	uxtb	r2, r2
 800eb74:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6818      	ldr	r0, [r3, #0]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	689b      	ldr	r3, [r3, #8]
 800eb7e:	461a      	mov	r2, r3
 800eb80:	68f9      	ldr	r1, [r7, #12]
 800eb82:	f7fe fbbf 	bl	800d304 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	f103 021c 	add.w	r2, r3, #28
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	68db      	ldr	r3, [r3, #12]
 800eb90:	4619      	mov	r1, r3
 800eb92:	4610      	mov	r0, r2
 800eb94:	f7fd fc36 	bl	800c404 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	3316      	adds	r3, #22
 800eb9c:	6939      	ldr	r1, [r7, #16]
 800eb9e:	4618      	mov	r0, r3
 800eba0:	f7fd fc30 	bl	800c404 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	3312      	adds	r3, #18
 800eba8:	2100      	movs	r1, #0
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f7fd fc0f 	bl	800c3ce <st_word>
					fs->wflag = 1;
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	2201      	movs	r2, #1
 800ebb4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ebb6:	68bb      	ldr	r3, [r7, #8]
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f7fd feab 	bl	800c914 <sync_fs>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	7d1b      	ldrb	r3, [r3, #20]
 800ebc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ebca:	b2da      	uxtb	r2, r3
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ebd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3718      	adds	r7, #24
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}

0800ebda <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ebda:	b580      	push	{r7, lr}
 800ebdc:	b084      	sub	sp, #16
 800ebde:	af00      	add	r7, sp, #0
 800ebe0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	f7ff ff7b 	bl	800eade <f_sync>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ebec:	7bfb      	ldrb	r3, [r7, #15]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d118      	bne.n	800ec24 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f107 0208 	add.w	r2, r7, #8
 800ebf8:	4611      	mov	r1, r2
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f7ff fbf6 	bl	800e3ec <validate>
 800ec00:	4603      	mov	r3, r0
 800ec02:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ec04:	7bfb      	ldrb	r3, [r7, #15]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d10c      	bne.n	800ec24 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	691b      	ldr	r3, [r3, #16]
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7fd fdae 	bl	800c770 <dec_lock>
 800ec14:	4603      	mov	r3, r0
 800ec16:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ec18:	7bfb      	ldrb	r3, [r7, #15]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d102      	bne.n	800ec24 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	2200      	movs	r2, #0
 800ec22:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ec24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3710      	adds	r7, #16
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}
	...

0800ec30 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ec30:	b480      	push	{r7}
 800ec32:	b087      	sub	sp, #28
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	60f8      	str	r0, [r7, #12]
 800ec38:	60b9      	str	r1, [r7, #8]
 800ec3a:	4613      	mov	r3, r2
 800ec3c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ec3e:	2301      	movs	r3, #1
 800ec40:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ec42:	2300      	movs	r3, #0
 800ec44:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ec46:	4b1f      	ldr	r3, [pc, #124]	; (800ecc4 <FATFS_LinkDriverEx+0x94>)
 800ec48:	7a5b      	ldrb	r3, [r3, #9]
 800ec4a:	b2db      	uxtb	r3, r3
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d131      	bne.n	800ecb4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ec50:	4b1c      	ldr	r3, [pc, #112]	; (800ecc4 <FATFS_LinkDriverEx+0x94>)
 800ec52:	7a5b      	ldrb	r3, [r3, #9]
 800ec54:	b2db      	uxtb	r3, r3
 800ec56:	461a      	mov	r2, r3
 800ec58:	4b1a      	ldr	r3, [pc, #104]	; (800ecc4 <FATFS_LinkDriverEx+0x94>)
 800ec5a:	2100      	movs	r1, #0
 800ec5c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ec5e:	4b19      	ldr	r3, [pc, #100]	; (800ecc4 <FATFS_LinkDriverEx+0x94>)
 800ec60:	7a5b      	ldrb	r3, [r3, #9]
 800ec62:	b2db      	uxtb	r3, r3
 800ec64:	4a17      	ldr	r2, [pc, #92]	; (800ecc4 <FATFS_LinkDriverEx+0x94>)
 800ec66:	009b      	lsls	r3, r3, #2
 800ec68:	4413      	add	r3, r2
 800ec6a:	68fa      	ldr	r2, [r7, #12]
 800ec6c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ec6e:	4b15      	ldr	r3, [pc, #84]	; (800ecc4 <FATFS_LinkDriverEx+0x94>)
 800ec70:	7a5b      	ldrb	r3, [r3, #9]
 800ec72:	b2db      	uxtb	r3, r3
 800ec74:	461a      	mov	r2, r3
 800ec76:	4b13      	ldr	r3, [pc, #76]	; (800ecc4 <FATFS_LinkDriverEx+0x94>)
 800ec78:	4413      	add	r3, r2
 800ec7a:	79fa      	ldrb	r2, [r7, #7]
 800ec7c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ec7e:	4b11      	ldr	r3, [pc, #68]	; (800ecc4 <FATFS_LinkDriverEx+0x94>)
 800ec80:	7a5b      	ldrb	r3, [r3, #9]
 800ec82:	b2db      	uxtb	r3, r3
 800ec84:	1c5a      	adds	r2, r3, #1
 800ec86:	b2d1      	uxtb	r1, r2
 800ec88:	4a0e      	ldr	r2, [pc, #56]	; (800ecc4 <FATFS_LinkDriverEx+0x94>)
 800ec8a:	7251      	strb	r1, [r2, #9]
 800ec8c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ec8e:	7dbb      	ldrb	r3, [r7, #22]
 800ec90:	3330      	adds	r3, #48	; 0x30
 800ec92:	b2da      	uxtb	r2, r3
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	3301      	adds	r3, #1
 800ec9c:	223a      	movs	r2, #58	; 0x3a
 800ec9e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	3302      	adds	r3, #2
 800eca4:	222f      	movs	r2, #47	; 0x2f
 800eca6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	3303      	adds	r3, #3
 800ecac:	2200      	movs	r2, #0
 800ecae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ecb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	371c      	adds	r7, #28
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc0:	4770      	bx	lr
 800ecc2:	bf00      	nop
 800ecc4:	240004b8 	.word	0x240004b8

0800ecc8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b082      	sub	sp, #8
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	6839      	ldr	r1, [r7, #0]
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	f7ff ffaa 	bl	800ec30 <FATFS_LinkDriverEx>
 800ecdc:	4603      	mov	r3, r0
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3708      	adds	r7, #8
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
	...

0800ece8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ece8:	b480      	push	{r7}
 800ecea:	b085      	sub	sp, #20
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	4603      	mov	r3, r0
 800ecf0:	6039      	str	r1, [r7, #0]
 800ecf2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ecf4:	88fb      	ldrh	r3, [r7, #6]
 800ecf6:	2b7f      	cmp	r3, #127	; 0x7f
 800ecf8:	d802      	bhi.n	800ed00 <ff_convert+0x18>
		c = chr;
 800ecfa:	88fb      	ldrh	r3, [r7, #6]
 800ecfc:	81fb      	strh	r3, [r7, #14]
 800ecfe:	e025      	b.n	800ed4c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d00b      	beq.n	800ed1e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ed06:	88fb      	ldrh	r3, [r7, #6]
 800ed08:	2bff      	cmp	r3, #255	; 0xff
 800ed0a:	d805      	bhi.n	800ed18 <ff_convert+0x30>
 800ed0c:	88fb      	ldrh	r3, [r7, #6]
 800ed0e:	3b80      	subs	r3, #128	; 0x80
 800ed10:	4a12      	ldr	r2, [pc, #72]	; (800ed5c <ff_convert+0x74>)
 800ed12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed16:	e000      	b.n	800ed1a <ff_convert+0x32>
 800ed18:	2300      	movs	r3, #0
 800ed1a:	81fb      	strh	r3, [r7, #14]
 800ed1c:	e016      	b.n	800ed4c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ed1e:	2300      	movs	r3, #0
 800ed20:	81fb      	strh	r3, [r7, #14]
 800ed22:	e009      	b.n	800ed38 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ed24:	89fb      	ldrh	r3, [r7, #14]
 800ed26:	4a0d      	ldr	r2, [pc, #52]	; (800ed5c <ff_convert+0x74>)
 800ed28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed2c:	88fa      	ldrh	r2, [r7, #6]
 800ed2e:	429a      	cmp	r2, r3
 800ed30:	d006      	beq.n	800ed40 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ed32:	89fb      	ldrh	r3, [r7, #14]
 800ed34:	3301      	adds	r3, #1
 800ed36:	81fb      	strh	r3, [r7, #14]
 800ed38:	89fb      	ldrh	r3, [r7, #14]
 800ed3a:	2b7f      	cmp	r3, #127	; 0x7f
 800ed3c:	d9f2      	bls.n	800ed24 <ff_convert+0x3c>
 800ed3e:	e000      	b.n	800ed42 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ed40:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ed42:	89fb      	ldrh	r3, [r7, #14]
 800ed44:	3380      	adds	r3, #128	; 0x80
 800ed46:	b29b      	uxth	r3, r3
 800ed48:	b2db      	uxtb	r3, r3
 800ed4a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ed4c:	89fb      	ldrh	r3, [r7, #14]
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3714      	adds	r7, #20
 800ed52:	46bd      	mov	sp, r7
 800ed54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed58:	4770      	bx	lr
 800ed5a:	bf00      	nop
 800ed5c:	08010010 	.word	0x08010010

0800ed60 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b087      	sub	sp, #28
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	4603      	mov	r3, r0
 800ed68:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ed6a:	88fb      	ldrh	r3, [r7, #6]
 800ed6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed70:	d201      	bcs.n	800ed76 <ff_wtoupper+0x16>
 800ed72:	4b3e      	ldr	r3, [pc, #248]	; (800ee6c <ff_wtoupper+0x10c>)
 800ed74:	e000      	b.n	800ed78 <ff_wtoupper+0x18>
 800ed76:	4b3e      	ldr	r3, [pc, #248]	; (800ee70 <ff_wtoupper+0x110>)
 800ed78:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	1c9a      	adds	r2, r3, #2
 800ed7e:	617a      	str	r2, [r7, #20]
 800ed80:	881b      	ldrh	r3, [r3, #0]
 800ed82:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ed84:	8a7b      	ldrh	r3, [r7, #18]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d068      	beq.n	800ee5c <ff_wtoupper+0xfc>
 800ed8a:	88fa      	ldrh	r2, [r7, #6]
 800ed8c:	8a7b      	ldrh	r3, [r7, #18]
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	d364      	bcc.n	800ee5c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	1c9a      	adds	r2, r3, #2
 800ed96:	617a      	str	r2, [r7, #20]
 800ed98:	881b      	ldrh	r3, [r3, #0]
 800ed9a:	823b      	strh	r3, [r7, #16]
 800ed9c:	8a3b      	ldrh	r3, [r7, #16]
 800ed9e:	0a1b      	lsrs	r3, r3, #8
 800eda0:	81fb      	strh	r3, [r7, #14]
 800eda2:	8a3b      	ldrh	r3, [r7, #16]
 800eda4:	b2db      	uxtb	r3, r3
 800eda6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800eda8:	88fa      	ldrh	r2, [r7, #6]
 800edaa:	8a79      	ldrh	r1, [r7, #18]
 800edac:	8a3b      	ldrh	r3, [r7, #16]
 800edae:	440b      	add	r3, r1
 800edb0:	429a      	cmp	r2, r3
 800edb2:	da49      	bge.n	800ee48 <ff_wtoupper+0xe8>
			switch (cmd) {
 800edb4:	89fb      	ldrh	r3, [r7, #14]
 800edb6:	2b08      	cmp	r3, #8
 800edb8:	d84f      	bhi.n	800ee5a <ff_wtoupper+0xfa>
 800edba:	a201      	add	r2, pc, #4	; (adr r2, 800edc0 <ff_wtoupper+0x60>)
 800edbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edc0:	0800ede5 	.word	0x0800ede5
 800edc4:	0800edf7 	.word	0x0800edf7
 800edc8:	0800ee0d 	.word	0x0800ee0d
 800edcc:	0800ee15 	.word	0x0800ee15
 800edd0:	0800ee1d 	.word	0x0800ee1d
 800edd4:	0800ee25 	.word	0x0800ee25
 800edd8:	0800ee2d 	.word	0x0800ee2d
 800eddc:	0800ee35 	.word	0x0800ee35
 800ede0:	0800ee3d 	.word	0x0800ee3d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ede4:	88fa      	ldrh	r2, [r7, #6]
 800ede6:	8a7b      	ldrh	r3, [r7, #18]
 800ede8:	1ad3      	subs	r3, r2, r3
 800edea:	005b      	lsls	r3, r3, #1
 800edec:	697a      	ldr	r2, [r7, #20]
 800edee:	4413      	add	r3, r2
 800edf0:	881b      	ldrh	r3, [r3, #0]
 800edf2:	80fb      	strh	r3, [r7, #6]
 800edf4:	e027      	b.n	800ee46 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800edf6:	88fa      	ldrh	r2, [r7, #6]
 800edf8:	8a7b      	ldrh	r3, [r7, #18]
 800edfa:	1ad3      	subs	r3, r2, r3
 800edfc:	b29b      	uxth	r3, r3
 800edfe:	f003 0301 	and.w	r3, r3, #1
 800ee02:	b29b      	uxth	r3, r3
 800ee04:	88fa      	ldrh	r2, [r7, #6]
 800ee06:	1ad3      	subs	r3, r2, r3
 800ee08:	80fb      	strh	r3, [r7, #6]
 800ee0a:	e01c      	b.n	800ee46 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ee0c:	88fb      	ldrh	r3, [r7, #6]
 800ee0e:	3b10      	subs	r3, #16
 800ee10:	80fb      	strh	r3, [r7, #6]
 800ee12:	e018      	b.n	800ee46 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ee14:	88fb      	ldrh	r3, [r7, #6]
 800ee16:	3b20      	subs	r3, #32
 800ee18:	80fb      	strh	r3, [r7, #6]
 800ee1a:	e014      	b.n	800ee46 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ee1c:	88fb      	ldrh	r3, [r7, #6]
 800ee1e:	3b30      	subs	r3, #48	; 0x30
 800ee20:	80fb      	strh	r3, [r7, #6]
 800ee22:	e010      	b.n	800ee46 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ee24:	88fb      	ldrh	r3, [r7, #6]
 800ee26:	3b1a      	subs	r3, #26
 800ee28:	80fb      	strh	r3, [r7, #6]
 800ee2a:	e00c      	b.n	800ee46 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ee2c:	88fb      	ldrh	r3, [r7, #6]
 800ee2e:	3308      	adds	r3, #8
 800ee30:	80fb      	strh	r3, [r7, #6]
 800ee32:	e008      	b.n	800ee46 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ee34:	88fb      	ldrh	r3, [r7, #6]
 800ee36:	3b50      	subs	r3, #80	; 0x50
 800ee38:	80fb      	strh	r3, [r7, #6]
 800ee3a:	e004      	b.n	800ee46 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ee3c:	88fb      	ldrh	r3, [r7, #6]
 800ee3e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ee42:	80fb      	strh	r3, [r7, #6]
 800ee44:	bf00      	nop
			}
			break;
 800ee46:	e008      	b.n	800ee5a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ee48:	89fb      	ldrh	r3, [r7, #14]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d195      	bne.n	800ed7a <ff_wtoupper+0x1a>
 800ee4e:	8a3b      	ldrh	r3, [r7, #16]
 800ee50:	005b      	lsls	r3, r3, #1
 800ee52:	697a      	ldr	r2, [r7, #20]
 800ee54:	4413      	add	r3, r2
 800ee56:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ee58:	e78f      	b.n	800ed7a <ff_wtoupper+0x1a>
			break;
 800ee5a:	bf00      	nop
	}

	return chr;
 800ee5c:	88fb      	ldrh	r3, [r7, #6]
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	371c      	adds	r7, #28
 800ee62:	46bd      	mov	sp, r7
 800ee64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee68:	4770      	bx	lr
 800ee6a:	bf00      	nop
 800ee6c:	08010110 	.word	0x08010110
 800ee70:	08010304 	.word	0x08010304

0800ee74 <__errno>:
 800ee74:	4b01      	ldr	r3, [pc, #4]	; (800ee7c <__errno+0x8>)
 800ee76:	6818      	ldr	r0, [r3, #0]
 800ee78:	4770      	bx	lr
 800ee7a:	bf00      	nop
 800ee7c:	24000018 	.word	0x24000018

0800ee80 <__libc_init_array>:
 800ee80:	b570      	push	{r4, r5, r6, lr}
 800ee82:	4d0d      	ldr	r5, [pc, #52]	; (800eeb8 <__libc_init_array+0x38>)
 800ee84:	4c0d      	ldr	r4, [pc, #52]	; (800eebc <__libc_init_array+0x3c>)
 800ee86:	1b64      	subs	r4, r4, r5
 800ee88:	10a4      	asrs	r4, r4, #2
 800ee8a:	2600      	movs	r6, #0
 800ee8c:	42a6      	cmp	r6, r4
 800ee8e:	d109      	bne.n	800eea4 <__libc_init_array+0x24>
 800ee90:	4d0b      	ldr	r5, [pc, #44]	; (800eec0 <__libc_init_array+0x40>)
 800ee92:	4c0c      	ldr	r4, [pc, #48]	; (800eec4 <__libc_init_array+0x44>)
 800ee94:	f000 fcdc 	bl	800f850 <_init>
 800ee98:	1b64      	subs	r4, r4, r5
 800ee9a:	10a4      	asrs	r4, r4, #2
 800ee9c:	2600      	movs	r6, #0
 800ee9e:	42a6      	cmp	r6, r4
 800eea0:	d105      	bne.n	800eeae <__libc_init_array+0x2e>
 800eea2:	bd70      	pop	{r4, r5, r6, pc}
 800eea4:	f855 3b04 	ldr.w	r3, [r5], #4
 800eea8:	4798      	blx	r3
 800eeaa:	3601      	adds	r6, #1
 800eeac:	e7ee      	b.n	800ee8c <__libc_init_array+0xc>
 800eeae:	f855 3b04 	ldr.w	r3, [r5], #4
 800eeb2:	4798      	blx	r3
 800eeb4:	3601      	adds	r6, #1
 800eeb6:	e7f2      	b.n	800ee9e <__libc_init_array+0x1e>
 800eeb8:	080103f4 	.word	0x080103f4
 800eebc:	080103f4 	.word	0x080103f4
 800eec0:	080103f4 	.word	0x080103f4
 800eec4:	080103f8 	.word	0x080103f8

0800eec8 <memcpy>:
 800eec8:	440a      	add	r2, r1
 800eeca:	4291      	cmp	r1, r2
 800eecc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800eed0:	d100      	bne.n	800eed4 <memcpy+0xc>
 800eed2:	4770      	bx	lr
 800eed4:	b510      	push	{r4, lr}
 800eed6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eeda:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eede:	4291      	cmp	r1, r2
 800eee0:	d1f9      	bne.n	800eed6 <memcpy+0xe>
 800eee2:	bd10      	pop	{r4, pc}

0800eee4 <memmove>:
 800eee4:	4288      	cmp	r0, r1
 800eee6:	b510      	push	{r4, lr}
 800eee8:	eb01 0402 	add.w	r4, r1, r2
 800eeec:	d902      	bls.n	800eef4 <memmove+0x10>
 800eeee:	4284      	cmp	r4, r0
 800eef0:	4623      	mov	r3, r4
 800eef2:	d807      	bhi.n	800ef04 <memmove+0x20>
 800eef4:	1e43      	subs	r3, r0, #1
 800eef6:	42a1      	cmp	r1, r4
 800eef8:	d008      	beq.n	800ef0c <memmove+0x28>
 800eefa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eefe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ef02:	e7f8      	b.n	800eef6 <memmove+0x12>
 800ef04:	4402      	add	r2, r0
 800ef06:	4601      	mov	r1, r0
 800ef08:	428a      	cmp	r2, r1
 800ef0a:	d100      	bne.n	800ef0e <memmove+0x2a>
 800ef0c:	bd10      	pop	{r4, pc}
 800ef0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ef12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ef16:	e7f7      	b.n	800ef08 <memmove+0x24>

0800ef18 <memset>:
 800ef18:	4402      	add	r2, r0
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	4293      	cmp	r3, r2
 800ef1e:	d100      	bne.n	800ef22 <memset+0xa>
 800ef20:	4770      	bx	lr
 800ef22:	f803 1b01 	strb.w	r1, [r3], #1
 800ef26:	e7f9      	b.n	800ef1c <memset+0x4>

0800ef28 <sniprintf>:
 800ef28:	b40c      	push	{r2, r3}
 800ef2a:	b530      	push	{r4, r5, lr}
 800ef2c:	4b17      	ldr	r3, [pc, #92]	; (800ef8c <sniprintf+0x64>)
 800ef2e:	1e0c      	subs	r4, r1, #0
 800ef30:	681d      	ldr	r5, [r3, #0]
 800ef32:	b09d      	sub	sp, #116	; 0x74
 800ef34:	da08      	bge.n	800ef48 <sniprintf+0x20>
 800ef36:	238b      	movs	r3, #139	; 0x8b
 800ef38:	602b      	str	r3, [r5, #0]
 800ef3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef3e:	b01d      	add	sp, #116	; 0x74
 800ef40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef44:	b002      	add	sp, #8
 800ef46:	4770      	bx	lr
 800ef48:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ef4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ef50:	bf14      	ite	ne
 800ef52:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800ef56:	4623      	moveq	r3, r4
 800ef58:	9304      	str	r3, [sp, #16]
 800ef5a:	9307      	str	r3, [sp, #28]
 800ef5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef60:	9002      	str	r0, [sp, #8]
 800ef62:	9006      	str	r0, [sp, #24]
 800ef64:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ef68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ef6a:	ab21      	add	r3, sp, #132	; 0x84
 800ef6c:	a902      	add	r1, sp, #8
 800ef6e:	4628      	mov	r0, r5
 800ef70:	9301      	str	r3, [sp, #4]
 800ef72:	f000 f8a3 	bl	800f0bc <_svfiprintf_r>
 800ef76:	1c43      	adds	r3, r0, #1
 800ef78:	bfbc      	itt	lt
 800ef7a:	238b      	movlt	r3, #139	; 0x8b
 800ef7c:	602b      	strlt	r3, [r5, #0]
 800ef7e:	2c00      	cmp	r4, #0
 800ef80:	d0dd      	beq.n	800ef3e <sniprintf+0x16>
 800ef82:	9b02      	ldr	r3, [sp, #8]
 800ef84:	2200      	movs	r2, #0
 800ef86:	701a      	strb	r2, [r3, #0]
 800ef88:	e7d9      	b.n	800ef3e <sniprintf+0x16>
 800ef8a:	bf00      	nop
 800ef8c:	24000018 	.word	0x24000018

0800ef90 <_vsniprintf_r>:
 800ef90:	b530      	push	{r4, r5, lr}
 800ef92:	4614      	mov	r4, r2
 800ef94:	2c00      	cmp	r4, #0
 800ef96:	b09b      	sub	sp, #108	; 0x6c
 800ef98:	4605      	mov	r5, r0
 800ef9a:	461a      	mov	r2, r3
 800ef9c:	da05      	bge.n	800efaa <_vsniprintf_r+0x1a>
 800ef9e:	238b      	movs	r3, #139	; 0x8b
 800efa0:	6003      	str	r3, [r0, #0]
 800efa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800efa6:	b01b      	add	sp, #108	; 0x6c
 800efa8:	bd30      	pop	{r4, r5, pc}
 800efaa:	f44f 7302 	mov.w	r3, #520	; 0x208
 800efae:	f8ad 300c 	strh.w	r3, [sp, #12]
 800efb2:	bf14      	ite	ne
 800efb4:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800efb8:	4623      	moveq	r3, r4
 800efba:	9302      	str	r3, [sp, #8]
 800efbc:	9305      	str	r3, [sp, #20]
 800efbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800efc2:	9100      	str	r1, [sp, #0]
 800efc4:	9104      	str	r1, [sp, #16]
 800efc6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800efca:	4669      	mov	r1, sp
 800efcc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800efce:	f000 f875 	bl	800f0bc <_svfiprintf_r>
 800efd2:	1c43      	adds	r3, r0, #1
 800efd4:	bfbc      	itt	lt
 800efd6:	238b      	movlt	r3, #139	; 0x8b
 800efd8:	602b      	strlt	r3, [r5, #0]
 800efda:	2c00      	cmp	r4, #0
 800efdc:	d0e3      	beq.n	800efa6 <_vsniprintf_r+0x16>
 800efde:	9b00      	ldr	r3, [sp, #0]
 800efe0:	2200      	movs	r2, #0
 800efe2:	701a      	strb	r2, [r3, #0]
 800efe4:	e7df      	b.n	800efa6 <_vsniprintf_r+0x16>
	...

0800efe8 <vsniprintf>:
 800efe8:	b507      	push	{r0, r1, r2, lr}
 800efea:	9300      	str	r3, [sp, #0]
 800efec:	4613      	mov	r3, r2
 800efee:	460a      	mov	r2, r1
 800eff0:	4601      	mov	r1, r0
 800eff2:	4803      	ldr	r0, [pc, #12]	; (800f000 <vsniprintf+0x18>)
 800eff4:	6800      	ldr	r0, [r0, #0]
 800eff6:	f7ff ffcb 	bl	800ef90 <_vsniprintf_r>
 800effa:	b003      	add	sp, #12
 800effc:	f85d fb04 	ldr.w	pc, [sp], #4
 800f000:	24000018 	.word	0x24000018

0800f004 <__ssputs_r>:
 800f004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f008:	688e      	ldr	r6, [r1, #8]
 800f00a:	429e      	cmp	r6, r3
 800f00c:	4682      	mov	sl, r0
 800f00e:	460c      	mov	r4, r1
 800f010:	4690      	mov	r8, r2
 800f012:	461f      	mov	r7, r3
 800f014:	d838      	bhi.n	800f088 <__ssputs_r+0x84>
 800f016:	898a      	ldrh	r2, [r1, #12]
 800f018:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f01c:	d032      	beq.n	800f084 <__ssputs_r+0x80>
 800f01e:	6825      	ldr	r5, [r4, #0]
 800f020:	6909      	ldr	r1, [r1, #16]
 800f022:	eba5 0901 	sub.w	r9, r5, r1
 800f026:	6965      	ldr	r5, [r4, #20]
 800f028:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f02c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f030:	3301      	adds	r3, #1
 800f032:	444b      	add	r3, r9
 800f034:	106d      	asrs	r5, r5, #1
 800f036:	429d      	cmp	r5, r3
 800f038:	bf38      	it	cc
 800f03a:	461d      	movcc	r5, r3
 800f03c:	0553      	lsls	r3, r2, #21
 800f03e:	d531      	bpl.n	800f0a4 <__ssputs_r+0xa0>
 800f040:	4629      	mov	r1, r5
 800f042:	f000 fb3b 	bl	800f6bc <_malloc_r>
 800f046:	4606      	mov	r6, r0
 800f048:	b950      	cbnz	r0, 800f060 <__ssputs_r+0x5c>
 800f04a:	230c      	movs	r3, #12
 800f04c:	f8ca 3000 	str.w	r3, [sl]
 800f050:	89a3      	ldrh	r3, [r4, #12]
 800f052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f056:	81a3      	strh	r3, [r4, #12]
 800f058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f060:	6921      	ldr	r1, [r4, #16]
 800f062:	464a      	mov	r2, r9
 800f064:	f7ff ff30 	bl	800eec8 <memcpy>
 800f068:	89a3      	ldrh	r3, [r4, #12]
 800f06a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f06e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f072:	81a3      	strh	r3, [r4, #12]
 800f074:	6126      	str	r6, [r4, #16]
 800f076:	6165      	str	r5, [r4, #20]
 800f078:	444e      	add	r6, r9
 800f07a:	eba5 0509 	sub.w	r5, r5, r9
 800f07e:	6026      	str	r6, [r4, #0]
 800f080:	60a5      	str	r5, [r4, #8]
 800f082:	463e      	mov	r6, r7
 800f084:	42be      	cmp	r6, r7
 800f086:	d900      	bls.n	800f08a <__ssputs_r+0x86>
 800f088:	463e      	mov	r6, r7
 800f08a:	6820      	ldr	r0, [r4, #0]
 800f08c:	4632      	mov	r2, r6
 800f08e:	4641      	mov	r1, r8
 800f090:	f7ff ff28 	bl	800eee4 <memmove>
 800f094:	68a3      	ldr	r3, [r4, #8]
 800f096:	1b9b      	subs	r3, r3, r6
 800f098:	60a3      	str	r3, [r4, #8]
 800f09a:	6823      	ldr	r3, [r4, #0]
 800f09c:	4433      	add	r3, r6
 800f09e:	6023      	str	r3, [r4, #0]
 800f0a0:	2000      	movs	r0, #0
 800f0a2:	e7db      	b.n	800f05c <__ssputs_r+0x58>
 800f0a4:	462a      	mov	r2, r5
 800f0a6:	f000 fb7d 	bl	800f7a4 <_realloc_r>
 800f0aa:	4606      	mov	r6, r0
 800f0ac:	2800      	cmp	r0, #0
 800f0ae:	d1e1      	bne.n	800f074 <__ssputs_r+0x70>
 800f0b0:	6921      	ldr	r1, [r4, #16]
 800f0b2:	4650      	mov	r0, sl
 800f0b4:	f000 fa96 	bl	800f5e4 <_free_r>
 800f0b8:	e7c7      	b.n	800f04a <__ssputs_r+0x46>
	...

0800f0bc <_svfiprintf_r>:
 800f0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0c0:	4698      	mov	r8, r3
 800f0c2:	898b      	ldrh	r3, [r1, #12]
 800f0c4:	061b      	lsls	r3, r3, #24
 800f0c6:	b09d      	sub	sp, #116	; 0x74
 800f0c8:	4607      	mov	r7, r0
 800f0ca:	460d      	mov	r5, r1
 800f0cc:	4614      	mov	r4, r2
 800f0ce:	d50e      	bpl.n	800f0ee <_svfiprintf_r+0x32>
 800f0d0:	690b      	ldr	r3, [r1, #16]
 800f0d2:	b963      	cbnz	r3, 800f0ee <_svfiprintf_r+0x32>
 800f0d4:	2140      	movs	r1, #64	; 0x40
 800f0d6:	f000 faf1 	bl	800f6bc <_malloc_r>
 800f0da:	6028      	str	r0, [r5, #0]
 800f0dc:	6128      	str	r0, [r5, #16]
 800f0de:	b920      	cbnz	r0, 800f0ea <_svfiprintf_r+0x2e>
 800f0e0:	230c      	movs	r3, #12
 800f0e2:	603b      	str	r3, [r7, #0]
 800f0e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f0e8:	e0d1      	b.n	800f28e <_svfiprintf_r+0x1d2>
 800f0ea:	2340      	movs	r3, #64	; 0x40
 800f0ec:	616b      	str	r3, [r5, #20]
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	9309      	str	r3, [sp, #36]	; 0x24
 800f0f2:	2320      	movs	r3, #32
 800f0f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f0f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0fc:	2330      	movs	r3, #48	; 0x30
 800f0fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f2a8 <_svfiprintf_r+0x1ec>
 800f102:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f106:	f04f 0901 	mov.w	r9, #1
 800f10a:	4623      	mov	r3, r4
 800f10c:	469a      	mov	sl, r3
 800f10e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f112:	b10a      	cbz	r2, 800f118 <_svfiprintf_r+0x5c>
 800f114:	2a25      	cmp	r2, #37	; 0x25
 800f116:	d1f9      	bne.n	800f10c <_svfiprintf_r+0x50>
 800f118:	ebba 0b04 	subs.w	fp, sl, r4
 800f11c:	d00b      	beq.n	800f136 <_svfiprintf_r+0x7a>
 800f11e:	465b      	mov	r3, fp
 800f120:	4622      	mov	r2, r4
 800f122:	4629      	mov	r1, r5
 800f124:	4638      	mov	r0, r7
 800f126:	f7ff ff6d 	bl	800f004 <__ssputs_r>
 800f12a:	3001      	adds	r0, #1
 800f12c:	f000 80aa 	beq.w	800f284 <_svfiprintf_r+0x1c8>
 800f130:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f132:	445a      	add	r2, fp
 800f134:	9209      	str	r2, [sp, #36]	; 0x24
 800f136:	f89a 3000 	ldrb.w	r3, [sl]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	f000 80a2 	beq.w	800f284 <_svfiprintf_r+0x1c8>
 800f140:	2300      	movs	r3, #0
 800f142:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f146:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f14a:	f10a 0a01 	add.w	sl, sl, #1
 800f14e:	9304      	str	r3, [sp, #16]
 800f150:	9307      	str	r3, [sp, #28]
 800f152:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f156:	931a      	str	r3, [sp, #104]	; 0x68
 800f158:	4654      	mov	r4, sl
 800f15a:	2205      	movs	r2, #5
 800f15c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f160:	4851      	ldr	r0, [pc, #324]	; (800f2a8 <_svfiprintf_r+0x1ec>)
 800f162:	f7f1 f8c5 	bl	80002f0 <memchr>
 800f166:	9a04      	ldr	r2, [sp, #16]
 800f168:	b9d8      	cbnz	r0, 800f1a2 <_svfiprintf_r+0xe6>
 800f16a:	06d0      	lsls	r0, r2, #27
 800f16c:	bf44      	itt	mi
 800f16e:	2320      	movmi	r3, #32
 800f170:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f174:	0711      	lsls	r1, r2, #28
 800f176:	bf44      	itt	mi
 800f178:	232b      	movmi	r3, #43	; 0x2b
 800f17a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f17e:	f89a 3000 	ldrb.w	r3, [sl]
 800f182:	2b2a      	cmp	r3, #42	; 0x2a
 800f184:	d015      	beq.n	800f1b2 <_svfiprintf_r+0xf6>
 800f186:	9a07      	ldr	r2, [sp, #28]
 800f188:	4654      	mov	r4, sl
 800f18a:	2000      	movs	r0, #0
 800f18c:	f04f 0c0a 	mov.w	ip, #10
 800f190:	4621      	mov	r1, r4
 800f192:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f196:	3b30      	subs	r3, #48	; 0x30
 800f198:	2b09      	cmp	r3, #9
 800f19a:	d94e      	bls.n	800f23a <_svfiprintf_r+0x17e>
 800f19c:	b1b0      	cbz	r0, 800f1cc <_svfiprintf_r+0x110>
 800f19e:	9207      	str	r2, [sp, #28]
 800f1a0:	e014      	b.n	800f1cc <_svfiprintf_r+0x110>
 800f1a2:	eba0 0308 	sub.w	r3, r0, r8
 800f1a6:	fa09 f303 	lsl.w	r3, r9, r3
 800f1aa:	4313      	orrs	r3, r2
 800f1ac:	9304      	str	r3, [sp, #16]
 800f1ae:	46a2      	mov	sl, r4
 800f1b0:	e7d2      	b.n	800f158 <_svfiprintf_r+0x9c>
 800f1b2:	9b03      	ldr	r3, [sp, #12]
 800f1b4:	1d19      	adds	r1, r3, #4
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	9103      	str	r1, [sp, #12]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	bfbb      	ittet	lt
 800f1be:	425b      	neglt	r3, r3
 800f1c0:	f042 0202 	orrlt.w	r2, r2, #2
 800f1c4:	9307      	strge	r3, [sp, #28]
 800f1c6:	9307      	strlt	r3, [sp, #28]
 800f1c8:	bfb8      	it	lt
 800f1ca:	9204      	strlt	r2, [sp, #16]
 800f1cc:	7823      	ldrb	r3, [r4, #0]
 800f1ce:	2b2e      	cmp	r3, #46	; 0x2e
 800f1d0:	d10c      	bne.n	800f1ec <_svfiprintf_r+0x130>
 800f1d2:	7863      	ldrb	r3, [r4, #1]
 800f1d4:	2b2a      	cmp	r3, #42	; 0x2a
 800f1d6:	d135      	bne.n	800f244 <_svfiprintf_r+0x188>
 800f1d8:	9b03      	ldr	r3, [sp, #12]
 800f1da:	1d1a      	adds	r2, r3, #4
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	9203      	str	r2, [sp, #12]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	bfb8      	it	lt
 800f1e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f1e8:	3402      	adds	r4, #2
 800f1ea:	9305      	str	r3, [sp, #20]
 800f1ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f2b8 <_svfiprintf_r+0x1fc>
 800f1f0:	7821      	ldrb	r1, [r4, #0]
 800f1f2:	2203      	movs	r2, #3
 800f1f4:	4650      	mov	r0, sl
 800f1f6:	f7f1 f87b 	bl	80002f0 <memchr>
 800f1fa:	b140      	cbz	r0, 800f20e <_svfiprintf_r+0x152>
 800f1fc:	2340      	movs	r3, #64	; 0x40
 800f1fe:	eba0 000a 	sub.w	r0, r0, sl
 800f202:	fa03 f000 	lsl.w	r0, r3, r0
 800f206:	9b04      	ldr	r3, [sp, #16]
 800f208:	4303      	orrs	r3, r0
 800f20a:	3401      	adds	r4, #1
 800f20c:	9304      	str	r3, [sp, #16]
 800f20e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f212:	4826      	ldr	r0, [pc, #152]	; (800f2ac <_svfiprintf_r+0x1f0>)
 800f214:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f218:	2206      	movs	r2, #6
 800f21a:	f7f1 f869 	bl	80002f0 <memchr>
 800f21e:	2800      	cmp	r0, #0
 800f220:	d038      	beq.n	800f294 <_svfiprintf_r+0x1d8>
 800f222:	4b23      	ldr	r3, [pc, #140]	; (800f2b0 <_svfiprintf_r+0x1f4>)
 800f224:	bb1b      	cbnz	r3, 800f26e <_svfiprintf_r+0x1b2>
 800f226:	9b03      	ldr	r3, [sp, #12]
 800f228:	3307      	adds	r3, #7
 800f22a:	f023 0307 	bic.w	r3, r3, #7
 800f22e:	3308      	adds	r3, #8
 800f230:	9303      	str	r3, [sp, #12]
 800f232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f234:	4433      	add	r3, r6
 800f236:	9309      	str	r3, [sp, #36]	; 0x24
 800f238:	e767      	b.n	800f10a <_svfiprintf_r+0x4e>
 800f23a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f23e:	460c      	mov	r4, r1
 800f240:	2001      	movs	r0, #1
 800f242:	e7a5      	b.n	800f190 <_svfiprintf_r+0xd4>
 800f244:	2300      	movs	r3, #0
 800f246:	3401      	adds	r4, #1
 800f248:	9305      	str	r3, [sp, #20]
 800f24a:	4619      	mov	r1, r3
 800f24c:	f04f 0c0a 	mov.w	ip, #10
 800f250:	4620      	mov	r0, r4
 800f252:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f256:	3a30      	subs	r2, #48	; 0x30
 800f258:	2a09      	cmp	r2, #9
 800f25a:	d903      	bls.n	800f264 <_svfiprintf_r+0x1a8>
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d0c5      	beq.n	800f1ec <_svfiprintf_r+0x130>
 800f260:	9105      	str	r1, [sp, #20]
 800f262:	e7c3      	b.n	800f1ec <_svfiprintf_r+0x130>
 800f264:	fb0c 2101 	mla	r1, ip, r1, r2
 800f268:	4604      	mov	r4, r0
 800f26a:	2301      	movs	r3, #1
 800f26c:	e7f0      	b.n	800f250 <_svfiprintf_r+0x194>
 800f26e:	ab03      	add	r3, sp, #12
 800f270:	9300      	str	r3, [sp, #0]
 800f272:	462a      	mov	r2, r5
 800f274:	4b0f      	ldr	r3, [pc, #60]	; (800f2b4 <_svfiprintf_r+0x1f8>)
 800f276:	a904      	add	r1, sp, #16
 800f278:	4638      	mov	r0, r7
 800f27a:	f3af 8000 	nop.w
 800f27e:	1c42      	adds	r2, r0, #1
 800f280:	4606      	mov	r6, r0
 800f282:	d1d6      	bne.n	800f232 <_svfiprintf_r+0x176>
 800f284:	89ab      	ldrh	r3, [r5, #12]
 800f286:	065b      	lsls	r3, r3, #25
 800f288:	f53f af2c 	bmi.w	800f0e4 <_svfiprintf_r+0x28>
 800f28c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f28e:	b01d      	add	sp, #116	; 0x74
 800f290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f294:	ab03      	add	r3, sp, #12
 800f296:	9300      	str	r3, [sp, #0]
 800f298:	462a      	mov	r2, r5
 800f29a:	4b06      	ldr	r3, [pc, #24]	; (800f2b4 <_svfiprintf_r+0x1f8>)
 800f29c:	a904      	add	r1, sp, #16
 800f29e:	4638      	mov	r0, r7
 800f2a0:	f000 f87a 	bl	800f398 <_printf_i>
 800f2a4:	e7eb      	b.n	800f27e <_svfiprintf_r+0x1c2>
 800f2a6:	bf00      	nop
 800f2a8:	080103c0 	.word	0x080103c0
 800f2ac:	080103ca 	.word	0x080103ca
 800f2b0:	00000000 	.word	0x00000000
 800f2b4:	0800f005 	.word	0x0800f005
 800f2b8:	080103c6 	.word	0x080103c6

0800f2bc <_printf_common>:
 800f2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2c0:	4616      	mov	r6, r2
 800f2c2:	4699      	mov	r9, r3
 800f2c4:	688a      	ldr	r2, [r1, #8]
 800f2c6:	690b      	ldr	r3, [r1, #16]
 800f2c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f2cc:	4293      	cmp	r3, r2
 800f2ce:	bfb8      	it	lt
 800f2d0:	4613      	movlt	r3, r2
 800f2d2:	6033      	str	r3, [r6, #0]
 800f2d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f2d8:	4607      	mov	r7, r0
 800f2da:	460c      	mov	r4, r1
 800f2dc:	b10a      	cbz	r2, 800f2e2 <_printf_common+0x26>
 800f2de:	3301      	adds	r3, #1
 800f2e0:	6033      	str	r3, [r6, #0]
 800f2e2:	6823      	ldr	r3, [r4, #0]
 800f2e4:	0699      	lsls	r1, r3, #26
 800f2e6:	bf42      	ittt	mi
 800f2e8:	6833      	ldrmi	r3, [r6, #0]
 800f2ea:	3302      	addmi	r3, #2
 800f2ec:	6033      	strmi	r3, [r6, #0]
 800f2ee:	6825      	ldr	r5, [r4, #0]
 800f2f0:	f015 0506 	ands.w	r5, r5, #6
 800f2f4:	d106      	bne.n	800f304 <_printf_common+0x48>
 800f2f6:	f104 0a19 	add.w	sl, r4, #25
 800f2fa:	68e3      	ldr	r3, [r4, #12]
 800f2fc:	6832      	ldr	r2, [r6, #0]
 800f2fe:	1a9b      	subs	r3, r3, r2
 800f300:	42ab      	cmp	r3, r5
 800f302:	dc26      	bgt.n	800f352 <_printf_common+0x96>
 800f304:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f308:	1e13      	subs	r3, r2, #0
 800f30a:	6822      	ldr	r2, [r4, #0]
 800f30c:	bf18      	it	ne
 800f30e:	2301      	movne	r3, #1
 800f310:	0692      	lsls	r2, r2, #26
 800f312:	d42b      	bmi.n	800f36c <_printf_common+0xb0>
 800f314:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f318:	4649      	mov	r1, r9
 800f31a:	4638      	mov	r0, r7
 800f31c:	47c0      	blx	r8
 800f31e:	3001      	adds	r0, #1
 800f320:	d01e      	beq.n	800f360 <_printf_common+0xa4>
 800f322:	6823      	ldr	r3, [r4, #0]
 800f324:	68e5      	ldr	r5, [r4, #12]
 800f326:	6832      	ldr	r2, [r6, #0]
 800f328:	f003 0306 	and.w	r3, r3, #6
 800f32c:	2b04      	cmp	r3, #4
 800f32e:	bf08      	it	eq
 800f330:	1aad      	subeq	r5, r5, r2
 800f332:	68a3      	ldr	r3, [r4, #8]
 800f334:	6922      	ldr	r2, [r4, #16]
 800f336:	bf0c      	ite	eq
 800f338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f33c:	2500      	movne	r5, #0
 800f33e:	4293      	cmp	r3, r2
 800f340:	bfc4      	itt	gt
 800f342:	1a9b      	subgt	r3, r3, r2
 800f344:	18ed      	addgt	r5, r5, r3
 800f346:	2600      	movs	r6, #0
 800f348:	341a      	adds	r4, #26
 800f34a:	42b5      	cmp	r5, r6
 800f34c:	d11a      	bne.n	800f384 <_printf_common+0xc8>
 800f34e:	2000      	movs	r0, #0
 800f350:	e008      	b.n	800f364 <_printf_common+0xa8>
 800f352:	2301      	movs	r3, #1
 800f354:	4652      	mov	r2, sl
 800f356:	4649      	mov	r1, r9
 800f358:	4638      	mov	r0, r7
 800f35a:	47c0      	blx	r8
 800f35c:	3001      	adds	r0, #1
 800f35e:	d103      	bne.n	800f368 <_printf_common+0xac>
 800f360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f368:	3501      	adds	r5, #1
 800f36a:	e7c6      	b.n	800f2fa <_printf_common+0x3e>
 800f36c:	18e1      	adds	r1, r4, r3
 800f36e:	1c5a      	adds	r2, r3, #1
 800f370:	2030      	movs	r0, #48	; 0x30
 800f372:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f376:	4422      	add	r2, r4
 800f378:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f37c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f380:	3302      	adds	r3, #2
 800f382:	e7c7      	b.n	800f314 <_printf_common+0x58>
 800f384:	2301      	movs	r3, #1
 800f386:	4622      	mov	r2, r4
 800f388:	4649      	mov	r1, r9
 800f38a:	4638      	mov	r0, r7
 800f38c:	47c0      	blx	r8
 800f38e:	3001      	adds	r0, #1
 800f390:	d0e6      	beq.n	800f360 <_printf_common+0xa4>
 800f392:	3601      	adds	r6, #1
 800f394:	e7d9      	b.n	800f34a <_printf_common+0x8e>
	...

0800f398 <_printf_i>:
 800f398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f39c:	7e0f      	ldrb	r7, [r1, #24]
 800f39e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f3a0:	2f78      	cmp	r7, #120	; 0x78
 800f3a2:	4691      	mov	r9, r2
 800f3a4:	4680      	mov	r8, r0
 800f3a6:	460c      	mov	r4, r1
 800f3a8:	469a      	mov	sl, r3
 800f3aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f3ae:	d807      	bhi.n	800f3c0 <_printf_i+0x28>
 800f3b0:	2f62      	cmp	r7, #98	; 0x62
 800f3b2:	d80a      	bhi.n	800f3ca <_printf_i+0x32>
 800f3b4:	2f00      	cmp	r7, #0
 800f3b6:	f000 80d8 	beq.w	800f56a <_printf_i+0x1d2>
 800f3ba:	2f58      	cmp	r7, #88	; 0x58
 800f3bc:	f000 80a3 	beq.w	800f506 <_printf_i+0x16e>
 800f3c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f3c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f3c8:	e03a      	b.n	800f440 <_printf_i+0xa8>
 800f3ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f3ce:	2b15      	cmp	r3, #21
 800f3d0:	d8f6      	bhi.n	800f3c0 <_printf_i+0x28>
 800f3d2:	a101      	add	r1, pc, #4	; (adr r1, 800f3d8 <_printf_i+0x40>)
 800f3d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f3d8:	0800f431 	.word	0x0800f431
 800f3dc:	0800f445 	.word	0x0800f445
 800f3e0:	0800f3c1 	.word	0x0800f3c1
 800f3e4:	0800f3c1 	.word	0x0800f3c1
 800f3e8:	0800f3c1 	.word	0x0800f3c1
 800f3ec:	0800f3c1 	.word	0x0800f3c1
 800f3f0:	0800f445 	.word	0x0800f445
 800f3f4:	0800f3c1 	.word	0x0800f3c1
 800f3f8:	0800f3c1 	.word	0x0800f3c1
 800f3fc:	0800f3c1 	.word	0x0800f3c1
 800f400:	0800f3c1 	.word	0x0800f3c1
 800f404:	0800f551 	.word	0x0800f551
 800f408:	0800f475 	.word	0x0800f475
 800f40c:	0800f533 	.word	0x0800f533
 800f410:	0800f3c1 	.word	0x0800f3c1
 800f414:	0800f3c1 	.word	0x0800f3c1
 800f418:	0800f573 	.word	0x0800f573
 800f41c:	0800f3c1 	.word	0x0800f3c1
 800f420:	0800f475 	.word	0x0800f475
 800f424:	0800f3c1 	.word	0x0800f3c1
 800f428:	0800f3c1 	.word	0x0800f3c1
 800f42c:	0800f53b 	.word	0x0800f53b
 800f430:	682b      	ldr	r3, [r5, #0]
 800f432:	1d1a      	adds	r2, r3, #4
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	602a      	str	r2, [r5, #0]
 800f438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f43c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f440:	2301      	movs	r3, #1
 800f442:	e0a3      	b.n	800f58c <_printf_i+0x1f4>
 800f444:	6820      	ldr	r0, [r4, #0]
 800f446:	6829      	ldr	r1, [r5, #0]
 800f448:	0606      	lsls	r6, r0, #24
 800f44a:	f101 0304 	add.w	r3, r1, #4
 800f44e:	d50a      	bpl.n	800f466 <_printf_i+0xce>
 800f450:	680e      	ldr	r6, [r1, #0]
 800f452:	602b      	str	r3, [r5, #0]
 800f454:	2e00      	cmp	r6, #0
 800f456:	da03      	bge.n	800f460 <_printf_i+0xc8>
 800f458:	232d      	movs	r3, #45	; 0x2d
 800f45a:	4276      	negs	r6, r6
 800f45c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f460:	485e      	ldr	r0, [pc, #376]	; (800f5dc <_printf_i+0x244>)
 800f462:	230a      	movs	r3, #10
 800f464:	e019      	b.n	800f49a <_printf_i+0x102>
 800f466:	680e      	ldr	r6, [r1, #0]
 800f468:	602b      	str	r3, [r5, #0]
 800f46a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f46e:	bf18      	it	ne
 800f470:	b236      	sxthne	r6, r6
 800f472:	e7ef      	b.n	800f454 <_printf_i+0xbc>
 800f474:	682b      	ldr	r3, [r5, #0]
 800f476:	6820      	ldr	r0, [r4, #0]
 800f478:	1d19      	adds	r1, r3, #4
 800f47a:	6029      	str	r1, [r5, #0]
 800f47c:	0601      	lsls	r1, r0, #24
 800f47e:	d501      	bpl.n	800f484 <_printf_i+0xec>
 800f480:	681e      	ldr	r6, [r3, #0]
 800f482:	e002      	b.n	800f48a <_printf_i+0xf2>
 800f484:	0646      	lsls	r6, r0, #25
 800f486:	d5fb      	bpl.n	800f480 <_printf_i+0xe8>
 800f488:	881e      	ldrh	r6, [r3, #0]
 800f48a:	4854      	ldr	r0, [pc, #336]	; (800f5dc <_printf_i+0x244>)
 800f48c:	2f6f      	cmp	r7, #111	; 0x6f
 800f48e:	bf0c      	ite	eq
 800f490:	2308      	moveq	r3, #8
 800f492:	230a      	movne	r3, #10
 800f494:	2100      	movs	r1, #0
 800f496:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f49a:	6865      	ldr	r5, [r4, #4]
 800f49c:	60a5      	str	r5, [r4, #8]
 800f49e:	2d00      	cmp	r5, #0
 800f4a0:	bfa2      	ittt	ge
 800f4a2:	6821      	ldrge	r1, [r4, #0]
 800f4a4:	f021 0104 	bicge.w	r1, r1, #4
 800f4a8:	6021      	strge	r1, [r4, #0]
 800f4aa:	b90e      	cbnz	r6, 800f4b0 <_printf_i+0x118>
 800f4ac:	2d00      	cmp	r5, #0
 800f4ae:	d04d      	beq.n	800f54c <_printf_i+0x1b4>
 800f4b0:	4615      	mov	r5, r2
 800f4b2:	fbb6 f1f3 	udiv	r1, r6, r3
 800f4b6:	fb03 6711 	mls	r7, r3, r1, r6
 800f4ba:	5dc7      	ldrb	r7, [r0, r7]
 800f4bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f4c0:	4637      	mov	r7, r6
 800f4c2:	42bb      	cmp	r3, r7
 800f4c4:	460e      	mov	r6, r1
 800f4c6:	d9f4      	bls.n	800f4b2 <_printf_i+0x11a>
 800f4c8:	2b08      	cmp	r3, #8
 800f4ca:	d10b      	bne.n	800f4e4 <_printf_i+0x14c>
 800f4cc:	6823      	ldr	r3, [r4, #0]
 800f4ce:	07de      	lsls	r6, r3, #31
 800f4d0:	d508      	bpl.n	800f4e4 <_printf_i+0x14c>
 800f4d2:	6923      	ldr	r3, [r4, #16]
 800f4d4:	6861      	ldr	r1, [r4, #4]
 800f4d6:	4299      	cmp	r1, r3
 800f4d8:	bfde      	ittt	le
 800f4da:	2330      	movle	r3, #48	; 0x30
 800f4dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f4e0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f4e4:	1b52      	subs	r2, r2, r5
 800f4e6:	6122      	str	r2, [r4, #16]
 800f4e8:	f8cd a000 	str.w	sl, [sp]
 800f4ec:	464b      	mov	r3, r9
 800f4ee:	aa03      	add	r2, sp, #12
 800f4f0:	4621      	mov	r1, r4
 800f4f2:	4640      	mov	r0, r8
 800f4f4:	f7ff fee2 	bl	800f2bc <_printf_common>
 800f4f8:	3001      	adds	r0, #1
 800f4fa:	d14c      	bne.n	800f596 <_printf_i+0x1fe>
 800f4fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f500:	b004      	add	sp, #16
 800f502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f506:	4835      	ldr	r0, [pc, #212]	; (800f5dc <_printf_i+0x244>)
 800f508:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f50c:	6829      	ldr	r1, [r5, #0]
 800f50e:	6823      	ldr	r3, [r4, #0]
 800f510:	f851 6b04 	ldr.w	r6, [r1], #4
 800f514:	6029      	str	r1, [r5, #0]
 800f516:	061d      	lsls	r5, r3, #24
 800f518:	d514      	bpl.n	800f544 <_printf_i+0x1ac>
 800f51a:	07df      	lsls	r7, r3, #31
 800f51c:	bf44      	itt	mi
 800f51e:	f043 0320 	orrmi.w	r3, r3, #32
 800f522:	6023      	strmi	r3, [r4, #0]
 800f524:	b91e      	cbnz	r6, 800f52e <_printf_i+0x196>
 800f526:	6823      	ldr	r3, [r4, #0]
 800f528:	f023 0320 	bic.w	r3, r3, #32
 800f52c:	6023      	str	r3, [r4, #0]
 800f52e:	2310      	movs	r3, #16
 800f530:	e7b0      	b.n	800f494 <_printf_i+0xfc>
 800f532:	6823      	ldr	r3, [r4, #0]
 800f534:	f043 0320 	orr.w	r3, r3, #32
 800f538:	6023      	str	r3, [r4, #0]
 800f53a:	2378      	movs	r3, #120	; 0x78
 800f53c:	4828      	ldr	r0, [pc, #160]	; (800f5e0 <_printf_i+0x248>)
 800f53e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f542:	e7e3      	b.n	800f50c <_printf_i+0x174>
 800f544:	0659      	lsls	r1, r3, #25
 800f546:	bf48      	it	mi
 800f548:	b2b6      	uxthmi	r6, r6
 800f54a:	e7e6      	b.n	800f51a <_printf_i+0x182>
 800f54c:	4615      	mov	r5, r2
 800f54e:	e7bb      	b.n	800f4c8 <_printf_i+0x130>
 800f550:	682b      	ldr	r3, [r5, #0]
 800f552:	6826      	ldr	r6, [r4, #0]
 800f554:	6961      	ldr	r1, [r4, #20]
 800f556:	1d18      	adds	r0, r3, #4
 800f558:	6028      	str	r0, [r5, #0]
 800f55a:	0635      	lsls	r5, r6, #24
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	d501      	bpl.n	800f564 <_printf_i+0x1cc>
 800f560:	6019      	str	r1, [r3, #0]
 800f562:	e002      	b.n	800f56a <_printf_i+0x1d2>
 800f564:	0670      	lsls	r0, r6, #25
 800f566:	d5fb      	bpl.n	800f560 <_printf_i+0x1c8>
 800f568:	8019      	strh	r1, [r3, #0]
 800f56a:	2300      	movs	r3, #0
 800f56c:	6123      	str	r3, [r4, #16]
 800f56e:	4615      	mov	r5, r2
 800f570:	e7ba      	b.n	800f4e8 <_printf_i+0x150>
 800f572:	682b      	ldr	r3, [r5, #0]
 800f574:	1d1a      	adds	r2, r3, #4
 800f576:	602a      	str	r2, [r5, #0]
 800f578:	681d      	ldr	r5, [r3, #0]
 800f57a:	6862      	ldr	r2, [r4, #4]
 800f57c:	2100      	movs	r1, #0
 800f57e:	4628      	mov	r0, r5
 800f580:	f7f0 feb6 	bl	80002f0 <memchr>
 800f584:	b108      	cbz	r0, 800f58a <_printf_i+0x1f2>
 800f586:	1b40      	subs	r0, r0, r5
 800f588:	6060      	str	r0, [r4, #4]
 800f58a:	6863      	ldr	r3, [r4, #4]
 800f58c:	6123      	str	r3, [r4, #16]
 800f58e:	2300      	movs	r3, #0
 800f590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f594:	e7a8      	b.n	800f4e8 <_printf_i+0x150>
 800f596:	6923      	ldr	r3, [r4, #16]
 800f598:	462a      	mov	r2, r5
 800f59a:	4649      	mov	r1, r9
 800f59c:	4640      	mov	r0, r8
 800f59e:	47d0      	blx	sl
 800f5a0:	3001      	adds	r0, #1
 800f5a2:	d0ab      	beq.n	800f4fc <_printf_i+0x164>
 800f5a4:	6823      	ldr	r3, [r4, #0]
 800f5a6:	079b      	lsls	r3, r3, #30
 800f5a8:	d413      	bmi.n	800f5d2 <_printf_i+0x23a>
 800f5aa:	68e0      	ldr	r0, [r4, #12]
 800f5ac:	9b03      	ldr	r3, [sp, #12]
 800f5ae:	4298      	cmp	r0, r3
 800f5b0:	bfb8      	it	lt
 800f5b2:	4618      	movlt	r0, r3
 800f5b4:	e7a4      	b.n	800f500 <_printf_i+0x168>
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	4632      	mov	r2, r6
 800f5ba:	4649      	mov	r1, r9
 800f5bc:	4640      	mov	r0, r8
 800f5be:	47d0      	blx	sl
 800f5c0:	3001      	adds	r0, #1
 800f5c2:	d09b      	beq.n	800f4fc <_printf_i+0x164>
 800f5c4:	3501      	adds	r5, #1
 800f5c6:	68e3      	ldr	r3, [r4, #12]
 800f5c8:	9903      	ldr	r1, [sp, #12]
 800f5ca:	1a5b      	subs	r3, r3, r1
 800f5cc:	42ab      	cmp	r3, r5
 800f5ce:	dcf2      	bgt.n	800f5b6 <_printf_i+0x21e>
 800f5d0:	e7eb      	b.n	800f5aa <_printf_i+0x212>
 800f5d2:	2500      	movs	r5, #0
 800f5d4:	f104 0619 	add.w	r6, r4, #25
 800f5d8:	e7f5      	b.n	800f5c6 <_printf_i+0x22e>
 800f5da:	bf00      	nop
 800f5dc:	080103d1 	.word	0x080103d1
 800f5e0:	080103e2 	.word	0x080103e2

0800f5e4 <_free_r>:
 800f5e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f5e6:	2900      	cmp	r1, #0
 800f5e8:	d044      	beq.n	800f674 <_free_r+0x90>
 800f5ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5ee:	9001      	str	r0, [sp, #4]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	f1a1 0404 	sub.w	r4, r1, #4
 800f5f6:	bfb8      	it	lt
 800f5f8:	18e4      	addlt	r4, r4, r3
 800f5fa:	f000 f913 	bl	800f824 <__malloc_lock>
 800f5fe:	4a1e      	ldr	r2, [pc, #120]	; (800f678 <_free_r+0x94>)
 800f600:	9801      	ldr	r0, [sp, #4]
 800f602:	6813      	ldr	r3, [r2, #0]
 800f604:	b933      	cbnz	r3, 800f614 <_free_r+0x30>
 800f606:	6063      	str	r3, [r4, #4]
 800f608:	6014      	str	r4, [r2, #0]
 800f60a:	b003      	add	sp, #12
 800f60c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f610:	f000 b90e 	b.w	800f830 <__malloc_unlock>
 800f614:	42a3      	cmp	r3, r4
 800f616:	d908      	bls.n	800f62a <_free_r+0x46>
 800f618:	6825      	ldr	r5, [r4, #0]
 800f61a:	1961      	adds	r1, r4, r5
 800f61c:	428b      	cmp	r3, r1
 800f61e:	bf01      	itttt	eq
 800f620:	6819      	ldreq	r1, [r3, #0]
 800f622:	685b      	ldreq	r3, [r3, #4]
 800f624:	1949      	addeq	r1, r1, r5
 800f626:	6021      	streq	r1, [r4, #0]
 800f628:	e7ed      	b.n	800f606 <_free_r+0x22>
 800f62a:	461a      	mov	r2, r3
 800f62c:	685b      	ldr	r3, [r3, #4]
 800f62e:	b10b      	cbz	r3, 800f634 <_free_r+0x50>
 800f630:	42a3      	cmp	r3, r4
 800f632:	d9fa      	bls.n	800f62a <_free_r+0x46>
 800f634:	6811      	ldr	r1, [r2, #0]
 800f636:	1855      	adds	r5, r2, r1
 800f638:	42a5      	cmp	r5, r4
 800f63a:	d10b      	bne.n	800f654 <_free_r+0x70>
 800f63c:	6824      	ldr	r4, [r4, #0]
 800f63e:	4421      	add	r1, r4
 800f640:	1854      	adds	r4, r2, r1
 800f642:	42a3      	cmp	r3, r4
 800f644:	6011      	str	r1, [r2, #0]
 800f646:	d1e0      	bne.n	800f60a <_free_r+0x26>
 800f648:	681c      	ldr	r4, [r3, #0]
 800f64a:	685b      	ldr	r3, [r3, #4]
 800f64c:	6053      	str	r3, [r2, #4]
 800f64e:	4421      	add	r1, r4
 800f650:	6011      	str	r1, [r2, #0]
 800f652:	e7da      	b.n	800f60a <_free_r+0x26>
 800f654:	d902      	bls.n	800f65c <_free_r+0x78>
 800f656:	230c      	movs	r3, #12
 800f658:	6003      	str	r3, [r0, #0]
 800f65a:	e7d6      	b.n	800f60a <_free_r+0x26>
 800f65c:	6825      	ldr	r5, [r4, #0]
 800f65e:	1961      	adds	r1, r4, r5
 800f660:	428b      	cmp	r3, r1
 800f662:	bf04      	itt	eq
 800f664:	6819      	ldreq	r1, [r3, #0]
 800f666:	685b      	ldreq	r3, [r3, #4]
 800f668:	6063      	str	r3, [r4, #4]
 800f66a:	bf04      	itt	eq
 800f66c:	1949      	addeq	r1, r1, r5
 800f66e:	6021      	streq	r1, [r4, #0]
 800f670:	6054      	str	r4, [r2, #4]
 800f672:	e7ca      	b.n	800f60a <_free_r+0x26>
 800f674:	b003      	add	sp, #12
 800f676:	bd30      	pop	{r4, r5, pc}
 800f678:	240004c4 	.word	0x240004c4

0800f67c <sbrk_aligned>:
 800f67c:	b570      	push	{r4, r5, r6, lr}
 800f67e:	4e0e      	ldr	r6, [pc, #56]	; (800f6b8 <sbrk_aligned+0x3c>)
 800f680:	460c      	mov	r4, r1
 800f682:	6831      	ldr	r1, [r6, #0]
 800f684:	4605      	mov	r5, r0
 800f686:	b911      	cbnz	r1, 800f68e <sbrk_aligned+0x12>
 800f688:	f000 f8bc 	bl	800f804 <_sbrk_r>
 800f68c:	6030      	str	r0, [r6, #0]
 800f68e:	4621      	mov	r1, r4
 800f690:	4628      	mov	r0, r5
 800f692:	f000 f8b7 	bl	800f804 <_sbrk_r>
 800f696:	1c43      	adds	r3, r0, #1
 800f698:	d00a      	beq.n	800f6b0 <sbrk_aligned+0x34>
 800f69a:	1cc4      	adds	r4, r0, #3
 800f69c:	f024 0403 	bic.w	r4, r4, #3
 800f6a0:	42a0      	cmp	r0, r4
 800f6a2:	d007      	beq.n	800f6b4 <sbrk_aligned+0x38>
 800f6a4:	1a21      	subs	r1, r4, r0
 800f6a6:	4628      	mov	r0, r5
 800f6a8:	f000 f8ac 	bl	800f804 <_sbrk_r>
 800f6ac:	3001      	adds	r0, #1
 800f6ae:	d101      	bne.n	800f6b4 <sbrk_aligned+0x38>
 800f6b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f6b4:	4620      	mov	r0, r4
 800f6b6:	bd70      	pop	{r4, r5, r6, pc}
 800f6b8:	240004c8 	.word	0x240004c8

0800f6bc <_malloc_r>:
 800f6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6c0:	1ccd      	adds	r5, r1, #3
 800f6c2:	f025 0503 	bic.w	r5, r5, #3
 800f6c6:	3508      	adds	r5, #8
 800f6c8:	2d0c      	cmp	r5, #12
 800f6ca:	bf38      	it	cc
 800f6cc:	250c      	movcc	r5, #12
 800f6ce:	2d00      	cmp	r5, #0
 800f6d0:	4607      	mov	r7, r0
 800f6d2:	db01      	blt.n	800f6d8 <_malloc_r+0x1c>
 800f6d4:	42a9      	cmp	r1, r5
 800f6d6:	d905      	bls.n	800f6e4 <_malloc_r+0x28>
 800f6d8:	230c      	movs	r3, #12
 800f6da:	603b      	str	r3, [r7, #0]
 800f6dc:	2600      	movs	r6, #0
 800f6de:	4630      	mov	r0, r6
 800f6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6e4:	4e2e      	ldr	r6, [pc, #184]	; (800f7a0 <_malloc_r+0xe4>)
 800f6e6:	f000 f89d 	bl	800f824 <__malloc_lock>
 800f6ea:	6833      	ldr	r3, [r6, #0]
 800f6ec:	461c      	mov	r4, r3
 800f6ee:	bb34      	cbnz	r4, 800f73e <_malloc_r+0x82>
 800f6f0:	4629      	mov	r1, r5
 800f6f2:	4638      	mov	r0, r7
 800f6f4:	f7ff ffc2 	bl	800f67c <sbrk_aligned>
 800f6f8:	1c43      	adds	r3, r0, #1
 800f6fa:	4604      	mov	r4, r0
 800f6fc:	d14d      	bne.n	800f79a <_malloc_r+0xde>
 800f6fe:	6834      	ldr	r4, [r6, #0]
 800f700:	4626      	mov	r6, r4
 800f702:	2e00      	cmp	r6, #0
 800f704:	d140      	bne.n	800f788 <_malloc_r+0xcc>
 800f706:	6823      	ldr	r3, [r4, #0]
 800f708:	4631      	mov	r1, r6
 800f70a:	4638      	mov	r0, r7
 800f70c:	eb04 0803 	add.w	r8, r4, r3
 800f710:	f000 f878 	bl	800f804 <_sbrk_r>
 800f714:	4580      	cmp	r8, r0
 800f716:	d13a      	bne.n	800f78e <_malloc_r+0xd2>
 800f718:	6821      	ldr	r1, [r4, #0]
 800f71a:	3503      	adds	r5, #3
 800f71c:	1a6d      	subs	r5, r5, r1
 800f71e:	f025 0503 	bic.w	r5, r5, #3
 800f722:	3508      	adds	r5, #8
 800f724:	2d0c      	cmp	r5, #12
 800f726:	bf38      	it	cc
 800f728:	250c      	movcc	r5, #12
 800f72a:	4629      	mov	r1, r5
 800f72c:	4638      	mov	r0, r7
 800f72e:	f7ff ffa5 	bl	800f67c <sbrk_aligned>
 800f732:	3001      	adds	r0, #1
 800f734:	d02b      	beq.n	800f78e <_malloc_r+0xd2>
 800f736:	6823      	ldr	r3, [r4, #0]
 800f738:	442b      	add	r3, r5
 800f73a:	6023      	str	r3, [r4, #0]
 800f73c:	e00e      	b.n	800f75c <_malloc_r+0xa0>
 800f73e:	6822      	ldr	r2, [r4, #0]
 800f740:	1b52      	subs	r2, r2, r5
 800f742:	d41e      	bmi.n	800f782 <_malloc_r+0xc6>
 800f744:	2a0b      	cmp	r2, #11
 800f746:	d916      	bls.n	800f776 <_malloc_r+0xba>
 800f748:	1961      	adds	r1, r4, r5
 800f74a:	42a3      	cmp	r3, r4
 800f74c:	6025      	str	r5, [r4, #0]
 800f74e:	bf18      	it	ne
 800f750:	6059      	strne	r1, [r3, #4]
 800f752:	6863      	ldr	r3, [r4, #4]
 800f754:	bf08      	it	eq
 800f756:	6031      	streq	r1, [r6, #0]
 800f758:	5162      	str	r2, [r4, r5]
 800f75a:	604b      	str	r3, [r1, #4]
 800f75c:	4638      	mov	r0, r7
 800f75e:	f104 060b 	add.w	r6, r4, #11
 800f762:	f000 f865 	bl	800f830 <__malloc_unlock>
 800f766:	f026 0607 	bic.w	r6, r6, #7
 800f76a:	1d23      	adds	r3, r4, #4
 800f76c:	1af2      	subs	r2, r6, r3
 800f76e:	d0b6      	beq.n	800f6de <_malloc_r+0x22>
 800f770:	1b9b      	subs	r3, r3, r6
 800f772:	50a3      	str	r3, [r4, r2]
 800f774:	e7b3      	b.n	800f6de <_malloc_r+0x22>
 800f776:	6862      	ldr	r2, [r4, #4]
 800f778:	42a3      	cmp	r3, r4
 800f77a:	bf0c      	ite	eq
 800f77c:	6032      	streq	r2, [r6, #0]
 800f77e:	605a      	strne	r2, [r3, #4]
 800f780:	e7ec      	b.n	800f75c <_malloc_r+0xa0>
 800f782:	4623      	mov	r3, r4
 800f784:	6864      	ldr	r4, [r4, #4]
 800f786:	e7b2      	b.n	800f6ee <_malloc_r+0x32>
 800f788:	4634      	mov	r4, r6
 800f78a:	6876      	ldr	r6, [r6, #4]
 800f78c:	e7b9      	b.n	800f702 <_malloc_r+0x46>
 800f78e:	230c      	movs	r3, #12
 800f790:	603b      	str	r3, [r7, #0]
 800f792:	4638      	mov	r0, r7
 800f794:	f000 f84c 	bl	800f830 <__malloc_unlock>
 800f798:	e7a1      	b.n	800f6de <_malloc_r+0x22>
 800f79a:	6025      	str	r5, [r4, #0]
 800f79c:	e7de      	b.n	800f75c <_malloc_r+0xa0>
 800f79e:	bf00      	nop
 800f7a0:	240004c4 	.word	0x240004c4

0800f7a4 <_realloc_r>:
 800f7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7a8:	4680      	mov	r8, r0
 800f7aa:	4614      	mov	r4, r2
 800f7ac:	460e      	mov	r6, r1
 800f7ae:	b921      	cbnz	r1, 800f7ba <_realloc_r+0x16>
 800f7b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7b4:	4611      	mov	r1, r2
 800f7b6:	f7ff bf81 	b.w	800f6bc <_malloc_r>
 800f7ba:	b92a      	cbnz	r2, 800f7c8 <_realloc_r+0x24>
 800f7bc:	f7ff ff12 	bl	800f5e4 <_free_r>
 800f7c0:	4625      	mov	r5, r4
 800f7c2:	4628      	mov	r0, r5
 800f7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7c8:	f000 f838 	bl	800f83c <_malloc_usable_size_r>
 800f7cc:	4284      	cmp	r4, r0
 800f7ce:	4607      	mov	r7, r0
 800f7d0:	d802      	bhi.n	800f7d8 <_realloc_r+0x34>
 800f7d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f7d6:	d812      	bhi.n	800f7fe <_realloc_r+0x5a>
 800f7d8:	4621      	mov	r1, r4
 800f7da:	4640      	mov	r0, r8
 800f7dc:	f7ff ff6e 	bl	800f6bc <_malloc_r>
 800f7e0:	4605      	mov	r5, r0
 800f7e2:	2800      	cmp	r0, #0
 800f7e4:	d0ed      	beq.n	800f7c2 <_realloc_r+0x1e>
 800f7e6:	42bc      	cmp	r4, r7
 800f7e8:	4622      	mov	r2, r4
 800f7ea:	4631      	mov	r1, r6
 800f7ec:	bf28      	it	cs
 800f7ee:	463a      	movcs	r2, r7
 800f7f0:	f7ff fb6a 	bl	800eec8 <memcpy>
 800f7f4:	4631      	mov	r1, r6
 800f7f6:	4640      	mov	r0, r8
 800f7f8:	f7ff fef4 	bl	800f5e4 <_free_r>
 800f7fc:	e7e1      	b.n	800f7c2 <_realloc_r+0x1e>
 800f7fe:	4635      	mov	r5, r6
 800f800:	e7df      	b.n	800f7c2 <_realloc_r+0x1e>
	...

0800f804 <_sbrk_r>:
 800f804:	b538      	push	{r3, r4, r5, lr}
 800f806:	4d06      	ldr	r5, [pc, #24]	; (800f820 <_sbrk_r+0x1c>)
 800f808:	2300      	movs	r3, #0
 800f80a:	4604      	mov	r4, r0
 800f80c:	4608      	mov	r0, r1
 800f80e:	602b      	str	r3, [r5, #0]
 800f810:	f7f2 f876 	bl	8001900 <_sbrk>
 800f814:	1c43      	adds	r3, r0, #1
 800f816:	d102      	bne.n	800f81e <_sbrk_r+0x1a>
 800f818:	682b      	ldr	r3, [r5, #0]
 800f81a:	b103      	cbz	r3, 800f81e <_sbrk_r+0x1a>
 800f81c:	6023      	str	r3, [r4, #0]
 800f81e:	bd38      	pop	{r3, r4, r5, pc}
 800f820:	240004cc 	.word	0x240004cc

0800f824 <__malloc_lock>:
 800f824:	4801      	ldr	r0, [pc, #4]	; (800f82c <__malloc_lock+0x8>)
 800f826:	f000 b811 	b.w	800f84c <__retarget_lock_acquire_recursive>
 800f82a:	bf00      	nop
 800f82c:	240004d0 	.word	0x240004d0

0800f830 <__malloc_unlock>:
 800f830:	4801      	ldr	r0, [pc, #4]	; (800f838 <__malloc_unlock+0x8>)
 800f832:	f000 b80c 	b.w	800f84e <__retarget_lock_release_recursive>
 800f836:	bf00      	nop
 800f838:	240004d0 	.word	0x240004d0

0800f83c <_malloc_usable_size_r>:
 800f83c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f840:	1f18      	subs	r0, r3, #4
 800f842:	2b00      	cmp	r3, #0
 800f844:	bfbc      	itt	lt
 800f846:	580b      	ldrlt	r3, [r1, r0]
 800f848:	18c0      	addlt	r0, r0, r3
 800f84a:	4770      	bx	lr

0800f84c <__retarget_lock_acquire_recursive>:
 800f84c:	4770      	bx	lr

0800f84e <__retarget_lock_release_recursive>:
 800f84e:	4770      	bx	lr

0800f850 <_init>:
 800f850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f852:	bf00      	nop
 800f854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f856:	bc08      	pop	{r3}
 800f858:	469e      	mov	lr, r3
 800f85a:	4770      	bx	lr

0800f85c <_fini>:
 800f85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f85e:	bf00      	nop
 800f860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f862:	bc08      	pop	{r3}
 800f864:	469e      	mov	lr, r3
 800f866:	4770      	bx	lr
