
mewa_playground.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe2c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b8c  080100cc  080100cc  000200cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08010c58  08010c58  00020c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08010c5c  08010c5c  00020c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  24000000  08010c60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004cc  2400007c  08010cdc  0003007c  2**2
                  ALLOC
  7 .sdram        00010518  c0000000  c0000000  00040000  2**2
                  ALLOC
  8 ._user_heap_stack 00005000  24000548  24000548  00030548  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f0b9  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004237  00000000  00000000  0004f163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017f8  00000000  00000000  000533a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000015d8  00000000  00000000  00054b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003acf7  00000000  00000000  00056170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002314b  00000000  00000000  00090e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015fca8  00000000  00000000  000b3fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00213c5a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000066a0  00000000  00000000  00213cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080100b4 	.word	0x080100b4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	080100b4 	.word	0x080100b4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <cs4270_reset>:
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void cs4270_reset(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS4270_NRESET_GPIO, CS4270_NRESET_PIN, GPIO_PIN_RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	2110      	movs	r1, #16
 8000398:	4807      	ldr	r0, [pc, #28]	; (80003b8 <cs4270_reset+0x28>)
 800039a:	f004 fb67 	bl	8004a6c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800039e:	2001      	movs	r0, #1
 80003a0:	f001 fc66 	bl	8001c70 <HAL_Delay>
	HAL_GPIO_WritePin(CS4270_NRESET_GPIO, CS4270_NRESET_PIN, GPIO_PIN_SET);
 80003a4:	2201      	movs	r2, #1
 80003a6:	2110      	movs	r1, #16
 80003a8:	4803      	ldr	r0, [pc, #12]	; (80003b8 <cs4270_reset+0x28>)
 80003aa:	f004 fb5f 	bl	8004a6c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80003ae:	2001      	movs	r0, #1
 80003b0:	f001 fc5e 	bl	8001c70 <HAL_Delay>
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	58020c00 	.word	0x58020c00

080003bc <cs4270_init>:

bool cs4270_init(I2C_HandleTypeDef *hi2c1, uint8_t address)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b088      	sub	sp, #32
 80003c0:	af04      	add	r7, sp, #16
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	460b      	mov	r3, r1
 80003c6:	70fb      	strb	r3, [r7, #3]
	bool status;
	HAL_StatusTypeDef i2c_status;
	uint8_t reg_value;

	ctx.i2c = hi2c1;
 80003c8:	4a36      	ldr	r2, [pc, #216]	; (80004a4 <cs4270_init+0xe8>)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	6013      	str	r3, [r2, #0]
	ctx.address = ((CS4270_FIXED_ADDRESS | address) << 1);
 80003ce:	78fb      	ldrb	r3, [r7, #3]
 80003d0:	005b      	lsls	r3, r3, #1
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	f063 036f 	orn	r3, r3, #111	; 0x6f
 80003d8:	b2da      	uxtb	r2, r3
 80003da:	4b32      	ldr	r3, [pc, #200]	; (80004a4 <cs4270_init+0xe8>)
 80003dc:	711a      	strb	r2, [r3, #4]

	/* Reset the chip */
	cs4270_reset();
 80003de:	f7ff ffd7 	bl	8000390 <cs4270_reset>

	/* Check device's ID */
	if (cs4270_get_id() != CS4270_DEVICE_ID) {
 80003e2:	f000 f861 	bl	80004a8 <cs4270_get_id>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b0c      	cmp	r3, #12
 80003ea:	d001      	beq.n	80003f0 <cs4270_init+0x34>
		return false;
 80003ec:	2300      	movs	r3, #0
 80003ee:	e054      	b.n	800049a <cs4270_init+0xde>
	}

	/* Configure ADC and DAC: unfreeze ADC HPFs, disable digital loopback, set both ADC and DAC format to I2S */
	reg_value = 0b00001001;
 80003f0:	2309      	movs	r3, #9
 80003f2:	737b      	strb	r3, [r7, #13]
	i2c_status = HAL_I2C_Mem_Write(ctx.i2c, ctx.address, CS4270_ADC_DAC_CTRL_REG, CS4270_ADDRESS_SIZE, &reg_value, sizeof(reg_value), CS4270_I2C_TIMEOUT_MS);
 80003f4:	4b2b      	ldr	r3, [pc, #172]	; (80004a4 <cs4270_init+0xe8>)
 80003f6:	6818      	ldr	r0, [r3, #0]
 80003f8:	4b2a      	ldr	r3, [pc, #168]	; (80004a4 <cs4270_init+0xe8>)
 80003fa:	791b      	ldrb	r3, [r3, #4]
 80003fc:	b299      	uxth	r1, r3
 80003fe:	2364      	movs	r3, #100	; 0x64
 8000400:	9302      	str	r3, [sp, #8]
 8000402:	2301      	movs	r3, #1
 8000404:	9301      	str	r3, [sp, #4]
 8000406:	f107 030d 	add.w	r3, r7, #13
 800040a:	9300      	str	r3, [sp, #0]
 800040c:	2301      	movs	r3, #1
 800040e:	2204      	movs	r2, #4
 8000410:	f004 fcca 	bl	8004da8 <HAL_I2C_Mem_Write>
 8000414:	4603      	mov	r3, r0
 8000416:	73fb      	strb	r3, [r7, #15]

	/* Configure transition: enable DAC single volume control, enable Soft Ramp and Zero Cross, disable signal inversion, disable de-emphasis */
	reg_value = 0b11100000;
 8000418:	23e0      	movs	r3, #224	; 0xe0
 800041a:	737b      	strb	r3, [r7, #13]
	i2c_status |= HAL_I2C_Mem_Write(ctx.i2c, ctx.address, CS4270_TRANSITION_CTRL_REG, CS4270_ADDRESS_SIZE, &reg_value, sizeof(reg_value), CS4270_I2C_TIMEOUT_MS);
 800041c:	4b21      	ldr	r3, [pc, #132]	; (80004a4 <cs4270_init+0xe8>)
 800041e:	6818      	ldr	r0, [r3, #0]
 8000420:	4b20      	ldr	r3, [pc, #128]	; (80004a4 <cs4270_init+0xe8>)
 8000422:	791b      	ldrb	r3, [r3, #4]
 8000424:	b299      	uxth	r1, r3
 8000426:	2364      	movs	r3, #100	; 0x64
 8000428:	9302      	str	r3, [sp, #8]
 800042a:	2301      	movs	r3, #1
 800042c:	9301      	str	r3, [sp, #4]
 800042e:	f107 030d 	add.w	r3, r7, #13
 8000432:	9300      	str	r3, [sp, #0]
 8000434:	2301      	movs	r3, #1
 8000436:	2205      	movs	r2, #5
 8000438:	f004 fcb6 	bl	8004da8 <HAL_I2C_Mem_Write>
 800043c:	4603      	mov	r3, r0
 800043e:	461a      	mov	r2, r3
 8000440:	7bfb      	ldrb	r3, [r7, #15]
 8000442:	4313      	orrs	r3, r2
 8000444:	73fb      	strb	r3, [r7, #15]

	/* Configure muting: disable Auto-Mute, mute ADC channels, set active low mute signals polarity, disable DAC channels mute */
	reg_value = 0b00011000;
 8000446:	2318      	movs	r3, #24
 8000448:	737b      	strb	r3, [r7, #13]
	i2c_status |= HAL_I2C_Mem_Write(ctx.i2c, ctx.address, CS4270_MUTE_CTRL_REG, CS4270_ADDRESS_SIZE, &reg_value, sizeof(reg_value), CS4270_I2C_TIMEOUT_MS);
 800044a:	4b16      	ldr	r3, [pc, #88]	; (80004a4 <cs4270_init+0xe8>)
 800044c:	6818      	ldr	r0, [r3, #0]
 800044e:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <cs4270_init+0xe8>)
 8000450:	791b      	ldrb	r3, [r3, #4]
 8000452:	b299      	uxth	r1, r3
 8000454:	2364      	movs	r3, #100	; 0x64
 8000456:	9302      	str	r3, [sp, #8]
 8000458:	2301      	movs	r3, #1
 800045a:	9301      	str	r3, [sp, #4]
 800045c:	f107 030d 	add.w	r3, r7, #13
 8000460:	9300      	str	r3, [sp, #0]
 8000462:	2301      	movs	r3, #1
 8000464:	2206      	movs	r2, #6
 8000466:	f004 fc9f 	bl	8004da8 <HAL_I2C_Mem_Write>
 800046a:	4603      	mov	r3, r0
 800046c:	461a      	mov	r2, r3
 800046e:	7bfb      	ldrb	r3, [r7, #15]
 8000470:	4313      	orrs	r3, r2
 8000472:	73fb      	strb	r3, [r7, #15]

	/* Set initial volume */
	status = cs4270_set_attenuation(CS4270_INITIAL_ATTENUATION_DB * CS4270_STEPS_PER_DB);
 8000474:	2030      	movs	r0, #48	; 0x30
 8000476:	f000 f835 	bl	80004e4 <cs4270_set_attenuation>
 800047a:	4603      	mov	r3, r0
 800047c:	73bb      	strb	r3, [r7, #14]
	status &= (i2c_status == HAL_OK);
 800047e:	7bbb      	ldrb	r3, [r7, #14]
 8000480:	7bfa      	ldrb	r2, [r7, #15]
 8000482:	2a00      	cmp	r2, #0
 8000484:	bf0c      	ite	eq
 8000486:	2201      	moveq	r2, #1
 8000488:	2200      	movne	r2, #0
 800048a:	b2d2      	uxtb	r2, r2
 800048c:	4013      	ands	r3, r2
 800048e:	2b00      	cmp	r3, #0
 8000490:	bf14      	ite	ne
 8000492:	2301      	movne	r3, #1
 8000494:	2300      	moveq	r3, #0
 8000496:	73bb      	strb	r3, [r7, #14]

	return status;
 8000498:	7bbb      	ldrb	r3, [r7, #14]
}
 800049a:	4618      	mov	r0, r3
 800049c:	3710      	adds	r7, #16
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	24000098 	.word	0x24000098

080004a8 <cs4270_get_id>:

uint8_t cs4270_get_id(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af04      	add	r7, sp, #16
	uint8_t reg_value = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(ctx.i2c, ctx.address, CS4270_DEVICE_ID_REG, CS4270_ADDRESS_SIZE, &reg_value, sizeof(reg_value), CS4270_I2C_TIMEOUT_MS);
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <cs4270_get_id+0x38>)
 80004b4:	6818      	ldr	r0, [r3, #0]
 80004b6:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <cs4270_get_id+0x38>)
 80004b8:	791b      	ldrb	r3, [r3, #4]
 80004ba:	b299      	uxth	r1, r3
 80004bc:	2364      	movs	r3, #100	; 0x64
 80004be:	9302      	str	r3, [sp, #8]
 80004c0:	2301      	movs	r3, #1
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	1dfb      	adds	r3, r7, #7
 80004c6:	9300      	str	r3, [sp, #0]
 80004c8:	2301      	movs	r3, #1
 80004ca:	2201      	movs	r2, #1
 80004cc:	f004 fd80 	bl	8004fd0 <HAL_I2C_Mem_Read>
	return ((reg_value & CS4270_DEVICE_ID_MASK) >> CS4270_DEVICE_ID_SHIFT);
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	091b      	lsrs	r3, r3, #4
 80004d4:	b2db      	uxtb	r3, r3
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	24000098 	.word	0x24000098

080004e4 <cs4270_set_attenuation>:
	HAL_I2C_Mem_Read(ctx.i2c, ctx.address, CS4270_DEVICE_ID_REG, CS4270_ADDRESS_SIZE, &reg_value, sizeof(reg_value), CS4270_I2C_TIMEOUT_MS);
	return ((reg_value & CS4270_REVISION_MASK) >> CS4270_REVISION_SHIFT);
}

bool cs4270_set_attenuation(uint8_t steps)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af04      	add	r7, sp, #16
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef i2c_status;
	i2c_status = HAL_I2C_Mem_Write(ctx.i2c, ctx.address, CS4270_DAC_CH_A_VOL_REG, CS4270_ADDRESS_SIZE, &steps, sizeof(steps), CS4270_I2C_TIMEOUT_MS);
 80004ee:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <cs4270_set_attenuation+0x40>)
 80004f0:	6818      	ldr	r0, [r3, #0]
 80004f2:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <cs4270_set_attenuation+0x40>)
 80004f4:	791b      	ldrb	r3, [r3, #4]
 80004f6:	b299      	uxth	r1, r3
 80004f8:	2364      	movs	r3, #100	; 0x64
 80004fa:	9302      	str	r3, [sp, #8]
 80004fc:	2301      	movs	r3, #1
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	1dfb      	adds	r3, r7, #7
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	2301      	movs	r3, #1
 8000506:	2207      	movs	r2, #7
 8000508:	f004 fc4e 	bl	8004da8 <HAL_I2C_Mem_Write>
 800050c:	4603      	mov	r3, r0
 800050e:	73fb      	strb	r3, [r7, #15]
	return (i2c_status == HAL_OK);
 8000510:	7bfb      	ldrb	r3, [r7, #15]
 8000512:	2b00      	cmp	r3, #0
 8000514:	bf0c      	ite	eq
 8000516:	2301      	moveq	r3, #1
 8000518:	2300      	movne	r3, #0
 800051a:	b2db      	uxtb	r3, r3
}
 800051c:	4618      	mov	r0, r3
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	24000098 	.word	0x24000098

08000528 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
	...

08000538 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af04      	add	r7, sp, #16
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000546:	9302      	str	r3, [sp, #8]
 8000548:	2301      	movs	r3, #1
 800054a:	9301      	str	r3, [sp, #4]
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	2301      	movs	r3, #1
 8000552:	2200      	movs	r2, #0
 8000554:	2178      	movs	r1, #120	; 0x78
 8000556:	4803      	ldr	r0, [pc, #12]	; (8000564 <ssd1306_WriteCommand+0x2c>)
 8000558:	f004 fc26 	bl	8004da8 <HAL_I2C_Mem_Write>
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	240000a8 	.word	0x240000a8

08000568 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af04      	add	r7, sp, #16
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	b29b      	uxth	r3, r3
 8000576:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800057a:	9202      	str	r2, [sp, #8]
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2301      	movs	r3, #1
 8000584:	2240      	movs	r2, #64	; 0x40
 8000586:	2178      	movs	r1, #120	; 0x78
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <ssd1306_WriteData+0x30>)
 800058a:	f004 fc0d 	bl	8004da8 <HAL_I2C_Mem_Write>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	240000a8 	.word	0x240000a8

0800059c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80005a0:	f7ff ffc2 	bl	8000528 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80005a4:	2064      	movs	r0, #100	; 0x64
 80005a6:	f001 fb63 	bl	8001c70 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80005aa:	2000      	movs	r0, #0
 80005ac:	f000 f9da 	bl	8000964 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80005b0:	2020      	movs	r0, #32
 80005b2:	f7ff ffc1 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80005b6:	2000      	movs	r0, #0
 80005b8:	f7ff ffbe 	bl	8000538 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80005bc:	20b0      	movs	r0, #176	; 0xb0
 80005be:	f7ff ffbb 	bl	8000538 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80005c2:	20c8      	movs	r0, #200	; 0xc8
 80005c4:	f7ff ffb8 	bl	8000538 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80005c8:	2000      	movs	r0, #0
 80005ca:	f7ff ffb5 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80005ce:	2010      	movs	r0, #16
 80005d0:	f7ff ffb2 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80005d4:	2040      	movs	r0, #64	; 0x40
 80005d6:	f7ff ffaf 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80005da:	20ff      	movs	r0, #255	; 0xff
 80005dc:	f000 f9ae 	bl	800093c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80005e0:	20a1      	movs	r0, #161	; 0xa1
 80005e2:	f7ff ffa9 	bl	8000538 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80005e6:	20a6      	movs	r0, #166	; 0xa6
 80005e8:	f7ff ffa6 	bl	8000538 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80005ec:	20a8      	movs	r0, #168	; 0xa8
 80005ee:	f7ff ffa3 	bl	8000538 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 80005f2:	201f      	movs	r0, #31
 80005f4:	f7ff ffa0 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80005f8:	20a4      	movs	r0, #164	; 0xa4
 80005fa:	f7ff ff9d 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80005fe:	20d3      	movs	r0, #211	; 0xd3
 8000600:	f7ff ff9a 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000604:	2000      	movs	r0, #0
 8000606:	f7ff ff97 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800060a:	20d5      	movs	r0, #213	; 0xd5
 800060c:	f7ff ff94 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000610:	20f0      	movs	r0, #240	; 0xf0
 8000612:	f7ff ff91 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000616:	20d9      	movs	r0, #217	; 0xd9
 8000618:	f7ff ff8e 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800061c:	2022      	movs	r0, #34	; 0x22
 800061e:	f7ff ff8b 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000622:	20da      	movs	r0, #218	; 0xda
 8000624:	f7ff ff88 	bl	8000538 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8000628:	2002      	movs	r0, #2
 800062a:	f7ff ff85 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800062e:	20db      	movs	r0, #219	; 0xdb
 8000630:	f7ff ff82 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000634:	2020      	movs	r0, #32
 8000636:	f7ff ff7f 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800063a:	208d      	movs	r0, #141	; 0x8d
 800063c:	f7ff ff7c 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000640:	2014      	movs	r0, #20
 8000642:	f7ff ff79 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000646:	2001      	movs	r0, #1
 8000648:	f000 f98c 	bl	8000964 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800064c:	2000      	movs	r0, #0
 800064e:	f000 f80f 	bl	8000670 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000652:	f000 f831 	bl	80006b8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <ssd1306_Init+0xd0>)
 8000658:	2200      	movs	r2, #0
 800065a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <ssd1306_Init+0xd0>)
 800065e:	2200      	movs	r2, #0
 8000660:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000662:	4b02      	ldr	r3, [pc, #8]	; (800066c <ssd1306_Init+0xd0>)
 8000664:	2201      	movs	r2, #1
 8000666:	711a      	strb	r2, [r3, #4]
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	c0000200 	.word	0xc0000200

08000670 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	e00d      	b.n	800069c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d101      	bne.n	800068a <ssd1306_Fill+0x1a>
 8000686:	2100      	movs	r1, #0
 8000688:	e000      	b.n	800068c <ssd1306_Fill+0x1c>
 800068a:	21ff      	movs	r1, #255	; 0xff
 800068c:	4a09      	ldr	r2, [pc, #36]	; (80006b4 <ssd1306_Fill+0x44>)
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	4413      	add	r3, r2
 8000692:	460a      	mov	r2, r1
 8000694:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	3301      	adds	r3, #1
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006a2:	d3ed      	bcc.n	8000680 <ssd1306_Fill+0x10>
    }
}
 80006a4:	bf00      	nop
 80006a6:	bf00      	nop
 80006a8:	3714      	adds	r7, #20
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	c0000000 	.word	0xc0000000

080006b8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80006be:	2300      	movs	r3, #0
 80006c0:	71fb      	strb	r3, [r7, #7]
 80006c2:	e016      	b.n	80006f2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	3b50      	subs	r3, #80	; 0x50
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff ff34 	bl	8000538 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80006d0:	2000      	movs	r0, #0
 80006d2:	f7ff ff31 	bl	8000538 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80006d6:	2010      	movs	r0, #16
 80006d8:	f7ff ff2e 	bl	8000538 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	01db      	lsls	r3, r3, #7
 80006e0:	4a08      	ldr	r2, [pc, #32]	; (8000704 <ssd1306_UpdateScreen+0x4c>)
 80006e2:	4413      	add	r3, r2
 80006e4:	2180      	movs	r1, #128	; 0x80
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff3e 	bl	8000568 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	3301      	adds	r3, #1
 80006f0:	71fb      	strb	r3, [r7, #7]
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b03      	cmp	r3, #3
 80006f6:	d9e5      	bls.n	80006c4 <ssd1306_UpdateScreen+0xc>
    }
}
 80006f8:	bf00      	nop
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	c0000000 	.word	0xc0000000

08000708 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	460b      	mov	r3, r1
 8000714:	71bb      	strb	r3, [r7, #6]
 8000716:	4613      	mov	r3, r2
 8000718:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	2b00      	cmp	r3, #0
 8000720:	db3d      	blt.n	800079e <ssd1306_DrawPixel+0x96>
 8000722:	79bb      	ldrb	r3, [r7, #6]
 8000724:	2b1f      	cmp	r3, #31
 8000726:	d83a      	bhi.n	800079e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000728:	797b      	ldrb	r3, [r7, #5]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d11a      	bne.n	8000764 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800072e:	79fa      	ldrb	r2, [r7, #7]
 8000730:	79bb      	ldrb	r3, [r7, #6]
 8000732:	08db      	lsrs	r3, r3, #3
 8000734:	b2d8      	uxtb	r0, r3
 8000736:	4603      	mov	r3, r0
 8000738:	01db      	lsls	r3, r3, #7
 800073a:	4413      	add	r3, r2
 800073c:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <ssd1306_DrawPixel+0xa4>)
 800073e:	5cd3      	ldrb	r3, [r2, r3]
 8000740:	b25a      	sxtb	r2, r3
 8000742:	79bb      	ldrb	r3, [r7, #6]
 8000744:	f003 0307 	and.w	r3, r3, #7
 8000748:	2101      	movs	r1, #1
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	b25b      	sxtb	r3, r3
 8000750:	4313      	orrs	r3, r2
 8000752:	b259      	sxtb	r1, r3
 8000754:	79fa      	ldrb	r2, [r7, #7]
 8000756:	4603      	mov	r3, r0
 8000758:	01db      	lsls	r3, r3, #7
 800075a:	4413      	add	r3, r2
 800075c:	b2c9      	uxtb	r1, r1
 800075e:	4a13      	ldr	r2, [pc, #76]	; (80007ac <ssd1306_DrawPixel+0xa4>)
 8000760:	54d1      	strb	r1, [r2, r3]
 8000762:	e01d      	b.n	80007a0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000764:	79fa      	ldrb	r2, [r7, #7]
 8000766:	79bb      	ldrb	r3, [r7, #6]
 8000768:	08db      	lsrs	r3, r3, #3
 800076a:	b2d8      	uxtb	r0, r3
 800076c:	4603      	mov	r3, r0
 800076e:	01db      	lsls	r3, r3, #7
 8000770:	4413      	add	r3, r2
 8000772:	4a0e      	ldr	r2, [pc, #56]	; (80007ac <ssd1306_DrawPixel+0xa4>)
 8000774:	5cd3      	ldrb	r3, [r2, r3]
 8000776:	b25a      	sxtb	r2, r3
 8000778:	79bb      	ldrb	r3, [r7, #6]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	2101      	movs	r1, #1
 8000780:	fa01 f303 	lsl.w	r3, r1, r3
 8000784:	b25b      	sxtb	r3, r3
 8000786:	43db      	mvns	r3, r3
 8000788:	b25b      	sxtb	r3, r3
 800078a:	4013      	ands	r3, r2
 800078c:	b259      	sxtb	r1, r3
 800078e:	79fa      	ldrb	r2, [r7, #7]
 8000790:	4603      	mov	r3, r0
 8000792:	01db      	lsls	r3, r3, #7
 8000794:	4413      	add	r3, r2
 8000796:	b2c9      	uxtb	r1, r1
 8000798:	4a04      	ldr	r2, [pc, #16]	; (80007ac <ssd1306_DrawPixel+0xa4>)
 800079a:	54d1      	strb	r1, [r2, r3]
 800079c:	e000      	b.n	80007a0 <ssd1306_DrawPixel+0x98>
        return;
 800079e:	bf00      	nop
    }
}
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	c0000000 	.word	0xc0000000

080007b0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b089      	sub	sp, #36	; 0x24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4604      	mov	r4, r0
 80007b8:	1d38      	adds	r0, r7, #4
 80007ba:	e880 0006 	stmia.w	r0, {r1, r2}
 80007be:	461a      	mov	r2, r3
 80007c0:	4623      	mov	r3, r4
 80007c2:	73fb      	strb	r3, [r7, #15]
 80007c4:	4613      	mov	r3, r2
 80007c6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	2b1f      	cmp	r3, #31
 80007cc:	d902      	bls.n	80007d4 <ssd1306_WriteChar+0x24>
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	2b7e      	cmp	r3, #126	; 0x7e
 80007d2:	d901      	bls.n	80007d8 <ssd1306_WriteChar+0x28>
        return 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e06d      	b.n	80008b4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80007d8:	4b38      	ldr	r3, [pc, #224]	; (80008bc <ssd1306_WriteChar+0x10c>)
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	793b      	ldrb	r3, [r7, #4]
 80007e0:	4413      	add	r3, r2
 80007e2:	2b80      	cmp	r3, #128	; 0x80
 80007e4:	dc06      	bgt.n	80007f4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80007e6:	4b35      	ldr	r3, [pc, #212]	; (80008bc <ssd1306_WriteChar+0x10c>)
 80007e8:	885b      	ldrh	r3, [r3, #2]
 80007ea:	461a      	mov	r2, r3
 80007ec:	797b      	ldrb	r3, [r7, #5]
 80007ee:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80007f0:	2b20      	cmp	r3, #32
 80007f2:	dd01      	ble.n	80007f8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	e05d      	b.n	80008b4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
 80007fc:	e04c      	b.n	8000898 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80007fe:	68ba      	ldr	r2, [r7, #8]
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	3b20      	subs	r3, #32
 8000804:	7979      	ldrb	r1, [r7, #5]
 8000806:	fb01 f303 	mul.w	r3, r1, r3
 800080a:	4619      	mov	r1, r3
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	440b      	add	r3, r1
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	4413      	add	r3, r2
 8000814:	881b      	ldrh	r3, [r3, #0]
 8000816:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
 800081c:	e034      	b.n	8000888 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800081e:	697a      	ldr	r2, [r7, #20]
 8000820:	69bb      	ldr	r3, [r7, #24]
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
 8000826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800082a:	2b00      	cmp	r3, #0
 800082c:	d012      	beq.n	8000854 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800082e:	4b23      	ldr	r3, [pc, #140]	; (80008bc <ssd1306_WriteChar+0x10c>)
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	b2da      	uxtb	r2, r3
 8000834:	69bb      	ldr	r3, [r7, #24]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4413      	add	r3, r2
 800083a:	b2d8      	uxtb	r0, r3
 800083c:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <ssd1306_WriteChar+0x10c>)
 800083e:	885b      	ldrh	r3, [r3, #2]
 8000840:	b2da      	uxtb	r2, r3
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4413      	add	r3, r2
 8000848:	b2db      	uxtb	r3, r3
 800084a:	7bba      	ldrb	r2, [r7, #14]
 800084c:	4619      	mov	r1, r3
 800084e:	f7ff ff5b 	bl	8000708 <ssd1306_DrawPixel>
 8000852:	e016      	b.n	8000882 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000854:	4b19      	ldr	r3, [pc, #100]	; (80008bc <ssd1306_WriteChar+0x10c>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	b2da      	uxtb	r2, r3
 800085a:	69bb      	ldr	r3, [r7, #24]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4413      	add	r3, r2
 8000860:	b2d8      	uxtb	r0, r3
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <ssd1306_WriteChar+0x10c>)
 8000864:	885b      	ldrh	r3, [r3, #2]
 8000866:	b2da      	uxtb	r2, r3
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	4413      	add	r3, r2
 800086e:	b2d9      	uxtb	r1, r3
 8000870:	7bbb      	ldrb	r3, [r7, #14]
 8000872:	2b00      	cmp	r3, #0
 8000874:	bf0c      	ite	eq
 8000876:	2301      	moveq	r3, #1
 8000878:	2300      	movne	r3, #0
 800087a:	b2db      	uxtb	r3, r3
 800087c:	461a      	mov	r2, r3
 800087e:	f7ff ff43 	bl	8000708 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000882:	69bb      	ldr	r3, [r7, #24]
 8000884:	3301      	adds	r3, #1
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	793b      	ldrb	r3, [r7, #4]
 800088a:	461a      	mov	r2, r3
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	4293      	cmp	r3, r2
 8000890:	d3c5      	bcc.n	800081e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3301      	adds	r3, #1
 8000896:	61fb      	str	r3, [r7, #28]
 8000898:	797b      	ldrb	r3, [r7, #5]
 800089a:	461a      	mov	r2, r3
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	4293      	cmp	r3, r2
 80008a0:	d3ad      	bcc.n	80007fe <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <ssd1306_WriteChar+0x10c>)
 80008a4:	881a      	ldrh	r2, [r3, #0]
 80008a6:	793b      	ldrb	r3, [r7, #4]
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	4413      	add	r3, r2
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	4b03      	ldr	r3, [pc, #12]	; (80008bc <ssd1306_WriteChar+0x10c>)
 80008b0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3724      	adds	r7, #36	; 0x24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd90      	pop	{r4, r7, pc}
 80008bc:	c0000200 	.word	0xc0000200

080008c0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	1d38      	adds	r0, r7, #4
 80008ca:	e880 0006 	stmia.w	r0, {r1, r2}
 80008ce:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80008d0:	e012      	b.n	80008f8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	7818      	ldrb	r0, [r3, #0]
 80008d6:	78fb      	ldrb	r3, [r7, #3]
 80008d8:	1d3a      	adds	r2, r7, #4
 80008da:	ca06      	ldmia	r2, {r1, r2}
 80008dc:	f7ff ff68 	bl	80007b0 <ssd1306_WriteChar>
 80008e0:	4603      	mov	r3, r0
 80008e2:	461a      	mov	r2, r3
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d002      	beq.n	80008f2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	e008      	b.n	8000904 <ssd1306_WriteString+0x44>
        }
        str++;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	3301      	adds	r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d1e8      	bne.n	80008d2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	781b      	ldrb	r3, [r3, #0]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	460a      	mov	r2, r1
 8000916:	71fb      	strb	r3, [r7, #7]
 8000918:	4613      	mov	r3, r2
 800091a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	b29a      	uxth	r2, r3
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <ssd1306_SetCursor+0x2c>)
 8000922:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000924:	79bb      	ldrb	r3, [r7, #6]
 8000926:	b29a      	uxth	r2, r3
 8000928:	4b03      	ldr	r3, [pc, #12]	; (8000938 <ssd1306_SetCursor+0x2c>)
 800092a:	805a      	strh	r2, [r3, #2]
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	c0000200 	.word	0xc0000200

0800093c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000946:	2381      	movs	r3, #129	; 0x81
 8000948:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fdf3 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fdef 	bl	8000538 <ssd1306_WriteCommand>
}
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d005      	beq.n	8000980 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000974:	23af      	movs	r3, #175	; 0xaf
 8000976:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <ssd1306_SetDisplayOn+0x38>)
 800097a:	2201      	movs	r2, #1
 800097c:	715a      	strb	r2, [r3, #5]
 800097e:	e004      	b.n	800098a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000980:	23ae      	movs	r3, #174	; 0xae
 8000982:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <ssd1306_SetDisplayOn+0x38>)
 8000986:	2200      	movs	r2, #0
 8000988:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fdd3 	bl	8000538 <ssd1306_WriteCommand>
}
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	c0000200 	.word	0xc0000200

080009a0 <tca9548_write>:
};

static struct tca9548a_ctx_t ctx = {0};

static bool tca9548_write()
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af02      	add	r7, sp, #8
	return (HAL_I2C_Master_Transmit(ctx.i2c, ctx.address, &ctx.ctrl_reg_shadow, sizeof(ctx.ctrl_reg_shadow), TCA9548A_I2C_TIMEOUT_MS) == HAL_OK);
 80009a6:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <tca9548_write+0x30>)
 80009a8:	6818      	ldr	r0, [r3, #0]
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <tca9548_write+0x30>)
 80009ac:	791b      	ldrb	r3, [r3, #4]
 80009ae:	b299      	uxth	r1, r3
 80009b0:	2364      	movs	r3, #100	; 0x64
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	2301      	movs	r3, #1
 80009b6:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <tca9548_write+0x34>)
 80009b8:	f004 f902 	bl	8004bc0 <HAL_I2C_Master_Transmit>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	bf0c      	ite	eq
 80009c2:	2301      	moveq	r3, #1
 80009c4:	2300      	movne	r3, #0
 80009c6:	b2db      	uxtb	r3, r3
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	240000a0 	.word	0x240000a0
 80009d4:	240000a5 	.word	0x240000a5

080009d8 <tca9548a_reset>:

void tca9548a_reset(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	/* Reset the chip */
	HAL_GPIO_WritePin(TCA9548A_NRESET_GPIO, TCA9548A_NRESET_PIN, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2120      	movs	r1, #32
 80009e0:	4809      	ldr	r0, [pc, #36]	; (8000a08 <tca9548a_reset+0x30>)
 80009e2:	f004 f843 	bl	8004a6c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009e6:	2001      	movs	r0, #1
 80009e8:	f001 f942 	bl	8001c70 <HAL_Delay>
	HAL_GPIO_WritePin(TCA9548A_NRESET_GPIO, TCA9548A_NRESET_PIN, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2120      	movs	r1, #32
 80009f0:	4805      	ldr	r0, [pc, #20]	; (8000a08 <tca9548a_reset+0x30>)
 80009f2:	f004 f83b 	bl	8004a6c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009f6:	2001      	movs	r0, #1
 80009f8:	f001 f93a 	bl	8001c70 <HAL_Delay>

	/* Update control register shadow with initial value */
	ctx.ctrl_reg_shadow = 0;
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <tca9548a_reset+0x34>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	715a      	strb	r2, [r3, #5]
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	58020400 	.word	0x58020400
 8000a0c:	240000a0 	.word	0x240000a0

08000a10 <tca9548a_init>:

bool tca9548a_init(I2C_HandleTypeDef *hi2c1, uint8_t address)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	460b      	mov	r3, r1
 8000a1a:	70fb      	strb	r3, [r7, #3]
	ctx.i2c = hi2c1;
 8000a1c:	4a09      	ldr	r2, [pc, #36]	; (8000a44 <tca9548a_init+0x34>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6013      	str	r3, [r2, #0]
	ctx.address = ((TCA9548A_FIXED_ADDRESS | address) << 1);
 8000a22:	78fb      	ldrb	r3, [r7, #3]
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	f063 031f 	orn	r3, r3, #31
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <tca9548a_init+0x34>)
 8000a30:	711a      	strb	r2, [r3, #4]
	tca9548a_reset();
 8000a32:	f7ff ffd1 	bl	80009d8 <tca9548a_reset>
	return tca9548a_close_all();
 8000a36:	f000 f821 	bl	8000a7c <tca9548a_close_all>
 8000a3a:	4603      	mov	r3, r0
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	240000a0 	.word	0x240000a0

08000a48 <tca9548a_switch_to>:

	return tca9548_write();
}

bool tca9548a_switch_to(uint8_t channel)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
	if (channel >= TCA9548A_CHANNELS_NUM) {
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	2b07      	cmp	r3, #7
 8000a56:	d901      	bls.n	8000a5c <tca9548a_switch_to+0x14>
		return false;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	e009      	b.n	8000a70 <tca9548a_switch_to+0x28>
	}

	ctx.ctrl_reg_shadow = (uint8_t)(1 << channel);
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	2201      	movs	r2, #1
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <tca9548a_switch_to+0x30>)
 8000a68:	715a      	strb	r2, [r3, #5]

	return tca9548_write();
 8000a6a:	f7ff ff99 	bl	80009a0 <tca9548_write>
 8000a6e:	4603      	mov	r3, r0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	240000a0 	.word	0x240000a0

08000a7c <tca9548a_close_all>:
	ctx.ctrl_reg_shadow = TCA9548A_ENABLE_ALL;
	return tca9548_write();
}

bool tca9548a_close_all(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	ctx.ctrl_reg_shadow = TCA9548A_DISABLE_ALL;
 8000a80:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <tca9548a_close_all+0x14>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	715a      	strb	r2, [r3, #5]
	return tca9548_write();
 8000a86:	f7ff ff8b 	bl	80009a0 <tca9548_write>
 8000a8a:	4603      	mov	r3, r0
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	240000a0 	.word	0x240000a0

08000a94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9c:	f001 f856 	bl	8001b4c <HAL_Init>
  /* USER CODE BEGIN Init */
  // TODO setup MPU and caches
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa0:	f000 f918 	bl	8000cd4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000aa4:	f000 f99e 	bl	8000de4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa8:	f000 fb36 	bl	8001118 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aac:	f000 fa5e 	bl	8000f6c <MX_DMA_Init>
  MX_MDMA_Init();
 8000ab0:	f000 fa7c 	bl	8000fac <MX_MDMA_Init>
  MX_I2S1_Init();
 8000ab4:	f000 fa08 	bl	8000ec8 <MX_I2S1_Init>
  MX_SDMMC1_SD_Init();
 8000ab8:	f000 fa3a 	bl	8000f30 <MX_SDMMC1_SD_Init>
  MX_I2C1_Init();
 8000abc:	f000 f9c4 	bl	8000e48 <MX_I2C1_Init>
  MX_FMC_Init();
 8000ac0:	f000 fad8 	bl	8001074 <MX_FMC_Init>
  MX_FATFS_Init();
 8000ac4:	f00b fcb6 	bl	800c434 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  tca9548a_init(&hi2c1, 0);
 8000ac8:	2100      	movs	r1, #0
 8000aca:	486b      	ldr	r0, [pc, #428]	; (8000c78 <main+0x1e4>)
 8000acc:	f7ff ffa0 	bl	8000a10 <tca9548a_init>
  tca9548a_switch_to(1);
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f7ff ffb9 	bl	8000a48 <tca9548a_switch_to>
  ssd1306_Init();
 8000ad6:	f7ff fd61 	bl	800059c <ssd1306_Init>
  logger_init();
 8000ada:	f00b fefb 	bl	800c8d4 <logger_init>

  bool codec_ret = cs4270_init(&hi2c1, 0);
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4865      	ldr	r0, [pc, #404]	; (8000c78 <main+0x1e4>)
 8000ae2:	f7ff fc6b 	bl	80003bc <cs4270_init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247

  cs4270_set_attenuation(24);
 8000aec:	2018      	movs	r0, #24
 8000aee:	f7ff fcf9 	bl	80004e4 <cs4270_set_attenuation>

  logger_log("Codec %s", codec_ret ? "OK" : "fail");
 8000af2:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <main+0x6a>
 8000afa:	4b60      	ldr	r3, [pc, #384]	; (8000c7c <main+0x1e8>)
 8000afc:	e000      	b.n	8000b00 <main+0x6c>
 8000afe:	4b60      	ldr	r3, [pc, #384]	; (8000c80 <main+0x1ec>)
 8000b00:	4619      	mov	r1, r3
 8000b02:	4860      	ldr	r0, [pc, #384]	; (8000c84 <main+0x1f0>)
 8000b04:	f00b fef2 	bl	800c8ec <logger_log>

  const char *const mount_point = "";
 8000b08:	4b5f      	ldr	r3, [pc, #380]	; (8000c88 <main+0x1f4>)
 8000b0a:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
  const char *const file_path = "01. A Gallant Gentleman.wav";
 8000b0e:	4b5f      	ldr	r3, [pc, #380]	; (8000c8c <main+0x1f8>)
 8000b10:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

  FRESULT ret;
  FIL f;

  logger_log("Mounting SD card...");
 8000b14:	485e      	ldr	r0, [pc, #376]	; (8000c90 <main+0x1fc>)
 8000b16:	f00b fee9 	bl	800c8ec <logger_log>

  ret = f_mount(&fatfs, mount_point, 1);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8000b20:	485c      	ldr	r0, [pc, #368]	; (8000c94 <main+0x200>)
 8000b22:	f00e f8cb 	bl	800ecbc <f_mount>
 8000b26:	4603      	mov	r3, r0
 8000b28:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
  if (ret) {
 8000b2c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <main+0xa8>
	  logger_log("Failed");
 8000b34:	4858      	ldr	r0, [pc, #352]	; (8000c98 <main+0x204>)
 8000b36:	f00b fed9 	bl	800c8ec <logger_log>
	  while(1);
 8000b3a:	e7fe      	b.n	8000b3a <main+0xa6>
  }

  logger_log("Opening %s...", file_path);
 8000b3c:	f8d7 123c 	ldr.w	r1, [r7, #572]	; 0x23c
 8000b40:	4856      	ldr	r0, [pc, #344]	; (8000c9c <main+0x208>)
 8000b42:	f00b fed3 	bl	800c8ec <logger_log>
  ret = f_open(&f, file_path, FA_READ);
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f8d7 123c 	ldr.w	r1, [r7, #572]	; 0x23c
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f00e f8fa 	bl	800ed48 <f_open>
 8000b54:	4603      	mov	r3, r0
 8000b56:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
  if (ret) {
 8000b5a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d003      	beq.n	8000b6a <main+0xd6>
	  logger_log("Failed");
 8000b62:	484d      	ldr	r0, [pc, #308]	; (8000c98 <main+0x204>)
 8000b64:	f00b fec2 	bl	800c8ec <logger_log>
	  while(1);
 8000b68:	e7fe      	b.n	8000b68 <main+0xd4>
  }

  logger_log("Reading file...");
 8000b6a:	484d      	ldr	r0, [pc, #308]	; (8000ca0 <main+0x20c>)
 8000b6c:	f00b febe 	bl	800c8ec <logger_log>
  const size_t file_size = f_size(&f);
 8000b70:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8000b74:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000b78:	68db      	ldr	r3, [r3, #12]
 8000b7a:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
  logger_log("File size: %uB", file_size);
 8000b7e:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 8000b82:	4848      	ldr	r0, [pc, #288]	; (8000ca4 <main+0x210>)
 8000b84:	f00b feb2 	bl	800c8ec <logger_log>
//	  seek_val++;
//  }
//
//  f_lseek(&f, seek_val);

  logger_log("Filling buffer...");
 8000b88:	4847      	ldr	r0, [pc, #284]	; (8000ca8 <main+0x214>)
 8000b8a:	f00b feaf 	bl	800c8ec <logger_log>
  size_t bytes_read;
  ret = f_read(&f, audio_buffer, 2 * 16384 * sizeof(audio_buffer[0]), &bytes_read);
 8000b8e:	463b      	mov	r3, r7
 8000b90:	1d38      	adds	r0, r7, #4
 8000b92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b96:	4945      	ldr	r1, [pc, #276]	; (8000cac <main+0x218>)
 8000b98:	f00e fa94 	bl	800f0c4 <f_read>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
  if (ret) {
 8000ba2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d003      	beq.n	8000bb2 <main+0x11e>
  	  logger_log("Failed");
 8000baa:	483b      	ldr	r0, [pc, #236]	; (8000c98 <main+0x204>)
 8000bac:	f00b fe9e 	bl	800c8ec <logger_log>
  	  while(1);
 8000bb0:	e7fe      	b.n	8000bb0 <main+0x11c>
  }

  HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t *)audio_buffer, sizeof(audio_buffer)/sizeof(audio_buffer[0]));
 8000bb2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bb6:	493d      	ldr	r1, [pc, #244]	; (8000cac <main+0x218>)
 8000bb8:	483d      	ldr	r0, [pc, #244]	; (8000cb0 <main+0x21c>)
 8000bba:	f004 ff95 	bl	8005ae8 <HAL_I2S_Transmit_DMA>

  logger_log("Playing");
 8000bbe:	483d      	ldr	r0, [pc, #244]	; (8000cb4 <main+0x220>)
 8000bc0:	f00b fe94 	bl	800c8ec <logger_log>

  while (1) {
	  if (first_half) {
 8000bc4:	4b3c      	ldr	r3, [pc, #240]	; (8000cb8 <main+0x224>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d009      	beq.n	8000be2 <main+0x14e>
		  first_half = false;
 8000bce:	4b3a      	ldr	r3, [pc, #232]	; (8000cb8 <main+0x224>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
		  f_read(&f, audio_buffer, 16384 * sizeof(audio_buffer[0]), &bytes_read);
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	1d38      	adds	r0, r7, #4
 8000bd8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bdc:	4933      	ldr	r1, [pc, #204]	; (8000cac <main+0x218>)
 8000bde:	f00e fa71 	bl	800f0c4 <f_read>
	  }

	  if (second_half) {
 8000be2:	4b36      	ldr	r3, [pc, #216]	; (8000cbc <main+0x228>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d009      	beq.n	8000c00 <main+0x16c>
		  second_half = false;
 8000bec:	4b33      	ldr	r3, [pc, #204]	; (8000cbc <main+0x228>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
		  f_read(&f, &audio_buffer[16384], 16384 * sizeof(audio_buffer[0]), &bytes_read);
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	1d38      	adds	r0, r7, #4
 8000bf6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bfa:	4931      	ldr	r1, [pc, #196]	; (8000cc0 <main+0x22c>)
 8000bfc:	f00e fa62 	bl	800f0c4 <f_read>
	  }

	  if (bytes_read == 0) {
 8000c00:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8000c04:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d000      	beq.n	8000c10 <main+0x17c>
	  if (first_half) {
 8000c0e:	e7d9      	b.n	8000bc4 <main+0x130>
		  break;
 8000c10:	bf00      	nop
	  }
  }

  HAL_I2S_DMAStop(&hi2s1);
 8000c12:	4827      	ldr	r0, [pc, #156]	; (8000cb0 <main+0x21c>)
 8000c14:	f005 f80a 	bl	8005c2c <HAL_I2S_DMAStop>
  logger_log("Playback done");
 8000c18:	482a      	ldr	r0, [pc, #168]	; (8000cc4 <main+0x230>)
 8000c1a:	f00b fe67 	bl	800c8ec <logger_log>

  logger_log("Closing %s...", file_path);
 8000c1e:	f8d7 123c 	ldr.w	r1, [r7, #572]	; 0x23c
 8000c22:	4829      	ldr	r0, [pc, #164]	; (8000cc8 <main+0x234>)
 8000c24:	f00b fe62 	bl	800c8ec <logger_log>
  ret = f_close(&f);
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f00e fc07 	bl	800f43e <f_close>
 8000c30:	4603      	mov	r3, r0
 8000c32:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
  if (ret) {
 8000c36:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d003      	beq.n	8000c46 <main+0x1b2>
      logger_log("Failed");
 8000c3e:	4816      	ldr	r0, [pc, #88]	; (8000c98 <main+0x204>)
 8000c40:	f00b fe54 	bl	800c8ec <logger_log>
      while(1);
 8000c44:	e7fe      	b.n	8000c44 <main+0x1b0>
  }

  logger_log("Unmounting SD card...");
 8000c46:	4821      	ldr	r0, [pc, #132]	; (8000ccc <main+0x238>)
 8000c48:	f00b fe50 	bl	800c8ec <logger_log>
  ret = f_mount(0, mount_point, 0);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8000c52:	2000      	movs	r0, #0
 8000c54:	f00e f832 	bl	800ecbc <f_mount>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
  if (ret) {
 8000c5e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d003      	beq.n	8000c6e <main+0x1da>
      logger_log("Failed");
 8000c66:	480c      	ldr	r0, [pc, #48]	; (8000c98 <main+0x204>)
 8000c68:	f00b fe40 	bl	800c8ec <logger_log>
      while(1);
 8000c6c:	e7fe      	b.n	8000c6c <main+0x1d8>
  }

  logger_log("Success!");
 8000c6e:	4818      	ldr	r0, [pc, #96]	; (8000cd0 <main+0x23c>)
 8000c70:	f00b fe3c 	bl	800c8ec <logger_log>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <main+0x1e0>
 8000c76:	bf00      	nop
 8000c78:	240000a8 	.word	0x240000a8
 8000c7c:	080100cc 	.word	0x080100cc
 8000c80:	080100d0 	.word	0x080100d0
 8000c84:	080100d8 	.word	0x080100d8
 8000c88:	080100e4 	.word	0x080100e4
 8000c8c:	080100e8 	.word	0x080100e8
 8000c90:	08010104 	.word	0x08010104
 8000c94:	c0000208 	.word	0xc0000208
 8000c98:	08010118 	.word	0x08010118
 8000c9c:	08010120 	.word	0x08010120
 8000ca0:	08010130 	.word	0x08010130
 8000ca4:	08010140 	.word	0x08010140
 8000ca8:	08010150 	.word	0x08010150
 8000cac:	c000043c 	.word	0xc000043c
 8000cb0:	240000fc 	.word	0x240000fc
 8000cb4:	08010164 	.word	0x08010164
 8000cb8:	240002e4 	.word	0x240002e4
 8000cbc:	240002e5 	.word	0x240002e5
 8000cc0:	c000843c 	.word	0xc000843c
 8000cc4:	0801016c 	.word	0x0801016c
 8000cc8:	0801017c 	.word	0x0801017c
 8000ccc:	0801018c 	.word	0x0801018c
 8000cd0:	080101a4 	.word	0x080101a4

08000cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b09c      	sub	sp, #112	; 0x70
 8000cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cde:	224c      	movs	r2, #76	; 0x4c
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f00e fd4a 	bl	800f77c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	2220      	movs	r2, #32
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f00e fd44 	bl	800f77c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cf4:	2002      	movs	r0, #2
 8000cf6:	f005 fad1 	bl	800629c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	4b36      	ldr	r3, [pc, #216]	; (8000dd8 <SystemClock_Config+0x104>)
 8000d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d02:	4a35      	ldr	r2, [pc, #212]	; (8000dd8 <SystemClock_Config+0x104>)
 8000d04:	f023 0301 	bic.w	r3, r3, #1
 8000d08:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d0a:	4b33      	ldr	r3, [pc, #204]	; (8000dd8 <SystemClock_Config+0x104>)
 8000d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	4b31      	ldr	r3, [pc, #196]	; (8000ddc <SystemClock_Config+0x108>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d1c:	4a2f      	ldr	r2, [pc, #188]	; (8000ddc <SystemClock_Config+0x108>)
 8000d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b2d      	ldr	r3, [pc, #180]	; (8000ddc <SystemClock_Config+0x108>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d30:	bf00      	nop
 8000d32:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <SystemClock_Config+0x108>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d3e:	d1f8      	bne.n	8000d32 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000d40:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <SystemClock_Config+0x10c>)
 8000d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d44:	f023 0303 	bic.w	r3, r3, #3
 8000d48:	4a25      	ldr	r2, [pc, #148]	; (8000de0 <SystemClock_Config+0x10c>)
 8000d4a:	f043 0302 	orr.w	r3, r3, #2
 8000d4e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d50:	2301      	movs	r3, #1
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d62:	2301      	movs	r3, #1
 8000d64:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 23;
 8000d66:	2317      	movs	r3, #23
 8000d68:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8000d6e:	230c      	movs	r3, #12
 8000d70:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d72:	2302      	movs	r3, #2
 8000d74:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d76:	230c      	movs	r3, #12
 8000d78:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3584;
 8000d7e:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000d82:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f005 fac1 	bl	8006310 <HAL_RCC_OscConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d94:	f000 fb1c 	bl	80013d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d98:	233f      	movs	r3, #63	; 0x3f
 8000d9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000da4:	2308      	movs	r3, #8
 8000da6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000da8:	2340      	movs	r3, #64	; 0x40
 8000daa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000dac:	2340      	movs	r3, #64	; 0x40
 8000dae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000db4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000db6:	2340      	movs	r3, #64	; 0x40
 8000db8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f005 ff00 	bl	8006bc4 <HAL_RCC_ClockConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000dca:	f000 fb01 	bl	80013d0 <Error_Handler>
  }
}
 8000dce:	bf00      	nop
 8000dd0:	3770      	adds	r7, #112	; 0x70
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	58000400 	.word	0x58000400
 8000ddc:	58024800 	.word	0x58024800
 8000de0:	58024400 	.word	0x58024400

08000de4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b0b0      	sub	sp, #192	; 0xc0
 8000de8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dea:	463b      	mov	r3, r7
 8000dec:	22c0      	movs	r2, #192	; 0xc0
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f00e fcc3 	bl	800f77c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SPI1;
 8000df6:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <PeriphCommonClock_Config+0x60>)
 8000df8:	f04f 0300 	mov.w	r3, #0
 8000dfc:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000e00:	2301      	movs	r3, #1
 8000e02:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000e04:	2310      	movs	r3, #16
 8000e06:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000e08:	2304      	movs	r3, #4
 8000e0a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000e10:	2301      	movs	r3, #1
 8000e12:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000e14:	23c0      	movs	r3, #192	; 0xc0
 8000e16:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8000e20:	2302      	movs	r3, #2
 8000e22:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000e24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e28:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f006 fa3f 	bl	80072b0 <HAL_RCCEx_PeriphCLKConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000e38:	f000 faca 	bl	80013d0 <Error_Handler>
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	37c0      	adds	r7, #192	; 0xc0
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	01001000 	.word	0x01001000

08000e48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e4e:	4a1c      	ldr	r2, [pc, #112]	; (8000ec0 <MX_I2C1_Init+0x78>)
 8000e50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301739;
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e54:	4a1b      	ldr	r2, [pc, #108]	; (8000ec4 <MX_I2C1_Init+0x7c>)
 8000e56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e58:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e5e:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e64:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e82:	480e      	ldr	r0, [pc, #56]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e84:	f003 fe0c 	bl	8004aa0 <HAL_I2C_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e8e:	f000 fa9f 	bl	80013d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e92:	2100      	movs	r1, #0
 8000e94:	4809      	ldr	r0, [pc, #36]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000e96:	f004 fc6d 	bl	8005774 <HAL_I2CEx_ConfigAnalogFilter>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ea0:	f000 fa96 	bl	80013d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_I2C1_Init+0x74>)
 8000ea8:	f004 fcaf 	bl	800580a <HAL_I2CEx_ConfigDigitalFilter>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000eb2:	f000 fa8d 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	240000a8 	.word	0x240000a8
 8000ec0:	40005400 	.word	0x40005400
 8000ec4:	00301739 	.word	0x00301739

08000ec8 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <MX_I2S1_Init+0x60>)
 8000ece:	4a17      	ldr	r2, [pc, #92]	; (8000f2c <MX_I2S1_Init+0x64>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <MX_I2S1_Init+0x60>)
 8000ed4:	220a      	movs	r2, #10
 8000ed6:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <MX_I2S1_Init+0x60>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ede:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <MX_I2S1_Init+0x60>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000ee4:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <MX_I2S1_Init+0x60>)
 8000ee6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000eea:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_I2S1_Init+0x60>)
 8000eee:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000ef2:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_I2S1_Init+0x60>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <MX_I2S1_Init+0x60>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_I2S1_Init+0x60>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <MX_I2S1_Init+0x60>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_I2S1_Init+0x60>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_I2S1_Init+0x60>)
 8000f14:	f004 fcc6 	bl	80058a4 <HAL_I2S_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_I2S1_Init+0x5a>
  {
    Error_Handler();
 8000f1e:	f000 fa57 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	240000fc 	.word	0x240000fc
 8000f2c:	40013000 	.word	0x40013000

08000f30 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <MX_SDMMC1_SD_Init+0x34>)
 8000f36:	4a0c      	ldr	r2, [pc, #48]	; (8000f68 <MX_SDMMC1_SD_Init+0x38>)
 8000f38:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <MX_SDMMC1_SD_Init+0x34>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <MX_SDMMC1_SD_Init+0x34>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000f46:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <MX_SDMMC1_SD_Init+0x34>)
 8000f48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f4c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000f4e:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <MX_SDMMC1_SD_Init+0x34>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <MX_SDMMC1_SD_Init+0x34>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	240001c8 	.word	0x240001c8
 8000f68:	52007000 	.word	0x52007000

08000f6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f72:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <MX_DMA_Init+0x3c>)
 8000f74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f78:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <MX_DMA_Init+0x3c>)
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_DMA_Init+0x3c>)
 8000f84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2100      	movs	r1, #0
 8000f94:	200b      	movs	r0, #11
 8000f96:	f000 ff76 	bl	8001e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f9a:	200b      	movs	r0, #11
 8000f9c:	f000 ff8d 	bl	8001eba <HAL_NVIC_EnableIRQ>

}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	58024400 	.word	0x58024400

08000fac <MX_MDMA_Init>:
  * Enable MDMA controller clock
  * Configure MDMA for global transfers
  *   hmdma_mdma_channel40_sdmmc1_end_data_0
  */
static void MX_MDMA_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000fb2:	4b2d      	ldr	r3, [pc, #180]	; (8001068 <MX_MDMA_Init+0xbc>)
 8000fb4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000fb8:	4a2b      	ldr	r2, [pc, #172]	; (8001068 <MX_MDMA_Init+0xbc>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000fc2:	4b29      	ldr	r3, [pc, #164]	; (8001068 <MX_MDMA_Init+0xbc>)
 8000fc4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel40_sdmmc1_end_data_0 on MDMA_Channel0 */
  hmdma_mdma_channel40_sdmmc1_end_data_0.Instance = MDMA_Channel0;
 8000fd0:	4b26      	ldr	r3, [pc, #152]	; (800106c <MX_MDMA_Init+0xc0>)
 8000fd2:	4a27      	ldr	r2, [pc, #156]	; (8001070 <MX_MDMA_Init+0xc4>)
 8000fd4:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Request = MDMA_REQUEST_SDMMC1_END_DATA;
 8000fd6:	4b25      	ldr	r3, [pc, #148]	; (800106c <MX_MDMA_Init+0xc0>)
 8000fd8:	221d      	movs	r2, #29
 8000fda:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8000fdc:	4b23      	ldr	r3, [pc, #140]	; (800106c <MX_MDMA_Init+0xc0>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Priority = MDMA_PRIORITY_LOW;
 8000fe2:	4b22      	ldr	r3, [pc, #136]	; (800106c <MX_MDMA_Init+0xc0>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000fe8:	4b20      	ldr	r3, [pc, #128]	; (800106c <MX_MDMA_Init+0xc0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8000fee:	4b1f      	ldr	r3, [pc, #124]	; (800106c <MX_MDMA_Init+0xc0>)
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	; (800106c <MX_MDMA_Init+0xc0>)
 8000ff6:	2208      	movs	r2, #8
 8000ff8:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	; (800106c <MX_MDMA_Init+0xc0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8001000:	4b1a      	ldr	r3, [pc, #104]	; (800106c <MX_MDMA_Init+0xc0>)
 8001002:	2200      	movs	r2, #0
 8001004:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <MX_MDMA_Init+0xc0>)
 8001008:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800100c:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.BufferTransferLength = 1;
 800100e:	4b17      	ldr	r3, [pc, #92]	; (800106c <MX_MDMA_Init+0xc0>)
 8001010:	2201      	movs	r2, #1
 8001012:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <MX_MDMA_Init+0xc0>)
 8001016:	2200      	movs	r2, #0
 8001018:	62da      	str	r2, [r3, #44]	; 0x2c
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 800101a:	4b14      	ldr	r3, [pc, #80]	; (800106c <MX_MDMA_Init+0xc0>)
 800101c:	2200      	movs	r2, #0
 800101e:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBlockAddressOffset = 0;
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <MX_MDMA_Init+0xc0>)
 8001022:	2200      	movs	r2, #0
 8001024:	635a      	str	r2, [r3, #52]	; 0x34
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBlockAddressOffset = 0;
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <MX_MDMA_Init+0xc0>)
 8001028:	2200      	movs	r2, #0
 800102a:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel40_sdmmc1_end_data_0) != HAL_OK)
 800102c:	480f      	ldr	r0, [pc, #60]	; (800106c <MX_MDMA_Init+0xc0>)
 800102e:	f004 feab 	bl	8005d88 <HAL_MDMA_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_MDMA_Init+0x90>
  {
    Error_Handler();
 8001038:	f000 f9ca 	bl	80013d0 <Error_Handler>
  }

  /* Configure post request address and data masks */
  if (HAL_MDMA_ConfigPostRequestMask(&hmdma_mdma_channel40_sdmmc1_end_data_0, 0, 0) != HAL_OK)
 800103c:	2200      	movs	r2, #0
 800103e:	2100      	movs	r1, #0
 8001040:	480a      	ldr	r0, [pc, #40]	; (800106c <MX_MDMA_Init+0xc0>)
 8001042:	f004 feed 	bl	8005e20 <HAL_MDMA_ConfigPostRequestMask>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_MDMA_Init+0xa4>
  {
    Error_Handler();
 800104c:	f000 f9c0 	bl	80013d0 <Error_Handler>
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2100      	movs	r1, #0
 8001054:	207a      	movs	r0, #122	; 0x7a
 8001056:	f000 ff16 	bl	8001e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 800105a:	207a      	movs	r0, #122	; 0x7a
 800105c:	f000 ff2d 	bl	8001eba <HAL_NVIC_EnableIRQ>

}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	58024400 	.word	0x58024400
 800106c:	24000244 	.word	0x24000244
 8001070:	52000040 	.word	0x52000040

08001074 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
 8001088:	615a      	str	r2, [r3, #20]
 800108a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800108c:	4b20      	ldr	r3, [pc, #128]	; (8001110 <MX_FMC_Init+0x9c>)
 800108e:	4a21      	ldr	r2, [pc, #132]	; (8001114 <MX_FMC_Init+0xa0>)
 8001090:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001092:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <MX_FMC_Init+0x9c>)
 8001094:	2200      	movs	r2, #0
 8001096:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8001098:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <MX_FMC_Init+0x9c>)
 800109a:	2201      	movs	r2, #1
 800109c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800109e:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <MX_FMC_Init+0x9c>)
 80010a0:	2208      	movs	r2, #8
 80010a2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80010a4:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <MX_FMC_Init+0x9c>)
 80010a6:	2210      	movs	r2, #16
 80010a8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80010aa:	4b19      	ldr	r3, [pc, #100]	; (8001110 <MX_FMC_Init+0x9c>)
 80010ac:	2240      	movs	r2, #64	; 0x40
 80010ae:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 80010b0:	4b17      	ldr	r3, [pc, #92]	; (8001110 <MX_FMC_Init+0x9c>)
 80010b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010b6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <MX_FMC_Init+0x9c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80010be:	4b14      	ldr	r3, [pc, #80]	; (8001110 <MX_FMC_Init+0x9c>)
 80010c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010c4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <MX_FMC_Init+0x9c>)
 80010c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010cc:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <MX_FMC_Init+0x9c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80010d8:	2307      	movs	r3, #7
 80010da:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 5;
 80010dc:	2305      	movs	r3, #5
 80010de:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 80010e0:	2306      	movs	r3, #6
 80010e2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80010e4:	2303      	movs	r3, #3
 80010e6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	4619      	mov	r1, r3
 80010f4:	4806      	ldr	r0, [pc, #24]	; (8001110 <MX_FMC_Init+0x9c>)
 80010f6:	f00a fa37 	bl	800b568 <HAL_SDRAM_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001100:	f000 f966 	bl	80013d0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  SDRAM_Init();
 8001104:	f000 f8ca 	bl	800129c <SDRAM_Init>
  /* USER CODE END FMC_Init 2 */
}
 8001108:	bf00      	nop
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	240002b0 	.word	0x240002b0
 8001114:	52004140 	.word	0x52004140

08001118 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08e      	sub	sp, #56	; 0x38
 800111c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800112e:	4b57      	ldr	r3, [pc, #348]	; (800128c <MX_GPIO_Init+0x174>)
 8001130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001134:	4a55      	ldr	r2, [pc, #340]	; (800128c <MX_GPIO_Init+0x174>)
 8001136:	f043 0320 	orr.w	r3, r3, #32
 800113a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800113e:	4b53      	ldr	r3, [pc, #332]	; (800128c <MX_GPIO_Init+0x174>)
 8001140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001144:	f003 0320 	and.w	r3, r3, #32
 8001148:	623b      	str	r3, [r7, #32]
 800114a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114c:	4b4f      	ldr	r3, [pc, #316]	; (800128c <MX_GPIO_Init+0x174>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001152:	4a4e      	ldr	r2, [pc, #312]	; (800128c <MX_GPIO_Init+0x174>)
 8001154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001158:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800115c:	4b4b      	ldr	r3, [pc, #300]	; (800128c <MX_GPIO_Init+0x174>)
 800115e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001166:	61fb      	str	r3, [r7, #28]
 8001168:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	4b48      	ldr	r3, [pc, #288]	; (800128c <MX_GPIO_Init+0x174>)
 800116c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001170:	4a46      	ldr	r2, [pc, #280]	; (800128c <MX_GPIO_Init+0x174>)
 8001172:	f043 0304 	orr.w	r3, r3, #4
 8001176:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800117a:	4b44      	ldr	r3, [pc, #272]	; (800128c <MX_GPIO_Init+0x174>)
 800117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	61bb      	str	r3, [r7, #24]
 8001186:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001188:	4b40      	ldr	r3, [pc, #256]	; (800128c <MX_GPIO_Init+0x174>)
 800118a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118e:	4a3f      	ldr	r2, [pc, #252]	; (800128c <MX_GPIO_Init+0x174>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001198:	4b3c      	ldr	r3, [pc, #240]	; (800128c <MX_GPIO_Init+0x174>)
 800119a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011a6:	4b39      	ldr	r3, [pc, #228]	; (800128c <MX_GPIO_Init+0x174>)
 80011a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ac:	4a37      	ldr	r2, [pc, #220]	; (800128c <MX_GPIO_Init+0x174>)
 80011ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b6:	4b35      	ldr	r3, [pc, #212]	; (800128c <MX_GPIO_Init+0x174>)
 80011b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011c4:	4b31      	ldr	r3, [pc, #196]	; (800128c <MX_GPIO_Init+0x174>)
 80011c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ca:	4a30      	ldr	r2, [pc, #192]	; (800128c <MX_GPIO_Init+0x174>)
 80011cc:	f043 0310 	orr.w	r3, r3, #16
 80011d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011d4:	4b2d      	ldr	r3, [pc, #180]	; (800128c <MX_GPIO_Init+0x174>)
 80011d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011da:	f003 0310 	and.w	r3, r3, #16
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011e2:	4b2a      	ldr	r3, [pc, #168]	; (800128c <MX_GPIO_Init+0x174>)
 80011e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e8:	4a28      	ldr	r2, [pc, #160]	; (800128c <MX_GPIO_Init+0x174>)
 80011ea:	f043 0308 	orr.w	r3, r3, #8
 80011ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f2:	4b26      	ldr	r3, [pc, #152]	; (800128c <MX_GPIO_Init+0x174>)
 80011f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f8:	f003 0308 	and.w	r3, r3, #8
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001200:	4b22      	ldr	r3, [pc, #136]	; (800128c <MX_GPIO_Init+0x174>)
 8001202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001206:	4a21      	ldr	r2, [pc, #132]	; (800128c <MX_GPIO_Init+0x174>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001210:	4b1e      	ldr	r3, [pc, #120]	; (800128c <MX_GPIO_Init+0x174>)
 8001212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS4270_NRESET_GPIO_Port, CS4270_NRESET_Pin, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	2110      	movs	r1, #16
 8001222:	481b      	ldr	r0, [pc, #108]	; (8001290 <MX_GPIO_Init+0x178>)
 8001224:	f003 fc22 	bl	8004a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TCA9548A_NRESET_GPIO_Port, TCA9548A_NRESET_Pin, GPIO_PIN_RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	2120      	movs	r1, #32
 800122c:	4819      	ldr	r0, [pc, #100]	; (8001294 <MX_GPIO_Init+0x17c>)
 800122e:	f003 fc1d 	bl	8004a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS4270_NRESET_Pin */
  GPIO_InitStruct.Pin = CS4270_NRESET_Pin;
 8001232:	2310      	movs	r3, #16
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001236:	2301      	movs	r3, #1
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS4270_NRESET_GPIO_Port, &GPIO_InitStruct);
 8001242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001246:	4619      	mov	r1, r3
 8001248:	4811      	ldr	r0, [pc, #68]	; (8001290 <MX_GPIO_Init+0x178>)
 800124a:	f003 fa47 	bl	80046dc <HAL_GPIO_Init>

  /*Configure GPIO pin : DBG_PAD1_Pin */
  GPIO_InitStruct.Pin = DBG_PAD1_Pin;
 800124e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001254:	2300      	movs	r3, #0
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001258:	2302      	movs	r3, #2
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DBG_PAD1_GPIO_Port, &GPIO_InitStruct);
 800125c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001260:	4619      	mov	r1, r3
 8001262:	480d      	ldr	r0, [pc, #52]	; (8001298 <MX_GPIO_Init+0x180>)
 8001264:	f003 fa3a 	bl	80046dc <HAL_GPIO_Init>

  /*Configure GPIO pin : TCA9548A_NRESET_Pin */
  GPIO_InitStruct.Pin = TCA9548A_NRESET_Pin;
 8001268:	2320      	movs	r3, #32
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TCA9548A_NRESET_GPIO_Port, &GPIO_InitStruct);
 8001278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127c:	4619      	mov	r1, r3
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_GPIO_Init+0x17c>)
 8001280:	f003 fa2c 	bl	80046dc <HAL_GPIO_Init>

}
 8001284:	bf00      	nop
 8001286:	3738      	adds	r7, #56	; 0x38
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	58024400 	.word	0x58024400
 8001290:	58020c00 	.word	0x58020c00
 8001294:	58020400 	.word	0x58020400
 8001298:	58021800 	.word	0x58021800

0800129c <SDRAM_Init>:

/* USER CODE BEGIN 4 */

static void SDRAM_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
	FMC_SDRAM_CommandTypeDef cmd = {0};
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
	HAL_StatusTypeDef status = HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	75fb      	strb	r3, [r7, #23]

	/* Send clock configuration enable command */
	cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80012b2:	2310      	movs	r3, #16
 80012b4:	60bb      	str	r3, [r7, #8]
	cmd.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80012b6:	2301      	movs	r3, #1
 80012b8:	607b      	str	r3, [r7, #4]
	cmd.AutoRefreshNumber = 1;
 80012ba:	2301      	movs	r3, #1
 80012bc:	60fb      	str	r3, [r7, #12]
	cmd.ModeRegisterDefinition = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
	status = HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0xFFFF); // TODO magic number
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012c8:	4619      	mov	r1, r3
 80012ca:	4830      	ldr	r0, [pc, #192]	; (800138c <SDRAM_Init+0xf0>)
 80012cc:	f00a f988 	bl	800b5e0 <HAL_SDRAM_SendCommand>
 80012d0:	4603      	mov	r3, r0
 80012d2:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <SDRAM_Init+0x42>
		Error_Handler();
 80012da:	f000 f879 	bl	80013d0 <Error_Handler>
	}

	/* Wait for at least 100us */
	HAL_Delay(1);
 80012de:	2001      	movs	r0, #1
 80012e0:	f000 fcc6 	bl	8001c70 <HAL_Delay>

	/* Send Precharge All command */
	cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80012e4:	2310      	movs	r3, #16
 80012e6:	60bb      	str	r3, [r7, #8]
	cmd.CommandMode = FMC_SDRAM_CMD_PALL;
 80012e8:	2302      	movs	r3, #2
 80012ea:	607b      	str	r3, [r7, #4]
	cmd.AutoRefreshNumber = 1;
 80012ec:	2301      	movs	r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
	cmd.ModeRegisterDefinition = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
	status = HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0xFFFF); // TODO magic number
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012fa:	4619      	mov	r1, r3
 80012fc:	4823      	ldr	r0, [pc, #140]	; (800138c <SDRAM_Init+0xf0>)
 80012fe:	f00a f96f 	bl	800b5e0 <HAL_SDRAM_SendCommand>
 8001302:	4603      	mov	r3, r0
 8001304:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 8001306:	7dfb      	ldrb	r3, [r7, #23]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SDRAM_Init+0x74>
		Error_Handler();
 800130c:	f000 f860 	bl	80013d0 <Error_Handler>
	}

	/* Send Auto Refresh command 8 times */
	cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001310:	2310      	movs	r3, #16
 8001312:	60bb      	str	r3, [r7, #8]
	cmd.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001314:	2303      	movs	r3, #3
 8001316:	607b      	str	r3, [r7, #4]
	cmd.AutoRefreshNumber = 8;
 8001318:	2308      	movs	r3, #8
 800131a:	60fb      	str	r3, [r7, #12]
	cmd.ModeRegisterDefinition = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]
	status = HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0xFFFF); // TODO magic number
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001326:	4619      	mov	r1, r3
 8001328:	4818      	ldr	r0, [pc, #96]	; (800138c <SDRAM_Init+0xf0>)
 800132a:	f00a f959 	bl	800b5e0 <HAL_SDRAM_SendCommand>
 800132e:	4603      	mov	r3, r0
 8001330:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 8001332:	7dfb      	ldrb	r3, [r7, #23]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <SDRAM_Init+0xa0>
		Error_Handler();
 8001338:	f000 f84a 	bl	80013d0 <Error_Handler>
	}

	/* Program the external memory mode register */
	cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800133c:	2310      	movs	r3, #16
 800133e:	60bb      	str	r3, [r7, #8]
	cmd.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8001340:	2304      	movs	r3, #4
 8001342:	607b      	str	r3, [r7, #4]
	cmd.AutoRefreshNumber = 1;
 8001344:	2301      	movs	r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
	cmd.ModeRegisterDefinition = (SDRAM_MODEREG_BURST_LENGTH_1 |
 8001348:	f44f 7308 	mov.w	r3, #544	; 0x220
 800134c:	613b      	str	r3, [r7, #16]
							 	 SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL |
								 SDRAM_MODEREG_CAS_LATENCY_2 |
								 SDRAM_MODEREG_OPERATING_MODE_STANDARD |
								 SDRAM_MODEREG_WRITEBURST_MODE_SINGLE);
	status = HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0xFFFF); // TODO magic number
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001354:	4619      	mov	r1, r3
 8001356:	480d      	ldr	r0, [pc, #52]	; (800138c <SDRAM_Init+0xf0>)
 8001358:	f00a f942 	bl	800b5e0 <HAL_SDRAM_SendCommand>
 800135c:	4603      	mov	r3, r0
 800135e:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 8001360:	7dfb      	ldrb	r3, [r7, #23]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SDRAM_Init+0xce>
		Error_Handler();
 8001366:	f000 f833 	bl	80013d0 <Error_Handler>

	/* Set the rate refresh counter:
	 * refresh_rate = (FMC_freq * (full_refresh_time / refresh_cycles)) - 20
	 * refresh_rate = (72MHz * (64ms/8192)) - 20 = (72MHz * 7.8125us) - 20 = 542
	 *  */
	status = HAL_SDRAM_ProgramRefreshRate(&hsdram1, 542);
 800136a:	f240 211e 	movw	r1, #542	; 0x21e
 800136e:	4807      	ldr	r0, [pc, #28]	; (800138c <SDRAM_Init+0xf0>)
 8001370:	f00a f96b 	bl	800b64a <HAL_SDRAM_ProgramRefreshRate>
 8001374:	4603      	mov	r3, r0
 8001376:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 8001378:	7dfb      	ldrb	r3, [r7, #23]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <SDRAM_Init+0xe6>
		Error_Handler();
 800137e:	f000 f827 	bl	80013d0 <Error_Handler>
	}
}
 8001382:	bf00      	nop
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	240002b0 	.word	0x240002b0

08001390 <HAL_I2S_TxHalfCpltCallback>:

// TODO this shouldn't be here
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	first_half = true;
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <HAL_I2S_TxHalfCpltCallback+0x1c>)
 800139a:	2201      	movs	r2, #1
 800139c:	701a      	strb	r2, [r3, #0]
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	240002e4 	.word	0x240002e4

080013b0 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	second_half = true;
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <HAL_I2S_TxCpltCallback+0x1c>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	701a      	strb	r2, [r3, #0]
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	240002e5 	.word	0x240002e5

080013d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d4:	b672      	cpsid	i
}
 80013d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <Error_Handler+0x8>
	...

080013dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_MspInit+0x30>)
 80013e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013e8:	4a08      	ldr	r2, [pc, #32]	; (800140c <HAL_MspInit+0x30>)
 80013ea:	f043 0302 	orr.w	r3, r3, #2
 80013ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_MspInit+0x30>)
 80013f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	58024400 	.word	0x58024400

08001410 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b0ba      	sub	sp, #232	; 0xe8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	22c0      	movs	r2, #192	; 0xc0
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f00e f9a3 	bl	800f77c <memset>
  if(hi2c->Instance==I2C1)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a26      	ldr	r2, [pc, #152]	; (80014d4 <HAL_I2C_MspInit+0xc4>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d145      	bne.n	80014cc <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001440:	f04f 0208 	mov.w	r2, #8
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800144c:	2300      	movs	r3, #0
 800144e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001452:	f107 0310 	add.w	r3, r7, #16
 8001456:	4618      	mov	r0, r3
 8001458:	f005 ff2a 	bl	80072b0 <HAL_RCCEx_PeriphCLKConfig>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001462:	f7ff ffb5 	bl	80013d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <HAL_I2C_MspInit+0xc8>)
 8001468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146c:	4a1a      	ldr	r2, [pc, #104]	; (80014d8 <HAL_I2C_MspInit+0xc8>)
 800146e:	f043 0302 	orr.w	r3, r3, #2
 8001472:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001476:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <HAL_I2C_MspInit+0xc8>)
 8001478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001484:	23c0      	movs	r3, #192	; 0xc0
 8001486:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800148a:	2312      	movs	r3, #18
 800148c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2300      	movs	r3, #0
 8001498:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800149c:	2304      	movs	r3, #4
 800149e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014a6:	4619      	mov	r1, r3
 80014a8:	480c      	ldr	r0, [pc, #48]	; (80014dc <HAL_I2C_MspInit+0xcc>)
 80014aa:	f003 f917 	bl	80046dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <HAL_I2C_MspInit+0xc8>)
 80014b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014b4:	4a08      	ldr	r2, [pc, #32]	; (80014d8 <HAL_I2C_MspInit+0xc8>)
 80014b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_I2C_MspInit+0xc8>)
 80014c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014cc:	bf00      	nop
 80014ce:	37e8      	adds	r7, #232	; 0xe8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40005400 	.word	0x40005400
 80014d8:	58024400 	.word	0x58024400
 80014dc:	58020400 	.word	0x58020400

080014e0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08c      	sub	sp, #48	; 0x30
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 031c 	add.w	r3, r7, #28
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a62      	ldr	r2, [pc, #392]	; (8001688 <HAL_I2S_MspInit+0x1a8>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	f040 80bd 	bne.w	800167e <HAL_I2S_MspInit+0x19e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001504:	4b61      	ldr	r3, [pc, #388]	; (800168c <HAL_I2S_MspInit+0x1ac>)
 8001506:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800150a:	4a60      	ldr	r2, [pc, #384]	; (800168c <HAL_I2S_MspInit+0x1ac>)
 800150c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001510:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001514:	4b5d      	ldr	r3, [pc, #372]	; (800168c <HAL_I2S_MspInit+0x1ac>)
 8001516:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800151a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800151e:	61bb      	str	r3, [r7, #24]
 8001520:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	4b5a      	ldr	r3, [pc, #360]	; (800168c <HAL_I2S_MspInit+0x1ac>)
 8001524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001528:	4a58      	ldr	r2, [pc, #352]	; (800168c <HAL_I2S_MspInit+0x1ac>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001532:	4b56      	ldr	r3, [pc, #344]	; (800168c <HAL_I2S_MspInit+0x1ac>)
 8001534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001540:	4b52      	ldr	r3, [pc, #328]	; (800168c <HAL_I2S_MspInit+0x1ac>)
 8001542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001546:	4a51      	ldr	r2, [pc, #324]	; (800168c <HAL_I2S_MspInit+0x1ac>)
 8001548:	f043 0304 	orr.w	r3, r3, #4
 800154c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001550:	4b4e      	ldr	r3, [pc, #312]	; (800168c <HAL_I2S_MspInit+0x1ac>)
 8001552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800155e:	4b4b      	ldr	r3, [pc, #300]	; (800168c <HAL_I2S_MspInit+0x1ac>)
 8001560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001564:	4a49      	ldr	r2, [pc, #292]	; (800168c <HAL_I2S_MspInit+0x1ac>)
 8001566:	f043 0308 	orr.w	r3, r3, #8
 800156a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800156e:	4b47      	ldr	r3, [pc, #284]	; (800168c <HAL_I2S_MspInit+0x1ac>)
 8001570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800157c:	4b43      	ldr	r3, [pc, #268]	; (800168c <HAL_I2S_MspInit+0x1ac>)
 800157e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001582:	4a42      	ldr	r2, [pc, #264]	; (800168c <HAL_I2S_MspInit+0x1ac>)
 8001584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001588:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800158c:	4b3f      	ldr	r3, [pc, #252]	; (800168c <HAL_I2S_MspInit+0x1ac>)
 800158e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> I2S1_MCK
    PA15 (JTDI)     ------> I2S1_WS
    PD7     ------> I2S1_SDO
    PG9     ------> I2S1_SDI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 800159a:	f248 0320 	movw	r3, #32800	; 0x8020
 800159e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015ac:	2305      	movs	r3, #5
 80015ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	4619      	mov	r1, r3
 80015b6:	4836      	ldr	r0, [pc, #216]	; (8001690 <HAL_I2S_MspInit+0x1b0>)
 80015b8:	f003 f890 	bl	80046dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015bc:	2310      	movs	r3, #16
 80015be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015cc:	2305      	movs	r3, #5
 80015ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	4619      	mov	r1, r3
 80015d6:	482f      	ldr	r0, [pc, #188]	; (8001694 <HAL_I2S_MspInit+0x1b4>)
 80015d8:	f003 f880 	bl	80046dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015ec:	2305      	movs	r3, #5
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	4619      	mov	r1, r3
 80015f6:	4828      	ldr	r0, [pc, #160]	; (8001698 <HAL_I2S_MspInit+0x1b8>)
 80015f8:	f003 f870 	bl	80046dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800160e:	2305      	movs	r3, #5
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001612:	f107 031c 	add.w	r3, r7, #28
 8001616:	4619      	mov	r1, r3
 8001618:	4820      	ldr	r0, [pc, #128]	; (800169c <HAL_I2S_MspInit+0x1bc>)
 800161a:	f003 f85f 	bl	80046dc <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <HAL_I2S_MspInit+0x1c0>)
 8001620:	4a20      	ldr	r2, [pc, #128]	; (80016a4 <HAL_I2S_MspInit+0x1c4>)
 8001622:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001624:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <HAL_I2S_MspInit+0x1c0>)
 8001626:	2226      	movs	r2, #38	; 0x26
 8001628:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <HAL_I2S_MspInit+0x1c0>)
 800162c:	2240      	movs	r2, #64	; 0x40
 800162e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <HAL_I2S_MspInit+0x1c0>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001636:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <HAL_I2S_MspInit+0x1c0>)
 8001638:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800163c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <HAL_I2S_MspInit+0x1c0>)
 8001640:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001644:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001646:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <HAL_I2S_MspInit+0x1c0>)
 8001648:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800164c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 800164e:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <HAL_I2S_MspInit+0x1c0>)
 8001650:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001654:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_I2S_MspInit+0x1c0>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800165c:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <HAL_I2S_MspInit+0x1c0>)
 800165e:	2200      	movs	r2, #0
 8001660:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001662:	480f      	ldr	r0, [pc, #60]	; (80016a0 <HAL_I2S_MspInit+0x1c0>)
 8001664:	f000 fc44 	bl	8001ef0 <HAL_DMA_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_I2S_MspInit+0x192>
    {
      Error_Handler();
 800166e:	f7ff feaf 	bl	80013d0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <HAL_I2S_MspInit+0x1c0>)
 8001676:	645a      	str	r2, [r3, #68]	; 0x44
 8001678:	4a09      	ldr	r2, [pc, #36]	; (80016a0 <HAL_I2S_MspInit+0x1c0>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800167e:	bf00      	nop
 8001680:	3730      	adds	r7, #48	; 0x30
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40013000 	.word	0x40013000
 800168c:	58024400 	.word	0x58024400
 8001690:	58020000 	.word	0x58020000
 8001694:	58020800 	.word	0x58020800
 8001698:	58020c00 	.word	0x58020c00
 800169c:	58021800 	.word	0x58021800
 80016a0:	24000150 	.word	0x24000150
 80016a4:	40020010 	.word	0x40020010

080016a8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b0bc      	sub	sp, #240	; 0xf0
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016c0:	f107 0318 	add.w	r3, r7, #24
 80016c4:	22c0      	movs	r2, #192	; 0xc0
 80016c6:	2100      	movs	r1, #0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f00e f857 	bl	800f77c <memset>
  if(hsd->Instance==SDMMC1)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a3c      	ldr	r2, [pc, #240]	; (80017c4 <HAL_SD_MspInit+0x11c>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d171      	bne.n	80017bc <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80016d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016e8:	f107 0318 	add.w	r3, r7, #24
 80016ec:	4618      	mov	r0, r3
 80016ee:	f005 fddf 	bl	80072b0 <HAL_RCCEx_PeriphCLKConfig>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80016f8:	f7ff fe6a 	bl	80013d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80016fc:	4b32      	ldr	r3, [pc, #200]	; (80017c8 <HAL_SD_MspInit+0x120>)
 80016fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001702:	4a31      	ldr	r2, [pc, #196]	; (80017c8 <HAL_SD_MspInit+0x120>)
 8001704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001708:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800170c:	4b2e      	ldr	r3, [pc, #184]	; (80017c8 <HAL_SD_MspInit+0x120>)
 800170e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800171a:	4b2b      	ldr	r3, [pc, #172]	; (80017c8 <HAL_SD_MspInit+0x120>)
 800171c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001720:	4a29      	ldr	r2, [pc, #164]	; (80017c8 <HAL_SD_MspInit+0x120>)
 8001722:	f043 0304 	orr.w	r3, r3, #4
 8001726:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800172a:	4b27      	ldr	r3, [pc, #156]	; (80017c8 <HAL_SD_MspInit+0x120>)
 800172c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001738:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <HAL_SD_MspInit+0x120>)
 800173a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800173e:	4a22      	ldr	r2, [pc, #136]	; (80017c8 <HAL_SD_MspInit+0x120>)
 8001740:	f043 0308 	orr.w	r3, r3, #8
 8001744:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001748:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <HAL_SD_MspInit+0x120>)
 800174a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001756:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800175a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176a:	2303      	movs	r3, #3
 800176c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001770:	230c      	movs	r3, #12
 8001772:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001776:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800177a:	4619      	mov	r1, r3
 800177c:	4813      	ldr	r0, [pc, #76]	; (80017cc <HAL_SD_MspInit+0x124>)
 800177e:	f002 ffad 	bl	80046dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001782:	2304      	movs	r3, #4
 8001784:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	2302      	movs	r3, #2
 800178a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001794:	2303      	movs	r3, #3
 8001796:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800179a:	230c      	movs	r3, #12
 800179c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017a4:	4619      	mov	r1, r3
 80017a6:	480a      	ldr	r0, [pc, #40]	; (80017d0 <HAL_SD_MspInit+0x128>)
 80017a8:	f002 ff98 	bl	80046dc <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2100      	movs	r1, #0
 80017b0:	2031      	movs	r0, #49	; 0x31
 80017b2:	f000 fb68 	bl	8001e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80017b6:	2031      	movs	r0, #49	; 0x31
 80017b8:	f000 fb7f 	bl	8001eba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80017bc:	bf00      	nop
 80017be:	37f0      	adds	r7, #240	; 0xf0
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	52007000 	.word	0x52007000
 80017c8:	58024400 	.word	0x58024400
 80017cc:	58020800 	.word	0x58020800
 80017d0:	58020c00 	.word	0x58020c00

080017d4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80017e8:	4b34      	ldr	r3, [pc, #208]	; (80018bc <HAL_FMC_MspInit+0xe8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d161      	bne.n	80018b4 <HAL_FMC_MspInit+0xe0>
    return;
  }
  FMC_Initialized = 1;
 80017f0:	4b32      	ldr	r3, [pc, #200]	; (80018bc <HAL_FMC_MspInit+0xe8>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80017f6:	4b32      	ldr	r3, [pc, #200]	; (80018c0 <HAL_FMC_MspInit+0xec>)
 80017f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80017fc:	4a30      	ldr	r2, [pc, #192]	; (80018c0 <HAL_FMC_MspInit+0xec>)
 80017fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001802:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001806:	4b2e      	ldr	r3, [pc, #184]	; (80018c0 <HAL_FMC_MspInit+0xec>)
 8001808:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800180c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001810:	603b      	str	r3, [r7, #0]
 8001812:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001814:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001818:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001822:	2303      	movs	r3, #3
 8001824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001826:	230c      	movs	r3, #12
 8001828:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	4619      	mov	r1, r3
 800182e:	4825      	ldr	r0, [pc, #148]	; (80018c4 <HAL_FMC_MspInit+0xf0>)
 8001830:	f002 ff54 	bl	80046dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8001834:	230d      	movs	r3, #13
 8001836:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001838:	2302      	movs	r3, #2
 800183a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001840:	2303      	movs	r3, #3
 8001842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001844:	230c      	movs	r3, #12
 8001846:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	4619      	mov	r1, r3
 800184c:	481e      	ldr	r0, [pc, #120]	; (80018c8 <HAL_FMC_MspInit+0xf4>)
 800184e:	f002 ff45 	bl	80046dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8001852:	f248 1337 	movw	r3, #33079	; 0x8137
 8001856:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001860:	2303      	movs	r3, #3
 8001862:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001864:	230c      	movs	r3, #12
 8001866:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	4619      	mov	r1, r3
 800186c:	4817      	ldr	r0, [pc, #92]	; (80018cc <HAL_FMC_MspInit+0xf8>)
 800186e:	f002 ff35 	bl	80046dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001872:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001876:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001878:	2302      	movs	r3, #2
 800187a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001880:	2303      	movs	r3, #3
 8001882:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001884:	230c      	movs	r3, #12
 8001886:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	4619      	mov	r1, r3
 800188c:	4810      	ldr	r0, [pc, #64]	; (80018d0 <HAL_FMC_MspInit+0xfc>)
 800188e:	f002 ff25 	bl	80046dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001892:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001896:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	2302      	movs	r3, #2
 800189a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a0:	2303      	movs	r3, #3
 80018a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018a4:	230c      	movs	r3, #12
 80018a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	4619      	mov	r1, r3
 80018ac:	4809      	ldr	r0, [pc, #36]	; (80018d4 <HAL_FMC_MspInit+0x100>)
 80018ae:	f002 ff15 	bl	80046dc <HAL_GPIO_Init>
 80018b2:	e000      	b.n	80018b6 <HAL_FMC_MspInit+0xe2>
    return;
 80018b4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	240002e8 	.word	0x240002e8
 80018c0:	58024400 	.word	0x58024400
 80018c4:	58021400 	.word	0x58021400
 80018c8:	58020800 	.word	0x58020800
 80018cc:	58021800 	.word	0x58021800
 80018d0:	58021000 	.word	0x58021000
 80018d4:	58020c00 	.word	0x58020c00

080018d8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80018e0:	f7ff ff78 	bl	80017d4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <NMI_Handler+0x4>

080018f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f6:	e7fe      	b.n	80018f6 <HardFault_Handler+0x4>

080018f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <MemManage_Handler+0x4>

080018fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001902:	e7fe      	b.n	8001902 <BusFault_Handler+0x4>

08001904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <UsageFault_Handler+0x4>

0800190a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001938:	f000 f97a 	bl	8001c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}

08001940 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <DMA1_Stream0_IRQHandler+0x10>)
 8001946:	f001 fbb7 	bl	80030b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	24000150 	.word	0x24000150

08001954 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <SDMMC1_IRQHandler+0x10>)
 800195a:	f008 fc11 	bl	800a180 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	240001c8 	.word	0x240001c8

08001968 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel40_sdmmc1_end_data_0);
 800196c:	4802      	ldr	r0, [pc, #8]	; (8001978 <MDMA_IRQHandler+0x10>)
 800196e:	f004 faa9 	bl	8005ec4 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	24000244 	.word	0x24000244

0800197c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001984:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <_sbrk+0x5c>)
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <_sbrk+0x60>)
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001990:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d102      	bne.n	800199e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <_sbrk+0x64>)
 800199a:	4a12      	ldr	r2, [pc, #72]	; (80019e4 <_sbrk+0x68>)
 800199c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <_sbrk+0x64>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d207      	bcs.n	80019bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019ac:	f00d fe94 	bl	800f6d8 <__errno>
 80019b0:	4603      	mov	r3, r0
 80019b2:	220c      	movs	r2, #12
 80019b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ba:	e009      	b.n	80019d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019bc:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019c2:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <_sbrk+0x64>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	4a05      	ldr	r2, [pc, #20]	; (80019e0 <_sbrk+0x64>)
 80019cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ce:	68fb      	ldr	r3, [r7, #12]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	24080000 	.word	0x24080000
 80019dc:	00004000 	.word	0x00004000
 80019e0:	240002ec 	.word	0x240002ec
 80019e4:	24000548 	.word	0x24000548

080019e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019ec:	4b37      	ldr	r3, [pc, #220]	; (8001acc <SystemInit+0xe4>)
 80019ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f2:	4a36      	ldr	r2, [pc, #216]	; (8001acc <SystemInit+0xe4>)
 80019f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019fc:	4b34      	ldr	r3, [pc, #208]	; (8001ad0 <SystemInit+0xe8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 030f 	and.w	r3, r3, #15
 8001a04:	2b06      	cmp	r3, #6
 8001a06:	d807      	bhi.n	8001a18 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a08:	4b31      	ldr	r3, [pc, #196]	; (8001ad0 <SystemInit+0xe8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f023 030f 	bic.w	r3, r3, #15
 8001a10:	4a2f      	ldr	r2, [pc, #188]	; (8001ad0 <SystemInit+0xe8>)
 8001a12:	f043 0307 	orr.w	r3, r3, #7
 8001a16:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a18:	4b2e      	ldr	r3, [pc, #184]	; (8001ad4 <SystemInit+0xec>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a2d      	ldr	r2, [pc, #180]	; (8001ad4 <SystemInit+0xec>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a24:	4b2b      	ldr	r3, [pc, #172]	; (8001ad4 <SystemInit+0xec>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a2a:	4b2a      	ldr	r3, [pc, #168]	; (8001ad4 <SystemInit+0xec>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	4929      	ldr	r1, [pc, #164]	; (8001ad4 <SystemInit+0xec>)
 8001a30:	4b29      	ldr	r3, [pc, #164]	; (8001ad8 <SystemInit+0xf0>)
 8001a32:	4013      	ands	r3, r2
 8001a34:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a36:	4b26      	ldr	r3, [pc, #152]	; (8001ad0 <SystemInit+0xe8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d007      	beq.n	8001a52 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a42:	4b23      	ldr	r3, [pc, #140]	; (8001ad0 <SystemInit+0xe8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f023 030f 	bic.w	r3, r3, #15
 8001a4a:	4a21      	ldr	r2, [pc, #132]	; (8001ad0 <SystemInit+0xe8>)
 8001a4c:	f043 0307 	orr.w	r3, r3, #7
 8001a50:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a52:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <SystemInit+0xec>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a58:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <SystemInit+0xec>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <SystemInit+0xec>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a64:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <SystemInit+0xec>)
 8001a66:	4a1d      	ldr	r2, [pc, #116]	; (8001adc <SystemInit+0xf4>)
 8001a68:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <SystemInit+0xec>)
 8001a6c:	4a1c      	ldr	r2, [pc, #112]	; (8001ae0 <SystemInit+0xf8>)
 8001a6e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a70:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <SystemInit+0xec>)
 8001a72:	4a1c      	ldr	r2, [pc, #112]	; (8001ae4 <SystemInit+0xfc>)
 8001a74:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <SystemInit+0xec>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a7c:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <SystemInit+0xec>)
 8001a7e:	4a19      	ldr	r2, [pc, #100]	; (8001ae4 <SystemInit+0xfc>)
 8001a80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a82:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <SystemInit+0xec>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <SystemInit+0xec>)
 8001a8a:	4a16      	ldr	r2, [pc, #88]	; (8001ae4 <SystemInit+0xfc>)
 8001a8c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <SystemInit+0xec>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <SystemInit+0xec>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0e      	ldr	r2, [pc, #56]	; (8001ad4 <SystemInit+0xec>)
 8001a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <SystemInit+0xec>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <SystemInit+0x100>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <SystemInit+0x104>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ab2:	d202      	bcs.n	8001aba <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001ab4:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <SystemInit+0x108>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <SystemInit+0x10c>)
 8001abc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001ac0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00
 8001ad0:	52002000 	.word	0x52002000
 8001ad4:	58024400 	.word	0x58024400
 8001ad8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001adc:	02020200 	.word	0x02020200
 8001ae0:	01ff0000 	.word	0x01ff0000
 8001ae4:	01010280 	.word	0x01010280
 8001ae8:	5c001000 	.word	0x5c001000
 8001aec:	ffff0000 	.word	0xffff0000
 8001af0:	51008108 	.word	0x51008108
 8001af4:	52004000 	.word	0x52004000

08001af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001afc:	f7ff ff74 	bl	80019e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b00:	480c      	ldr	r0, [pc, #48]	; (8001b34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b02:	490d      	ldr	r1, [pc, #52]	; (8001b38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b04:	4a0d      	ldr	r2, [pc, #52]	; (8001b3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b08:	e002      	b.n	8001b10 <LoopCopyDataInit>

08001b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0e:	3304      	adds	r3, #4

08001b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b14:	d3f9      	bcc.n	8001b0a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b18:	4c0a      	ldr	r4, [pc, #40]	; (8001b44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b1c:	e001      	b.n	8001b22 <LoopFillZerobss>

08001b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b20:	3204      	adds	r2, #4

08001b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b24:	d3fb      	bcc.n	8001b1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b26:	f00d fddd 	bl	800f6e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b2a:	f7fe ffb3 	bl	8000a94 <main>
  bx  lr
 8001b2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b30:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001b34:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b38:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8001b3c:	08010c60 	.word	0x08010c60
  ldr r2, =_sbss
 8001b40:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8001b44:	24000548 	.word	0x24000548

08001b48 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b48:	e7fe      	b.n	8001b48 <ADC3_IRQHandler>
	...

08001b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b52:	2003      	movs	r0, #3
 8001b54:	f000 f98c 	bl	8001e70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b58:	f005 f9ea 	bl	8006f30 <HAL_RCC_GetSysClockFreq>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <HAL_Init+0x68>)
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	0a1b      	lsrs	r3, r3, #8
 8001b64:	f003 030f 	and.w	r3, r3, #15
 8001b68:	4913      	ldr	r1, [pc, #76]	; (8001bb8 <HAL_Init+0x6c>)
 8001b6a:	5ccb      	ldrb	r3, [r1, r3]
 8001b6c:	f003 031f 	and.w	r3, r3, #31
 8001b70:	fa22 f303 	lsr.w	r3, r2, r3
 8001b74:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b76:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <HAL_Init+0x68>)
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <HAL_Init+0x6c>)
 8001b80:	5cd3      	ldrb	r3, [r2, r3]
 8001b82:	f003 031f 	and.w	r3, r3, #31
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8c:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <HAL_Init+0x70>)
 8001b8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b90:	4a0b      	ldr	r2, [pc, #44]	; (8001bc0 <HAL_Init+0x74>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b96:	200f      	movs	r0, #15
 8001b98:	f000 f814 	bl	8001bc4 <HAL_InitTick>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e002      	b.n	8001bac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba6:	f7ff fc19 	bl	80013dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	58024400 	.word	0x58024400
 8001bb8:	080107b8 	.word	0x080107b8
 8001bbc:	2400000c 	.word	0x2400000c
 8001bc0:	24000008 	.word	0x24000008

08001bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001bcc:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <HAL_InitTick+0x60>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e021      	b.n	8001c1c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001bd8:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <HAL_InitTick+0x64>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <HAL_InitTick+0x60>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	4619      	mov	r1, r3
 8001be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 f971 	bl	8001ed6 <HAL_SYSTICK_Config>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e00e      	b.n	8001c1c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b0f      	cmp	r3, #15
 8001c02:	d80a      	bhi.n	8001c1a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c04:	2200      	movs	r2, #0
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c0c:	f000 f93b 	bl	8001e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c10:	4a06      	ldr	r2, [pc, #24]	; (8001c2c <HAL_InitTick+0x68>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e000      	b.n	8001c1c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	24000014 	.word	0x24000014
 8001c28:	24000008 	.word	0x24000008
 8001c2c:	24000010 	.word	0x24000010

08001c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_IncTick+0x20>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_IncTick+0x24>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <HAL_IncTick+0x24>)
 8001c42:	6013      	str	r3, [r2, #0]
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	24000014 	.word	0x24000014
 8001c54:	240002f0 	.word	0x240002f0

08001c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <HAL_GetTick+0x14>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	240002f0 	.word	0x240002f0

08001c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c78:	f7ff ffee 	bl	8001c58 <HAL_GetTick>
 8001c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c88:	d005      	beq.n	8001c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <HAL_Delay+0x44>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4413      	add	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c96:	bf00      	nop
 8001c98:	f7ff ffde 	bl	8001c58 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d8f7      	bhi.n	8001c98 <HAL_Delay+0x28>
  {
  }
}
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	24000014 	.word	0x24000014

08001cb8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001cbc:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <HAL_GetREVID+0x14>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	0c1b      	lsrs	r3, r3, #16
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	5c001000 	.word	0x5c001000

08001cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <__NVIC_SetPriorityGrouping+0x40>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cec:	4013      	ands	r3, r2
 8001cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfe:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <__NVIC_SetPriorityGrouping+0x40>)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	60d3      	str	r3, [r2, #12]
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000ed00 	.word	0xe000ed00
 8001d14:	05fa0000 	.word	0x05fa0000

08001d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d1c:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <__NVIC_GetPriorityGrouping+0x18>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	f003 0307 	and.w	r3, r3, #7
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	db0b      	blt.n	8001d5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d46:	88fb      	ldrh	r3, [r7, #6]
 8001d48:	f003 021f 	and.w	r2, r3, #31
 8001d4c:	4907      	ldr	r1, [pc, #28]	; (8001d6c <__NVIC_EnableIRQ+0x38>)
 8001d4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	2001      	movs	r0, #1
 8001d56:	fa00 f202 	lsl.w	r2, r0, r2
 8001d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000e100 	.word	0xe000e100

08001d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	db0a      	blt.n	8001d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	490c      	ldr	r1, [pc, #48]	; (8001dbc <__NVIC_SetPriority+0x4c>)
 8001d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	440b      	add	r3, r1
 8001d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d98:	e00a      	b.n	8001db0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4908      	ldr	r1, [pc, #32]	; (8001dc0 <__NVIC_SetPriority+0x50>)
 8001da0:	88fb      	ldrh	r3, [r7, #6]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	3b04      	subs	r3, #4
 8001da8:	0112      	lsls	r2, r2, #4
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	440b      	add	r3, r1
 8001dae:	761a      	strb	r2, [r3, #24]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000e100 	.word	0xe000e100
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	; 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f1c3 0307 	rsb	r3, r3, #7
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	bf28      	it	cs
 8001de2:	2304      	movcs	r3, #4
 8001de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3304      	adds	r3, #4
 8001dea:	2b06      	cmp	r3, #6
 8001dec:	d902      	bls.n	8001df4 <NVIC_EncodePriority+0x30>
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3b03      	subs	r3, #3
 8001df2:	e000      	b.n	8001df6 <NVIC_EncodePriority+0x32>
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	401a      	ands	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	43d9      	mvns	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	4313      	orrs	r3, r2
         );
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3724      	adds	r7, #36	; 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e3c:	d301      	bcc.n	8001e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00f      	b.n	8001e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e42:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <SysTick_Config+0x40>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4a:	210f      	movs	r1, #15
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e50:	f7ff ff8e 	bl	8001d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <SysTick_Config+0x40>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5a:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <SysTick_Config+0x40>)
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	e000e010 	.word	0xe000e010

08001e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ff29 	bl	8001cd0 <__NVIC_SetPriorityGrouping>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e94:	f7ff ff40 	bl	8001d18 <__NVIC_GetPriorityGrouping>
 8001e98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	68b9      	ldr	r1, [r7, #8]
 8001e9e:	6978      	ldr	r0, [r7, #20]
 8001ea0:	f7ff ff90 	bl	8001dc4 <NVIC_EncodePriority>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff5f 	bl	8001d70 <__NVIC_SetPriority>
}
 8001eb2:	bf00      	nop
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff33 	bl	8001d34 <__NVIC_EnableIRQ>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff ffa4 	bl	8001e2c <SysTick_Config>
 8001ee4:	4603      	mov	r3, r0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001ef8:	f7ff feae 	bl	8001c58 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e316      	b.n	8002536 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a66      	ldr	r2, [pc, #408]	; (80020a8 <HAL_DMA_Init+0x1b8>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d04a      	beq.n	8001fa8 <HAL_DMA_Init+0xb8>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a65      	ldr	r2, [pc, #404]	; (80020ac <HAL_DMA_Init+0x1bc>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d045      	beq.n	8001fa8 <HAL_DMA_Init+0xb8>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a63      	ldr	r2, [pc, #396]	; (80020b0 <HAL_DMA_Init+0x1c0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d040      	beq.n	8001fa8 <HAL_DMA_Init+0xb8>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a62      	ldr	r2, [pc, #392]	; (80020b4 <HAL_DMA_Init+0x1c4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d03b      	beq.n	8001fa8 <HAL_DMA_Init+0xb8>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a60      	ldr	r2, [pc, #384]	; (80020b8 <HAL_DMA_Init+0x1c8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d036      	beq.n	8001fa8 <HAL_DMA_Init+0xb8>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a5f      	ldr	r2, [pc, #380]	; (80020bc <HAL_DMA_Init+0x1cc>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d031      	beq.n	8001fa8 <HAL_DMA_Init+0xb8>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a5d      	ldr	r2, [pc, #372]	; (80020c0 <HAL_DMA_Init+0x1d0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d02c      	beq.n	8001fa8 <HAL_DMA_Init+0xb8>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a5c      	ldr	r2, [pc, #368]	; (80020c4 <HAL_DMA_Init+0x1d4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d027      	beq.n	8001fa8 <HAL_DMA_Init+0xb8>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a5a      	ldr	r2, [pc, #360]	; (80020c8 <HAL_DMA_Init+0x1d8>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d022      	beq.n	8001fa8 <HAL_DMA_Init+0xb8>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a59      	ldr	r2, [pc, #356]	; (80020cc <HAL_DMA_Init+0x1dc>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d01d      	beq.n	8001fa8 <HAL_DMA_Init+0xb8>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a57      	ldr	r2, [pc, #348]	; (80020d0 <HAL_DMA_Init+0x1e0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d018      	beq.n	8001fa8 <HAL_DMA_Init+0xb8>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a56      	ldr	r2, [pc, #344]	; (80020d4 <HAL_DMA_Init+0x1e4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d013      	beq.n	8001fa8 <HAL_DMA_Init+0xb8>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a54      	ldr	r2, [pc, #336]	; (80020d8 <HAL_DMA_Init+0x1e8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d00e      	beq.n	8001fa8 <HAL_DMA_Init+0xb8>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a53      	ldr	r2, [pc, #332]	; (80020dc <HAL_DMA_Init+0x1ec>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d009      	beq.n	8001fa8 <HAL_DMA_Init+0xb8>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a51      	ldr	r2, [pc, #324]	; (80020e0 <HAL_DMA_Init+0x1f0>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d004      	beq.n	8001fa8 <HAL_DMA_Init+0xb8>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a50      	ldr	r2, [pc, #320]	; (80020e4 <HAL_DMA_Init+0x1f4>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d101      	bne.n	8001fac <HAL_DMA_Init+0xbc>
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <HAL_DMA_Init+0xbe>
 8001fac:	2300      	movs	r3, #0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 813b 	beq.w	800222a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a37      	ldr	r2, [pc, #220]	; (80020a8 <HAL_DMA_Init+0x1b8>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d04a      	beq.n	8002064 <HAL_DMA_Init+0x174>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a36      	ldr	r2, [pc, #216]	; (80020ac <HAL_DMA_Init+0x1bc>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d045      	beq.n	8002064 <HAL_DMA_Init+0x174>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a34      	ldr	r2, [pc, #208]	; (80020b0 <HAL_DMA_Init+0x1c0>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d040      	beq.n	8002064 <HAL_DMA_Init+0x174>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a33      	ldr	r2, [pc, #204]	; (80020b4 <HAL_DMA_Init+0x1c4>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d03b      	beq.n	8002064 <HAL_DMA_Init+0x174>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a31      	ldr	r2, [pc, #196]	; (80020b8 <HAL_DMA_Init+0x1c8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d036      	beq.n	8002064 <HAL_DMA_Init+0x174>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a30      	ldr	r2, [pc, #192]	; (80020bc <HAL_DMA_Init+0x1cc>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d031      	beq.n	8002064 <HAL_DMA_Init+0x174>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a2e      	ldr	r2, [pc, #184]	; (80020c0 <HAL_DMA_Init+0x1d0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d02c      	beq.n	8002064 <HAL_DMA_Init+0x174>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a2d      	ldr	r2, [pc, #180]	; (80020c4 <HAL_DMA_Init+0x1d4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d027      	beq.n	8002064 <HAL_DMA_Init+0x174>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a2b      	ldr	r2, [pc, #172]	; (80020c8 <HAL_DMA_Init+0x1d8>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d022      	beq.n	8002064 <HAL_DMA_Init+0x174>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a2a      	ldr	r2, [pc, #168]	; (80020cc <HAL_DMA_Init+0x1dc>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d01d      	beq.n	8002064 <HAL_DMA_Init+0x174>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a28      	ldr	r2, [pc, #160]	; (80020d0 <HAL_DMA_Init+0x1e0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d018      	beq.n	8002064 <HAL_DMA_Init+0x174>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a27      	ldr	r2, [pc, #156]	; (80020d4 <HAL_DMA_Init+0x1e4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d013      	beq.n	8002064 <HAL_DMA_Init+0x174>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a25      	ldr	r2, [pc, #148]	; (80020d8 <HAL_DMA_Init+0x1e8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00e      	beq.n	8002064 <HAL_DMA_Init+0x174>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a24      	ldr	r2, [pc, #144]	; (80020dc <HAL_DMA_Init+0x1ec>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d009      	beq.n	8002064 <HAL_DMA_Init+0x174>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a22      	ldr	r2, [pc, #136]	; (80020e0 <HAL_DMA_Init+0x1f0>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d004      	beq.n	8002064 <HAL_DMA_Init+0x174>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a21      	ldr	r2, [pc, #132]	; (80020e4 <HAL_DMA_Init+0x1f4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d108      	bne.n	8002076 <HAL_DMA_Init+0x186>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0201 	bic.w	r2, r2, #1
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	e007      	b.n	8002086 <HAL_DMA_Init+0x196>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0201 	bic.w	r2, r2, #1
 8002084:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002086:	e02f      	b.n	80020e8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002088:	f7ff fde6 	bl	8001c58 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b05      	cmp	r3, #5
 8002094:	d928      	bls.n	80020e8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2220      	movs	r2, #32
 800209a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2203      	movs	r2, #3
 80020a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e246      	b.n	8002536 <HAL_DMA_Init+0x646>
 80020a8:	40020010 	.word	0x40020010
 80020ac:	40020028 	.word	0x40020028
 80020b0:	40020040 	.word	0x40020040
 80020b4:	40020058 	.word	0x40020058
 80020b8:	40020070 	.word	0x40020070
 80020bc:	40020088 	.word	0x40020088
 80020c0:	400200a0 	.word	0x400200a0
 80020c4:	400200b8 	.word	0x400200b8
 80020c8:	40020410 	.word	0x40020410
 80020cc:	40020428 	.word	0x40020428
 80020d0:	40020440 	.word	0x40020440
 80020d4:	40020458 	.word	0x40020458
 80020d8:	40020470 	.word	0x40020470
 80020dc:	40020488 	.word	0x40020488
 80020e0:	400204a0 	.word	0x400204a0
 80020e4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1c8      	bne.n	8002088 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4b83      	ldr	r3, [pc, #524]	; (8002310 <HAL_DMA_Init+0x420>)
 8002102:	4013      	ands	r3, r2
 8002104:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800210e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800211a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002126:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	4313      	orrs	r3, r2
 8002132:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	2b04      	cmp	r3, #4
 800213a:	d107      	bne.n	800214c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	4313      	orrs	r3, r2
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	4313      	orrs	r3, r2
 800214a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800214c:	4b71      	ldr	r3, [pc, #452]	; (8002314 <HAL_DMA_Init+0x424>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4b71      	ldr	r3, [pc, #452]	; (8002318 <HAL_DMA_Init+0x428>)
 8002152:	4013      	ands	r3, r2
 8002154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002158:	d328      	bcc.n	80021ac <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b28      	cmp	r3, #40	; 0x28
 8002160:	d903      	bls.n	800216a <HAL_DMA_Init+0x27a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b2e      	cmp	r3, #46	; 0x2e
 8002168:	d917      	bls.n	800219a <HAL_DMA_Init+0x2aa>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b3e      	cmp	r3, #62	; 0x3e
 8002170:	d903      	bls.n	800217a <HAL_DMA_Init+0x28a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b42      	cmp	r3, #66	; 0x42
 8002178:	d90f      	bls.n	800219a <HAL_DMA_Init+0x2aa>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b46      	cmp	r3, #70	; 0x46
 8002180:	d903      	bls.n	800218a <HAL_DMA_Init+0x29a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b48      	cmp	r3, #72	; 0x48
 8002188:	d907      	bls.n	800219a <HAL_DMA_Init+0x2aa>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b4e      	cmp	r3, #78	; 0x4e
 8002190:	d905      	bls.n	800219e <HAL_DMA_Init+0x2ae>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b52      	cmp	r3, #82	; 0x52
 8002198:	d801      	bhi.n	800219e <HAL_DMA_Init+0x2ae>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <HAL_DMA_Init+0x2b0>
 800219e:	2300      	movs	r3, #0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021aa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	f023 0307 	bic.w	r3, r3, #7
 80021c2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d117      	bne.n	8002206 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	4313      	orrs	r3, r2
 80021de:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00e      	beq.n	8002206 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f002 f8ed 	bl	80043c8 <DMA_CheckFifoParam>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d008      	beq.n	8002206 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2240      	movs	r2, #64	; 0x40
 80021f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e197      	b.n	8002536 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f002 f828 	bl	8004264 <DMA_CalcBaseAndBitshift>
 8002214:	4603      	mov	r3, r0
 8002216:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	223f      	movs	r2, #63	; 0x3f
 8002222:	409a      	lsls	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	e0cd      	b.n	80023c6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a3b      	ldr	r2, [pc, #236]	; (800231c <HAL_DMA_Init+0x42c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d022      	beq.n	800227a <HAL_DMA_Init+0x38a>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a39      	ldr	r2, [pc, #228]	; (8002320 <HAL_DMA_Init+0x430>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d01d      	beq.n	800227a <HAL_DMA_Init+0x38a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a38      	ldr	r2, [pc, #224]	; (8002324 <HAL_DMA_Init+0x434>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d018      	beq.n	800227a <HAL_DMA_Init+0x38a>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a36      	ldr	r2, [pc, #216]	; (8002328 <HAL_DMA_Init+0x438>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d013      	beq.n	800227a <HAL_DMA_Init+0x38a>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a35      	ldr	r2, [pc, #212]	; (800232c <HAL_DMA_Init+0x43c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d00e      	beq.n	800227a <HAL_DMA_Init+0x38a>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a33      	ldr	r2, [pc, #204]	; (8002330 <HAL_DMA_Init+0x440>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d009      	beq.n	800227a <HAL_DMA_Init+0x38a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a32      	ldr	r2, [pc, #200]	; (8002334 <HAL_DMA_Init+0x444>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d004      	beq.n	800227a <HAL_DMA_Init+0x38a>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a30      	ldr	r2, [pc, #192]	; (8002338 <HAL_DMA_Init+0x448>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d101      	bne.n	800227e <HAL_DMA_Init+0x38e>
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <HAL_DMA_Init+0x390>
 800227e:	2300      	movs	r3, #0
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 8097 	beq.w	80023b4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a24      	ldr	r2, [pc, #144]	; (800231c <HAL_DMA_Init+0x42c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d021      	beq.n	80022d4 <HAL_DMA_Init+0x3e4>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a22      	ldr	r2, [pc, #136]	; (8002320 <HAL_DMA_Init+0x430>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d01c      	beq.n	80022d4 <HAL_DMA_Init+0x3e4>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a21      	ldr	r2, [pc, #132]	; (8002324 <HAL_DMA_Init+0x434>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d017      	beq.n	80022d4 <HAL_DMA_Init+0x3e4>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a1f      	ldr	r2, [pc, #124]	; (8002328 <HAL_DMA_Init+0x438>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d012      	beq.n	80022d4 <HAL_DMA_Init+0x3e4>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a1e      	ldr	r2, [pc, #120]	; (800232c <HAL_DMA_Init+0x43c>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d00d      	beq.n	80022d4 <HAL_DMA_Init+0x3e4>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a1c      	ldr	r2, [pc, #112]	; (8002330 <HAL_DMA_Init+0x440>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d008      	beq.n	80022d4 <HAL_DMA_Init+0x3e4>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a1b      	ldr	r2, [pc, #108]	; (8002334 <HAL_DMA_Init+0x444>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d003      	beq.n	80022d4 <HAL_DMA_Init+0x3e4>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a19      	ldr	r2, [pc, #100]	; (8002338 <HAL_DMA_Init+0x448>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2202      	movs	r2, #2
 80022da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	4b12      	ldr	r3, [pc, #72]	; (800233c <HAL_DMA_Init+0x44c>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2b40      	cmp	r3, #64	; 0x40
 80022fc:	d020      	beq.n	8002340 <HAL_DMA_Init+0x450>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b80      	cmp	r3, #128	; 0x80
 8002304:	d102      	bne.n	800230c <HAL_DMA_Init+0x41c>
 8002306:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800230a:	e01a      	b.n	8002342 <HAL_DMA_Init+0x452>
 800230c:	2300      	movs	r3, #0
 800230e:	e018      	b.n	8002342 <HAL_DMA_Init+0x452>
 8002310:	fe10803f 	.word	0xfe10803f
 8002314:	5c001000 	.word	0x5c001000
 8002318:	ffff0000 	.word	0xffff0000
 800231c:	58025408 	.word	0x58025408
 8002320:	5802541c 	.word	0x5802541c
 8002324:	58025430 	.word	0x58025430
 8002328:	58025444 	.word	0x58025444
 800232c:	58025458 	.word	0x58025458
 8002330:	5802546c 	.word	0x5802546c
 8002334:	58025480 	.word	0x58025480
 8002338:	58025494 	.word	0x58025494
 800233c:	fffe000f 	.word	0xfffe000f
 8002340:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68d2      	ldr	r2, [r2, #12]
 8002346:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002348:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002350:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002358:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002360:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002368:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002370:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	4313      	orrs	r3, r2
 8002376:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	4b6e      	ldr	r3, [pc, #440]	; (8002540 <HAL_DMA_Init+0x650>)
 8002388:	4413      	add	r3, r2
 800238a:	4a6e      	ldr	r2, [pc, #440]	; (8002544 <HAL_DMA_Init+0x654>)
 800238c:	fba2 2303 	umull	r2, r3, r2, r3
 8002390:	091b      	lsrs	r3, r3, #4
 8002392:	009a      	lsls	r2, r3, #2
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f001 ff63 	bl	8004264 <DMA_CalcBaseAndBitshift>
 800239e:	4603      	mov	r3, r0
 80023a0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a6:	f003 031f 	and.w	r3, r3, #31
 80023aa:	2201      	movs	r2, #1
 80023ac:	409a      	lsls	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	e008      	b.n	80023c6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2240      	movs	r2, #64	; 0x40
 80023b8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2203      	movs	r2, #3
 80023be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e0b7      	b.n	8002536 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a5f      	ldr	r2, [pc, #380]	; (8002548 <HAL_DMA_Init+0x658>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d072      	beq.n	80024b6 <HAL_DMA_Init+0x5c6>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a5d      	ldr	r2, [pc, #372]	; (800254c <HAL_DMA_Init+0x65c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d06d      	beq.n	80024b6 <HAL_DMA_Init+0x5c6>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a5c      	ldr	r2, [pc, #368]	; (8002550 <HAL_DMA_Init+0x660>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d068      	beq.n	80024b6 <HAL_DMA_Init+0x5c6>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a5a      	ldr	r2, [pc, #360]	; (8002554 <HAL_DMA_Init+0x664>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d063      	beq.n	80024b6 <HAL_DMA_Init+0x5c6>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a59      	ldr	r2, [pc, #356]	; (8002558 <HAL_DMA_Init+0x668>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d05e      	beq.n	80024b6 <HAL_DMA_Init+0x5c6>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a57      	ldr	r2, [pc, #348]	; (800255c <HAL_DMA_Init+0x66c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d059      	beq.n	80024b6 <HAL_DMA_Init+0x5c6>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a56      	ldr	r2, [pc, #344]	; (8002560 <HAL_DMA_Init+0x670>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d054      	beq.n	80024b6 <HAL_DMA_Init+0x5c6>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a54      	ldr	r2, [pc, #336]	; (8002564 <HAL_DMA_Init+0x674>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d04f      	beq.n	80024b6 <HAL_DMA_Init+0x5c6>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a53      	ldr	r2, [pc, #332]	; (8002568 <HAL_DMA_Init+0x678>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d04a      	beq.n	80024b6 <HAL_DMA_Init+0x5c6>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a51      	ldr	r2, [pc, #324]	; (800256c <HAL_DMA_Init+0x67c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d045      	beq.n	80024b6 <HAL_DMA_Init+0x5c6>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a50      	ldr	r2, [pc, #320]	; (8002570 <HAL_DMA_Init+0x680>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d040      	beq.n	80024b6 <HAL_DMA_Init+0x5c6>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a4e      	ldr	r2, [pc, #312]	; (8002574 <HAL_DMA_Init+0x684>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d03b      	beq.n	80024b6 <HAL_DMA_Init+0x5c6>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a4d      	ldr	r2, [pc, #308]	; (8002578 <HAL_DMA_Init+0x688>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d036      	beq.n	80024b6 <HAL_DMA_Init+0x5c6>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a4b      	ldr	r2, [pc, #300]	; (800257c <HAL_DMA_Init+0x68c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d031      	beq.n	80024b6 <HAL_DMA_Init+0x5c6>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a4a      	ldr	r2, [pc, #296]	; (8002580 <HAL_DMA_Init+0x690>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d02c      	beq.n	80024b6 <HAL_DMA_Init+0x5c6>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a48      	ldr	r2, [pc, #288]	; (8002584 <HAL_DMA_Init+0x694>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d027      	beq.n	80024b6 <HAL_DMA_Init+0x5c6>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a47      	ldr	r2, [pc, #284]	; (8002588 <HAL_DMA_Init+0x698>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d022      	beq.n	80024b6 <HAL_DMA_Init+0x5c6>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a45      	ldr	r2, [pc, #276]	; (800258c <HAL_DMA_Init+0x69c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d01d      	beq.n	80024b6 <HAL_DMA_Init+0x5c6>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a44      	ldr	r2, [pc, #272]	; (8002590 <HAL_DMA_Init+0x6a0>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d018      	beq.n	80024b6 <HAL_DMA_Init+0x5c6>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a42      	ldr	r2, [pc, #264]	; (8002594 <HAL_DMA_Init+0x6a4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d013      	beq.n	80024b6 <HAL_DMA_Init+0x5c6>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a41      	ldr	r2, [pc, #260]	; (8002598 <HAL_DMA_Init+0x6a8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d00e      	beq.n	80024b6 <HAL_DMA_Init+0x5c6>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a3f      	ldr	r2, [pc, #252]	; (800259c <HAL_DMA_Init+0x6ac>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d009      	beq.n	80024b6 <HAL_DMA_Init+0x5c6>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a3e      	ldr	r2, [pc, #248]	; (80025a0 <HAL_DMA_Init+0x6b0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d004      	beq.n	80024b6 <HAL_DMA_Init+0x5c6>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a3c      	ldr	r2, [pc, #240]	; (80025a4 <HAL_DMA_Init+0x6b4>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d101      	bne.n	80024ba <HAL_DMA_Init+0x5ca>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <HAL_DMA_Init+0x5cc>
 80024ba:	2300      	movs	r3, #0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d032      	beq.n	8002526 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f001 fffd 	bl	80044c0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2b80      	cmp	r3, #128	; 0x80
 80024cc:	d102      	bne.n	80024d4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80024e8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d010      	beq.n	8002514 <HAL_DMA_Init+0x624>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b08      	cmp	r3, #8
 80024f8:	d80c      	bhi.n	8002514 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f002 f87a 	bl	80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	e008      	b.n	8002526 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	a7fdabf8 	.word	0xa7fdabf8
 8002544:	cccccccd 	.word	0xcccccccd
 8002548:	40020010 	.word	0x40020010
 800254c:	40020028 	.word	0x40020028
 8002550:	40020040 	.word	0x40020040
 8002554:	40020058 	.word	0x40020058
 8002558:	40020070 	.word	0x40020070
 800255c:	40020088 	.word	0x40020088
 8002560:	400200a0 	.word	0x400200a0
 8002564:	400200b8 	.word	0x400200b8
 8002568:	40020410 	.word	0x40020410
 800256c:	40020428 	.word	0x40020428
 8002570:	40020440 	.word	0x40020440
 8002574:	40020458 	.word	0x40020458
 8002578:	40020470 	.word	0x40020470
 800257c:	40020488 	.word	0x40020488
 8002580:	400204a0 	.word	0x400204a0
 8002584:	400204b8 	.word	0x400204b8
 8002588:	58025408 	.word	0x58025408
 800258c:	5802541c 	.word	0x5802541c
 8002590:	58025430 	.word	0x58025430
 8002594:	58025444 	.word	0x58025444
 8002598:	58025458 	.word	0x58025458
 800259c:	5802546c 	.word	0x5802546c
 80025a0:	58025480 	.word	0x58025480
 80025a4:	58025494 	.word	0x58025494

080025a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
 80025b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e226      	b.n	8002a12 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_DMA_Start_IT+0x2a>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e21f      	b.n	8002a12 <HAL_DMA_Start_IT+0x46a>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	f040 820a 	bne.w	80029fc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2202      	movs	r2, #2
 80025ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a68      	ldr	r2, [pc, #416]	; (800279c <HAL_DMA_Start_IT+0x1f4>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d04a      	beq.n	8002696 <HAL_DMA_Start_IT+0xee>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a66      	ldr	r2, [pc, #408]	; (80027a0 <HAL_DMA_Start_IT+0x1f8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d045      	beq.n	8002696 <HAL_DMA_Start_IT+0xee>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a65      	ldr	r2, [pc, #404]	; (80027a4 <HAL_DMA_Start_IT+0x1fc>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d040      	beq.n	8002696 <HAL_DMA_Start_IT+0xee>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a63      	ldr	r2, [pc, #396]	; (80027a8 <HAL_DMA_Start_IT+0x200>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d03b      	beq.n	8002696 <HAL_DMA_Start_IT+0xee>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a62      	ldr	r2, [pc, #392]	; (80027ac <HAL_DMA_Start_IT+0x204>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d036      	beq.n	8002696 <HAL_DMA_Start_IT+0xee>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a60      	ldr	r2, [pc, #384]	; (80027b0 <HAL_DMA_Start_IT+0x208>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d031      	beq.n	8002696 <HAL_DMA_Start_IT+0xee>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a5f      	ldr	r2, [pc, #380]	; (80027b4 <HAL_DMA_Start_IT+0x20c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d02c      	beq.n	8002696 <HAL_DMA_Start_IT+0xee>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a5d      	ldr	r2, [pc, #372]	; (80027b8 <HAL_DMA_Start_IT+0x210>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d027      	beq.n	8002696 <HAL_DMA_Start_IT+0xee>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a5c      	ldr	r2, [pc, #368]	; (80027bc <HAL_DMA_Start_IT+0x214>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d022      	beq.n	8002696 <HAL_DMA_Start_IT+0xee>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a5a      	ldr	r2, [pc, #360]	; (80027c0 <HAL_DMA_Start_IT+0x218>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d01d      	beq.n	8002696 <HAL_DMA_Start_IT+0xee>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a59      	ldr	r2, [pc, #356]	; (80027c4 <HAL_DMA_Start_IT+0x21c>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d018      	beq.n	8002696 <HAL_DMA_Start_IT+0xee>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a57      	ldr	r2, [pc, #348]	; (80027c8 <HAL_DMA_Start_IT+0x220>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d013      	beq.n	8002696 <HAL_DMA_Start_IT+0xee>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a56      	ldr	r2, [pc, #344]	; (80027cc <HAL_DMA_Start_IT+0x224>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d00e      	beq.n	8002696 <HAL_DMA_Start_IT+0xee>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a54      	ldr	r2, [pc, #336]	; (80027d0 <HAL_DMA_Start_IT+0x228>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d009      	beq.n	8002696 <HAL_DMA_Start_IT+0xee>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a53      	ldr	r2, [pc, #332]	; (80027d4 <HAL_DMA_Start_IT+0x22c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d004      	beq.n	8002696 <HAL_DMA_Start_IT+0xee>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a51      	ldr	r2, [pc, #324]	; (80027d8 <HAL_DMA_Start_IT+0x230>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d108      	bne.n	80026a8 <HAL_DMA_Start_IT+0x100>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0201 	bic.w	r2, r2, #1
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	e007      	b.n	80026b8 <HAL_DMA_Start_IT+0x110>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0201 	bic.w	r2, r2, #1
 80026b6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68b9      	ldr	r1, [r7, #8]
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f001 fc24 	bl	8003f0c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a34      	ldr	r2, [pc, #208]	; (800279c <HAL_DMA_Start_IT+0x1f4>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d04a      	beq.n	8002764 <HAL_DMA_Start_IT+0x1bc>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a33      	ldr	r2, [pc, #204]	; (80027a0 <HAL_DMA_Start_IT+0x1f8>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d045      	beq.n	8002764 <HAL_DMA_Start_IT+0x1bc>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a31      	ldr	r2, [pc, #196]	; (80027a4 <HAL_DMA_Start_IT+0x1fc>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d040      	beq.n	8002764 <HAL_DMA_Start_IT+0x1bc>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a30      	ldr	r2, [pc, #192]	; (80027a8 <HAL_DMA_Start_IT+0x200>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d03b      	beq.n	8002764 <HAL_DMA_Start_IT+0x1bc>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a2e      	ldr	r2, [pc, #184]	; (80027ac <HAL_DMA_Start_IT+0x204>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d036      	beq.n	8002764 <HAL_DMA_Start_IT+0x1bc>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a2d      	ldr	r2, [pc, #180]	; (80027b0 <HAL_DMA_Start_IT+0x208>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d031      	beq.n	8002764 <HAL_DMA_Start_IT+0x1bc>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a2b      	ldr	r2, [pc, #172]	; (80027b4 <HAL_DMA_Start_IT+0x20c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d02c      	beq.n	8002764 <HAL_DMA_Start_IT+0x1bc>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a2a      	ldr	r2, [pc, #168]	; (80027b8 <HAL_DMA_Start_IT+0x210>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d027      	beq.n	8002764 <HAL_DMA_Start_IT+0x1bc>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a28      	ldr	r2, [pc, #160]	; (80027bc <HAL_DMA_Start_IT+0x214>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d022      	beq.n	8002764 <HAL_DMA_Start_IT+0x1bc>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a27      	ldr	r2, [pc, #156]	; (80027c0 <HAL_DMA_Start_IT+0x218>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d01d      	beq.n	8002764 <HAL_DMA_Start_IT+0x1bc>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a25      	ldr	r2, [pc, #148]	; (80027c4 <HAL_DMA_Start_IT+0x21c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d018      	beq.n	8002764 <HAL_DMA_Start_IT+0x1bc>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a24      	ldr	r2, [pc, #144]	; (80027c8 <HAL_DMA_Start_IT+0x220>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d013      	beq.n	8002764 <HAL_DMA_Start_IT+0x1bc>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a22      	ldr	r2, [pc, #136]	; (80027cc <HAL_DMA_Start_IT+0x224>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d00e      	beq.n	8002764 <HAL_DMA_Start_IT+0x1bc>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a21      	ldr	r2, [pc, #132]	; (80027d0 <HAL_DMA_Start_IT+0x228>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d009      	beq.n	8002764 <HAL_DMA_Start_IT+0x1bc>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a1f      	ldr	r2, [pc, #124]	; (80027d4 <HAL_DMA_Start_IT+0x22c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d004      	beq.n	8002764 <HAL_DMA_Start_IT+0x1bc>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a1e      	ldr	r2, [pc, #120]	; (80027d8 <HAL_DMA_Start_IT+0x230>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d101      	bne.n	8002768 <HAL_DMA_Start_IT+0x1c0>
 8002764:	2301      	movs	r3, #1
 8002766:	e000      	b.n	800276a <HAL_DMA_Start_IT+0x1c2>
 8002768:	2300      	movs	r3, #0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d036      	beq.n	80027dc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f023 021e 	bic.w	r2, r3, #30
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f042 0216 	orr.w	r2, r2, #22
 8002780:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	2b00      	cmp	r3, #0
 8002788:	d03e      	beq.n	8002808 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 0208 	orr.w	r2, r2, #8
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	e035      	b.n	8002808 <HAL_DMA_Start_IT+0x260>
 800279c:	40020010 	.word	0x40020010
 80027a0:	40020028 	.word	0x40020028
 80027a4:	40020040 	.word	0x40020040
 80027a8:	40020058 	.word	0x40020058
 80027ac:	40020070 	.word	0x40020070
 80027b0:	40020088 	.word	0x40020088
 80027b4:	400200a0 	.word	0x400200a0
 80027b8:	400200b8 	.word	0x400200b8
 80027bc:	40020410 	.word	0x40020410
 80027c0:	40020428 	.word	0x40020428
 80027c4:	40020440 	.word	0x40020440
 80027c8:	40020458 	.word	0x40020458
 80027cc:	40020470 	.word	0x40020470
 80027d0:	40020488 	.word	0x40020488
 80027d4:	400204a0 	.word	0x400204a0
 80027d8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 020e 	bic.w	r2, r3, #14
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 020a 	orr.w	r2, r2, #10
 80027ee:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d007      	beq.n	8002808 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0204 	orr.w	r2, r2, #4
 8002806:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a83      	ldr	r2, [pc, #524]	; (8002a1c <HAL_DMA_Start_IT+0x474>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d072      	beq.n	80028f8 <HAL_DMA_Start_IT+0x350>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a82      	ldr	r2, [pc, #520]	; (8002a20 <HAL_DMA_Start_IT+0x478>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d06d      	beq.n	80028f8 <HAL_DMA_Start_IT+0x350>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a80      	ldr	r2, [pc, #512]	; (8002a24 <HAL_DMA_Start_IT+0x47c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d068      	beq.n	80028f8 <HAL_DMA_Start_IT+0x350>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a7f      	ldr	r2, [pc, #508]	; (8002a28 <HAL_DMA_Start_IT+0x480>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d063      	beq.n	80028f8 <HAL_DMA_Start_IT+0x350>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a7d      	ldr	r2, [pc, #500]	; (8002a2c <HAL_DMA_Start_IT+0x484>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d05e      	beq.n	80028f8 <HAL_DMA_Start_IT+0x350>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a7c      	ldr	r2, [pc, #496]	; (8002a30 <HAL_DMA_Start_IT+0x488>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d059      	beq.n	80028f8 <HAL_DMA_Start_IT+0x350>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a7a      	ldr	r2, [pc, #488]	; (8002a34 <HAL_DMA_Start_IT+0x48c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d054      	beq.n	80028f8 <HAL_DMA_Start_IT+0x350>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a79      	ldr	r2, [pc, #484]	; (8002a38 <HAL_DMA_Start_IT+0x490>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d04f      	beq.n	80028f8 <HAL_DMA_Start_IT+0x350>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a77      	ldr	r2, [pc, #476]	; (8002a3c <HAL_DMA_Start_IT+0x494>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d04a      	beq.n	80028f8 <HAL_DMA_Start_IT+0x350>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a76      	ldr	r2, [pc, #472]	; (8002a40 <HAL_DMA_Start_IT+0x498>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d045      	beq.n	80028f8 <HAL_DMA_Start_IT+0x350>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a74      	ldr	r2, [pc, #464]	; (8002a44 <HAL_DMA_Start_IT+0x49c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d040      	beq.n	80028f8 <HAL_DMA_Start_IT+0x350>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a73      	ldr	r2, [pc, #460]	; (8002a48 <HAL_DMA_Start_IT+0x4a0>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d03b      	beq.n	80028f8 <HAL_DMA_Start_IT+0x350>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a71      	ldr	r2, [pc, #452]	; (8002a4c <HAL_DMA_Start_IT+0x4a4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d036      	beq.n	80028f8 <HAL_DMA_Start_IT+0x350>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a70      	ldr	r2, [pc, #448]	; (8002a50 <HAL_DMA_Start_IT+0x4a8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d031      	beq.n	80028f8 <HAL_DMA_Start_IT+0x350>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a6e      	ldr	r2, [pc, #440]	; (8002a54 <HAL_DMA_Start_IT+0x4ac>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d02c      	beq.n	80028f8 <HAL_DMA_Start_IT+0x350>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a6d      	ldr	r2, [pc, #436]	; (8002a58 <HAL_DMA_Start_IT+0x4b0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d027      	beq.n	80028f8 <HAL_DMA_Start_IT+0x350>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a6b      	ldr	r2, [pc, #428]	; (8002a5c <HAL_DMA_Start_IT+0x4b4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d022      	beq.n	80028f8 <HAL_DMA_Start_IT+0x350>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a6a      	ldr	r2, [pc, #424]	; (8002a60 <HAL_DMA_Start_IT+0x4b8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d01d      	beq.n	80028f8 <HAL_DMA_Start_IT+0x350>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a68      	ldr	r2, [pc, #416]	; (8002a64 <HAL_DMA_Start_IT+0x4bc>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d018      	beq.n	80028f8 <HAL_DMA_Start_IT+0x350>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a67      	ldr	r2, [pc, #412]	; (8002a68 <HAL_DMA_Start_IT+0x4c0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d013      	beq.n	80028f8 <HAL_DMA_Start_IT+0x350>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a65      	ldr	r2, [pc, #404]	; (8002a6c <HAL_DMA_Start_IT+0x4c4>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d00e      	beq.n	80028f8 <HAL_DMA_Start_IT+0x350>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a64      	ldr	r2, [pc, #400]	; (8002a70 <HAL_DMA_Start_IT+0x4c8>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d009      	beq.n	80028f8 <HAL_DMA_Start_IT+0x350>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a62      	ldr	r2, [pc, #392]	; (8002a74 <HAL_DMA_Start_IT+0x4cc>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d004      	beq.n	80028f8 <HAL_DMA_Start_IT+0x350>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a61      	ldr	r2, [pc, #388]	; (8002a78 <HAL_DMA_Start_IT+0x4d0>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d101      	bne.n	80028fc <HAL_DMA_Start_IT+0x354>
 80028f8:	2301      	movs	r3, #1
 80028fa:	e000      	b.n	80028fe <HAL_DMA_Start_IT+0x356>
 80028fc:	2300      	movs	r3, #0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d01a      	beq.n	8002938 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d007      	beq.n	8002920 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800291a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800291e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002924:	2b00      	cmp	r3, #0
 8002926:	d007      	beq.n	8002938 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002932:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002936:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a37      	ldr	r2, [pc, #220]	; (8002a1c <HAL_DMA_Start_IT+0x474>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d04a      	beq.n	80029d8 <HAL_DMA_Start_IT+0x430>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a36      	ldr	r2, [pc, #216]	; (8002a20 <HAL_DMA_Start_IT+0x478>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d045      	beq.n	80029d8 <HAL_DMA_Start_IT+0x430>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a34      	ldr	r2, [pc, #208]	; (8002a24 <HAL_DMA_Start_IT+0x47c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d040      	beq.n	80029d8 <HAL_DMA_Start_IT+0x430>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a33      	ldr	r2, [pc, #204]	; (8002a28 <HAL_DMA_Start_IT+0x480>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d03b      	beq.n	80029d8 <HAL_DMA_Start_IT+0x430>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a31      	ldr	r2, [pc, #196]	; (8002a2c <HAL_DMA_Start_IT+0x484>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d036      	beq.n	80029d8 <HAL_DMA_Start_IT+0x430>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a30      	ldr	r2, [pc, #192]	; (8002a30 <HAL_DMA_Start_IT+0x488>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d031      	beq.n	80029d8 <HAL_DMA_Start_IT+0x430>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a2e      	ldr	r2, [pc, #184]	; (8002a34 <HAL_DMA_Start_IT+0x48c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d02c      	beq.n	80029d8 <HAL_DMA_Start_IT+0x430>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a2d      	ldr	r2, [pc, #180]	; (8002a38 <HAL_DMA_Start_IT+0x490>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d027      	beq.n	80029d8 <HAL_DMA_Start_IT+0x430>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a2b      	ldr	r2, [pc, #172]	; (8002a3c <HAL_DMA_Start_IT+0x494>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d022      	beq.n	80029d8 <HAL_DMA_Start_IT+0x430>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a2a      	ldr	r2, [pc, #168]	; (8002a40 <HAL_DMA_Start_IT+0x498>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d01d      	beq.n	80029d8 <HAL_DMA_Start_IT+0x430>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a28      	ldr	r2, [pc, #160]	; (8002a44 <HAL_DMA_Start_IT+0x49c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d018      	beq.n	80029d8 <HAL_DMA_Start_IT+0x430>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a27      	ldr	r2, [pc, #156]	; (8002a48 <HAL_DMA_Start_IT+0x4a0>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d013      	beq.n	80029d8 <HAL_DMA_Start_IT+0x430>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a25      	ldr	r2, [pc, #148]	; (8002a4c <HAL_DMA_Start_IT+0x4a4>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d00e      	beq.n	80029d8 <HAL_DMA_Start_IT+0x430>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a24      	ldr	r2, [pc, #144]	; (8002a50 <HAL_DMA_Start_IT+0x4a8>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d009      	beq.n	80029d8 <HAL_DMA_Start_IT+0x430>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a22      	ldr	r2, [pc, #136]	; (8002a54 <HAL_DMA_Start_IT+0x4ac>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d004      	beq.n	80029d8 <HAL_DMA_Start_IT+0x430>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a21      	ldr	r2, [pc, #132]	; (8002a58 <HAL_DMA_Start_IT+0x4b0>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d108      	bne.n	80029ea <HAL_DMA_Start_IT+0x442>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	e012      	b.n	8002a10 <HAL_DMA_Start_IT+0x468>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 0201 	orr.w	r2, r2, #1
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	e009      	b.n	8002a10 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a02:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40020010 	.word	0x40020010
 8002a20:	40020028 	.word	0x40020028
 8002a24:	40020040 	.word	0x40020040
 8002a28:	40020058 	.word	0x40020058
 8002a2c:	40020070 	.word	0x40020070
 8002a30:	40020088 	.word	0x40020088
 8002a34:	400200a0 	.word	0x400200a0
 8002a38:	400200b8 	.word	0x400200b8
 8002a3c:	40020410 	.word	0x40020410
 8002a40:	40020428 	.word	0x40020428
 8002a44:	40020440 	.word	0x40020440
 8002a48:	40020458 	.word	0x40020458
 8002a4c:	40020470 	.word	0x40020470
 8002a50:	40020488 	.word	0x40020488
 8002a54:	400204a0 	.word	0x400204a0
 8002a58:	400204b8 	.word	0x400204b8
 8002a5c:	58025408 	.word	0x58025408
 8002a60:	5802541c 	.word	0x5802541c
 8002a64:	58025430 	.word	0x58025430
 8002a68:	58025444 	.word	0x58025444
 8002a6c:	58025458 	.word	0x58025458
 8002a70:	5802546c 	.word	0x5802546c
 8002a74:	58025480 	.word	0x58025480
 8002a78:	58025494 	.word	0x58025494

08002a7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002a84:	f7ff f8e8 	bl	8001c58 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e2dc      	b.n	800304e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d008      	beq.n	8002ab2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2280      	movs	r2, #128	; 0x80
 8002aa4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e2cd      	b.n	800304e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a76      	ldr	r2, [pc, #472]	; (8002c90 <HAL_DMA_Abort+0x214>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d04a      	beq.n	8002b52 <HAL_DMA_Abort+0xd6>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a74      	ldr	r2, [pc, #464]	; (8002c94 <HAL_DMA_Abort+0x218>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d045      	beq.n	8002b52 <HAL_DMA_Abort+0xd6>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a73      	ldr	r2, [pc, #460]	; (8002c98 <HAL_DMA_Abort+0x21c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d040      	beq.n	8002b52 <HAL_DMA_Abort+0xd6>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a71      	ldr	r2, [pc, #452]	; (8002c9c <HAL_DMA_Abort+0x220>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d03b      	beq.n	8002b52 <HAL_DMA_Abort+0xd6>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a70      	ldr	r2, [pc, #448]	; (8002ca0 <HAL_DMA_Abort+0x224>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d036      	beq.n	8002b52 <HAL_DMA_Abort+0xd6>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a6e      	ldr	r2, [pc, #440]	; (8002ca4 <HAL_DMA_Abort+0x228>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d031      	beq.n	8002b52 <HAL_DMA_Abort+0xd6>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a6d      	ldr	r2, [pc, #436]	; (8002ca8 <HAL_DMA_Abort+0x22c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d02c      	beq.n	8002b52 <HAL_DMA_Abort+0xd6>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a6b      	ldr	r2, [pc, #428]	; (8002cac <HAL_DMA_Abort+0x230>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d027      	beq.n	8002b52 <HAL_DMA_Abort+0xd6>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a6a      	ldr	r2, [pc, #424]	; (8002cb0 <HAL_DMA_Abort+0x234>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d022      	beq.n	8002b52 <HAL_DMA_Abort+0xd6>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a68      	ldr	r2, [pc, #416]	; (8002cb4 <HAL_DMA_Abort+0x238>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d01d      	beq.n	8002b52 <HAL_DMA_Abort+0xd6>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a67      	ldr	r2, [pc, #412]	; (8002cb8 <HAL_DMA_Abort+0x23c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d018      	beq.n	8002b52 <HAL_DMA_Abort+0xd6>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a65      	ldr	r2, [pc, #404]	; (8002cbc <HAL_DMA_Abort+0x240>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d013      	beq.n	8002b52 <HAL_DMA_Abort+0xd6>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a64      	ldr	r2, [pc, #400]	; (8002cc0 <HAL_DMA_Abort+0x244>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d00e      	beq.n	8002b52 <HAL_DMA_Abort+0xd6>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a62      	ldr	r2, [pc, #392]	; (8002cc4 <HAL_DMA_Abort+0x248>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d009      	beq.n	8002b52 <HAL_DMA_Abort+0xd6>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a61      	ldr	r2, [pc, #388]	; (8002cc8 <HAL_DMA_Abort+0x24c>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d004      	beq.n	8002b52 <HAL_DMA_Abort+0xd6>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a5f      	ldr	r2, [pc, #380]	; (8002ccc <HAL_DMA_Abort+0x250>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d101      	bne.n	8002b56 <HAL_DMA_Abort+0xda>
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <HAL_DMA_Abort+0xdc>
 8002b56:	2300      	movs	r3, #0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d013      	beq.n	8002b84 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 021e 	bic.w	r2, r2, #30
 8002b6a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	695a      	ldr	r2, [r3, #20]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b7a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	e00a      	b.n	8002b9a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 020e 	bic.w	r2, r2, #14
 8002b92:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a3c      	ldr	r2, [pc, #240]	; (8002c90 <HAL_DMA_Abort+0x214>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d072      	beq.n	8002c8a <HAL_DMA_Abort+0x20e>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a3a      	ldr	r2, [pc, #232]	; (8002c94 <HAL_DMA_Abort+0x218>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d06d      	beq.n	8002c8a <HAL_DMA_Abort+0x20e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a39      	ldr	r2, [pc, #228]	; (8002c98 <HAL_DMA_Abort+0x21c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d068      	beq.n	8002c8a <HAL_DMA_Abort+0x20e>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a37      	ldr	r2, [pc, #220]	; (8002c9c <HAL_DMA_Abort+0x220>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d063      	beq.n	8002c8a <HAL_DMA_Abort+0x20e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a36      	ldr	r2, [pc, #216]	; (8002ca0 <HAL_DMA_Abort+0x224>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d05e      	beq.n	8002c8a <HAL_DMA_Abort+0x20e>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a34      	ldr	r2, [pc, #208]	; (8002ca4 <HAL_DMA_Abort+0x228>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d059      	beq.n	8002c8a <HAL_DMA_Abort+0x20e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a33      	ldr	r2, [pc, #204]	; (8002ca8 <HAL_DMA_Abort+0x22c>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d054      	beq.n	8002c8a <HAL_DMA_Abort+0x20e>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a31      	ldr	r2, [pc, #196]	; (8002cac <HAL_DMA_Abort+0x230>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d04f      	beq.n	8002c8a <HAL_DMA_Abort+0x20e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a30      	ldr	r2, [pc, #192]	; (8002cb0 <HAL_DMA_Abort+0x234>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d04a      	beq.n	8002c8a <HAL_DMA_Abort+0x20e>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a2e      	ldr	r2, [pc, #184]	; (8002cb4 <HAL_DMA_Abort+0x238>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d045      	beq.n	8002c8a <HAL_DMA_Abort+0x20e>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a2d      	ldr	r2, [pc, #180]	; (8002cb8 <HAL_DMA_Abort+0x23c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d040      	beq.n	8002c8a <HAL_DMA_Abort+0x20e>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a2b      	ldr	r2, [pc, #172]	; (8002cbc <HAL_DMA_Abort+0x240>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d03b      	beq.n	8002c8a <HAL_DMA_Abort+0x20e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a2a      	ldr	r2, [pc, #168]	; (8002cc0 <HAL_DMA_Abort+0x244>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d036      	beq.n	8002c8a <HAL_DMA_Abort+0x20e>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a28      	ldr	r2, [pc, #160]	; (8002cc4 <HAL_DMA_Abort+0x248>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d031      	beq.n	8002c8a <HAL_DMA_Abort+0x20e>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a27      	ldr	r2, [pc, #156]	; (8002cc8 <HAL_DMA_Abort+0x24c>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d02c      	beq.n	8002c8a <HAL_DMA_Abort+0x20e>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a25      	ldr	r2, [pc, #148]	; (8002ccc <HAL_DMA_Abort+0x250>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d027      	beq.n	8002c8a <HAL_DMA_Abort+0x20e>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a24      	ldr	r2, [pc, #144]	; (8002cd0 <HAL_DMA_Abort+0x254>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d022      	beq.n	8002c8a <HAL_DMA_Abort+0x20e>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a22      	ldr	r2, [pc, #136]	; (8002cd4 <HAL_DMA_Abort+0x258>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d01d      	beq.n	8002c8a <HAL_DMA_Abort+0x20e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a21      	ldr	r2, [pc, #132]	; (8002cd8 <HAL_DMA_Abort+0x25c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d018      	beq.n	8002c8a <HAL_DMA_Abort+0x20e>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a1f      	ldr	r2, [pc, #124]	; (8002cdc <HAL_DMA_Abort+0x260>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d013      	beq.n	8002c8a <HAL_DMA_Abort+0x20e>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a1e      	ldr	r2, [pc, #120]	; (8002ce0 <HAL_DMA_Abort+0x264>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d00e      	beq.n	8002c8a <HAL_DMA_Abort+0x20e>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a1c      	ldr	r2, [pc, #112]	; (8002ce4 <HAL_DMA_Abort+0x268>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d009      	beq.n	8002c8a <HAL_DMA_Abort+0x20e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a1b      	ldr	r2, [pc, #108]	; (8002ce8 <HAL_DMA_Abort+0x26c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d004      	beq.n	8002c8a <HAL_DMA_Abort+0x20e>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a19      	ldr	r2, [pc, #100]	; (8002cec <HAL_DMA_Abort+0x270>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d132      	bne.n	8002cf0 <HAL_DMA_Abort+0x274>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e031      	b.n	8002cf2 <HAL_DMA_Abort+0x276>
 8002c8e:	bf00      	nop
 8002c90:	40020010 	.word	0x40020010
 8002c94:	40020028 	.word	0x40020028
 8002c98:	40020040 	.word	0x40020040
 8002c9c:	40020058 	.word	0x40020058
 8002ca0:	40020070 	.word	0x40020070
 8002ca4:	40020088 	.word	0x40020088
 8002ca8:	400200a0 	.word	0x400200a0
 8002cac:	400200b8 	.word	0x400200b8
 8002cb0:	40020410 	.word	0x40020410
 8002cb4:	40020428 	.word	0x40020428
 8002cb8:	40020440 	.word	0x40020440
 8002cbc:	40020458 	.word	0x40020458
 8002cc0:	40020470 	.word	0x40020470
 8002cc4:	40020488 	.word	0x40020488
 8002cc8:	400204a0 	.word	0x400204a0
 8002ccc:	400204b8 	.word	0x400204b8
 8002cd0:	58025408 	.word	0x58025408
 8002cd4:	5802541c 	.word	0x5802541c
 8002cd8:	58025430 	.word	0x58025430
 8002cdc:	58025444 	.word	0x58025444
 8002ce0:	58025458 	.word	0x58025458
 8002ce4:	5802546c 	.word	0x5802546c
 8002ce8:	58025480 	.word	0x58025480
 8002cec:	58025494 	.word	0x58025494
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d007      	beq.n	8002d06 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d04:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a6d      	ldr	r2, [pc, #436]	; (8002ec0 <HAL_DMA_Abort+0x444>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d04a      	beq.n	8002da6 <HAL_DMA_Abort+0x32a>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a6b      	ldr	r2, [pc, #428]	; (8002ec4 <HAL_DMA_Abort+0x448>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d045      	beq.n	8002da6 <HAL_DMA_Abort+0x32a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a6a      	ldr	r2, [pc, #424]	; (8002ec8 <HAL_DMA_Abort+0x44c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d040      	beq.n	8002da6 <HAL_DMA_Abort+0x32a>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a68      	ldr	r2, [pc, #416]	; (8002ecc <HAL_DMA_Abort+0x450>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d03b      	beq.n	8002da6 <HAL_DMA_Abort+0x32a>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a67      	ldr	r2, [pc, #412]	; (8002ed0 <HAL_DMA_Abort+0x454>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d036      	beq.n	8002da6 <HAL_DMA_Abort+0x32a>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a65      	ldr	r2, [pc, #404]	; (8002ed4 <HAL_DMA_Abort+0x458>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d031      	beq.n	8002da6 <HAL_DMA_Abort+0x32a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a64      	ldr	r2, [pc, #400]	; (8002ed8 <HAL_DMA_Abort+0x45c>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d02c      	beq.n	8002da6 <HAL_DMA_Abort+0x32a>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a62      	ldr	r2, [pc, #392]	; (8002edc <HAL_DMA_Abort+0x460>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d027      	beq.n	8002da6 <HAL_DMA_Abort+0x32a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a61      	ldr	r2, [pc, #388]	; (8002ee0 <HAL_DMA_Abort+0x464>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d022      	beq.n	8002da6 <HAL_DMA_Abort+0x32a>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a5f      	ldr	r2, [pc, #380]	; (8002ee4 <HAL_DMA_Abort+0x468>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d01d      	beq.n	8002da6 <HAL_DMA_Abort+0x32a>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a5e      	ldr	r2, [pc, #376]	; (8002ee8 <HAL_DMA_Abort+0x46c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d018      	beq.n	8002da6 <HAL_DMA_Abort+0x32a>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a5c      	ldr	r2, [pc, #368]	; (8002eec <HAL_DMA_Abort+0x470>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d013      	beq.n	8002da6 <HAL_DMA_Abort+0x32a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a5b      	ldr	r2, [pc, #364]	; (8002ef0 <HAL_DMA_Abort+0x474>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d00e      	beq.n	8002da6 <HAL_DMA_Abort+0x32a>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a59      	ldr	r2, [pc, #356]	; (8002ef4 <HAL_DMA_Abort+0x478>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d009      	beq.n	8002da6 <HAL_DMA_Abort+0x32a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a58      	ldr	r2, [pc, #352]	; (8002ef8 <HAL_DMA_Abort+0x47c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d004      	beq.n	8002da6 <HAL_DMA_Abort+0x32a>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a56      	ldr	r2, [pc, #344]	; (8002efc <HAL_DMA_Abort+0x480>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d108      	bne.n	8002db8 <HAL_DMA_Abort+0x33c>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0201 	bic.w	r2, r2, #1
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	e007      	b.n	8002dc8 <HAL_DMA_Abort+0x34c>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002dc8:	e013      	b.n	8002df2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dca:	f7fe ff45 	bl	8001c58 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b05      	cmp	r3, #5
 8002dd6:	d90c      	bls.n	8002df2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2203      	movs	r2, #3
 8002de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e12d      	b.n	800304e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1e5      	bne.n	8002dca <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a2f      	ldr	r2, [pc, #188]	; (8002ec0 <HAL_DMA_Abort+0x444>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d04a      	beq.n	8002e9e <HAL_DMA_Abort+0x422>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a2d      	ldr	r2, [pc, #180]	; (8002ec4 <HAL_DMA_Abort+0x448>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d045      	beq.n	8002e9e <HAL_DMA_Abort+0x422>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a2c      	ldr	r2, [pc, #176]	; (8002ec8 <HAL_DMA_Abort+0x44c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d040      	beq.n	8002e9e <HAL_DMA_Abort+0x422>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a2a      	ldr	r2, [pc, #168]	; (8002ecc <HAL_DMA_Abort+0x450>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d03b      	beq.n	8002e9e <HAL_DMA_Abort+0x422>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a29      	ldr	r2, [pc, #164]	; (8002ed0 <HAL_DMA_Abort+0x454>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d036      	beq.n	8002e9e <HAL_DMA_Abort+0x422>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a27      	ldr	r2, [pc, #156]	; (8002ed4 <HAL_DMA_Abort+0x458>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d031      	beq.n	8002e9e <HAL_DMA_Abort+0x422>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a26      	ldr	r2, [pc, #152]	; (8002ed8 <HAL_DMA_Abort+0x45c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d02c      	beq.n	8002e9e <HAL_DMA_Abort+0x422>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a24      	ldr	r2, [pc, #144]	; (8002edc <HAL_DMA_Abort+0x460>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d027      	beq.n	8002e9e <HAL_DMA_Abort+0x422>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a23      	ldr	r2, [pc, #140]	; (8002ee0 <HAL_DMA_Abort+0x464>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d022      	beq.n	8002e9e <HAL_DMA_Abort+0x422>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a21      	ldr	r2, [pc, #132]	; (8002ee4 <HAL_DMA_Abort+0x468>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d01d      	beq.n	8002e9e <HAL_DMA_Abort+0x422>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a20      	ldr	r2, [pc, #128]	; (8002ee8 <HAL_DMA_Abort+0x46c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d018      	beq.n	8002e9e <HAL_DMA_Abort+0x422>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1e      	ldr	r2, [pc, #120]	; (8002eec <HAL_DMA_Abort+0x470>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d013      	beq.n	8002e9e <HAL_DMA_Abort+0x422>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1d      	ldr	r2, [pc, #116]	; (8002ef0 <HAL_DMA_Abort+0x474>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d00e      	beq.n	8002e9e <HAL_DMA_Abort+0x422>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a1b      	ldr	r2, [pc, #108]	; (8002ef4 <HAL_DMA_Abort+0x478>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d009      	beq.n	8002e9e <HAL_DMA_Abort+0x422>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1a      	ldr	r2, [pc, #104]	; (8002ef8 <HAL_DMA_Abort+0x47c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d004      	beq.n	8002e9e <HAL_DMA_Abort+0x422>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a18      	ldr	r2, [pc, #96]	; (8002efc <HAL_DMA_Abort+0x480>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d101      	bne.n	8002ea2 <HAL_DMA_Abort+0x426>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <HAL_DMA_Abort+0x428>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d02b      	beq.n	8002f00 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eac:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	223f      	movs	r2, #63	; 0x3f
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	609a      	str	r2, [r3, #8]
 8002ebe:	e02a      	b.n	8002f16 <HAL_DMA_Abort+0x49a>
 8002ec0:	40020010 	.word	0x40020010
 8002ec4:	40020028 	.word	0x40020028
 8002ec8:	40020040 	.word	0x40020040
 8002ecc:	40020058 	.word	0x40020058
 8002ed0:	40020070 	.word	0x40020070
 8002ed4:	40020088 	.word	0x40020088
 8002ed8:	400200a0 	.word	0x400200a0
 8002edc:	400200b8 	.word	0x400200b8
 8002ee0:	40020410 	.word	0x40020410
 8002ee4:	40020428 	.word	0x40020428
 8002ee8:	40020440 	.word	0x40020440
 8002eec:	40020458 	.word	0x40020458
 8002ef0:	40020470 	.word	0x40020470
 8002ef4:	40020488 	.word	0x40020488
 8002ef8:	400204a0 	.word	0x400204a0
 8002efc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f04:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0a:	f003 031f 	and.w	r3, r3, #31
 8002f0e:	2201      	movs	r2, #1
 8002f10:	409a      	lsls	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a4f      	ldr	r2, [pc, #316]	; (8003058 <HAL_DMA_Abort+0x5dc>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d072      	beq.n	8003006 <HAL_DMA_Abort+0x58a>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a4d      	ldr	r2, [pc, #308]	; (800305c <HAL_DMA_Abort+0x5e0>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d06d      	beq.n	8003006 <HAL_DMA_Abort+0x58a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a4c      	ldr	r2, [pc, #304]	; (8003060 <HAL_DMA_Abort+0x5e4>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d068      	beq.n	8003006 <HAL_DMA_Abort+0x58a>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a4a      	ldr	r2, [pc, #296]	; (8003064 <HAL_DMA_Abort+0x5e8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d063      	beq.n	8003006 <HAL_DMA_Abort+0x58a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a49      	ldr	r2, [pc, #292]	; (8003068 <HAL_DMA_Abort+0x5ec>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d05e      	beq.n	8003006 <HAL_DMA_Abort+0x58a>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a47      	ldr	r2, [pc, #284]	; (800306c <HAL_DMA_Abort+0x5f0>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d059      	beq.n	8003006 <HAL_DMA_Abort+0x58a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a46      	ldr	r2, [pc, #280]	; (8003070 <HAL_DMA_Abort+0x5f4>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d054      	beq.n	8003006 <HAL_DMA_Abort+0x58a>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a44      	ldr	r2, [pc, #272]	; (8003074 <HAL_DMA_Abort+0x5f8>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d04f      	beq.n	8003006 <HAL_DMA_Abort+0x58a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a43      	ldr	r2, [pc, #268]	; (8003078 <HAL_DMA_Abort+0x5fc>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d04a      	beq.n	8003006 <HAL_DMA_Abort+0x58a>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a41      	ldr	r2, [pc, #260]	; (800307c <HAL_DMA_Abort+0x600>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d045      	beq.n	8003006 <HAL_DMA_Abort+0x58a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a40      	ldr	r2, [pc, #256]	; (8003080 <HAL_DMA_Abort+0x604>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d040      	beq.n	8003006 <HAL_DMA_Abort+0x58a>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a3e      	ldr	r2, [pc, #248]	; (8003084 <HAL_DMA_Abort+0x608>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d03b      	beq.n	8003006 <HAL_DMA_Abort+0x58a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a3d      	ldr	r2, [pc, #244]	; (8003088 <HAL_DMA_Abort+0x60c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d036      	beq.n	8003006 <HAL_DMA_Abort+0x58a>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a3b      	ldr	r2, [pc, #236]	; (800308c <HAL_DMA_Abort+0x610>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d031      	beq.n	8003006 <HAL_DMA_Abort+0x58a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a3a      	ldr	r2, [pc, #232]	; (8003090 <HAL_DMA_Abort+0x614>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d02c      	beq.n	8003006 <HAL_DMA_Abort+0x58a>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a38      	ldr	r2, [pc, #224]	; (8003094 <HAL_DMA_Abort+0x618>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d027      	beq.n	8003006 <HAL_DMA_Abort+0x58a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a37      	ldr	r2, [pc, #220]	; (8003098 <HAL_DMA_Abort+0x61c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d022      	beq.n	8003006 <HAL_DMA_Abort+0x58a>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a35      	ldr	r2, [pc, #212]	; (800309c <HAL_DMA_Abort+0x620>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d01d      	beq.n	8003006 <HAL_DMA_Abort+0x58a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a34      	ldr	r2, [pc, #208]	; (80030a0 <HAL_DMA_Abort+0x624>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d018      	beq.n	8003006 <HAL_DMA_Abort+0x58a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a32      	ldr	r2, [pc, #200]	; (80030a4 <HAL_DMA_Abort+0x628>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d013      	beq.n	8003006 <HAL_DMA_Abort+0x58a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a31      	ldr	r2, [pc, #196]	; (80030a8 <HAL_DMA_Abort+0x62c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d00e      	beq.n	8003006 <HAL_DMA_Abort+0x58a>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a2f      	ldr	r2, [pc, #188]	; (80030ac <HAL_DMA_Abort+0x630>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d009      	beq.n	8003006 <HAL_DMA_Abort+0x58a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a2e      	ldr	r2, [pc, #184]	; (80030b0 <HAL_DMA_Abort+0x634>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d004      	beq.n	8003006 <HAL_DMA_Abort+0x58a>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a2c      	ldr	r2, [pc, #176]	; (80030b4 <HAL_DMA_Abort+0x638>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d101      	bne.n	800300a <HAL_DMA_Abort+0x58e>
 8003006:	2301      	movs	r3, #1
 8003008:	e000      	b.n	800300c <HAL_DMA_Abort+0x590>
 800300a:	2300      	movs	r3, #0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d015      	beq.n	800303c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003018:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00c      	beq.n	800303c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800302c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003030:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800303a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40020010 	.word	0x40020010
 800305c:	40020028 	.word	0x40020028
 8003060:	40020040 	.word	0x40020040
 8003064:	40020058 	.word	0x40020058
 8003068:	40020070 	.word	0x40020070
 800306c:	40020088 	.word	0x40020088
 8003070:	400200a0 	.word	0x400200a0
 8003074:	400200b8 	.word	0x400200b8
 8003078:	40020410 	.word	0x40020410
 800307c:	40020428 	.word	0x40020428
 8003080:	40020440 	.word	0x40020440
 8003084:	40020458 	.word	0x40020458
 8003088:	40020470 	.word	0x40020470
 800308c:	40020488 	.word	0x40020488
 8003090:	400204a0 	.word	0x400204a0
 8003094:	400204b8 	.word	0x400204b8
 8003098:	58025408 	.word	0x58025408
 800309c:	5802541c 	.word	0x5802541c
 80030a0:	58025430 	.word	0x58025430
 80030a4:	58025444 	.word	0x58025444
 80030a8:	58025458 	.word	0x58025458
 80030ac:	5802546c 	.word	0x5802546c
 80030b0:	58025480 	.word	0x58025480
 80030b4:	58025494 	.word	0x58025494

080030b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08a      	sub	sp, #40	; 0x28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030c4:	4b67      	ldr	r3, [pc, #412]	; (8003264 <HAL_DMA_IRQHandler+0x1ac>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a67      	ldr	r2, [pc, #412]	; (8003268 <HAL_DMA_IRQHandler+0x1b0>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	0a9b      	lsrs	r3, r3, #10
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030dc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a5f      	ldr	r2, [pc, #380]	; (800326c <HAL_DMA_IRQHandler+0x1b4>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d04a      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a5d      	ldr	r2, [pc, #372]	; (8003270 <HAL_DMA_IRQHandler+0x1b8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d045      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a5c      	ldr	r2, [pc, #368]	; (8003274 <HAL_DMA_IRQHandler+0x1bc>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d040      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a5a      	ldr	r2, [pc, #360]	; (8003278 <HAL_DMA_IRQHandler+0x1c0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d03b      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a59      	ldr	r2, [pc, #356]	; (800327c <HAL_DMA_IRQHandler+0x1c4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d036      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a57      	ldr	r2, [pc, #348]	; (8003280 <HAL_DMA_IRQHandler+0x1c8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d031      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a56      	ldr	r2, [pc, #344]	; (8003284 <HAL_DMA_IRQHandler+0x1cc>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d02c      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a54      	ldr	r2, [pc, #336]	; (8003288 <HAL_DMA_IRQHandler+0x1d0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d027      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a53      	ldr	r2, [pc, #332]	; (800328c <HAL_DMA_IRQHandler+0x1d4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d022      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a51      	ldr	r2, [pc, #324]	; (8003290 <HAL_DMA_IRQHandler+0x1d8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d01d      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a50      	ldr	r2, [pc, #320]	; (8003294 <HAL_DMA_IRQHandler+0x1dc>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d018      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a4e      	ldr	r2, [pc, #312]	; (8003298 <HAL_DMA_IRQHandler+0x1e0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d013      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a4d      	ldr	r2, [pc, #308]	; (800329c <HAL_DMA_IRQHandler+0x1e4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d00e      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a4b      	ldr	r2, [pc, #300]	; (80032a0 <HAL_DMA_IRQHandler+0x1e8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d009      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a4a      	ldr	r2, [pc, #296]	; (80032a4 <HAL_DMA_IRQHandler+0x1ec>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d004      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a48      	ldr	r2, [pc, #288]	; (80032a8 <HAL_DMA_IRQHandler+0x1f0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d101      	bne.n	800318e <HAL_DMA_IRQHandler+0xd6>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <HAL_DMA_IRQHandler+0xd8>
 800318e:	2300      	movs	r3, #0
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 842b 	beq.w	80039ec <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319a:	f003 031f 	and.w	r3, r3, #31
 800319e:	2208      	movs	r2, #8
 80031a0:	409a      	lsls	r2, r3
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 80a2 	beq.w	80032f0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a2e      	ldr	r2, [pc, #184]	; (800326c <HAL_DMA_IRQHandler+0x1b4>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d04a      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a2d      	ldr	r2, [pc, #180]	; (8003270 <HAL_DMA_IRQHandler+0x1b8>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d045      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a2b      	ldr	r2, [pc, #172]	; (8003274 <HAL_DMA_IRQHandler+0x1bc>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d040      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a2a      	ldr	r2, [pc, #168]	; (8003278 <HAL_DMA_IRQHandler+0x1c0>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d03b      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a28      	ldr	r2, [pc, #160]	; (800327c <HAL_DMA_IRQHandler+0x1c4>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d036      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a27      	ldr	r2, [pc, #156]	; (8003280 <HAL_DMA_IRQHandler+0x1c8>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d031      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a25      	ldr	r2, [pc, #148]	; (8003284 <HAL_DMA_IRQHandler+0x1cc>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d02c      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a24      	ldr	r2, [pc, #144]	; (8003288 <HAL_DMA_IRQHandler+0x1d0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d027      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a22      	ldr	r2, [pc, #136]	; (800328c <HAL_DMA_IRQHandler+0x1d4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d022      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a21      	ldr	r2, [pc, #132]	; (8003290 <HAL_DMA_IRQHandler+0x1d8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d01d      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a1f      	ldr	r2, [pc, #124]	; (8003294 <HAL_DMA_IRQHandler+0x1dc>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d018      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a1e      	ldr	r2, [pc, #120]	; (8003298 <HAL_DMA_IRQHandler+0x1e0>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d013      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a1c      	ldr	r2, [pc, #112]	; (800329c <HAL_DMA_IRQHandler+0x1e4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d00e      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a1b      	ldr	r2, [pc, #108]	; (80032a0 <HAL_DMA_IRQHandler+0x1e8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d009      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a19      	ldr	r2, [pc, #100]	; (80032a4 <HAL_DMA_IRQHandler+0x1ec>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d004      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a18      	ldr	r2, [pc, #96]	; (80032a8 <HAL_DMA_IRQHandler+0x1f0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d12f      	bne.n	80032ac <HAL_DMA_IRQHandler+0x1f4>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	2b00      	cmp	r3, #0
 8003258:	bf14      	ite	ne
 800325a:	2301      	movne	r3, #1
 800325c:	2300      	moveq	r3, #0
 800325e:	b2db      	uxtb	r3, r3
 8003260:	e02e      	b.n	80032c0 <HAL_DMA_IRQHandler+0x208>
 8003262:	bf00      	nop
 8003264:	24000008 	.word	0x24000008
 8003268:	1b4e81b5 	.word	0x1b4e81b5
 800326c:	40020010 	.word	0x40020010
 8003270:	40020028 	.word	0x40020028
 8003274:	40020040 	.word	0x40020040
 8003278:	40020058 	.word	0x40020058
 800327c:	40020070 	.word	0x40020070
 8003280:	40020088 	.word	0x40020088
 8003284:	400200a0 	.word	0x400200a0
 8003288:	400200b8 	.word	0x400200b8
 800328c:	40020410 	.word	0x40020410
 8003290:	40020428 	.word	0x40020428
 8003294:	40020440 	.word	0x40020440
 8003298:	40020458 	.word	0x40020458
 800329c:	40020470 	.word	0x40020470
 80032a0:	40020488 	.word	0x40020488
 80032a4:	400204a0 	.word	0x400204a0
 80032a8:	400204b8 	.word	0x400204b8
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	bf14      	ite	ne
 80032ba:	2301      	movne	r3, #1
 80032bc:	2300      	moveq	r3, #0
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d015      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0204 	bic.w	r2, r2, #4
 80032d2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d8:	f003 031f 	and.w	r3, r3, #31
 80032dc:	2208      	movs	r2, #8
 80032de:	409a      	lsls	r2, r3
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e8:	f043 0201 	orr.w	r2, r3, #1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	fa22 f303 	lsr.w	r3, r2, r3
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d06e      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a69      	ldr	r2, [pc, #420]	; (80034b0 <HAL_DMA_IRQHandler+0x3f8>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d04a      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a67      	ldr	r2, [pc, #412]	; (80034b4 <HAL_DMA_IRQHandler+0x3fc>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d045      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a66      	ldr	r2, [pc, #408]	; (80034b8 <HAL_DMA_IRQHandler+0x400>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d040      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a64      	ldr	r2, [pc, #400]	; (80034bc <HAL_DMA_IRQHandler+0x404>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d03b      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a63      	ldr	r2, [pc, #396]	; (80034c0 <HAL_DMA_IRQHandler+0x408>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d036      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a61      	ldr	r2, [pc, #388]	; (80034c4 <HAL_DMA_IRQHandler+0x40c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d031      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a60      	ldr	r2, [pc, #384]	; (80034c8 <HAL_DMA_IRQHandler+0x410>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d02c      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a5e      	ldr	r2, [pc, #376]	; (80034cc <HAL_DMA_IRQHandler+0x414>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d027      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a5d      	ldr	r2, [pc, #372]	; (80034d0 <HAL_DMA_IRQHandler+0x418>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d022      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a5b      	ldr	r2, [pc, #364]	; (80034d4 <HAL_DMA_IRQHandler+0x41c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d01d      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a5a      	ldr	r2, [pc, #360]	; (80034d8 <HAL_DMA_IRQHandler+0x420>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d018      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a58      	ldr	r2, [pc, #352]	; (80034dc <HAL_DMA_IRQHandler+0x424>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d013      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a57      	ldr	r2, [pc, #348]	; (80034e0 <HAL_DMA_IRQHandler+0x428>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d00e      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a55      	ldr	r2, [pc, #340]	; (80034e4 <HAL_DMA_IRQHandler+0x42c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d009      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a54      	ldr	r2, [pc, #336]	; (80034e8 <HAL_DMA_IRQHandler+0x430>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d004      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a52      	ldr	r2, [pc, #328]	; (80034ec <HAL_DMA_IRQHandler+0x434>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d10a      	bne.n	80033bc <HAL_DMA_IRQHandler+0x304>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf14      	ite	ne
 80033b4:	2301      	movne	r3, #1
 80033b6:	2300      	moveq	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	e003      	b.n	80033c4 <HAL_DMA_IRQHandler+0x30c>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2300      	movs	r3, #0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00d      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033cc:	f003 031f 	and.w	r3, r3, #31
 80033d0:	2201      	movs	r2, #1
 80033d2:	409a      	lsls	r2, r3
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033dc:	f043 0202 	orr.w	r2, r3, #2
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	2204      	movs	r2, #4
 80033ee:	409a      	lsls	r2, r3
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	4013      	ands	r3, r2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 808f 	beq.w	8003518 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a2c      	ldr	r2, [pc, #176]	; (80034b0 <HAL_DMA_IRQHandler+0x3f8>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d04a      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a2a      	ldr	r2, [pc, #168]	; (80034b4 <HAL_DMA_IRQHandler+0x3fc>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d045      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a29      	ldr	r2, [pc, #164]	; (80034b8 <HAL_DMA_IRQHandler+0x400>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d040      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a27      	ldr	r2, [pc, #156]	; (80034bc <HAL_DMA_IRQHandler+0x404>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d03b      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a26      	ldr	r2, [pc, #152]	; (80034c0 <HAL_DMA_IRQHandler+0x408>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d036      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a24      	ldr	r2, [pc, #144]	; (80034c4 <HAL_DMA_IRQHandler+0x40c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d031      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a23      	ldr	r2, [pc, #140]	; (80034c8 <HAL_DMA_IRQHandler+0x410>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d02c      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a21      	ldr	r2, [pc, #132]	; (80034cc <HAL_DMA_IRQHandler+0x414>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d027      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a20      	ldr	r2, [pc, #128]	; (80034d0 <HAL_DMA_IRQHandler+0x418>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d022      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a1e      	ldr	r2, [pc, #120]	; (80034d4 <HAL_DMA_IRQHandler+0x41c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d01d      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a1d      	ldr	r2, [pc, #116]	; (80034d8 <HAL_DMA_IRQHandler+0x420>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d018      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1b      	ldr	r2, [pc, #108]	; (80034dc <HAL_DMA_IRQHandler+0x424>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d013      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a1a      	ldr	r2, [pc, #104]	; (80034e0 <HAL_DMA_IRQHandler+0x428>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d00e      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a18      	ldr	r2, [pc, #96]	; (80034e4 <HAL_DMA_IRQHandler+0x42c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d009      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a17      	ldr	r2, [pc, #92]	; (80034e8 <HAL_DMA_IRQHandler+0x430>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d004      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a15      	ldr	r2, [pc, #84]	; (80034ec <HAL_DMA_IRQHandler+0x434>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d12a      	bne.n	80034f0 <HAL_DMA_IRQHandler+0x438>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	bf14      	ite	ne
 80034a8:	2301      	movne	r3, #1
 80034aa:	2300      	moveq	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	e023      	b.n	80034f8 <HAL_DMA_IRQHandler+0x440>
 80034b0:	40020010 	.word	0x40020010
 80034b4:	40020028 	.word	0x40020028
 80034b8:	40020040 	.word	0x40020040
 80034bc:	40020058 	.word	0x40020058
 80034c0:	40020070 	.word	0x40020070
 80034c4:	40020088 	.word	0x40020088
 80034c8:	400200a0 	.word	0x400200a0
 80034cc:	400200b8 	.word	0x400200b8
 80034d0:	40020410 	.word	0x40020410
 80034d4:	40020428 	.word	0x40020428
 80034d8:	40020440 	.word	0x40020440
 80034dc:	40020458 	.word	0x40020458
 80034e0:	40020470 	.word	0x40020470
 80034e4:	40020488 	.word	0x40020488
 80034e8:	400204a0 	.word	0x400204a0
 80034ec:	400204b8 	.word	0x400204b8
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2300      	movs	r3, #0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00d      	beq.n	8003518 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	2204      	movs	r2, #4
 8003506:	409a      	lsls	r2, r3
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003510:	f043 0204 	orr.w	r2, r3, #4
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351c:	f003 031f 	and.w	r3, r3, #31
 8003520:	2210      	movs	r2, #16
 8003522:	409a      	lsls	r2, r3
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	4013      	ands	r3, r2
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 80a6 	beq.w	800367a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a85      	ldr	r2, [pc, #532]	; (8003748 <HAL_DMA_IRQHandler+0x690>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d04a      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a83      	ldr	r2, [pc, #524]	; (800374c <HAL_DMA_IRQHandler+0x694>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d045      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a82      	ldr	r2, [pc, #520]	; (8003750 <HAL_DMA_IRQHandler+0x698>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d040      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a80      	ldr	r2, [pc, #512]	; (8003754 <HAL_DMA_IRQHandler+0x69c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d03b      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a7f      	ldr	r2, [pc, #508]	; (8003758 <HAL_DMA_IRQHandler+0x6a0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d036      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a7d      	ldr	r2, [pc, #500]	; (800375c <HAL_DMA_IRQHandler+0x6a4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d031      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a7c      	ldr	r2, [pc, #496]	; (8003760 <HAL_DMA_IRQHandler+0x6a8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d02c      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a7a      	ldr	r2, [pc, #488]	; (8003764 <HAL_DMA_IRQHandler+0x6ac>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d027      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a79      	ldr	r2, [pc, #484]	; (8003768 <HAL_DMA_IRQHandler+0x6b0>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d022      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a77      	ldr	r2, [pc, #476]	; (800376c <HAL_DMA_IRQHandler+0x6b4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d01d      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a76      	ldr	r2, [pc, #472]	; (8003770 <HAL_DMA_IRQHandler+0x6b8>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d018      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a74      	ldr	r2, [pc, #464]	; (8003774 <HAL_DMA_IRQHandler+0x6bc>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d013      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a73      	ldr	r2, [pc, #460]	; (8003778 <HAL_DMA_IRQHandler+0x6c0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00e      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a71      	ldr	r2, [pc, #452]	; (800377c <HAL_DMA_IRQHandler+0x6c4>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d009      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a70      	ldr	r2, [pc, #448]	; (8003780 <HAL_DMA_IRQHandler+0x6c8>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d004      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a6e      	ldr	r2, [pc, #440]	; (8003784 <HAL_DMA_IRQHandler+0x6cc>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d10a      	bne.n	80035e4 <HAL_DMA_IRQHandler+0x52c>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	2b00      	cmp	r3, #0
 80035da:	bf14      	ite	ne
 80035dc:	2301      	movne	r3, #1
 80035de:	2300      	moveq	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	e009      	b.n	80035f8 <HAL_DMA_IRQHandler+0x540>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	bf14      	ite	ne
 80035f2:	2301      	movne	r3, #1
 80035f4:	2300      	moveq	r3, #0
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d03e      	beq.n	800367a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	2210      	movs	r2, #16
 8003606:	409a      	lsls	r2, r3
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d018      	beq.n	800364c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d108      	bne.n	800363a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	2b00      	cmp	r3, #0
 800362e:	d024      	beq.n	800367a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	4798      	blx	r3
 8003638:	e01f      	b.n	800367a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800363e:	2b00      	cmp	r3, #0
 8003640:	d01b      	beq.n	800367a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	4798      	blx	r3
 800364a:	e016      	b.n	800367a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003656:	2b00      	cmp	r3, #0
 8003658:	d107      	bne.n	800366a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0208 	bic.w	r2, r2, #8
 8003668:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367e:	f003 031f 	and.w	r3, r3, #31
 8003682:	2220      	movs	r2, #32
 8003684:	409a      	lsls	r2, r3
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	4013      	ands	r3, r2
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 8110 	beq.w	80038b0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a2c      	ldr	r2, [pc, #176]	; (8003748 <HAL_DMA_IRQHandler+0x690>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d04a      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a2b      	ldr	r2, [pc, #172]	; (800374c <HAL_DMA_IRQHandler+0x694>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d045      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a29      	ldr	r2, [pc, #164]	; (8003750 <HAL_DMA_IRQHandler+0x698>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d040      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a28      	ldr	r2, [pc, #160]	; (8003754 <HAL_DMA_IRQHandler+0x69c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d03b      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a26      	ldr	r2, [pc, #152]	; (8003758 <HAL_DMA_IRQHandler+0x6a0>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d036      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a25      	ldr	r2, [pc, #148]	; (800375c <HAL_DMA_IRQHandler+0x6a4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d031      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a23      	ldr	r2, [pc, #140]	; (8003760 <HAL_DMA_IRQHandler+0x6a8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d02c      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a22      	ldr	r2, [pc, #136]	; (8003764 <HAL_DMA_IRQHandler+0x6ac>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d027      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a20      	ldr	r2, [pc, #128]	; (8003768 <HAL_DMA_IRQHandler+0x6b0>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d022      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a1f      	ldr	r2, [pc, #124]	; (800376c <HAL_DMA_IRQHandler+0x6b4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d01d      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1d      	ldr	r2, [pc, #116]	; (8003770 <HAL_DMA_IRQHandler+0x6b8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d018      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a1c      	ldr	r2, [pc, #112]	; (8003774 <HAL_DMA_IRQHandler+0x6bc>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d013      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a1a      	ldr	r2, [pc, #104]	; (8003778 <HAL_DMA_IRQHandler+0x6c0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00e      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a19      	ldr	r2, [pc, #100]	; (800377c <HAL_DMA_IRQHandler+0x6c4>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d009      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a17      	ldr	r2, [pc, #92]	; (8003780 <HAL_DMA_IRQHandler+0x6c8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d004      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a16      	ldr	r2, [pc, #88]	; (8003784 <HAL_DMA_IRQHandler+0x6cc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d12b      	bne.n	8003788 <HAL_DMA_IRQHandler+0x6d0>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0310 	and.w	r3, r3, #16
 800373a:	2b00      	cmp	r3, #0
 800373c:	bf14      	ite	ne
 800373e:	2301      	movne	r3, #1
 8003740:	2300      	moveq	r3, #0
 8003742:	b2db      	uxtb	r3, r3
 8003744:	e02a      	b.n	800379c <HAL_DMA_IRQHandler+0x6e4>
 8003746:	bf00      	nop
 8003748:	40020010 	.word	0x40020010
 800374c:	40020028 	.word	0x40020028
 8003750:	40020040 	.word	0x40020040
 8003754:	40020058 	.word	0x40020058
 8003758:	40020070 	.word	0x40020070
 800375c:	40020088 	.word	0x40020088
 8003760:	400200a0 	.word	0x400200a0
 8003764:	400200b8 	.word	0x400200b8
 8003768:	40020410 	.word	0x40020410
 800376c:	40020428 	.word	0x40020428
 8003770:	40020440 	.word	0x40020440
 8003774:	40020458 	.word	0x40020458
 8003778:	40020470 	.word	0x40020470
 800377c:	40020488 	.word	0x40020488
 8003780:	400204a0 	.word	0x400204a0
 8003784:	400204b8 	.word	0x400204b8
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	bf14      	ite	ne
 8003796:	2301      	movne	r3, #1
 8003798:	2300      	moveq	r3, #0
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 8087 	beq.w	80038b0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a6:	f003 031f 	and.w	r3, r3, #31
 80037aa:	2220      	movs	r2, #32
 80037ac:	409a      	lsls	r2, r3
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d139      	bne.n	8003832 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0216 	bic.w	r2, r2, #22
 80037cc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695a      	ldr	r2, [r3, #20]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037dc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d103      	bne.n	80037ee <HAL_DMA_IRQHandler+0x736>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d007      	beq.n	80037fe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0208 	bic.w	r2, r2, #8
 80037fc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003802:	f003 031f 	and.w	r3, r3, #31
 8003806:	223f      	movs	r2, #63	; 0x3f
 8003808:	409a      	lsls	r2, r3
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 834a 	beq.w	8003ebc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	4798      	blx	r3
          }
          return;
 8003830:	e344      	b.n	8003ebc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d018      	beq.n	8003872 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d108      	bne.n	8003860 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003852:	2b00      	cmp	r3, #0
 8003854:	d02c      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	4798      	blx	r3
 800385e:	e027      	b.n	80038b0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003864:	2b00      	cmp	r3, #0
 8003866:	d023      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
 8003870:	e01e      	b.n	80038b0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10f      	bne.n	80038a0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0210 	bic.w	r2, r2, #16
 800388e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 8306 	beq.w	8003ec6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 8088 	beq.w	80039d8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2204      	movs	r2, #4
 80038cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a7a      	ldr	r2, [pc, #488]	; (8003ac0 <HAL_DMA_IRQHandler+0xa08>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d04a      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a79      	ldr	r2, [pc, #484]	; (8003ac4 <HAL_DMA_IRQHandler+0xa0c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d045      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a77      	ldr	r2, [pc, #476]	; (8003ac8 <HAL_DMA_IRQHandler+0xa10>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d040      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a76      	ldr	r2, [pc, #472]	; (8003acc <HAL_DMA_IRQHandler+0xa14>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d03b      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a74      	ldr	r2, [pc, #464]	; (8003ad0 <HAL_DMA_IRQHandler+0xa18>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d036      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a73      	ldr	r2, [pc, #460]	; (8003ad4 <HAL_DMA_IRQHandler+0xa1c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d031      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a71      	ldr	r2, [pc, #452]	; (8003ad8 <HAL_DMA_IRQHandler+0xa20>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d02c      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a70      	ldr	r2, [pc, #448]	; (8003adc <HAL_DMA_IRQHandler+0xa24>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d027      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a6e      	ldr	r2, [pc, #440]	; (8003ae0 <HAL_DMA_IRQHandler+0xa28>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d022      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a6d      	ldr	r2, [pc, #436]	; (8003ae4 <HAL_DMA_IRQHandler+0xa2c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d01d      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a6b      	ldr	r2, [pc, #428]	; (8003ae8 <HAL_DMA_IRQHandler+0xa30>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d018      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a6a      	ldr	r2, [pc, #424]	; (8003aec <HAL_DMA_IRQHandler+0xa34>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d013      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a68      	ldr	r2, [pc, #416]	; (8003af0 <HAL_DMA_IRQHandler+0xa38>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d00e      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a67      	ldr	r2, [pc, #412]	; (8003af4 <HAL_DMA_IRQHandler+0xa3c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d009      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a65      	ldr	r2, [pc, #404]	; (8003af8 <HAL_DMA_IRQHandler+0xa40>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d004      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a64      	ldr	r2, [pc, #400]	; (8003afc <HAL_DMA_IRQHandler+0xa44>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d108      	bne.n	8003982 <HAL_DMA_IRQHandler+0x8ca>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0201 	bic.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	e007      	b.n	8003992 <HAL_DMA_IRQHandler+0x8da>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0201 	bic.w	r2, r2, #1
 8003990:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	3301      	adds	r3, #1
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399a:	429a      	cmp	r2, r3
 800399c:	d307      	bcc.n	80039ae <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1f2      	bne.n	8003992 <HAL_DMA_IRQHandler+0x8da>
 80039ac:	e000      	b.n	80039b0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80039ae:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d004      	beq.n	80039c8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2203      	movs	r2, #3
 80039c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80039c6:	e003      	b.n	80039d0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 8272 	beq.w	8003ec6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	4798      	blx	r3
 80039ea:	e26c      	b.n	8003ec6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a43      	ldr	r2, [pc, #268]	; (8003b00 <HAL_DMA_IRQHandler+0xa48>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d022      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x984>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a42      	ldr	r2, [pc, #264]	; (8003b04 <HAL_DMA_IRQHandler+0xa4c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d01d      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x984>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a40      	ldr	r2, [pc, #256]	; (8003b08 <HAL_DMA_IRQHandler+0xa50>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d018      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x984>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a3f      	ldr	r2, [pc, #252]	; (8003b0c <HAL_DMA_IRQHandler+0xa54>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d013      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x984>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a3d      	ldr	r2, [pc, #244]	; (8003b10 <HAL_DMA_IRQHandler+0xa58>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00e      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x984>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a3c      	ldr	r2, [pc, #240]	; (8003b14 <HAL_DMA_IRQHandler+0xa5c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d009      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x984>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a3a      	ldr	r2, [pc, #232]	; (8003b18 <HAL_DMA_IRQHandler+0xa60>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d004      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x984>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a39      	ldr	r2, [pc, #228]	; (8003b1c <HAL_DMA_IRQHandler+0xa64>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d101      	bne.n	8003a40 <HAL_DMA_IRQHandler+0x988>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e000      	b.n	8003a42 <HAL_DMA_IRQHandler+0x98a>
 8003a40:	2300      	movs	r3, #0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 823f 	beq.w	8003ec6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a54:	f003 031f 	and.w	r3, r3, #31
 8003a58:	2204      	movs	r2, #4
 8003a5a:	409a      	lsls	r2, r3
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 80cd 	beq.w	8003c00 <HAL_DMA_IRQHandler+0xb48>
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 80c7 	beq.w	8003c00 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a76:	f003 031f 	and.w	r3, r3, #31
 8003a7a:	2204      	movs	r2, #4
 8003a7c:	409a      	lsls	r2, r3
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d049      	beq.n	8003b20 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 8210 	beq.w	8003ec0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003aa8:	e20a      	b.n	8003ec0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 8206 	beq.w	8003ec0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003abc:	e200      	b.n	8003ec0 <HAL_DMA_IRQHandler+0xe08>
 8003abe:	bf00      	nop
 8003ac0:	40020010 	.word	0x40020010
 8003ac4:	40020028 	.word	0x40020028
 8003ac8:	40020040 	.word	0x40020040
 8003acc:	40020058 	.word	0x40020058
 8003ad0:	40020070 	.word	0x40020070
 8003ad4:	40020088 	.word	0x40020088
 8003ad8:	400200a0 	.word	0x400200a0
 8003adc:	400200b8 	.word	0x400200b8
 8003ae0:	40020410 	.word	0x40020410
 8003ae4:	40020428 	.word	0x40020428
 8003ae8:	40020440 	.word	0x40020440
 8003aec:	40020458 	.word	0x40020458
 8003af0:	40020470 	.word	0x40020470
 8003af4:	40020488 	.word	0x40020488
 8003af8:	400204a0 	.word	0x400204a0
 8003afc:	400204b8 	.word	0x400204b8
 8003b00:	58025408 	.word	0x58025408
 8003b04:	5802541c 	.word	0x5802541c
 8003b08:	58025430 	.word	0x58025430
 8003b0c:	58025444 	.word	0x58025444
 8003b10:	58025458 	.word	0x58025458
 8003b14:	5802546c 	.word	0x5802546c
 8003b18:	58025480 	.word	0x58025480
 8003b1c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d160      	bne.n	8003bec <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a7f      	ldr	r2, [pc, #508]	; (8003d2c <HAL_DMA_IRQHandler+0xc74>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d04a      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a7d      	ldr	r2, [pc, #500]	; (8003d30 <HAL_DMA_IRQHandler+0xc78>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d045      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a7c      	ldr	r2, [pc, #496]	; (8003d34 <HAL_DMA_IRQHandler+0xc7c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d040      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a7a      	ldr	r2, [pc, #488]	; (8003d38 <HAL_DMA_IRQHandler+0xc80>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d03b      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a79      	ldr	r2, [pc, #484]	; (8003d3c <HAL_DMA_IRQHandler+0xc84>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d036      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a77      	ldr	r2, [pc, #476]	; (8003d40 <HAL_DMA_IRQHandler+0xc88>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d031      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a76      	ldr	r2, [pc, #472]	; (8003d44 <HAL_DMA_IRQHandler+0xc8c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d02c      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a74      	ldr	r2, [pc, #464]	; (8003d48 <HAL_DMA_IRQHandler+0xc90>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d027      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a73      	ldr	r2, [pc, #460]	; (8003d4c <HAL_DMA_IRQHandler+0xc94>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d022      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a71      	ldr	r2, [pc, #452]	; (8003d50 <HAL_DMA_IRQHandler+0xc98>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d01d      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a70      	ldr	r2, [pc, #448]	; (8003d54 <HAL_DMA_IRQHandler+0xc9c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d018      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a6e      	ldr	r2, [pc, #440]	; (8003d58 <HAL_DMA_IRQHandler+0xca0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d013      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a6d      	ldr	r2, [pc, #436]	; (8003d5c <HAL_DMA_IRQHandler+0xca4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00e      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a6b      	ldr	r2, [pc, #428]	; (8003d60 <HAL_DMA_IRQHandler+0xca8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d009      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a6a      	ldr	r2, [pc, #424]	; (8003d64 <HAL_DMA_IRQHandler+0xcac>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d004      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a68      	ldr	r2, [pc, #416]	; (8003d68 <HAL_DMA_IRQHandler+0xcb0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d108      	bne.n	8003bdc <HAL_DMA_IRQHandler+0xb24>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0208 	bic.w	r2, r2, #8
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	e007      	b.n	8003bec <HAL_DMA_IRQHandler+0xb34>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0204 	bic.w	r2, r2, #4
 8003bea:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 8165 	beq.w	8003ec0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bfe:	e15f      	b.n	8003ec0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c04:	f003 031f 	and.w	r3, r3, #31
 8003c08:	2202      	movs	r2, #2
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 80c5 	beq.w	8003da0 <HAL_DMA_IRQHandler+0xce8>
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 80bf 	beq.w	8003da0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c26:	f003 031f 	and.w	r3, r3, #31
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	409a      	lsls	r2, r3
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d018      	beq.n	8003c6e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d109      	bne.n	8003c5a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 813a 	beq.w	8003ec4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c58:	e134      	b.n	8003ec4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 8130 	beq.w	8003ec4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c6c:	e12a      	b.n	8003ec4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f040 8089 	bne.w	8003d8c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a2b      	ldr	r2, [pc, #172]	; (8003d2c <HAL_DMA_IRQHandler+0xc74>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d04a      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a29      	ldr	r2, [pc, #164]	; (8003d30 <HAL_DMA_IRQHandler+0xc78>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d045      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a28      	ldr	r2, [pc, #160]	; (8003d34 <HAL_DMA_IRQHandler+0xc7c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d040      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a26      	ldr	r2, [pc, #152]	; (8003d38 <HAL_DMA_IRQHandler+0xc80>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d03b      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a25      	ldr	r2, [pc, #148]	; (8003d3c <HAL_DMA_IRQHandler+0xc84>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d036      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a23      	ldr	r2, [pc, #140]	; (8003d40 <HAL_DMA_IRQHandler+0xc88>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d031      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a22      	ldr	r2, [pc, #136]	; (8003d44 <HAL_DMA_IRQHandler+0xc8c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d02c      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a20      	ldr	r2, [pc, #128]	; (8003d48 <HAL_DMA_IRQHandler+0xc90>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d027      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a1f      	ldr	r2, [pc, #124]	; (8003d4c <HAL_DMA_IRQHandler+0xc94>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d022      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1d      	ldr	r2, [pc, #116]	; (8003d50 <HAL_DMA_IRQHandler+0xc98>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d01d      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a1c      	ldr	r2, [pc, #112]	; (8003d54 <HAL_DMA_IRQHandler+0xc9c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d018      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1a      	ldr	r2, [pc, #104]	; (8003d58 <HAL_DMA_IRQHandler+0xca0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d013      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a19      	ldr	r2, [pc, #100]	; (8003d5c <HAL_DMA_IRQHandler+0xca4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d00e      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a17      	ldr	r2, [pc, #92]	; (8003d60 <HAL_DMA_IRQHandler+0xca8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d009      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a16      	ldr	r2, [pc, #88]	; (8003d64 <HAL_DMA_IRQHandler+0xcac>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d004      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a14      	ldr	r2, [pc, #80]	; (8003d68 <HAL_DMA_IRQHandler+0xcb0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d128      	bne.n	8003d6c <HAL_DMA_IRQHandler+0xcb4>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0214 	bic.w	r2, r2, #20
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	e027      	b.n	8003d7c <HAL_DMA_IRQHandler+0xcc4>
 8003d2c:	40020010 	.word	0x40020010
 8003d30:	40020028 	.word	0x40020028
 8003d34:	40020040 	.word	0x40020040
 8003d38:	40020058 	.word	0x40020058
 8003d3c:	40020070 	.word	0x40020070
 8003d40:	40020088 	.word	0x40020088
 8003d44:	400200a0 	.word	0x400200a0
 8003d48:	400200b8 	.word	0x400200b8
 8003d4c:	40020410 	.word	0x40020410
 8003d50:	40020428 	.word	0x40020428
 8003d54:	40020440 	.word	0x40020440
 8003d58:	40020458 	.word	0x40020458
 8003d5c:	40020470 	.word	0x40020470
 8003d60:	40020488 	.word	0x40020488
 8003d64:	400204a0 	.word	0x400204a0
 8003d68:	400204b8 	.word	0x400204b8
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 020a 	bic.w	r2, r2, #10
 8003d7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 8097 	beq.w	8003ec4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d9e:	e091      	b.n	8003ec4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da4:	f003 031f 	and.w	r3, r3, #31
 8003da8:	2208      	movs	r2, #8
 8003daa:	409a      	lsls	r2, r3
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	4013      	ands	r3, r2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 8088 	beq.w	8003ec6 <HAL_DMA_IRQHandler+0xe0e>
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 8082 	beq.w	8003ec6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a41      	ldr	r2, [pc, #260]	; (8003ecc <HAL_DMA_IRQHandler+0xe14>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d04a      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a3f      	ldr	r2, [pc, #252]	; (8003ed0 <HAL_DMA_IRQHandler+0xe18>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d045      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a3e      	ldr	r2, [pc, #248]	; (8003ed4 <HAL_DMA_IRQHandler+0xe1c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d040      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a3c      	ldr	r2, [pc, #240]	; (8003ed8 <HAL_DMA_IRQHandler+0xe20>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d03b      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a3b      	ldr	r2, [pc, #236]	; (8003edc <HAL_DMA_IRQHandler+0xe24>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d036      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a39      	ldr	r2, [pc, #228]	; (8003ee0 <HAL_DMA_IRQHandler+0xe28>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d031      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a38      	ldr	r2, [pc, #224]	; (8003ee4 <HAL_DMA_IRQHandler+0xe2c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d02c      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a36      	ldr	r2, [pc, #216]	; (8003ee8 <HAL_DMA_IRQHandler+0xe30>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d027      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a35      	ldr	r2, [pc, #212]	; (8003eec <HAL_DMA_IRQHandler+0xe34>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d022      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a33      	ldr	r2, [pc, #204]	; (8003ef0 <HAL_DMA_IRQHandler+0xe38>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d01d      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a32      	ldr	r2, [pc, #200]	; (8003ef4 <HAL_DMA_IRQHandler+0xe3c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d018      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a30      	ldr	r2, [pc, #192]	; (8003ef8 <HAL_DMA_IRQHandler+0xe40>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d013      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a2f      	ldr	r2, [pc, #188]	; (8003efc <HAL_DMA_IRQHandler+0xe44>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00e      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a2d      	ldr	r2, [pc, #180]	; (8003f00 <HAL_DMA_IRQHandler+0xe48>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d009      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a2c      	ldr	r2, [pc, #176]	; (8003f04 <HAL_DMA_IRQHandler+0xe4c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d004      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a2a      	ldr	r2, [pc, #168]	; (8003f08 <HAL_DMA_IRQHandler+0xe50>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d108      	bne.n	8003e74 <HAL_DMA_IRQHandler+0xdbc>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 021c 	bic.w	r2, r2, #28
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	e007      	b.n	8003e84 <HAL_DMA_IRQHandler+0xdcc>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 020e 	bic.w	r2, r2, #14
 8003e82:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d009      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	4798      	blx	r3
 8003eba:	e004      	b.n	8003ec6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003ebc:	bf00      	nop
 8003ebe:	e002      	b.n	8003ec6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ec0:	bf00      	nop
 8003ec2:	e000      	b.n	8003ec6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ec4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003ec6:	3728      	adds	r7, #40	; 0x28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40020010 	.word	0x40020010
 8003ed0:	40020028 	.word	0x40020028
 8003ed4:	40020040 	.word	0x40020040
 8003ed8:	40020058 	.word	0x40020058
 8003edc:	40020070 	.word	0x40020070
 8003ee0:	40020088 	.word	0x40020088
 8003ee4:	400200a0 	.word	0x400200a0
 8003ee8:	400200b8 	.word	0x400200b8
 8003eec:	40020410 	.word	0x40020410
 8003ef0:	40020428 	.word	0x40020428
 8003ef4:	40020440 	.word	0x40020440
 8003ef8:	40020458 	.word	0x40020458
 8003efc:	40020470 	.word	0x40020470
 8003f00:	40020488 	.word	0x40020488
 8003f04:	400204a0 	.word	0x400204a0
 8003f08:	400204b8 	.word	0x400204b8

08003f0c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f24:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a7f      	ldr	r2, [pc, #508]	; (8004128 <DMA_SetConfig+0x21c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d072      	beq.n	8004016 <DMA_SetConfig+0x10a>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a7d      	ldr	r2, [pc, #500]	; (800412c <DMA_SetConfig+0x220>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d06d      	beq.n	8004016 <DMA_SetConfig+0x10a>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a7c      	ldr	r2, [pc, #496]	; (8004130 <DMA_SetConfig+0x224>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d068      	beq.n	8004016 <DMA_SetConfig+0x10a>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a7a      	ldr	r2, [pc, #488]	; (8004134 <DMA_SetConfig+0x228>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d063      	beq.n	8004016 <DMA_SetConfig+0x10a>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a79      	ldr	r2, [pc, #484]	; (8004138 <DMA_SetConfig+0x22c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d05e      	beq.n	8004016 <DMA_SetConfig+0x10a>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a77      	ldr	r2, [pc, #476]	; (800413c <DMA_SetConfig+0x230>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d059      	beq.n	8004016 <DMA_SetConfig+0x10a>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a76      	ldr	r2, [pc, #472]	; (8004140 <DMA_SetConfig+0x234>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d054      	beq.n	8004016 <DMA_SetConfig+0x10a>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a74      	ldr	r2, [pc, #464]	; (8004144 <DMA_SetConfig+0x238>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d04f      	beq.n	8004016 <DMA_SetConfig+0x10a>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a73      	ldr	r2, [pc, #460]	; (8004148 <DMA_SetConfig+0x23c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d04a      	beq.n	8004016 <DMA_SetConfig+0x10a>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a71      	ldr	r2, [pc, #452]	; (800414c <DMA_SetConfig+0x240>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d045      	beq.n	8004016 <DMA_SetConfig+0x10a>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a70      	ldr	r2, [pc, #448]	; (8004150 <DMA_SetConfig+0x244>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d040      	beq.n	8004016 <DMA_SetConfig+0x10a>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a6e      	ldr	r2, [pc, #440]	; (8004154 <DMA_SetConfig+0x248>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d03b      	beq.n	8004016 <DMA_SetConfig+0x10a>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a6d      	ldr	r2, [pc, #436]	; (8004158 <DMA_SetConfig+0x24c>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d036      	beq.n	8004016 <DMA_SetConfig+0x10a>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a6b      	ldr	r2, [pc, #428]	; (800415c <DMA_SetConfig+0x250>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d031      	beq.n	8004016 <DMA_SetConfig+0x10a>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a6a      	ldr	r2, [pc, #424]	; (8004160 <DMA_SetConfig+0x254>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d02c      	beq.n	8004016 <DMA_SetConfig+0x10a>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a68      	ldr	r2, [pc, #416]	; (8004164 <DMA_SetConfig+0x258>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d027      	beq.n	8004016 <DMA_SetConfig+0x10a>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a67      	ldr	r2, [pc, #412]	; (8004168 <DMA_SetConfig+0x25c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d022      	beq.n	8004016 <DMA_SetConfig+0x10a>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a65      	ldr	r2, [pc, #404]	; (800416c <DMA_SetConfig+0x260>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d01d      	beq.n	8004016 <DMA_SetConfig+0x10a>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a64      	ldr	r2, [pc, #400]	; (8004170 <DMA_SetConfig+0x264>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d018      	beq.n	8004016 <DMA_SetConfig+0x10a>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a62      	ldr	r2, [pc, #392]	; (8004174 <DMA_SetConfig+0x268>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d013      	beq.n	8004016 <DMA_SetConfig+0x10a>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a61      	ldr	r2, [pc, #388]	; (8004178 <DMA_SetConfig+0x26c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d00e      	beq.n	8004016 <DMA_SetConfig+0x10a>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a5f      	ldr	r2, [pc, #380]	; (800417c <DMA_SetConfig+0x270>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d009      	beq.n	8004016 <DMA_SetConfig+0x10a>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a5e      	ldr	r2, [pc, #376]	; (8004180 <DMA_SetConfig+0x274>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d004      	beq.n	8004016 <DMA_SetConfig+0x10a>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a5c      	ldr	r2, [pc, #368]	; (8004184 <DMA_SetConfig+0x278>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d101      	bne.n	800401a <DMA_SetConfig+0x10e>
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <DMA_SetConfig+0x110>
 800401a:	2300      	movs	r3, #0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00d      	beq.n	800403c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004028:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800402e:	2b00      	cmp	r3, #0
 8004030:	d004      	beq.n	800403c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800403a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a39      	ldr	r2, [pc, #228]	; (8004128 <DMA_SetConfig+0x21c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d04a      	beq.n	80040dc <DMA_SetConfig+0x1d0>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a38      	ldr	r2, [pc, #224]	; (800412c <DMA_SetConfig+0x220>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d045      	beq.n	80040dc <DMA_SetConfig+0x1d0>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a36      	ldr	r2, [pc, #216]	; (8004130 <DMA_SetConfig+0x224>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d040      	beq.n	80040dc <DMA_SetConfig+0x1d0>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a35      	ldr	r2, [pc, #212]	; (8004134 <DMA_SetConfig+0x228>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d03b      	beq.n	80040dc <DMA_SetConfig+0x1d0>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a33      	ldr	r2, [pc, #204]	; (8004138 <DMA_SetConfig+0x22c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d036      	beq.n	80040dc <DMA_SetConfig+0x1d0>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a32      	ldr	r2, [pc, #200]	; (800413c <DMA_SetConfig+0x230>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d031      	beq.n	80040dc <DMA_SetConfig+0x1d0>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a30      	ldr	r2, [pc, #192]	; (8004140 <DMA_SetConfig+0x234>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d02c      	beq.n	80040dc <DMA_SetConfig+0x1d0>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a2f      	ldr	r2, [pc, #188]	; (8004144 <DMA_SetConfig+0x238>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d027      	beq.n	80040dc <DMA_SetConfig+0x1d0>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a2d      	ldr	r2, [pc, #180]	; (8004148 <DMA_SetConfig+0x23c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d022      	beq.n	80040dc <DMA_SetConfig+0x1d0>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a2c      	ldr	r2, [pc, #176]	; (800414c <DMA_SetConfig+0x240>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d01d      	beq.n	80040dc <DMA_SetConfig+0x1d0>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a2a      	ldr	r2, [pc, #168]	; (8004150 <DMA_SetConfig+0x244>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d018      	beq.n	80040dc <DMA_SetConfig+0x1d0>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a29      	ldr	r2, [pc, #164]	; (8004154 <DMA_SetConfig+0x248>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d013      	beq.n	80040dc <DMA_SetConfig+0x1d0>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a27      	ldr	r2, [pc, #156]	; (8004158 <DMA_SetConfig+0x24c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d00e      	beq.n	80040dc <DMA_SetConfig+0x1d0>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a26      	ldr	r2, [pc, #152]	; (800415c <DMA_SetConfig+0x250>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d009      	beq.n	80040dc <DMA_SetConfig+0x1d0>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a24      	ldr	r2, [pc, #144]	; (8004160 <DMA_SetConfig+0x254>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d004      	beq.n	80040dc <DMA_SetConfig+0x1d0>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a23      	ldr	r2, [pc, #140]	; (8004164 <DMA_SetConfig+0x258>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d101      	bne.n	80040e0 <DMA_SetConfig+0x1d4>
 80040dc:	2301      	movs	r3, #1
 80040de:	e000      	b.n	80040e2 <DMA_SetConfig+0x1d6>
 80040e0:	2300      	movs	r3, #0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d059      	beq.n	800419a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ea:	f003 031f 	and.w	r3, r3, #31
 80040ee:	223f      	movs	r2, #63	; 0x3f
 80040f0:	409a      	lsls	r2, r3
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004104:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	2b40      	cmp	r3, #64	; 0x40
 8004114:	d138      	bne.n	8004188 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004126:	e086      	b.n	8004236 <DMA_SetConfig+0x32a>
 8004128:	40020010 	.word	0x40020010
 800412c:	40020028 	.word	0x40020028
 8004130:	40020040 	.word	0x40020040
 8004134:	40020058 	.word	0x40020058
 8004138:	40020070 	.word	0x40020070
 800413c:	40020088 	.word	0x40020088
 8004140:	400200a0 	.word	0x400200a0
 8004144:	400200b8 	.word	0x400200b8
 8004148:	40020410 	.word	0x40020410
 800414c:	40020428 	.word	0x40020428
 8004150:	40020440 	.word	0x40020440
 8004154:	40020458 	.word	0x40020458
 8004158:	40020470 	.word	0x40020470
 800415c:	40020488 	.word	0x40020488
 8004160:	400204a0 	.word	0x400204a0
 8004164:	400204b8 	.word	0x400204b8
 8004168:	58025408 	.word	0x58025408
 800416c:	5802541c 	.word	0x5802541c
 8004170:	58025430 	.word	0x58025430
 8004174:	58025444 	.word	0x58025444
 8004178:	58025458 	.word	0x58025458
 800417c:	5802546c 	.word	0x5802546c
 8004180:	58025480 	.word	0x58025480
 8004184:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	60da      	str	r2, [r3, #12]
}
 8004198:	e04d      	b.n	8004236 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a29      	ldr	r2, [pc, #164]	; (8004244 <DMA_SetConfig+0x338>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d022      	beq.n	80041ea <DMA_SetConfig+0x2de>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a27      	ldr	r2, [pc, #156]	; (8004248 <DMA_SetConfig+0x33c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d01d      	beq.n	80041ea <DMA_SetConfig+0x2de>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a26      	ldr	r2, [pc, #152]	; (800424c <DMA_SetConfig+0x340>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d018      	beq.n	80041ea <DMA_SetConfig+0x2de>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a24      	ldr	r2, [pc, #144]	; (8004250 <DMA_SetConfig+0x344>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d013      	beq.n	80041ea <DMA_SetConfig+0x2de>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a23      	ldr	r2, [pc, #140]	; (8004254 <DMA_SetConfig+0x348>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00e      	beq.n	80041ea <DMA_SetConfig+0x2de>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a21      	ldr	r2, [pc, #132]	; (8004258 <DMA_SetConfig+0x34c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d009      	beq.n	80041ea <DMA_SetConfig+0x2de>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a20      	ldr	r2, [pc, #128]	; (800425c <DMA_SetConfig+0x350>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d004      	beq.n	80041ea <DMA_SetConfig+0x2de>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a1e      	ldr	r2, [pc, #120]	; (8004260 <DMA_SetConfig+0x354>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d101      	bne.n	80041ee <DMA_SetConfig+0x2e2>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <DMA_SetConfig+0x2e4>
 80041ee:	2300      	movs	r3, #0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d020      	beq.n	8004236 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f8:	f003 031f 	and.w	r3, r3, #31
 80041fc:	2201      	movs	r2, #1
 80041fe:	409a      	lsls	r2, r3
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	2b40      	cmp	r3, #64	; 0x40
 8004212:	d108      	bne.n	8004226 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	60da      	str	r2, [r3, #12]
}
 8004224:	e007      	b.n	8004236 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	60da      	str	r2, [r3, #12]
}
 8004236:	bf00      	nop
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	58025408 	.word	0x58025408
 8004248:	5802541c 	.word	0x5802541c
 800424c:	58025430 	.word	0x58025430
 8004250:	58025444 	.word	0x58025444
 8004254:	58025458 	.word	0x58025458
 8004258:	5802546c 	.word	0x5802546c
 800425c:	58025480 	.word	0x58025480
 8004260:	58025494 	.word	0x58025494

08004264 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a42      	ldr	r2, [pc, #264]	; (800437c <DMA_CalcBaseAndBitshift+0x118>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d04a      	beq.n	800430c <DMA_CalcBaseAndBitshift+0xa8>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a41      	ldr	r2, [pc, #260]	; (8004380 <DMA_CalcBaseAndBitshift+0x11c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d045      	beq.n	800430c <DMA_CalcBaseAndBitshift+0xa8>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a3f      	ldr	r2, [pc, #252]	; (8004384 <DMA_CalcBaseAndBitshift+0x120>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d040      	beq.n	800430c <DMA_CalcBaseAndBitshift+0xa8>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a3e      	ldr	r2, [pc, #248]	; (8004388 <DMA_CalcBaseAndBitshift+0x124>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d03b      	beq.n	800430c <DMA_CalcBaseAndBitshift+0xa8>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a3c      	ldr	r2, [pc, #240]	; (800438c <DMA_CalcBaseAndBitshift+0x128>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d036      	beq.n	800430c <DMA_CalcBaseAndBitshift+0xa8>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a3b      	ldr	r2, [pc, #236]	; (8004390 <DMA_CalcBaseAndBitshift+0x12c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d031      	beq.n	800430c <DMA_CalcBaseAndBitshift+0xa8>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a39      	ldr	r2, [pc, #228]	; (8004394 <DMA_CalcBaseAndBitshift+0x130>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d02c      	beq.n	800430c <DMA_CalcBaseAndBitshift+0xa8>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a38      	ldr	r2, [pc, #224]	; (8004398 <DMA_CalcBaseAndBitshift+0x134>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d027      	beq.n	800430c <DMA_CalcBaseAndBitshift+0xa8>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a36      	ldr	r2, [pc, #216]	; (800439c <DMA_CalcBaseAndBitshift+0x138>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d022      	beq.n	800430c <DMA_CalcBaseAndBitshift+0xa8>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a35      	ldr	r2, [pc, #212]	; (80043a0 <DMA_CalcBaseAndBitshift+0x13c>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d01d      	beq.n	800430c <DMA_CalcBaseAndBitshift+0xa8>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a33      	ldr	r2, [pc, #204]	; (80043a4 <DMA_CalcBaseAndBitshift+0x140>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d018      	beq.n	800430c <DMA_CalcBaseAndBitshift+0xa8>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a32      	ldr	r2, [pc, #200]	; (80043a8 <DMA_CalcBaseAndBitshift+0x144>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d013      	beq.n	800430c <DMA_CalcBaseAndBitshift+0xa8>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a30      	ldr	r2, [pc, #192]	; (80043ac <DMA_CalcBaseAndBitshift+0x148>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00e      	beq.n	800430c <DMA_CalcBaseAndBitshift+0xa8>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a2f      	ldr	r2, [pc, #188]	; (80043b0 <DMA_CalcBaseAndBitshift+0x14c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d009      	beq.n	800430c <DMA_CalcBaseAndBitshift+0xa8>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a2d      	ldr	r2, [pc, #180]	; (80043b4 <DMA_CalcBaseAndBitshift+0x150>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d004      	beq.n	800430c <DMA_CalcBaseAndBitshift+0xa8>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a2c      	ldr	r2, [pc, #176]	; (80043b8 <DMA_CalcBaseAndBitshift+0x154>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d101      	bne.n	8004310 <DMA_CalcBaseAndBitshift+0xac>
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <DMA_CalcBaseAndBitshift+0xae>
 8004310:	2300      	movs	r3, #0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d024      	beq.n	8004360 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	b2db      	uxtb	r3, r3
 800431c:	3b10      	subs	r3, #16
 800431e:	4a27      	ldr	r2, [pc, #156]	; (80043bc <DMA_CalcBaseAndBitshift+0x158>)
 8004320:	fba2 2303 	umull	r2, r3, r2, r3
 8004324:	091b      	lsrs	r3, r3, #4
 8004326:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	4a24      	ldr	r2, [pc, #144]	; (80043c0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004330:	5cd3      	ldrb	r3, [r2, r3]
 8004332:	461a      	mov	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b03      	cmp	r3, #3
 800433c:	d908      	bls.n	8004350 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	4b1f      	ldr	r3, [pc, #124]	; (80043c4 <DMA_CalcBaseAndBitshift+0x160>)
 8004346:	4013      	ands	r3, r2
 8004348:	1d1a      	adds	r2, r3, #4
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	659a      	str	r2, [r3, #88]	; 0x58
 800434e:	e00d      	b.n	800436c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	461a      	mov	r2, r3
 8004356:	4b1b      	ldr	r3, [pc, #108]	; (80043c4 <DMA_CalcBaseAndBitshift+0x160>)
 8004358:	4013      	ands	r3, r2
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6593      	str	r3, [r2, #88]	; 0x58
 800435e:	e005      	b.n	800436c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004370:	4618      	mov	r0, r3
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	40020010 	.word	0x40020010
 8004380:	40020028 	.word	0x40020028
 8004384:	40020040 	.word	0x40020040
 8004388:	40020058 	.word	0x40020058
 800438c:	40020070 	.word	0x40020070
 8004390:	40020088 	.word	0x40020088
 8004394:	400200a0 	.word	0x400200a0
 8004398:	400200b8 	.word	0x400200b8
 800439c:	40020410 	.word	0x40020410
 80043a0:	40020428 	.word	0x40020428
 80043a4:	40020440 	.word	0x40020440
 80043a8:	40020458 	.word	0x40020458
 80043ac:	40020470 	.word	0x40020470
 80043b0:	40020488 	.word	0x40020488
 80043b4:	400204a0 	.word	0x400204a0
 80043b8:	400204b8 	.word	0x400204b8
 80043bc:	aaaaaaab 	.word	0xaaaaaaab
 80043c0:	080107c8 	.word	0x080107c8
 80043c4:	fffffc00 	.word	0xfffffc00

080043c8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d120      	bne.n	800441e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d858      	bhi.n	8004496 <DMA_CheckFifoParam+0xce>
 80043e4:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <DMA_CheckFifoParam+0x24>)
 80043e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ea:	bf00      	nop
 80043ec:	080043fd 	.word	0x080043fd
 80043f0:	0800440f 	.word	0x0800440f
 80043f4:	080043fd 	.word	0x080043fd
 80043f8:	08004497 	.word	0x08004497
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d048      	beq.n	800449a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800440c:	e045      	b.n	800449a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004412:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004416:	d142      	bne.n	800449e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800441c:	e03f      	b.n	800449e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004426:	d123      	bne.n	8004470 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442c:	2b03      	cmp	r3, #3
 800442e:	d838      	bhi.n	80044a2 <DMA_CheckFifoParam+0xda>
 8004430:	a201      	add	r2, pc, #4	; (adr r2, 8004438 <DMA_CheckFifoParam+0x70>)
 8004432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004436:	bf00      	nop
 8004438:	08004449 	.word	0x08004449
 800443c:	0800444f 	.word	0x0800444f
 8004440:	08004449 	.word	0x08004449
 8004444:	08004461 	.word	0x08004461
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	73fb      	strb	r3, [r7, #15]
        break;
 800444c:	e030      	b.n	80044b0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004452:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d025      	beq.n	80044a6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800445e:	e022      	b.n	80044a6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004464:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004468:	d11f      	bne.n	80044aa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800446e:	e01c      	b.n	80044aa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004474:	2b02      	cmp	r3, #2
 8004476:	d902      	bls.n	800447e <DMA_CheckFifoParam+0xb6>
 8004478:	2b03      	cmp	r3, #3
 800447a:	d003      	beq.n	8004484 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800447c:	e018      	b.n	80044b0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	73fb      	strb	r3, [r7, #15]
        break;
 8004482:	e015      	b.n	80044b0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00e      	beq.n	80044ae <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	73fb      	strb	r3, [r7, #15]
    break;
 8004494:	e00b      	b.n	80044ae <DMA_CheckFifoParam+0xe6>
        break;
 8004496:	bf00      	nop
 8004498:	e00a      	b.n	80044b0 <DMA_CheckFifoParam+0xe8>
        break;
 800449a:	bf00      	nop
 800449c:	e008      	b.n	80044b0 <DMA_CheckFifoParam+0xe8>
        break;
 800449e:	bf00      	nop
 80044a0:	e006      	b.n	80044b0 <DMA_CheckFifoParam+0xe8>
        break;
 80044a2:	bf00      	nop
 80044a4:	e004      	b.n	80044b0 <DMA_CheckFifoParam+0xe8>
        break;
 80044a6:	bf00      	nop
 80044a8:	e002      	b.n	80044b0 <DMA_CheckFifoParam+0xe8>
        break;
 80044aa:	bf00      	nop
 80044ac:	e000      	b.n	80044b0 <DMA_CheckFifoParam+0xe8>
    break;
 80044ae:	bf00      	nop
    }
  }

  return status;
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop

080044c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a38      	ldr	r2, [pc, #224]	; (80045b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d022      	beq.n	800451e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a36      	ldr	r2, [pc, #216]	; (80045b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d01d      	beq.n	800451e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a35      	ldr	r2, [pc, #212]	; (80045bc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d018      	beq.n	800451e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a33      	ldr	r2, [pc, #204]	; (80045c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d013      	beq.n	800451e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a32      	ldr	r2, [pc, #200]	; (80045c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d00e      	beq.n	800451e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a30      	ldr	r2, [pc, #192]	; (80045c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d009      	beq.n	800451e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a2f      	ldr	r2, [pc, #188]	; (80045cc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d004      	beq.n	800451e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a2d      	ldr	r2, [pc, #180]	; (80045d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d101      	bne.n	8004522 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800451e:	2301      	movs	r3, #1
 8004520:	e000      	b.n	8004524 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004522:	2300      	movs	r3, #0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d01a      	beq.n	800455e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	3b08      	subs	r3, #8
 8004530:	4a28      	ldr	r2, [pc, #160]	; (80045d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004532:	fba2 2303 	umull	r2, r3, r2, r3
 8004536:	091b      	lsrs	r3, r3, #4
 8004538:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4b26      	ldr	r3, [pc, #152]	; (80045d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800453e:	4413      	add	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	461a      	mov	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a24      	ldr	r2, [pc, #144]	; (80045dc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800454c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f003 031f 	and.w	r3, r3, #31
 8004554:	2201      	movs	r2, #1
 8004556:	409a      	lsls	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800455c:	e024      	b.n	80045a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	b2db      	uxtb	r3, r3
 8004564:	3b10      	subs	r3, #16
 8004566:	4a1e      	ldr	r2, [pc, #120]	; (80045e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004568:	fba2 2303 	umull	r2, r3, r2, r3
 800456c:	091b      	lsrs	r3, r3, #4
 800456e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	4a1c      	ldr	r2, [pc, #112]	; (80045e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d806      	bhi.n	8004586 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4a1b      	ldr	r2, [pc, #108]	; (80045e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d902      	bls.n	8004586 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	3308      	adds	r3, #8
 8004584:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	4b18      	ldr	r3, [pc, #96]	; (80045ec <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800458a:	4413      	add	r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	461a      	mov	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a16      	ldr	r2, [pc, #88]	; (80045f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004598:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f003 031f 	and.w	r3, r3, #31
 80045a0:	2201      	movs	r2, #1
 80045a2:	409a      	lsls	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80045a8:	bf00      	nop
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	58025408 	.word	0x58025408
 80045b8:	5802541c 	.word	0x5802541c
 80045bc:	58025430 	.word	0x58025430
 80045c0:	58025444 	.word	0x58025444
 80045c4:	58025458 	.word	0x58025458
 80045c8:	5802546c 	.word	0x5802546c
 80045cc:	58025480 	.word	0x58025480
 80045d0:	58025494 	.word	0x58025494
 80045d4:	cccccccd 	.word	0xcccccccd
 80045d8:	16009600 	.word	0x16009600
 80045dc:	58025880 	.word	0x58025880
 80045e0:	aaaaaaab 	.word	0xaaaaaaab
 80045e4:	400204b8 	.word	0x400204b8
 80045e8:	4002040f 	.word	0x4002040f
 80045ec:	10008200 	.word	0x10008200
 80045f0:	40020880 	.word	0x40020880

080045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	b2db      	uxtb	r3, r3
 8004602:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d04a      	beq.n	80046a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2b08      	cmp	r3, #8
 800460e:	d847      	bhi.n	80046a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a25      	ldr	r2, [pc, #148]	; (80046ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d022      	beq.n	8004660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a24      	ldr	r2, [pc, #144]	; (80046b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d01d      	beq.n	8004660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a22      	ldr	r2, [pc, #136]	; (80046b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d018      	beq.n	8004660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a21      	ldr	r2, [pc, #132]	; (80046b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d013      	beq.n	8004660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a1f      	ldr	r2, [pc, #124]	; (80046bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d00e      	beq.n	8004660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a1e      	ldr	r2, [pc, #120]	; (80046c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d009      	beq.n	8004660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a1c      	ldr	r2, [pc, #112]	; (80046c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d004      	beq.n	8004660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a1b      	ldr	r2, [pc, #108]	; (80046c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d101      	bne.n	8004664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004664:	2300      	movs	r3, #0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	4b17      	ldr	r3, [pc, #92]	; (80046cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800466e:	4413      	add	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	461a      	mov	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a15      	ldr	r2, [pc, #84]	; (80046d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800467c:	671a      	str	r2, [r3, #112]	; 0x70
 800467e:	e009      	b.n	8004694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	4b14      	ldr	r3, [pc, #80]	; (80046d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004684:	4413      	add	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	461a      	mov	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a11      	ldr	r2, [pc, #68]	; (80046d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004692:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	3b01      	subs	r3, #1
 8004698:	2201      	movs	r2, #1
 800469a:	409a      	lsls	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80046a0:	bf00      	nop
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	58025408 	.word	0x58025408
 80046b0:	5802541c 	.word	0x5802541c
 80046b4:	58025430 	.word	0x58025430
 80046b8:	58025444 	.word	0x58025444
 80046bc:	58025458 	.word	0x58025458
 80046c0:	5802546c 	.word	0x5802546c
 80046c4:	58025480 	.word	0x58025480
 80046c8:	58025494 	.word	0x58025494
 80046cc:	1600963f 	.word	0x1600963f
 80046d0:	58025940 	.word	0x58025940
 80046d4:	1000823f 	.word	0x1000823f
 80046d8:	40020940 	.word	0x40020940

080046dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046dc:	b480      	push	{r7}
 80046de:	b089      	sub	sp, #36	; 0x24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80046ea:	4b89      	ldr	r3, [pc, #548]	; (8004910 <HAL_GPIO_Init+0x234>)
 80046ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80046ee:	e194      	b.n	8004a1a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	2101      	movs	r1, #1
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	fa01 f303 	lsl.w	r3, r1, r3
 80046fc:	4013      	ands	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 8186 	beq.w	8004a14 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f003 0303 	and.w	r3, r3, #3
 8004710:	2b01      	cmp	r3, #1
 8004712:	d005      	beq.n	8004720 <HAL_GPIO_Init+0x44>
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f003 0303 	and.w	r3, r3, #3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d130      	bne.n	8004782 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	2203      	movs	r2, #3
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	43db      	mvns	r3, r3
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	4013      	ands	r3, r2
 8004736:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	4313      	orrs	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004756:	2201      	movs	r2, #1
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	fa02 f303 	lsl.w	r3, r2, r3
 800475e:	43db      	mvns	r3, r3
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	4013      	ands	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	091b      	lsrs	r3, r3, #4
 800476c:	f003 0201 	and.w	r2, r3, #1
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	fa02 f303 	lsl.w	r3, r2, r3
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	4313      	orrs	r3, r2
 800477a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	2b03      	cmp	r3, #3
 800478c:	d017      	beq.n	80047be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	2203      	movs	r2, #3
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	43db      	mvns	r3, r3
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	4013      	ands	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	689a      	ldr	r2, [r3, #8]
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d123      	bne.n	8004812 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	08da      	lsrs	r2, r3, #3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3208      	adds	r2, #8
 80047d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	220f      	movs	r2, #15
 80047e2:	fa02 f303 	lsl.w	r3, r2, r3
 80047e6:	43db      	mvns	r3, r3
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	4013      	ands	r3, r2
 80047ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	691a      	ldr	r2, [r3, #16]
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	4313      	orrs	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	08da      	lsrs	r2, r3, #3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3208      	adds	r2, #8
 800480c:	69b9      	ldr	r1, [r7, #24]
 800480e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	2203      	movs	r2, #3
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	43db      	mvns	r3, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4013      	ands	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f003 0203 	and.w	r2, r3, #3
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4313      	orrs	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 80e0 	beq.w	8004a14 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004854:	4b2f      	ldr	r3, [pc, #188]	; (8004914 <HAL_GPIO_Init+0x238>)
 8004856:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800485a:	4a2e      	ldr	r2, [pc, #184]	; (8004914 <HAL_GPIO_Init+0x238>)
 800485c:	f043 0302 	orr.w	r3, r3, #2
 8004860:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004864:	4b2b      	ldr	r3, [pc, #172]	; (8004914 <HAL_GPIO_Init+0x238>)
 8004866:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004872:	4a29      	ldr	r2, [pc, #164]	; (8004918 <HAL_GPIO_Init+0x23c>)
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	089b      	lsrs	r3, r3, #2
 8004878:	3302      	adds	r3, #2
 800487a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800487e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	220f      	movs	r2, #15
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	43db      	mvns	r3, r3
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	4013      	ands	r3, r2
 8004894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a20      	ldr	r2, [pc, #128]	; (800491c <HAL_GPIO_Init+0x240>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d052      	beq.n	8004944 <HAL_GPIO_Init+0x268>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a1f      	ldr	r2, [pc, #124]	; (8004920 <HAL_GPIO_Init+0x244>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d031      	beq.n	800490a <HAL_GPIO_Init+0x22e>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a1e      	ldr	r2, [pc, #120]	; (8004924 <HAL_GPIO_Init+0x248>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d02b      	beq.n	8004906 <HAL_GPIO_Init+0x22a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a1d      	ldr	r2, [pc, #116]	; (8004928 <HAL_GPIO_Init+0x24c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d025      	beq.n	8004902 <HAL_GPIO_Init+0x226>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a1c      	ldr	r2, [pc, #112]	; (800492c <HAL_GPIO_Init+0x250>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d01f      	beq.n	80048fe <HAL_GPIO_Init+0x222>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a1b      	ldr	r2, [pc, #108]	; (8004930 <HAL_GPIO_Init+0x254>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d019      	beq.n	80048fa <HAL_GPIO_Init+0x21e>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a1a      	ldr	r2, [pc, #104]	; (8004934 <HAL_GPIO_Init+0x258>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d013      	beq.n	80048f6 <HAL_GPIO_Init+0x21a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a19      	ldr	r2, [pc, #100]	; (8004938 <HAL_GPIO_Init+0x25c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d00d      	beq.n	80048f2 <HAL_GPIO_Init+0x216>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a18      	ldr	r2, [pc, #96]	; (800493c <HAL_GPIO_Init+0x260>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d007      	beq.n	80048ee <HAL_GPIO_Init+0x212>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a17      	ldr	r2, [pc, #92]	; (8004940 <HAL_GPIO_Init+0x264>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d101      	bne.n	80048ea <HAL_GPIO_Init+0x20e>
 80048e6:	2309      	movs	r3, #9
 80048e8:	e02d      	b.n	8004946 <HAL_GPIO_Init+0x26a>
 80048ea:	230a      	movs	r3, #10
 80048ec:	e02b      	b.n	8004946 <HAL_GPIO_Init+0x26a>
 80048ee:	2308      	movs	r3, #8
 80048f0:	e029      	b.n	8004946 <HAL_GPIO_Init+0x26a>
 80048f2:	2307      	movs	r3, #7
 80048f4:	e027      	b.n	8004946 <HAL_GPIO_Init+0x26a>
 80048f6:	2306      	movs	r3, #6
 80048f8:	e025      	b.n	8004946 <HAL_GPIO_Init+0x26a>
 80048fa:	2305      	movs	r3, #5
 80048fc:	e023      	b.n	8004946 <HAL_GPIO_Init+0x26a>
 80048fe:	2304      	movs	r3, #4
 8004900:	e021      	b.n	8004946 <HAL_GPIO_Init+0x26a>
 8004902:	2303      	movs	r3, #3
 8004904:	e01f      	b.n	8004946 <HAL_GPIO_Init+0x26a>
 8004906:	2302      	movs	r3, #2
 8004908:	e01d      	b.n	8004946 <HAL_GPIO_Init+0x26a>
 800490a:	2301      	movs	r3, #1
 800490c:	e01b      	b.n	8004946 <HAL_GPIO_Init+0x26a>
 800490e:	bf00      	nop
 8004910:	58000080 	.word	0x58000080
 8004914:	58024400 	.word	0x58024400
 8004918:	58000400 	.word	0x58000400
 800491c:	58020000 	.word	0x58020000
 8004920:	58020400 	.word	0x58020400
 8004924:	58020800 	.word	0x58020800
 8004928:	58020c00 	.word	0x58020c00
 800492c:	58021000 	.word	0x58021000
 8004930:	58021400 	.word	0x58021400
 8004934:	58021800 	.word	0x58021800
 8004938:	58021c00 	.word	0x58021c00
 800493c:	58022000 	.word	0x58022000
 8004940:	58022400 	.word	0x58022400
 8004944:	2300      	movs	r3, #0
 8004946:	69fa      	ldr	r2, [r7, #28]
 8004948:	f002 0203 	and.w	r2, r2, #3
 800494c:	0092      	lsls	r2, r2, #2
 800494e:	4093      	lsls	r3, r2
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	4313      	orrs	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004956:	4938      	ldr	r1, [pc, #224]	; (8004a38 <HAL_GPIO_Init+0x35c>)
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	089b      	lsrs	r3, r3, #2
 800495c:	3302      	adds	r3, #2
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	43db      	mvns	r3, r3
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	4013      	ands	r3, r2
 8004974:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	4313      	orrs	r3, r2
 8004988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800498a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	43db      	mvns	r3, r3
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	4013      	ands	r3, r2
 80049a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80049b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	43db      	mvns	r3, r3
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	4013      	ands	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	43db      	mvns	r3, r3
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	4013      	ands	r3, r2
 80049f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	3301      	adds	r3, #1
 8004a18:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	fa22 f303 	lsr.w	r3, r2, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f47f ae63 	bne.w	80046f0 <HAL_GPIO_Init+0x14>
  }
}
 8004a2a:	bf00      	nop
 8004a2c:	bf00      	nop
 8004a2e:	3724      	adds	r7, #36	; 0x24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	58000400 	.word	0x58000400

08004a3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	460b      	mov	r3, r1
 8004a46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691a      	ldr	r2, [r3, #16]
 8004a4c:	887b      	ldrh	r3, [r7, #2]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d002      	beq.n	8004a5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a54:	2301      	movs	r3, #1
 8004a56:	73fb      	strb	r3, [r7, #15]
 8004a58:	e001      	b.n	8004a5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	807b      	strh	r3, [r7, #2]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a7c:	787b      	ldrb	r3, [r7, #1]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a82:	887a      	ldrh	r2, [r7, #2]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004a88:	e003      	b.n	8004a92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004a8a:	887b      	ldrh	r3, [r7, #2]
 8004a8c:	041a      	lsls	r2, r3, #16
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	619a      	str	r2, [r3, #24]
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
	...

08004aa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e07f      	b.n	8004bb2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d106      	bne.n	8004acc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fc fca2 	bl	8001410 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2224      	movs	r2, #36	; 0x24
 8004ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 0201 	bic.w	r2, r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004af0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d107      	bne.n	8004b1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689a      	ldr	r2, [r3, #8]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b16:	609a      	str	r2, [r3, #8]
 8004b18:	e006      	b.n	8004b28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689a      	ldr	r2, [r3, #8]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004b26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d104      	bne.n	8004b3a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6859      	ldr	r1, [r3, #4]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	4b1d      	ldr	r3, [pc, #116]	; (8004bbc <HAL_I2C_Init+0x11c>)
 8004b46:	430b      	orrs	r3, r1
 8004b48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691a      	ldr	r2, [r3, #16]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	69d9      	ldr	r1, [r3, #28]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a1a      	ldr	r2, [r3, #32]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0201 	orr.w	r2, r2, #1
 8004b92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	02008000 	.word	0x02008000

08004bc0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b088      	sub	sp, #32
 8004bc4:	af02      	add	r7, sp, #8
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	607a      	str	r2, [r7, #4]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	460b      	mov	r3, r1
 8004bce:	817b      	strh	r3, [r7, #10]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b20      	cmp	r3, #32
 8004bde:	f040 80da 	bne.w	8004d96 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d101      	bne.n	8004bf0 <HAL_I2C_Master_Transmit+0x30>
 8004bec:	2302      	movs	r3, #2
 8004bee:	e0d3      	b.n	8004d98 <HAL_I2C_Master_Transmit+0x1d8>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004bf8:	f7fd f82e 	bl	8001c58 <HAL_GetTick>
 8004bfc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	2319      	movs	r3, #25
 8004c04:	2201      	movs	r2, #1
 8004c06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 fbc6 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e0be      	b.n	8004d98 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2221      	movs	r2, #33	; 0x21
 8004c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2210      	movs	r2, #16
 8004c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	893a      	ldrh	r2, [r7, #8]
 8004c3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	2bff      	cmp	r3, #255	; 0xff
 8004c4a:	d90e      	bls.n	8004c6a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	22ff      	movs	r2, #255	; 0xff
 8004c50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	8979      	ldrh	r1, [r7, #10]
 8004c5a:	4b51      	ldr	r3, [pc, #324]	; (8004da0 <HAL_I2C_Master_Transmit+0x1e0>)
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f000 fd54 	bl	8005710 <I2C_TransferConfig>
 8004c68:	e06c      	b.n	8004d44 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	8979      	ldrh	r1, [r7, #10]
 8004c7c:	4b48      	ldr	r3, [pc, #288]	; (8004da0 <HAL_I2C_Master_Transmit+0x1e0>)
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 fd43 	bl	8005710 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004c8a:	e05b      	b.n	8004d44 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	6a39      	ldr	r1, [r7, #32]
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 fbd2 	bl	800543a <I2C_WaitOnTXISFlagUntilTimeout>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e07b      	b.n	8004d98 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	781a      	ldrb	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	1c5a      	adds	r2, r3, #1
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d034      	beq.n	8004d44 <HAL_I2C_Master_Transmit+0x184>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d130      	bne.n	8004d44 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	2180      	movs	r1, #128	; 0x80
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 fb55 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e04d      	b.n	8004d98 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2bff      	cmp	r3, #255	; 0xff
 8004d04:	d90e      	bls.n	8004d24 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	22ff      	movs	r2, #255	; 0xff
 8004d0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	8979      	ldrh	r1, [r7, #10]
 8004d14:	2300      	movs	r3, #0
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 fcf7 	bl	8005710 <I2C_TransferConfig>
 8004d22:	e00f      	b.n	8004d44 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	8979      	ldrh	r1, [r7, #10]
 8004d36:	2300      	movs	r3, #0
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 fce6 	bl	8005710 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d19e      	bne.n	8004c8c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	6a39      	ldr	r1, [r7, #32]
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 fbb8 	bl	80054c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e01a      	b.n	8004d98 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2220      	movs	r2, #32
 8004d68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6859      	ldr	r1, [r3, #4]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	4b0b      	ldr	r3, [pc, #44]	; (8004da4 <HAL_I2C_Master_Transmit+0x1e4>)
 8004d76:	400b      	ands	r3, r1
 8004d78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	e000      	b.n	8004d98 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004d96:	2302      	movs	r3, #2
  }
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	80002000 	.word	0x80002000
 8004da4:	fe00e800 	.word	0xfe00e800

08004da8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b088      	sub	sp, #32
 8004dac:	af02      	add	r7, sp, #8
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	4608      	mov	r0, r1
 8004db2:	4611      	mov	r1, r2
 8004db4:	461a      	mov	r2, r3
 8004db6:	4603      	mov	r3, r0
 8004db8:	817b      	strh	r3, [r7, #10]
 8004dba:	460b      	mov	r3, r1
 8004dbc:	813b      	strh	r3, [r7, #8]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b20      	cmp	r3, #32
 8004dcc:	f040 80f9 	bne.w	8004fc2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d002      	beq.n	8004ddc <HAL_I2C_Mem_Write+0x34>
 8004dd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d105      	bne.n	8004de8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004de2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e0ed      	b.n	8004fc4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d101      	bne.n	8004df6 <HAL_I2C_Mem_Write+0x4e>
 8004df2:	2302      	movs	r3, #2
 8004df4:	e0e6      	b.n	8004fc4 <HAL_I2C_Mem_Write+0x21c>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004dfe:	f7fc ff2b 	bl	8001c58 <HAL_GetTick>
 8004e02:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	2319      	movs	r3, #25
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 fac3 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e0d1      	b.n	8004fc4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2221      	movs	r2, #33	; 0x21
 8004e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2240      	movs	r2, #64	; 0x40
 8004e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a3a      	ldr	r2, [r7, #32]
 8004e3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e48:	88f8      	ldrh	r0, [r7, #6]
 8004e4a:	893a      	ldrh	r2, [r7, #8]
 8004e4c:	8979      	ldrh	r1, [r7, #10]
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	9301      	str	r3, [sp, #4]
 8004e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	4603      	mov	r3, r0
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 f9d3 	bl	8005204 <I2C_RequestMemoryWrite>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e0a9      	b.n	8004fc4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	2bff      	cmp	r3, #255	; 0xff
 8004e78:	d90e      	bls.n	8004e98 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	22ff      	movs	r2, #255	; 0xff
 8004e7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	8979      	ldrh	r1, [r7, #10]
 8004e88:	2300      	movs	r3, #0
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 fc3d 	bl	8005710 <I2C_TransferConfig>
 8004e96:	e00f      	b.n	8004eb8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea6:	b2da      	uxtb	r2, r3
 8004ea8:	8979      	ldrh	r1, [r7, #10]
 8004eaa:	2300      	movs	r3, #0
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 fc2c 	bl	8005710 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f000 fabc 	bl	800543a <I2C_WaitOnTXISFlagUntilTimeout>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e07b      	b.n	8004fc4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	781a      	ldrb	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d034      	beq.n	8004f70 <HAL_I2C_Mem_Write+0x1c8>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d130      	bne.n	8004f70 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	2200      	movs	r2, #0
 8004f16:	2180      	movs	r1, #128	; 0x80
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 fa3f 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e04d      	b.n	8004fc4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	2bff      	cmp	r3, #255	; 0xff
 8004f30:	d90e      	bls.n	8004f50 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	22ff      	movs	r2, #255	; 0xff
 8004f36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	8979      	ldrh	r1, [r7, #10]
 8004f40:	2300      	movs	r3, #0
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 fbe1 	bl	8005710 <I2C_TransferConfig>
 8004f4e:	e00f      	b.n	8004f70 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5e:	b2da      	uxtb	r2, r3
 8004f60:	8979      	ldrh	r1, [r7, #10]
 8004f62:	2300      	movs	r3, #0
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f000 fbd0 	bl	8005710 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d19e      	bne.n	8004eb8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 faa2 	bl	80054c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e01a      	b.n	8004fc4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2220      	movs	r2, #32
 8004f94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6859      	ldr	r1, [r3, #4]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <HAL_I2C_Mem_Write+0x224>)
 8004fa2:	400b      	ands	r3, r1
 8004fa4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	e000      	b.n	8004fc4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004fc2:	2302      	movs	r3, #2
  }
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	fe00e800 	.word	0xfe00e800

08004fd0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b088      	sub	sp, #32
 8004fd4:	af02      	add	r7, sp, #8
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	4608      	mov	r0, r1
 8004fda:	4611      	mov	r1, r2
 8004fdc:	461a      	mov	r2, r3
 8004fde:	4603      	mov	r3, r0
 8004fe0:	817b      	strh	r3, [r7, #10]
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	813b      	strh	r3, [r7, #8]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b20      	cmp	r3, #32
 8004ff4:	f040 80fd 	bne.w	80051f2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <HAL_I2C_Mem_Read+0x34>
 8004ffe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005000:	2b00      	cmp	r3, #0
 8005002:	d105      	bne.n	8005010 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f44f 7200 	mov.w	r2, #512	; 0x200
 800500a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e0f1      	b.n	80051f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005016:	2b01      	cmp	r3, #1
 8005018:	d101      	bne.n	800501e <HAL_I2C_Mem_Read+0x4e>
 800501a:	2302      	movs	r3, #2
 800501c:	e0ea      	b.n	80051f4 <HAL_I2C_Mem_Read+0x224>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005026:	f7fc fe17 	bl	8001c58 <HAL_GetTick>
 800502a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	2319      	movs	r3, #25
 8005032:	2201      	movs	r2, #1
 8005034:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 f9af 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e0d5      	b.n	80051f4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2222      	movs	r2, #34	; 0x22
 800504c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2240      	movs	r2, #64	; 0x40
 8005054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6a3a      	ldr	r2, [r7, #32]
 8005062:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005068:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005070:	88f8      	ldrh	r0, [r7, #6]
 8005072:	893a      	ldrh	r2, [r7, #8]
 8005074:	8979      	ldrh	r1, [r7, #10]
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	9301      	str	r3, [sp, #4]
 800507a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	4603      	mov	r3, r0
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 f913 	bl	80052ac <I2C_RequestMemoryRead>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d005      	beq.n	8005098 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e0ad      	b.n	80051f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509c:	b29b      	uxth	r3, r3
 800509e:	2bff      	cmp	r3, #255	; 0xff
 80050a0:	d90e      	bls.n	80050c0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	22ff      	movs	r2, #255	; 0xff
 80050a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	8979      	ldrh	r1, [r7, #10]
 80050b0:	4b52      	ldr	r3, [pc, #328]	; (80051fc <HAL_I2C_Mem_Read+0x22c>)
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 fb29 	bl	8005710 <I2C_TransferConfig>
 80050be:	e00f      	b.n	80050e0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	8979      	ldrh	r1, [r7, #10]
 80050d2:	4b4a      	ldr	r3, [pc, #296]	; (80051fc <HAL_I2C_Mem_Read+0x22c>)
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 fb18 	bl	8005710 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e6:	2200      	movs	r2, #0
 80050e8:	2104      	movs	r1, #4
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 f956 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e07c      	b.n	80051f4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	b2d2      	uxtb	r2, r2
 8005106:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005116:	3b01      	subs	r3, #1
 8005118:	b29a      	uxth	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005122:	b29b      	uxth	r3, r3
 8005124:	3b01      	subs	r3, #1
 8005126:	b29a      	uxth	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005130:	b29b      	uxth	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d034      	beq.n	80051a0 <HAL_I2C_Mem_Read+0x1d0>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800513a:	2b00      	cmp	r3, #0
 800513c:	d130      	bne.n	80051a0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005144:	2200      	movs	r2, #0
 8005146:	2180      	movs	r1, #128	; 0x80
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 f927 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e04d      	b.n	80051f4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515c:	b29b      	uxth	r3, r3
 800515e:	2bff      	cmp	r3, #255	; 0xff
 8005160:	d90e      	bls.n	8005180 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	22ff      	movs	r2, #255	; 0xff
 8005166:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516c:	b2da      	uxtb	r2, r3
 800516e:	8979      	ldrh	r1, [r7, #10]
 8005170:	2300      	movs	r3, #0
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 fac9 	bl	8005710 <I2C_TransferConfig>
 800517e:	e00f      	b.n	80051a0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005184:	b29a      	uxth	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800518e:	b2da      	uxtb	r2, r3
 8005190:	8979      	ldrh	r1, [r7, #10]
 8005192:	2300      	movs	r3, #0
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f000 fab8 	bl	8005710 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d19a      	bne.n	80050e0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f000 f98a 	bl	80054c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e01a      	b.n	80051f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2220      	movs	r2, #32
 80051c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6859      	ldr	r1, [r3, #4]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <HAL_I2C_Mem_Read+0x230>)
 80051d2:	400b      	ands	r3, r1
 80051d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2220      	movs	r2, #32
 80051da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	e000      	b.n	80051f4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80051f2:	2302      	movs	r3, #2
  }
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	80002400 	.word	0x80002400
 8005200:	fe00e800 	.word	0xfe00e800

08005204 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af02      	add	r7, sp, #8
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	4608      	mov	r0, r1
 800520e:	4611      	mov	r1, r2
 8005210:	461a      	mov	r2, r3
 8005212:	4603      	mov	r3, r0
 8005214:	817b      	strh	r3, [r7, #10]
 8005216:	460b      	mov	r3, r1
 8005218:	813b      	strh	r3, [r7, #8]
 800521a:	4613      	mov	r3, r2
 800521c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800521e:	88fb      	ldrh	r3, [r7, #6]
 8005220:	b2da      	uxtb	r2, r3
 8005222:	8979      	ldrh	r1, [r7, #10]
 8005224:	4b20      	ldr	r3, [pc, #128]	; (80052a8 <I2C_RequestMemoryWrite+0xa4>)
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f000 fa6f 	bl	8005710 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005232:	69fa      	ldr	r2, [r7, #28]
 8005234:	69b9      	ldr	r1, [r7, #24]
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 f8ff 	bl	800543a <I2C_WaitOnTXISFlagUntilTimeout>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e02c      	b.n	80052a0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005246:	88fb      	ldrh	r3, [r7, #6]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d105      	bne.n	8005258 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800524c:	893b      	ldrh	r3, [r7, #8]
 800524e:	b2da      	uxtb	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	629a      	str	r2, [r3, #40]	; 0x28
 8005256:	e015      	b.n	8005284 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005258:	893b      	ldrh	r3, [r7, #8]
 800525a:	0a1b      	lsrs	r3, r3, #8
 800525c:	b29b      	uxth	r3, r3
 800525e:	b2da      	uxtb	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005266:	69fa      	ldr	r2, [r7, #28]
 8005268:	69b9      	ldr	r1, [r7, #24]
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f000 f8e5 	bl	800543a <I2C_WaitOnTXISFlagUntilTimeout>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e012      	b.n	80052a0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800527a:	893b      	ldrh	r3, [r7, #8]
 800527c:	b2da      	uxtb	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	2200      	movs	r2, #0
 800528c:	2180      	movs	r1, #128	; 0x80
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f000 f884 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	80002000 	.word	0x80002000

080052ac <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af02      	add	r7, sp, #8
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	4608      	mov	r0, r1
 80052b6:	4611      	mov	r1, r2
 80052b8:	461a      	mov	r2, r3
 80052ba:	4603      	mov	r3, r0
 80052bc:	817b      	strh	r3, [r7, #10]
 80052be:	460b      	mov	r3, r1
 80052c0:	813b      	strh	r3, [r7, #8]
 80052c2:	4613      	mov	r3, r2
 80052c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80052c6:	88fb      	ldrh	r3, [r7, #6]
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	8979      	ldrh	r1, [r7, #10]
 80052cc:	4b20      	ldr	r3, [pc, #128]	; (8005350 <I2C_RequestMemoryRead+0xa4>)
 80052ce:	9300      	str	r3, [sp, #0]
 80052d0:	2300      	movs	r3, #0
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 fa1c 	bl	8005710 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052d8:	69fa      	ldr	r2, [r7, #28]
 80052da:	69b9      	ldr	r1, [r7, #24]
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 f8ac 	bl	800543a <I2C_WaitOnTXISFlagUntilTimeout>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e02c      	b.n	8005346 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052ec:	88fb      	ldrh	r3, [r7, #6]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d105      	bne.n	80052fe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052f2:	893b      	ldrh	r3, [r7, #8]
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	629a      	str	r2, [r3, #40]	; 0x28
 80052fc:	e015      	b.n	800532a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80052fe:	893b      	ldrh	r3, [r7, #8]
 8005300:	0a1b      	lsrs	r3, r3, #8
 8005302:	b29b      	uxth	r3, r3
 8005304:	b2da      	uxtb	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800530c:	69fa      	ldr	r2, [r7, #28]
 800530e:	69b9      	ldr	r1, [r7, #24]
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 f892 	bl	800543a <I2C_WaitOnTXISFlagUntilTimeout>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e012      	b.n	8005346 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005320:	893b      	ldrh	r3, [r7, #8]
 8005322:	b2da      	uxtb	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	2200      	movs	r2, #0
 8005332:	2140      	movs	r1, #64	; 0x40
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 f831 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e000      	b.n	8005346 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	80002000 	.word	0x80002000

08005354 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b02      	cmp	r3, #2
 8005368:	d103      	bne.n	8005372 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2200      	movs	r2, #0
 8005370:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b01      	cmp	r3, #1
 800537e:	d007      	beq.n	8005390 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699a      	ldr	r2, [r3, #24]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0201 	orr.w	r2, r2, #1
 800538e:	619a      	str	r2, [r3, #24]
  }
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	603b      	str	r3, [r7, #0]
 80053a8:	4613      	mov	r3, r2
 80053aa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053ac:	e031      	b.n	8005412 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053b4:	d02d      	beq.n	8005412 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053b6:	f7fc fc4f 	bl	8001c58 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d302      	bcc.n	80053cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d122      	bne.n	8005412 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699a      	ldr	r2, [r3, #24]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	4013      	ands	r3, r2
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	429a      	cmp	r2, r3
 80053da:	bf0c      	ite	eq
 80053dc:	2301      	moveq	r3, #1
 80053de:	2300      	movne	r3, #0
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	461a      	mov	r2, r3
 80053e4:	79fb      	ldrb	r3, [r7, #7]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d113      	bne.n	8005412 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ee:	f043 0220 	orr.w	r2, r3, #32
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2220      	movs	r2, #32
 80053fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e00f      	b.n	8005432 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	699a      	ldr	r2, [r3, #24]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4013      	ands	r3, r2
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	429a      	cmp	r2, r3
 8005420:	bf0c      	ite	eq
 8005422:	2301      	moveq	r3, #1
 8005424:	2300      	movne	r3, #0
 8005426:	b2db      	uxtb	r3, r3
 8005428:	461a      	mov	r2, r3
 800542a:	79fb      	ldrb	r3, [r7, #7]
 800542c:	429a      	cmp	r2, r3
 800542e:	d0be      	beq.n	80053ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b084      	sub	sp, #16
 800543e:	af00      	add	r7, sp, #0
 8005440:	60f8      	str	r0, [r7, #12]
 8005442:	60b9      	str	r1, [r7, #8]
 8005444:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005446:	e033      	b.n	80054b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	68b9      	ldr	r1, [r7, #8]
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f87f 	bl	8005550 <I2C_IsErrorOccurred>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e031      	b.n	80054c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005462:	d025      	beq.n	80054b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005464:	f7fc fbf8 	bl	8001c58 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	429a      	cmp	r2, r3
 8005472:	d302      	bcc.n	800547a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d11a      	bne.n	80054b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b02      	cmp	r3, #2
 8005486:	d013      	beq.n	80054b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548c:	f043 0220 	orr.w	r2, r3, #32
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2220      	movs	r2, #32
 8005498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e007      	b.n	80054c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d1c4      	bne.n	8005448 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054d4:	e02f      	b.n	8005536 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	68b9      	ldr	r1, [r7, #8]
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 f838 	bl	8005550 <I2C_IsErrorOccurred>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e02d      	b.n	8005546 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ea:	f7fc fbb5 	bl	8001c58 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d302      	bcc.n	8005500 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d11a      	bne.n	8005536 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	f003 0320 	and.w	r3, r3, #32
 800550a:	2b20      	cmp	r3, #32
 800550c:	d013      	beq.n	8005536 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005512:	f043 0220 	orr.w	r2, r3, #32
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2220      	movs	r2, #32
 800551e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e007      	b.n	8005546 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	f003 0320 	and.w	r3, r3, #32
 8005540:	2b20      	cmp	r3, #32
 8005542:	d1c8      	bne.n	80054d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
	...

08005550 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b08a      	sub	sp, #40	; 0x28
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800555c:	2300      	movs	r3, #0
 800555e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800556a:	2300      	movs	r3, #0
 800556c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	f003 0310 	and.w	r3, r3, #16
 8005578:	2b00      	cmp	r3, #0
 800557a:	d068      	beq.n	800564e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2210      	movs	r2, #16
 8005582:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005584:	e049      	b.n	800561a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800558c:	d045      	beq.n	800561a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800558e:	f7fc fb63 	bl	8001c58 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	429a      	cmp	r2, r3
 800559c:	d302      	bcc.n	80055a4 <I2C_IsErrorOccurred+0x54>
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d13a      	bne.n	800561a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055c6:	d121      	bne.n	800560c <I2C_IsErrorOccurred+0xbc>
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055ce:	d01d      	beq.n	800560c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80055d0:	7cfb      	ldrb	r3, [r7, #19]
 80055d2:	2b20      	cmp	r3, #32
 80055d4:	d01a      	beq.n	800560c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80055e6:	f7fc fb37 	bl	8001c58 <HAL_GetTick>
 80055ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055ec:	e00e      	b.n	800560c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80055ee:	f7fc fb33 	bl	8001c58 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b19      	cmp	r3, #25
 80055fa:	d907      	bls.n	800560c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80055fc:	6a3b      	ldr	r3, [r7, #32]
 80055fe:	f043 0320 	orr.w	r3, r3, #32
 8005602:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800560a:	e006      	b.n	800561a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	f003 0320 	and.w	r3, r3, #32
 8005616:	2b20      	cmp	r3, #32
 8005618:	d1e9      	bne.n	80055ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	f003 0320 	and.w	r3, r3, #32
 8005624:	2b20      	cmp	r3, #32
 8005626:	d003      	beq.n	8005630 <I2C_IsErrorOccurred+0xe0>
 8005628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800562c:	2b00      	cmp	r3, #0
 800562e:	d0aa      	beq.n	8005586 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005634:	2b00      	cmp	r3, #0
 8005636:	d103      	bne.n	8005640 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2220      	movs	r2, #32
 800563e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	f043 0304 	orr.w	r3, r3, #4
 8005646:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00b      	beq.n	8005678 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	f043 0301 	orr.w	r3, r3, #1
 8005666:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005670:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00b      	beq.n	800569a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	f043 0308 	orr.w	r3, r3, #8
 8005688:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005692:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00b      	beq.n	80056bc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	f043 0302 	orr.w	r3, r3, #2
 80056aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80056bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d01c      	beq.n	80056fe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f7ff fe45 	bl	8005354 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6859      	ldr	r1, [r3, #4]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	4b0d      	ldr	r3, [pc, #52]	; (800570c <I2C_IsErrorOccurred+0x1bc>)
 80056d6:	400b      	ands	r3, r1
 80056d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	431a      	orrs	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2220      	movs	r2, #32
 80056ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80056fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005702:	4618      	mov	r0, r3
 8005704:	3728      	adds	r7, #40	; 0x28
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	fe00e800 	.word	0xfe00e800

08005710 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005710:	b480      	push	{r7}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	607b      	str	r3, [r7, #4]
 800571a:	460b      	mov	r3, r1
 800571c:	817b      	strh	r3, [r7, #10]
 800571e:	4613      	mov	r3, r2
 8005720:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005722:	897b      	ldrh	r3, [r7, #10]
 8005724:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005728:	7a7b      	ldrb	r3, [r7, #9]
 800572a:	041b      	lsls	r3, r3, #16
 800572c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005730:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	4313      	orrs	r3, r2
 800573a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800573e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	0d5b      	lsrs	r3, r3, #21
 800574a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800574e:	4b08      	ldr	r3, [pc, #32]	; (8005770 <I2C_TransferConfig+0x60>)
 8005750:	430b      	orrs	r3, r1
 8005752:	43db      	mvns	r3, r3
 8005754:	ea02 0103 	and.w	r1, r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	430a      	orrs	r2, r1
 8005760:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005762:	bf00      	nop
 8005764:	371c      	adds	r7, #28
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	03ff63ff 	.word	0x03ff63ff

08005774 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b20      	cmp	r3, #32
 8005788:	d138      	bne.n	80057fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005790:	2b01      	cmp	r3, #1
 8005792:	d101      	bne.n	8005798 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005794:	2302      	movs	r3, #2
 8005796:	e032      	b.n	80057fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2224      	movs	r2, #36	; 0x24
 80057a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0201 	bic.w	r2, r2, #1
 80057b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6819      	ldr	r1, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0201 	orr.w	r2, r2, #1
 80057e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2220      	movs	r2, #32
 80057ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80057f8:	2300      	movs	r3, #0
 80057fa:	e000      	b.n	80057fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80057fc:	2302      	movs	r3, #2
  }
}
 80057fe:	4618      	mov	r0, r3
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800580a:	b480      	push	{r7}
 800580c:	b085      	sub	sp, #20
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b20      	cmp	r3, #32
 800581e:	d139      	bne.n	8005894 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005826:	2b01      	cmp	r3, #1
 8005828:	d101      	bne.n	800582e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800582a:	2302      	movs	r3, #2
 800582c:	e033      	b.n	8005896 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2224      	movs	r2, #36	; 0x24
 800583a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0201 	bic.w	r2, r2, #1
 800584c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800585c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	021b      	lsls	r3, r3, #8
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	4313      	orrs	r3, r2
 8005866:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0201 	orr.w	r2, r2, #1
 800587e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2220      	movs	r2, #32
 8005884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005890:	2300      	movs	r3, #0
 8005892:	e000      	b.n	8005896 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005894:	2302      	movs	r3, #2
  }
}
 8005896:	4618      	mov	r0, r3
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
	...

080058a4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b088      	sub	sp, #32
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e10d      	b.n	8005ad2 <HAL_I2S_Init+0x22e>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d106      	bne.n	80058d0 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7fb fe08 	bl	80014e0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d107      	bne.n	80058f6 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 0201 	bic.w	r2, r2, #1
 80058f4:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2200      	movs	r2, #0
 80058fc:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	2b04      	cmp	r3, #4
 8005904:	d008      	beq.n	8005918 <HAL_I2S_Init+0x74>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	2b06      	cmp	r3, #6
 800590c:	d004      	beq.n	8005918 <HAL_I2S_Init+0x74>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	2b0a      	cmp	r3, #10
 8005914:	f040 8087 	bne.w	8005a26 <HAL_I2S_Init+0x182>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	2b02      	cmp	r3, #2
 800591e:	d05a      	beq.n	80059d6 <HAL_I2S_Init+0x132>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8005928:	2302      	movs	r3, #2
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	e001      	b.n	8005932 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 800592e:	2301      	movs	r3, #1
 8005930:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	2b30      	cmp	r3, #48	; 0x30
 8005938:	d003      	beq.n	8005942 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800593e:	2bb0      	cmp	r3, #176	; 0xb0
 8005940:	d102      	bne.n	8005948 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8005942:	2301      	movs	r3, #1
 8005944:	60fb      	str	r3, [r7, #12]
 8005946:	e001      	b.n	800594c <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 800594c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005950:	f04f 0100 	mov.w	r1, #0
 8005954:	f002 feb6 	bl	80086c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005958:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005962:	d113      	bne.n	800598c <HAL_I2S_Init+0xe8>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8005964:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	fa22 f303 	lsr.w	r3, r2, r3
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	fbb2 f2f3 	udiv	r2, r2, r3
 8005974:	4613      	mov	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	461a      	mov	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	fbb2 f3f3 	udiv	r3, r2, r3
 8005986:	3305      	adds	r3, #5
 8005988:	613b      	str	r3, [r7, #16]
 800598a:	e014      	b.n	80059b6 <HAL_I2S_Init+0x112>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 800598c:	2220      	movs	r2, #32
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	fa22 f303 	lsr.w	r3, r2, r3
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	fb02 f303 	mul.w	r3, r2, r3
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	fbb2 f2f3 	udiv	r2, r2, r3
 80059a0:	4613      	mov	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	461a      	mov	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b2:	3305      	adds	r3, #5
 80059b4:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	4a48      	ldr	r2, [pc, #288]	; (8005adc <HAL_I2S_Init+0x238>)
 80059ba:	fba2 2303 	umull	r2, r3, r2, r3
 80059be:	08db      	lsrs	r3, r3, #3
 80059c0:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	085b      	lsrs	r3, r3, #1
 80059d2:	61fb      	str	r3, [r7, #28]
 80059d4:	e003      	b.n	80059de <HAL_I2S_Init+0x13a>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 80059d6:	2302      	movs	r3, #2
 80059d8:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 80059da:	2300      	movs	r3, #0
 80059dc:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d102      	bne.n	80059ea <HAL_I2S_Init+0x146>
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d002      	beq.n	80059f0 <HAL_I2S_Init+0x14c>
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	2bff      	cmp	r3, #255	; 0xff
 80059ee:	d907      	bls.n	8005a00 <HAL_I2S_Init+0x15c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f4:	f043 0210 	orr.w	r2, r3, #16
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e068      	b.n	8005ad2 <HAL_I2S_Init+0x22e>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_I2S_Init+0x166>
    {
      i2sodd = 1UL;
 8005a06:	2301      	movs	r3, #1
 8005a08:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a10:	4b33      	ldr	r3, [pc, #204]	; (8005ae0 <HAL_I2S_Init+0x23c>)
 8005a12:	4013      	ands	r3, r2
 8005a14:	69fa      	ldr	r2, [r7, #28]
 8005a16:	0411      	lsls	r1, r2, #16
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	0612      	lsls	r2, r2, #24
 8005a1c:	4311      	orrs	r1, r2
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	6812      	ldr	r2, [r2, #0]
 8005a22:	430b      	orrs	r3, r1
 8005a24:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a2c:	4b2d      	ldr	r3, [pc, #180]	; (8005ae4 <HAL_I2S_Init+0x240>)
 8005a2e:	4013      	ands	r3, r2
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6851      	ldr	r1, [r2, #4]
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	6892      	ldr	r2, [r2, #8]
 8005a38:	4311      	orrs	r1, r2
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	68d2      	ldr	r2, [r2, #12]
 8005a3e:	4311      	orrs	r1, r2
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	6992      	ldr	r2, [r2, #24]
 8005a44:	4311      	orrs	r1, r2
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	6a12      	ldr	r2, [r2, #32]
 8005a4a:	4311      	orrs	r1, r2
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a50:	4311      	orrs	r1, r2
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	6912      	ldr	r2, [r2, #16]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0201 	orr.w	r2, r2, #1
 8005a62:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f640 72f8 	movw	r2, #4088	; 0xff8
 8005a6c:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005a7c:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	69da      	ldr	r2, [r3, #28]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	2b04      	cmp	r3, #4
 8005a9a:	d007      	beq.n	8005aac <HAL_I2S_Init+0x208>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	2b06      	cmp	r3, #6
 8005aa2:	d003      	beq.n	8005aac <HAL_I2S_Init+0x208>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	2b0a      	cmp	r3, #10
 8005aaa:	d10a      	bne.n	8005ac2 <HAL_I2S_Init+0x21e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3720      	adds	r7, #32
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	cccccccd 	.word	0xcccccccd
 8005ae0:	fe00ffff 	.word	0xfe00ffff
 8005ae4:	fdff9040 	.word	0xfdff9040

08005ae8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, const uint16_t *pData, uint16_t Size)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	4613      	mov	r3, r2
 8005af4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005af6:	2300      	movs	r3, #0
 8005af8:	75fb      	strb	r3, [r7, #23]

  if ((pData == NULL) || (Size == 0UL))
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <HAL_I2S_Transmit_DMA+0x1e>
 8005b00:	88fb      	ldrh	r3, [r7, #6]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_I2S_Transmit_DMA+0x22>
  {
    return  HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e086      	b.n	8005c18 <HAL_I2S_Transmit_DMA+0x130>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d001      	beq.n	8005b1a <HAL_I2S_Transmit_DMA+0x32>
  {
    return HAL_BUSY;
 8005b16:	2302      	movs	r3, #2
 8005b18:	e07e      	b.n	8005c18 <HAL_I2S_Transmit_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d101      	bne.n	8005b2a <HAL_I2S_Transmit_DMA+0x42>
 8005b26:	2302      	movs	r3, #2
 8005b28:	e076      	b.n	8005c18 <HAL_I2S_Transmit_DMA+0x130>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_TX;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2203      	movs	r2, #3
 8005b36:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->pTxBuffPtr  = (const uint16_t *)pData;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->TxXferSize  = Size;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	88fa      	ldrh	r2, [r7, #6]
 8005b4a:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = Size;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	88fa      	ldrh	r2, [r7, #6]
 8005b50:	865a      	strh	r2, [r3, #50]	; 0x32

  /* Init field not used in handle to zero */
  hi2s->pRxBuffPtr  = NULL;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	635a      	str	r2, [r3, #52]	; 0x34
  hi2s->RxXferSize  = (uint16_t)0UL;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = (uint16_t)0UL;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b68:	4a2d      	ldr	r2, [pc, #180]	; (8005c20 <HAL_I2S_Transmit_DMA+0x138>)
 8005b6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b70:	4a2c      	ldr	r2, [pc, #176]	; (8005c24 <HAL_I2S_Transmit_DMA+0x13c>)
 8005b72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b78:	4a2b      	ldr	r2, [pc, #172]	; (8005c28 <HAL_I2S_Transmit_DMA+0x140>)
 8005b7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b84:	4619      	mov	r1, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3320      	adds	r3, #32
 8005b8c:	461a      	mov	r2, r3
                                 hi2s->TxXferCount))
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b92:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8005b94:	f7fc fd08 	bl	80025a8 <HAL_DMA_Start_IT>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d011      	beq.n	8005bc2 <HAL_I2S_Transmit_DMA+0xda>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba2:	f043 0208 	orr.w	r2, r3, #8
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    __HAL_UNLOCK(hi2s);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    errorcode = HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8005bbe:	7dfb      	ldrb	r3, [r7, #23]
 8005bc0:	e02a      	b.n	8005c18 <HAL_I2S_Transmit_DMA+0x130>
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN))
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d107      	bne.n	8005be0 <HAL_I2S_Transmit_DMA+0xf8>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bde:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d107      	bne.n	8005bfe <HAL_I2S_Transmit_DMA+0x116>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f042 0201 	orr.w	r2, r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c0c:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return errorcode;
 8005c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3718      	adds	r7, #24
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	08005d21 	.word	0x08005d21
 8005c24:	08005cdf 	.word	0x08005cdf
 8005c28:	08005d3d 	.word	0x08005d3d

08005c2c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c34:	2300      	movs	r3, #0
 8005c36:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  /* Disable the I2S Tx/Rx DMA requests */
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689a      	ldr	r2, [r3, #8]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c46:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689a      	ldr	r2, [r3, #8]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c56:	609a      	str	r2, [r3, #8]

  /* Abort the I2S DMA tx Stream/Channel */
  if (hi2s->hdmatx != NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00f      	beq.n	8005c80 <HAL_I2S_DMAStop+0x54>
  {
    /* Disable the I2S DMA tx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7fc ff09 	bl	8002a7c <HAL_DMA_Abort>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d007      	beq.n	8005c80 <HAL_I2S_DMAStop+0x54>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c74:	f043 0208 	orr.w	r2, r3, #8
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	651a      	str	r2, [r3, #80]	; 0x50
      errorcode = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Abort the I2S DMA rx Stream/Channel */
  if (hi2s->hdmarx != NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00f      	beq.n	8005ca8 <HAL_I2S_DMAStop+0x7c>
  {
    /* Disable the I2S DMA rx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7fc fef5 	bl	8002a7c <HAL_DMA_Abort>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d007      	beq.n	8005ca8 <HAL_I2S_DMAStop+0x7c>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c9c:	f043 0208 	orr.w	r2, r3, #8
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	651a      	str	r2, [r3, #80]	; 0x50
      errorcode = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable I2S peripheral */
  __HAL_I2S_DISABLE(hi2s);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 0201 	bic.w	r2, r2, #1
 8005cb6:	601a      	str	r2, [r3, #0]

  hi2s->State = HAL_I2S_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return errorcode;
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b083      	sub	sp, #12
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b084      	sub	sp, #16
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cea:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10e      	bne.n	8005d12 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d02:	609a      	str	r2, [r3, #8]

    hi2s->TxXferCount = (uint16_t) 0UL;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f7fb fb4c 	bl	80013b0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005d18:	bf00      	nop
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f7fb fb2e 	bl	8001390 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005d34:	bf00      	nop
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d48:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689a      	ldr	r2, [r3, #8]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005d58:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d72:	f043 0208 	orr.w	r2, r3, #8
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	651a      	str	r2, [r3, #80]	; 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f7ff ffa5 	bl	8005cca <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005d80:	bf00      	nop
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d90:	f7fb ff62 	bl	8001c58 <HAL_GetTick>
 8005d94:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e03b      	b.n	8005e18 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2202      	movs	r2, #2
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 0201 	bic.w	r2, r2, #1
 8005dbe:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8005dc0:	e00f      	b.n	8005de2 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8005dc2:	f7fb ff49 	bl	8001c58 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b05      	cmp	r3, #5
 8005dce:	d908      	bls.n	8005de2 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2240      	movs	r2, #64	; 0x40
 8005dd4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2203      	movs	r2, #3
 8005dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e01a      	b.n	8005e18 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1e8      	bne.n	8005dc2 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f9bb 	bl	800616c <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e03e      	b.n	8005eb8 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_MDMA_ConfigPostRequestMask+0x28>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e037      	b.n	8005eb8 <HAL_MDMA_ConfigPostRequestMask+0x98>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d126      	bne.n	8005eaa <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d11c      	bne.n	8005ea4 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d108      	bne.n	8005e92 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	691a      	ldr	r2, [r3, #16]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005e8e:	611a      	str	r2, [r3, #16]
 8005e90:	e00d      	b.n	8005eae <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	691a      	ldr	r2, [r3, #16]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005ea0:	611a      	str	r2, [r3, #16]
 8005ea2:	e004      	b.n	8005eae <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	75fb      	strb	r3, [r7, #23]
 8005ea8:	e001      	b.n	8005eae <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	371c      	adds	r7, #28
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ed0:	4b91      	ldr	r3, [pc, #580]	; (8006118 <HAL_MDMA_IRQHandler+0x254>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a91      	ldr	r2, [pc, #580]	; (800611c <HAL_MDMA_IRQHandler+0x258>)
 8005ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eda:	0a9b      	lsrs	r3, r3, #10
 8005edc:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	4b8e      	ldr	r3, [pc, #568]	; (8006120 <HAL_MDMA_IRQHandler+0x25c>)
 8005ee6:	4413      	add	r3, r2
 8005ee8:	099b      	lsrs	r3, r3, #6
 8005eea:	f003 031f 	and.w	r3, r3, #31
 8005eee:	2201      	movs	r2, #1
 8005ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef4:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8005ef6:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	4013      	ands	r3, r2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 812d 	beq.w	8006160 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d054      	beq.n	8005fbe <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d04d      	beq.n	8005fbe <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68da      	ldr	r2, [r3, #12]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 0202 	bic.w	r2, r2, #2
 8005f30:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d106      	bne.n	8005f52 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f48:	f043 0201 	orr.w	r2, r3, #1
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	669a      	str	r2, [r3, #104]	; 0x68
 8005f50:	e005      	b.n	8005f5e <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f56:	f043 0202 	orr.w	r2, r3, #2
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d005      	beq.n	8005f74 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f6c:	f043 0204 	orr.w	r2, r3, #4
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d005      	beq.n	8005f8a <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f82:	f043 0208 	orr.w	r2, r3, #8
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d005      	beq.n	8005fa0 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f98:	f043 0210 	orr.w	r2, r3, #16
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d005      	beq.n	8005fb6 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fae:	f043 0220 	orr.w	r2, r3, #32
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0310 	and.w	r3, r3, #16
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d012      	beq.n	8005ff2 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	f003 0320 	and.w	r3, r3, #32
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00b      	beq.n	8005ff2 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2210      	movs	r2, #16
 8005fe0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0308 	and.w	r3, r3, #8
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d012      	beq.n	8006026 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	f003 0310 	and.w	r3, r3, #16
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00b      	beq.n	8006026 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2208      	movs	r2, #8
 8006014:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0304 	and.w	r3, r3, #4
 8006030:	2b00      	cmp	r3, #0
 8006032:	d012      	beq.n	800605a <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	f003 0308 	and.w	r3, r3, #8
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00b      	beq.n	800605a <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2204      	movs	r2, #4
 8006048:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800604e:	2b00      	cmp	r3, #0
 8006050:	d003      	beq.n	800605a <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0302 	and.w	r3, r3, #2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d039      	beq.n	80060dc <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f003 0304 	and.w	r3, r3, #4
 8006072:	2b00      	cmp	r3, #0
 8006074:	d032      	beq.n	80060dc <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68da      	ldr	r2, [r3, #12]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8006084:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b04      	cmp	r3, #4
 8006090:	d110      	bne.n	80060b4 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d05c      	beq.n	8006164 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	4798      	blx	r3
        }
        return;
 80060b2:	e057      	b.n	8006164 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2202      	movs	r2, #2
 80060ba:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d003      	beq.n	80060dc <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d040      	beq.n	8006166 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2204      	movs	r2, #4
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68da      	ldr	r2, [r3, #12]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 0201 	bic.w	r2, r2, #1
 80060fa:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	3301      	adds	r3, #1
 8006100:	60bb      	str	r3, [r7, #8]
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	429a      	cmp	r2, r3
 8006106:	d30d      	bcc.n	8006124 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1f2      	bne.n	80060fc <HAL_MDMA_IRQHandler+0x238>
 8006116:	e006      	b.n	8006126 <HAL_MDMA_IRQHandler+0x262>
 8006118:	24000008 	.word	0x24000008
 800611c:	1b4e81b5 	.word	0x1b4e81b5
 8006120:	adffffc0 	.word	0xadffffc0
        break;
 8006124:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	2b00      	cmp	r3, #0
 800613a:	d004      	beq.n	8006146 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2203      	movs	r2, #3
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006144:	e003      	b.n	800614e <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006152:	2b00      	cmp	r3, #0
 8006154:	d007      	beq.n	8006166 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	4798      	blx	r3
 800615e:	e002      	b.n	8006166 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8006160:	bf00      	nop
 8006162:	e000      	b.n	8006166 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8006164:	bf00      	nop
    }
  }
}
 8006166:	3718      	adds	r7, #24
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68d9      	ldr	r1, [r3, #12]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	691a      	ldr	r2, [r3, #16]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	695a      	ldr	r2, [r3, #20]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8006192:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800619e:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a4:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80061aa:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b0:	3b01      	subs	r3, #1
 80061b2:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 80061b4:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80061c0:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80061c2:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061cc:	d107      	bne.n	80061de <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	691a      	ldr	r2, [r3, #16]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80061dc:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2200      	movs	r2, #0
 80061e4:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	da11      	bge.n	8006212 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	695a      	ldr	r2, [r3, #20]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80061fc:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006202:	425b      	negs	r3, r3
 8006204:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	b292      	uxth	r2, r2
 800620e:	621a      	str	r2, [r3, #32]
 8006210:	e006      	b.n	8006220 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006216:	461a      	mov	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	b292      	uxth	r2, r2
 800621e:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006224:	2b00      	cmp	r3, #0
 8006226:	da15      	bge.n	8006254 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	695a      	ldr	r2, [r3, #20]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8006236:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623c:	425b      	negs	r3, r3
 800623e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6a19      	ldr	r1, [r3, #32]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	041a      	lsls	r2, r3, #16
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	621a      	str	r2, [r3, #32]
 8006252:	e009      	b.n	8006268 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6a19      	ldr	r1, [r3, #32]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625e:	041a      	lsls	r2, r3, #16
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	430a      	orrs	r2, r1
 8006266:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006270:	d006      	beq.n	8006280 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	b2d2      	uxtb	r2, r2
 800627c:	629a      	str	r2, [r3, #40]	; 0x28
 800627e:	e003      	b.n	8006288 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2200      	movs	r2, #0
 8006286:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2200      	movs	r2, #0
 800628e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006290:	bf00      	nop
 8006292:	3714      	adds	r7, #20
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80062a4:	4b19      	ldr	r3, [pc, #100]	; (800630c <HAL_PWREx_ConfigSupply+0x70>)
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b04      	cmp	r3, #4
 80062ae:	d00a      	beq.n	80062c6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80062b0:	4b16      	ldr	r3, [pc, #88]	; (800630c <HAL_PWREx_ConfigSupply+0x70>)
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f003 0307 	and.w	r3, r3, #7
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d001      	beq.n	80062c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e01f      	b.n	8006302 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80062c2:	2300      	movs	r3, #0
 80062c4:	e01d      	b.n	8006302 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80062c6:	4b11      	ldr	r3, [pc, #68]	; (800630c <HAL_PWREx_ConfigSupply+0x70>)
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f023 0207 	bic.w	r2, r3, #7
 80062ce:	490f      	ldr	r1, [pc, #60]	; (800630c <HAL_PWREx_ConfigSupply+0x70>)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80062d6:	f7fb fcbf 	bl	8001c58 <HAL_GetTick>
 80062da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80062dc:	e009      	b.n	80062f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80062de:	f7fb fcbb 	bl	8001c58 <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062ec:	d901      	bls.n	80062f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e007      	b.n	8006302 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80062f2:	4b06      	ldr	r3, [pc, #24]	; (800630c <HAL_PWREx_ConfigSupply+0x70>)
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062fe:	d1ee      	bne.n	80062de <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	58024800 	.word	0x58024800

08006310 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b08c      	sub	sp, #48	; 0x30
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d102      	bne.n	8006324 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	f000 bc48 	b.w	8006bb4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b00      	cmp	r3, #0
 800632e:	f000 8088 	beq.w	8006442 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006332:	4b99      	ldr	r3, [pc, #612]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800633a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800633c:	4b96      	ldr	r3, [pc, #600]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 800633e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006340:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006344:	2b10      	cmp	r3, #16
 8006346:	d007      	beq.n	8006358 <HAL_RCC_OscConfig+0x48>
 8006348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634a:	2b18      	cmp	r3, #24
 800634c:	d111      	bne.n	8006372 <HAL_RCC_OscConfig+0x62>
 800634e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006350:	f003 0303 	and.w	r3, r3, #3
 8006354:	2b02      	cmp	r3, #2
 8006356:	d10c      	bne.n	8006372 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006358:	4b8f      	ldr	r3, [pc, #572]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d06d      	beq.n	8006440 <HAL_RCC_OscConfig+0x130>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d169      	bne.n	8006440 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	f000 bc21 	b.w	8006bb4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800637a:	d106      	bne.n	800638a <HAL_RCC_OscConfig+0x7a>
 800637c:	4b86      	ldr	r3, [pc, #536]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a85      	ldr	r2, [pc, #532]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 8006382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006386:	6013      	str	r3, [r2, #0]
 8006388:	e02e      	b.n	80063e8 <HAL_RCC_OscConfig+0xd8>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10c      	bne.n	80063ac <HAL_RCC_OscConfig+0x9c>
 8006392:	4b81      	ldr	r3, [pc, #516]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a80      	ldr	r2, [pc, #512]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 8006398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800639c:	6013      	str	r3, [r2, #0]
 800639e:	4b7e      	ldr	r3, [pc, #504]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a7d      	ldr	r2, [pc, #500]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 80063a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063a8:	6013      	str	r3, [r2, #0]
 80063aa:	e01d      	b.n	80063e8 <HAL_RCC_OscConfig+0xd8>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063b4:	d10c      	bne.n	80063d0 <HAL_RCC_OscConfig+0xc0>
 80063b6:	4b78      	ldr	r3, [pc, #480]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a77      	ldr	r2, [pc, #476]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 80063bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063c0:	6013      	str	r3, [r2, #0]
 80063c2:	4b75      	ldr	r3, [pc, #468]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a74      	ldr	r2, [pc, #464]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 80063c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063cc:	6013      	str	r3, [r2, #0]
 80063ce:	e00b      	b.n	80063e8 <HAL_RCC_OscConfig+0xd8>
 80063d0:	4b71      	ldr	r3, [pc, #452]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a70      	ldr	r2, [pc, #448]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 80063d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063da:	6013      	str	r3, [r2, #0]
 80063dc:	4b6e      	ldr	r3, [pc, #440]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a6d      	ldr	r2, [pc, #436]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 80063e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d013      	beq.n	8006418 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f0:	f7fb fc32 	bl	8001c58 <HAL_GetTick>
 80063f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063f6:	e008      	b.n	800640a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063f8:	f7fb fc2e 	bl	8001c58 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	2b64      	cmp	r3, #100	; 0x64
 8006404:	d901      	bls.n	800640a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e3d4      	b.n	8006bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800640a:	4b63      	ldr	r3, [pc, #396]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d0f0      	beq.n	80063f8 <HAL_RCC_OscConfig+0xe8>
 8006416:	e014      	b.n	8006442 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006418:	f7fb fc1e 	bl	8001c58 <HAL_GetTick>
 800641c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800641e:	e008      	b.n	8006432 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006420:	f7fb fc1a 	bl	8001c58 <HAL_GetTick>
 8006424:	4602      	mov	r2, r0
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	2b64      	cmp	r3, #100	; 0x64
 800642c:	d901      	bls.n	8006432 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e3c0      	b.n	8006bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006432:	4b59      	ldr	r3, [pc, #356]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1f0      	bne.n	8006420 <HAL_RCC_OscConfig+0x110>
 800643e:	e000      	b.n	8006442 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b00      	cmp	r3, #0
 800644c:	f000 80ca 	beq.w	80065e4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006450:	4b51      	ldr	r3, [pc, #324]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006458:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800645a:	4b4f      	ldr	r3, [pc, #316]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 800645c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d007      	beq.n	8006476 <HAL_RCC_OscConfig+0x166>
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	2b18      	cmp	r3, #24
 800646a:	d156      	bne.n	800651a <HAL_RCC_OscConfig+0x20a>
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	f003 0303 	and.w	r3, r3, #3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d151      	bne.n	800651a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006476:	4b48      	ldr	r3, [pc, #288]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0304 	and.w	r3, r3, #4
 800647e:	2b00      	cmp	r3, #0
 8006480:	d005      	beq.n	800648e <HAL_RCC_OscConfig+0x17e>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e392      	b.n	8006bb4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800648e:	4b42      	ldr	r3, [pc, #264]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f023 0219 	bic.w	r2, r3, #25
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	493f      	ldr	r1, [pc, #252]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 800649c:	4313      	orrs	r3, r2
 800649e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a0:	f7fb fbda 	bl	8001c58 <HAL_GetTick>
 80064a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064a6:	e008      	b.n	80064ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064a8:	f7fb fbd6 	bl	8001c58 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e37c      	b.n	8006bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064ba:	4b37      	ldr	r3, [pc, #220]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0304 	and.w	r3, r3, #4
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d0f0      	beq.n	80064a8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064c6:	f7fb fbf7 	bl	8001cb8 <HAL_GetREVID>
 80064ca:	4603      	mov	r3, r0
 80064cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d817      	bhi.n	8006504 <HAL_RCC_OscConfig+0x1f4>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	2b40      	cmp	r3, #64	; 0x40
 80064da:	d108      	bne.n	80064ee <HAL_RCC_OscConfig+0x1de>
 80064dc:	4b2e      	ldr	r3, [pc, #184]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80064e4:	4a2c      	ldr	r2, [pc, #176]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 80064e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064ea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064ec:	e07a      	b.n	80065e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ee:	4b2a      	ldr	r3, [pc, #168]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	031b      	lsls	r3, r3, #12
 80064fc:	4926      	ldr	r1, [pc, #152]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006502:	e06f      	b.n	80065e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006504:	4b24      	ldr	r3, [pc, #144]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	061b      	lsls	r3, r3, #24
 8006512:	4921      	ldr	r1, [pc, #132]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 8006514:	4313      	orrs	r3, r2
 8006516:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006518:	e064      	b.n	80065e4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d047      	beq.n	80065b2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006522:	4b1d      	ldr	r3, [pc, #116]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f023 0219 	bic.w	r2, r3, #25
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	491a      	ldr	r1, [pc, #104]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 8006530:	4313      	orrs	r3, r2
 8006532:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006534:	f7fb fb90 	bl	8001c58 <HAL_GetTick>
 8006538:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800653a:	e008      	b.n	800654e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800653c:	f7fb fb8c 	bl	8001c58 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	2b02      	cmp	r3, #2
 8006548:	d901      	bls.n	800654e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e332      	b.n	8006bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800654e:	4b12      	ldr	r3, [pc, #72]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0304 	and.w	r3, r3, #4
 8006556:	2b00      	cmp	r3, #0
 8006558:	d0f0      	beq.n	800653c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800655a:	f7fb fbad 	bl	8001cb8 <HAL_GetREVID>
 800655e:	4603      	mov	r3, r0
 8006560:	f241 0203 	movw	r2, #4099	; 0x1003
 8006564:	4293      	cmp	r3, r2
 8006566:	d819      	bhi.n	800659c <HAL_RCC_OscConfig+0x28c>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	2b40      	cmp	r3, #64	; 0x40
 800656e:	d108      	bne.n	8006582 <HAL_RCC_OscConfig+0x272>
 8006570:	4b09      	ldr	r3, [pc, #36]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006578:	4a07      	ldr	r2, [pc, #28]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 800657a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800657e:	6053      	str	r3, [r2, #4]
 8006580:	e030      	b.n	80065e4 <HAL_RCC_OscConfig+0x2d4>
 8006582:	4b05      	ldr	r3, [pc, #20]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	031b      	lsls	r3, r3, #12
 8006590:	4901      	ldr	r1, [pc, #4]	; (8006598 <HAL_RCC_OscConfig+0x288>)
 8006592:	4313      	orrs	r3, r2
 8006594:	604b      	str	r3, [r1, #4]
 8006596:	e025      	b.n	80065e4 <HAL_RCC_OscConfig+0x2d4>
 8006598:	58024400 	.word	0x58024400
 800659c:	4b9a      	ldr	r3, [pc, #616]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	061b      	lsls	r3, r3, #24
 80065aa:	4997      	ldr	r1, [pc, #604]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	604b      	str	r3, [r1, #4]
 80065b0:	e018      	b.n	80065e4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065b2:	4b95      	ldr	r3, [pc, #596]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a94      	ldr	r2, [pc, #592]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 80065b8:	f023 0301 	bic.w	r3, r3, #1
 80065bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065be:	f7fb fb4b 	bl	8001c58 <HAL_GetTick>
 80065c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80065c4:	e008      	b.n	80065d8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065c6:	f7fb fb47 	bl	8001c58 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d901      	bls.n	80065d8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e2ed      	b.n	8006bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80065d8:	4b8b      	ldr	r3, [pc, #556]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0304 	and.w	r3, r3, #4
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1f0      	bne.n	80065c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0310 	and.w	r3, r3, #16
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 80a9 	beq.w	8006744 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065f2:	4b85      	ldr	r3, [pc, #532]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80065fc:	4b82      	ldr	r3, [pc, #520]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 80065fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006600:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	2b08      	cmp	r3, #8
 8006606:	d007      	beq.n	8006618 <HAL_RCC_OscConfig+0x308>
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	2b18      	cmp	r3, #24
 800660c:	d13a      	bne.n	8006684 <HAL_RCC_OscConfig+0x374>
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f003 0303 	and.w	r3, r3, #3
 8006614:	2b01      	cmp	r3, #1
 8006616:	d135      	bne.n	8006684 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006618:	4b7b      	ldr	r3, [pc, #492]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006620:	2b00      	cmp	r3, #0
 8006622:	d005      	beq.n	8006630 <HAL_RCC_OscConfig+0x320>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	2b80      	cmp	r3, #128	; 0x80
 800662a:	d001      	beq.n	8006630 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e2c1      	b.n	8006bb4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006630:	f7fb fb42 	bl	8001cb8 <HAL_GetREVID>
 8006634:	4603      	mov	r3, r0
 8006636:	f241 0203 	movw	r2, #4099	; 0x1003
 800663a:	4293      	cmp	r3, r2
 800663c:	d817      	bhi.n	800666e <HAL_RCC_OscConfig+0x35e>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	2b20      	cmp	r3, #32
 8006644:	d108      	bne.n	8006658 <HAL_RCC_OscConfig+0x348>
 8006646:	4b70      	ldr	r3, [pc, #448]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800664e:	4a6e      	ldr	r2, [pc, #440]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 8006650:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006654:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006656:	e075      	b.n	8006744 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006658:	4b6b      	ldr	r3, [pc, #428]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a1b      	ldr	r3, [r3, #32]
 8006664:	069b      	lsls	r3, r3, #26
 8006666:	4968      	ldr	r1, [pc, #416]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 8006668:	4313      	orrs	r3, r2
 800666a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800666c:	e06a      	b.n	8006744 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800666e:	4b66      	ldr	r3, [pc, #408]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	061b      	lsls	r3, r3, #24
 800667c:	4962      	ldr	r1, [pc, #392]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 800667e:	4313      	orrs	r3, r2
 8006680:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006682:	e05f      	b.n	8006744 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	69db      	ldr	r3, [r3, #28]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d042      	beq.n	8006712 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800668c:	4b5e      	ldr	r3, [pc, #376]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a5d      	ldr	r2, [pc, #372]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 8006692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006698:	f7fb fade 	bl	8001c58 <HAL_GetTick>
 800669c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800669e:	e008      	b.n	80066b2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80066a0:	f7fb fada 	bl	8001c58 <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d901      	bls.n	80066b2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e280      	b.n	8006bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066b2:	4b55      	ldr	r3, [pc, #340]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d0f0      	beq.n	80066a0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066be:	f7fb fafb 	bl	8001cb8 <HAL_GetREVID>
 80066c2:	4603      	mov	r3, r0
 80066c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d817      	bhi.n	80066fc <HAL_RCC_OscConfig+0x3ec>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	2b20      	cmp	r3, #32
 80066d2:	d108      	bne.n	80066e6 <HAL_RCC_OscConfig+0x3d6>
 80066d4:	4b4c      	ldr	r3, [pc, #304]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80066dc:	4a4a      	ldr	r2, [pc, #296]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 80066de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066e2:	6053      	str	r3, [r2, #4]
 80066e4:	e02e      	b.n	8006744 <HAL_RCC_OscConfig+0x434>
 80066e6:	4b48      	ldr	r3, [pc, #288]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	069b      	lsls	r3, r3, #26
 80066f4:	4944      	ldr	r1, [pc, #272]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	604b      	str	r3, [r1, #4]
 80066fa:	e023      	b.n	8006744 <HAL_RCC_OscConfig+0x434>
 80066fc:	4b42      	ldr	r3, [pc, #264]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a1b      	ldr	r3, [r3, #32]
 8006708:	061b      	lsls	r3, r3, #24
 800670a:	493f      	ldr	r1, [pc, #252]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 800670c:	4313      	orrs	r3, r2
 800670e:	60cb      	str	r3, [r1, #12]
 8006710:	e018      	b.n	8006744 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006712:	4b3d      	ldr	r3, [pc, #244]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a3c      	ldr	r2, [pc, #240]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 8006718:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800671c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671e:	f7fb fa9b 	bl	8001c58 <HAL_GetTick>
 8006722:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006724:	e008      	b.n	8006738 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006726:	f7fb fa97 	bl	8001c58 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	2b02      	cmp	r3, #2
 8006732:	d901      	bls.n	8006738 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e23d      	b.n	8006bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006738:	4b33      	ldr	r3, [pc, #204]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1f0      	bne.n	8006726 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0308 	and.w	r3, r3, #8
 800674c:	2b00      	cmp	r3, #0
 800674e:	d036      	beq.n	80067be <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d019      	beq.n	800678c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006758:	4b2b      	ldr	r3, [pc, #172]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 800675a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800675c:	4a2a      	ldr	r2, [pc, #168]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 800675e:	f043 0301 	orr.w	r3, r3, #1
 8006762:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006764:	f7fb fa78 	bl	8001c58 <HAL_GetTick>
 8006768:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800676a:	e008      	b.n	800677e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800676c:	f7fb fa74 	bl	8001c58 <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	2b02      	cmp	r3, #2
 8006778:	d901      	bls.n	800677e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e21a      	b.n	8006bb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800677e:	4b22      	ldr	r3, [pc, #136]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 8006780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	2b00      	cmp	r3, #0
 8006788:	d0f0      	beq.n	800676c <HAL_RCC_OscConfig+0x45c>
 800678a:	e018      	b.n	80067be <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800678c:	4b1e      	ldr	r3, [pc, #120]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 800678e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006790:	4a1d      	ldr	r2, [pc, #116]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 8006792:	f023 0301 	bic.w	r3, r3, #1
 8006796:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006798:	f7fb fa5e 	bl	8001c58 <HAL_GetTick>
 800679c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800679e:	e008      	b.n	80067b2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067a0:	f7fb fa5a 	bl	8001c58 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d901      	bls.n	80067b2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e200      	b.n	8006bb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80067b2:	4b15      	ldr	r3, [pc, #84]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 80067b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1f0      	bne.n	80067a0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0320 	and.w	r3, r3, #32
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d039      	beq.n	800683e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d01c      	beq.n	800680c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80067d2:	4b0d      	ldr	r3, [pc, #52]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a0c      	ldr	r2, [pc, #48]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 80067d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80067dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80067de:	f7fb fa3b 	bl	8001c58 <HAL_GetTick>
 80067e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80067e4:	e008      	b.n	80067f8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067e6:	f7fb fa37 	bl	8001c58 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d901      	bls.n	80067f8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e1dd      	b.n	8006bb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80067f8:	4b03      	ldr	r3, [pc, #12]	; (8006808 <HAL_RCC_OscConfig+0x4f8>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d0f0      	beq.n	80067e6 <HAL_RCC_OscConfig+0x4d6>
 8006804:	e01b      	b.n	800683e <HAL_RCC_OscConfig+0x52e>
 8006806:	bf00      	nop
 8006808:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800680c:	4b9b      	ldr	r3, [pc, #620]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a9a      	ldr	r2, [pc, #616]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 8006812:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006816:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006818:	f7fb fa1e 	bl	8001c58 <HAL_GetTick>
 800681c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800681e:	e008      	b.n	8006832 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006820:	f7fb fa1a 	bl	8001c58 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	2b02      	cmp	r3, #2
 800682c:	d901      	bls.n	8006832 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e1c0      	b.n	8006bb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006832:	4b92      	ldr	r3, [pc, #584]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1f0      	bne.n	8006820 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0304 	and.w	r3, r3, #4
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 8081 	beq.w	800694e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800684c:	4b8c      	ldr	r3, [pc, #560]	; (8006a80 <HAL_RCC_OscConfig+0x770>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a8b      	ldr	r2, [pc, #556]	; (8006a80 <HAL_RCC_OscConfig+0x770>)
 8006852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006856:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006858:	f7fb f9fe 	bl	8001c58 <HAL_GetTick>
 800685c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800685e:	e008      	b.n	8006872 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006860:	f7fb f9fa 	bl	8001c58 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	2b64      	cmp	r3, #100	; 0x64
 800686c:	d901      	bls.n	8006872 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e1a0      	b.n	8006bb4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006872:	4b83      	ldr	r3, [pc, #524]	; (8006a80 <HAL_RCC_OscConfig+0x770>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0f0      	beq.n	8006860 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d106      	bne.n	8006894 <HAL_RCC_OscConfig+0x584>
 8006886:	4b7d      	ldr	r3, [pc, #500]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 8006888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688a:	4a7c      	ldr	r2, [pc, #496]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 800688c:	f043 0301 	orr.w	r3, r3, #1
 8006890:	6713      	str	r3, [r2, #112]	; 0x70
 8006892:	e02d      	b.n	80068f0 <HAL_RCC_OscConfig+0x5e0>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10c      	bne.n	80068b6 <HAL_RCC_OscConfig+0x5a6>
 800689c:	4b77      	ldr	r3, [pc, #476]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 800689e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a0:	4a76      	ldr	r2, [pc, #472]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 80068a2:	f023 0301 	bic.w	r3, r3, #1
 80068a6:	6713      	str	r3, [r2, #112]	; 0x70
 80068a8:	4b74      	ldr	r3, [pc, #464]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 80068aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ac:	4a73      	ldr	r2, [pc, #460]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 80068ae:	f023 0304 	bic.w	r3, r3, #4
 80068b2:	6713      	str	r3, [r2, #112]	; 0x70
 80068b4:	e01c      	b.n	80068f0 <HAL_RCC_OscConfig+0x5e0>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	2b05      	cmp	r3, #5
 80068bc:	d10c      	bne.n	80068d8 <HAL_RCC_OscConfig+0x5c8>
 80068be:	4b6f      	ldr	r3, [pc, #444]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 80068c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c2:	4a6e      	ldr	r2, [pc, #440]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 80068c4:	f043 0304 	orr.w	r3, r3, #4
 80068c8:	6713      	str	r3, [r2, #112]	; 0x70
 80068ca:	4b6c      	ldr	r3, [pc, #432]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 80068cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ce:	4a6b      	ldr	r2, [pc, #428]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 80068d0:	f043 0301 	orr.w	r3, r3, #1
 80068d4:	6713      	str	r3, [r2, #112]	; 0x70
 80068d6:	e00b      	b.n	80068f0 <HAL_RCC_OscConfig+0x5e0>
 80068d8:	4b68      	ldr	r3, [pc, #416]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 80068da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068dc:	4a67      	ldr	r2, [pc, #412]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 80068de:	f023 0301 	bic.w	r3, r3, #1
 80068e2:	6713      	str	r3, [r2, #112]	; 0x70
 80068e4:	4b65      	ldr	r3, [pc, #404]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 80068e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e8:	4a64      	ldr	r2, [pc, #400]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 80068ea:	f023 0304 	bic.w	r3, r3, #4
 80068ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d015      	beq.n	8006924 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f8:	f7fb f9ae 	bl	8001c58 <HAL_GetTick>
 80068fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068fe:	e00a      	b.n	8006916 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006900:	f7fb f9aa 	bl	8001c58 <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	f241 3288 	movw	r2, #5000	; 0x1388
 800690e:	4293      	cmp	r3, r2
 8006910:	d901      	bls.n	8006916 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e14e      	b.n	8006bb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006916:	4b59      	ldr	r3, [pc, #356]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 8006918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d0ee      	beq.n	8006900 <HAL_RCC_OscConfig+0x5f0>
 8006922:	e014      	b.n	800694e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006924:	f7fb f998 	bl	8001c58 <HAL_GetTick>
 8006928:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800692a:	e00a      	b.n	8006942 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800692c:	f7fb f994 	bl	8001c58 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	f241 3288 	movw	r2, #5000	; 0x1388
 800693a:	4293      	cmp	r3, r2
 800693c:	d901      	bls.n	8006942 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e138      	b.n	8006bb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006942:	4b4e      	ldr	r3, [pc, #312]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 8006944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006946:	f003 0302 	and.w	r3, r3, #2
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1ee      	bne.n	800692c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006952:	2b00      	cmp	r3, #0
 8006954:	f000 812d 	beq.w	8006bb2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006958:	4b48      	ldr	r3, [pc, #288]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006960:	2b18      	cmp	r3, #24
 8006962:	f000 80bd 	beq.w	8006ae0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696a:	2b02      	cmp	r3, #2
 800696c:	f040 809e 	bne.w	8006aac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006970:	4b42      	ldr	r3, [pc, #264]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a41      	ldr	r2, [pc, #260]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 8006976:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800697a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800697c:	f7fb f96c 	bl	8001c58 <HAL_GetTick>
 8006980:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006982:	e008      	b.n	8006996 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006984:	f7fb f968 	bl	8001c58 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	2b02      	cmp	r3, #2
 8006990:	d901      	bls.n	8006996 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e10e      	b.n	8006bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006996:	4b39      	ldr	r3, [pc, #228]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1f0      	bne.n	8006984 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069a2:	4b36      	ldr	r3, [pc, #216]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 80069a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069a6:	4b37      	ldr	r3, [pc, #220]	; (8006a84 <HAL_RCC_OscConfig+0x774>)
 80069a8:	4013      	ands	r3, r2
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80069b2:	0112      	lsls	r2, r2, #4
 80069b4:	430a      	orrs	r2, r1
 80069b6:	4931      	ldr	r1, [pc, #196]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	628b      	str	r3, [r1, #40]	; 0x28
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c0:	3b01      	subs	r3, #1
 80069c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ca:	3b01      	subs	r3, #1
 80069cc:	025b      	lsls	r3, r3, #9
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	431a      	orrs	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d6:	3b01      	subs	r3, #1
 80069d8:	041b      	lsls	r3, r3, #16
 80069da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80069de:	431a      	orrs	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e4:	3b01      	subs	r3, #1
 80069e6:	061b      	lsls	r3, r3, #24
 80069e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80069ec:	4923      	ldr	r1, [pc, #140]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80069f2:	4b22      	ldr	r3, [pc, #136]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 80069f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f6:	4a21      	ldr	r2, [pc, #132]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 80069f8:	f023 0301 	bic.w	r3, r3, #1
 80069fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80069fe:	4b1f      	ldr	r3, [pc, #124]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 8006a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a02:	4b21      	ldr	r3, [pc, #132]	; (8006a88 <HAL_RCC_OscConfig+0x778>)
 8006a04:	4013      	ands	r3, r2
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006a0a:	00d2      	lsls	r2, r2, #3
 8006a0c:	491b      	ldr	r1, [pc, #108]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006a12:	4b1a      	ldr	r3, [pc, #104]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 8006a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a16:	f023 020c 	bic.w	r2, r3, #12
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1e:	4917      	ldr	r1, [pc, #92]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006a24:	4b15      	ldr	r3, [pc, #84]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 8006a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a28:	f023 0202 	bic.w	r2, r3, #2
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a30:	4912      	ldr	r1, [pc, #72]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a36:	4b11      	ldr	r3, [pc, #68]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 8006a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3a:	4a10      	ldr	r2, [pc, #64]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 8006a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a42:	4b0e      	ldr	r3, [pc, #56]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 8006a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a46:	4a0d      	ldr	r2, [pc, #52]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 8006a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006a4e:	4b0b      	ldr	r3, [pc, #44]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 8006a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a52:	4a0a      	ldr	r2, [pc, #40]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 8006a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006a5a:	4b08      	ldr	r3, [pc, #32]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 8006a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5e:	4a07      	ldr	r2, [pc, #28]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 8006a60:	f043 0301 	orr.w	r3, r3, #1
 8006a64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a66:	4b05      	ldr	r3, [pc, #20]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a04      	ldr	r2, [pc, #16]	; (8006a7c <HAL_RCC_OscConfig+0x76c>)
 8006a6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a72:	f7fb f8f1 	bl	8001c58 <HAL_GetTick>
 8006a76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a78:	e011      	b.n	8006a9e <HAL_RCC_OscConfig+0x78e>
 8006a7a:	bf00      	nop
 8006a7c:	58024400 	.word	0x58024400
 8006a80:	58024800 	.word	0x58024800
 8006a84:	fffffc0c 	.word	0xfffffc0c
 8006a88:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a8c:	f7fb f8e4 	bl	8001c58 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e08a      	b.n	8006bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a9e:	4b47      	ldr	r3, [pc, #284]	; (8006bbc <HAL_RCC_OscConfig+0x8ac>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d0f0      	beq.n	8006a8c <HAL_RCC_OscConfig+0x77c>
 8006aaa:	e082      	b.n	8006bb2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aac:	4b43      	ldr	r3, [pc, #268]	; (8006bbc <HAL_RCC_OscConfig+0x8ac>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a42      	ldr	r2, [pc, #264]	; (8006bbc <HAL_RCC_OscConfig+0x8ac>)
 8006ab2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab8:	f7fb f8ce 	bl	8001c58 <HAL_GetTick>
 8006abc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006abe:	e008      	b.n	8006ad2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ac0:	f7fb f8ca 	bl	8001c58 <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d901      	bls.n	8006ad2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e070      	b.n	8006bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ad2:	4b3a      	ldr	r3, [pc, #232]	; (8006bbc <HAL_RCC_OscConfig+0x8ac>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1f0      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x7b0>
 8006ade:	e068      	b.n	8006bb2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006ae0:	4b36      	ldr	r3, [pc, #216]	; (8006bbc <HAL_RCC_OscConfig+0x8ac>)
 8006ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006ae6:	4b35      	ldr	r3, [pc, #212]	; (8006bbc <HAL_RCC_OscConfig+0x8ac>)
 8006ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d031      	beq.n	8006b58 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	f003 0203 	and.w	r2, r3, #3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d12a      	bne.n	8006b58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	091b      	lsrs	r3, r3, #4
 8006b06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d122      	bne.n	8006b58 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d11a      	bne.n	8006b58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	0a5b      	lsrs	r3, r3, #9
 8006b26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b2e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d111      	bne.n	8006b58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	0c1b      	lsrs	r3, r3, #16
 8006b38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b40:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d108      	bne.n	8006b58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	0e1b      	lsrs	r3, r3, #24
 8006b4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b52:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d001      	beq.n	8006b5c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e02b      	b.n	8006bb4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006b5c:	4b17      	ldr	r3, [pc, #92]	; (8006bbc <HAL_RCC_OscConfig+0x8ac>)
 8006b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b60:	08db      	lsrs	r3, r3, #3
 8006b62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b66:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b6c:	693a      	ldr	r2, [r7, #16]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d01f      	beq.n	8006bb2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006b72:	4b12      	ldr	r3, [pc, #72]	; (8006bbc <HAL_RCC_OscConfig+0x8ac>)
 8006b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b76:	4a11      	ldr	r2, [pc, #68]	; (8006bbc <HAL_RCC_OscConfig+0x8ac>)
 8006b78:	f023 0301 	bic.w	r3, r3, #1
 8006b7c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b7e:	f7fb f86b 	bl	8001c58 <HAL_GetTick>
 8006b82:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006b84:	bf00      	nop
 8006b86:	f7fb f867 	bl	8001c58 <HAL_GetTick>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d0f9      	beq.n	8006b86 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006b92:	4b0a      	ldr	r3, [pc, #40]	; (8006bbc <HAL_RCC_OscConfig+0x8ac>)
 8006b94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b96:	4b0a      	ldr	r3, [pc, #40]	; (8006bc0 <HAL_RCC_OscConfig+0x8b0>)
 8006b98:	4013      	ands	r3, r2
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006b9e:	00d2      	lsls	r2, r2, #3
 8006ba0:	4906      	ldr	r1, [pc, #24]	; (8006bbc <HAL_RCC_OscConfig+0x8ac>)
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006ba6:	4b05      	ldr	r3, [pc, #20]	; (8006bbc <HAL_RCC_OscConfig+0x8ac>)
 8006ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006baa:	4a04      	ldr	r2, [pc, #16]	; (8006bbc <HAL_RCC_OscConfig+0x8ac>)
 8006bac:	f043 0301 	orr.w	r3, r3, #1
 8006bb0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3730      	adds	r7, #48	; 0x30
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	58024400 	.word	0x58024400
 8006bc0:	ffff0007 	.word	0xffff0007

08006bc4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b086      	sub	sp, #24
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d101      	bne.n	8006bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e19c      	b.n	8006f12 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006bd8:	4b8a      	ldr	r3, [pc, #552]	; (8006e04 <HAL_RCC_ClockConfig+0x240>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 030f 	and.w	r3, r3, #15
 8006be0:	683a      	ldr	r2, [r7, #0]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d910      	bls.n	8006c08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006be6:	4b87      	ldr	r3, [pc, #540]	; (8006e04 <HAL_RCC_ClockConfig+0x240>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f023 020f 	bic.w	r2, r3, #15
 8006bee:	4985      	ldr	r1, [pc, #532]	; (8006e04 <HAL_RCC_ClockConfig+0x240>)
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bf6:	4b83      	ldr	r3, [pc, #524]	; (8006e04 <HAL_RCC_ClockConfig+0x240>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 030f 	and.w	r3, r3, #15
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d001      	beq.n	8006c08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e184      	b.n	8006f12 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0304 	and.w	r3, r3, #4
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d010      	beq.n	8006c36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	691a      	ldr	r2, [r3, #16]
 8006c18:	4b7b      	ldr	r3, [pc, #492]	; (8006e08 <HAL_RCC_ClockConfig+0x244>)
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d908      	bls.n	8006c36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c24:	4b78      	ldr	r3, [pc, #480]	; (8006e08 <HAL_RCC_ClockConfig+0x244>)
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	4975      	ldr	r1, [pc, #468]	; (8006e08 <HAL_RCC_ClockConfig+0x244>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0308 	and.w	r3, r3, #8
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d010      	beq.n	8006c64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	695a      	ldr	r2, [r3, #20]
 8006c46:	4b70      	ldr	r3, [pc, #448]	; (8006e08 <HAL_RCC_ClockConfig+0x244>)
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d908      	bls.n	8006c64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c52:	4b6d      	ldr	r3, [pc, #436]	; (8006e08 <HAL_RCC_ClockConfig+0x244>)
 8006c54:	69db      	ldr	r3, [r3, #28]
 8006c56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	496a      	ldr	r1, [pc, #424]	; (8006e08 <HAL_RCC_ClockConfig+0x244>)
 8006c60:	4313      	orrs	r3, r2
 8006c62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0310 	and.w	r3, r3, #16
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d010      	beq.n	8006c92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	699a      	ldr	r2, [r3, #24]
 8006c74:	4b64      	ldr	r3, [pc, #400]	; (8006e08 <HAL_RCC_ClockConfig+0x244>)
 8006c76:	69db      	ldr	r3, [r3, #28]
 8006c78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d908      	bls.n	8006c92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c80:	4b61      	ldr	r3, [pc, #388]	; (8006e08 <HAL_RCC_ClockConfig+0x244>)
 8006c82:	69db      	ldr	r3, [r3, #28]
 8006c84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	495e      	ldr	r1, [pc, #376]	; (8006e08 <HAL_RCC_ClockConfig+0x244>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0320 	and.w	r3, r3, #32
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d010      	beq.n	8006cc0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	69da      	ldr	r2, [r3, #28]
 8006ca2:	4b59      	ldr	r3, [pc, #356]	; (8006e08 <HAL_RCC_ClockConfig+0x244>)
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d908      	bls.n	8006cc0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006cae:	4b56      	ldr	r3, [pc, #344]	; (8006e08 <HAL_RCC_ClockConfig+0x244>)
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	4953      	ldr	r1, [pc, #332]	; (8006e08 <HAL_RCC_ClockConfig+0x244>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0302 	and.w	r3, r3, #2
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d010      	beq.n	8006cee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	68da      	ldr	r2, [r3, #12]
 8006cd0:	4b4d      	ldr	r3, [pc, #308]	; (8006e08 <HAL_RCC_ClockConfig+0x244>)
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	f003 030f 	and.w	r3, r3, #15
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d908      	bls.n	8006cee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cdc:	4b4a      	ldr	r3, [pc, #296]	; (8006e08 <HAL_RCC_ClockConfig+0x244>)
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	f023 020f 	bic.w	r2, r3, #15
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	4947      	ldr	r1, [pc, #284]	; (8006e08 <HAL_RCC_ClockConfig+0x244>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d055      	beq.n	8006da6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006cfa:	4b43      	ldr	r3, [pc, #268]	; (8006e08 <HAL_RCC_ClockConfig+0x244>)
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	4940      	ldr	r1, [pc, #256]	; (8006e08 <HAL_RCC_ClockConfig+0x244>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d107      	bne.n	8006d24 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d14:	4b3c      	ldr	r3, [pc, #240]	; (8006e08 <HAL_RCC_ClockConfig+0x244>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d121      	bne.n	8006d64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e0f6      	b.n	8006f12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	2b03      	cmp	r3, #3
 8006d2a:	d107      	bne.n	8006d3c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d2c:	4b36      	ldr	r3, [pc, #216]	; (8006e08 <HAL_RCC_ClockConfig+0x244>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d115      	bne.n	8006d64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e0ea      	b.n	8006f12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d107      	bne.n	8006d54 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d44:	4b30      	ldr	r3, [pc, #192]	; (8006e08 <HAL_RCC_ClockConfig+0x244>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d109      	bne.n	8006d64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e0de      	b.n	8006f12 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d54:	4b2c      	ldr	r3, [pc, #176]	; (8006e08 <HAL_RCC_ClockConfig+0x244>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 0304 	and.w	r3, r3, #4
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d101      	bne.n	8006d64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e0d6      	b.n	8006f12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d64:	4b28      	ldr	r3, [pc, #160]	; (8006e08 <HAL_RCC_ClockConfig+0x244>)
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	f023 0207 	bic.w	r2, r3, #7
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	4925      	ldr	r1, [pc, #148]	; (8006e08 <HAL_RCC_ClockConfig+0x244>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d76:	f7fa ff6f 	bl	8001c58 <HAL_GetTick>
 8006d7a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d7c:	e00a      	b.n	8006d94 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d7e:	f7fa ff6b 	bl	8001c58 <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d901      	bls.n	8006d94 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e0be      	b.n	8006f12 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d94:	4b1c      	ldr	r3, [pc, #112]	; (8006e08 <HAL_RCC_ClockConfig+0x244>)
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	00db      	lsls	r3, r3, #3
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d1eb      	bne.n	8006d7e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d010      	beq.n	8006dd4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	68da      	ldr	r2, [r3, #12]
 8006db6:	4b14      	ldr	r3, [pc, #80]	; (8006e08 <HAL_RCC_ClockConfig+0x244>)
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	f003 030f 	and.w	r3, r3, #15
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d208      	bcs.n	8006dd4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dc2:	4b11      	ldr	r3, [pc, #68]	; (8006e08 <HAL_RCC_ClockConfig+0x244>)
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	f023 020f 	bic.w	r2, r3, #15
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	490e      	ldr	r1, [pc, #56]	; (8006e08 <HAL_RCC_ClockConfig+0x244>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006dd4:	4b0b      	ldr	r3, [pc, #44]	; (8006e04 <HAL_RCC_ClockConfig+0x240>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 030f 	and.w	r3, r3, #15
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d214      	bcs.n	8006e0c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006de2:	4b08      	ldr	r3, [pc, #32]	; (8006e04 <HAL_RCC_ClockConfig+0x240>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f023 020f 	bic.w	r2, r3, #15
 8006dea:	4906      	ldr	r1, [pc, #24]	; (8006e04 <HAL_RCC_ClockConfig+0x240>)
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006df2:	4b04      	ldr	r3, [pc, #16]	; (8006e04 <HAL_RCC_ClockConfig+0x240>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 030f 	and.w	r3, r3, #15
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d005      	beq.n	8006e0c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e086      	b.n	8006f12 <HAL_RCC_ClockConfig+0x34e>
 8006e04:	52002000 	.word	0x52002000
 8006e08:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0304 	and.w	r3, r3, #4
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d010      	beq.n	8006e3a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	691a      	ldr	r2, [r3, #16]
 8006e1c:	4b3f      	ldr	r3, [pc, #252]	; (8006f1c <HAL_RCC_ClockConfig+0x358>)
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d208      	bcs.n	8006e3a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e28:	4b3c      	ldr	r3, [pc, #240]	; (8006f1c <HAL_RCC_ClockConfig+0x358>)
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	4939      	ldr	r1, [pc, #228]	; (8006f1c <HAL_RCC_ClockConfig+0x358>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0308 	and.w	r3, r3, #8
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d010      	beq.n	8006e68 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	695a      	ldr	r2, [r3, #20]
 8006e4a:	4b34      	ldr	r3, [pc, #208]	; (8006f1c <HAL_RCC_ClockConfig+0x358>)
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d208      	bcs.n	8006e68 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e56:	4b31      	ldr	r3, [pc, #196]	; (8006f1c <HAL_RCC_ClockConfig+0x358>)
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	492e      	ldr	r1, [pc, #184]	; (8006f1c <HAL_RCC_ClockConfig+0x358>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0310 	and.w	r3, r3, #16
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d010      	beq.n	8006e96 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	699a      	ldr	r2, [r3, #24]
 8006e78:	4b28      	ldr	r3, [pc, #160]	; (8006f1c <HAL_RCC_ClockConfig+0x358>)
 8006e7a:	69db      	ldr	r3, [r3, #28]
 8006e7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d208      	bcs.n	8006e96 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e84:	4b25      	ldr	r3, [pc, #148]	; (8006f1c <HAL_RCC_ClockConfig+0x358>)
 8006e86:	69db      	ldr	r3, [r3, #28]
 8006e88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	4922      	ldr	r1, [pc, #136]	; (8006f1c <HAL_RCC_ClockConfig+0x358>)
 8006e92:	4313      	orrs	r3, r2
 8006e94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0320 	and.w	r3, r3, #32
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d010      	beq.n	8006ec4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	69da      	ldr	r2, [r3, #28]
 8006ea6:	4b1d      	ldr	r3, [pc, #116]	; (8006f1c <HAL_RCC_ClockConfig+0x358>)
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d208      	bcs.n	8006ec4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006eb2:	4b1a      	ldr	r3, [pc, #104]	; (8006f1c <HAL_RCC_ClockConfig+0x358>)
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	4917      	ldr	r1, [pc, #92]	; (8006f1c <HAL_RCC_ClockConfig+0x358>)
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006ec4:	f000 f834 	bl	8006f30 <HAL_RCC_GetSysClockFreq>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	4b14      	ldr	r3, [pc, #80]	; (8006f1c <HAL_RCC_ClockConfig+0x358>)
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	0a1b      	lsrs	r3, r3, #8
 8006ed0:	f003 030f 	and.w	r3, r3, #15
 8006ed4:	4912      	ldr	r1, [pc, #72]	; (8006f20 <HAL_RCC_ClockConfig+0x35c>)
 8006ed6:	5ccb      	ldrb	r3, [r1, r3]
 8006ed8:	f003 031f 	and.w	r3, r3, #31
 8006edc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ee2:	4b0e      	ldr	r3, [pc, #56]	; (8006f1c <HAL_RCC_ClockConfig+0x358>)
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	f003 030f 	and.w	r3, r3, #15
 8006eea:	4a0d      	ldr	r2, [pc, #52]	; (8006f20 <HAL_RCC_ClockConfig+0x35c>)
 8006eec:	5cd3      	ldrb	r3, [r2, r3]
 8006eee:	f003 031f 	and.w	r3, r3, #31
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef8:	4a0a      	ldr	r2, [pc, #40]	; (8006f24 <HAL_RCC_ClockConfig+0x360>)
 8006efa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006efc:	4a0a      	ldr	r2, [pc, #40]	; (8006f28 <HAL_RCC_ClockConfig+0x364>)
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006f02:	4b0a      	ldr	r3, [pc, #40]	; (8006f2c <HAL_RCC_ClockConfig+0x368>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fa fe5c 	bl	8001bc4 <HAL_InitTick>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3718      	adds	r7, #24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	58024400 	.word	0x58024400
 8006f20:	080107b8 	.word	0x080107b8
 8006f24:	2400000c 	.word	0x2400000c
 8006f28:	24000008 	.word	0x24000008
 8006f2c:	24000010 	.word	0x24000010

08006f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b089      	sub	sp, #36	; 0x24
 8006f34:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f36:	4bb3      	ldr	r3, [pc, #716]	; (8007204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f3e:	2b18      	cmp	r3, #24
 8006f40:	f200 8155 	bhi.w	80071ee <HAL_RCC_GetSysClockFreq+0x2be>
 8006f44:	a201      	add	r2, pc, #4	; (adr r2, 8006f4c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4a:	bf00      	nop
 8006f4c:	08006fb1 	.word	0x08006fb1
 8006f50:	080071ef 	.word	0x080071ef
 8006f54:	080071ef 	.word	0x080071ef
 8006f58:	080071ef 	.word	0x080071ef
 8006f5c:	080071ef 	.word	0x080071ef
 8006f60:	080071ef 	.word	0x080071ef
 8006f64:	080071ef 	.word	0x080071ef
 8006f68:	080071ef 	.word	0x080071ef
 8006f6c:	08006fd7 	.word	0x08006fd7
 8006f70:	080071ef 	.word	0x080071ef
 8006f74:	080071ef 	.word	0x080071ef
 8006f78:	080071ef 	.word	0x080071ef
 8006f7c:	080071ef 	.word	0x080071ef
 8006f80:	080071ef 	.word	0x080071ef
 8006f84:	080071ef 	.word	0x080071ef
 8006f88:	080071ef 	.word	0x080071ef
 8006f8c:	08006fdd 	.word	0x08006fdd
 8006f90:	080071ef 	.word	0x080071ef
 8006f94:	080071ef 	.word	0x080071ef
 8006f98:	080071ef 	.word	0x080071ef
 8006f9c:	080071ef 	.word	0x080071ef
 8006fa0:	080071ef 	.word	0x080071ef
 8006fa4:	080071ef 	.word	0x080071ef
 8006fa8:	080071ef 	.word	0x080071ef
 8006fac:	08006fe3 	.word	0x08006fe3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fb0:	4b94      	ldr	r3, [pc, #592]	; (8007204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0320 	and.w	r3, r3, #32
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d009      	beq.n	8006fd0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fbc:	4b91      	ldr	r3, [pc, #580]	; (8007204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	08db      	lsrs	r3, r3, #3
 8006fc2:	f003 0303 	and.w	r3, r3, #3
 8006fc6:	4a90      	ldr	r2, [pc, #576]	; (8007208 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fcc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006fce:	e111      	b.n	80071f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006fd0:	4b8d      	ldr	r3, [pc, #564]	; (8007208 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006fd2:	61bb      	str	r3, [r7, #24]
      break;
 8006fd4:	e10e      	b.n	80071f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006fd6:	4b8d      	ldr	r3, [pc, #564]	; (800720c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006fd8:	61bb      	str	r3, [r7, #24]
      break;
 8006fda:	e10b      	b.n	80071f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006fdc:	4b8c      	ldr	r3, [pc, #560]	; (8007210 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006fde:	61bb      	str	r3, [r7, #24]
      break;
 8006fe0:	e108      	b.n	80071f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006fe2:	4b88      	ldr	r3, [pc, #544]	; (8007204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe6:	f003 0303 	and.w	r3, r3, #3
 8006fea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006fec:	4b85      	ldr	r3, [pc, #532]	; (8007204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff0:	091b      	lsrs	r3, r3, #4
 8006ff2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ff6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006ff8:	4b82      	ldr	r3, [pc, #520]	; (8007204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007002:	4b80      	ldr	r3, [pc, #512]	; (8007204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007006:	08db      	lsrs	r3, r3, #3
 8007008:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	fb02 f303 	mul.w	r3, r2, r3
 8007012:	ee07 3a90 	vmov	s15, r3
 8007016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800701a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 80e1 	beq.w	80071e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	2b02      	cmp	r3, #2
 800702a:	f000 8083 	beq.w	8007134 <HAL_RCC_GetSysClockFreq+0x204>
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2b02      	cmp	r3, #2
 8007032:	f200 80a1 	bhi.w	8007178 <HAL_RCC_GetSysClockFreq+0x248>
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d003      	beq.n	8007044 <HAL_RCC_GetSysClockFreq+0x114>
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d056      	beq.n	80070f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007042:	e099      	b.n	8007178 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007044:	4b6f      	ldr	r3, [pc, #444]	; (8007204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0320 	and.w	r3, r3, #32
 800704c:	2b00      	cmp	r3, #0
 800704e:	d02d      	beq.n	80070ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007050:	4b6c      	ldr	r3, [pc, #432]	; (8007204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	08db      	lsrs	r3, r3, #3
 8007056:	f003 0303 	and.w	r3, r3, #3
 800705a:	4a6b      	ldr	r2, [pc, #428]	; (8007208 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800705c:	fa22 f303 	lsr.w	r3, r2, r3
 8007060:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	ee07 3a90 	vmov	s15, r3
 8007068:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	ee07 3a90 	vmov	s15, r3
 8007072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800707a:	4b62      	ldr	r3, [pc, #392]	; (8007204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800707c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007082:	ee07 3a90 	vmov	s15, r3
 8007086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800708a:	ed97 6a02 	vldr	s12, [r7, #8]
 800708e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007214 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800709a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800709e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80070aa:	e087      	b.n	80071bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	ee07 3a90 	vmov	s15, r3
 80070b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007218 <HAL_RCC_GetSysClockFreq+0x2e8>
 80070ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070be:	4b51      	ldr	r3, [pc, #324]	; (8007204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c6:	ee07 3a90 	vmov	s15, r3
 80070ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80070d2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007214 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80070ee:	e065      	b.n	80071bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	ee07 3a90 	vmov	s15, r3
 80070f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800721c <HAL_RCC_GetSysClockFreq+0x2ec>
 80070fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007102:	4b40      	ldr	r3, [pc, #256]	; (8007204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800710a:	ee07 3a90 	vmov	s15, r3
 800710e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007112:	ed97 6a02 	vldr	s12, [r7, #8]
 8007116:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007214 <HAL_RCC_GetSysClockFreq+0x2e4>
 800711a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800711e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800712a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800712e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007132:	e043      	b.n	80071bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	ee07 3a90 	vmov	s15, r3
 800713a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007220 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007146:	4b2f      	ldr	r3, [pc, #188]	; (8007204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800714e:	ee07 3a90 	vmov	s15, r3
 8007152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007156:	ed97 6a02 	vldr	s12, [r7, #8]
 800715a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007214 <HAL_RCC_GetSysClockFreq+0x2e4>
 800715e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800716a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800716e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007172:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007176:	e021      	b.n	80071bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	ee07 3a90 	vmov	s15, r3
 800717e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007182:	eddf 6a26 	vldr	s13, [pc, #152]	; 800721c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800718a:	4b1e      	ldr	r3, [pc, #120]	; (8007204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800718c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007192:	ee07 3a90 	vmov	s15, r3
 8007196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800719a:	ed97 6a02 	vldr	s12, [r7, #8]
 800719e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007214 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80071bc:	4b11      	ldr	r3, [pc, #68]	; (8007204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c0:	0a5b      	lsrs	r3, r3, #9
 80071c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071c6:	3301      	adds	r3, #1
 80071c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	ee07 3a90 	vmov	s15, r3
 80071d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80071d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80071d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071e0:	ee17 3a90 	vmov	r3, s15
 80071e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80071e6:	e005      	b.n	80071f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80071e8:	2300      	movs	r3, #0
 80071ea:	61bb      	str	r3, [r7, #24]
      break;
 80071ec:	e002      	b.n	80071f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80071ee:	4b07      	ldr	r3, [pc, #28]	; (800720c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80071f0:	61bb      	str	r3, [r7, #24]
      break;
 80071f2:	bf00      	nop
  }

  return sysclockfreq;
 80071f4:	69bb      	ldr	r3, [r7, #24]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3724      	adds	r7, #36	; 0x24
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	58024400 	.word	0x58024400
 8007208:	03d09000 	.word	0x03d09000
 800720c:	003d0900 	.word	0x003d0900
 8007210:	00bb8000 	.word	0x00bb8000
 8007214:	46000000 	.word	0x46000000
 8007218:	4c742400 	.word	0x4c742400
 800721c:	4a742400 	.word	0x4a742400
 8007220:	4b3b8000 	.word	0x4b3b8000

08007224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800722a:	f7ff fe81 	bl	8006f30 <HAL_RCC_GetSysClockFreq>
 800722e:	4602      	mov	r2, r0
 8007230:	4b10      	ldr	r3, [pc, #64]	; (8007274 <HAL_RCC_GetHCLKFreq+0x50>)
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	0a1b      	lsrs	r3, r3, #8
 8007236:	f003 030f 	and.w	r3, r3, #15
 800723a:	490f      	ldr	r1, [pc, #60]	; (8007278 <HAL_RCC_GetHCLKFreq+0x54>)
 800723c:	5ccb      	ldrb	r3, [r1, r3]
 800723e:	f003 031f 	and.w	r3, r3, #31
 8007242:	fa22 f303 	lsr.w	r3, r2, r3
 8007246:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007248:	4b0a      	ldr	r3, [pc, #40]	; (8007274 <HAL_RCC_GetHCLKFreq+0x50>)
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	f003 030f 	and.w	r3, r3, #15
 8007250:	4a09      	ldr	r2, [pc, #36]	; (8007278 <HAL_RCC_GetHCLKFreq+0x54>)
 8007252:	5cd3      	ldrb	r3, [r2, r3]
 8007254:	f003 031f 	and.w	r3, r3, #31
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	fa22 f303 	lsr.w	r3, r2, r3
 800725e:	4a07      	ldr	r2, [pc, #28]	; (800727c <HAL_RCC_GetHCLKFreq+0x58>)
 8007260:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007262:	4a07      	ldr	r2, [pc, #28]	; (8007280 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007268:	4b04      	ldr	r3, [pc, #16]	; (800727c <HAL_RCC_GetHCLKFreq+0x58>)
 800726a:	681b      	ldr	r3, [r3, #0]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	58024400 	.word	0x58024400
 8007278:	080107b8 	.word	0x080107b8
 800727c:	2400000c 	.word	0x2400000c
 8007280:	24000008 	.word	0x24000008

08007284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007288:	f7ff ffcc 	bl	8007224 <HAL_RCC_GetHCLKFreq>
 800728c:	4602      	mov	r2, r0
 800728e:	4b06      	ldr	r3, [pc, #24]	; (80072a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	091b      	lsrs	r3, r3, #4
 8007294:	f003 0307 	and.w	r3, r3, #7
 8007298:	4904      	ldr	r1, [pc, #16]	; (80072ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800729a:	5ccb      	ldrb	r3, [r1, r3]
 800729c:	f003 031f 	and.w	r3, r3, #31
 80072a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	58024400 	.word	0x58024400
 80072ac:	080107b8 	.word	0x080107b8

080072b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072b4:	b0ca      	sub	sp, #296	; 0x128
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80072bc:	2300      	movs	r3, #0
 80072be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80072c2:	2300      	movs	r3, #0
 80072c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80072c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80072d4:	2500      	movs	r5, #0
 80072d6:	ea54 0305 	orrs.w	r3, r4, r5
 80072da:	d049      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80072dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072e6:	d02f      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80072e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072ec:	d828      	bhi.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80072ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072f2:	d01a      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80072f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072f8:	d822      	bhi.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d003      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80072fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007302:	d007      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007304:	e01c      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007306:	4bb8      	ldr	r3, [pc, #736]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730a:	4ab7      	ldr	r2, [pc, #732]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800730c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007310:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007312:	e01a      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007318:	3308      	adds	r3, #8
 800731a:	2102      	movs	r1, #2
 800731c:	4618      	mov	r0, r3
 800731e:	f002 fb5b 	bl	80099d8 <RCCEx_PLL2_Config>
 8007322:	4603      	mov	r3, r0
 8007324:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007328:	e00f      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800732a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800732e:	3328      	adds	r3, #40	; 0x28
 8007330:	2102      	movs	r1, #2
 8007332:	4618      	mov	r0, r3
 8007334:	f002 fc02 	bl	8009b3c <RCCEx_PLL3_Config>
 8007338:	4603      	mov	r3, r0
 800733a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800733e:	e004      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007346:	e000      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800734a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10a      	bne.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007352:	4ba5      	ldr	r3, [pc, #660]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007356:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800735a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800735e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007360:	4aa1      	ldr	r2, [pc, #644]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007362:	430b      	orrs	r3, r1
 8007364:	6513      	str	r3, [r2, #80]	; 0x50
 8007366:	e003      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007368:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800736c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007378:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800737c:	f04f 0900 	mov.w	r9, #0
 8007380:	ea58 0309 	orrs.w	r3, r8, r9
 8007384:	d047      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800738a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800738c:	2b04      	cmp	r3, #4
 800738e:	d82a      	bhi.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007390:	a201      	add	r2, pc, #4	; (adr r2, 8007398 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007396:	bf00      	nop
 8007398:	080073ad 	.word	0x080073ad
 800739c:	080073bb 	.word	0x080073bb
 80073a0:	080073d1 	.word	0x080073d1
 80073a4:	080073ef 	.word	0x080073ef
 80073a8:	080073ef 	.word	0x080073ef
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073ac:	4b8e      	ldr	r3, [pc, #568]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b0:	4a8d      	ldr	r2, [pc, #564]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073b8:	e01a      	b.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073be:	3308      	adds	r3, #8
 80073c0:	2100      	movs	r1, #0
 80073c2:	4618      	mov	r0, r3
 80073c4:	f002 fb08 	bl	80099d8 <RCCEx_PLL2_Config>
 80073c8:	4603      	mov	r3, r0
 80073ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073ce:	e00f      	b.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073d4:	3328      	adds	r3, #40	; 0x28
 80073d6:	2100      	movs	r1, #0
 80073d8:	4618      	mov	r0, r3
 80073da:	f002 fbaf 	bl	8009b3c <RCCEx_PLL3_Config>
 80073de:	4603      	mov	r3, r0
 80073e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073e4:	e004      	b.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80073ec:	e000      	b.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80073ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10a      	bne.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80073f8:	4b7b      	ldr	r3, [pc, #492]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073fc:	f023 0107 	bic.w	r1, r3, #7
 8007400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007406:	4a78      	ldr	r2, [pc, #480]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007408:	430b      	orrs	r3, r1
 800740a:	6513      	str	r3, [r2, #80]	; 0x50
 800740c:	e003      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800740e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007412:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800741a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8007422:	f04f 0b00 	mov.w	fp, #0
 8007426:	ea5a 030b 	orrs.w	r3, sl, fp
 800742a:	d04c      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800742c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007436:	d030      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800743c:	d829      	bhi.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800743e:	2bc0      	cmp	r3, #192	; 0xc0
 8007440:	d02d      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007442:	2bc0      	cmp	r3, #192	; 0xc0
 8007444:	d825      	bhi.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007446:	2b80      	cmp	r3, #128	; 0x80
 8007448:	d018      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800744a:	2b80      	cmp	r3, #128	; 0x80
 800744c:	d821      	bhi.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800744e:	2b00      	cmp	r3, #0
 8007450:	d002      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007452:	2b40      	cmp	r3, #64	; 0x40
 8007454:	d007      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007456:	e01c      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007458:	4b63      	ldr	r3, [pc, #396]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800745a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745c:	4a62      	ldr	r2, [pc, #392]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800745e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007462:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007464:	e01c      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800746a:	3308      	adds	r3, #8
 800746c:	2100      	movs	r1, #0
 800746e:	4618      	mov	r0, r3
 8007470:	f002 fab2 	bl	80099d8 <RCCEx_PLL2_Config>
 8007474:	4603      	mov	r3, r0
 8007476:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800747a:	e011      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800747c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007480:	3328      	adds	r3, #40	; 0x28
 8007482:	2100      	movs	r1, #0
 8007484:	4618      	mov	r0, r3
 8007486:	f002 fb59 	bl	8009b3c <RCCEx_PLL3_Config>
 800748a:	4603      	mov	r3, r0
 800748c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007490:	e006      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007498:	e002      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800749a:	bf00      	nop
 800749c:	e000      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800749e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10a      	bne.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80074a8:	4b4f      	ldr	r3, [pc, #316]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ac:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80074b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074b6:	4a4c      	ldr	r2, [pc, #304]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074b8:	430b      	orrs	r3, r1
 80074ba:	6513      	str	r3, [r2, #80]	; 0x50
 80074bc:	e003      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80074c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ce:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80074d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80074d6:	2300      	movs	r3, #0
 80074d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80074dc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80074e0:	460b      	mov	r3, r1
 80074e2:	4313      	orrs	r3, r2
 80074e4:	d053      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80074e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80074ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074f2:	d035      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80074f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074f8:	d82e      	bhi.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80074fa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80074fe:	d031      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007500:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007504:	d828      	bhi.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800750a:	d01a      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800750c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007510:	d822      	bhi.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007512:	2b00      	cmp	r3, #0
 8007514:	d003      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007516:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800751a:	d007      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800751c:	e01c      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800751e:	4b32      	ldr	r3, [pc, #200]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007522:	4a31      	ldr	r2, [pc, #196]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007528:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800752a:	e01c      	b.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800752c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007530:	3308      	adds	r3, #8
 8007532:	2100      	movs	r1, #0
 8007534:	4618      	mov	r0, r3
 8007536:	f002 fa4f 	bl	80099d8 <RCCEx_PLL2_Config>
 800753a:	4603      	mov	r3, r0
 800753c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007540:	e011      	b.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007546:	3328      	adds	r3, #40	; 0x28
 8007548:	2100      	movs	r1, #0
 800754a:	4618      	mov	r0, r3
 800754c:	f002 faf6 	bl	8009b3c <RCCEx_PLL3_Config>
 8007550:	4603      	mov	r3, r0
 8007552:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007556:	e006      	b.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800755e:	e002      	b.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007560:	bf00      	nop
 8007562:	e000      	b.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007564:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007566:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10b      	bne.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800756e:	4b1e      	ldr	r3, [pc, #120]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007572:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800757a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800757e:	4a1a      	ldr	r2, [pc, #104]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007580:	430b      	orrs	r3, r1
 8007582:	6593      	str	r3, [r2, #88]	; 0x58
 8007584:	e003      	b.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007586:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800758a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800758e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007596:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800759a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800759e:	2300      	movs	r3, #0
 80075a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80075a4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80075a8:	460b      	mov	r3, r1
 80075aa:	4313      	orrs	r3, r2
 80075ac:	d056      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80075ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80075b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80075ba:	d038      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80075bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80075c0:	d831      	bhi.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80075c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80075c6:	d034      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80075c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80075cc:	d82b      	bhi.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80075ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075d2:	d01d      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80075d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075d8:	d825      	bhi.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d006      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80075de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80075e2:	d00a      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80075e4:	e01f      	b.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80075e6:	bf00      	nop
 80075e8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075ec:	4ba2      	ldr	r3, [pc, #648]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80075ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f0:	4aa1      	ldr	r2, [pc, #644]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80075f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075f8:	e01c      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075fe:	3308      	adds	r3, #8
 8007600:	2100      	movs	r1, #0
 8007602:	4618      	mov	r0, r3
 8007604:	f002 f9e8 	bl	80099d8 <RCCEx_PLL2_Config>
 8007608:	4603      	mov	r3, r0
 800760a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800760e:	e011      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007610:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007614:	3328      	adds	r3, #40	; 0x28
 8007616:	2100      	movs	r1, #0
 8007618:	4618      	mov	r0, r3
 800761a:	f002 fa8f 	bl	8009b3c <RCCEx_PLL3_Config>
 800761e:	4603      	mov	r3, r0
 8007620:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007624:	e006      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800762c:	e002      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800762e:	bf00      	nop
 8007630:	e000      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007632:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007634:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10b      	bne.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800763c:	4b8e      	ldr	r3, [pc, #568]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800763e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007640:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007648:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800764c:	4a8a      	ldr	r2, [pc, #552]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800764e:	430b      	orrs	r3, r1
 8007650:	6593      	str	r3, [r2, #88]	; 0x58
 8007652:	e003      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007654:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007658:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800765c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007664:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007668:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800766c:	2300      	movs	r3, #0
 800766e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007672:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007676:	460b      	mov	r3, r1
 8007678:	4313      	orrs	r3, r2
 800767a:	d03a      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800767c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007682:	2b30      	cmp	r3, #48	; 0x30
 8007684:	d01f      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007686:	2b30      	cmp	r3, #48	; 0x30
 8007688:	d819      	bhi.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800768a:	2b20      	cmp	r3, #32
 800768c:	d00c      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800768e:	2b20      	cmp	r3, #32
 8007690:	d815      	bhi.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007692:	2b00      	cmp	r3, #0
 8007694:	d019      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007696:	2b10      	cmp	r3, #16
 8007698:	d111      	bne.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800769a:	4b77      	ldr	r3, [pc, #476]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800769c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769e:	4a76      	ldr	r2, [pc, #472]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80076a6:	e011      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80076a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076ac:	3308      	adds	r3, #8
 80076ae:	2102      	movs	r1, #2
 80076b0:	4618      	mov	r0, r3
 80076b2:	f002 f991 	bl	80099d8 <RCCEx_PLL2_Config>
 80076b6:	4603      	mov	r3, r0
 80076b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80076bc:	e006      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80076c4:	e002      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80076c6:	bf00      	nop
 80076c8:	e000      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80076ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10a      	bne.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80076d4:	4b68      	ldr	r3, [pc, #416]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076d8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80076dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076e2:	4a65      	ldr	r2, [pc, #404]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076e4:	430b      	orrs	r3, r1
 80076e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80076e8:	e003      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80076f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80076fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007702:	2300      	movs	r3, #0
 8007704:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007708:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800770c:	460b      	mov	r3, r1
 800770e:	4313      	orrs	r3, r2
 8007710:	d051      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007718:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800771c:	d035      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800771e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007722:	d82e      	bhi.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007724:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007728:	d031      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800772a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800772e:	d828      	bhi.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007734:	d01a      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800773a:	d822      	bhi.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800773c:	2b00      	cmp	r3, #0
 800773e:	d003      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007744:	d007      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007746:	e01c      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007748:	4b4b      	ldr	r3, [pc, #300]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800774a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774c:	4a4a      	ldr	r2, [pc, #296]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800774e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007752:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007754:	e01c      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800775a:	3308      	adds	r3, #8
 800775c:	2100      	movs	r1, #0
 800775e:	4618      	mov	r0, r3
 8007760:	f002 f93a 	bl	80099d8 <RCCEx_PLL2_Config>
 8007764:	4603      	mov	r3, r0
 8007766:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800776a:	e011      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800776c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007770:	3328      	adds	r3, #40	; 0x28
 8007772:	2100      	movs	r1, #0
 8007774:	4618      	mov	r0, r3
 8007776:	f002 f9e1 	bl	8009b3c <RCCEx_PLL3_Config>
 800777a:	4603      	mov	r3, r0
 800777c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007780:	e006      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007788:	e002      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800778a:	bf00      	nop
 800778c:	e000      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800778e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007790:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007794:	2b00      	cmp	r3, #0
 8007796:	d10a      	bne.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007798:	4b37      	ldr	r3, [pc, #220]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800779a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800779c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80077a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077a6:	4a34      	ldr	r2, [pc, #208]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077a8:	430b      	orrs	r3, r1
 80077aa:	6513      	str	r3, [r2, #80]	; 0x50
 80077ac:	e003      	b.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80077b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077be:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80077c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80077c6:	2300      	movs	r3, #0
 80077c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80077cc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80077d0:	460b      	mov	r3, r1
 80077d2:	4313      	orrs	r3, r2
 80077d4:	d056      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80077d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077e0:	d033      	beq.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80077e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077e6:	d82c      	bhi.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80077e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077ec:	d02f      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80077ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077f2:	d826      	bhi.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80077f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077f8:	d02b      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80077fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077fe:	d820      	bhi.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007800:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007804:	d012      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007806:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800780a:	d81a      	bhi.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800780c:	2b00      	cmp	r3, #0
 800780e:	d022      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007814:	d115      	bne.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800781a:	3308      	adds	r3, #8
 800781c:	2101      	movs	r1, #1
 800781e:	4618      	mov	r0, r3
 8007820:	f002 f8da 	bl	80099d8 <RCCEx_PLL2_Config>
 8007824:	4603      	mov	r3, r0
 8007826:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800782a:	e015      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800782c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007830:	3328      	adds	r3, #40	; 0x28
 8007832:	2101      	movs	r1, #1
 8007834:	4618      	mov	r0, r3
 8007836:	f002 f981 	bl	8009b3c <RCCEx_PLL3_Config>
 800783a:	4603      	mov	r3, r0
 800783c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007840:	e00a      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007848:	e006      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800784a:	bf00      	nop
 800784c:	e004      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800784e:	bf00      	nop
 8007850:	e002      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007852:	bf00      	nop
 8007854:	e000      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007856:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007858:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10d      	bne.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007860:	4b05      	ldr	r3, [pc, #20]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007864:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800786c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800786e:	4a02      	ldr	r2, [pc, #8]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007870:	430b      	orrs	r3, r1
 8007872:	6513      	str	r3, [r2, #80]	; 0x50
 8007874:	e006      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007876:	bf00      	nop
 8007878:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800787c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007880:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007890:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007894:	2300      	movs	r3, #0
 8007896:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800789a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800789e:	460b      	mov	r3, r1
 80078a0:	4313      	orrs	r3, r2
 80078a2:	d055      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80078a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80078ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078b0:	d033      	beq.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80078b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078b6:	d82c      	bhi.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80078b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078bc:	d02f      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80078be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078c2:	d826      	bhi.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80078c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80078c8:	d02b      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80078ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80078ce:	d820      	bhi.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80078d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078d4:	d012      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80078d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078da:	d81a      	bhi.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d022      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80078e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078e4:	d115      	bne.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80078e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078ea:	3308      	adds	r3, #8
 80078ec:	2101      	movs	r1, #1
 80078ee:	4618      	mov	r0, r3
 80078f0:	f002 f872 	bl	80099d8 <RCCEx_PLL2_Config>
 80078f4:	4603      	mov	r3, r0
 80078f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80078fa:	e015      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007900:	3328      	adds	r3, #40	; 0x28
 8007902:	2101      	movs	r1, #1
 8007904:	4618      	mov	r0, r3
 8007906:	f002 f919 	bl	8009b3c <RCCEx_PLL3_Config>
 800790a:	4603      	mov	r3, r0
 800790c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007910:	e00a      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007918:	e006      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800791a:	bf00      	nop
 800791c:	e004      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800791e:	bf00      	nop
 8007920:	e002      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007922:	bf00      	nop
 8007924:	e000      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007926:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007928:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800792c:	2b00      	cmp	r3, #0
 800792e:	d10b      	bne.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007930:	4ba3      	ldr	r3, [pc, #652]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007934:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800793c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007940:	4a9f      	ldr	r2, [pc, #636]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007942:	430b      	orrs	r3, r1
 8007944:	6593      	str	r3, [r2, #88]	; 0x58
 8007946:	e003      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007948:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800794c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007958:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800795c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007960:	2300      	movs	r3, #0
 8007962:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007966:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800796a:	460b      	mov	r3, r1
 800796c:	4313      	orrs	r3, r2
 800796e:	d037      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007976:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800797a:	d00e      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800797c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007980:	d816      	bhi.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007982:	2b00      	cmp	r3, #0
 8007984:	d018      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007986:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800798a:	d111      	bne.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800798c:	4b8c      	ldr	r3, [pc, #560]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800798e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007990:	4a8b      	ldr	r2, [pc, #556]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007996:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007998:	e00f      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800799a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800799e:	3308      	adds	r3, #8
 80079a0:	2101      	movs	r1, #1
 80079a2:	4618      	mov	r0, r3
 80079a4:	f002 f818 	bl	80099d8 <RCCEx_PLL2_Config>
 80079a8:	4603      	mov	r3, r0
 80079aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80079ae:	e004      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80079b6:	e000      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80079b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10a      	bne.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80079c2:	4b7f      	ldr	r3, [pc, #508]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079c6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80079ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d0:	4a7b      	ldr	r2, [pc, #492]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079d2:	430b      	orrs	r3, r1
 80079d4:	6513      	str	r3, [r2, #80]	; 0x50
 80079d6:	e003      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80079e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80079ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079f0:	2300      	movs	r3, #0
 80079f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80079f6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80079fa:	460b      	mov	r3, r1
 80079fc:	4313      	orrs	r3, r2
 80079fe:	d039      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a06:	2b03      	cmp	r3, #3
 8007a08:	d81c      	bhi.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007a0a:	a201      	add	r2, pc, #4	; (adr r2, 8007a10 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a10:	08007a4d 	.word	0x08007a4d
 8007a14:	08007a21 	.word	0x08007a21
 8007a18:	08007a2f 	.word	0x08007a2f
 8007a1c:	08007a4d 	.word	0x08007a4d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a20:	4b67      	ldr	r3, [pc, #412]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a24:	4a66      	ldr	r2, [pc, #408]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007a2c:	e00f      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a32:	3308      	adds	r3, #8
 8007a34:	2102      	movs	r1, #2
 8007a36:	4618      	mov	r0, r3
 8007a38:	f001 ffce 	bl	80099d8 <RCCEx_PLL2_Config>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007a42:	e004      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a4a:	e000      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007a4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10a      	bne.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007a56:	4b5a      	ldr	r3, [pc, #360]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a5a:	f023 0103 	bic.w	r1, r3, #3
 8007a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a64:	4a56      	ldr	r2, [pc, #344]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a66:	430b      	orrs	r3, r1
 8007a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a6a:	e003      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007a80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a84:	2300      	movs	r3, #0
 8007a86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007a8a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007a8e:	460b      	mov	r3, r1
 8007a90:	4313      	orrs	r3, r2
 8007a92:	f000 809f 	beq.w	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a96:	4b4b      	ldr	r3, [pc, #300]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a4a      	ldr	r2, [pc, #296]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007aa0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007aa2:	f7fa f8d9 	bl	8001c58 <HAL_GetTick>
 8007aa6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007aaa:	e00b      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007aac:	f7fa f8d4 	bl	8001c58 <HAL_GetTick>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	2b64      	cmp	r3, #100	; 0x64
 8007aba:	d903      	bls.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ac2:	e005      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ac4:	4b3f      	ldr	r3, [pc, #252]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d0ed      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d179      	bne.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007ad8:	4b39      	ldr	r3, [pc, #228]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ada:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ae0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007ae4:	4053      	eors	r3, r2
 8007ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d015      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007aee:	4b34      	ldr	r3, [pc, #208]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007af6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007afa:	4b31      	ldr	r3, [pc, #196]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007afe:	4a30      	ldr	r2, [pc, #192]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b04:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b06:	4b2e      	ldr	r3, [pc, #184]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b0a:	4a2d      	ldr	r2, [pc, #180]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b10:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007b12:	4a2b      	ldr	r2, [pc, #172]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b14:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007b18:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b26:	d118      	bne.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b28:	f7fa f896 	bl	8001c58 <HAL_GetTick>
 8007b2c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b30:	e00d      	b.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b32:	f7fa f891 	bl	8001c58 <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007b3c:	1ad2      	subs	r2, r2, r3
 8007b3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d903      	bls.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007b4c:	e005      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b4e:	4b1c      	ldr	r3, [pc, #112]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b52:	f003 0302 	and.w	r3, r3, #2
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d0eb      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d129      	bne.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b72:	d10e      	bne.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007b74:	4b12      	ldr	r3, [pc, #72]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b84:	091a      	lsrs	r2, r3, #4
 8007b86:	4b10      	ldr	r3, [pc, #64]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007b88:	4013      	ands	r3, r2
 8007b8a:	4a0d      	ldr	r2, [pc, #52]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b8c:	430b      	orrs	r3, r1
 8007b8e:	6113      	str	r3, [r2, #16]
 8007b90:	e005      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007b92:	4b0b      	ldr	r3, [pc, #44]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	4a0a      	ldr	r2, [pc, #40]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b98:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007b9c:	6113      	str	r3, [r2, #16]
 8007b9e:	4b08      	ldr	r3, [pc, #32]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ba0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ba6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007baa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bae:	4a04      	ldr	r2, [pc, #16]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bb0:	430b      	orrs	r3, r1
 8007bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8007bb4:	e00e      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007bbe:	e009      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007bc0:	58024400 	.word	0x58024400
 8007bc4:	58024800 	.word	0x58024800
 8007bc8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bdc:	f002 0301 	and.w	r3, r2, #1
 8007be0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007be4:	2300      	movs	r3, #0
 8007be6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007bea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007bee:	460b      	mov	r3, r1
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	f000 8089 	beq.w	8007d08 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bfc:	2b28      	cmp	r3, #40	; 0x28
 8007bfe:	d86b      	bhi.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007c00:	a201      	add	r2, pc, #4	; (adr r2, 8007c08 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c06:	bf00      	nop
 8007c08:	08007ce1 	.word	0x08007ce1
 8007c0c:	08007cd9 	.word	0x08007cd9
 8007c10:	08007cd9 	.word	0x08007cd9
 8007c14:	08007cd9 	.word	0x08007cd9
 8007c18:	08007cd9 	.word	0x08007cd9
 8007c1c:	08007cd9 	.word	0x08007cd9
 8007c20:	08007cd9 	.word	0x08007cd9
 8007c24:	08007cd9 	.word	0x08007cd9
 8007c28:	08007cad 	.word	0x08007cad
 8007c2c:	08007cd9 	.word	0x08007cd9
 8007c30:	08007cd9 	.word	0x08007cd9
 8007c34:	08007cd9 	.word	0x08007cd9
 8007c38:	08007cd9 	.word	0x08007cd9
 8007c3c:	08007cd9 	.word	0x08007cd9
 8007c40:	08007cd9 	.word	0x08007cd9
 8007c44:	08007cd9 	.word	0x08007cd9
 8007c48:	08007cc3 	.word	0x08007cc3
 8007c4c:	08007cd9 	.word	0x08007cd9
 8007c50:	08007cd9 	.word	0x08007cd9
 8007c54:	08007cd9 	.word	0x08007cd9
 8007c58:	08007cd9 	.word	0x08007cd9
 8007c5c:	08007cd9 	.word	0x08007cd9
 8007c60:	08007cd9 	.word	0x08007cd9
 8007c64:	08007cd9 	.word	0x08007cd9
 8007c68:	08007ce1 	.word	0x08007ce1
 8007c6c:	08007cd9 	.word	0x08007cd9
 8007c70:	08007cd9 	.word	0x08007cd9
 8007c74:	08007cd9 	.word	0x08007cd9
 8007c78:	08007cd9 	.word	0x08007cd9
 8007c7c:	08007cd9 	.word	0x08007cd9
 8007c80:	08007cd9 	.word	0x08007cd9
 8007c84:	08007cd9 	.word	0x08007cd9
 8007c88:	08007ce1 	.word	0x08007ce1
 8007c8c:	08007cd9 	.word	0x08007cd9
 8007c90:	08007cd9 	.word	0x08007cd9
 8007c94:	08007cd9 	.word	0x08007cd9
 8007c98:	08007cd9 	.word	0x08007cd9
 8007c9c:	08007cd9 	.word	0x08007cd9
 8007ca0:	08007cd9 	.word	0x08007cd9
 8007ca4:	08007cd9 	.word	0x08007cd9
 8007ca8:	08007ce1 	.word	0x08007ce1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cb0:	3308      	adds	r3, #8
 8007cb2:	2101      	movs	r1, #1
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f001 fe8f 	bl	80099d8 <RCCEx_PLL2_Config>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007cc0:	e00f      	b.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cc6:	3328      	adds	r3, #40	; 0x28
 8007cc8:	2101      	movs	r1, #1
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f001 ff36 	bl	8009b3c <RCCEx_PLL3_Config>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007cd6:	e004      	b.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007cde:	e000      	b.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10a      	bne.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007cea:	4bbf      	ldr	r3, [pc, #764]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cee:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cf8:	4abb      	ldr	r2, [pc, #748]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007cfa:	430b      	orrs	r3, r1
 8007cfc:	6553      	str	r3, [r2, #84]	; 0x54
 8007cfe:	e003      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d10:	f002 0302 	and.w	r3, r2, #2
 8007d14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d18:	2300      	movs	r3, #0
 8007d1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007d1e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007d22:	460b      	mov	r3, r1
 8007d24:	4313      	orrs	r3, r2
 8007d26:	d041      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d2e:	2b05      	cmp	r3, #5
 8007d30:	d824      	bhi.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007d32:	a201      	add	r2, pc, #4	; (adr r2, 8007d38 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d38:	08007d85 	.word	0x08007d85
 8007d3c:	08007d51 	.word	0x08007d51
 8007d40:	08007d67 	.word	0x08007d67
 8007d44:	08007d85 	.word	0x08007d85
 8007d48:	08007d85 	.word	0x08007d85
 8007d4c:	08007d85 	.word	0x08007d85
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d54:	3308      	adds	r3, #8
 8007d56:	2101      	movs	r1, #1
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f001 fe3d 	bl	80099d8 <RCCEx_PLL2_Config>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007d64:	e00f      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d6a:	3328      	adds	r3, #40	; 0x28
 8007d6c:	2101      	movs	r1, #1
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f001 fee4 	bl	8009b3c <RCCEx_PLL3_Config>
 8007d74:	4603      	mov	r3, r0
 8007d76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007d7a:	e004      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d82:	e000      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10a      	bne.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007d8e:	4b96      	ldr	r3, [pc, #600]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d92:	f023 0107 	bic.w	r1, r3, #7
 8007d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d9c:	4a92      	ldr	r2, [pc, #584]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d9e:	430b      	orrs	r3, r1
 8007da0:	6553      	str	r3, [r2, #84]	; 0x54
 8007da2:	e003      	b.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007da8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db4:	f002 0304 	and.w	r3, r2, #4
 8007db8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007dc2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	d044      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007dd4:	2b05      	cmp	r3, #5
 8007dd6:	d825      	bhi.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007dd8:	a201      	add	r2, pc, #4	; (adr r2, 8007de0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dde:	bf00      	nop
 8007de0:	08007e2d 	.word	0x08007e2d
 8007de4:	08007df9 	.word	0x08007df9
 8007de8:	08007e0f 	.word	0x08007e0f
 8007dec:	08007e2d 	.word	0x08007e2d
 8007df0:	08007e2d 	.word	0x08007e2d
 8007df4:	08007e2d 	.word	0x08007e2d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dfc:	3308      	adds	r3, #8
 8007dfe:	2101      	movs	r1, #1
 8007e00:	4618      	mov	r0, r3
 8007e02:	f001 fde9 	bl	80099d8 <RCCEx_PLL2_Config>
 8007e06:	4603      	mov	r3, r0
 8007e08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e0c:	e00f      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e12:	3328      	adds	r3, #40	; 0x28
 8007e14:	2101      	movs	r1, #1
 8007e16:	4618      	mov	r0, r3
 8007e18:	f001 fe90 	bl	8009b3c <RCCEx_PLL3_Config>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e22:	e004      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e2a:	e000      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d10b      	bne.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e36:	4b6c      	ldr	r3, [pc, #432]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e3a:	f023 0107 	bic.w	r1, r3, #7
 8007e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e46:	4a68      	ldr	r2, [pc, #416]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e48:	430b      	orrs	r3, r1
 8007e4a:	6593      	str	r3, [r2, #88]	; 0x58
 8007e4c:	e003      	b.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5e:	f002 0320 	and.w	r3, r2, #32
 8007e62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007e66:	2300      	movs	r3, #0
 8007e68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007e70:	460b      	mov	r3, r1
 8007e72:	4313      	orrs	r3, r2
 8007e74:	d055      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e82:	d033      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007e84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e88:	d82c      	bhi.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e8e:	d02f      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e94:	d826      	bhi.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007e96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e9a:	d02b      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007e9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ea0:	d820      	bhi.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007ea2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ea6:	d012      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007eac:	d81a      	bhi.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d022      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007eb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007eb6:	d115      	bne.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ebc:	3308      	adds	r3, #8
 8007ebe:	2100      	movs	r1, #0
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f001 fd89 	bl	80099d8 <RCCEx_PLL2_Config>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007ecc:	e015      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ed2:	3328      	adds	r3, #40	; 0x28
 8007ed4:	2102      	movs	r1, #2
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f001 fe30 	bl	8009b3c <RCCEx_PLL3_Config>
 8007edc:	4603      	mov	r3, r0
 8007ede:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007ee2:	e00a      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007eea:	e006      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007eec:	bf00      	nop
 8007eee:	e004      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007ef0:	bf00      	nop
 8007ef2:	e002      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007ef4:	bf00      	nop
 8007ef6:	e000      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007ef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007efa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10b      	bne.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f02:	4b39      	ldr	r3, [pc, #228]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f06:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f12:	4a35      	ldr	r2, [pc, #212]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f14:	430b      	orrs	r3, r1
 8007f16:	6553      	str	r3, [r2, #84]	; 0x54
 8007f18:	e003      	b.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007f2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f32:	2300      	movs	r3, #0
 8007f34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007f38:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	d058      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f4a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007f4e:	d033      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007f50:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007f54:	d82c      	bhi.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f5a:	d02f      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f60:	d826      	bhi.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007f62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f66:	d02b      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007f68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f6c:	d820      	bhi.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007f6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f72:	d012      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007f74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f78:	d81a      	bhi.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d022      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f82:	d115      	bne.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f88:	3308      	adds	r3, #8
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f001 fd23 	bl	80099d8 <RCCEx_PLL2_Config>
 8007f92:	4603      	mov	r3, r0
 8007f94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007f98:	e015      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f9e:	3328      	adds	r3, #40	; 0x28
 8007fa0:	2102      	movs	r1, #2
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f001 fdca 	bl	8009b3c <RCCEx_PLL3_Config>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007fae:	e00a      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007fb6:	e006      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007fb8:	bf00      	nop
 8007fba:	e004      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007fbc:	bf00      	nop
 8007fbe:	e002      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007fc0:	bf00      	nop
 8007fc2:	e000      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10e      	bne.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007fce:	4b06      	ldr	r3, [pc, #24]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fd2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007fde:	4a02      	ldr	r2, [pc, #8]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007fe0:	430b      	orrs	r3, r1
 8007fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8007fe4:	e006      	b.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007fe6:	bf00      	nop
 8007fe8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ff0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008000:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008004:	2300      	movs	r3, #0
 8008006:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800800a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800800e:	460b      	mov	r3, r1
 8008010:	4313      	orrs	r3, r2
 8008012:	d055      	beq.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008014:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008018:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800801c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008020:	d033      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008022:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008026:	d82c      	bhi.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800802c:	d02f      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800802e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008032:	d826      	bhi.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008034:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008038:	d02b      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800803a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800803e:	d820      	bhi.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008040:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008044:	d012      	beq.n	800806c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008046:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800804a:	d81a      	bhi.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800804c:	2b00      	cmp	r3, #0
 800804e:	d022      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008054:	d115      	bne.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008056:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800805a:	3308      	adds	r3, #8
 800805c:	2100      	movs	r1, #0
 800805e:	4618      	mov	r0, r3
 8008060:	f001 fcba 	bl	80099d8 <RCCEx_PLL2_Config>
 8008064:	4603      	mov	r3, r0
 8008066:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800806a:	e015      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800806c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008070:	3328      	adds	r3, #40	; 0x28
 8008072:	2102      	movs	r1, #2
 8008074:	4618      	mov	r0, r3
 8008076:	f001 fd61 	bl	8009b3c <RCCEx_PLL3_Config>
 800807a:	4603      	mov	r3, r0
 800807c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008080:	e00a      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008088:	e006      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800808a:	bf00      	nop
 800808c:	e004      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800808e:	bf00      	nop
 8008090:	e002      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008092:	bf00      	nop
 8008094:	e000      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008096:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008098:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10b      	bne.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80080a0:	4ba1      	ldr	r3, [pc, #644]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080a4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80080a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80080b0:	4a9d      	ldr	r2, [pc, #628]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080b2:	430b      	orrs	r3, r1
 80080b4:	6593      	str	r3, [r2, #88]	; 0x58
 80080b6:	e003      	b.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80080c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c8:	f002 0308 	and.w	r3, r2, #8
 80080cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80080d0:	2300      	movs	r3, #0
 80080d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80080d6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80080da:	460b      	mov	r3, r1
 80080dc:	4313      	orrs	r3, r2
 80080de:	d01e      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80080e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ec:	d10c      	bne.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80080ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080f2:	3328      	adds	r3, #40	; 0x28
 80080f4:	2102      	movs	r1, #2
 80080f6:	4618      	mov	r0, r3
 80080f8:	f001 fd20 	bl	8009b3c <RCCEx_PLL3_Config>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d002      	beq.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008108:	4b87      	ldr	r3, [pc, #540]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800810a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800810c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008118:	4a83      	ldr	r2, [pc, #524]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800811a:	430b      	orrs	r3, r1
 800811c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800811e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008126:	f002 0310 	and.w	r3, r2, #16
 800812a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800812e:	2300      	movs	r3, #0
 8008130:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008134:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008138:	460b      	mov	r3, r1
 800813a:	4313      	orrs	r3, r2
 800813c:	d01e      	beq.n	800817c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800813e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008142:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800814a:	d10c      	bne.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800814c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008150:	3328      	adds	r3, #40	; 0x28
 8008152:	2102      	movs	r1, #2
 8008154:	4618      	mov	r0, r3
 8008156:	f001 fcf1 	bl	8009b3c <RCCEx_PLL3_Config>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d002      	beq.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008166:	4b70      	ldr	r3, [pc, #448]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800816a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800816e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008172:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008176:	4a6c      	ldr	r2, [pc, #432]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008178:	430b      	orrs	r3, r1
 800817a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800817c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008184:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008188:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800818c:	2300      	movs	r3, #0
 800818e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008192:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008196:	460b      	mov	r3, r1
 8008198:	4313      	orrs	r3, r2
 800819a:	d03e      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800819c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80081a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081a8:	d022      	beq.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80081aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081ae:	d81b      	bhi.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d003      	beq.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80081b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081b8:	d00b      	beq.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80081ba:	e015      	b.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081c0:	3308      	adds	r3, #8
 80081c2:	2100      	movs	r1, #0
 80081c4:	4618      	mov	r0, r3
 80081c6:	f001 fc07 	bl	80099d8 <RCCEx_PLL2_Config>
 80081ca:	4603      	mov	r3, r0
 80081cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80081d0:	e00f      	b.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081d6:	3328      	adds	r3, #40	; 0x28
 80081d8:	2102      	movs	r1, #2
 80081da:	4618      	mov	r0, r3
 80081dc:	f001 fcae 	bl	8009b3c <RCCEx_PLL3_Config>
 80081e0:	4603      	mov	r3, r0
 80081e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80081e6:	e004      	b.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80081ee:	e000      	b.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80081f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10b      	bne.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80081fa:	4b4b      	ldr	r3, [pc, #300]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081fe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008206:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800820a:	4a47      	ldr	r2, [pc, #284]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800820c:	430b      	orrs	r3, r1
 800820e:	6593      	str	r3, [r2, #88]	; 0x58
 8008210:	e003      	b.n	800821a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008212:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008216:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800821a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800821e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008222:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008226:	67bb      	str	r3, [r7, #120]	; 0x78
 8008228:	2300      	movs	r3, #0
 800822a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800822c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008230:	460b      	mov	r3, r1
 8008232:	4313      	orrs	r3, r2
 8008234:	d03b      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800823a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800823e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008242:	d01f      	beq.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008244:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008248:	d818      	bhi.n	800827c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800824a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800824e:	d003      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008250:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008254:	d007      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008256:	e011      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008258:	4b33      	ldr	r3, [pc, #204]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800825a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825c:	4a32      	ldr	r2, [pc, #200]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800825e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008262:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008264:	e00f      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800826a:	3328      	adds	r3, #40	; 0x28
 800826c:	2101      	movs	r1, #1
 800826e:	4618      	mov	r0, r3
 8008270:	f001 fc64 	bl	8009b3c <RCCEx_PLL3_Config>
 8008274:	4603      	mov	r3, r0
 8008276:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800827a:	e004      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008282:	e000      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008284:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008286:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10b      	bne.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800828e:	4b26      	ldr	r3, [pc, #152]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008292:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800829a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800829e:	4a22      	ldr	r2, [pc, #136]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082a0:	430b      	orrs	r3, r1
 80082a2:	6553      	str	r3, [r2, #84]	; 0x54
 80082a4:	e003      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80082ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80082ba:	673b      	str	r3, [r7, #112]	; 0x70
 80082bc:	2300      	movs	r3, #0
 80082be:	677b      	str	r3, [r7, #116]	; 0x74
 80082c0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80082c4:	460b      	mov	r3, r1
 80082c6:	4313      	orrs	r3, r2
 80082c8:	d034      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80082ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d003      	beq.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80082d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082d8:	d007      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80082da:	e011      	b.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082dc:	4b12      	ldr	r3, [pc, #72]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e0:	4a11      	ldr	r2, [pc, #68]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80082e8:	e00e      	b.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80082ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082ee:	3308      	adds	r3, #8
 80082f0:	2102      	movs	r1, #2
 80082f2:	4618      	mov	r0, r3
 80082f4:	f001 fb70 	bl	80099d8 <RCCEx_PLL2_Config>
 80082f8:	4603      	mov	r3, r0
 80082fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80082fe:	e003      	b.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008306:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008308:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10d      	bne.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008310:	4b05      	ldr	r3, [pc, #20]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008314:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800831c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800831e:	4a02      	ldr	r2, [pc, #8]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008320:	430b      	orrs	r3, r1
 8008322:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008324:	e006      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008326:	bf00      	nop
 8008328:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800832c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008330:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008340:	66bb      	str	r3, [r7, #104]	; 0x68
 8008342:	2300      	movs	r3, #0
 8008344:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008346:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800834a:	460b      	mov	r3, r1
 800834c:	4313      	orrs	r3, r2
 800834e:	d00c      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008354:	3328      	adds	r3, #40	; 0x28
 8008356:	2102      	movs	r1, #2
 8008358:	4618      	mov	r0, r3
 800835a:	f001 fbef 	bl	8009b3c <RCCEx_PLL3_Config>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d002      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800836a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800836e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008372:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008376:	663b      	str	r3, [r7, #96]	; 0x60
 8008378:	2300      	movs	r3, #0
 800837a:	667b      	str	r3, [r7, #100]	; 0x64
 800837c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008380:	460b      	mov	r3, r1
 8008382:	4313      	orrs	r3, r2
 8008384:	d038      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800838a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800838e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008392:	d018      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008394:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008398:	d811      	bhi.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800839a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800839e:	d014      	beq.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80083a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083a4:	d80b      	bhi.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d011      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80083aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ae:	d106      	bne.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083b0:	4bc3      	ldr	r3, [pc, #780]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b4:	4ac2      	ldr	r2, [pc, #776]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80083bc:	e008      	b.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80083c4:	e004      	b.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80083c6:	bf00      	nop
 80083c8:	e002      	b.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80083ca:	bf00      	nop
 80083cc:	e000      	b.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80083ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d10b      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80083d8:	4bb9      	ldr	r3, [pc, #740]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083dc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80083e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083e8:	4ab5      	ldr	r2, [pc, #724]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083ea:	430b      	orrs	r3, r1
 80083ec:	6553      	str	r3, [r2, #84]	; 0x54
 80083ee:	e003      	b.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80083f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008400:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008404:	65bb      	str	r3, [r7, #88]	; 0x58
 8008406:	2300      	movs	r3, #0
 8008408:	65fb      	str	r3, [r7, #92]	; 0x5c
 800840a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800840e:	460b      	mov	r3, r1
 8008410:	4313      	orrs	r3, r2
 8008412:	d009      	beq.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008414:	4baa      	ldr	r3, [pc, #680]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008418:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800841c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008422:	4aa7      	ldr	r2, [pc, #668]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008424:	430b      	orrs	r3, r1
 8008426:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800842c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008430:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008434:	653b      	str	r3, [r7, #80]	; 0x50
 8008436:	2300      	movs	r3, #0
 8008438:	657b      	str	r3, [r7, #84]	; 0x54
 800843a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800843e:	460b      	mov	r3, r1
 8008440:	4313      	orrs	r3, r2
 8008442:	d00a      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008444:	4b9e      	ldr	r3, [pc, #632]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800844c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008450:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008454:	4a9a      	ldr	r2, [pc, #616]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008456:	430b      	orrs	r3, r1
 8008458:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800845a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800845e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008462:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008466:	64bb      	str	r3, [r7, #72]	; 0x48
 8008468:	2300      	movs	r3, #0
 800846a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800846c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008470:	460b      	mov	r3, r1
 8008472:	4313      	orrs	r3, r2
 8008474:	d009      	beq.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008476:	4b92      	ldr	r3, [pc, #584]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800847a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800847e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008484:	4a8e      	ldr	r2, [pc, #568]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008486:	430b      	orrs	r3, r1
 8008488:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800848a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800848e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008492:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008496:	643b      	str	r3, [r7, #64]	; 0x40
 8008498:	2300      	movs	r3, #0
 800849a:	647b      	str	r3, [r7, #68]	; 0x44
 800849c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80084a0:	460b      	mov	r3, r1
 80084a2:	4313      	orrs	r3, r2
 80084a4:	d00e      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084a6:	4b86      	ldr	r3, [pc, #536]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	4a85      	ldr	r2, [pc, #532]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80084b0:	6113      	str	r3, [r2, #16]
 80084b2:	4b83      	ldr	r3, [pc, #524]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084b4:	6919      	ldr	r1, [r3, #16]
 80084b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80084be:	4a80      	ldr	r2, [pc, #512]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084c0:	430b      	orrs	r3, r1
 80084c2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80084c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084cc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80084d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80084d2:	2300      	movs	r3, #0
 80084d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084d6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80084da:	460b      	mov	r3, r1
 80084dc:	4313      	orrs	r3, r2
 80084de:	d009      	beq.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80084e0:	4b77      	ldr	r3, [pc, #476]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084e4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80084e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ee:	4a74      	ldr	r2, [pc, #464]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084f0:	430b      	orrs	r3, r1
 80084f2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80084f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fc:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008500:	633b      	str	r3, [r7, #48]	; 0x30
 8008502:	2300      	movs	r3, #0
 8008504:	637b      	str	r3, [r7, #52]	; 0x34
 8008506:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800850a:	460b      	mov	r3, r1
 800850c:	4313      	orrs	r3, r2
 800850e:	d00a      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008510:	4b6b      	ldr	r3, [pc, #428]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008514:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800851c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008520:	4a67      	ldr	r2, [pc, #412]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008522:	430b      	orrs	r3, r1
 8008524:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800852a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852e:	2100      	movs	r1, #0
 8008530:	62b9      	str	r1, [r7, #40]	; 0x28
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008538:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800853c:	460b      	mov	r3, r1
 800853e:	4313      	orrs	r3, r2
 8008540:	d011      	beq.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008546:	3308      	adds	r3, #8
 8008548:	2100      	movs	r1, #0
 800854a:	4618      	mov	r0, r3
 800854c:	f001 fa44 	bl	80099d8 <RCCEx_PLL2_Config>
 8008550:	4603      	mov	r3, r0
 8008552:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008556:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800855a:	2b00      	cmp	r3, #0
 800855c:	d003      	beq.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800855e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008562:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800856a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856e:	2100      	movs	r1, #0
 8008570:	6239      	str	r1, [r7, #32]
 8008572:	f003 0302 	and.w	r3, r3, #2
 8008576:	627b      	str	r3, [r7, #36]	; 0x24
 8008578:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800857c:	460b      	mov	r3, r1
 800857e:	4313      	orrs	r3, r2
 8008580:	d011      	beq.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008586:	3308      	adds	r3, #8
 8008588:	2101      	movs	r1, #1
 800858a:	4618      	mov	r0, r3
 800858c:	f001 fa24 	bl	80099d8 <RCCEx_PLL2_Config>
 8008590:	4603      	mov	r3, r0
 8008592:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008596:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800859a:	2b00      	cmp	r3, #0
 800859c:	d003      	beq.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800859e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80085a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ae:	2100      	movs	r1, #0
 80085b0:	61b9      	str	r1, [r7, #24]
 80085b2:	f003 0304 	and.w	r3, r3, #4
 80085b6:	61fb      	str	r3, [r7, #28]
 80085b8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80085bc:	460b      	mov	r3, r1
 80085be:	4313      	orrs	r3, r2
 80085c0:	d011      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80085c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085c6:	3308      	adds	r3, #8
 80085c8:	2102      	movs	r1, #2
 80085ca:	4618      	mov	r0, r3
 80085cc:	f001 fa04 	bl	80099d8 <RCCEx_PLL2_Config>
 80085d0:	4603      	mov	r3, r0
 80085d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80085d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d003      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80085e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ee:	2100      	movs	r1, #0
 80085f0:	6139      	str	r1, [r7, #16]
 80085f2:	f003 0308 	and.w	r3, r3, #8
 80085f6:	617b      	str	r3, [r7, #20]
 80085f8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80085fc:	460b      	mov	r3, r1
 80085fe:	4313      	orrs	r3, r2
 8008600:	d011      	beq.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008606:	3328      	adds	r3, #40	; 0x28
 8008608:	2100      	movs	r1, #0
 800860a:	4618      	mov	r0, r3
 800860c:	f001 fa96 	bl	8009b3c <RCCEx_PLL3_Config>
 8008610:	4603      	mov	r3, r0
 8008612:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008616:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800861a:	2b00      	cmp	r3, #0
 800861c:	d003      	beq.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800861e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008622:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800862a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862e:	2100      	movs	r1, #0
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	f003 0310 	and.w	r3, r3, #16
 8008636:	60fb      	str	r3, [r7, #12]
 8008638:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800863c:	460b      	mov	r3, r1
 800863e:	4313      	orrs	r3, r2
 8008640:	d011      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008646:	3328      	adds	r3, #40	; 0x28
 8008648:	2101      	movs	r1, #1
 800864a:	4618      	mov	r0, r3
 800864c:	f001 fa76 	bl	8009b3c <RCCEx_PLL3_Config>
 8008650:	4603      	mov	r3, r0
 8008652:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008656:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800865a:	2b00      	cmp	r3, #0
 800865c:	d003      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800865e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008662:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800866a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866e:	2100      	movs	r1, #0
 8008670:	6039      	str	r1, [r7, #0]
 8008672:	f003 0320 	and.w	r3, r3, #32
 8008676:	607b      	str	r3, [r7, #4]
 8008678:	e9d7 1200 	ldrd	r1, r2, [r7]
 800867c:	460b      	mov	r3, r1
 800867e:	4313      	orrs	r3, r2
 8008680:	d011      	beq.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008686:	3328      	adds	r3, #40	; 0x28
 8008688:	2102      	movs	r1, #2
 800868a:	4618      	mov	r0, r3
 800868c:	f001 fa56 	bl	8009b3c <RCCEx_PLL3_Config>
 8008690:	4603      	mov	r3, r0
 8008692:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008696:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800869a:	2b00      	cmp	r3, #0
 800869c:	d003      	beq.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800869e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80086a6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d101      	bne.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80086ae:	2300      	movs	r3, #0
 80086b0:	e000      	b.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80086ba:	46bd      	mov	sp, r7
 80086bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086c0:	58024400 	.word	0x58024400

080086c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b090      	sub	sp, #64	; 0x40
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80086ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086d2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80086d6:	430b      	orrs	r3, r1
 80086d8:	f040 8094 	bne.w	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80086dc:	4b9e      	ldr	r3, [pc, #632]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086e0:	f003 0307 	and.w	r3, r3, #7
 80086e4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80086e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e8:	2b04      	cmp	r3, #4
 80086ea:	f200 8087 	bhi.w	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80086ee:	a201      	add	r2, pc, #4	; (adr r2, 80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80086f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f4:	08008709 	.word	0x08008709
 80086f8:	08008731 	.word	0x08008731
 80086fc:	08008759 	.word	0x08008759
 8008700:	080087f5 	.word	0x080087f5
 8008704:	08008781 	.word	0x08008781
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008708:	4b93      	ldr	r3, [pc, #588]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008710:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008714:	d108      	bne.n	8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800871a:	4618      	mov	r0, r3
 800871c:	f001 f80a 	bl	8009734 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008722:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008724:	f000 bd3f 	b.w	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008728:	2300      	movs	r3, #0
 800872a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800872c:	f000 bd3b 	b.w	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008730:	4b89      	ldr	r3, [pc, #548]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008738:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800873c:	d108      	bne.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800873e:	f107 0318 	add.w	r3, r7, #24
 8008742:	4618      	mov	r0, r3
 8008744:	f000 fd4e 	bl	80091e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800874c:	f000 bd2b 	b.w	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008750:	2300      	movs	r3, #0
 8008752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008754:	f000 bd27 	b.w	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008758:	4b7f      	ldr	r3, [pc, #508]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008764:	d108      	bne.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008766:	f107 030c 	add.w	r3, r7, #12
 800876a:	4618      	mov	r0, r3
 800876c:	f000 fe8e 	bl	800948c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008774:	f000 bd17 	b.w	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008778:	2300      	movs	r3, #0
 800877a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800877c:	f000 bd13 	b.w	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008780:	4b75      	ldr	r3, [pc, #468]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008784:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008788:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800878a:	4b73      	ldr	r3, [pc, #460]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f003 0304 	and.w	r3, r3, #4
 8008792:	2b04      	cmp	r3, #4
 8008794:	d10c      	bne.n	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008798:	2b00      	cmp	r3, #0
 800879a:	d109      	bne.n	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800879c:	4b6e      	ldr	r3, [pc, #440]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	08db      	lsrs	r3, r3, #3
 80087a2:	f003 0303 	and.w	r3, r3, #3
 80087a6:	4a6d      	ldr	r2, [pc, #436]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80087a8:	fa22 f303 	lsr.w	r3, r2, r3
 80087ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087ae:	e01f      	b.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087b0:	4b69      	ldr	r3, [pc, #420]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087bc:	d106      	bne.n	80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80087be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087c4:	d102      	bne.n	80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80087c6:	4b66      	ldr	r3, [pc, #408]	; (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80087c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087ca:	e011      	b.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087cc:	4b62      	ldr	r3, [pc, #392]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087d8:	d106      	bne.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80087da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087e0:	d102      	bne.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80087e2:	4b60      	ldr	r3, [pc, #384]	; (8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80087e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087e6:	e003      	b.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80087e8:	2300      	movs	r3, #0
 80087ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80087ec:	f000 bcdb 	b.w	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 80087f0:	f000 bcd9 	b.w	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80087f4:	4b5b      	ldr	r3, [pc, #364]	; (8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80087f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087f8:	f000 bcd5 	b.w	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      default :
      {
        frequency = 0;
 80087fc:	2300      	movs	r3, #0
 80087fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008800:	f000 bcd1 	b.w	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008804:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008808:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800880c:	430b      	orrs	r3, r1
 800880e:	f040 80ab 	bne.w	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008812:	4b51      	ldr	r3, [pc, #324]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008816:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800881a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800881c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008822:	d056      	beq.n	80088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800882a:	f200 8090 	bhi.w	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800882e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008830:	2bc0      	cmp	r3, #192	; 0xc0
 8008832:	f000 8088 	beq.w	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008838:	2bc0      	cmp	r3, #192	; 0xc0
 800883a:	f200 8088 	bhi.w	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800883e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008840:	2b80      	cmp	r3, #128	; 0x80
 8008842:	d032      	beq.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008846:	2b80      	cmp	r3, #128	; 0x80
 8008848:	f200 8081 	bhi.w	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800884c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884e:	2b00      	cmp	r3, #0
 8008850:	d003      	beq.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008854:	2b40      	cmp	r3, #64	; 0x40
 8008856:	d014      	beq.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008858:	e079      	b.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800885a:	4b3f      	ldr	r3, [pc, #252]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008862:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008866:	d108      	bne.n	800887a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800886c:	4618      	mov	r0, r3
 800886e:	f000 ff61 	bl	8009734 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008874:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008876:	f000 bc96 	b.w	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 800887a:	2300      	movs	r3, #0
 800887c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800887e:	f000 bc92 	b.w	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008882:	4b35      	ldr	r3, [pc, #212]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800888a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800888e:	d108      	bne.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008890:	f107 0318 	add.w	r3, r7, #24
 8008894:	4618      	mov	r0, r3
 8008896:	f000 fca5 	bl	80091e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800889e:	f000 bc82 	b.w	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 80088a2:	2300      	movs	r3, #0
 80088a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088a6:	f000 bc7e 	b.w	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088aa:	4b2b      	ldr	r3, [pc, #172]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088b6:	d108      	bne.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088b8:	f107 030c 	add.w	r3, r7, #12
 80088bc:	4618      	mov	r0, r3
 80088be:	f000 fde5 	bl	800948c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088c6:	f000 bc6e 	b.w	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 80088ca:	2300      	movs	r3, #0
 80088cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088ce:	f000 bc6a 	b.w	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80088d2:	4b21      	ldr	r3, [pc, #132]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80088da:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088dc:	4b1e      	ldr	r3, [pc, #120]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 0304 	and.w	r3, r3, #4
 80088e4:	2b04      	cmp	r3, #4
 80088e6:	d10c      	bne.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80088e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d109      	bne.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088ee:	4b1a      	ldr	r3, [pc, #104]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	08db      	lsrs	r3, r3, #3
 80088f4:	f003 0303 	and.w	r3, r3, #3
 80088f8:	4a18      	ldr	r2, [pc, #96]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80088fa:	fa22 f303 	lsr.w	r3, r2, r3
 80088fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008900:	e01f      	b.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008902:	4b15      	ldr	r3, [pc, #84]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800890a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800890e:	d106      	bne.n	800891e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008912:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008916:	d102      	bne.n	800891e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008918:	4b11      	ldr	r3, [pc, #68]	; (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800891a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800891c:	e011      	b.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800891e:	4b0e      	ldr	r3, [pc, #56]	; (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008926:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800892a:	d106      	bne.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800892c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800892e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008932:	d102      	bne.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008934:	4b0b      	ldr	r3, [pc, #44]	; (8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008936:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008938:	e003      	b.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800893a:	2300      	movs	r3, #0
 800893c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800893e:	f000 bc32 	b.w	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8008942:	f000 bc30 	b.w	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008946:	4b07      	ldr	r3, [pc, #28]	; (8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008948:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800894a:	f000 bc2c 	b.w	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      default :
      {
        frequency = 0;
 800894e:	2300      	movs	r3, #0
 8008950:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008952:	f000 bc28 	b.w	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8008956:	bf00      	nop
 8008958:	58024400 	.word	0x58024400
 800895c:	03d09000 	.word	0x03d09000
 8008960:	003d0900 	.word	0x003d0900
 8008964:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800896c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008970:	430b      	orrs	r3, r1
 8008972:	f040 809c 	bne.w	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008976:	4b9e      	ldr	r3, [pc, #632]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800897a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800897e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008982:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008986:	d054      	beq.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 8008988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800898e:	f200 808b 	bhi.w	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
 8008992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008994:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008998:	f000 8083 	beq.w	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
 800899c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80089a2:	f200 8081 	bhi.w	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
 80089a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089ac:	d02f      	beq.n	8008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 80089ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089b4:	d878      	bhi.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
 80089b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d004      	beq.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80089bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089c2:	d012      	beq.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 80089c4:	e070      	b.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089c6:	4b8a      	ldr	r3, [pc, #552]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089d2:	d107      	bne.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089d8:	4618      	mov	r0, r3
 80089da:	f000 feab 	bl	8009734 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089e2:	e3e0      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 80089e4:	2300      	movs	r3, #0
 80089e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089e8:	e3dd      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089ea:	4b81      	ldr	r3, [pc, #516]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089f6:	d107      	bne.n	8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089f8:	f107 0318 	add.w	r3, r7, #24
 80089fc:	4618      	mov	r0, r3
 80089fe:	f000 fbf1 	bl	80091e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a06:	e3ce      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a0c:	e3cb      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a0e:	4b78      	ldr	r3, [pc, #480]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a1a:	d107      	bne.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x368>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a1c:	f107 030c 	add.w	r3, r7, #12
 8008a20:	4618      	mov	r0, r3
 8008a22:	f000 fd33 	bl	800948c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a2a:	e3bc      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a30:	e3b9      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a32:	4b6f      	ldr	r3, [pc, #444]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a3a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a3c:	4b6c      	ldr	r3, [pc, #432]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 0304 	and.w	r3, r3, #4
 8008a44:	2b04      	cmp	r3, #4
 8008a46:	d10c      	bne.n	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8008a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d109      	bne.n	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a4e:	4b68      	ldr	r3, [pc, #416]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	08db      	lsrs	r3, r3, #3
 8008a54:	f003 0303 	and.w	r3, r3, #3
 8008a58:	4a66      	ldr	r2, [pc, #408]	; (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a60:	e01e      	b.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a62:	4b63      	ldr	r3, [pc, #396]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a6e:	d106      	bne.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8008a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a76:	d102      	bne.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008a78:	4b5f      	ldr	r3, [pc, #380]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a7c:	e010      	b.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a7e:	4b5c      	ldr	r3, [pc, #368]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a8a:	d106      	bne.n	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8008a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a92:	d102      	bne.n	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008a94:	4b59      	ldr	r3, [pc, #356]	; (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a98:	e002      	b.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008a9e:	e382      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8008aa0:	e381      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008aa2:	4b56      	ldr	r3, [pc, #344]	; (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008aa6:	e37e      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      default :
      {
        frequency = 0;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008aac:	e37b      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008aae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ab2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008ab6:	430b      	orrs	r3, r1
 8008ab8:	f040 80a5 	bne.w	8008c06 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008abc:	4b4c      	ldr	r3, [pc, #304]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ac0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008ac4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008acc:	d055      	beq.n	8008b7a <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 8008ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ad4:	f200 8094 	bhi.w	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
 8008ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ada:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ade:	f000 8084 	beq.w	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x526>
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ae8:	f200 808a 	bhi.w	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
 8008aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008af2:	d030      	beq.n	8008b56 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8008af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008afa:	f200 8081 	bhi.w	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
 8008afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d004      	beq.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
 8008b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b0a:	d012      	beq.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 8008b0c:	e078      	b.n	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b0e:	4b38      	ldr	r3, [pc, #224]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b1a:	d107      	bne.n	8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b20:	4618      	mov	r0, r3
 8008b22:	f000 fe07 	bl	8009734 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b2a:	e33c      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b30:	e339      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b32:	4b2f      	ldr	r3, [pc, #188]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b3e:	d107      	bne.n	8008b50 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b40:	f107 0318 	add.w	r3, r7, #24
 8008b44:	4618      	mov	r0, r3
 8008b46:	f000 fb4d 	bl	80091e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b4e:	e32a      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008b50:	2300      	movs	r3, #0
 8008b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b54:	e327      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b56:	4b26      	ldr	r3, [pc, #152]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b62:	d107      	bne.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b64:	f107 030c 	add.w	r3, r7, #12
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f000 fc8f 	bl	800948c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b72:	e318      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008b74:	2300      	movs	r3, #0
 8008b76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b78:	e315      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b7a:	4b1d      	ldr	r3, [pc, #116]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b82:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b84:	4b1a      	ldr	r3, [pc, #104]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 0304 	and.w	r3, r3, #4
 8008b8c:	2b04      	cmp	r3, #4
 8008b8e:	d10c      	bne.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8008b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d109      	bne.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b96:	4b16      	ldr	r3, [pc, #88]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	08db      	lsrs	r3, r3, #3
 8008b9c:	f003 0303 	and.w	r3, r3, #3
 8008ba0:	4a14      	ldr	r2, [pc, #80]	; (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ba8:	e01e      	b.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008baa:	4b11      	ldr	r3, [pc, #68]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bb6:	d106      	bne.n	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8008bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bbe:	d102      	bne.n	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008bc0:	4b0d      	ldr	r3, [pc, #52]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bc4:	e010      	b.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008bc6:	4b0a      	ldr	r3, [pc, #40]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bd2:	d106      	bne.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bda:	d102      	bne.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008bdc:	4b07      	ldr	r3, [pc, #28]	; (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008be0:	e002      	b.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008be2:	2300      	movs	r3, #0
 8008be4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008be6:	e2de      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8008be8:	e2dd      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008bea:	4b04      	ldr	r3, [pc, #16]	; (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008bec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bee:	e2da      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8008bf0:	58024400 	.word	0x58024400
 8008bf4:	03d09000 	.word	0x03d09000
 8008bf8:	003d0900 	.word	0x003d0900
 8008bfc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008c00:	2300      	movs	r3, #0
 8008c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c04:	e2cf      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008c06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c0a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8008c0e:	430b      	orrs	r3, r1
 8008c10:	f040 809c 	bne.w	8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x688>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008c14:	4b93      	ldr	r3, [pc, #588]	; (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c18:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008c1c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c24:	d054      	beq.n	8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8008c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c2c:	f200 808b 	bhi.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8008c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c36:	f000 8083 	beq.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c40:	f200 8081 	bhi.w	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8008c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c4a:	d02f      	beq.n	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8008c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c52:	d878      	bhi.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8008c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d004      	beq.n	8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8008c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c60:	d012      	beq.n	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8008c62:	e070      	b.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c64:	4b7f      	ldr	r3, [pc, #508]	; (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c70:	d107      	bne.n	8008c82 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c76:	4618      	mov	r0, r3
 8008c78:	f000 fd5c 	bl	8009734 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c80:	e291      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008c82:	2300      	movs	r3, #0
 8008c84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c86:	e28e      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c88:	4b76      	ldr	r3, [pc, #472]	; (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c94:	d107      	bne.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c96:	f107 0318 	add.w	r3, r7, #24
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 faa2 	bl	80091e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ca4:	e27f      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008caa:	e27c      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008cac:	4b6d      	ldr	r3, [pc, #436]	; (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cb8:	d107      	bne.n	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cba:	f107 030c 	add.w	r3, r7, #12
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f000 fbe4 	bl	800948c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cc8:	e26d      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cce:	e26a      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008cd0:	4b64      	ldr	r3, [pc, #400]	; (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008cd8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cda:	4b62      	ldr	r3, [pc, #392]	; (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 0304 	and.w	r3, r3, #4
 8008ce2:	2b04      	cmp	r3, #4
 8008ce4:	d10c      	bne.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8008ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d109      	bne.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cec:	4b5d      	ldr	r3, [pc, #372]	; (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	08db      	lsrs	r3, r3, #3
 8008cf2:	f003 0303 	and.w	r3, r3, #3
 8008cf6:	4a5c      	ldr	r2, [pc, #368]	; (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8008cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8008cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cfe:	e01e      	b.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d00:	4b58      	ldr	r3, [pc, #352]	; (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d0c:	d106      	bne.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8008d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d14:	d102      	bne.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d16:	4b55      	ldr	r3, [pc, #340]	; (8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d1a:	e010      	b.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d1c:	4b51      	ldr	r3, [pc, #324]	; (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d28:	d106      	bne.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
 8008d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d30:	d102      	bne.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d32:	4b4f      	ldr	r3, [pc, #316]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008d34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d36:	e002      	b.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008d3c:	e233      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8008d3e:	e232      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008d40:	4b4b      	ldr	r3, [pc, #300]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008d42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d44:	e22f      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      default :
      {
        frequency = 0;
 8008d46:	2300      	movs	r3, #0
 8008d48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d4a:	e22c      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008d4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d50:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008d54:	430b      	orrs	r3, r1
 8008d56:	f040 808d 	bne.w	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008d5a:	4b42      	ldr	r3, [pc, #264]	; (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d5e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008d62:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d6a:	d06b      	beq.n	8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
 8008d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d72:	d874      	bhi.n	8008e5e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d7a:	d056      	beq.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x766>
 8008d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d82:	d86c      	bhi.n	8008e5e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008d8a:	d03b      	beq.n	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x740>
 8008d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008d92:	d864      	bhi.n	8008e5e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d9a:	d021      	beq.n	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8008d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008da2:	d85c      	bhi.n	8008e5e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d004      	beq.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
 8008daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008db0:	d004      	beq.n	8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008db2:	e054      	b.n	8008e5e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008db4:	f7fe fa66 	bl	8007284 <HAL_RCC_GetPCLK1Freq>
 8008db8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008dba:	e1f4      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008dbc:	4b29      	ldr	r3, [pc, #164]	; (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008dc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008dc8:	d107      	bne.n	8008dda <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dca:	f107 0318 	add.w	r3, r7, #24
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f000 fa08 	bl	80091e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dd8:	e1e5      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dde:	e1e2      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008de0:	4b20      	ldr	r3, [pc, #128]	; (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dec:	d107      	bne.n	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dee:	f107 030c 	add.w	r3, r7, #12
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 fb4a 	bl	800948c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dfc:	e1d3      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e02:	e1d0      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e04:	4b17      	ldr	r3, [pc, #92]	; (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f003 0304 	and.w	r3, r3, #4
 8008e0c:	2b04      	cmp	r3, #4
 8008e0e:	d109      	bne.n	8008e24 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e10:	4b14      	ldr	r3, [pc, #80]	; (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	08db      	lsrs	r3, r3, #3
 8008e16:	f003 0303 	and.w	r3, r3, #3
 8008e1a:	4a13      	ldr	r2, [pc, #76]	; (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8008e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008e20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e22:	e1c0      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008e24:	2300      	movs	r3, #0
 8008e26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e28:	e1bd      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008e2a:	4b0e      	ldr	r3, [pc, #56]	; (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e36:	d102      	bne.n	8008e3e <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
        {
          frequency = CSI_VALUE;
 8008e38:	4b0c      	ldr	r3, [pc, #48]	; (8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e3c:	e1b3      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e42:	e1b0      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008e44:	4b07      	ldr	r3, [pc, #28]	; (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e50:	d102      	bne.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HSE_VALUE;
 8008e52:	4b07      	ldr	r3, [pc, #28]	; (8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008e54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e56:	e1a6      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e5c:	e1a3      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      default :
      {
        frequency = 0;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e62:	e1a0      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8008e64:	58024400 	.word	0x58024400
 8008e68:	03d09000 	.word	0x03d09000
 8008e6c:	003d0900 	.word	0x003d0900
 8008e70:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008e74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e78:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008e7c:	430b      	orrs	r3, r1
 8008e7e:	d173      	bne.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008e80:	4b9c      	ldr	r3, [pc, #624]	; (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008e88:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e90:	d02f      	beq.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
 8008e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e98:	d863      	bhi.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8008e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d004      	beq.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8008ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ea6:	d012      	beq.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8008ea8:	e05b      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008eaa:	4b92      	ldr	r3, [pc, #584]	; (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008eb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008eb6:	d107      	bne.n	8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eb8:	f107 0318 	add.w	r3, r7, #24
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f000 f991 	bl	80091e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ec6:	e16e      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ecc:	e16b      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ece:	4b89      	ldr	r3, [pc, #548]	; (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ed6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008eda:	d107      	bne.n	8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x828>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008edc:	f107 030c 	add.w	r3, r7, #12
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f000 fad3 	bl	800948c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eea:	e15c      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008eec:	2300      	movs	r3, #0
 8008eee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ef0:	e159      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ef2:	4b80      	ldr	r3, [pc, #512]	; (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ef6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008efa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008efc:	4b7d      	ldr	r3, [pc, #500]	; (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f003 0304 	and.w	r3, r3, #4
 8008f04:	2b04      	cmp	r3, #4
 8008f06:	d10c      	bne.n	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8008f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d109      	bne.n	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f0e:	4b79      	ldr	r3, [pc, #484]	; (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	08db      	lsrs	r3, r3, #3
 8008f14:	f003 0303 	and.w	r3, r3, #3
 8008f18:	4a77      	ldr	r2, [pc, #476]	; (80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>)
 8008f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f20:	e01e      	b.n	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f22:	4b74      	ldr	r3, [pc, #464]	; (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f2e:	d106      	bne.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
 8008f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f36:	d102      	bne.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008f38:	4b70      	ldr	r3, [pc, #448]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0xa38>)
 8008f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f3c:	e010      	b.n	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f3e:	4b6d      	ldr	r3, [pc, #436]	; (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f4a:	d106      	bne.n	8008f5a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
 8008f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f52:	d102      	bne.n	8008f5a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008f54:	4b6a      	ldr	r3, [pc, #424]	; (8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f58:	e002      	b.n	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008f5e:	e122      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8008f60:	e121      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      default :
      {
        frequency = 0;
 8008f62:	2300      	movs	r3, #0
 8008f64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f66:	e11e      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f6c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008f70:	430b      	orrs	r3, r1
 8008f72:	d133      	bne.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008f74:	4b5f      	ldr	r3, [pc, #380]	; (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f7c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d004      	beq.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8008f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f8a:	d012      	beq.n	8008fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
 8008f8c:	e023      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x912>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f8e:	4b59      	ldr	r3, [pc, #356]	; (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f9a:	d107      	bne.n	8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f000 fbc7 	bl	8009734 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008faa:	e0fc      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008fac:	2300      	movs	r3, #0
 8008fae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fb0:	e0f9      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fb2:	4b50      	ldr	r3, [pc, #320]	; (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fbe:	d107      	bne.n	8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fc0:	f107 0318 	add.w	r3, r7, #24
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f000 f90d 	bl	80091e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008fca:	6a3b      	ldr	r3, [r7, #32]
 8008fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fce:	e0ea      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fd4:	e0e7      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      default :
      {
        frequency = 0;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fda:	e0e4      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008fdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fe0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008fe4:	430b      	orrs	r3, r1
 8008fe6:	f040 808d 	bne.w	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008fea:	4b42      	ldr	r3, [pc, #264]	; (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fee:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008ff2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ffa:	d06b      	beq.n	80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>
 8008ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009002:	d874      	bhi.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8009004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800900a:	d056      	beq.n	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 800900c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009012:	d86c      	bhi.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8009014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009016:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800901a:	d03b      	beq.n	8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800901c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009022:	d864      	bhi.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8009024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009026:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800902a:	d021      	beq.n	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 800902c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009032:	d85c      	bhi.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8009034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009036:	2b00      	cmp	r3, #0
 8009038:	d004      	beq.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800903a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009040:	d004      	beq.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009042:	e054      	b.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009044:	f000 f8b8 	bl	80091b8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009048:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800904a:	e0ac      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800904c:	4b29      	ldr	r3, [pc, #164]	; (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009054:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009058:	d107      	bne.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800905a:	f107 0318 	add.w	r3, r7, #24
 800905e:	4618      	mov	r0, r3
 8009060:	f000 f8c0 	bl	80091e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009068:	e09d      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 800906a:	2300      	movs	r3, #0
 800906c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800906e:	e09a      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009070:	4b20      	ldr	r3, [pc, #128]	; (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800907c:	d107      	bne.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800907e:	f107 030c 	add.w	r3, r7, #12
 8009082:	4618      	mov	r0, r3
 8009084:	f000 fa02 	bl	800948c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800908c:	e08b      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 800908e:	2300      	movs	r3, #0
 8009090:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009092:	e088      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009094:	4b17      	ldr	r3, [pc, #92]	; (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 0304 	and.w	r3, r3, #4
 800909c:	2b04      	cmp	r3, #4
 800909e:	d109      	bne.n	80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9f0>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090a0:	4b14      	ldr	r3, [pc, #80]	; (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	08db      	lsrs	r3, r3, #3
 80090a6:	f003 0303 	and.w	r3, r3, #3
 80090aa:	4a13      	ldr	r2, [pc, #76]	; (80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>)
 80090ac:	fa22 f303 	lsr.w	r3, r2, r3
 80090b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090b2:	e078      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 80090b4:	2300      	movs	r3, #0
 80090b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090b8:	e075      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80090ba:	4b0e      	ldr	r3, [pc, #56]	; (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090c6:	d102      	bne.n	80090ce <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
        {
          frequency = CSI_VALUE;
 80090c8:	4b0c      	ldr	r3, [pc, #48]	; (80090fc <HAL_RCCEx_GetPeriphCLKFreq+0xa38>)
 80090ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090cc:	e06b      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 80090ce:	2300      	movs	r3, #0
 80090d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090d2:	e068      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80090d4:	4b07      	ldr	r3, [pc, #28]	; (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090e0:	d102      	bne.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
        {
          frequency = HSE_VALUE;
 80090e2:	4b07      	ldr	r3, [pc, #28]	; (8009100 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090e6:	e05e      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 80090e8:	2300      	movs	r3, #0
 80090ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090ec:	e05b      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80090ee:	2300      	movs	r3, #0
 80090f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090f2:	e058      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 80090f4:	58024400 	.word	0x58024400
 80090f8:	03d09000 	.word	0x03d09000
 80090fc:	003d0900 	.word	0x003d0900
 8009100:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009104:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009108:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800910c:	430b      	orrs	r3, r1
 800910e:	d148      	bne.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009110:	4b27      	ldr	r3, [pc, #156]	; (80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8009112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009114:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009118:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800911a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009120:	d02a      	beq.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8009122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009128:	d838      	bhi.n	800919c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
 800912a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800912c:	2b00      	cmp	r3, #0
 800912e:	d004      	beq.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8009130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009132:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009136:	d00d      	beq.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>
 8009138:	e030      	b.n	800919c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800913a:	4b1d      	ldr	r3, [pc, #116]	; (80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009142:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009146:	d102      	bne.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
        {
          frequency = HSE_VALUE;
 8009148:	4b1a      	ldr	r3, [pc, #104]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800914a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800914c:	e02b      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 800914e:	2300      	movs	r3, #0
 8009150:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009152:	e028      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009154:	4b16      	ldr	r3, [pc, #88]	; (80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800915c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009160:	d107      	bne.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009166:	4618      	mov	r0, r3
 8009168:	f000 fae4 	bl	8009734 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800916c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009170:	e019      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8009172:	2300      	movs	r3, #0
 8009174:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009176:	e016      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009178:	4b0d      	ldr	r3, [pc, #52]	; (80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009180:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009184:	d107      	bne.n	8009196 <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009186:	f107 0318 	add.w	r3, r7, #24
 800918a:	4618      	mov	r0, r3
 800918c:	f000 f82a 	bl	80091e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009194:	e007      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8009196:	2300      	movs	r3, #0
 8009198:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800919a:	e004      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      default :
      {
        frequency = 0;
 800919c:	2300      	movs	r3, #0
 800919e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091a0:	e001      	b.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
    }
  }
  else
  {
    frequency = 0;
 80091a2:	2300      	movs	r3, #0
 80091a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80091a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3740      	adds	r7, #64	; 0x40
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	58024400 	.word	0x58024400
 80091b4:	00bb8000 	.word	0x00bb8000

080091b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80091bc:	f7fe f832 	bl	8007224 <HAL_RCC_GetHCLKFreq>
 80091c0:	4602      	mov	r2, r0
 80091c2:	4b06      	ldr	r3, [pc, #24]	; (80091dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80091c4:	6a1b      	ldr	r3, [r3, #32]
 80091c6:	091b      	lsrs	r3, r3, #4
 80091c8:	f003 0307 	and.w	r3, r3, #7
 80091cc:	4904      	ldr	r1, [pc, #16]	; (80091e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80091ce:	5ccb      	ldrb	r3, [r1, r3]
 80091d0:	f003 031f 	and.w	r3, r3, #31
 80091d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80091d8:	4618      	mov	r0, r3
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	58024400 	.word	0x58024400
 80091e0:	080107b8 	.word	0x080107b8

080091e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b089      	sub	sp, #36	; 0x24
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80091ec:	4ba1      	ldr	r3, [pc, #644]	; (8009474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f0:	f003 0303 	and.w	r3, r3, #3
 80091f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80091f6:	4b9f      	ldr	r3, [pc, #636]	; (8009474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091fa:	0b1b      	lsrs	r3, r3, #12
 80091fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009200:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009202:	4b9c      	ldr	r3, [pc, #624]	; (8009474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009206:	091b      	lsrs	r3, r3, #4
 8009208:	f003 0301 	and.w	r3, r3, #1
 800920c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800920e:	4b99      	ldr	r3, [pc, #612]	; (8009474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009212:	08db      	lsrs	r3, r3, #3
 8009214:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009218:	693a      	ldr	r2, [r7, #16]
 800921a:	fb02 f303 	mul.w	r3, r2, r3
 800921e:	ee07 3a90 	vmov	s15, r3
 8009222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009226:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	2b00      	cmp	r3, #0
 800922e:	f000 8111 	beq.w	8009454 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	2b02      	cmp	r3, #2
 8009236:	f000 8083 	beq.w	8009340 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	2b02      	cmp	r3, #2
 800923e:	f200 80a1 	bhi.w	8009384 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d003      	beq.n	8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d056      	beq.n	80092fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800924e:	e099      	b.n	8009384 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009250:	4b88      	ldr	r3, [pc, #544]	; (8009474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 0320 	and.w	r3, r3, #32
 8009258:	2b00      	cmp	r3, #0
 800925a:	d02d      	beq.n	80092b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800925c:	4b85      	ldr	r3, [pc, #532]	; (8009474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	08db      	lsrs	r3, r3, #3
 8009262:	f003 0303 	and.w	r3, r3, #3
 8009266:	4a84      	ldr	r2, [pc, #528]	; (8009478 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009268:	fa22 f303 	lsr.w	r3, r2, r3
 800926c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	ee07 3a90 	vmov	s15, r3
 8009274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	ee07 3a90 	vmov	s15, r3
 800927e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009286:	4b7b      	ldr	r3, [pc, #492]	; (8009474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800928a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800928e:	ee07 3a90 	vmov	s15, r3
 8009292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009296:	ed97 6a03 	vldr	s12, [r7, #12]
 800929a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800947c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800929e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80092b6:	e087      	b.n	80093c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	ee07 3a90 	vmov	s15, r3
 80092be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009480 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80092c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092ca:	4b6a      	ldr	r3, [pc, #424]	; (8009474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092d2:	ee07 3a90 	vmov	s15, r3
 80092d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092da:	ed97 6a03 	vldr	s12, [r7, #12]
 80092de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800947c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092fa:	e065      	b.n	80093c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	ee07 3a90 	vmov	s15, r3
 8009302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009306:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009484 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800930a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800930e:	4b59      	ldr	r3, [pc, #356]	; (8009474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009316:	ee07 3a90 	vmov	s15, r3
 800931a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800931e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009322:	eddf 5a56 	vldr	s11, [pc, #344]	; 800947c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800932a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800932e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800933a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800933e:	e043      	b.n	80093c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	ee07 3a90 	vmov	s15, r3
 8009346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800934a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009488 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800934e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009352:	4b48      	ldr	r3, [pc, #288]	; (8009474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800935a:	ee07 3a90 	vmov	s15, r3
 800935e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009362:	ed97 6a03 	vldr	s12, [r7, #12]
 8009366:	eddf 5a45 	vldr	s11, [pc, #276]	; 800947c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800936a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800936e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800937a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800937e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009382:	e021      	b.n	80093c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	ee07 3a90 	vmov	s15, r3
 800938a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800938e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009484 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009396:	4b37      	ldr	r3, [pc, #220]	; (8009474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800939a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800939e:	ee07 3a90 	vmov	s15, r3
 80093a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80093aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800947c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80093c8:	4b2a      	ldr	r3, [pc, #168]	; (8009474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093cc:	0a5b      	lsrs	r3, r3, #9
 80093ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093d2:	ee07 3a90 	vmov	s15, r3
 80093d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80093e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093ee:	ee17 2a90 	vmov	r2, s15
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80093f6:	4b1f      	ldr	r3, [pc, #124]	; (8009474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093fa:	0c1b      	lsrs	r3, r3, #16
 80093fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009400:	ee07 3a90 	vmov	s15, r3
 8009404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009408:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800940c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009410:	edd7 6a07 	vldr	s13, [r7, #28]
 8009414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800941c:	ee17 2a90 	vmov	r2, s15
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009424:	4b13      	ldr	r3, [pc, #76]	; (8009474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009428:	0e1b      	lsrs	r3, r3, #24
 800942a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800942e:	ee07 3a90 	vmov	s15, r3
 8009432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009436:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800943a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800943e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800944a:	ee17 2a90 	vmov	r2, s15
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009452:	e008      	b.n	8009466 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	609a      	str	r2, [r3, #8]
}
 8009466:	bf00      	nop
 8009468:	3724      	adds	r7, #36	; 0x24
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	58024400 	.word	0x58024400
 8009478:	03d09000 	.word	0x03d09000
 800947c:	46000000 	.word	0x46000000
 8009480:	4c742400 	.word	0x4c742400
 8009484:	4a742400 	.word	0x4a742400
 8009488:	4b3b8000 	.word	0x4b3b8000

0800948c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800948c:	b480      	push	{r7}
 800948e:	b089      	sub	sp, #36	; 0x24
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009494:	4ba1      	ldr	r3, [pc, #644]	; (800971c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009498:	f003 0303 	and.w	r3, r3, #3
 800949c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800949e:	4b9f      	ldr	r3, [pc, #636]	; (800971c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a2:	0d1b      	lsrs	r3, r3, #20
 80094a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80094aa:	4b9c      	ldr	r3, [pc, #624]	; (800971c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ae:	0a1b      	lsrs	r3, r3, #8
 80094b0:	f003 0301 	and.w	r3, r3, #1
 80094b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80094b6:	4b99      	ldr	r3, [pc, #612]	; (800971c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ba:	08db      	lsrs	r3, r3, #3
 80094bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80094c0:	693a      	ldr	r2, [r7, #16]
 80094c2:	fb02 f303 	mul.w	r3, r2, r3
 80094c6:	ee07 3a90 	vmov	s15, r3
 80094ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f000 8111 	beq.w	80096fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	2b02      	cmp	r3, #2
 80094de:	f000 8083 	beq.w	80095e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	f200 80a1 	bhi.w	800962c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d003      	beq.n	80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d056      	beq.n	80095a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80094f6:	e099      	b.n	800962c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094f8:	4b88      	ldr	r3, [pc, #544]	; (800971c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f003 0320 	and.w	r3, r3, #32
 8009500:	2b00      	cmp	r3, #0
 8009502:	d02d      	beq.n	8009560 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009504:	4b85      	ldr	r3, [pc, #532]	; (800971c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	08db      	lsrs	r3, r3, #3
 800950a:	f003 0303 	and.w	r3, r3, #3
 800950e:	4a84      	ldr	r2, [pc, #528]	; (8009720 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009510:	fa22 f303 	lsr.w	r3, r2, r3
 8009514:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	ee07 3a90 	vmov	s15, r3
 800951c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	ee07 3a90 	vmov	s15, r3
 8009526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800952a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800952e:	4b7b      	ldr	r3, [pc, #492]	; (800971c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009536:	ee07 3a90 	vmov	s15, r3
 800953a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800953e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009542:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800954a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800954e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800955a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800955e:	e087      	b.n	8009670 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	ee07 3a90 	vmov	s15, r3
 8009566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800956a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009728 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800956e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009572:	4b6a      	ldr	r3, [pc, #424]	; (800971c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800957a:	ee07 3a90 	vmov	s15, r3
 800957e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009582:	ed97 6a03 	vldr	s12, [r7, #12]
 8009586:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800958a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800958e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800959a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800959e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095a2:	e065      	b.n	8009670 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	ee07 3a90 	vmov	s15, r3
 80095aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800972c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80095b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095b6:	4b59      	ldr	r3, [pc, #356]	; (800971c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095be:	ee07 3a90 	vmov	s15, r3
 80095c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80095ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095e6:	e043      	b.n	8009670 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	ee07 3a90 	vmov	s15, r3
 80095ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009730 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80095f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095fa:	4b48      	ldr	r3, [pc, #288]	; (800971c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009602:	ee07 3a90 	vmov	s15, r3
 8009606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800960a:	ed97 6a03 	vldr	s12, [r7, #12]
 800960e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800961a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800961e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009626:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800962a:	e021      	b.n	8009670 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	ee07 3a90 	vmov	s15, r3
 8009632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009636:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800972c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800963a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800963e:	4b37      	ldr	r3, [pc, #220]	; (800971c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009646:	ee07 3a90 	vmov	s15, r3
 800964a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800964e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009652:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800965a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800965e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800966a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800966e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009670:	4b2a      	ldr	r3, [pc, #168]	; (800971c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009674:	0a5b      	lsrs	r3, r3, #9
 8009676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800967a:	ee07 3a90 	vmov	s15, r3
 800967e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009682:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009686:	ee37 7a87 	vadd.f32	s14, s15, s14
 800968a:	edd7 6a07 	vldr	s13, [r7, #28]
 800968e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009696:	ee17 2a90 	vmov	r2, s15
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800969e:	4b1f      	ldr	r3, [pc, #124]	; (800971c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a2:	0c1b      	lsrs	r3, r3, #16
 80096a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096a8:	ee07 3a90 	vmov	s15, r3
 80096ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80096bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096c4:	ee17 2a90 	vmov	r2, s15
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80096cc:	4b13      	ldr	r3, [pc, #76]	; (800971c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d0:	0e1b      	lsrs	r3, r3, #24
 80096d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096d6:	ee07 3a90 	vmov	s15, r3
 80096da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80096ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096f2:	ee17 2a90 	vmov	r2, s15
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80096fa:	e008      	b.n	800970e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2200      	movs	r2, #0
 8009700:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	609a      	str	r2, [r3, #8]
}
 800970e:	bf00      	nop
 8009710:	3724      	adds	r7, #36	; 0x24
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	58024400 	.word	0x58024400
 8009720:	03d09000 	.word	0x03d09000
 8009724:	46000000 	.word	0x46000000
 8009728:	4c742400 	.word	0x4c742400
 800972c:	4a742400 	.word	0x4a742400
 8009730:	4b3b8000 	.word	0x4b3b8000

08009734 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009734:	b480      	push	{r7}
 8009736:	b089      	sub	sp, #36	; 0x24
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800973c:	4ba0      	ldr	r3, [pc, #640]	; (80099c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800973e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009740:	f003 0303 	and.w	r3, r3, #3
 8009744:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009746:	4b9e      	ldr	r3, [pc, #632]	; (80099c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800974a:	091b      	lsrs	r3, r3, #4
 800974c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009750:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009752:	4b9b      	ldr	r3, [pc, #620]	; (80099c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009756:	f003 0301 	and.w	r3, r3, #1
 800975a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800975c:	4b98      	ldr	r3, [pc, #608]	; (80099c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800975e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009760:	08db      	lsrs	r3, r3, #3
 8009762:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009766:	693a      	ldr	r2, [r7, #16]
 8009768:	fb02 f303 	mul.w	r3, r2, r3
 800976c:	ee07 3a90 	vmov	s15, r3
 8009770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009774:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	2b00      	cmp	r3, #0
 800977c:	f000 8111 	beq.w	80099a2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	2b02      	cmp	r3, #2
 8009784:	f000 8083 	beq.w	800988e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	2b02      	cmp	r3, #2
 800978c:	f200 80a1 	bhi.w	80098d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009790:	69bb      	ldr	r3, [r7, #24]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d003      	beq.n	800979e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	2b01      	cmp	r3, #1
 800979a:	d056      	beq.n	800984a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800979c:	e099      	b.n	80098d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800979e:	4b88      	ldr	r3, [pc, #544]	; (80099c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f003 0320 	and.w	r3, r3, #32
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d02d      	beq.n	8009806 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097aa:	4b85      	ldr	r3, [pc, #532]	; (80099c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	08db      	lsrs	r3, r3, #3
 80097b0:	f003 0303 	and.w	r3, r3, #3
 80097b4:	4a83      	ldr	r2, [pc, #524]	; (80099c4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80097b6:	fa22 f303 	lsr.w	r3, r2, r3
 80097ba:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	ee07 3a90 	vmov	s15, r3
 80097c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	ee07 3a90 	vmov	s15, r3
 80097cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097d4:	4b7a      	ldr	r3, [pc, #488]	; (80099c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097dc:	ee07 3a90 	vmov	s15, r3
 80097e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80097e8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80099c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80097ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009800:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009804:	e087      	b.n	8009916 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	ee07 3a90 	vmov	s15, r3
 800980c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009810:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80099cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009814:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009818:	4b69      	ldr	r3, [pc, #420]	; (80099c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800981a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800981c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009820:	ee07 3a90 	vmov	s15, r3
 8009824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009828:	ed97 6a03 	vldr	s12, [r7, #12]
 800982c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80099c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009830:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009834:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009838:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800983c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009844:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009848:	e065      	b.n	8009916 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	ee07 3a90 	vmov	s15, r3
 8009850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009854:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80099d0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009858:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800985c:	4b58      	ldr	r3, [pc, #352]	; (80099c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800985e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009864:	ee07 3a90 	vmov	s15, r3
 8009868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800986c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009870:	eddf 5a55 	vldr	s11, [pc, #340]	; 80099c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009874:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009878:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800987c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009880:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009888:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800988c:	e043      	b.n	8009916 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	ee07 3a90 	vmov	s15, r3
 8009894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009898:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80099d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800989c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098a0:	4b47      	ldr	r3, [pc, #284]	; (80099c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098a8:	ee07 3a90 	vmov	s15, r3
 80098ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80098b4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80099c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098d0:	e021      	b.n	8009916 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	ee07 3a90 	vmov	s15, r3
 80098d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098dc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80099cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80098e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098e4:	4b36      	ldr	r3, [pc, #216]	; (80099c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ec:	ee07 3a90 	vmov	s15, r3
 80098f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80098f8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80099c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009900:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009904:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009908:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800990c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009910:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009914:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009916:	4b2a      	ldr	r3, [pc, #168]	; (80099c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800991a:	0a5b      	lsrs	r3, r3, #9
 800991c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009920:	ee07 3a90 	vmov	s15, r3
 8009924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009928:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800992c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009930:	edd7 6a07 	vldr	s13, [r7, #28]
 8009934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800993c:	ee17 2a90 	vmov	r2, s15
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009944:	4b1e      	ldr	r3, [pc, #120]	; (80099c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009948:	0c1b      	lsrs	r3, r3, #16
 800994a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800994e:	ee07 3a90 	vmov	s15, r3
 8009952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009956:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800995a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800995e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800996a:	ee17 2a90 	vmov	r2, s15
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009972:	4b13      	ldr	r3, [pc, #76]	; (80099c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009976:	0e1b      	lsrs	r3, r3, #24
 8009978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800997c:	ee07 3a90 	vmov	s15, r3
 8009980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009984:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009988:	ee37 7a87 	vadd.f32	s14, s15, s14
 800998c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009998:	ee17 2a90 	vmov	r2, s15
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80099a0:	e008      	b.n	80099b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2200      	movs	r2, #0
 80099b2:	609a      	str	r2, [r3, #8]
}
 80099b4:	bf00      	nop
 80099b6:	3724      	adds	r7, #36	; 0x24
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr
 80099c0:	58024400 	.word	0x58024400
 80099c4:	03d09000 	.word	0x03d09000
 80099c8:	46000000 	.word	0x46000000
 80099cc:	4c742400 	.word	0x4c742400
 80099d0:	4a742400 	.word	0x4a742400
 80099d4:	4b3b8000 	.word	0x4b3b8000

080099d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80099e2:	2300      	movs	r3, #0
 80099e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80099e6:	4b53      	ldr	r3, [pc, #332]	; (8009b34 <RCCEx_PLL2_Config+0x15c>)
 80099e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ea:	f003 0303 	and.w	r3, r3, #3
 80099ee:	2b03      	cmp	r3, #3
 80099f0:	d101      	bne.n	80099f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	e099      	b.n	8009b2a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80099f6:	4b4f      	ldr	r3, [pc, #316]	; (8009b34 <RCCEx_PLL2_Config+0x15c>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a4e      	ldr	r2, [pc, #312]	; (8009b34 <RCCEx_PLL2_Config+0x15c>)
 80099fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009a00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a02:	f7f8 f929 	bl	8001c58 <HAL_GetTick>
 8009a06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a08:	e008      	b.n	8009a1c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009a0a:	f7f8 f925 	bl	8001c58 <HAL_GetTick>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	1ad3      	subs	r3, r2, r3
 8009a14:	2b02      	cmp	r3, #2
 8009a16:	d901      	bls.n	8009a1c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a18:	2303      	movs	r3, #3
 8009a1a:	e086      	b.n	8009b2a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a1c:	4b45      	ldr	r3, [pc, #276]	; (8009b34 <RCCEx_PLL2_Config+0x15c>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d1f0      	bne.n	8009a0a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009a28:	4b42      	ldr	r3, [pc, #264]	; (8009b34 <RCCEx_PLL2_Config+0x15c>)
 8009a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a2c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	031b      	lsls	r3, r3, #12
 8009a36:	493f      	ldr	r1, [pc, #252]	; (8009b34 <RCCEx_PLL2_Config+0x15c>)
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	628b      	str	r3, [r1, #40]	; 0x28
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	3b01      	subs	r3, #1
 8009a42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	025b      	lsls	r3, r3, #9
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	431a      	orrs	r2, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	3b01      	subs	r3, #1
 8009a58:	041b      	lsls	r3, r3, #16
 8009a5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009a5e:	431a      	orrs	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	3b01      	subs	r3, #1
 8009a66:	061b      	lsls	r3, r3, #24
 8009a68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009a6c:	4931      	ldr	r1, [pc, #196]	; (8009b34 <RCCEx_PLL2_Config+0x15c>)
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009a72:	4b30      	ldr	r3, [pc, #192]	; (8009b34 <RCCEx_PLL2_Config+0x15c>)
 8009a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	695b      	ldr	r3, [r3, #20]
 8009a7e:	492d      	ldr	r1, [pc, #180]	; (8009b34 <RCCEx_PLL2_Config+0x15c>)
 8009a80:	4313      	orrs	r3, r2
 8009a82:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009a84:	4b2b      	ldr	r3, [pc, #172]	; (8009b34 <RCCEx_PLL2_Config+0x15c>)
 8009a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a88:	f023 0220 	bic.w	r2, r3, #32
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	699b      	ldr	r3, [r3, #24]
 8009a90:	4928      	ldr	r1, [pc, #160]	; (8009b34 <RCCEx_PLL2_Config+0x15c>)
 8009a92:	4313      	orrs	r3, r2
 8009a94:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009a96:	4b27      	ldr	r3, [pc, #156]	; (8009b34 <RCCEx_PLL2_Config+0x15c>)
 8009a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9a:	4a26      	ldr	r2, [pc, #152]	; (8009b34 <RCCEx_PLL2_Config+0x15c>)
 8009a9c:	f023 0310 	bic.w	r3, r3, #16
 8009aa0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009aa2:	4b24      	ldr	r3, [pc, #144]	; (8009b34 <RCCEx_PLL2_Config+0x15c>)
 8009aa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009aa6:	4b24      	ldr	r3, [pc, #144]	; (8009b38 <RCCEx_PLL2_Config+0x160>)
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	69d2      	ldr	r2, [r2, #28]
 8009aae:	00d2      	lsls	r2, r2, #3
 8009ab0:	4920      	ldr	r1, [pc, #128]	; (8009b34 <RCCEx_PLL2_Config+0x15c>)
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009ab6:	4b1f      	ldr	r3, [pc, #124]	; (8009b34 <RCCEx_PLL2_Config+0x15c>)
 8009ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aba:	4a1e      	ldr	r2, [pc, #120]	; (8009b34 <RCCEx_PLL2_Config+0x15c>)
 8009abc:	f043 0310 	orr.w	r3, r3, #16
 8009ac0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d106      	bne.n	8009ad6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009ac8:	4b1a      	ldr	r3, [pc, #104]	; (8009b34 <RCCEx_PLL2_Config+0x15c>)
 8009aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009acc:	4a19      	ldr	r2, [pc, #100]	; (8009b34 <RCCEx_PLL2_Config+0x15c>)
 8009ace:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ad2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ad4:	e00f      	b.n	8009af6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d106      	bne.n	8009aea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009adc:	4b15      	ldr	r3, [pc, #84]	; (8009b34 <RCCEx_PLL2_Config+0x15c>)
 8009ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae0:	4a14      	ldr	r2, [pc, #80]	; (8009b34 <RCCEx_PLL2_Config+0x15c>)
 8009ae2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ae6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ae8:	e005      	b.n	8009af6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009aea:	4b12      	ldr	r3, [pc, #72]	; (8009b34 <RCCEx_PLL2_Config+0x15c>)
 8009aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aee:	4a11      	ldr	r2, [pc, #68]	; (8009b34 <RCCEx_PLL2_Config+0x15c>)
 8009af0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009af4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009af6:	4b0f      	ldr	r3, [pc, #60]	; (8009b34 <RCCEx_PLL2_Config+0x15c>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a0e      	ldr	r2, [pc, #56]	; (8009b34 <RCCEx_PLL2_Config+0x15c>)
 8009afc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009b00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b02:	f7f8 f8a9 	bl	8001c58 <HAL_GetTick>
 8009b06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b08:	e008      	b.n	8009b1c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009b0a:	f7f8 f8a5 	bl	8001c58 <HAL_GetTick>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	1ad3      	subs	r3, r2, r3
 8009b14:	2b02      	cmp	r3, #2
 8009b16:	d901      	bls.n	8009b1c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b18:	2303      	movs	r3, #3
 8009b1a:	e006      	b.n	8009b2a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b1c:	4b05      	ldr	r3, [pc, #20]	; (8009b34 <RCCEx_PLL2_Config+0x15c>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d0f0      	beq.n	8009b0a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	58024400 	.word	0x58024400
 8009b38:	ffff0007 	.word	0xffff0007

08009b3c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b46:	2300      	movs	r3, #0
 8009b48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b4a:	4b53      	ldr	r3, [pc, #332]	; (8009c98 <RCCEx_PLL3_Config+0x15c>)
 8009b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b4e:	f003 0303 	and.w	r3, r3, #3
 8009b52:	2b03      	cmp	r3, #3
 8009b54:	d101      	bne.n	8009b5a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	e099      	b.n	8009c8e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009b5a:	4b4f      	ldr	r3, [pc, #316]	; (8009c98 <RCCEx_PLL3_Config+0x15c>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a4e      	ldr	r2, [pc, #312]	; (8009c98 <RCCEx_PLL3_Config+0x15c>)
 8009b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b66:	f7f8 f877 	bl	8001c58 <HAL_GetTick>
 8009b6a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b6c:	e008      	b.n	8009b80 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009b6e:	f7f8 f873 	bl	8001c58 <HAL_GetTick>
 8009b72:	4602      	mov	r2, r0
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	1ad3      	subs	r3, r2, r3
 8009b78:	2b02      	cmp	r3, #2
 8009b7a:	d901      	bls.n	8009b80 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009b7c:	2303      	movs	r3, #3
 8009b7e:	e086      	b.n	8009c8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b80:	4b45      	ldr	r3, [pc, #276]	; (8009c98 <RCCEx_PLL3_Config+0x15c>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d1f0      	bne.n	8009b6e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009b8c:	4b42      	ldr	r3, [pc, #264]	; (8009c98 <RCCEx_PLL3_Config+0x15c>)
 8009b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b90:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	051b      	lsls	r3, r3, #20
 8009b9a:	493f      	ldr	r1, [pc, #252]	; (8009c98 <RCCEx_PLL3_Config+0x15c>)
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	628b      	str	r3, [r1, #40]	; 0x28
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	3b01      	subs	r3, #1
 8009bb0:	025b      	lsls	r3, r3, #9
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	431a      	orrs	r2, r3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	041b      	lsls	r3, r3, #16
 8009bbe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009bc2:	431a      	orrs	r2, r3
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	691b      	ldr	r3, [r3, #16]
 8009bc8:	3b01      	subs	r3, #1
 8009bca:	061b      	lsls	r3, r3, #24
 8009bcc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009bd0:	4931      	ldr	r1, [pc, #196]	; (8009c98 <RCCEx_PLL3_Config+0x15c>)
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009bd6:	4b30      	ldr	r3, [pc, #192]	; (8009c98 <RCCEx_PLL3_Config+0x15c>)
 8009bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	695b      	ldr	r3, [r3, #20]
 8009be2:	492d      	ldr	r1, [pc, #180]	; (8009c98 <RCCEx_PLL3_Config+0x15c>)
 8009be4:	4313      	orrs	r3, r2
 8009be6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009be8:	4b2b      	ldr	r3, [pc, #172]	; (8009c98 <RCCEx_PLL3_Config+0x15c>)
 8009bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	699b      	ldr	r3, [r3, #24]
 8009bf4:	4928      	ldr	r1, [pc, #160]	; (8009c98 <RCCEx_PLL3_Config+0x15c>)
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009bfa:	4b27      	ldr	r3, [pc, #156]	; (8009c98 <RCCEx_PLL3_Config+0x15c>)
 8009bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bfe:	4a26      	ldr	r2, [pc, #152]	; (8009c98 <RCCEx_PLL3_Config+0x15c>)
 8009c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009c06:	4b24      	ldr	r3, [pc, #144]	; (8009c98 <RCCEx_PLL3_Config+0x15c>)
 8009c08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c0a:	4b24      	ldr	r3, [pc, #144]	; (8009c9c <RCCEx_PLL3_Config+0x160>)
 8009c0c:	4013      	ands	r3, r2
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	69d2      	ldr	r2, [r2, #28]
 8009c12:	00d2      	lsls	r2, r2, #3
 8009c14:	4920      	ldr	r1, [pc, #128]	; (8009c98 <RCCEx_PLL3_Config+0x15c>)
 8009c16:	4313      	orrs	r3, r2
 8009c18:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009c1a:	4b1f      	ldr	r3, [pc, #124]	; (8009c98 <RCCEx_PLL3_Config+0x15c>)
 8009c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1e:	4a1e      	ldr	r2, [pc, #120]	; (8009c98 <RCCEx_PLL3_Config+0x15c>)
 8009c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d106      	bne.n	8009c3a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009c2c:	4b1a      	ldr	r3, [pc, #104]	; (8009c98 <RCCEx_PLL3_Config+0x15c>)
 8009c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c30:	4a19      	ldr	r2, [pc, #100]	; (8009c98 <RCCEx_PLL3_Config+0x15c>)
 8009c32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009c36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c38:	e00f      	b.n	8009c5a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d106      	bne.n	8009c4e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009c40:	4b15      	ldr	r3, [pc, #84]	; (8009c98 <RCCEx_PLL3_Config+0x15c>)
 8009c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c44:	4a14      	ldr	r2, [pc, #80]	; (8009c98 <RCCEx_PLL3_Config+0x15c>)
 8009c46:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009c4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c4c:	e005      	b.n	8009c5a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009c4e:	4b12      	ldr	r3, [pc, #72]	; (8009c98 <RCCEx_PLL3_Config+0x15c>)
 8009c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c52:	4a11      	ldr	r2, [pc, #68]	; (8009c98 <RCCEx_PLL3_Config+0x15c>)
 8009c54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009c5a:	4b0f      	ldr	r3, [pc, #60]	; (8009c98 <RCCEx_PLL3_Config+0x15c>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a0e      	ldr	r2, [pc, #56]	; (8009c98 <RCCEx_PLL3_Config+0x15c>)
 8009c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c66:	f7f7 fff7 	bl	8001c58 <HAL_GetTick>
 8009c6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c6c:	e008      	b.n	8009c80 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009c6e:	f7f7 fff3 	bl	8001c58 <HAL_GetTick>
 8009c72:	4602      	mov	r2, r0
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	1ad3      	subs	r3, r2, r3
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d901      	bls.n	8009c80 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009c7c:	2303      	movs	r3, #3
 8009c7e:	e006      	b.n	8009c8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c80:	4b05      	ldr	r3, [pc, #20]	; (8009c98 <RCCEx_PLL3_Config+0x15c>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d0f0      	beq.n	8009c6e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3710      	adds	r7, #16
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	58024400 	.word	0x58024400
 8009c9c:	ffff0007 	.word	0xffff0007

08009ca0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b08a      	sub	sp, #40	; 0x28
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d101      	bne.n	8009cb2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e075      	b.n	8009d9e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d105      	bne.n	8009cca <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f7f7 fcef 	bl	80016a8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2204      	movs	r2, #4
 8009cce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 f868 	bl	8009da8 <HAL_SD_InitCard>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d001      	beq.n	8009ce2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e05d      	b.n	8009d9e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009ce2:	f107 0308 	add.w	r3, r7, #8
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 fdaf 	bl	800a84c <HAL_SD_GetCardStatus>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d001      	beq.n	8009cf8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	e052      	b.n	8009d9e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009cf8:	7e3b      	ldrb	r3, [r7, #24]
 8009cfa:	b2db      	uxtb	r3, r3
 8009cfc:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009cfe:	7e7b      	ldrb	r3, [r7, #25]
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d10a      	bne.n	8009d22 <HAL_SD_Init+0x82>
 8009d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d102      	bne.n	8009d18 <HAL_SD_Init+0x78>
 8009d12:	6a3b      	ldr	r3, [r7, #32]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d004      	beq.n	8009d22 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d1e:	659a      	str	r2, [r3, #88]	; 0x58
 8009d20:	e00b      	b.n	8009d3a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d104      	bne.n	8009d34 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d30:	659a      	str	r2, [r3, #88]	; 0x58
 8009d32:	e002      	b.n	8009d3a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	4619      	mov	r1, r3
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 fe6d 	bl	800aa20 <HAL_SD_ConfigWideBusOperation>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e026      	b.n	8009d9e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009d50:	f7f7 ff82 	bl	8001c58 <HAL_GetTick>
 8009d54:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009d56:	e011      	b.n	8009d7c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009d58:	f7f7 ff7e 	bl	8001c58 <HAL_GetTick>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d66:	d109      	bne.n	8009d7c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d6e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2201      	movs	r2, #1
 8009d74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8009d78:	2303      	movs	r3, #3
 8009d7a:	e010      	b.n	8009d9e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 ff61 	bl	800ac44 <HAL_SD_GetCardState>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b04      	cmp	r3, #4
 8009d86:	d1e7      	bne.n	8009d58 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2201      	movs	r2, #1
 8009d98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3728      	adds	r7, #40	; 0x28
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
	...

08009da8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009da8:	b590      	push	{r4, r7, lr}
 8009daa:	b08d      	sub	sp, #52	; 0x34
 8009dac:	af02      	add	r7, sp, #8
 8009dae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009db0:	2300      	movs	r3, #0
 8009db2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009db4:	2300      	movs	r3, #0
 8009db6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009db8:	2300      	movs	r3, #0
 8009dba:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009dc0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009dc4:	f04f 0100 	mov.w	r1, #0
 8009dc8:	f7fe fc7c 	bl	80086c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009dcc:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8009dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d109      	bne.n	8009de8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009de2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009de4:	2301      	movs	r3, #1
 8009de6:	e070      	b.n	8009eca <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dea:	0a1b      	lsrs	r3, r3, #8
 8009dec:	4a39      	ldr	r2, [pc, #228]	; (8009ed4 <HAL_SD_InitCard+0x12c>)
 8009dee:	fba2 2303 	umull	r2, r3, r2, r3
 8009df2:	091b      	lsrs	r3, r3, #4
 8009df4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681c      	ldr	r4, [r3, #0]
 8009dfa:	466a      	mov	r2, sp
 8009dfc:	f107 0318 	add.w	r3, r7, #24
 8009e00:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009e04:	e882 0003 	stmia.w	r2, {r0, r1}
 8009e08:	f107 030c 	add.w	r3, r7, #12
 8009e0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f001 fd46 	bl	800b8a0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f001 fd89 	bl	800b930 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8009e1e:	69fb      	ldr	r3, [r7, #28]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d005      	beq.n	8009e30 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	005b      	lsls	r3, r3, #1
 8009e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e2e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d007      	beq.n	8009e46 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8009e36:	4a28      	ldr	r2, [pc, #160]	; (8009ed8 <HAL_SD_InitCard+0x130>)
 8009e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e3e:	3301      	adds	r3, #1
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7f7 ff15 	bl	8001c70 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 ffea 	bl	800ae20 <SD_PowerON>
 8009e4c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e4e:	6a3b      	ldr	r3, [r7, #32]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d00b      	beq.n	8009e6c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2201      	movs	r2, #1
 8009e58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e60:	6a3b      	ldr	r3, [r7, #32]
 8009e62:	431a      	orrs	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e02e      	b.n	8009eca <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 ff09 	bl	800ac84 <SD_InitCard>
 8009e72:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e74:	6a3b      	ldr	r3, [r7, #32]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00b      	beq.n	8009e92 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e86:	6a3b      	ldr	r3, [r7, #32]
 8009e88:	431a      	orrs	r2, r3
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e01b      	b.n	8009eca <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f001 fdde 	bl	800ba5c <SDMMC_CmdBlockLength>
 8009ea0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ea2:	6a3b      	ldr	r3, [r7, #32]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00f      	beq.n	8009ec8 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a0b      	ldr	r2, [pc, #44]	; (8009edc <HAL_SD_InitCard+0x134>)
 8009eae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009eb4:	6a3b      	ldr	r3, [r7, #32]
 8009eb6:	431a      	orrs	r2, r3
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e000      	b.n	8009eca <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	372c      	adds	r7, #44	; 0x2c
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd90      	pop	{r4, r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	014f8b59 	.word	0x014f8b59
 8009ed8:	00012110 	.word	0x00012110
 8009edc:	1fe00fff 	.word	0x1fe00fff

08009ee0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b08c      	sub	sp, #48	; 0x30
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	60b9      	str	r1, [r7, #8]
 8009eea:	607a      	str	r2, [r7, #4]
 8009eec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d107      	bne.n	8009f08 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009efc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	e08d      	b.n	800a024 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	f040 8086 	bne.w	800a022 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009f1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	441a      	add	r2, r3
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d907      	bls.n	8009f3a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f2e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009f36:	2301      	movs	r3, #1
 8009f38:	e074      	b.n	800a024 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2203      	movs	r2, #3
 8009f3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2200      	movs	r2, #0
 8009f48:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	68ba      	ldr	r2, [r7, #8]
 8009f4e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	025a      	lsls	r2, r3, #9
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d002      	beq.n	8009f66 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8009f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f62:	025b      	lsls	r3, r3, #9
 8009f64:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f6a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	025b      	lsls	r3, r3, #9
 8009f70:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009f72:	2390      	movs	r3, #144	; 0x90
 8009f74:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009f76:	2302      	movs	r3, #2
 8009f78:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f107 0210 	add.w	r2, r7, #16
 8009f8a:	4611      	mov	r1, r2
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f001 fd39 	bl	800ba04 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	68da      	ldr	r2, [r3, #12]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009fa0:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	68ba      	ldr	r2, [r7, #8]
 8009fa8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d90a      	bls.n	8009fce <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2282      	movs	r2, #130	; 0x82
 8009fbc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f001 fd8f 	bl	800bae8 <SDMMC_CmdReadMultiBlock>
 8009fca:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009fcc:	e009      	b.n	8009fe2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2281      	movs	r2, #129	; 0x81
 8009fd2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f001 fd61 	bl	800baa2 <SDMMC_CmdReadSingleBlock>
 8009fe0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d012      	beq.n	800a00e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a0f      	ldr	r2, [pc, #60]	; (800a02c <HAL_SD_ReadBlocks_DMA+0x14c>)
 8009fee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff6:	431a      	orrs	r2, r3
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2200      	movs	r2, #0
 800a008:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a00a:	2301      	movs	r3, #1
 800a00c:	e00a      	b.n	800a024 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a01c:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800a01e:	2300      	movs	r3, #0
 800a020:	e000      	b.n	800a024 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a022:	2302      	movs	r3, #2
  }
}
 800a024:	4618      	mov	r0, r3
 800a026:	3730      	adds	r7, #48	; 0x30
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	1fe00fff 	.word	0x1fe00fff

0800a030 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b08c      	sub	sp, #48	; 0x30
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
 800a03c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d107      	bne.n	800a058 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a04c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	e08d      	b.n	800a174 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	2b01      	cmp	r3, #1
 800a062:	f040 8086 	bne.w	800a172 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2200      	movs	r2, #0
 800a06a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a06c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	441a      	add	r2, r3
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a076:	429a      	cmp	r2, r3
 800a078:	d907      	bls.n	800a08a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a07e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	e074      	b.n	800a174 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2203      	movs	r2, #3
 800a08e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2200      	movs	r2, #0
 800a098:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	68ba      	ldr	r2, [r7, #8]
 800a09e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	025a      	lsls	r2, r3, #9
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d002      	beq.n	800a0b6 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800a0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b2:	025b      	lsls	r3, r3, #9
 800a0b4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a0b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0ba:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	025b      	lsls	r3, r3, #9
 800a0c0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a0c2:	2390      	movs	r3, #144	; 0x90
 800a0c4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f107 0210 	add.w	r2, r7, #16
 800a0da:	4611      	mov	r1, r2
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f001 fc91 	bl	800ba04 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	68da      	ldr	r2, [r3, #12]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0f0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	68ba      	ldr	r2, [r7, #8]
 800a0f8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2201      	movs	r2, #1
 800a100:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	2b01      	cmp	r3, #1
 800a106:	d90a      	bls.n	800a11e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	22a0      	movs	r2, #160	; 0xa0
 800a10c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a114:	4618      	mov	r0, r3
 800a116:	f001 fd2d 	bl	800bb74 <SDMMC_CmdWriteMultiBlock>
 800a11a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a11c:	e009      	b.n	800a132 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2290      	movs	r2, #144	; 0x90
 800a122:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a12a:	4618      	mov	r0, r3
 800a12c:	f001 fcff 	bl	800bb2e <SDMMC_CmdWriteSingleBlock>
 800a130:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a134:	2b00      	cmp	r3, #0
 800a136:	d012      	beq.n	800a15e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a0f      	ldr	r2, [pc, #60]	; (800a17c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800a13e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a146:	431a      	orrs	r2, r3
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2201      	movs	r2, #1
 800a150:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2200      	movs	r2, #0
 800a158:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	e00a      	b.n	800a174 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800a16c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	e000      	b.n	800a174 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a172:	2302      	movs	r3, #2
  }
}
 800a174:	4618      	mov	r0, r3
 800a176:	3730      	adds	r7, #48	; 0x30
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	1fe00fff 	.word	0x1fe00fff

0800a180 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a18c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d008      	beq.n	800a1ae <HAL_SD_IRQHandler+0x2e>
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f003 0308 	and.w	r3, r3, #8
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d003      	beq.n	800a1ae <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f001 f926 	bl	800b3f8 <SD_Read_IT>
 800a1ac:	e19a      	b.n	800a4e4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f000 80ac 	beq.w	800a316 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a1c6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	4b59      	ldr	r3, [pc, #356]	; (800a338 <HAL_SD_IRQHandler+0x1b8>)
 800a1d4:	400b      	ands	r3, r1
 800a1d6:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a1e6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	68da      	ldr	r2, [r3, #12]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1f6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f003 0308 	and.w	r3, r3, #8
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d038      	beq.n	800a274 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f003 0302 	and.w	r3, r3, #2
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d104      	bne.n	800a216 <HAL_SD_IRQHandler+0x96>
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f003 0320 	and.w	r3, r3, #32
 800a212:	2b00      	cmp	r3, #0
 800a214:	d011      	beq.n	800a23a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4618      	mov	r0, r3
 800a21c:	f001 fcce 	bl	800bbbc <SDMMC_CmdStopTransfer>
 800a220:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d008      	beq.n	800a23a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	431a      	orrs	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 f95b 	bl	800a4f0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4a3f      	ldr	r2, [pc, #252]	; (800a33c <HAL_SD_IRQHandler+0x1bc>)
 800a240:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2201      	movs	r2, #1
 800a246:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2200      	movs	r2, #0
 800a24e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f003 0301 	and.w	r3, r3, #1
 800a256:	2b00      	cmp	r3, #0
 800a258:	d104      	bne.n	800a264 <HAL_SD_IRQHandler+0xe4>
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f003 0302 	and.w	r3, r3, #2
 800a260:	2b00      	cmp	r3, #0
 800a262:	d003      	beq.n	800a26c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f002 f981 	bl	800c56c <HAL_SD_RxCpltCallback>
 800a26a:	e13b      	b.n	800a4e4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f002 f973 	bl	800c558 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a272:	e137      	b.n	800a4e4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	f000 8132 	beq.w	800a4e4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	2200      	movs	r2, #0
 800a286:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2200      	movs	r2, #0
 800a28e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2200      	movs	r2, #0
 800a296:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f003 0302 	and.w	r3, r3, #2
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d104      	bne.n	800a2ac <HAL_SD_IRQHandler+0x12c>
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f003 0320 	and.w	r3, r3, #32
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d011      	beq.n	800a2d0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f001 fc83 	bl	800bbbc <SDMMC_CmdStopTransfer>
 800a2b6:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d008      	beq.n	800a2d0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	431a      	orrs	r2, r3
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f910 	bl	800a4f0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f003 0310 	and.w	r3, r3, #16
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d104      	bne.n	800a2f2 <HAL_SD_IRQHandler+0x172>
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f003 0320 	and.w	r3, r3, #32
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d002      	beq.n	800a2f8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f002 f930 	bl	800c558 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f003 0301 	and.w	r3, r3, #1
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d105      	bne.n	800a30e <HAL_SD_IRQHandler+0x18e>
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f003 0302 	and.w	r3, r3, #2
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f000 80eb 	beq.w	800a4e4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f002 f92c 	bl	800c56c <HAL_SD_RxCpltCallback>
}
 800a314:	e0e6      	b.n	800a4e4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a31c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00d      	beq.n	800a340 <HAL_SD_IRQHandler+0x1c0>
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f003 0308 	and.w	r3, r3, #8
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d008      	beq.n	800a340 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f001 f8a8 	bl	800b484 <SD_Write_IT>
 800a334:	e0d6      	b.n	800a4e4 <HAL_SD_IRQHandler+0x364>
 800a336:	bf00      	nop
 800a338:	ffff3ec5 	.word	0xffff3ec5
 800a33c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a346:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f000 809d 	beq.w	800a48a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a356:	f003 0302 	and.w	r3, r3, #2
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d005      	beq.n	800a36a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a362:	f043 0202 	orr.w	r2, r3, #2
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a370:	f003 0308 	and.w	r3, r3, #8
 800a374:	2b00      	cmp	r3, #0
 800a376:	d005      	beq.n	800a384 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a37c:	f043 0208 	orr.w	r2, r3, #8
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a38a:	f003 0320 	and.w	r3, r3, #32
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d005      	beq.n	800a39e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a396:	f043 0220 	orr.w	r2, r3, #32
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3a4:	f003 0310 	and.w	r3, r3, #16
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d005      	beq.n	800a3b8 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3b0:	f043 0210 	orr.w	r2, r3, #16
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a4b      	ldr	r2, [pc, #300]	; (800a4ec <HAL_SD_IRQHandler+0x36c>)
 800a3be:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a3ce:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	68da      	ldr	r2, [r3, #12]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3de:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a3ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	68da      	ldr	r2, [r3, #12]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a3fe:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4618      	mov	r0, r3
 800a406:	f001 fbd9 	bl	800bbbc <SDMMC_CmdStopTransfer>
 800a40a:	4602      	mov	r2, r0
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a410:	431a      	orrs	r2, r3
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	68da      	ldr	r2, [r3, #12]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a424:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a42e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f003 0308 	and.w	r3, r3, #8
 800a436:	2b00      	cmp	r3, #0
 800a438:	d00a      	beq.n	800a450 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2201      	movs	r2, #1
 800a43e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 f851 	bl	800a4f0 <HAL_SD_ErrorCallback>
}
 800a44e:	e049      	b.n	800a4e4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a456:	2b00      	cmp	r3, #0
 800a458:	d044      	beq.n	800a4e4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d040      	beq.n	800a4e4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a470:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	2200      	movs	r2, #0
 800a478:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2201      	movs	r2, #1
 800a47e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 f834 	bl	800a4f0 <HAL_SD_ErrorCallback>
}
 800a488:	e02c      	b.n	800a4e4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a494:	2b00      	cmp	r3, #0
 800a496:	d025      	beq.n	800a4e4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4a0:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4a8:	f003 0304 	and.w	r3, r3, #4
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d10c      	bne.n	800a4ca <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f003 0320 	and.w	r3, r3, #32
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d003      	beq.n	800a4c2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f001 f84a 	bl	800b554 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800a4c0:	e010      	b.n	800a4e4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f001 f832 	bl	800b52c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800a4c8:	e00c      	b.n	800a4e4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f003 0320 	and.w	r3, r3, #32
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d003      	beq.n	800a4dc <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f001 f833 	bl	800b540 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800a4da:	e003      	b.n	800a4e4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f001 f81b 	bl	800b518 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a4e2:	e7ff      	b.n	800a4e4 <HAL_SD_IRQHandler+0x364>
 800a4e4:	bf00      	nop
 800a4e6:	3710      	adds	r7, #16
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	18000f3a 	.word	0x18000f3a

0800a4f0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a4f8:	bf00      	nop
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a512:	0f9b      	lsrs	r3, r3, #30
 800a514:	b2da      	uxtb	r2, r3
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a51e:	0e9b      	lsrs	r3, r3, #26
 800a520:	b2db      	uxtb	r3, r3
 800a522:	f003 030f 	and.w	r3, r3, #15
 800a526:	b2da      	uxtb	r2, r3
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a530:	0e1b      	lsrs	r3, r3, #24
 800a532:	b2db      	uxtb	r3, r3
 800a534:	f003 0303 	and.w	r3, r3, #3
 800a538:	b2da      	uxtb	r2, r3
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a542:	0c1b      	lsrs	r3, r3, #16
 800a544:	b2da      	uxtb	r2, r3
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a54e:	0a1b      	lsrs	r3, r3, #8
 800a550:	b2da      	uxtb	r2, r3
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a55a:	b2da      	uxtb	r2, r3
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a564:	0d1b      	lsrs	r3, r3, #20
 800a566:	b29a      	uxth	r2, r3
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a570:	0c1b      	lsrs	r3, r3, #16
 800a572:	b2db      	uxtb	r3, r3
 800a574:	f003 030f 	and.w	r3, r3, #15
 800a578:	b2da      	uxtb	r2, r3
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a582:	0bdb      	lsrs	r3, r3, #15
 800a584:	b2db      	uxtb	r3, r3
 800a586:	f003 0301 	and.w	r3, r3, #1
 800a58a:	b2da      	uxtb	r2, r3
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a594:	0b9b      	lsrs	r3, r3, #14
 800a596:	b2db      	uxtb	r3, r3
 800a598:	f003 0301 	and.w	r3, r3, #1
 800a59c:	b2da      	uxtb	r2, r3
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5a6:	0b5b      	lsrs	r3, r3, #13
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	f003 0301 	and.w	r3, r3, #1
 800a5ae:	b2da      	uxtb	r2, r3
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5b8:	0b1b      	lsrs	r3, r3, #12
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	f003 0301 	and.w	r3, r3, #1
 800a5c0:	b2da      	uxtb	r2, r3
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d163      	bne.n	800a69c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5d8:	009a      	lsls	r2, r3, #2
 800a5da:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a5de:	4013      	ands	r3, r2
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800a5e4:	0f92      	lsrs	r2, r2, #30
 800a5e6:	431a      	orrs	r2, r3
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5f0:	0edb      	lsrs	r3, r3, #27
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	f003 0307 	and.w	r3, r3, #7
 800a5f8:	b2da      	uxtb	r2, r3
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a602:	0e1b      	lsrs	r3, r3, #24
 800a604:	b2db      	uxtb	r3, r3
 800a606:	f003 0307 	and.w	r3, r3, #7
 800a60a:	b2da      	uxtb	r2, r3
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a614:	0d5b      	lsrs	r3, r3, #21
 800a616:	b2db      	uxtb	r3, r3
 800a618:	f003 0307 	and.w	r3, r3, #7
 800a61c:	b2da      	uxtb	r2, r3
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a626:	0c9b      	lsrs	r3, r3, #18
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	f003 0307 	and.w	r3, r3, #7
 800a62e:	b2da      	uxtb	r2, r3
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a638:	0bdb      	lsrs	r3, r3, #15
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	f003 0307 	and.w	r3, r3, #7
 800a640:	b2da      	uxtb	r2, r3
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	691b      	ldr	r3, [r3, #16]
 800a64a:	1c5a      	adds	r2, r3, #1
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	7e1b      	ldrb	r3, [r3, #24]
 800a654:	b2db      	uxtb	r3, r3
 800a656:	f003 0307 	and.w	r3, r3, #7
 800a65a:	3302      	adds	r3, #2
 800a65c:	2201      	movs	r2, #1
 800a65e:	fa02 f303 	lsl.w	r3, r2, r3
 800a662:	687a      	ldr	r2, [r7, #4]
 800a664:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a666:	fb03 f202 	mul.w	r2, r3, r2
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	7a1b      	ldrb	r3, [r3, #8]
 800a672:	b2db      	uxtb	r3, r3
 800a674:	f003 030f 	and.w	r3, r3, #15
 800a678:	2201      	movs	r2, #1
 800a67a:	409a      	lsls	r2, r3
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a688:	0a52      	lsrs	r2, r2, #9
 800a68a:	fb03 f202 	mul.w	r2, r3, r2
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a698:	655a      	str	r2, [r3, #84]	; 0x54
 800a69a:	e031      	b.n	800a700 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d11d      	bne.n	800a6e0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6a8:	041b      	lsls	r3, r3, #16
 800a6aa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6b2:	0c1b      	lsrs	r3, r3, #16
 800a6b4:	431a      	orrs	r2, r3
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	691b      	ldr	r3, [r3, #16]
 800a6be:	3301      	adds	r3, #1
 800a6c0:	029a      	lsls	r2, r3, #10
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6d4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	655a      	str	r2, [r3, #84]	; 0x54
 800a6de:	e00f      	b.n	800a700 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a58      	ldr	r2, [pc, #352]	; (800a848 <HAL_SD_GetCardCSD+0x344>)
 800a6e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	e09d      	b.n	800a83c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a704:	0b9b      	lsrs	r3, r3, #14
 800a706:	b2db      	uxtb	r3, r3
 800a708:	f003 0301 	and.w	r3, r3, #1
 800a70c:	b2da      	uxtb	r2, r3
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a716:	09db      	lsrs	r3, r3, #7
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a71e:	b2da      	uxtb	r2, r3
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a72e:	b2da      	uxtb	r2, r3
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a738:	0fdb      	lsrs	r3, r3, #31
 800a73a:	b2da      	uxtb	r2, r3
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a744:	0f5b      	lsrs	r3, r3, #29
 800a746:	b2db      	uxtb	r3, r3
 800a748:	f003 0303 	and.w	r3, r3, #3
 800a74c:	b2da      	uxtb	r2, r3
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a756:	0e9b      	lsrs	r3, r3, #26
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	f003 0307 	and.w	r3, r3, #7
 800a75e:	b2da      	uxtb	r2, r3
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a768:	0d9b      	lsrs	r3, r3, #22
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	f003 030f 	and.w	r3, r3, #15
 800a770:	b2da      	uxtb	r2, r3
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a77a:	0d5b      	lsrs	r3, r3, #21
 800a77c:	b2db      	uxtb	r3, r3
 800a77e:	f003 0301 	and.w	r3, r3, #1
 800a782:	b2da      	uxtb	r2, r3
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a796:	0c1b      	lsrs	r3, r3, #16
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	f003 0301 	and.w	r3, r3, #1
 800a79e:	b2da      	uxtb	r2, r3
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7aa:	0bdb      	lsrs	r3, r3, #15
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	f003 0301 	and.w	r3, r3, #1
 800a7b2:	b2da      	uxtb	r2, r3
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7be:	0b9b      	lsrs	r3, r3, #14
 800a7c0:	b2db      	uxtb	r3, r3
 800a7c2:	f003 0301 	and.w	r3, r3, #1
 800a7c6:	b2da      	uxtb	r2, r3
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7d2:	0b5b      	lsrs	r3, r3, #13
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	f003 0301 	and.w	r3, r3, #1
 800a7da:	b2da      	uxtb	r2, r3
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7e6:	0b1b      	lsrs	r3, r3, #12
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	f003 0301 	and.w	r3, r3, #1
 800a7ee:	b2da      	uxtb	r2, r3
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7fa:	0a9b      	lsrs	r3, r3, #10
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	f003 0303 	and.w	r3, r3, #3
 800a802:	b2da      	uxtb	r2, r3
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a80e:	0a1b      	lsrs	r3, r3, #8
 800a810:	b2db      	uxtb	r3, r3
 800a812:	f003 0303 	and.w	r3, r3, #3
 800a816:	b2da      	uxtb	r2, r3
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a822:	085b      	lsrs	r3, r3, #1
 800a824:	b2db      	uxtb	r3, r3
 800a826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a82a:	b2da      	uxtb	r2, r3
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	2201      	movs	r2, #1
 800a836:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	370c      	adds	r7, #12
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr
 800a848:	1fe00fff 	.word	0x1fe00fff

0800a84c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b094      	sub	sp, #80	; 0x50
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a856:	2300      	movs	r3, #0
 800a858:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a862:	b2db      	uxtb	r3, r3
 800a864:	2b03      	cmp	r3, #3
 800a866:	d101      	bne.n	800a86c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800a868:	2301      	movs	r3, #1
 800a86a:	e0a7      	b.n	800a9bc <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a86c:	f107 0308 	add.w	r3, r7, #8
 800a870:	4619      	mov	r1, r3
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 fb62 	bl	800af3c <SD_SendSDStatus>
 800a878:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a87a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d011      	beq.n	800a8a4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a4f      	ldr	r2, [pc, #316]	; (800a9c4 <HAL_SD_GetCardStatus+0x178>)
 800a886:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a88c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a88e:	431a      	orrs	r2, r3
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800a89c:	2301      	movs	r3, #1
 800a89e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a8a2:	e070      	b.n	800a986 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	099b      	lsrs	r3, r3, #6
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	f003 0303 	and.w	r3, r3, #3
 800a8ae:	b2da      	uxtb	r2, r3
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	095b      	lsrs	r3, r3, #5
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	f003 0301 	and.w	r3, r3, #1
 800a8be:	b2da      	uxtb	r2, r3
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	0a1b      	lsrs	r3, r3, #8
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a8ce:	b29a      	uxth	r2, r3
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	0e1b      	lsrs	r3, r3, #24
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	b29a      	uxth	r2, r3
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	061a      	lsls	r2, r3, #24
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	021b      	lsls	r3, r3, #8
 800a8e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a8ea:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	0a1b      	lsrs	r3, r3, #8
 800a8f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a8f4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	0e1b      	lsrs	r3, r3, #24
 800a8fa:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	b2da      	uxtb	r2, r3
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	0a1b      	lsrs	r3, r3, #8
 800a90c:	b2da      	uxtb	r2, r3
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	0d1b      	lsrs	r3, r3, #20
 800a916:	b2db      	uxtb	r3, r3
 800a918:	f003 030f 	and.w	r3, r3, #15
 800a91c:	b2da      	uxtb	r2, r3
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	0c1b      	lsrs	r3, r3, #16
 800a926:	b29b      	uxth	r3, r3
 800a928:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a92c:	b29a      	uxth	r2, r3
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	b29b      	uxth	r3, r3
 800a932:	b2db      	uxtb	r3, r3
 800a934:	b29b      	uxth	r3, r3
 800a936:	4313      	orrs	r3, r2
 800a938:	b29a      	uxth	r2, r3
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	0a9b      	lsrs	r3, r3, #10
 800a942:	b2db      	uxtb	r3, r3
 800a944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a948:	b2da      	uxtb	r2, r3
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	0a1b      	lsrs	r3, r3, #8
 800a952:	b2db      	uxtb	r3, r3
 800a954:	f003 0303 	and.w	r3, r3, #3
 800a958:	b2da      	uxtb	r2, r3
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	091b      	lsrs	r3, r3, #4
 800a962:	b2db      	uxtb	r3, r3
 800a964:	f003 030f 	and.w	r3, r3, #15
 800a968:	b2da      	uxtb	r2, r3
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	b2db      	uxtb	r3, r3
 800a972:	f003 030f 	and.w	r3, r3, #15
 800a976:	b2da      	uxtb	r2, r3
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a97c:	69bb      	ldr	r3, [r7, #24]
 800a97e:	0e1b      	lsrs	r3, r3, #24
 800a980:	b2da      	uxtb	r2, r3
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a98e:	4618      	mov	r0, r3
 800a990:	f001 f864 	bl	800ba5c <SDMMC_CmdBlockLength>
 800a994:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d00d      	beq.n	800a9b8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a08      	ldr	r2, [pc, #32]	; (800a9c4 <HAL_SD_GetCardStatus+0x178>)
 800a9a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9a8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800a9b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3750      	adds	r7, #80	; 0x50
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	1fe00fff 	.word	0x1fe00fff

0800a9c8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800aa12:	2300      	movs	r3, #0
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	370c      	adds	r7, #12
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800aa20:	b590      	push	{r4, r7, lr}
 800aa22:	b08d      	sub	sp, #52	; 0x34
 800aa24:	af02      	add	r7, sp, #8
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2203      	movs	r2, #3
 800aa34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa3c:	2b03      	cmp	r3, #3
 800aa3e:	d02e      	beq.n	800aa9e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa46:	d106      	bne.n	800aa56 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa4c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	635a      	str	r2, [r3, #52]	; 0x34
 800aa54:	e029      	b.n	800aaaa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa5c:	d10a      	bne.n	800aa74 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 fb64 	bl	800b12c <SD_WideBus_Enable>
 800aa64:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa6a:	6a3b      	ldr	r3, [r7, #32]
 800aa6c:	431a      	orrs	r2, r3
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	635a      	str	r2, [r3, #52]	; 0x34
 800aa72:	e01a      	b.n	800aaaa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d10a      	bne.n	800aa90 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 fba1 	bl	800b1c2 <SD_WideBus_Disable>
 800aa80:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa86:	6a3b      	ldr	r3, [r7, #32]
 800aa88:	431a      	orrs	r2, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	635a      	str	r2, [r3, #52]	; 0x34
 800aa8e:	e00c      	b.n	800aaaa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa94:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	635a      	str	r2, [r3, #52]	; 0x34
 800aa9c:	e005      	b.n	800aaaa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaa2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d007      	beq.n	800aac2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4a5f      	ldr	r2, [pc, #380]	; (800ac34 <HAL_SD_ConfigWideBusOperation+0x214>)
 800aab8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800aaba:	2301      	movs	r3, #1
 800aabc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aac0:	e096      	b.n	800abf0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800aac2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800aac6:	f04f 0100 	mov.w	r1, #0
 800aaca:	f7fd fdfb 	bl	80086c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800aace:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	f000 8083 	beq.w	800abde <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	691b      	ldr	r3, [r3, #16]
 800aaec:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	695a      	ldr	r2, [r3, #20]
 800aaf2:	69fb      	ldr	r3, [r7, #28]
 800aaf4:	4950      	ldr	r1, [pc, #320]	; (800ac38 <HAL_SD_ConfigWideBusOperation+0x218>)
 800aaf6:	fba1 1303 	umull	r1, r3, r1, r3
 800aafa:	0e1b      	lsrs	r3, r3, #24
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d303      	bcc.n	800ab08 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	695b      	ldr	r3, [r3, #20]
 800ab04:	61bb      	str	r3, [r7, #24]
 800ab06:	e05a      	b.n	800abbe <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab10:	d103      	bne.n	800ab1a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	695b      	ldr	r3, [r3, #20]
 800ab16:	61bb      	str	r3, [r7, #24]
 800ab18:	e051      	b.n	800abbe <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab22:	d126      	bne.n	800ab72 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	695b      	ldr	r3, [r3, #20]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d10e      	bne.n	800ab4a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800ab2c:	69fb      	ldr	r3, [r7, #28]
 800ab2e:	4a43      	ldr	r2, [pc, #268]	; (800ac3c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d906      	bls.n	800ab42 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	4a40      	ldr	r2, [pc, #256]	; (800ac38 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ab38:	fba2 2303 	umull	r2, r3, r2, r3
 800ab3c:	0e5b      	lsrs	r3, r3, #25
 800ab3e:	61bb      	str	r3, [r7, #24]
 800ab40:	e03d      	b.n	800abbe <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	695b      	ldr	r3, [r3, #20]
 800ab46:	61bb      	str	r3, [r7, #24]
 800ab48:	e039      	b.n	800abbe <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	695b      	ldr	r3, [r3, #20]
 800ab4e:	005b      	lsls	r3, r3, #1
 800ab50:	69fa      	ldr	r2, [r7, #28]
 800ab52:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab56:	4a39      	ldr	r2, [pc, #228]	; (800ac3c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d906      	bls.n	800ab6a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ab5c:	69fb      	ldr	r3, [r7, #28]
 800ab5e:	4a36      	ldr	r2, [pc, #216]	; (800ac38 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ab60:	fba2 2303 	umull	r2, r3, r2, r3
 800ab64:	0e5b      	lsrs	r3, r3, #25
 800ab66:	61bb      	str	r3, [r7, #24]
 800ab68:	e029      	b.n	800abbe <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	695b      	ldr	r3, [r3, #20]
 800ab6e:	61bb      	str	r3, [r7, #24]
 800ab70:	e025      	b.n	800abbe <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	695b      	ldr	r3, [r3, #20]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d10e      	bne.n	800ab98 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ab7a:	69fb      	ldr	r3, [r7, #28]
 800ab7c:	4a30      	ldr	r2, [pc, #192]	; (800ac40 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d906      	bls.n	800ab90 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ab82:	69fb      	ldr	r3, [r7, #28]
 800ab84:	4a2c      	ldr	r2, [pc, #176]	; (800ac38 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ab86:	fba2 2303 	umull	r2, r3, r2, r3
 800ab8a:	0e1b      	lsrs	r3, r3, #24
 800ab8c:	61bb      	str	r3, [r7, #24]
 800ab8e:	e016      	b.n	800abbe <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	695b      	ldr	r3, [r3, #20]
 800ab94:	61bb      	str	r3, [r7, #24]
 800ab96:	e012      	b.n	800abbe <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	695b      	ldr	r3, [r3, #20]
 800ab9c:	005b      	lsls	r3, r3, #1
 800ab9e:	69fa      	ldr	r2, [r7, #28]
 800aba0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aba4:	4a26      	ldr	r2, [pc, #152]	; (800ac40 <HAL_SD_ConfigWideBusOperation+0x220>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d906      	bls.n	800abb8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	4a22      	ldr	r2, [pc, #136]	; (800ac38 <HAL_SD_ConfigWideBusOperation+0x218>)
 800abae:	fba2 2303 	umull	r2, r3, r2, r3
 800abb2:	0e1b      	lsrs	r3, r3, #24
 800abb4:	61bb      	str	r3, [r7, #24]
 800abb6:	e002      	b.n	800abbe <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	695b      	ldr	r3, [r3, #20]
 800abbc:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681c      	ldr	r4, [r3, #0]
 800abc2:	466a      	mov	r2, sp
 800abc4:	f107 0314 	add.w	r3, r7, #20
 800abc8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800abcc:	e882 0003 	stmia.w	r2, {r0, r1}
 800abd0:	f107 0308 	add.w	r3, r7, #8
 800abd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800abd6:	4620      	mov	r0, r4
 800abd8:	f000 fe62 	bl	800b8a0 <SDMMC_Init>
 800abdc:	e008      	b.n	800abf0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abe2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800abea:	2301      	movs	r3, #1
 800abec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800abf8:	4618      	mov	r0, r3
 800abfa:	f000 ff2f 	bl	800ba5c <SDMMC_CmdBlockLength>
 800abfe:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ac00:	6a3b      	ldr	r3, [r7, #32]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d00c      	beq.n	800ac20 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a0a      	ldr	r2, [pc, #40]	; (800ac34 <HAL_SD_ConfigWideBusOperation+0x214>)
 800ac0c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac12:	6a3b      	ldr	r3, [r7, #32]
 800ac14:	431a      	orrs	r2, r3
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2201      	movs	r2, #1
 800ac24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800ac28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	372c      	adds	r7, #44	; 0x2c
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd90      	pop	{r4, r7, pc}
 800ac34:	1fe00fff 	.word	0x1fe00fff
 800ac38:	55e63b89 	.word	0x55e63b89
 800ac3c:	02faf080 	.word	0x02faf080
 800ac40:	017d7840 	.word	0x017d7840

0800ac44 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b086      	sub	sp, #24
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ac50:	f107 030c 	add.w	r3, r7, #12
 800ac54:	4619      	mov	r1, r3
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f000 fa40 	bl	800b0dc <SD_SendStatus>
 800ac5c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d005      	beq.n	800ac70 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	431a      	orrs	r2, r3
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	0a5b      	lsrs	r3, r3, #9
 800ac74:	f003 030f 	and.w	r3, r3, #15
 800ac78:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ac7a:	693b      	ldr	r3, [r7, #16]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3718      	adds	r7, #24
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b090      	sub	sp, #64	; 0x40
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800ac90:	f7f6 ffe2 	bl	8001c58 <HAL_GetTick>
 800ac94:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f000 fe59 	bl	800b952 <SDMMC_GetPowerState>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d102      	bne.n	800acac <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aca6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800acaa:	e0b5      	b.n	800ae18 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb0:	2b03      	cmp	r3, #3
 800acb2:	d02e      	beq.n	800ad12 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4618      	mov	r0, r3
 800acba:	f001 f8a4 	bl	800be06 <SDMMC_CmdSendCID>
 800acbe:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800acc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d001      	beq.n	800acca <SD_InitCard+0x46>
    {
      return errorstate;
 800acc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc8:	e0a6      	b.n	800ae18 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	2100      	movs	r1, #0
 800acd0:	4618      	mov	r0, r3
 800acd2:	f000 fe84 	bl	800b9de <SDMMC_GetResponse>
 800acd6:	4602      	mov	r2, r0
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	2104      	movs	r1, #4
 800ace2:	4618      	mov	r0, r3
 800ace4:	f000 fe7b 	bl	800b9de <SDMMC_GetResponse>
 800ace8:	4602      	mov	r2, r0
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	2108      	movs	r1, #8
 800acf4:	4618      	mov	r0, r3
 800acf6:	f000 fe72 	bl	800b9de <SDMMC_GetResponse>
 800acfa:	4602      	mov	r2, r0
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	210c      	movs	r1, #12
 800ad06:	4618      	mov	r0, r3
 800ad08:	f000 fe69 	bl	800b9de <SDMMC_GetResponse>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad16:	2b03      	cmp	r3, #3
 800ad18:	d01d      	beq.n	800ad56 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800ad1a:	e019      	b.n	800ad50 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f107 020a 	add.w	r2, r7, #10
 800ad24:	4611      	mov	r1, r2
 800ad26:	4618      	mov	r0, r3
 800ad28:	f001 f8ac 	bl	800be84 <SDMMC_CmdSetRelAdd>
 800ad2c:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800ad2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d001      	beq.n	800ad38 <SD_InitCard+0xb4>
      {
        return errorstate;
 800ad34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad36:	e06f      	b.n	800ae18 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800ad38:	f7f6 ff8e 	bl	8001c58 <HAL_GetTick>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad40:	1ad3      	subs	r3, r2, r3
 800ad42:	f241 3287 	movw	r2, #4999	; 0x1387
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d902      	bls.n	800ad50 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800ad4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad4e:	e063      	b.n	800ae18 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800ad50:	897b      	ldrh	r3, [r7, #10]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d0e2      	beq.n	800ad1c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad5a:	2b03      	cmp	r3, #3
 800ad5c:	d036      	beq.n	800adcc <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ad5e:	897b      	ldrh	r3, [r7, #10]
 800ad60:	461a      	mov	r2, r3
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad6e:	041b      	lsls	r3, r3, #16
 800ad70:	4619      	mov	r1, r3
 800ad72:	4610      	mov	r0, r2
 800ad74:	f001 f866 	bl	800be44 <SDMMC_CmdSendCSD>
 800ad78:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ad7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d001      	beq.n	800ad84 <SD_InitCard+0x100>
    {
      return errorstate;
 800ad80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad82:	e049      	b.n	800ae18 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2100      	movs	r1, #0
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f000 fe27 	bl	800b9de <SDMMC_GetResponse>
 800ad90:	4602      	mov	r2, r0
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	2104      	movs	r1, #4
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f000 fe1e 	bl	800b9de <SDMMC_GetResponse>
 800ada2:	4602      	mov	r2, r0
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	2108      	movs	r1, #8
 800adae:	4618      	mov	r0, r3
 800adb0:	f000 fe15 	bl	800b9de <SDMMC_GetResponse>
 800adb4:	4602      	mov	r2, r0
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	210c      	movs	r1, #12
 800adc0:	4618      	mov	r0, r3
 800adc2:	f000 fe0c 	bl	800b9de <SDMMC_GetResponse>
 800adc6:	4602      	mov	r2, r0
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	2104      	movs	r1, #4
 800add2:	4618      	mov	r0, r3
 800add4:	f000 fe03 	bl	800b9de <SDMMC_GetResponse>
 800add8:	4603      	mov	r3, r0
 800adda:	0d1a      	lsrs	r2, r3, #20
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ade0:	f107 030c 	add.w	r3, r7, #12
 800ade4:	4619      	mov	r1, r3
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f7ff fb8c 	bl	800a504 <HAL_SD_GetCardCSD>
 800adec:	4603      	mov	r3, r0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d002      	beq.n	800adf8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800adf2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800adf6:	e00f      	b.n	800ae18 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae00:	041b      	lsls	r3, r3, #16
 800ae02:	4619      	mov	r1, r3
 800ae04:	4610      	mov	r0, r2
 800ae06:	f000 ff15 	bl	800bc34 <SDMMC_CmdSelDesel>
 800ae0a:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800ae0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d001      	beq.n	800ae16 <SD_InitCard+0x192>
  {
    return errorstate;
 800ae12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae14:	e000      	b.n	800ae18 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ae16:	2300      	movs	r3, #0
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3740      	adds	r7, #64	; 0x40
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b086      	sub	sp, #24
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800ae30:	2300      	movs	r3, #0
 800ae32:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f000 ff1e 	bl	800bc7a <SDMMC_CmdGoIdleState>
 800ae3e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d001      	beq.n	800ae4a <SD_PowerON+0x2a>
  {
    return errorstate;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	e072      	b.n	800af30 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f000 ff31 	bl	800bcb6 <SDMMC_CmdOperCond>
 800ae54:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae5c:	d10d      	bne.n	800ae7a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2200      	movs	r2, #0
 800ae62:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f000 ff06 	bl	800bc7a <SDMMC_CmdGoIdleState>
 800ae6e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d004      	beq.n	800ae80 <SD_PowerON+0x60>
    {
      return errorstate;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	e05a      	b.n	800af30 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d137      	bne.n	800aef8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	2100      	movs	r1, #0
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f000 ff31 	bl	800bcf6 <SDMMC_CmdAppCommand>
 800ae94:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d02d      	beq.n	800aef8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800aea0:	e046      	b.n	800af30 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2100      	movs	r1, #0
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f000 ff24 	bl	800bcf6 <SDMMC_CmdAppCommand>
 800aeae:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d001      	beq.n	800aeba <SD_PowerON+0x9a>
    {
      return errorstate;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	e03a      	b.n	800af30 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	491e      	ldr	r1, [pc, #120]	; (800af38 <SD_PowerON+0x118>)
 800aec0:	4618      	mov	r0, r3
 800aec2:	f000 ff3b 	bl	800bd3c <SDMMC_CmdAppOperCommand>
 800aec6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d002      	beq.n	800aed4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aece:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800aed2:	e02d      	b.n	800af30 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2100      	movs	r1, #0
 800aeda:	4618      	mov	r0, r3
 800aedc:	f000 fd7f 	bl	800b9de <SDMMC_GetResponse>
 800aee0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	0fdb      	lsrs	r3, r3, #31
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d101      	bne.n	800aeee <SD_PowerON+0xce>
 800aeea:	2301      	movs	r3, #1
 800aeec:	e000      	b.n	800aef0 <SD_PowerON+0xd0>
 800aeee:	2300      	movs	r3, #0
 800aef0:	613b      	str	r3, [r7, #16]

    count++;
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	3301      	adds	r3, #1
 800aef6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800aefe:	4293      	cmp	r3, r2
 800af00:	d802      	bhi.n	800af08 <SD_PowerON+0xe8>
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d0cc      	beq.n	800aea2 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800af0e:	4293      	cmp	r3, r2
 800af10:	d902      	bls.n	800af18 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800af12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800af16:	e00b      	b.n	800af30 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800af24:	2b00      	cmp	r3, #0
 800af26:	d002      	beq.n	800af2e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2201      	movs	r2, #1
 800af2c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800af2e:	2300      	movs	r3, #0
}
 800af30:	4618      	mov	r0, r3
 800af32:	3718      	adds	r7, #24
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	c1100000 	.word	0xc1100000

0800af3c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b08c      	sub	sp, #48	; 0x30
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800af46:	f7f6 fe87 	bl	8001c58 <HAL_GetTick>
 800af4a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	2100      	movs	r1, #0
 800af56:	4618      	mov	r0, r3
 800af58:	f000 fd41 	bl	800b9de <SDMMC_GetResponse>
 800af5c:	4603      	mov	r3, r0
 800af5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af66:	d102      	bne.n	800af6e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800af68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800af6c:	e0b0      	b.n	800b0d0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	2140      	movs	r1, #64	; 0x40
 800af74:	4618      	mov	r0, r3
 800af76:	f000 fd71 	bl	800ba5c <SDMMC_CmdBlockLength>
 800af7a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800af7c:	6a3b      	ldr	r3, [r7, #32]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d005      	beq.n	800af8e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800af8a:	6a3b      	ldr	r3, [r7, #32]
 800af8c:	e0a0      	b.n	800b0d0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af96:	041b      	lsls	r3, r3, #16
 800af98:	4619      	mov	r1, r3
 800af9a:	4610      	mov	r0, r2
 800af9c:	f000 feab 	bl	800bcf6 <SDMMC_CmdAppCommand>
 800afa0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800afa2:	6a3b      	ldr	r3, [r7, #32]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d005      	beq.n	800afb4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800afb0:	6a3b      	ldr	r3, [r7, #32]
 800afb2:	e08d      	b.n	800b0d0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800afb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afb8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800afba:	2340      	movs	r3, #64	; 0x40
 800afbc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800afbe:	2360      	movs	r3, #96	; 0x60
 800afc0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800afc2:	2302      	movs	r3, #2
 800afc4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800afc6:	2300      	movs	r3, #0
 800afc8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800afca:	2301      	movs	r3, #1
 800afcc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f107 0208 	add.w	r2, r7, #8
 800afd6:	4611      	mov	r1, r2
 800afd8:	4618      	mov	r0, r3
 800afda:	f000 fd13 	bl	800ba04 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	4618      	mov	r0, r3
 800afe4:	f000 ff93 	bl	800bf0e <SDMMC_CmdStatusRegister>
 800afe8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800afea:	6a3b      	ldr	r3, [r7, #32]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d02b      	beq.n	800b048 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800aff8:	6a3b      	ldr	r3, [r7, #32]
 800affa:	e069      	b.n	800b0d0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b002:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b006:	2b00      	cmp	r3, #0
 800b008:	d013      	beq.n	800b032 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800b00a:	2300      	movs	r3, #0
 800b00c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b00e:	e00d      	b.n	800b02c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4618      	mov	r0, r3
 800b016:	f000 fc6d 	bl	800b8f4 <SDMMC_ReadFIFO>
 800b01a:	4602      	mov	r2, r0
 800b01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01e:	601a      	str	r2, [r3, #0]
        pData++;
 800b020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b022:	3304      	adds	r3, #4
 800b024:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800b026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b028:	3301      	adds	r3, #1
 800b02a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b02e:	2b07      	cmp	r3, #7
 800b030:	d9ee      	bls.n	800b010 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b032:	f7f6 fe11 	bl	8001c58 <HAL_GetTick>
 800b036:	4602      	mov	r2, r0
 800b038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03a:	1ad3      	subs	r3, r2, r3
 800b03c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b040:	d102      	bne.n	800b048 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b042:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b046:	e043      	b.n	800b0d0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b04e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b052:	2b00      	cmp	r3, #0
 800b054:	d0d2      	beq.n	800affc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b05c:	f003 0308 	and.w	r3, r3, #8
 800b060:	2b00      	cmp	r3, #0
 800b062:	d001      	beq.n	800b068 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b064:	2308      	movs	r3, #8
 800b066:	e033      	b.n	800b0d0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b06e:	f003 0302 	and.w	r3, r3, #2
 800b072:	2b00      	cmp	r3, #0
 800b074:	d001      	beq.n	800b07a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b076:	2302      	movs	r3, #2
 800b078:	e02a      	b.n	800b0d0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b080:	f003 0320 	and.w	r3, r3, #32
 800b084:	2b00      	cmp	r3, #0
 800b086:	d017      	beq.n	800b0b8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b088:	2320      	movs	r3, #32
 800b08a:	e021      	b.n	800b0d0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4618      	mov	r0, r3
 800b092:	f000 fc2f 	bl	800b8f4 <SDMMC_ReadFIFO>
 800b096:	4602      	mov	r2, r0
 800b098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b09a:	601a      	str	r2, [r3, #0]
    pData++;
 800b09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b09e:	3304      	adds	r3, #4
 800b0a0:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b0a2:	f7f6 fdd9 	bl	8001c58 <HAL_GetTick>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0aa:	1ad3      	subs	r3, r2, r3
 800b0ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0b0:	d102      	bne.n	800b0b8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b0b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b0b6:	e00b      	b.n	800b0d0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d1e2      	bne.n	800b08c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a03      	ldr	r2, [pc, #12]	; (800b0d8 <SD_SendSDStatus+0x19c>)
 800b0cc:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800b0ce:	2300      	movs	r3, #0
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3730      	adds	r7, #48	; 0x30
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	18000f3a 	.word	0x18000f3a

0800b0dc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d102      	bne.n	800b0f2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b0ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b0f0:	e018      	b.n	800b124 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0fa:	041b      	lsls	r3, r3, #16
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	4610      	mov	r0, r2
 800b100:	f000 fee2 	bl	800bec8 <SDMMC_CmdSendStatus>
 800b104:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d001      	beq.n	800b110 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	e009      	b.n	800b124 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	2100      	movs	r1, #0
 800b116:	4618      	mov	r0, r3
 800b118:	f000 fc61 	bl	800b9de <SDMMC_GetResponse>
 800b11c:	4602      	mov	r2, r0
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b122:	2300      	movs	r3, #0
}
 800b124:	4618      	mov	r0, r3
 800b126:	3710      	adds	r7, #16
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b086      	sub	sp, #24
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b134:	2300      	movs	r3, #0
 800b136:	60fb      	str	r3, [r7, #12]
 800b138:	2300      	movs	r3, #0
 800b13a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	2100      	movs	r1, #0
 800b142:	4618      	mov	r0, r3
 800b144:	f000 fc4b 	bl	800b9de <SDMMC_GetResponse>
 800b148:	4603      	mov	r3, r0
 800b14a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b14e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b152:	d102      	bne.n	800b15a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b154:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b158:	e02f      	b.n	800b1ba <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b15a:	f107 030c 	add.w	r3, r7, #12
 800b15e:	4619      	mov	r1, r3
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 f879 	bl	800b258 <SD_FindSCR>
 800b166:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d001      	beq.n	800b172 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	e023      	b.n	800b1ba <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d01c      	beq.n	800b1b6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b184:	041b      	lsls	r3, r3, #16
 800b186:	4619      	mov	r1, r3
 800b188:	4610      	mov	r0, r2
 800b18a:	f000 fdb4 	bl	800bcf6 <SDMMC_CmdAppCommand>
 800b18e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d001      	beq.n	800b19a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	e00f      	b.n	800b1ba <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	2102      	movs	r1, #2
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f000 fdeb 	bl	800bd7c <SDMMC_CmdBusWidth>
 800b1a6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d001      	beq.n	800b1b2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	e003      	b.n	800b1ba <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	e001      	b.n	800b1ba <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b1b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3718      	adds	r7, #24
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	b086      	sub	sp, #24
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	60fb      	str	r3, [r7, #12]
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	2100      	movs	r1, #0
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f000 fc00 	bl	800b9de <SDMMC_GetResponse>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1e8:	d102      	bne.n	800b1f0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b1ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b1ee:	e02f      	b.n	800b250 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b1f0:	f107 030c 	add.w	r3, r7, #12
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 f82e 	bl	800b258 <SD_FindSCR>
 800b1fc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d001      	beq.n	800b208 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	e023      	b.n	800b250 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d01c      	beq.n	800b24c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b21a:	041b      	lsls	r3, r3, #16
 800b21c:	4619      	mov	r1, r3
 800b21e:	4610      	mov	r0, r2
 800b220:	f000 fd69 	bl	800bcf6 <SDMMC_CmdAppCommand>
 800b224:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d001      	beq.n	800b230 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	e00f      	b.n	800b250 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2100      	movs	r1, #0
 800b236:	4618      	mov	r0, r3
 800b238:	f000 fda0 	bl	800bd7c <SDMMC_CmdBusWidth>
 800b23c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d001      	beq.n	800b248 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	e003      	b.n	800b250 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b248:	2300      	movs	r3, #0
 800b24a:	e001      	b.n	800b250 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b24c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b250:	4618      	mov	r0, r3
 800b252:	3718      	adds	r7, #24
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b08e      	sub	sp, #56	; 0x38
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b262:	f7f6 fcf9 	bl	8001c58 <HAL_GetTick>
 800b266:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b268:	2300      	movs	r3, #0
 800b26a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b26c:	2300      	movs	r3, #0
 800b26e:	60bb      	str	r3, [r7, #8]
 800b270:	2300      	movs	r3, #0
 800b272:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	2108      	movs	r1, #8
 800b27e:	4618      	mov	r0, r3
 800b280:	f000 fbec 	bl	800ba5c <SDMMC_CmdBlockLength>
 800b284:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d001      	beq.n	800b290 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28e:	e0ad      	b.n	800b3ec <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681a      	ldr	r2, [r3, #0]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b298:	041b      	lsls	r3, r3, #16
 800b29a:	4619      	mov	r1, r3
 800b29c:	4610      	mov	r0, r2
 800b29e:	f000 fd2a 	bl	800bcf6 <SDMMC_CmdAppCommand>
 800b2a2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d001      	beq.n	800b2ae <SD_FindSCR+0x56>
  {
    return errorstate;
 800b2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ac:	e09e      	b.n	800b3ec <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b2ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2b2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b2b4:	2308      	movs	r3, #8
 800b2b6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b2b8:	2330      	movs	r3, #48	; 0x30
 800b2ba:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b2bc:	2302      	movs	r3, #2
 800b2be:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f107 0210 	add.w	r2, r7, #16
 800b2d0:	4611      	mov	r1, r2
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f000 fb96 	bl	800ba04 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f000 fd70 	bl	800bdc2 <SDMMC_CmdSendSCR>
 800b2e2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d027      	beq.n	800b33a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ec:	e07e      	b.n	800b3ec <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d113      	bne.n	800b324 <SD_FindSCR+0xcc>
 800b2fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d110      	bne.n	800b324 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4618      	mov	r0, r3
 800b308:	f000 faf4 	bl	800b8f4 <SDMMC_ReadFIFO>
 800b30c:	4603      	mov	r3, r0
 800b30e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4618      	mov	r0, r3
 800b316:	f000 faed 	bl	800b8f4 <SDMMC_ReadFIFO>
 800b31a:	4603      	mov	r3, r0
 800b31c:	60fb      	str	r3, [r7, #12]
      index++;
 800b31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b320:	3301      	adds	r3, #1
 800b322:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b324:	f7f6 fc98 	bl	8001c58 <HAL_GetTick>
 800b328:	4602      	mov	r2, r0
 800b32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32c:	1ad3      	subs	r3, r2, r3
 800b32e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b332:	d102      	bne.n	800b33a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b334:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b338:	e058      	b.n	800b3ec <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b340:	f240 532a 	movw	r3, #1322	; 0x52a
 800b344:	4013      	ands	r3, r2
 800b346:	2b00      	cmp	r3, #0
 800b348:	d0d1      	beq.n	800b2ee <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b350:	f003 0308 	and.w	r3, r3, #8
 800b354:	2b00      	cmp	r3, #0
 800b356:	d005      	beq.n	800b364 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	2208      	movs	r2, #8
 800b35e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b360:	2308      	movs	r3, #8
 800b362:	e043      	b.n	800b3ec <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b36a:	f003 0302 	and.w	r3, r3, #2
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d005      	beq.n	800b37e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	2202      	movs	r2, #2
 800b378:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b37a:	2302      	movs	r3, #2
 800b37c:	e036      	b.n	800b3ec <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b384:	f003 0320 	and.w	r3, r3, #32
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d005      	beq.n	800b398 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	2220      	movs	r2, #32
 800b392:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b394:	2320      	movs	r3, #32
 800b396:	e029      	b.n	800b3ec <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4a15      	ldr	r2, [pc, #84]	; (800b3f4 <SD_FindSCR+0x19c>)
 800b39e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	061a      	lsls	r2, r3, #24
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	021b      	lsls	r3, r3, #8
 800b3a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b3ac:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	0a1b      	lsrs	r3, r3, #8
 800b3b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b3b6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	0e1b      	lsrs	r3, r3, #24
 800b3bc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c0:	601a      	str	r2, [r3, #0]
    scr++;
 800b3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c4:	3304      	adds	r3, #4
 800b3c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	061a      	lsls	r2, r3, #24
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	021b      	lsls	r3, r3, #8
 800b3d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b3d4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	0a1b      	lsrs	r3, r3, #8
 800b3da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b3de:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	0e1b      	lsrs	r3, r3, #24
 800b3e4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b3ea:	2300      	movs	r3, #0
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3738      	adds	r7, #56	; 0x38
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}
 800b3f4:	18000f3a 	.word	0x18000f3a

0800b3f8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b086      	sub	sp, #24
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b404:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b40a:	2b1f      	cmp	r3, #31
 800b40c:	d936      	bls.n	800b47c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800b40e:	2300      	movs	r3, #0
 800b410:	617b      	str	r3, [r7, #20]
 800b412:	e027      	b.n	800b464 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4618      	mov	r0, r3
 800b41a:	f000 fa6b 	bl	800b8f4 <SDMMC_ReadFIFO>
 800b41e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	b2da      	uxtb	r2, r3
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	3301      	adds	r3, #1
 800b42c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	0a1b      	lsrs	r3, r3, #8
 800b432:	b2da      	uxtb	r2, r3
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	3301      	adds	r3, #1
 800b43c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	0c1b      	lsrs	r3, r3, #16
 800b442:	b2da      	uxtb	r2, r3
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	3301      	adds	r3, #1
 800b44c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	0e1b      	lsrs	r3, r3, #24
 800b452:	b2da      	uxtb	r2, r3
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	3301      	adds	r3, #1
 800b45c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	3301      	adds	r3, #1
 800b462:	617b      	str	r3, [r7, #20]
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	2b07      	cmp	r3, #7
 800b468:	d9d4      	bls.n	800b414 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	693a      	ldr	r2, [r7, #16]
 800b46e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b474:	f1a3 0220 	sub.w	r2, r3, #32
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800b47c:	bf00      	nop
 800b47e:	3718      	adds	r7, #24
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b086      	sub	sp, #24
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	69db      	ldr	r3, [r3, #28]
 800b490:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6a1b      	ldr	r3, [r3, #32]
 800b496:	2b1f      	cmp	r3, #31
 800b498:	d93a      	bls.n	800b510 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800b49a:	2300      	movs	r3, #0
 800b49c:	617b      	str	r3, [r7, #20]
 800b49e:	e02b      	b.n	800b4f8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	021a      	lsls	r2, r3, #8
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	4313      	orrs	r3, r2
 800b4b6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	041a      	lsls	r2, r3, #16
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	061a      	lsls	r2, r3, #24
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	3301      	adds	r3, #1
 800b4e0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f107 020c 	add.w	r2, r7, #12
 800b4ea:	4611      	mov	r1, r2
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f000 fa0e 	bl	800b90e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	617b      	str	r3, [r7, #20]
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	2b07      	cmp	r3, #7
 800b4fc:	d9d0      	bls.n	800b4a0 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	693a      	ldr	r2, [r7, #16]
 800b502:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6a1b      	ldr	r3, [r3, #32]
 800b508:	f1a3 0220 	sub.w	r2, r3, #32
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	621a      	str	r2, [r3, #32]
  }
}
 800b510:	bf00      	nop
 800b512:	3718      	adds	r7, #24
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b518:	b480      	push	{r7}
 800b51a:	b083      	sub	sp, #12
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b520:	bf00      	nop
 800b522:	370c      	adds	r7, #12
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b534:	bf00      	nop
 800b536:	370c      	adds	r7, #12
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr

0800b540 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b540:	b480      	push	{r7}
 800b542:	b083      	sub	sp, #12
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b548:	bf00      	nop
 800b54a:	370c      	adds	r7, #12
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr

0800b554 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b554:	b480      	push	{r7}
 800b556:	b083      	sub	sp, #12
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b55c:	bf00      	nop
 800b55e:	370c      	adds	r7, #12
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr

0800b568 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d101      	bne.n	800b57c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b578:	2301      	movs	r3, #1
 800b57a:	e02b      	b.n	800b5d4 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b582:	b2db      	uxtb	r3, r3
 800b584:	2b00      	cmp	r3, #0
 800b586:	d106      	bne.n	800b596 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f7f6 f9a1 	bl	80018d8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2202      	movs	r2, #2
 800b59a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	3304      	adds	r3, #4
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	4610      	mov	r0, r2
 800b5aa:	f000 f877 	bl	800b69c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6818      	ldr	r0, [r3, #0]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	6839      	ldr	r1, [r7, #0]
 800b5ba:	f000 f8cb 	bl	800b754 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800b5be:	4b07      	ldr	r3, [pc, #28]	; (800b5dc <HAL_SDRAM_Init+0x74>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	4a06      	ldr	r2, [pc, #24]	; (800b5dc <HAL_SDRAM_Init+0x74>)
 800b5c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b5c8:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b5d2:	2300      	movs	r3, #0
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3708      	adds	r7, #8
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}
 800b5dc:	52004000 	.word	0x52004000

0800b5e0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b086      	sub	sp, #24
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	60b9      	str	r1, [r7, #8]
 800b5ea:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b5f2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800b5f4:	7dfb      	ldrb	r3, [r7, #23]
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	d101      	bne.n	800b5fe <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800b5fa:	2302      	movs	r3, #2
 800b5fc:	e021      	b.n	800b642 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800b5fe:	7dfb      	ldrb	r3, [r7, #23]
 800b600:	2b01      	cmp	r3, #1
 800b602:	d002      	beq.n	800b60a <HAL_SDRAM_SendCommand+0x2a>
 800b604:	7dfb      	ldrb	r3, [r7, #23]
 800b606:	2b05      	cmp	r3, #5
 800b608:	d118      	bne.n	800b63c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2202      	movs	r2, #2
 800b60e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	687a      	ldr	r2, [r7, #4]
 800b618:	68b9      	ldr	r1, [r7, #8]
 800b61a:	4618      	mov	r0, r3
 800b61c:	f000 f904 	bl	800b828 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	2b02      	cmp	r3, #2
 800b626:	d104      	bne.n	800b632 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2205      	movs	r2, #5
 800b62c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b630:	e006      	b.n	800b640 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2201      	movs	r2, #1
 800b636:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b63a:	e001      	b.n	800b640 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800b63c:	2301      	movs	r3, #1
 800b63e:	e000      	b.n	800b642 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800b640:	2300      	movs	r3, #0
}
 800b642:	4618      	mov	r0, r3
 800b644:	3718      	adds	r7, #24
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}

0800b64a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b082      	sub	sp, #8
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
 800b652:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b65a:	b2db      	uxtb	r3, r3
 800b65c:	2b02      	cmp	r3, #2
 800b65e:	d101      	bne.n	800b664 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800b660:	2302      	movs	r3, #2
 800b662:	e016      	b.n	800b692 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b66a:	b2db      	uxtb	r3, r3
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d10f      	bne.n	800b690 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2202      	movs	r2, #2
 800b674:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	6839      	ldr	r1, [r7, #0]
 800b67e:	4618      	mov	r0, r3
 800b680:	f000 f8f6 	bl	800b870 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2201      	movs	r2, #1
 800b688:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b68c:	2300      	movs	r3, #0
 800b68e:	e000      	b.n	800b692 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800b690:	2301      	movs	r3, #1
}
 800b692:	4618      	mov	r0, r3
 800b694:	3708      	adds	r7, #8
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
	...

0800b69c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b083      	sub	sp, #12
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d121      	bne.n	800b6f2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681a      	ldr	r2, [r3, #0]
 800b6b2:	4b27      	ldr	r3, [pc, #156]	; (800b750 <FMC_SDRAM_Init+0xb4>)
 800b6b4:	4013      	ands	r3, r2
 800b6b6:	683a      	ldr	r2, [r7, #0]
 800b6b8:	6851      	ldr	r1, [r2, #4]
 800b6ba:	683a      	ldr	r2, [r7, #0]
 800b6bc:	6892      	ldr	r2, [r2, #8]
 800b6be:	4311      	orrs	r1, r2
 800b6c0:	683a      	ldr	r2, [r7, #0]
 800b6c2:	68d2      	ldr	r2, [r2, #12]
 800b6c4:	4311      	orrs	r1, r2
 800b6c6:	683a      	ldr	r2, [r7, #0]
 800b6c8:	6912      	ldr	r2, [r2, #16]
 800b6ca:	4311      	orrs	r1, r2
 800b6cc:	683a      	ldr	r2, [r7, #0]
 800b6ce:	6952      	ldr	r2, [r2, #20]
 800b6d0:	4311      	orrs	r1, r2
 800b6d2:	683a      	ldr	r2, [r7, #0]
 800b6d4:	6992      	ldr	r2, [r2, #24]
 800b6d6:	4311      	orrs	r1, r2
 800b6d8:	683a      	ldr	r2, [r7, #0]
 800b6da:	69d2      	ldr	r2, [r2, #28]
 800b6dc:	4311      	orrs	r1, r2
 800b6de:	683a      	ldr	r2, [r7, #0]
 800b6e0:	6a12      	ldr	r2, [r2, #32]
 800b6e2:	4311      	orrs	r1, r2
 800b6e4:	683a      	ldr	r2, [r7, #0]
 800b6e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b6e8:	430a      	orrs	r2, r1
 800b6ea:	431a      	orrs	r2, r3
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	601a      	str	r2, [r3, #0]
 800b6f0:	e026      	b.n	800b740 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	69d9      	ldr	r1, [r3, #28]
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	6a1b      	ldr	r3, [r3, #32]
 800b702:	4319      	orrs	r1, r3
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b708:	430b      	orrs	r3, r1
 800b70a:	431a      	orrs	r2, r3
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	685a      	ldr	r2, [r3, #4]
 800b714:	4b0e      	ldr	r3, [pc, #56]	; (800b750 <FMC_SDRAM_Init+0xb4>)
 800b716:	4013      	ands	r3, r2
 800b718:	683a      	ldr	r2, [r7, #0]
 800b71a:	6851      	ldr	r1, [r2, #4]
 800b71c:	683a      	ldr	r2, [r7, #0]
 800b71e:	6892      	ldr	r2, [r2, #8]
 800b720:	4311      	orrs	r1, r2
 800b722:	683a      	ldr	r2, [r7, #0]
 800b724:	68d2      	ldr	r2, [r2, #12]
 800b726:	4311      	orrs	r1, r2
 800b728:	683a      	ldr	r2, [r7, #0]
 800b72a:	6912      	ldr	r2, [r2, #16]
 800b72c:	4311      	orrs	r1, r2
 800b72e:	683a      	ldr	r2, [r7, #0]
 800b730:	6952      	ldr	r2, [r2, #20]
 800b732:	4311      	orrs	r1, r2
 800b734:	683a      	ldr	r2, [r7, #0]
 800b736:	6992      	ldr	r2, [r2, #24]
 800b738:	430a      	orrs	r2, r1
 800b73a:	431a      	orrs	r2, r3
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b740:	2300      	movs	r3, #0
}
 800b742:	4618      	mov	r0, r3
 800b744:	370c      	adds	r7, #12
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr
 800b74e:	bf00      	nop
 800b750:	ffff8000 	.word	0xffff8000

0800b754 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b754:	b480      	push	{r7}
 800b756:	b085      	sub	sp, #20
 800b758:	af00      	add	r7, sp, #0
 800b75a:	60f8      	str	r0, [r7, #12]
 800b75c:	60b9      	str	r1, [r7, #8]
 800b75e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d128      	bne.n	800b7b8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	689b      	ldr	r3, [r3, #8]
 800b76a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	1e59      	subs	r1, r3, #1
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	3b01      	subs	r3, #1
 800b77a:	011b      	lsls	r3, r3, #4
 800b77c:	4319      	orrs	r1, r3
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	689b      	ldr	r3, [r3, #8]
 800b782:	3b01      	subs	r3, #1
 800b784:	021b      	lsls	r3, r3, #8
 800b786:	4319      	orrs	r1, r3
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	68db      	ldr	r3, [r3, #12]
 800b78c:	3b01      	subs	r3, #1
 800b78e:	031b      	lsls	r3, r3, #12
 800b790:	4319      	orrs	r1, r3
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	691b      	ldr	r3, [r3, #16]
 800b796:	3b01      	subs	r3, #1
 800b798:	041b      	lsls	r3, r3, #16
 800b79a:	4319      	orrs	r1, r3
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	695b      	ldr	r3, [r3, #20]
 800b7a0:	3b01      	subs	r3, #1
 800b7a2:	051b      	lsls	r3, r3, #20
 800b7a4:	4319      	orrs	r1, r3
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	699b      	ldr	r3, [r3, #24]
 800b7aa:	3b01      	subs	r3, #1
 800b7ac:	061b      	lsls	r3, r3, #24
 800b7ae:	430b      	orrs	r3, r1
 800b7b0:	431a      	orrs	r2, r3
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	609a      	str	r2, [r3, #8]
 800b7b6:	e02d      	b.n	800b814 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	689a      	ldr	r2, [r3, #8]
 800b7bc:	4b19      	ldr	r3, [pc, #100]	; (800b824 <FMC_SDRAM_Timing_Init+0xd0>)
 800b7be:	4013      	ands	r3, r2
 800b7c0:	68ba      	ldr	r2, [r7, #8]
 800b7c2:	68d2      	ldr	r2, [r2, #12]
 800b7c4:	3a01      	subs	r2, #1
 800b7c6:	0311      	lsls	r1, r2, #12
 800b7c8:	68ba      	ldr	r2, [r7, #8]
 800b7ca:	6952      	ldr	r2, [r2, #20]
 800b7cc:	3a01      	subs	r2, #1
 800b7ce:	0512      	lsls	r2, r2, #20
 800b7d0:	430a      	orrs	r2, r1
 800b7d2:	431a      	orrs	r2, r3
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	68db      	ldr	r3, [r3, #12]
 800b7dc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	1e59      	subs	r1, r3, #1
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	3b01      	subs	r3, #1
 800b7ec:	011b      	lsls	r3, r3, #4
 800b7ee:	4319      	orrs	r1, r3
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	3b01      	subs	r3, #1
 800b7f6:	021b      	lsls	r3, r3, #8
 800b7f8:	4319      	orrs	r1, r3
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	691b      	ldr	r3, [r3, #16]
 800b7fe:	3b01      	subs	r3, #1
 800b800:	041b      	lsls	r3, r3, #16
 800b802:	4319      	orrs	r1, r3
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	699b      	ldr	r3, [r3, #24]
 800b808:	3b01      	subs	r3, #1
 800b80a:	061b      	lsls	r3, r3, #24
 800b80c:	430b      	orrs	r3, r1
 800b80e:	431a      	orrs	r2, r3
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800b814:	2300      	movs	r3, #0
}
 800b816:	4618      	mov	r0, r3
 800b818:	3714      	adds	r7, #20
 800b81a:	46bd      	mov	sp, r7
 800b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b820:	4770      	bx	lr
 800b822:	bf00      	nop
 800b824:	ff0f0fff 	.word	0xff0f0fff

0800b828 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b828:	b480      	push	{r7}
 800b82a:	b085      	sub	sp, #20
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	60b9      	str	r1, [r7, #8]
 800b832:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	691a      	ldr	r2, [r3, #16]
 800b838:	4b0c      	ldr	r3, [pc, #48]	; (800b86c <FMC_SDRAM_SendCommand+0x44>)
 800b83a:	4013      	ands	r3, r2
 800b83c:	68ba      	ldr	r2, [r7, #8]
 800b83e:	6811      	ldr	r1, [r2, #0]
 800b840:	68ba      	ldr	r2, [r7, #8]
 800b842:	6852      	ldr	r2, [r2, #4]
 800b844:	4311      	orrs	r1, r2
 800b846:	68ba      	ldr	r2, [r7, #8]
 800b848:	6892      	ldr	r2, [r2, #8]
 800b84a:	3a01      	subs	r2, #1
 800b84c:	0152      	lsls	r2, r2, #5
 800b84e:	4311      	orrs	r1, r2
 800b850:	68ba      	ldr	r2, [r7, #8]
 800b852:	68d2      	ldr	r2, [r2, #12]
 800b854:	0252      	lsls	r2, r2, #9
 800b856:	430a      	orrs	r2, r1
 800b858:	431a      	orrs	r2, r3
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800b85e:	2300      	movs	r3, #0
}
 800b860:	4618      	mov	r0, r3
 800b862:	3714      	adds	r7, #20
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr
 800b86c:	ffc00000 	.word	0xffc00000

0800b870 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	695a      	ldr	r2, [r3, #20]
 800b87e:	4b07      	ldr	r3, [pc, #28]	; (800b89c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800b880:	4013      	ands	r3, r2
 800b882:	683a      	ldr	r2, [r7, #0]
 800b884:	0052      	lsls	r2, r2, #1
 800b886:	431a      	orrs	r2, r3
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b88c:	2300      	movs	r3, #0
}
 800b88e:	4618      	mov	r0, r3
 800b890:	370c      	adds	r7, #12
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr
 800b89a:	bf00      	nop
 800b89c:	ffffc001 	.word	0xffffc001

0800b8a0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b8a0:	b084      	sub	sp, #16
 800b8a2:	b480      	push	{r7}
 800b8a4:	b085      	sub	sp, #20
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
 800b8aa:	f107 001c 	add.w	r0, r7, #28
 800b8ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b8b6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b8b8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b8ba:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800b8be:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800b8c2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800b8c6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b8c8:	68fa      	ldr	r2, [r7, #12]
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	685a      	ldr	r2, [r3, #4]
 800b8d2:	4b07      	ldr	r3, [pc, #28]	; (800b8f0 <SDMMC_Init+0x50>)
 800b8d4:	4013      	ands	r3, r2
 800b8d6:	68fa      	ldr	r2, [r7, #12]
 800b8d8:	431a      	orrs	r2, r3
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b8de:	2300      	movs	r3, #0
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3714      	adds	r7, #20
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	b004      	add	sp, #16
 800b8ec:	4770      	bx	lr
 800b8ee:	bf00      	nop
 800b8f0:	ffc02c00 	.word	0xffc02c00

0800b8f4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b902:	4618      	mov	r0, r3
 800b904:	370c      	adds	r7, #12
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr

0800b90e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b90e:	b480      	push	{r7}
 800b910:	b083      	sub	sp, #12
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
 800b916:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	681a      	ldr	r2, [r3, #0]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b922:	2300      	movs	r3, #0
}
 800b924:	4618      	mov	r0, r3
 800b926:	370c      	adds	r7, #12
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr

0800b930 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b930:	b480      	push	{r7}
 800b932:	b083      	sub	sp, #12
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f043 0203 	orr.w	r2, r3, #3
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	370c      	adds	r7, #12
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr

0800b952 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b952:	b480      	push	{r7}
 800b954:	b083      	sub	sp, #12
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f003 0303 	and.w	r3, r3, #3
}
 800b962:	4618      	mov	r0, r3
 800b964:	370c      	adds	r7, #12
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr
	...

0800b970 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b970:	b480      	push	{r7}
 800b972:	b085      	sub	sp, #20
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b97a:	2300      	movs	r3, #0
 800b97c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b98e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b994:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b99a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b99c:	68fa      	ldr	r2, [r7, #12]
 800b99e:	4313      	orrs	r3, r2
 800b9a0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	68da      	ldr	r2, [r3, #12]
 800b9a6:	4b06      	ldr	r3, [pc, #24]	; (800b9c0 <SDMMC_SendCommand+0x50>)
 800b9a8:	4013      	ands	r3, r2
 800b9aa:	68fa      	ldr	r2, [r7, #12]
 800b9ac:	431a      	orrs	r2, r3
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3714      	adds	r7, #20
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr
 800b9c0:	fffee0c0 	.word	0xfffee0c0

0800b9c4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b083      	sub	sp, #12
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	691b      	ldr	r3, [r3, #16]
 800b9d0:	b2db      	uxtb	r3, r3
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	370c      	adds	r7, #12
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr

0800b9de <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b9de:	b480      	push	{r7}
 800b9e0:	b085      	sub	sp, #20
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
 800b9e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	3314      	adds	r3, #20
 800b9ec:	461a      	mov	r2, r3
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	4413      	add	r3, r2
 800b9f2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3714      	adds	r7, #20
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr

0800ba04 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b085      	sub	sp, #20
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	681a      	ldr	r2, [r3, #0]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	685a      	ldr	r2, [r3, #4]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ba2a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800ba30:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800ba36:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ba38:	68fa      	ldr	r2, [r7, #12]
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba42:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	431a      	orrs	r2, r3
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ba4e:	2300      	movs	r3, #0

}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3714      	adds	r7, #20
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr

0800ba5c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b088      	sub	sp, #32
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ba6a:	2310      	movs	r3, #16
 800ba6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba74:	2300      	movs	r3, #0
 800ba76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba7e:	f107 0308 	add.w	r3, r7, #8
 800ba82:	4619      	mov	r1, r3
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f7ff ff73 	bl	800b970 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ba8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba8e:	2110      	movs	r1, #16
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 fa5f 	bl	800bf54 <SDMMC_GetCmdResp1>
 800ba96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba98:	69fb      	ldr	r3, [r7, #28]
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3720      	adds	r7, #32
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800baa2:	b580      	push	{r7, lr}
 800baa4:	b088      	sub	sp, #32
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
 800baaa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bab0:	2311      	movs	r3, #17
 800bab2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bab4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bab8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800baba:	2300      	movs	r3, #0
 800babc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800babe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bac2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bac4:	f107 0308 	add.w	r3, r7, #8
 800bac8:	4619      	mov	r1, r3
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f7ff ff50 	bl	800b970 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bad0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bad4:	2111      	movs	r1, #17
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 fa3c 	bl	800bf54 <SDMMC_GetCmdResp1>
 800badc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bade:	69fb      	ldr	r3, [r7, #28]
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3720      	adds	r7, #32
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b088      	sub	sp, #32
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800baf6:	2312      	movs	r3, #18
 800baf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bafa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bafe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb00:	2300      	movs	r3, #0
 800bb02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb0a:	f107 0308 	add.w	r3, r7, #8
 800bb0e:	4619      	mov	r1, r3
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f7ff ff2d 	bl	800b970 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bb16:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb1a:	2112      	movs	r1, #18
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 fa19 	bl	800bf54 <SDMMC_GetCmdResp1>
 800bb22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb24:	69fb      	ldr	r3, [r7, #28]
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3720      	adds	r7, #32
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}

0800bb2e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bb2e:	b580      	push	{r7, lr}
 800bb30:	b088      	sub	sp, #32
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
 800bb36:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bb3c:	2318      	movs	r3, #24
 800bb3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb40:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb46:	2300      	movs	r3, #0
 800bb48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb50:	f107 0308 	add.w	r3, r7, #8
 800bb54:	4619      	mov	r1, r3
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f7ff ff0a 	bl	800b970 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bb5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb60:	2118      	movs	r1, #24
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 f9f6 	bl	800bf54 <SDMMC_GetCmdResp1>
 800bb68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb6a:	69fb      	ldr	r3, [r7, #28]
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3720      	adds	r7, #32
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b088      	sub	sp, #32
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bb82:	2319      	movs	r3, #25
 800bb84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb86:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb94:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb96:	f107 0308 	add.w	r3, r7, #8
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f7ff fee7 	bl	800b970 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bba2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bba6:	2119      	movs	r1, #25
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 f9d3 	bl	800bf54 <SDMMC_GetCmdResp1>
 800bbae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbb0:	69fb      	ldr	r3, [r7, #28]
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3720      	adds	r7, #32
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
	...

0800bbbc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b088      	sub	sp, #32
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bbc8:	230c      	movs	r3, #12
 800bbca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bbcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bbd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbda:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	68db      	ldr	r3, [r3, #12]
 800bbe0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	68db      	ldr	r3, [r3, #12]
 800bbec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbf4:	f107 0308 	add.w	r3, r7, #8
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f7ff feb8 	bl	800b970 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bc00:	4a0b      	ldr	r2, [pc, #44]	; (800bc30 <SDMMC_CmdStopTransfer+0x74>)
 800bc02:	210c      	movs	r1, #12
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f000 f9a5 	bl	800bf54 <SDMMC_GetCmdResp1>
 800bc0a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bc18:	69fb      	ldr	r3, [r7, #28]
 800bc1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc1e:	d101      	bne.n	800bc24 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800bc20:	2300      	movs	r3, #0
 800bc22:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800bc24:	69fb      	ldr	r3, [r7, #28]
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3720      	adds	r7, #32
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}
 800bc2e:	bf00      	nop
 800bc30:	05f5e100 	.word	0x05f5e100

0800bc34 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b088      	sub	sp, #32
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bc42:	2307      	movs	r3, #7
 800bc44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc46:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc56:	f107 0308 	add.w	r3, r7, #8
 800bc5a:	4619      	mov	r1, r3
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f7ff fe87 	bl	800b970 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bc62:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc66:	2107      	movs	r1, #7
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 f973 	bl	800bf54 <SDMMC_GetCmdResp1>
 800bc6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc70:	69fb      	ldr	r3, [r7, #28]
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3720      	adds	r7, #32
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}

0800bc7a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bc7a:	b580      	push	{r7, lr}
 800bc7c:	b088      	sub	sp, #32
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bc82:	2300      	movs	r3, #0
 800bc84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bc86:	2300      	movs	r3, #0
 800bc88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc98:	f107 0308 	add.w	r3, r7, #8
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f7ff fe66 	bl	800b970 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f000 fb97 	bl	800c3d8 <SDMMC_GetCmdError>
 800bcaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcac:	69fb      	ldr	r3, [r7, #28]
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3720      	adds	r7, #32
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}

0800bcb6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800bcb6:	b580      	push	{r7, lr}
 800bcb8:	b088      	sub	sp, #32
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bcbe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bcc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bcc4:	2308      	movs	r3, #8
 800bcc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bcc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bccc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bcd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bcd6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bcd8:	f107 0308 	add.w	r3, r7, #8
 800bcdc:	4619      	mov	r1, r3
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f7ff fe46 	bl	800b970 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f000 fb29 	bl	800c33c <SDMMC_GetCmdResp7>
 800bcea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcec:	69fb      	ldr	r3, [r7, #28]
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3720      	adds	r7, #32
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}

0800bcf6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bcf6:	b580      	push	{r7, lr}
 800bcf8:	b088      	sub	sp, #32
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	6078      	str	r0, [r7, #4]
 800bcfe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bd04:	2337      	movs	r3, #55	; 0x37
 800bd06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd08:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd18:	f107 0308 	add.w	r3, r7, #8
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f7ff fe26 	bl	800b970 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800bd24:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd28:	2137      	movs	r1, #55	; 0x37
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 f912 	bl	800bf54 <SDMMC_GetCmdResp1>
 800bd30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd32:	69fb      	ldr	r3, [r7, #28]
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3720      	adds	r7, #32
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b088      	sub	sp, #32
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bd4a:	2329      	movs	r3, #41	; 0x29
 800bd4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd54:	2300      	movs	r3, #0
 800bd56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd5e:	f107 0308 	add.w	r3, r7, #8
 800bd62:	4619      	mov	r1, r3
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f7ff fe03 	bl	800b970 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f000 fa2e 	bl	800c1cc <SDMMC_GetCmdResp3>
 800bd70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd72:	69fb      	ldr	r3, [r7, #28]
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3720      	adds	r7, #32
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b088      	sub	sp, #32
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bd8a:	2306      	movs	r3, #6
 800bd8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd94:	2300      	movs	r3, #0
 800bd96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd9e:	f107 0308 	add.w	r3, r7, #8
 800bda2:	4619      	mov	r1, r3
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f7ff fde3 	bl	800b970 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800bdaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdae:	2106      	movs	r1, #6
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f000 f8cf 	bl	800bf54 <SDMMC_GetCmdResp1>
 800bdb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdb8:	69fb      	ldr	r3, [r7, #28]
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3720      	adds	r7, #32
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}

0800bdc2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800bdc2:	b580      	push	{r7, lr}
 800bdc4:	b088      	sub	sp, #32
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bdce:	2333      	movs	r3, #51	; 0x33
 800bdd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bdd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bdd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bde0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bde2:	f107 0308 	add.w	r3, r7, #8
 800bde6:	4619      	mov	r1, r3
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f7ff fdc1 	bl	800b970 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800bdee:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdf2:	2133      	movs	r1, #51	; 0x33
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 f8ad 	bl	800bf54 <SDMMC_GetCmdResp1>
 800bdfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdfc:	69fb      	ldr	r3, [r7, #28]
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3720      	adds	r7, #32
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}

0800be06 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800be06:	b580      	push	{r7, lr}
 800be08:	b088      	sub	sp, #32
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800be0e:	2300      	movs	r3, #0
 800be10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800be12:	2302      	movs	r3, #2
 800be14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800be16:	f44f 7340 	mov.w	r3, #768	; 0x300
 800be1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be1c:	2300      	movs	r3, #0
 800be1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be26:	f107 0308 	add.w	r3, r7, #8
 800be2a:	4619      	mov	r1, r3
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f7ff fd9f 	bl	800b970 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f000 f980 	bl	800c138 <SDMMC_GetCmdResp2>
 800be38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be3a:	69fb      	ldr	r3, [r7, #28]
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3720      	adds	r7, #32
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}

0800be44 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b088      	sub	sp, #32
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800be52:	2309      	movs	r3, #9
 800be54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800be56:	f44f 7340 	mov.w	r3, #768	; 0x300
 800be5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be5c:	2300      	movs	r3, #0
 800be5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be66:	f107 0308 	add.w	r3, r7, #8
 800be6a:	4619      	mov	r1, r3
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f7ff fd7f 	bl	800b970 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 f960 	bl	800c138 <SDMMC_GetCmdResp2>
 800be78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be7a:	69fb      	ldr	r3, [r7, #28]
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3720      	adds	r7, #32
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}

0800be84 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b088      	sub	sp, #32
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800be8e:	2300      	movs	r3, #0
 800be90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800be92:	2303      	movs	r3, #3
 800be94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be96:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be9c:	2300      	movs	r3, #0
 800be9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bea4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bea6:	f107 0308 	add.w	r3, r7, #8
 800beaa:	4619      	mov	r1, r3
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f7ff fd5f 	bl	800b970 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800beb2:	683a      	ldr	r2, [r7, #0]
 800beb4:	2103      	movs	r1, #3
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 f9c8 	bl	800c24c <SDMMC_GetCmdResp6>
 800bebc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bebe:	69fb      	ldr	r3, [r7, #28]
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3720      	adds	r7, #32
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b088      	sub	sp, #32
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bed6:	230d      	movs	r3, #13
 800bed8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800beda:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bede:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bee0:	2300      	movs	r3, #0
 800bee2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bee8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800beea:	f107 0308 	add.w	r3, r7, #8
 800beee:	4619      	mov	r1, r3
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f7ff fd3d 	bl	800b970 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800bef6:	f241 3288 	movw	r2, #5000	; 0x1388
 800befa:	210d      	movs	r1, #13
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f000 f829 	bl	800bf54 <SDMMC_GetCmdResp1>
 800bf02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf04:	69fb      	ldr	r3, [r7, #28]
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3720      	adds	r7, #32
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800bf0e:	b580      	push	{r7, lr}
 800bf10:	b088      	sub	sp, #32
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bf16:	2300      	movs	r3, #0
 800bf18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800bf1a:	230d      	movs	r3, #13
 800bf1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf24:	2300      	movs	r3, #0
 800bf26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf2e:	f107 0308 	add.w	r3, r7, #8
 800bf32:	4619      	mov	r1, r3
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f7ff fd1b 	bl	800b970 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800bf3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf3e:	210d      	movs	r1, #13
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 f807 	bl	800bf54 <SDMMC_GetCmdResp1>
 800bf46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf48:	69fb      	ldr	r3, [r7, #28]
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3720      	adds	r7, #32
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}
	...

0800bf54 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b088      	sub	sp, #32
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	460b      	mov	r3, r1
 800bf5e:	607a      	str	r2, [r7, #4]
 800bf60:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bf62:	4b70      	ldr	r3, [pc, #448]	; (800c124 <SDMMC_GetCmdResp1+0x1d0>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4a70      	ldr	r2, [pc, #448]	; (800c128 <SDMMC_GetCmdResp1+0x1d4>)
 800bf68:	fba2 2303 	umull	r2, r3, r2, r3
 800bf6c:	0a5a      	lsrs	r2, r3, #9
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	fb02 f303 	mul.w	r3, r2, r3
 800bf74:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bf76:	69fb      	ldr	r3, [r7, #28]
 800bf78:	1e5a      	subs	r2, r3, #1
 800bf7a:	61fa      	str	r2, [r7, #28]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d102      	bne.n	800bf86 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf84:	e0c9      	b.n	800c11a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf8a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800bf8c:	69ba      	ldr	r2, [r7, #24]
 800bf8e:	4b67      	ldr	r3, [pc, #412]	; (800c12c <SDMMC_GetCmdResp1+0x1d8>)
 800bf90:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d0ef      	beq.n	800bf76 <SDMMC_GetCmdResp1+0x22>
 800bf96:	69bb      	ldr	r3, [r7, #24]
 800bf98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d1ea      	bne.n	800bf76 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfa4:	f003 0304 	and.w	r3, r3, #4
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d004      	beq.n	800bfb6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2204      	movs	r2, #4
 800bfb0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bfb2:	2304      	movs	r3, #4
 800bfb4:	e0b1      	b.n	800c11a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfba:	f003 0301 	and.w	r3, r3, #1
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d004      	beq.n	800bfcc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bfc8:	2301      	movs	r3, #1
 800bfca:	e0a6      	b.n	800c11a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	4a58      	ldr	r2, [pc, #352]	; (800c130 <SDMMC_GetCmdResp1+0x1dc>)
 800bfd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	f7ff fcf6 	bl	800b9c4 <SDMMC_GetCommandResponse>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	461a      	mov	r2, r3
 800bfdc:	7afb      	ldrb	r3, [r7, #11]
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d001      	beq.n	800bfe6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	e099      	b.n	800c11a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bfe6:	2100      	movs	r1, #0
 800bfe8:	68f8      	ldr	r0, [r7, #12]
 800bfea:	f7ff fcf8 	bl	800b9de <SDMMC_GetResponse>
 800bfee:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bff0:	697a      	ldr	r2, [r7, #20]
 800bff2:	4b50      	ldr	r3, [pc, #320]	; (800c134 <SDMMC_GetCmdResp1+0x1e0>)
 800bff4:	4013      	ands	r3, r2
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d101      	bne.n	800bffe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800bffa:	2300      	movs	r3, #0
 800bffc:	e08d      	b.n	800c11a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	2b00      	cmp	r3, #0
 800c002:	da02      	bge.n	800c00a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c004:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c008:	e087      	b.n	800c11a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c010:	2b00      	cmp	r3, #0
 800c012:	d001      	beq.n	800c018 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c014:	2340      	movs	r3, #64	; 0x40
 800c016:	e080      	b.n	800c11a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d001      	beq.n	800c026 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c022:	2380      	movs	r3, #128	; 0x80
 800c024:	e079      	b.n	800c11a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d002      	beq.n	800c036 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c030:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c034:	e071      	b.n	800c11a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d002      	beq.n	800c046 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c040:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c044:	e069      	b.n	800c11a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d002      	beq.n	800c056 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c054:	e061      	b.n	800c11a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d002      	beq.n	800c066 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c060:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c064:	e059      	b.n	800c11a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c066:	697b      	ldr	r3, [r7, #20]
 800c068:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d002      	beq.n	800c076 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c074:	e051      	b.n	800c11a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d002      	beq.n	800c086 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c080:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c084:	e049      	b.n	800c11a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d002      	beq.n	800c096 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c090:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c094:	e041      	b.n	800c11a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d002      	beq.n	800c0a6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c0a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c0a4:	e039      	b.n	800c11a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d002      	beq.n	800c0b6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c0b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c0b4:	e031      	b.n	800c11a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d002      	beq.n	800c0c6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c0c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c0c4:	e029      	b.n	800c11a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d002      	beq.n	800c0d6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c0d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c0d4:	e021      	b.n	800c11a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d002      	beq.n	800c0e6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c0e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c0e4:	e019      	b.n	800c11a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d002      	beq.n	800c0f6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c0f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c0f4:	e011      	b.n	800c11a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d002      	beq.n	800c106 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c100:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c104:	e009      	b.n	800c11a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	f003 0308 	and.w	r3, r3, #8
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d002      	beq.n	800c116 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c110:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c114:	e001      	b.n	800c11a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c116:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3720      	adds	r7, #32
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	24000008 	.word	0x24000008
 800c128:	10624dd3 	.word	0x10624dd3
 800c12c:	00200045 	.word	0x00200045
 800c130:	002000c5 	.word	0x002000c5
 800c134:	fdffe008 	.word	0xfdffe008

0800c138 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c138:	b480      	push	{r7}
 800c13a:	b085      	sub	sp, #20
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c140:	4b1f      	ldr	r3, [pc, #124]	; (800c1c0 <SDMMC_GetCmdResp2+0x88>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a1f      	ldr	r2, [pc, #124]	; (800c1c4 <SDMMC_GetCmdResp2+0x8c>)
 800c146:	fba2 2303 	umull	r2, r3, r2, r3
 800c14a:	0a5b      	lsrs	r3, r3, #9
 800c14c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c150:	fb02 f303 	mul.w	r3, r2, r3
 800c154:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	1e5a      	subs	r2, r3, #1
 800c15a:	60fa      	str	r2, [r7, #12]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d102      	bne.n	800c166 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c160:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c164:	e026      	b.n	800c1b4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c16a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c172:	2b00      	cmp	r3, #0
 800c174:	d0ef      	beq.n	800c156 <SDMMC_GetCmdResp2+0x1e>
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d1ea      	bne.n	800c156 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c184:	f003 0304 	and.w	r3, r3, #4
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d004      	beq.n	800c196 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2204      	movs	r2, #4
 800c190:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c192:	2304      	movs	r3, #4
 800c194:	e00e      	b.n	800c1b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c19a:	f003 0301 	and.w	r3, r3, #1
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d004      	beq.n	800c1ac <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	e003      	b.n	800c1b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	4a06      	ldr	r2, [pc, #24]	; (800c1c8 <SDMMC_GetCmdResp2+0x90>)
 800c1b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c1b2:	2300      	movs	r3, #0
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3714      	adds	r7, #20
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr
 800c1c0:	24000008 	.word	0x24000008
 800c1c4:	10624dd3 	.word	0x10624dd3
 800c1c8:	002000c5 	.word	0x002000c5

0800c1cc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b085      	sub	sp, #20
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c1d4:	4b1a      	ldr	r3, [pc, #104]	; (800c240 <SDMMC_GetCmdResp3+0x74>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4a1a      	ldr	r2, [pc, #104]	; (800c244 <SDMMC_GetCmdResp3+0x78>)
 800c1da:	fba2 2303 	umull	r2, r3, r2, r3
 800c1de:	0a5b      	lsrs	r3, r3, #9
 800c1e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1e4:	fb02 f303 	mul.w	r3, r2, r3
 800c1e8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	1e5a      	subs	r2, r3, #1
 800c1ee:	60fa      	str	r2, [r7, #12]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d102      	bne.n	800c1fa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c1f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c1f8:	e01b      	b.n	800c232 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1fe:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c206:	2b00      	cmp	r3, #0
 800c208:	d0ef      	beq.n	800c1ea <SDMMC_GetCmdResp3+0x1e>
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c210:	2b00      	cmp	r3, #0
 800c212:	d1ea      	bne.n	800c1ea <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c218:	f003 0304 	and.w	r3, r3, #4
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d004      	beq.n	800c22a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2204      	movs	r2, #4
 800c224:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c226:	2304      	movs	r3, #4
 800c228:	e003      	b.n	800c232 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	4a06      	ldr	r2, [pc, #24]	; (800c248 <SDMMC_GetCmdResp3+0x7c>)
 800c22e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c230:	2300      	movs	r3, #0
}
 800c232:	4618      	mov	r0, r3
 800c234:	3714      	adds	r7, #20
 800c236:	46bd      	mov	sp, r7
 800c238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23c:	4770      	bx	lr
 800c23e:	bf00      	nop
 800c240:	24000008 	.word	0x24000008
 800c244:	10624dd3 	.word	0x10624dd3
 800c248:	002000c5 	.word	0x002000c5

0800c24c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b088      	sub	sp, #32
 800c250:	af00      	add	r7, sp, #0
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	460b      	mov	r3, r1
 800c256:	607a      	str	r2, [r7, #4]
 800c258:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c25a:	4b35      	ldr	r3, [pc, #212]	; (800c330 <SDMMC_GetCmdResp6+0xe4>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	4a35      	ldr	r2, [pc, #212]	; (800c334 <SDMMC_GetCmdResp6+0xe8>)
 800c260:	fba2 2303 	umull	r2, r3, r2, r3
 800c264:	0a5b      	lsrs	r3, r3, #9
 800c266:	f241 3288 	movw	r2, #5000	; 0x1388
 800c26a:	fb02 f303 	mul.w	r3, r2, r3
 800c26e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c270:	69fb      	ldr	r3, [r7, #28]
 800c272:	1e5a      	subs	r2, r3, #1
 800c274:	61fa      	str	r2, [r7, #28]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d102      	bne.n	800c280 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c27a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c27e:	e052      	b.n	800c326 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c284:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d0ef      	beq.n	800c270 <SDMMC_GetCmdResp6+0x24>
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c296:	2b00      	cmp	r3, #0
 800c298:	d1ea      	bne.n	800c270 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c29e:	f003 0304 	and.w	r3, r3, #4
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d004      	beq.n	800c2b0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2204      	movs	r2, #4
 800c2aa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c2ac:	2304      	movs	r3, #4
 800c2ae:	e03a      	b.n	800c326 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2b4:	f003 0301 	and.w	r3, r3, #1
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d004      	beq.n	800c2c6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2201      	movs	r2, #1
 800c2c0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	e02f      	b.n	800c326 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c2c6:	68f8      	ldr	r0, [r7, #12]
 800c2c8:	f7ff fb7c 	bl	800b9c4 <SDMMC_GetCommandResponse>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	7afb      	ldrb	r3, [r7, #11]
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d001      	beq.n	800c2da <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	e025      	b.n	800c326 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	4a16      	ldr	r2, [pc, #88]	; (800c338 <SDMMC_GetCmdResp6+0xec>)
 800c2de:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c2e0:	2100      	movs	r1, #0
 800c2e2:	68f8      	ldr	r0, [r7, #12]
 800c2e4:	f7ff fb7b 	bl	800b9de <SDMMC_GetResponse>
 800c2e8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d106      	bne.n	800c302 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	0c1b      	lsrs	r3, r3, #16
 800c2f8:	b29a      	uxth	r2, r3
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c2fe:	2300      	movs	r3, #0
 800c300:	e011      	b.n	800c326 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d002      	beq.n	800c312 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c30c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c310:	e009      	b.n	800c326 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d002      	beq.n	800c322 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c31c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c320:	e001      	b.n	800c326 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c322:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c326:	4618      	mov	r0, r3
 800c328:	3720      	adds	r7, #32
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	bf00      	nop
 800c330:	24000008 	.word	0x24000008
 800c334:	10624dd3 	.word	0x10624dd3
 800c338:	002000c5 	.word	0x002000c5

0800c33c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b085      	sub	sp, #20
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c344:	4b22      	ldr	r3, [pc, #136]	; (800c3d0 <SDMMC_GetCmdResp7+0x94>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4a22      	ldr	r2, [pc, #136]	; (800c3d4 <SDMMC_GetCmdResp7+0x98>)
 800c34a:	fba2 2303 	umull	r2, r3, r2, r3
 800c34e:	0a5b      	lsrs	r3, r3, #9
 800c350:	f241 3288 	movw	r2, #5000	; 0x1388
 800c354:	fb02 f303 	mul.w	r3, r2, r3
 800c358:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	1e5a      	subs	r2, r3, #1
 800c35e:	60fa      	str	r2, [r7, #12]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d102      	bne.n	800c36a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c364:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c368:	e02c      	b.n	800c3c4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c36e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c376:	2b00      	cmp	r3, #0
 800c378:	d0ef      	beq.n	800c35a <SDMMC_GetCmdResp7+0x1e>
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c380:	2b00      	cmp	r3, #0
 800c382:	d1ea      	bne.n	800c35a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c388:	f003 0304 	and.w	r3, r3, #4
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d004      	beq.n	800c39a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2204      	movs	r2, #4
 800c394:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c396:	2304      	movs	r3, #4
 800c398:	e014      	b.n	800c3c4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c39e:	f003 0301 	and.w	r3, r3, #1
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d004      	beq.n	800c3b0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	e009      	b.n	800c3c4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d002      	beq.n	800c3c2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2240      	movs	r2, #64	; 0x40
 800c3c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c3c2:	2300      	movs	r3, #0

}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3714      	adds	r7, #20
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr
 800c3d0:	24000008 	.word	0x24000008
 800c3d4:	10624dd3 	.word	0x10624dd3

0800c3d8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b085      	sub	sp, #20
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c3e0:	4b11      	ldr	r3, [pc, #68]	; (800c428 <SDMMC_GetCmdError+0x50>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4a11      	ldr	r2, [pc, #68]	; (800c42c <SDMMC_GetCmdError+0x54>)
 800c3e6:	fba2 2303 	umull	r2, r3, r2, r3
 800c3ea:	0a5b      	lsrs	r3, r3, #9
 800c3ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3f0:	fb02 f303 	mul.w	r3, r2, r3
 800c3f4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	1e5a      	subs	r2, r3, #1
 800c3fa:	60fa      	str	r2, [r7, #12]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d102      	bne.n	800c406 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c400:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c404:	e009      	b.n	800c41a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c40a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d0f1      	beq.n	800c3f6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	4a06      	ldr	r2, [pc, #24]	; (800c430 <SDMMC_GetCmdError+0x58>)
 800c416:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800c418:	2300      	movs	r3, #0
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3714      	adds	r7, #20
 800c41e:	46bd      	mov	sp, r7
 800c420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c424:	4770      	bx	lr
 800c426:	bf00      	nop
 800c428:	24000008 	.word	0x24000008
 800c42c:	10624dd3 	.word	0x10624dd3
 800c430:	002000c5 	.word	0x002000c5

0800c434 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c438:	4904      	ldr	r1, [pc, #16]	; (800c44c <MX_FATFS_Init+0x18>)
 800c43a:	4805      	ldr	r0, [pc, #20]	; (800c450 <MX_FATFS_Init+0x1c>)
 800c43c:	f003 f876 	bl	800f52c <FATFS_LinkDriver>
 800c440:	4603      	mov	r3, r0
 800c442:	461a      	mov	r2, r3
 800c444:	4b03      	ldr	r3, [pc, #12]	; (800c454 <MX_FATFS_Init+0x20>)
 800c446:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c448:	bf00      	nop
 800c44a:	bd80      	pop	{r7, pc}
 800c44c:	240002f8 	.word	0x240002f8
 800c450:	080107d0 	.word	0x080107d0
 800c454:	240002f4 	.word	0x240002f4

0800c458 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c458:	b480      	push	{r7}
 800c45a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c45c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c45e:	4618      	mov	r0, r3
 800c460:	46bd      	mov	sp, r7
 800c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c466:	4770      	bx	lr

0800c468 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b082      	sub	sp, #8
 800c46c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c46e:	2300      	movs	r3, #0
 800c470:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c472:	f000 f885 	bl	800c580 <BSP_SD_IsDetected>
 800c476:	4603      	mov	r3, r0
 800c478:	2b01      	cmp	r3, #1
 800c47a:	d001      	beq.n	800c480 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c47c:	2302      	movs	r3, #2
 800c47e:	e012      	b.n	800c4a6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c480:	480b      	ldr	r0, [pc, #44]	; (800c4b0 <BSP_SD_Init+0x48>)
 800c482:	f7fd fc0d 	bl	8009ca0 <HAL_SD_Init>
 800c486:	4603      	mov	r3, r0
 800c488:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c48a:	79fb      	ldrb	r3, [r7, #7]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d109      	bne.n	800c4a4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c490:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c494:	4806      	ldr	r0, [pc, #24]	; (800c4b0 <BSP_SD_Init+0x48>)
 800c496:	f7fe fac3 	bl	800aa20 <HAL_SD_ConfigWideBusOperation>
 800c49a:	4603      	mov	r3, r0
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d001      	beq.n	800c4a4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c4a4:	79fb      	ldrb	r3, [r7, #7]
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3708      	adds	r7, #8
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	240001c8 	.word	0x240001c8

0800c4b4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b086      	sub	sp, #24
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	60f8      	str	r0, [r7, #12]
 800c4bc:	60b9      	str	r1, [r7, #8]
 800c4be:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	68ba      	ldr	r2, [r7, #8]
 800c4c8:	68f9      	ldr	r1, [r7, #12]
 800c4ca:	4806      	ldr	r0, [pc, #24]	; (800c4e4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800c4cc:	f7fd fd08 	bl	8009ee0 <HAL_SD_ReadBlocks_DMA>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d001      	beq.n	800c4da <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c4da:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3718      	adds	r7, #24
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}
 800c4e4:	240001c8 	.word	0x240001c8

0800c4e8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b086      	sub	sp, #24
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	60f8      	str	r0, [r7, #12]
 800c4f0:	60b9      	str	r1, [r7, #8]
 800c4f2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	68ba      	ldr	r2, [r7, #8]
 800c4fc:	68f9      	ldr	r1, [r7, #12]
 800c4fe:	4806      	ldr	r0, [pc, #24]	; (800c518 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c500:	f7fd fd96 	bl	800a030 <HAL_SD_WriteBlocks_DMA>
 800c504:	4603      	mov	r3, r0
 800c506:	2b00      	cmp	r3, #0
 800c508:	d001      	beq.n	800c50e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c50a:	2301      	movs	r3, #1
 800c50c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c50e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c510:	4618      	mov	r0, r3
 800c512:	3718      	adds	r7, #24
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}
 800c518:	240001c8 	.word	0x240001c8

0800c51c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c520:	4805      	ldr	r0, [pc, #20]	; (800c538 <BSP_SD_GetCardState+0x1c>)
 800c522:	f7fe fb8f 	bl	800ac44 <HAL_SD_GetCardState>
 800c526:	4603      	mov	r3, r0
 800c528:	2b04      	cmp	r3, #4
 800c52a:	bf14      	ite	ne
 800c52c:	2301      	movne	r3, #1
 800c52e:	2300      	moveq	r3, #0
 800c530:	b2db      	uxtb	r3, r3
}
 800c532:	4618      	mov	r0, r3
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	240001c8 	.word	0x240001c8

0800c53c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c544:	6879      	ldr	r1, [r7, #4]
 800c546:	4803      	ldr	r0, [pc, #12]	; (800c554 <BSP_SD_GetCardInfo+0x18>)
 800c548:	f7fe fa3e 	bl	800a9c8 <HAL_SD_GetCardInfo>
}
 800c54c:	bf00      	nop
 800c54e:	3708      	adds	r7, #8
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}
 800c554:	240001c8 	.word	0x240001c8

0800c558 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800c560:	f000 f9a0 	bl	800c8a4 <BSP_SD_WriteCpltCallback>
}
 800c564:	bf00      	nop
 800c566:	3708      	adds	r7, #8
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b082      	sub	sp, #8
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c574:	f000 f9a2 	bl	800c8bc <BSP_SD_ReadCpltCallback>
}
 800c578:	bf00      	nop
 800c57a:	3708      	adds	r7, #8
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b082      	sub	sp, #8
 800c584:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c586:	2301      	movs	r3, #1
 800c588:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c58a:	f000 f80b 	bl	800c5a4 <BSP_PlatformIsDetected>
 800c58e:	4603      	mov	r3, r0
 800c590:	2b00      	cmp	r3, #0
 800c592:	d101      	bne.n	800c598 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c594:	2300      	movs	r3, #0
 800c596:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c598:	79fb      	ldrb	r3, [r7, #7]
 800c59a:	b2db      	uxtb	r3, r3
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3708      	adds	r7, #8
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c5ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c5b2:	4806      	ldr	r0, [pc, #24]	; (800c5cc <BSP_PlatformIsDetected+0x28>)
 800c5b4:	f7f8 fa42 	bl	8004a3c <HAL_GPIO_ReadPin>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d001      	beq.n	800c5c2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c5c2:	79fb      	ldrb	r3, [r7, #7]
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3708      	adds	r7, #8
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	58021800 	.word	0x58021800

0800c5d0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b084      	sub	sp, #16
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800c5d8:	f7f5 fb3e 	bl	8001c58 <HAL_GetTick>
 800c5dc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800c5de:	e006      	b.n	800c5ee <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c5e0:	f7ff ff9c 	bl	800c51c <BSP_SD_GetCardState>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d101      	bne.n	800c5ee <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	e009      	b.n	800c602 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800c5ee:	f7f5 fb33 	bl	8001c58 <HAL_GetTick>
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	1ad3      	subs	r3, r2, r3
 800c5f8:	687a      	ldr	r2, [r7, #4]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d8f0      	bhi.n	800c5e0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c5fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c602:	4618      	mov	r0, r3
 800c604:	3710      	adds	r7, #16
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}
	...

0800c60c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b082      	sub	sp, #8
 800c610:	af00      	add	r7, sp, #0
 800c612:	4603      	mov	r3, r0
 800c614:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c616:	4b0b      	ldr	r3, [pc, #44]	; (800c644 <SD_CheckStatus+0x38>)
 800c618:	2201      	movs	r2, #1
 800c61a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c61c:	f7ff ff7e 	bl	800c51c <BSP_SD_GetCardState>
 800c620:	4603      	mov	r3, r0
 800c622:	2b00      	cmp	r3, #0
 800c624:	d107      	bne.n	800c636 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c626:	4b07      	ldr	r3, [pc, #28]	; (800c644 <SD_CheckStatus+0x38>)
 800c628:	781b      	ldrb	r3, [r3, #0]
 800c62a:	b2db      	uxtb	r3, r3
 800c62c:	f023 0301 	bic.w	r3, r3, #1
 800c630:	b2da      	uxtb	r2, r3
 800c632:	4b04      	ldr	r3, [pc, #16]	; (800c644 <SD_CheckStatus+0x38>)
 800c634:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c636:	4b03      	ldr	r3, [pc, #12]	; (800c644 <SD_CheckStatus+0x38>)
 800c638:	781b      	ldrb	r3, [r3, #0]
 800c63a:	b2db      	uxtb	r3, r3
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3708      	adds	r7, #8
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}
 800c644:	24000015 	.word	0x24000015

0800c648 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b082      	sub	sp, #8
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	4603      	mov	r3, r0
 800c650:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c652:	f7ff ff09 	bl	800c468 <BSP_SD_Init>
 800c656:	4603      	mov	r3, r0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d107      	bne.n	800c66c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800c65c:	79fb      	ldrb	r3, [r7, #7]
 800c65e:	4618      	mov	r0, r3
 800c660:	f7ff ffd4 	bl	800c60c <SD_CheckStatus>
 800c664:	4603      	mov	r3, r0
 800c666:	461a      	mov	r2, r3
 800c668:	4b04      	ldr	r3, [pc, #16]	; (800c67c <SD_initialize+0x34>)
 800c66a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c66c:	4b03      	ldr	r3, [pc, #12]	; (800c67c <SD_initialize+0x34>)
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	b2db      	uxtb	r3, r3
}
 800c672:	4618      	mov	r0, r3
 800c674:	3708      	adds	r7, #8
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop
 800c67c:	24000015 	.word	0x24000015

0800c680 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	4603      	mov	r3, r0
 800c688:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c68a:	79fb      	ldrb	r3, [r7, #7]
 800c68c:	4618      	mov	r0, r3
 800c68e:	f7ff ffbd 	bl	800c60c <SD_CheckStatus>
 800c692:	4603      	mov	r3, r0
}
 800c694:	4618      	mov	r0, r3
 800c696:	3708      	adds	r7, #8
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b086      	sub	sp, #24
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	60b9      	str	r1, [r7, #8]
 800c6a4:	607a      	str	r2, [r7, #4]
 800c6a6:	603b      	str	r3, [r7, #0]
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c6b0:	f247 5030 	movw	r0, #30000	; 0x7530
 800c6b4:	f7ff ff8c 	bl	800c5d0 <SD_CheckStatusWithTimeout>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	da01      	bge.n	800c6c2 <SD_read+0x26>
  {
    return res;
 800c6be:	7dfb      	ldrb	r3, [r7, #23]
 800c6c0:	e03b      	b.n	800c73a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800c6c2:	683a      	ldr	r2, [r7, #0]
 800c6c4:	6879      	ldr	r1, [r7, #4]
 800c6c6:	68b8      	ldr	r0, [r7, #8]
 800c6c8:	f7ff fef4 	bl	800c4b4 <BSP_SD_ReadBlocks_DMA>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d132      	bne.n	800c738 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800c6d2:	4b1c      	ldr	r3, [pc, #112]	; (800c744 <SD_read+0xa8>)
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800c6d8:	f7f5 fabe 	bl	8001c58 <HAL_GetTick>
 800c6dc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c6de:	bf00      	nop
 800c6e0:	4b18      	ldr	r3, [pc, #96]	; (800c744 <SD_read+0xa8>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d108      	bne.n	800c6fa <SD_read+0x5e>
 800c6e8:	f7f5 fab6 	bl	8001c58 <HAL_GetTick>
 800c6ec:	4602      	mov	r2, r0
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	1ad3      	subs	r3, r2, r3
 800c6f2:	f247 522f 	movw	r2, #29999	; 0x752f
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d9f2      	bls.n	800c6e0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800c6fa:	4b12      	ldr	r3, [pc, #72]	; (800c744 <SD_read+0xa8>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d102      	bne.n	800c708 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800c702:	2301      	movs	r3, #1
 800c704:	75fb      	strb	r3, [r7, #23]
 800c706:	e017      	b.n	800c738 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800c708:	4b0e      	ldr	r3, [pc, #56]	; (800c744 <SD_read+0xa8>)
 800c70a:	2200      	movs	r2, #0
 800c70c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c70e:	f7f5 faa3 	bl	8001c58 <HAL_GetTick>
 800c712:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c714:	e007      	b.n	800c726 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c716:	f7ff ff01 	bl	800c51c <BSP_SD_GetCardState>
 800c71a:	4603      	mov	r3, r0
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d102      	bne.n	800c726 <SD_read+0x8a>
          {
            res = RES_OK;
 800c720:	2300      	movs	r3, #0
 800c722:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800c724:	e008      	b.n	800c738 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c726:	f7f5 fa97 	bl	8001c58 <HAL_GetTick>
 800c72a:	4602      	mov	r2, r0
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	1ad3      	subs	r3, r2, r3
 800c730:	f247 522f 	movw	r2, #29999	; 0x752f
 800c734:	4293      	cmp	r3, r2
 800c736:	d9ee      	bls.n	800c716 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800c738:	7dfb      	ldrb	r3, [r7, #23]
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3718      	adds	r7, #24
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop
 800c744:	24000300 	.word	0x24000300

0800c748 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b086      	sub	sp, #24
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	60b9      	str	r1, [r7, #8]
 800c750:	607a      	str	r2, [r7, #4]
 800c752:	603b      	str	r3, [r7, #0]
 800c754:	4603      	mov	r3, r0
 800c756:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c758:	2301      	movs	r3, #1
 800c75a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800c75c:	4b24      	ldr	r3, [pc, #144]	; (800c7f0 <SD_write+0xa8>)
 800c75e:	2200      	movs	r2, #0
 800c760:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c762:	f247 5030 	movw	r0, #30000	; 0x7530
 800c766:	f7ff ff33 	bl	800c5d0 <SD_CheckStatusWithTimeout>
 800c76a:	4603      	mov	r3, r0
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	da01      	bge.n	800c774 <SD_write+0x2c>
  {
    return res;
 800c770:	7dfb      	ldrb	r3, [r7, #23]
 800c772:	e038      	b.n	800c7e6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c774:	683a      	ldr	r2, [r7, #0]
 800c776:	6879      	ldr	r1, [r7, #4]
 800c778:	68b8      	ldr	r0, [r7, #8]
 800c77a:	f7ff feb5 	bl	800c4e8 <BSP_SD_WriteBlocks_DMA>
 800c77e:	4603      	mov	r3, r0
 800c780:	2b00      	cmp	r3, #0
 800c782:	d12f      	bne.n	800c7e4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800c784:	f7f5 fa68 	bl	8001c58 <HAL_GetTick>
 800c788:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c78a:	bf00      	nop
 800c78c:	4b18      	ldr	r3, [pc, #96]	; (800c7f0 <SD_write+0xa8>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d108      	bne.n	800c7a6 <SD_write+0x5e>
 800c794:	f7f5 fa60 	bl	8001c58 <HAL_GetTick>
 800c798:	4602      	mov	r2, r0
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	1ad3      	subs	r3, r2, r3
 800c79e:	f247 522f 	movw	r2, #29999	; 0x752f
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d9f2      	bls.n	800c78c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800c7a6:	4b12      	ldr	r3, [pc, #72]	; (800c7f0 <SD_write+0xa8>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d102      	bne.n	800c7b4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	75fb      	strb	r3, [r7, #23]
 800c7b2:	e017      	b.n	800c7e4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800c7b4:	4b0e      	ldr	r3, [pc, #56]	; (800c7f0 <SD_write+0xa8>)
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c7ba:	f7f5 fa4d 	bl	8001c58 <HAL_GetTick>
 800c7be:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c7c0:	e007      	b.n	800c7d2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c7c2:	f7ff feab 	bl	800c51c <BSP_SD_GetCardState>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d102      	bne.n	800c7d2 <SD_write+0x8a>
          {
            res = RES_OK;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	75fb      	strb	r3, [r7, #23]
            break;
 800c7d0:	e008      	b.n	800c7e4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c7d2:	f7f5 fa41 	bl	8001c58 <HAL_GetTick>
 800c7d6:	4602      	mov	r2, r0
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	1ad3      	subs	r3, r2, r3
 800c7dc:	f247 522f 	movw	r2, #29999	; 0x752f
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d9ee      	bls.n	800c7c2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800c7e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3718      	adds	r7, #24
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}
 800c7ee:	bf00      	nop
 800c7f0:	240002fc 	.word	0x240002fc

0800c7f4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b08c      	sub	sp, #48	; 0x30
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	603a      	str	r2, [r7, #0]
 800c7fe:	71fb      	strb	r3, [r7, #7]
 800c800:	460b      	mov	r3, r1
 800c802:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c804:	2301      	movs	r3, #1
 800c806:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c80a:	4b25      	ldr	r3, [pc, #148]	; (800c8a0 <SD_ioctl+0xac>)
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	f003 0301 	and.w	r3, r3, #1
 800c814:	2b00      	cmp	r3, #0
 800c816:	d001      	beq.n	800c81c <SD_ioctl+0x28>
 800c818:	2303      	movs	r3, #3
 800c81a:	e03c      	b.n	800c896 <SD_ioctl+0xa2>

  switch (cmd)
 800c81c:	79bb      	ldrb	r3, [r7, #6]
 800c81e:	2b03      	cmp	r3, #3
 800c820:	d834      	bhi.n	800c88c <SD_ioctl+0x98>
 800c822:	a201      	add	r2, pc, #4	; (adr r2, 800c828 <SD_ioctl+0x34>)
 800c824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c828:	0800c839 	.word	0x0800c839
 800c82c:	0800c841 	.word	0x0800c841
 800c830:	0800c859 	.word	0x0800c859
 800c834:	0800c873 	.word	0x0800c873
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c838:	2300      	movs	r3, #0
 800c83a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c83e:	e028      	b.n	800c892 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c840:	f107 0308 	add.w	r3, r7, #8
 800c844:	4618      	mov	r0, r3
 800c846:	f7ff fe79 	bl	800c53c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c84a:	6a3a      	ldr	r2, [r7, #32]
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c850:	2300      	movs	r3, #0
 800c852:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c856:	e01c      	b.n	800c892 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c858:	f107 0308 	add.w	r3, r7, #8
 800c85c:	4618      	mov	r0, r3
 800c85e:	f7ff fe6d 	bl	800c53c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c864:	b29a      	uxth	r2, r3
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c86a:	2300      	movs	r3, #0
 800c86c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c870:	e00f      	b.n	800c892 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c872:	f107 0308 	add.w	r3, r7, #8
 800c876:	4618      	mov	r0, r3
 800c878:	f7ff fe60 	bl	800c53c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87e:	0a5a      	lsrs	r2, r3, #9
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c884:	2300      	movs	r3, #0
 800c886:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c88a:	e002      	b.n	800c892 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c88c:	2304      	movs	r3, #4
 800c88e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c892:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c896:	4618      	mov	r0, r3
 800c898:	3730      	adds	r7, #48	; 0x30
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	bf00      	nop
 800c8a0:	24000015 	.word	0x24000015

0800c8a4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800c8a8:	4b03      	ldr	r3, [pc, #12]	; (800c8b8 <BSP_SD_WriteCpltCallback+0x14>)
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	601a      	str	r2, [r3, #0]
}
 800c8ae:	bf00      	nop
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b6:	4770      	bx	lr
 800c8b8:	240002fc 	.word	0x240002fc

0800c8bc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800c8c0:	4b03      	ldr	r3, [pc, #12]	; (800c8d0 <BSP_SD_ReadCpltCallback+0x14>)
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	601a      	str	r2, [r3, #0]
}
 800c8c6:	bf00      	nop
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr
 800c8d0:	24000300 	.word	0x24000300

0800c8d4 <logger_init>:

static struct line_buffer_t __attribute__((section(".sdram"))) line_buffer;
static char __attribute__((section(".sdram"))) msg_parsed[LOGGER_PARSE_BUFFER_SIZE];

void logger_init(void)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	af00      	add	r7, sp, #0
	memset(&line_buffer, 0, sizeof(line_buffer));
 800c8d8:	2259      	movs	r2, #89	; 0x59
 800c8da:	2100      	movs	r1, #0
 800c8dc:	4802      	ldr	r0, [pc, #8]	; (800c8e8 <logger_init+0x14>)
 800c8de:	f002 ff4d 	bl	800f77c <memset>
}
 800c8e2:	bf00      	nop
 800c8e4:	bd80      	pop	{r7, pc}
 800c8e6:	bf00      	nop
 800c8e8:	c001043c 	.word	0xc001043c

0800c8ec <logger_log>:

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wformat-truncation"

void logger_log(const char *msg, ...)
{
 800c8ec:	b40f      	push	{r0, r1, r2, r3}
 800c8ee:	b580      	push	{r7, lr}
 800c8f0:	b086      	sub	sp, #24
 800c8f2:	af00      	add	r7, sp, #0
	va_list arg_list;

	va_start(arg_list, msg);
 800c8f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8f8:	603b      	str	r3, [r7, #0]
	int length = vsnprintf(msg_parsed, sizeof(msg_parsed), msg, arg_list);
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	6a3a      	ldr	r2, [r7, #32]
 800c8fe:	2180      	movs	r1, #128	; 0x80
 800c900:	4859      	ldr	r0, [pc, #356]	; (800ca68 <logger_log+0x17c>)
 800c902:	f002 ffa3 	bl	800f84c <vsniprintf>
 800c906:	60f8      	str	r0, [r7, #12]
	va_end(arg_list);

	if (length == 0) {
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	f000 80a4 	beq.w	800ca58 <logger_log+0x16c>
		return;
	}

	size_t total_copied = 0;
 800c910:	2300      	movs	r3, #0
 800c912:	617b      	str	r3, [r7, #20]
	while (total_copied < length) {
 800c914:	e07c      	b.n	800ca10 <logger_log+0x124>
		if (line_buffer.lines_used < LOGGER_LINES) {
 800c916:	4b55      	ldr	r3, [pc, #340]	; (800ca6c <logger_log+0x180>)
 800c918:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c91c:	2b03      	cmp	r3, #3
 800c91e:	d845      	bhi.n	800c9ac <logger_log+0xc0>
			snprintf(&line_buffer.data[line_buffer.lines_used * LOGGER_LINE_SIZE], LOGGER_LINE_SIZE, "%s", &msg_parsed[total_copied]);
 800c920:	4b52      	ldr	r3, [pc, #328]	; (800ca6c <logger_log+0x180>)
 800c922:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c926:	461a      	mov	r2, r3
 800c928:	2316      	movs	r3, #22
 800c92a:	fb02 f303 	mul.w	r3, r2, r3
 800c92e:	4a4f      	ldr	r2, [pc, #316]	; (800ca6c <logger_log+0x180>)
 800c930:	1898      	adds	r0, r3, r2
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	4a4c      	ldr	r2, [pc, #304]	; (800ca68 <logger_log+0x17c>)
 800c936:	4413      	add	r3, r2
 800c938:	4a4d      	ldr	r2, [pc, #308]	; (800ca70 <logger_log+0x184>)
 800c93a:	2116      	movs	r1, #22
 800c93c:	f002 ff26 	bl	800f78c <sniprintf>

			const size_t copied = MIN(LOGGER_LINE_LENGTH, strlen(&msg_parsed[total_copied]));
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	4a49      	ldr	r2, [pc, #292]	; (800ca68 <logger_log+0x17c>)
 800c944:	4413      	add	r3, r2
 800c946:	4618      	mov	r0, r3
 800c948:	f7f3 fcca 	bl	80002e0 <strlen>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b15      	cmp	r3, #21
 800c950:	d807      	bhi.n	800c962 <logger_log+0x76>
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	4a44      	ldr	r2, [pc, #272]	; (800ca68 <logger_log+0x17c>)
 800c956:	4413      	add	r3, r2
 800c958:	4618      	mov	r0, r3
 800c95a:	f7f3 fcc1 	bl	80002e0 <strlen>
 800c95e:	4603      	mov	r3, r0
 800c960:	e000      	b.n	800c964 <logger_log+0x78>
 800c962:	2315      	movs	r3, #21
 800c964:	607b      	str	r3, [r7, #4]
			if (copied < LOGGER_LINE_LENGTH) {
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2b14      	cmp	r3, #20
 800c96a:	d812      	bhi.n	800c992 <logger_log+0xa6>
				memset(&line_buffer.data[line_buffer.lines_used * LOGGER_LINE_SIZE + copied], ' ', LOGGER_LINE_LENGTH - copied);
 800c96c:	4b3f      	ldr	r3, [pc, #252]	; (800ca6c <logger_log+0x180>)
 800c96e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c972:	461a      	mov	r2, r3
 800c974:	2316      	movs	r3, #22
 800c976:	fb02 f303 	mul.w	r3, r2, r3
 800c97a:	461a      	mov	r2, r3
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	4413      	add	r3, r2
 800c980:	4a3a      	ldr	r2, [pc, #232]	; (800ca6c <logger_log+0x180>)
 800c982:	1898      	adds	r0, r3, r2
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f1c3 0315 	rsb	r3, r3, #21
 800c98a:	461a      	mov	r2, r3
 800c98c:	2120      	movs	r1, #32
 800c98e:	f002 fef5 	bl	800f77c <memset>
			}
			total_copied += copied;
 800c992:	697a      	ldr	r2, [r7, #20]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	4413      	add	r3, r2
 800c998:	617b      	str	r3, [r7, #20]

			++line_buffer.lines_used;
 800c99a:	4b34      	ldr	r3, [pc, #208]	; (800ca6c <logger_log+0x180>)
 800c99c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	b2da      	uxtb	r2, r3
 800c9a4:	4b31      	ldr	r3, [pc, #196]	; (800ca6c <logger_log+0x180>)
 800c9a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800c9aa:	e031      	b.n	800ca10 <logger_log+0x124>
		}
		else {
			memmove(&line_buffer.data[0], &line_buffer.data[LOGGER_LINE_SIZE], (LOGGER_LINES - 1) * LOGGER_LINE_SIZE); // Move all lines one line up
 800c9ac:	2242      	movs	r2, #66	; 0x42
 800c9ae:	4931      	ldr	r1, [pc, #196]	; (800ca74 <logger_log+0x188>)
 800c9b0:	482e      	ldr	r0, [pc, #184]	; (800ca6c <logger_log+0x180>)
 800c9b2:	f002 fec9 	bl	800f748 <memmove>
			snprintf(&line_buffer.data[(LOGGER_LINES - 1) * LOGGER_LINE_SIZE], LOGGER_LINE_SIZE, "%s", &msg_parsed[total_copied]); // Write to last line
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	4a2b      	ldr	r2, [pc, #172]	; (800ca68 <logger_log+0x17c>)
 800c9ba:	4413      	add	r3, r2
 800c9bc:	4a2c      	ldr	r2, [pc, #176]	; (800ca70 <logger_log+0x184>)
 800c9be:	2116      	movs	r1, #22
 800c9c0:	482d      	ldr	r0, [pc, #180]	; (800ca78 <logger_log+0x18c>)
 800c9c2:	f002 fee3 	bl	800f78c <sniprintf>

			const size_t copied = MIN(LOGGER_LINE_LENGTH, strlen(&msg_parsed[total_copied]));
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	4a27      	ldr	r2, [pc, #156]	; (800ca68 <logger_log+0x17c>)
 800c9ca:	4413      	add	r3, r2
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f7f3 fc87 	bl	80002e0 <strlen>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	2b15      	cmp	r3, #21
 800c9d6:	d807      	bhi.n	800c9e8 <logger_log+0xfc>
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	4a23      	ldr	r2, [pc, #140]	; (800ca68 <logger_log+0x17c>)
 800c9dc:	4413      	add	r3, r2
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7f3 fc7e 	bl	80002e0 <strlen>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	e000      	b.n	800c9ea <logger_log+0xfe>
 800c9e8:	2315      	movs	r3, #21
 800c9ea:	60bb      	str	r3, [r7, #8]
			if (copied < LOGGER_LINE_LENGTH) {
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	2b14      	cmp	r3, #20
 800c9f0:	d80a      	bhi.n	800ca08 <logger_log+0x11c>
				memset(&line_buffer.data[(LOGGER_LINES - 1) * LOGGER_LINE_SIZE + copied], ' ', LOGGER_LINE_LENGTH - copied);
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	3342      	adds	r3, #66	; 0x42
 800c9f6:	4a1d      	ldr	r2, [pc, #116]	; (800ca6c <logger_log+0x180>)
 800c9f8:	1898      	adds	r0, r3, r2
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	f1c3 0315 	rsb	r3, r3, #21
 800ca00:	461a      	mov	r2, r3
 800ca02:	2120      	movs	r1, #32
 800ca04:	f002 feba 	bl	800f77c <memset>
			}
			total_copied += copied;
 800ca08:	697a      	ldr	r2, [r7, #20]
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	4413      	add	r3, r2
 800ca0e:	617b      	str	r3, [r7, #20]
	while (total_copied < length) {
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	697a      	ldr	r2, [r7, #20]
 800ca14:	429a      	cmp	r2, r3
 800ca16:	f4ff af7e 	bcc.w	800c916 <logger_log+0x2a>
		}
	}

	for (size_t i = 0; i < LOGGER_LINES; ++i) {
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	613b      	str	r3, [r7, #16]
 800ca1e:	e015      	b.n	800ca4c <logger_log+0x160>
		ssd1306_SetCursor(0, i * LOGGER_FONT_HEIGHT);
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	00db      	lsls	r3, r3, #3
 800ca26:	b2db      	uxtb	r3, r3
 800ca28:	4619      	mov	r1, r3
 800ca2a:	2000      	movs	r0, #0
 800ca2c:	f7f3 ff6e 	bl	800090c <ssd1306_SetCursor>
		ssd1306_WriteString(&line_buffer.data[i * LOGGER_LINE_SIZE], Font_6x8, White);
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	2216      	movs	r2, #22
 800ca34:	fb02 f303 	mul.w	r3, r2, r3
 800ca38:	4a0c      	ldr	r2, [pc, #48]	; (800ca6c <logger_log+0x180>)
 800ca3a:	1898      	adds	r0, r3, r2
 800ca3c:	4a0f      	ldr	r2, [pc, #60]	; (800ca7c <logger_log+0x190>)
 800ca3e:	2301      	movs	r3, #1
 800ca40:	ca06      	ldmia	r2, {r1, r2}
 800ca42:	f7f3 ff3d 	bl	80008c0 <ssd1306_WriteString>
	for (size_t i = 0; i < LOGGER_LINES; ++i) {
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	3301      	adds	r3, #1
 800ca4a:	613b      	str	r3, [r7, #16]
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	2b03      	cmp	r3, #3
 800ca50:	d9e6      	bls.n	800ca20 <logger_log+0x134>
	}
	ssd1306_UpdateScreen();
 800ca52:	f7f3 fe31 	bl	80006b8 <ssd1306_UpdateScreen>
 800ca56:	e000      	b.n	800ca5a <logger_log+0x16e>
		return;
 800ca58:	bf00      	nop
}
 800ca5a:	3718      	adds	r7, #24
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ca62:	b004      	add	sp, #16
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop
 800ca68:	c0010498 	.word	0xc0010498
 800ca6c:	c001043c 	.word	0xc001043c
 800ca70:	080101b0 	.word	0x080101b0
 800ca74:	c0010452 	.word	0xc0010452
 800ca78:	c001047e 	.word	0xc001047e
 800ca7c:	24000000 	.word	0x24000000

0800ca80 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b084      	sub	sp, #16
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	4603      	mov	r3, r0
 800ca88:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ca8a:	79fb      	ldrb	r3, [r7, #7]
 800ca8c:	4a08      	ldr	r2, [pc, #32]	; (800cab0 <disk_status+0x30>)
 800ca8e:	009b      	lsls	r3, r3, #2
 800ca90:	4413      	add	r3, r2
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	685b      	ldr	r3, [r3, #4]
 800ca96:	79fa      	ldrb	r2, [r7, #7]
 800ca98:	4905      	ldr	r1, [pc, #20]	; (800cab0 <disk_status+0x30>)
 800ca9a:	440a      	add	r2, r1
 800ca9c:	7a12      	ldrb	r2, [r2, #8]
 800ca9e:	4610      	mov	r0, r2
 800caa0:	4798      	blx	r3
 800caa2:	4603      	mov	r3, r0
 800caa4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800caa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3710      	adds	r7, #16
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}
 800cab0:	2400052c 	.word	0x2400052c

0800cab4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b084      	sub	sp, #16
 800cab8:	af00      	add	r7, sp, #0
 800caba:	4603      	mov	r3, r0
 800cabc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cabe:	2300      	movs	r3, #0
 800cac0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cac2:	79fb      	ldrb	r3, [r7, #7]
 800cac4:	4a0d      	ldr	r2, [pc, #52]	; (800cafc <disk_initialize+0x48>)
 800cac6:	5cd3      	ldrb	r3, [r2, r3]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d111      	bne.n	800caf0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800cacc:	79fb      	ldrb	r3, [r7, #7]
 800cace:	4a0b      	ldr	r2, [pc, #44]	; (800cafc <disk_initialize+0x48>)
 800cad0:	2101      	movs	r1, #1
 800cad2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cad4:	79fb      	ldrb	r3, [r7, #7]
 800cad6:	4a09      	ldr	r2, [pc, #36]	; (800cafc <disk_initialize+0x48>)
 800cad8:	009b      	lsls	r3, r3, #2
 800cada:	4413      	add	r3, r2
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	79fa      	ldrb	r2, [r7, #7]
 800cae2:	4906      	ldr	r1, [pc, #24]	; (800cafc <disk_initialize+0x48>)
 800cae4:	440a      	add	r2, r1
 800cae6:	7a12      	ldrb	r2, [r2, #8]
 800cae8:	4610      	mov	r0, r2
 800caea:	4798      	blx	r3
 800caec:	4603      	mov	r3, r0
 800caee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800caf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3710      	adds	r7, #16
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	2400052c 	.word	0x2400052c

0800cb00 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cb00:	b590      	push	{r4, r7, lr}
 800cb02:	b087      	sub	sp, #28
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	60b9      	str	r1, [r7, #8]
 800cb08:	607a      	str	r2, [r7, #4]
 800cb0a:	603b      	str	r3, [r7, #0]
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cb10:	7bfb      	ldrb	r3, [r7, #15]
 800cb12:	4a0a      	ldr	r2, [pc, #40]	; (800cb3c <disk_read+0x3c>)
 800cb14:	009b      	lsls	r3, r3, #2
 800cb16:	4413      	add	r3, r2
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	689c      	ldr	r4, [r3, #8]
 800cb1c:	7bfb      	ldrb	r3, [r7, #15]
 800cb1e:	4a07      	ldr	r2, [pc, #28]	; (800cb3c <disk_read+0x3c>)
 800cb20:	4413      	add	r3, r2
 800cb22:	7a18      	ldrb	r0, [r3, #8]
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	687a      	ldr	r2, [r7, #4]
 800cb28:	68b9      	ldr	r1, [r7, #8]
 800cb2a:	47a0      	blx	r4
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	75fb      	strb	r3, [r7, #23]
  return res;
 800cb30:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	371c      	adds	r7, #28
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd90      	pop	{r4, r7, pc}
 800cb3a:	bf00      	nop
 800cb3c:	2400052c 	.word	0x2400052c

0800cb40 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cb40:	b590      	push	{r4, r7, lr}
 800cb42:	b087      	sub	sp, #28
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	60b9      	str	r1, [r7, #8]
 800cb48:	607a      	str	r2, [r7, #4]
 800cb4a:	603b      	str	r3, [r7, #0]
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cb50:	7bfb      	ldrb	r3, [r7, #15]
 800cb52:	4a0a      	ldr	r2, [pc, #40]	; (800cb7c <disk_write+0x3c>)
 800cb54:	009b      	lsls	r3, r3, #2
 800cb56:	4413      	add	r3, r2
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	68dc      	ldr	r4, [r3, #12]
 800cb5c:	7bfb      	ldrb	r3, [r7, #15]
 800cb5e:	4a07      	ldr	r2, [pc, #28]	; (800cb7c <disk_write+0x3c>)
 800cb60:	4413      	add	r3, r2
 800cb62:	7a18      	ldrb	r0, [r3, #8]
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	687a      	ldr	r2, [r7, #4]
 800cb68:	68b9      	ldr	r1, [r7, #8]
 800cb6a:	47a0      	blx	r4
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	75fb      	strb	r3, [r7, #23]
  return res;
 800cb70:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	371c      	adds	r7, #28
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd90      	pop	{r4, r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	2400052c 	.word	0x2400052c

0800cb80 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b084      	sub	sp, #16
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	4603      	mov	r3, r0
 800cb88:	603a      	str	r2, [r7, #0]
 800cb8a:	71fb      	strb	r3, [r7, #7]
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cb90:	79fb      	ldrb	r3, [r7, #7]
 800cb92:	4a09      	ldr	r2, [pc, #36]	; (800cbb8 <disk_ioctl+0x38>)
 800cb94:	009b      	lsls	r3, r3, #2
 800cb96:	4413      	add	r3, r2
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	691b      	ldr	r3, [r3, #16]
 800cb9c:	79fa      	ldrb	r2, [r7, #7]
 800cb9e:	4906      	ldr	r1, [pc, #24]	; (800cbb8 <disk_ioctl+0x38>)
 800cba0:	440a      	add	r2, r1
 800cba2:	7a10      	ldrb	r0, [r2, #8]
 800cba4:	79b9      	ldrb	r1, [r7, #6]
 800cba6:	683a      	ldr	r2, [r7, #0]
 800cba8:	4798      	blx	r3
 800cbaa:	4603      	mov	r3, r0
 800cbac:	73fb      	strb	r3, [r7, #15]
  return res;
 800cbae:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3710      	adds	r7, #16
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	2400052c 	.word	0x2400052c

0800cbbc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b085      	sub	sp, #20
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	781b      	ldrb	r3, [r3, #0]
 800cbca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cbcc:	89fb      	ldrh	r3, [r7, #14]
 800cbce:	021b      	lsls	r3, r3, #8
 800cbd0:	b21a      	sxth	r2, r3
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	781b      	ldrb	r3, [r3, #0]
 800cbd6:	b21b      	sxth	r3, r3
 800cbd8:	4313      	orrs	r3, r2
 800cbda:	b21b      	sxth	r3, r3
 800cbdc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cbde:	89fb      	ldrh	r3, [r7, #14]
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3714      	adds	r7, #20
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr

0800cbec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cbec:	b480      	push	{r7}
 800cbee:	b085      	sub	sp, #20
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	3303      	adds	r3, #3
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	021b      	lsls	r3, r3, #8
 800cc00:	687a      	ldr	r2, [r7, #4]
 800cc02:	3202      	adds	r2, #2
 800cc04:	7812      	ldrb	r2, [r2, #0]
 800cc06:	4313      	orrs	r3, r2
 800cc08:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	021b      	lsls	r3, r3, #8
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	3201      	adds	r2, #1
 800cc12:	7812      	ldrb	r2, [r2, #0]
 800cc14:	4313      	orrs	r3, r2
 800cc16:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	021b      	lsls	r3, r3, #8
 800cc1c:	687a      	ldr	r2, [r7, #4]
 800cc1e:	7812      	ldrb	r2, [r2, #0]
 800cc20:	4313      	orrs	r3, r2
 800cc22:	60fb      	str	r3, [r7, #12]
	return rv;
 800cc24:	68fb      	ldr	r3, [r7, #12]
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3714      	adds	r7, #20
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc30:	4770      	bx	lr

0800cc32 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cc32:	b480      	push	{r7}
 800cc34:	b083      	sub	sp, #12
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	6078      	str	r0, [r7, #4]
 800cc3a:	460b      	mov	r3, r1
 800cc3c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	1c5a      	adds	r2, r3, #1
 800cc42:	607a      	str	r2, [r7, #4]
 800cc44:	887a      	ldrh	r2, [r7, #2]
 800cc46:	b2d2      	uxtb	r2, r2
 800cc48:	701a      	strb	r2, [r3, #0]
 800cc4a:	887b      	ldrh	r3, [r7, #2]
 800cc4c:	0a1b      	lsrs	r3, r3, #8
 800cc4e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	1c5a      	adds	r2, r3, #1
 800cc54:	607a      	str	r2, [r7, #4]
 800cc56:	887a      	ldrh	r2, [r7, #2]
 800cc58:	b2d2      	uxtb	r2, r2
 800cc5a:	701a      	strb	r2, [r3, #0]
}
 800cc5c:	bf00      	nop
 800cc5e:	370c      	adds	r7, #12
 800cc60:	46bd      	mov	sp, r7
 800cc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc66:	4770      	bx	lr

0800cc68 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b083      	sub	sp, #12
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	1c5a      	adds	r2, r3, #1
 800cc76:	607a      	str	r2, [r7, #4]
 800cc78:	683a      	ldr	r2, [r7, #0]
 800cc7a:	b2d2      	uxtb	r2, r2
 800cc7c:	701a      	strb	r2, [r3, #0]
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	0a1b      	lsrs	r3, r3, #8
 800cc82:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	1c5a      	adds	r2, r3, #1
 800cc88:	607a      	str	r2, [r7, #4]
 800cc8a:	683a      	ldr	r2, [r7, #0]
 800cc8c:	b2d2      	uxtb	r2, r2
 800cc8e:	701a      	strb	r2, [r3, #0]
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	0a1b      	lsrs	r3, r3, #8
 800cc94:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	1c5a      	adds	r2, r3, #1
 800cc9a:	607a      	str	r2, [r7, #4]
 800cc9c:	683a      	ldr	r2, [r7, #0]
 800cc9e:	b2d2      	uxtb	r2, r2
 800cca0:	701a      	strb	r2, [r3, #0]
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	0a1b      	lsrs	r3, r3, #8
 800cca6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	1c5a      	adds	r2, r3, #1
 800ccac:	607a      	str	r2, [r7, #4]
 800ccae:	683a      	ldr	r2, [r7, #0]
 800ccb0:	b2d2      	uxtb	r2, r2
 800ccb2:	701a      	strb	r2, [r3, #0]
}
 800ccb4:	bf00      	nop
 800ccb6:	370c      	adds	r7, #12
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbe:	4770      	bx	lr

0800ccc0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ccc0:	b480      	push	{r7}
 800ccc2:	b087      	sub	sp, #28
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	60f8      	str	r0, [r7, #12]
 800ccc8:	60b9      	str	r1, [r7, #8]
 800ccca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d00d      	beq.n	800ccf6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ccda:	693a      	ldr	r2, [r7, #16]
 800ccdc:	1c53      	adds	r3, r2, #1
 800ccde:	613b      	str	r3, [r7, #16]
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	1c59      	adds	r1, r3, #1
 800cce4:	6179      	str	r1, [r7, #20]
 800cce6:	7812      	ldrb	r2, [r2, #0]
 800cce8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	3b01      	subs	r3, #1
 800ccee:	607b      	str	r3, [r7, #4]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d1f1      	bne.n	800ccda <mem_cpy+0x1a>
	}
}
 800ccf6:	bf00      	nop
 800ccf8:	371c      	adds	r7, #28
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr

0800cd02 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cd02:	b480      	push	{r7}
 800cd04:	b087      	sub	sp, #28
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	60f8      	str	r0, [r7, #12]
 800cd0a:	60b9      	str	r1, [r7, #8]
 800cd0c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	1c5a      	adds	r2, r3, #1
 800cd16:	617a      	str	r2, [r7, #20]
 800cd18:	68ba      	ldr	r2, [r7, #8]
 800cd1a:	b2d2      	uxtb	r2, r2
 800cd1c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	3b01      	subs	r3, #1
 800cd22:	607b      	str	r3, [r7, #4]
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d1f3      	bne.n	800cd12 <mem_set+0x10>
}
 800cd2a:	bf00      	nop
 800cd2c:	bf00      	nop
 800cd2e:	371c      	adds	r7, #28
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr

0800cd38 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800cd38:	b480      	push	{r7}
 800cd3a:	b089      	sub	sp, #36	; 0x24
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	60f8      	str	r0, [r7, #12]
 800cd40:	60b9      	str	r1, [r7, #8]
 800cd42:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	61fb      	str	r3, [r7, #28]
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800cd50:	69fb      	ldr	r3, [r7, #28]
 800cd52:	1c5a      	adds	r2, r3, #1
 800cd54:	61fa      	str	r2, [r7, #28]
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	4619      	mov	r1, r3
 800cd5a:	69bb      	ldr	r3, [r7, #24]
 800cd5c:	1c5a      	adds	r2, r3, #1
 800cd5e:	61ba      	str	r2, [r7, #24]
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	1acb      	subs	r3, r1, r3
 800cd64:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	3b01      	subs	r3, #1
 800cd6a:	607b      	str	r3, [r7, #4]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d002      	beq.n	800cd78 <mem_cmp+0x40>
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d0eb      	beq.n	800cd50 <mem_cmp+0x18>

	return r;
 800cd78:	697b      	ldr	r3, [r7, #20]
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3724      	adds	r7, #36	; 0x24
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd84:	4770      	bx	lr

0800cd86 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cd86:	b480      	push	{r7}
 800cd88:	b083      	sub	sp, #12
 800cd8a:	af00      	add	r7, sp, #0
 800cd8c:	6078      	str	r0, [r7, #4]
 800cd8e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cd90:	e002      	b.n	800cd98 <chk_chr+0x12>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	3301      	adds	r3, #1
 800cd96:	607b      	str	r3, [r7, #4]
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	781b      	ldrb	r3, [r3, #0]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d005      	beq.n	800cdac <chk_chr+0x26>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	461a      	mov	r2, r3
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d1f2      	bne.n	800cd92 <chk_chr+0xc>
	return *str;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	781b      	ldrb	r3, [r3, #0]
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	370c      	adds	r7, #12
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr

0800cdbc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b085      	sub	sp, #20
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	60bb      	str	r3, [r7, #8]
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	60fb      	str	r3, [r7, #12]
 800cdce:	e029      	b.n	800ce24 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cdd0:	4a27      	ldr	r2, [pc, #156]	; (800ce70 <chk_lock+0xb4>)
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	011b      	lsls	r3, r3, #4
 800cdd6:	4413      	add	r3, r2
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d01d      	beq.n	800ce1a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cdde:	4a24      	ldr	r2, [pc, #144]	; (800ce70 <chk_lock+0xb4>)
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	011b      	lsls	r3, r3, #4
 800cde4:	4413      	add	r3, r2
 800cde6:	681a      	ldr	r2, [r3, #0]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d116      	bne.n	800ce1e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cdf0:	4a1f      	ldr	r2, [pc, #124]	; (800ce70 <chk_lock+0xb4>)
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	011b      	lsls	r3, r3, #4
 800cdf6:	4413      	add	r3, r2
 800cdf8:	3304      	adds	r3, #4
 800cdfa:	681a      	ldr	r2, [r3, #0]
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d10c      	bne.n	800ce1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ce04:	4a1a      	ldr	r2, [pc, #104]	; (800ce70 <chk_lock+0xb4>)
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	011b      	lsls	r3, r3, #4
 800ce0a:	4413      	add	r3, r2
 800ce0c:	3308      	adds	r3, #8
 800ce0e:	681a      	ldr	r2, [r3, #0]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d102      	bne.n	800ce1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ce18:	e007      	b.n	800ce2a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	3301      	adds	r3, #1
 800ce22:	60fb      	str	r3, [r7, #12]
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	2b01      	cmp	r3, #1
 800ce28:	d9d2      	bls.n	800cdd0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	2b02      	cmp	r3, #2
 800ce2e:	d109      	bne.n	800ce44 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d102      	bne.n	800ce3c <chk_lock+0x80>
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	2b02      	cmp	r3, #2
 800ce3a:	d101      	bne.n	800ce40 <chk_lock+0x84>
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	e010      	b.n	800ce62 <chk_lock+0xa6>
 800ce40:	2312      	movs	r3, #18
 800ce42:	e00e      	b.n	800ce62 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d108      	bne.n	800ce5c <chk_lock+0xa0>
 800ce4a:	4a09      	ldr	r2, [pc, #36]	; (800ce70 <chk_lock+0xb4>)
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	011b      	lsls	r3, r3, #4
 800ce50:	4413      	add	r3, r2
 800ce52:	330c      	adds	r3, #12
 800ce54:	881b      	ldrh	r3, [r3, #0]
 800ce56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce5a:	d101      	bne.n	800ce60 <chk_lock+0xa4>
 800ce5c:	2310      	movs	r3, #16
 800ce5e:	e000      	b.n	800ce62 <chk_lock+0xa6>
 800ce60:	2300      	movs	r3, #0
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3714      	adds	r7, #20
 800ce66:	46bd      	mov	sp, r7
 800ce68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6c:	4770      	bx	lr
 800ce6e:	bf00      	nop
 800ce70:	2400030c 	.word	0x2400030c

0800ce74 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ce74:	b480      	push	{r7}
 800ce76:	b083      	sub	sp, #12
 800ce78:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	607b      	str	r3, [r7, #4]
 800ce7e:	e002      	b.n	800ce86 <enq_lock+0x12>
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	3301      	adds	r3, #1
 800ce84:	607b      	str	r3, [r7, #4]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d806      	bhi.n	800ce9a <enq_lock+0x26>
 800ce8c:	4a09      	ldr	r2, [pc, #36]	; (800ceb4 <enq_lock+0x40>)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	011b      	lsls	r3, r3, #4
 800ce92:	4413      	add	r3, r2
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d1f2      	bne.n	800ce80 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2b02      	cmp	r3, #2
 800ce9e:	bf14      	ite	ne
 800cea0:	2301      	movne	r3, #1
 800cea2:	2300      	moveq	r3, #0
 800cea4:	b2db      	uxtb	r3, r3
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	370c      	adds	r7, #12
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr
 800ceb2:	bf00      	nop
 800ceb4:	2400030c 	.word	0x2400030c

0800ceb8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ceb8:	b480      	push	{r7}
 800ceba:	b085      	sub	sp, #20
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cec2:	2300      	movs	r3, #0
 800cec4:	60fb      	str	r3, [r7, #12]
 800cec6:	e01f      	b.n	800cf08 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cec8:	4a41      	ldr	r2, [pc, #260]	; (800cfd0 <inc_lock+0x118>)
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	011b      	lsls	r3, r3, #4
 800cece:	4413      	add	r3, r2
 800ced0:	681a      	ldr	r2, [r3, #0]
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d113      	bne.n	800cf02 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ceda:	4a3d      	ldr	r2, [pc, #244]	; (800cfd0 <inc_lock+0x118>)
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	011b      	lsls	r3, r3, #4
 800cee0:	4413      	add	r3, r2
 800cee2:	3304      	adds	r3, #4
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ceea:	429a      	cmp	r2, r3
 800ceec:	d109      	bne.n	800cf02 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ceee:	4a38      	ldr	r2, [pc, #224]	; (800cfd0 <inc_lock+0x118>)
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	011b      	lsls	r3, r3, #4
 800cef4:	4413      	add	r3, r2
 800cef6:	3308      	adds	r3, #8
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d006      	beq.n	800cf10 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	3301      	adds	r3, #1
 800cf06:	60fb      	str	r3, [r7, #12]
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	d9dc      	bls.n	800cec8 <inc_lock+0x10>
 800cf0e:	e000      	b.n	800cf12 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cf10:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	2b02      	cmp	r3, #2
 800cf16:	d132      	bne.n	800cf7e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	60fb      	str	r3, [r7, #12]
 800cf1c:	e002      	b.n	800cf24 <inc_lock+0x6c>
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	3301      	adds	r3, #1
 800cf22:	60fb      	str	r3, [r7, #12]
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	2b01      	cmp	r3, #1
 800cf28:	d806      	bhi.n	800cf38 <inc_lock+0x80>
 800cf2a:	4a29      	ldr	r2, [pc, #164]	; (800cfd0 <inc_lock+0x118>)
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	011b      	lsls	r3, r3, #4
 800cf30:	4413      	add	r3, r2
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d1f2      	bne.n	800cf1e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	2b02      	cmp	r3, #2
 800cf3c:	d101      	bne.n	800cf42 <inc_lock+0x8a>
 800cf3e:	2300      	movs	r3, #0
 800cf40:	e040      	b.n	800cfc4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681a      	ldr	r2, [r3, #0]
 800cf46:	4922      	ldr	r1, [pc, #136]	; (800cfd0 <inc_lock+0x118>)
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	011b      	lsls	r3, r3, #4
 800cf4c:	440b      	add	r3, r1
 800cf4e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	689a      	ldr	r2, [r3, #8]
 800cf54:	491e      	ldr	r1, [pc, #120]	; (800cfd0 <inc_lock+0x118>)
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	011b      	lsls	r3, r3, #4
 800cf5a:	440b      	add	r3, r1
 800cf5c:	3304      	adds	r3, #4
 800cf5e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	695a      	ldr	r2, [r3, #20]
 800cf64:	491a      	ldr	r1, [pc, #104]	; (800cfd0 <inc_lock+0x118>)
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	011b      	lsls	r3, r3, #4
 800cf6a:	440b      	add	r3, r1
 800cf6c:	3308      	adds	r3, #8
 800cf6e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cf70:	4a17      	ldr	r2, [pc, #92]	; (800cfd0 <inc_lock+0x118>)
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	011b      	lsls	r3, r3, #4
 800cf76:	4413      	add	r3, r2
 800cf78:	330c      	adds	r3, #12
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d009      	beq.n	800cf98 <inc_lock+0xe0>
 800cf84:	4a12      	ldr	r2, [pc, #72]	; (800cfd0 <inc_lock+0x118>)
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	011b      	lsls	r3, r3, #4
 800cf8a:	4413      	add	r3, r2
 800cf8c:	330c      	adds	r3, #12
 800cf8e:	881b      	ldrh	r3, [r3, #0]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d001      	beq.n	800cf98 <inc_lock+0xe0>
 800cf94:	2300      	movs	r3, #0
 800cf96:	e015      	b.n	800cfc4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d108      	bne.n	800cfb0 <inc_lock+0xf8>
 800cf9e:	4a0c      	ldr	r2, [pc, #48]	; (800cfd0 <inc_lock+0x118>)
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	011b      	lsls	r3, r3, #4
 800cfa4:	4413      	add	r3, r2
 800cfa6:	330c      	adds	r3, #12
 800cfa8:	881b      	ldrh	r3, [r3, #0]
 800cfaa:	3301      	adds	r3, #1
 800cfac:	b29a      	uxth	r2, r3
 800cfae:	e001      	b.n	800cfb4 <inc_lock+0xfc>
 800cfb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cfb4:	4906      	ldr	r1, [pc, #24]	; (800cfd0 <inc_lock+0x118>)
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	011b      	lsls	r3, r3, #4
 800cfba:	440b      	add	r3, r1
 800cfbc:	330c      	adds	r3, #12
 800cfbe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	3301      	adds	r3, #1
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3714      	adds	r7, #20
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr
 800cfd0:	2400030c 	.word	0x2400030c

0800cfd4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b085      	sub	sp, #20
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	3b01      	subs	r3, #1
 800cfe0:	607b      	str	r3, [r7, #4]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2b01      	cmp	r3, #1
 800cfe6:	d825      	bhi.n	800d034 <dec_lock+0x60>
		n = Files[i].ctr;
 800cfe8:	4a17      	ldr	r2, [pc, #92]	; (800d048 <dec_lock+0x74>)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	011b      	lsls	r3, r3, #4
 800cfee:	4413      	add	r3, r2
 800cff0:	330c      	adds	r3, #12
 800cff2:	881b      	ldrh	r3, [r3, #0]
 800cff4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cff6:	89fb      	ldrh	r3, [r7, #14]
 800cff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cffc:	d101      	bne.n	800d002 <dec_lock+0x2e>
 800cffe:	2300      	movs	r3, #0
 800d000:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d002:	89fb      	ldrh	r3, [r7, #14]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d002      	beq.n	800d00e <dec_lock+0x3a>
 800d008:	89fb      	ldrh	r3, [r7, #14]
 800d00a:	3b01      	subs	r3, #1
 800d00c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d00e:	4a0e      	ldr	r2, [pc, #56]	; (800d048 <dec_lock+0x74>)
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	011b      	lsls	r3, r3, #4
 800d014:	4413      	add	r3, r2
 800d016:	330c      	adds	r3, #12
 800d018:	89fa      	ldrh	r2, [r7, #14]
 800d01a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d01c:	89fb      	ldrh	r3, [r7, #14]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d105      	bne.n	800d02e <dec_lock+0x5a>
 800d022:	4a09      	ldr	r2, [pc, #36]	; (800d048 <dec_lock+0x74>)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	011b      	lsls	r3, r3, #4
 800d028:	4413      	add	r3, r2
 800d02a:	2200      	movs	r2, #0
 800d02c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d02e:	2300      	movs	r3, #0
 800d030:	737b      	strb	r3, [r7, #13]
 800d032:	e001      	b.n	800d038 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d034:	2302      	movs	r3, #2
 800d036:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d038:	7b7b      	ldrb	r3, [r7, #13]
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3714      	adds	r7, #20
 800d03e:	46bd      	mov	sp, r7
 800d040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d044:	4770      	bx	lr
 800d046:	bf00      	nop
 800d048:	2400030c 	.word	0x2400030c

0800d04c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b085      	sub	sp, #20
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d054:	2300      	movs	r3, #0
 800d056:	60fb      	str	r3, [r7, #12]
 800d058:	e010      	b.n	800d07c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d05a:	4a0d      	ldr	r2, [pc, #52]	; (800d090 <clear_lock+0x44>)
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	011b      	lsls	r3, r3, #4
 800d060:	4413      	add	r3, r2
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	687a      	ldr	r2, [r7, #4]
 800d066:	429a      	cmp	r2, r3
 800d068:	d105      	bne.n	800d076 <clear_lock+0x2a>
 800d06a:	4a09      	ldr	r2, [pc, #36]	; (800d090 <clear_lock+0x44>)
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	011b      	lsls	r3, r3, #4
 800d070:	4413      	add	r3, r2
 800d072:	2200      	movs	r2, #0
 800d074:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	3301      	adds	r3, #1
 800d07a:	60fb      	str	r3, [r7, #12]
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2b01      	cmp	r3, #1
 800d080:	d9eb      	bls.n	800d05a <clear_lock+0xe>
	}
}
 800d082:	bf00      	nop
 800d084:	bf00      	nop
 800d086:	3714      	adds	r7, #20
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr
 800d090:	2400030c 	.word	0x2400030c

0800d094 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b086      	sub	sp, #24
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d09c:	2300      	movs	r3, #0
 800d09e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	78db      	ldrb	r3, [r3, #3]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d034      	beq.n	800d112 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	7858      	ldrb	r0, [r3, #1]
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	697a      	ldr	r2, [r7, #20]
 800d0bc:	f7ff fd40 	bl	800cb40 <disk_write>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d002      	beq.n	800d0cc <sync_window+0x38>
			res = FR_DISK_ERR;
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	73fb      	strb	r3, [r7, #15]
 800d0ca:	e022      	b.n	800d112 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0d6:	697a      	ldr	r2, [r7, #20]
 800d0d8:	1ad2      	subs	r2, r2, r3
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	69db      	ldr	r3, [r3, #28]
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	d217      	bcs.n	800d112 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	789b      	ldrb	r3, [r3, #2]
 800d0e6:	613b      	str	r3, [r7, #16]
 800d0e8:	e010      	b.n	800d10c <sync_window+0x78>
					wsect += fs->fsize;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	69db      	ldr	r3, [r3, #28]
 800d0ee:	697a      	ldr	r2, [r7, #20]
 800d0f0:	4413      	add	r3, r2
 800d0f2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	7858      	ldrb	r0, [r3, #1]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d0fe:	2301      	movs	r3, #1
 800d100:	697a      	ldr	r2, [r7, #20]
 800d102:	f7ff fd1d 	bl	800cb40 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d106:	693b      	ldr	r3, [r7, #16]
 800d108:	3b01      	subs	r3, #1
 800d10a:	613b      	str	r3, [r7, #16]
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	2b01      	cmp	r3, #1
 800d110:	d8eb      	bhi.n	800d0ea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d112:	7bfb      	ldrb	r3, [r7, #15]
}
 800d114:	4618      	mov	r0, r3
 800d116:	3718      	adds	r7, #24
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}

0800d11c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b084      	sub	sp, #16
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d126:	2300      	movs	r3, #0
 800d128:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d12e:	683a      	ldr	r2, [r7, #0]
 800d130:	429a      	cmp	r2, r3
 800d132:	d01b      	beq.n	800d16c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f7ff ffad 	bl	800d094 <sync_window>
 800d13a:	4603      	mov	r3, r0
 800d13c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d13e:	7bfb      	ldrb	r3, [r7, #15]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d113      	bne.n	800d16c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	7858      	ldrb	r0, [r3, #1]
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d14e:	2301      	movs	r3, #1
 800d150:	683a      	ldr	r2, [r7, #0]
 800d152:	f7ff fcd5 	bl	800cb00 <disk_read>
 800d156:	4603      	mov	r3, r0
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d004      	beq.n	800d166 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d15c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d160:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d162:	2301      	movs	r3, #1
 800d164:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	683a      	ldr	r2, [r7, #0]
 800d16a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d16c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3710      	adds	r7, #16
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
	...

0800d178 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b084      	sub	sp, #16
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f7ff ff87 	bl	800d094 <sync_window>
 800d186:	4603      	mov	r3, r0
 800d188:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d18a:	7bfb      	ldrb	r3, [r7, #15]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d158      	bne.n	800d242 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	781b      	ldrb	r3, [r3, #0]
 800d194:	2b03      	cmp	r3, #3
 800d196:	d148      	bne.n	800d22a <sync_fs+0xb2>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	791b      	ldrb	r3, [r3, #4]
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	d144      	bne.n	800d22a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	3334      	adds	r3, #52	; 0x34
 800d1a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d1a8:	2100      	movs	r1, #0
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f7ff fda9 	bl	800cd02 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	3334      	adds	r3, #52	; 0x34
 800d1b4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d1b8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7ff fd38 	bl	800cc32 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	3334      	adds	r3, #52	; 0x34
 800d1c6:	4921      	ldr	r1, [pc, #132]	; (800d24c <sync_fs+0xd4>)
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f7ff fd4d 	bl	800cc68 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	3334      	adds	r3, #52	; 0x34
 800d1d2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d1d6:	491e      	ldr	r1, [pc, #120]	; (800d250 <sync_fs+0xd8>)
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f7ff fd45 	bl	800cc68 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	3334      	adds	r3, #52	; 0x34
 800d1e2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	695b      	ldr	r3, [r3, #20]
 800d1ea:	4619      	mov	r1, r3
 800d1ec:	4610      	mov	r0, r2
 800d1ee:	f7ff fd3b 	bl	800cc68 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	3334      	adds	r3, #52	; 0x34
 800d1f6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	691b      	ldr	r3, [r3, #16]
 800d1fe:	4619      	mov	r1, r3
 800d200:	4610      	mov	r0, r2
 800d202:	f7ff fd31 	bl	800cc68 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6a1b      	ldr	r3, [r3, #32]
 800d20a:	1c5a      	adds	r2, r3, #1
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	7858      	ldrb	r0, [r3, #1]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d21e:	2301      	movs	r3, #1
 800d220:	f7ff fc8e 	bl	800cb40 <disk_write>
			fs->fsi_flag = 0;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2200      	movs	r2, #0
 800d228:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	785b      	ldrb	r3, [r3, #1]
 800d22e:	2200      	movs	r2, #0
 800d230:	2100      	movs	r1, #0
 800d232:	4618      	mov	r0, r3
 800d234:	f7ff fca4 	bl	800cb80 <disk_ioctl>
 800d238:	4603      	mov	r3, r0
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d001      	beq.n	800d242 <sync_fs+0xca>
 800d23e:	2301      	movs	r3, #1
 800d240:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d242:	7bfb      	ldrb	r3, [r7, #15]
}
 800d244:	4618      	mov	r0, r3
 800d246:	3710      	adds	r7, #16
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}
 800d24c:	41615252 	.word	0x41615252
 800d250:	61417272 	.word	0x61417272

0800d254 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d254:	b480      	push	{r7}
 800d256:	b083      	sub	sp, #12
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	3b02      	subs	r3, #2
 800d262:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	699b      	ldr	r3, [r3, #24]
 800d268:	3b02      	subs	r3, #2
 800d26a:	683a      	ldr	r2, [r7, #0]
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d301      	bcc.n	800d274 <clust2sect+0x20>
 800d270:	2300      	movs	r3, #0
 800d272:	e008      	b.n	800d286 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	895b      	ldrh	r3, [r3, #10]
 800d278:	461a      	mov	r2, r3
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	fb03 f202 	mul.w	r2, r3, r2
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d284:	4413      	add	r3, r2
}
 800d286:	4618      	mov	r0, r3
 800d288:	370c      	adds	r7, #12
 800d28a:	46bd      	mov	sp, r7
 800d28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d290:	4770      	bx	lr

0800d292 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d292:	b580      	push	{r7, lr}
 800d294:	b086      	sub	sp, #24
 800d296:	af00      	add	r7, sp, #0
 800d298:	6078      	str	r0, [r7, #4]
 800d29a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	d904      	bls.n	800d2b2 <get_fat+0x20>
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	699b      	ldr	r3, [r3, #24]
 800d2ac:	683a      	ldr	r2, [r7, #0]
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d302      	bcc.n	800d2b8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	617b      	str	r3, [r7, #20]
 800d2b6:	e08f      	b.n	800d3d8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d2b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d2bc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	2b03      	cmp	r3, #3
 800d2c4:	d062      	beq.n	800d38c <get_fat+0xfa>
 800d2c6:	2b03      	cmp	r3, #3
 800d2c8:	dc7c      	bgt.n	800d3c4 <get_fat+0x132>
 800d2ca:	2b01      	cmp	r3, #1
 800d2cc:	d002      	beq.n	800d2d4 <get_fat+0x42>
 800d2ce:	2b02      	cmp	r3, #2
 800d2d0:	d042      	beq.n	800d358 <get_fat+0xc6>
 800d2d2:	e077      	b.n	800d3c4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	60fb      	str	r3, [r7, #12]
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	085b      	lsrs	r3, r3, #1
 800d2dc:	68fa      	ldr	r2, [r7, #12]
 800d2de:	4413      	add	r3, r2
 800d2e0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	0a5b      	lsrs	r3, r3, #9
 800d2ea:	4413      	add	r3, r2
 800d2ec:	4619      	mov	r1, r3
 800d2ee:	6938      	ldr	r0, [r7, #16]
 800d2f0:	f7ff ff14 	bl	800d11c <move_window>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d167      	bne.n	800d3ca <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	1c5a      	adds	r2, r3, #1
 800d2fe:	60fa      	str	r2, [r7, #12]
 800d300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d304:	693a      	ldr	r2, [r7, #16]
 800d306:	4413      	add	r3, r2
 800d308:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d30c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	0a5b      	lsrs	r3, r3, #9
 800d316:	4413      	add	r3, r2
 800d318:	4619      	mov	r1, r3
 800d31a:	6938      	ldr	r0, [r7, #16]
 800d31c:	f7ff fefe 	bl	800d11c <move_window>
 800d320:	4603      	mov	r3, r0
 800d322:	2b00      	cmp	r3, #0
 800d324:	d153      	bne.n	800d3ce <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d32c:	693a      	ldr	r2, [r7, #16]
 800d32e:	4413      	add	r3, r2
 800d330:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d334:	021b      	lsls	r3, r3, #8
 800d336:	461a      	mov	r2, r3
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	4313      	orrs	r3, r2
 800d33c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	f003 0301 	and.w	r3, r3, #1
 800d344:	2b00      	cmp	r3, #0
 800d346:	d002      	beq.n	800d34e <get_fat+0xbc>
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	091b      	lsrs	r3, r3, #4
 800d34c:	e002      	b.n	800d354 <get_fat+0xc2>
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d354:	617b      	str	r3, [r7, #20]
			break;
 800d356:	e03f      	b.n	800d3d8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	0a1b      	lsrs	r3, r3, #8
 800d360:	4413      	add	r3, r2
 800d362:	4619      	mov	r1, r3
 800d364:	6938      	ldr	r0, [r7, #16]
 800d366:	f7ff fed9 	bl	800d11c <move_window>
 800d36a:	4603      	mov	r3, r0
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d130      	bne.n	800d3d2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	005b      	lsls	r3, r3, #1
 800d37a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d37e:	4413      	add	r3, r2
 800d380:	4618      	mov	r0, r3
 800d382:	f7ff fc1b 	bl	800cbbc <ld_word>
 800d386:	4603      	mov	r3, r0
 800d388:	617b      	str	r3, [r7, #20]
			break;
 800d38a:	e025      	b.n	800d3d8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d38c:	693b      	ldr	r3, [r7, #16]
 800d38e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	09db      	lsrs	r3, r3, #7
 800d394:	4413      	add	r3, r2
 800d396:	4619      	mov	r1, r3
 800d398:	6938      	ldr	r0, [r7, #16]
 800d39a:	f7ff febf 	bl	800d11c <move_window>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d118      	bne.n	800d3d6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	009b      	lsls	r3, r3, #2
 800d3ae:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d3b2:	4413      	add	r3, r2
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f7ff fc19 	bl	800cbec <ld_dword>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d3c0:	617b      	str	r3, [r7, #20]
			break;
 800d3c2:	e009      	b.n	800d3d8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	617b      	str	r3, [r7, #20]
 800d3c8:	e006      	b.n	800d3d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d3ca:	bf00      	nop
 800d3cc:	e004      	b.n	800d3d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d3ce:	bf00      	nop
 800d3d0:	e002      	b.n	800d3d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d3d2:	bf00      	nop
 800d3d4:	e000      	b.n	800d3d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d3d6:	bf00      	nop
		}
	}

	return val;
 800d3d8:	697b      	ldr	r3, [r7, #20]
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3718      	adds	r7, #24
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}

0800d3e2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d3e2:	b590      	push	{r4, r7, lr}
 800d3e4:	b089      	sub	sp, #36	; 0x24
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	60f8      	str	r0, [r7, #12]
 800d3ea:	60b9      	str	r1, [r7, #8]
 800d3ec:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d3ee:	2302      	movs	r3, #2
 800d3f0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	f240 80d2 	bls.w	800d59e <put_fat+0x1bc>
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	699b      	ldr	r3, [r3, #24]
 800d3fe:	68ba      	ldr	r2, [r7, #8]
 800d400:	429a      	cmp	r2, r3
 800d402:	f080 80cc 	bcs.w	800d59e <put_fat+0x1bc>
		switch (fs->fs_type) {
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	781b      	ldrb	r3, [r3, #0]
 800d40a:	2b03      	cmp	r3, #3
 800d40c:	f000 8096 	beq.w	800d53c <put_fat+0x15a>
 800d410:	2b03      	cmp	r3, #3
 800d412:	f300 80cd 	bgt.w	800d5b0 <put_fat+0x1ce>
 800d416:	2b01      	cmp	r3, #1
 800d418:	d002      	beq.n	800d420 <put_fat+0x3e>
 800d41a:	2b02      	cmp	r3, #2
 800d41c:	d06e      	beq.n	800d4fc <put_fat+0x11a>
 800d41e:	e0c7      	b.n	800d5b0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	61bb      	str	r3, [r7, #24]
 800d424:	69bb      	ldr	r3, [r7, #24]
 800d426:	085b      	lsrs	r3, r3, #1
 800d428:	69ba      	ldr	r2, [r7, #24]
 800d42a:	4413      	add	r3, r2
 800d42c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d432:	69bb      	ldr	r3, [r7, #24]
 800d434:	0a5b      	lsrs	r3, r3, #9
 800d436:	4413      	add	r3, r2
 800d438:	4619      	mov	r1, r3
 800d43a:	68f8      	ldr	r0, [r7, #12]
 800d43c:	f7ff fe6e 	bl	800d11c <move_window>
 800d440:	4603      	mov	r3, r0
 800d442:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d444:	7ffb      	ldrb	r3, [r7, #31]
 800d446:	2b00      	cmp	r3, #0
 800d448:	f040 80ab 	bne.w	800d5a2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d452:	69bb      	ldr	r3, [r7, #24]
 800d454:	1c59      	adds	r1, r3, #1
 800d456:	61b9      	str	r1, [r7, #24]
 800d458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d45c:	4413      	add	r3, r2
 800d45e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	f003 0301 	and.w	r3, r3, #1
 800d466:	2b00      	cmp	r3, #0
 800d468:	d00d      	beq.n	800d486 <put_fat+0xa4>
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	b25b      	sxtb	r3, r3
 800d470:	f003 030f 	and.w	r3, r3, #15
 800d474:	b25a      	sxtb	r2, r3
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	b2db      	uxtb	r3, r3
 800d47a:	011b      	lsls	r3, r3, #4
 800d47c:	b25b      	sxtb	r3, r3
 800d47e:	4313      	orrs	r3, r2
 800d480:	b25b      	sxtb	r3, r3
 800d482:	b2db      	uxtb	r3, r3
 800d484:	e001      	b.n	800d48a <put_fat+0xa8>
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	b2db      	uxtb	r3, r3
 800d48a:	697a      	ldr	r2, [r7, #20]
 800d48c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2201      	movs	r2, #1
 800d492:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d498:	69bb      	ldr	r3, [r7, #24]
 800d49a:	0a5b      	lsrs	r3, r3, #9
 800d49c:	4413      	add	r3, r2
 800d49e:	4619      	mov	r1, r3
 800d4a0:	68f8      	ldr	r0, [r7, #12]
 800d4a2:	f7ff fe3b 	bl	800d11c <move_window>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d4aa:	7ffb      	ldrb	r3, [r7, #31]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d17a      	bne.n	800d5a6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d4b6:	69bb      	ldr	r3, [r7, #24]
 800d4b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4bc:	4413      	add	r3, r2
 800d4be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	f003 0301 	and.w	r3, r3, #1
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d003      	beq.n	800d4d2 <put_fat+0xf0>
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	091b      	lsrs	r3, r3, #4
 800d4ce:	b2db      	uxtb	r3, r3
 800d4d0:	e00e      	b.n	800d4f0 <put_fat+0x10e>
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	b25b      	sxtb	r3, r3
 800d4d8:	f023 030f 	bic.w	r3, r3, #15
 800d4dc:	b25a      	sxtb	r2, r3
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	0a1b      	lsrs	r3, r3, #8
 800d4e2:	b25b      	sxtb	r3, r3
 800d4e4:	f003 030f 	and.w	r3, r3, #15
 800d4e8:	b25b      	sxtb	r3, r3
 800d4ea:	4313      	orrs	r3, r2
 800d4ec:	b25b      	sxtb	r3, r3
 800d4ee:	b2db      	uxtb	r3, r3
 800d4f0:	697a      	ldr	r2, [r7, #20]
 800d4f2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	70da      	strb	r2, [r3, #3]
			break;
 800d4fa:	e059      	b.n	800d5b0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	0a1b      	lsrs	r3, r3, #8
 800d504:	4413      	add	r3, r2
 800d506:	4619      	mov	r1, r3
 800d508:	68f8      	ldr	r0, [r7, #12]
 800d50a:	f7ff fe07 	bl	800d11c <move_window>
 800d50e:	4603      	mov	r3, r0
 800d510:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d512:	7ffb      	ldrb	r3, [r7, #31]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d148      	bne.n	800d5aa <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	005b      	lsls	r3, r3, #1
 800d522:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d526:	4413      	add	r3, r2
 800d528:	687a      	ldr	r2, [r7, #4]
 800d52a:	b292      	uxth	r2, r2
 800d52c:	4611      	mov	r1, r2
 800d52e:	4618      	mov	r0, r3
 800d530:	f7ff fb7f 	bl	800cc32 <st_word>
			fs->wflag = 1;
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	2201      	movs	r2, #1
 800d538:	70da      	strb	r2, [r3, #3]
			break;
 800d53a:	e039      	b.n	800d5b0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	09db      	lsrs	r3, r3, #7
 800d544:	4413      	add	r3, r2
 800d546:	4619      	mov	r1, r3
 800d548:	68f8      	ldr	r0, [r7, #12]
 800d54a:	f7ff fde7 	bl	800d11c <move_window>
 800d54e:	4603      	mov	r3, r0
 800d550:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d552:	7ffb      	ldrb	r3, [r7, #31]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d12a      	bne.n	800d5ae <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	009b      	lsls	r3, r3, #2
 800d568:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d56c:	4413      	add	r3, r2
 800d56e:	4618      	mov	r0, r3
 800d570:	f7ff fb3c 	bl	800cbec <ld_dword>
 800d574:	4603      	mov	r3, r0
 800d576:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d57a:	4323      	orrs	r3, r4
 800d57c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	009b      	lsls	r3, r3, #2
 800d588:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d58c:	4413      	add	r3, r2
 800d58e:	6879      	ldr	r1, [r7, #4]
 800d590:	4618      	mov	r0, r3
 800d592:	f7ff fb69 	bl	800cc68 <st_dword>
			fs->wflag = 1;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	2201      	movs	r2, #1
 800d59a:	70da      	strb	r2, [r3, #3]
			break;
 800d59c:	e008      	b.n	800d5b0 <put_fat+0x1ce>
		}
	}
 800d59e:	bf00      	nop
 800d5a0:	e006      	b.n	800d5b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d5a2:	bf00      	nop
 800d5a4:	e004      	b.n	800d5b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d5a6:	bf00      	nop
 800d5a8:	e002      	b.n	800d5b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d5aa:	bf00      	nop
 800d5ac:	e000      	b.n	800d5b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d5ae:	bf00      	nop
	return res;
 800d5b0:	7ffb      	ldrb	r3, [r7, #31]
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3724      	adds	r7, #36	; 0x24
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd90      	pop	{r4, r7, pc}

0800d5ba <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d5ba:	b580      	push	{r7, lr}
 800d5bc:	b088      	sub	sp, #32
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	60f8      	str	r0, [r7, #12]
 800d5c2:	60b9      	str	r1, [r7, #8]
 800d5c4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	d904      	bls.n	800d5e0 <remove_chain+0x26>
 800d5d6:	69bb      	ldr	r3, [r7, #24]
 800d5d8:	699b      	ldr	r3, [r3, #24]
 800d5da:	68ba      	ldr	r2, [r7, #8]
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	d301      	bcc.n	800d5e4 <remove_chain+0x2a>
 800d5e0:	2302      	movs	r3, #2
 800d5e2:	e04b      	b.n	800d67c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d00c      	beq.n	800d604 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d5ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5ee:	6879      	ldr	r1, [r7, #4]
 800d5f0:	69b8      	ldr	r0, [r7, #24]
 800d5f2:	f7ff fef6 	bl	800d3e2 <put_fat>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d5fa:	7ffb      	ldrb	r3, [r7, #31]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d001      	beq.n	800d604 <remove_chain+0x4a>
 800d600:	7ffb      	ldrb	r3, [r7, #31]
 800d602:	e03b      	b.n	800d67c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d604:	68b9      	ldr	r1, [r7, #8]
 800d606:	68f8      	ldr	r0, [r7, #12]
 800d608:	f7ff fe43 	bl	800d292 <get_fat>
 800d60c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d031      	beq.n	800d678 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	2b01      	cmp	r3, #1
 800d618:	d101      	bne.n	800d61e <remove_chain+0x64>
 800d61a:	2302      	movs	r3, #2
 800d61c:	e02e      	b.n	800d67c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d624:	d101      	bne.n	800d62a <remove_chain+0x70>
 800d626:	2301      	movs	r3, #1
 800d628:	e028      	b.n	800d67c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d62a:	2200      	movs	r2, #0
 800d62c:	68b9      	ldr	r1, [r7, #8]
 800d62e:	69b8      	ldr	r0, [r7, #24]
 800d630:	f7ff fed7 	bl	800d3e2 <put_fat>
 800d634:	4603      	mov	r3, r0
 800d636:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d638:	7ffb      	ldrb	r3, [r7, #31]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d001      	beq.n	800d642 <remove_chain+0x88>
 800d63e:	7ffb      	ldrb	r3, [r7, #31]
 800d640:	e01c      	b.n	800d67c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d642:	69bb      	ldr	r3, [r7, #24]
 800d644:	695a      	ldr	r2, [r3, #20]
 800d646:	69bb      	ldr	r3, [r7, #24]
 800d648:	699b      	ldr	r3, [r3, #24]
 800d64a:	3b02      	subs	r3, #2
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d20b      	bcs.n	800d668 <remove_chain+0xae>
			fs->free_clst++;
 800d650:	69bb      	ldr	r3, [r7, #24]
 800d652:	695b      	ldr	r3, [r3, #20]
 800d654:	1c5a      	adds	r2, r3, #1
 800d656:	69bb      	ldr	r3, [r7, #24]
 800d658:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d65a:	69bb      	ldr	r3, [r7, #24]
 800d65c:	791b      	ldrb	r3, [r3, #4]
 800d65e:	f043 0301 	orr.w	r3, r3, #1
 800d662:	b2da      	uxtb	r2, r3
 800d664:	69bb      	ldr	r3, [r7, #24]
 800d666:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d66c:	69bb      	ldr	r3, [r7, #24]
 800d66e:	699b      	ldr	r3, [r3, #24]
 800d670:	68ba      	ldr	r2, [r7, #8]
 800d672:	429a      	cmp	r2, r3
 800d674:	d3c6      	bcc.n	800d604 <remove_chain+0x4a>
 800d676:	e000      	b.n	800d67a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d678:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d67a:	2300      	movs	r3, #0
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3720      	adds	r7, #32
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}

0800d684 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b088      	sub	sp, #32
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
 800d68c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d10d      	bne.n	800d6b6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	691b      	ldr	r3, [r3, #16]
 800d69e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d6a0:	69bb      	ldr	r3, [r7, #24]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d004      	beq.n	800d6b0 <create_chain+0x2c>
 800d6a6:	693b      	ldr	r3, [r7, #16]
 800d6a8:	699b      	ldr	r3, [r3, #24]
 800d6aa:	69ba      	ldr	r2, [r7, #24]
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	d31b      	bcc.n	800d6e8 <create_chain+0x64>
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	61bb      	str	r3, [r7, #24]
 800d6b4:	e018      	b.n	800d6e8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d6b6:	6839      	ldr	r1, [r7, #0]
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f7ff fdea 	bl	800d292 <get_fat>
 800d6be:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	2b01      	cmp	r3, #1
 800d6c4:	d801      	bhi.n	800d6ca <create_chain+0x46>
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	e070      	b.n	800d7ac <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6d0:	d101      	bne.n	800d6d6 <create_chain+0x52>
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	e06a      	b.n	800d7ac <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d6d6:	693b      	ldr	r3, [r7, #16]
 800d6d8:	699b      	ldr	r3, [r3, #24]
 800d6da:	68fa      	ldr	r2, [r7, #12]
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d201      	bcs.n	800d6e4 <create_chain+0x60>
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	e063      	b.n	800d7ac <create_chain+0x128>
		scl = clst;
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d6e8:	69bb      	ldr	r3, [r7, #24]
 800d6ea:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d6ec:	69fb      	ldr	r3, [r7, #28]
 800d6ee:	3301      	adds	r3, #1
 800d6f0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d6f2:	693b      	ldr	r3, [r7, #16]
 800d6f4:	699b      	ldr	r3, [r3, #24]
 800d6f6:	69fa      	ldr	r2, [r7, #28]
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d307      	bcc.n	800d70c <create_chain+0x88>
				ncl = 2;
 800d6fc:	2302      	movs	r3, #2
 800d6fe:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d700:	69fa      	ldr	r2, [r7, #28]
 800d702:	69bb      	ldr	r3, [r7, #24]
 800d704:	429a      	cmp	r2, r3
 800d706:	d901      	bls.n	800d70c <create_chain+0x88>
 800d708:	2300      	movs	r3, #0
 800d70a:	e04f      	b.n	800d7ac <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d70c:	69f9      	ldr	r1, [r7, #28]
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f7ff fdbf 	bl	800d292 <get_fat>
 800d714:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d00e      	beq.n	800d73a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	2b01      	cmp	r3, #1
 800d720:	d003      	beq.n	800d72a <create_chain+0xa6>
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d728:	d101      	bne.n	800d72e <create_chain+0xaa>
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	e03e      	b.n	800d7ac <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d72e:	69fa      	ldr	r2, [r7, #28]
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	429a      	cmp	r2, r3
 800d734:	d1da      	bne.n	800d6ec <create_chain+0x68>
 800d736:	2300      	movs	r3, #0
 800d738:	e038      	b.n	800d7ac <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d73a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d73c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d740:	69f9      	ldr	r1, [r7, #28]
 800d742:	6938      	ldr	r0, [r7, #16]
 800d744:	f7ff fe4d 	bl	800d3e2 <put_fat>
 800d748:	4603      	mov	r3, r0
 800d74a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d74c:	7dfb      	ldrb	r3, [r7, #23]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d109      	bne.n	800d766 <create_chain+0xe2>
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d006      	beq.n	800d766 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d758:	69fa      	ldr	r2, [r7, #28]
 800d75a:	6839      	ldr	r1, [r7, #0]
 800d75c:	6938      	ldr	r0, [r7, #16]
 800d75e:	f7ff fe40 	bl	800d3e2 <put_fat>
 800d762:	4603      	mov	r3, r0
 800d764:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d766:	7dfb      	ldrb	r3, [r7, #23]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d116      	bne.n	800d79a <create_chain+0x116>
		fs->last_clst = ncl;
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	69fa      	ldr	r2, [r7, #28]
 800d770:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	695a      	ldr	r2, [r3, #20]
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	699b      	ldr	r3, [r3, #24]
 800d77a:	3b02      	subs	r3, #2
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d804      	bhi.n	800d78a <create_chain+0x106>
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	695b      	ldr	r3, [r3, #20]
 800d784:	1e5a      	subs	r2, r3, #1
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	791b      	ldrb	r3, [r3, #4]
 800d78e:	f043 0301 	orr.w	r3, r3, #1
 800d792:	b2da      	uxtb	r2, r3
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	711a      	strb	r2, [r3, #4]
 800d798:	e007      	b.n	800d7aa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d79a:	7dfb      	ldrb	r3, [r7, #23]
 800d79c:	2b01      	cmp	r3, #1
 800d79e:	d102      	bne.n	800d7a6 <create_chain+0x122>
 800d7a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7a4:	e000      	b.n	800d7a8 <create_chain+0x124>
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d7aa:	69fb      	ldr	r3, [r7, #28]
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3720      	adds	r7, #32
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b087      	sub	sp, #28
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c8:	3304      	adds	r3, #4
 800d7ca:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	0a5b      	lsrs	r3, r3, #9
 800d7d0:	68fa      	ldr	r2, [r7, #12]
 800d7d2:	8952      	ldrh	r2, [r2, #10]
 800d7d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7d8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	1d1a      	adds	r2, r3, #4
 800d7de:	613a      	str	r2, [r7, #16]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d101      	bne.n	800d7ee <clmt_clust+0x3a>
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	e010      	b.n	800d810 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d7ee:	697a      	ldr	r2, [r7, #20]
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d307      	bcc.n	800d806 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d7f6:	697a      	ldr	r2, [r7, #20]
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	1ad3      	subs	r3, r2, r3
 800d7fc:	617b      	str	r3, [r7, #20]
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	3304      	adds	r3, #4
 800d802:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d804:	e7e9      	b.n	800d7da <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d806:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	681a      	ldr	r2, [r3, #0]
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	4413      	add	r3, r2
}
 800d810:	4618      	mov	r0, r3
 800d812:	371c      	adds	r7, #28
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr

0800d81c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b086      	sub	sp, #24
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d832:	d204      	bcs.n	800d83e <dir_sdi+0x22>
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	f003 031f 	and.w	r3, r3, #31
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d001      	beq.n	800d842 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d83e:	2302      	movs	r3, #2
 800d840:	e063      	b.n	800d90a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	683a      	ldr	r2, [r7, #0]
 800d846:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	689b      	ldr	r3, [r3, #8]
 800d84c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d106      	bne.n	800d862 <dir_sdi+0x46>
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	781b      	ldrb	r3, [r3, #0]
 800d858:	2b02      	cmp	r3, #2
 800d85a:	d902      	bls.n	800d862 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d85c:	693b      	ldr	r3, [r7, #16]
 800d85e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d860:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d10c      	bne.n	800d882 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	095b      	lsrs	r3, r3, #5
 800d86c:	693a      	ldr	r2, [r7, #16]
 800d86e:	8912      	ldrh	r2, [r2, #8]
 800d870:	4293      	cmp	r3, r2
 800d872:	d301      	bcc.n	800d878 <dir_sdi+0x5c>
 800d874:	2302      	movs	r3, #2
 800d876:	e048      	b.n	800d90a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	61da      	str	r2, [r3, #28]
 800d880:	e029      	b.n	800d8d6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	895b      	ldrh	r3, [r3, #10]
 800d886:	025b      	lsls	r3, r3, #9
 800d888:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d88a:	e019      	b.n	800d8c0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6979      	ldr	r1, [r7, #20]
 800d890:	4618      	mov	r0, r3
 800d892:	f7ff fcfe 	bl	800d292 <get_fat>
 800d896:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d89e:	d101      	bne.n	800d8a4 <dir_sdi+0x88>
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	e032      	b.n	800d90a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	2b01      	cmp	r3, #1
 800d8a8:	d904      	bls.n	800d8b4 <dir_sdi+0x98>
 800d8aa:	693b      	ldr	r3, [r7, #16]
 800d8ac:	699b      	ldr	r3, [r3, #24]
 800d8ae:	697a      	ldr	r2, [r7, #20]
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d301      	bcc.n	800d8b8 <dir_sdi+0x9c>
 800d8b4:	2302      	movs	r3, #2
 800d8b6:	e028      	b.n	800d90a <dir_sdi+0xee>
			ofs -= csz;
 800d8b8:	683a      	ldr	r2, [r7, #0]
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	1ad3      	subs	r3, r2, r3
 800d8be:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d8c0:	683a      	ldr	r2, [r7, #0]
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	429a      	cmp	r2, r3
 800d8c6:	d2e1      	bcs.n	800d88c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d8c8:	6979      	ldr	r1, [r7, #20]
 800d8ca:	6938      	ldr	r0, [r7, #16]
 800d8cc:	f7ff fcc2 	bl	800d254 <clust2sect>
 800d8d0:	4602      	mov	r2, r0
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	697a      	ldr	r2, [r7, #20]
 800d8da:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	69db      	ldr	r3, [r3, #28]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d101      	bne.n	800d8e8 <dir_sdi+0xcc>
 800d8e4:	2302      	movs	r3, #2
 800d8e6:	e010      	b.n	800d90a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	69da      	ldr	r2, [r3, #28]
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	0a5b      	lsrs	r3, r3, #9
 800d8f0:	441a      	add	r2, r3
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d902:	441a      	add	r2, r3
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d908:	2300      	movs	r3, #0
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3718      	adds	r7, #24
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}

0800d912 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d912:	b580      	push	{r7, lr}
 800d914:	b086      	sub	sp, #24
 800d916:	af00      	add	r7, sp, #0
 800d918:	6078      	str	r0, [r7, #4]
 800d91a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	695b      	ldr	r3, [r3, #20]
 800d926:	3320      	adds	r3, #32
 800d928:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	69db      	ldr	r3, [r3, #28]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d003      	beq.n	800d93a <dir_next+0x28>
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d938:	d301      	bcc.n	800d93e <dir_next+0x2c>
 800d93a:	2304      	movs	r3, #4
 800d93c:	e0aa      	b.n	800da94 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d944:	2b00      	cmp	r3, #0
 800d946:	f040 8098 	bne.w	800da7a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	69db      	ldr	r3, [r3, #28]
 800d94e:	1c5a      	adds	r2, r3, #1
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	699b      	ldr	r3, [r3, #24]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d10b      	bne.n	800d974 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	095b      	lsrs	r3, r3, #5
 800d960:	68fa      	ldr	r2, [r7, #12]
 800d962:	8912      	ldrh	r2, [r2, #8]
 800d964:	4293      	cmp	r3, r2
 800d966:	f0c0 8088 	bcc.w	800da7a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2200      	movs	r2, #0
 800d96e:	61da      	str	r2, [r3, #28]
 800d970:	2304      	movs	r3, #4
 800d972:	e08f      	b.n	800da94 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	0a5b      	lsrs	r3, r3, #9
 800d978:	68fa      	ldr	r2, [r7, #12]
 800d97a:	8952      	ldrh	r2, [r2, #10]
 800d97c:	3a01      	subs	r2, #1
 800d97e:	4013      	ands	r3, r2
 800d980:	2b00      	cmp	r3, #0
 800d982:	d17a      	bne.n	800da7a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d984:	687a      	ldr	r2, [r7, #4]
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	699b      	ldr	r3, [r3, #24]
 800d98a:	4619      	mov	r1, r3
 800d98c:	4610      	mov	r0, r2
 800d98e:	f7ff fc80 	bl	800d292 <get_fat>
 800d992:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	2b01      	cmp	r3, #1
 800d998:	d801      	bhi.n	800d99e <dir_next+0x8c>
 800d99a:	2302      	movs	r3, #2
 800d99c:	e07a      	b.n	800da94 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d9a4:	d101      	bne.n	800d9aa <dir_next+0x98>
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	e074      	b.n	800da94 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	699b      	ldr	r3, [r3, #24]
 800d9ae:	697a      	ldr	r2, [r7, #20]
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d358      	bcc.n	800da66 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d104      	bne.n	800d9c4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2200      	movs	r2, #0
 800d9be:	61da      	str	r2, [r3, #28]
 800d9c0:	2304      	movs	r3, #4
 800d9c2:	e067      	b.n	800da94 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d9c4:	687a      	ldr	r2, [r7, #4]
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	699b      	ldr	r3, [r3, #24]
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	4610      	mov	r0, r2
 800d9ce:	f7ff fe59 	bl	800d684 <create_chain>
 800d9d2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d101      	bne.n	800d9de <dir_next+0xcc>
 800d9da:	2307      	movs	r3, #7
 800d9dc:	e05a      	b.n	800da94 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	d101      	bne.n	800d9e8 <dir_next+0xd6>
 800d9e4:	2302      	movs	r3, #2
 800d9e6:	e055      	b.n	800da94 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d9ee:	d101      	bne.n	800d9f4 <dir_next+0xe2>
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	e04f      	b.n	800da94 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d9f4:	68f8      	ldr	r0, [r7, #12]
 800d9f6:	f7ff fb4d 	bl	800d094 <sync_window>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d001      	beq.n	800da04 <dir_next+0xf2>
 800da00:	2301      	movs	r3, #1
 800da02:	e047      	b.n	800da94 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	3334      	adds	r3, #52	; 0x34
 800da08:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da0c:	2100      	movs	r1, #0
 800da0e:	4618      	mov	r0, r3
 800da10:	f7ff f977 	bl	800cd02 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800da14:	2300      	movs	r3, #0
 800da16:	613b      	str	r3, [r7, #16]
 800da18:	6979      	ldr	r1, [r7, #20]
 800da1a:	68f8      	ldr	r0, [r7, #12]
 800da1c:	f7ff fc1a 	bl	800d254 <clust2sect>
 800da20:	4602      	mov	r2, r0
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	631a      	str	r2, [r3, #48]	; 0x30
 800da26:	e012      	b.n	800da4e <dir_next+0x13c>
						fs->wflag = 1;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	2201      	movs	r2, #1
 800da2c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800da2e:	68f8      	ldr	r0, [r7, #12]
 800da30:	f7ff fb30 	bl	800d094 <sync_window>
 800da34:	4603      	mov	r3, r0
 800da36:	2b00      	cmp	r3, #0
 800da38:	d001      	beq.n	800da3e <dir_next+0x12c>
 800da3a:	2301      	movs	r3, #1
 800da3c:	e02a      	b.n	800da94 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	3301      	adds	r3, #1
 800da42:	613b      	str	r3, [r7, #16]
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da48:	1c5a      	adds	r2, r3, #1
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	631a      	str	r2, [r3, #48]	; 0x30
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	895b      	ldrh	r3, [r3, #10]
 800da52:	461a      	mov	r2, r3
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	4293      	cmp	r3, r2
 800da58:	d3e6      	bcc.n	800da28 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	1ad2      	subs	r2, r2, r3
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	697a      	ldr	r2, [r7, #20]
 800da6a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800da6c:	6979      	ldr	r1, [r7, #20]
 800da6e:	68f8      	ldr	r0, [r7, #12]
 800da70:	f7ff fbf0 	bl	800d254 <clust2sect>
 800da74:	4602      	mov	r2, r0
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	68ba      	ldr	r2, [r7, #8]
 800da7e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da8c:	441a      	add	r2, r3
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800da92:	2300      	movs	r3, #0
}
 800da94:	4618      	mov	r0, r3
 800da96:	3718      	adds	r7, #24
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}

0800da9c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b086      	sub	sp, #24
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800daac:	2100      	movs	r1, #0
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f7ff feb4 	bl	800d81c <dir_sdi>
 800dab4:	4603      	mov	r3, r0
 800dab6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dab8:	7dfb      	ldrb	r3, [r7, #23]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d12b      	bne.n	800db16 <dir_alloc+0x7a>
		n = 0;
 800dabe:	2300      	movs	r3, #0
 800dac0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	69db      	ldr	r3, [r3, #28]
 800dac6:	4619      	mov	r1, r3
 800dac8:	68f8      	ldr	r0, [r7, #12]
 800daca:	f7ff fb27 	bl	800d11c <move_window>
 800dace:	4603      	mov	r3, r0
 800dad0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dad2:	7dfb      	ldrb	r3, [r7, #23]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d11d      	bne.n	800db14 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6a1b      	ldr	r3, [r3, #32]
 800dadc:	781b      	ldrb	r3, [r3, #0]
 800dade:	2be5      	cmp	r3, #229	; 0xe5
 800dae0:	d004      	beq.n	800daec <dir_alloc+0x50>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6a1b      	ldr	r3, [r3, #32]
 800dae6:	781b      	ldrb	r3, [r3, #0]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d107      	bne.n	800dafc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	3301      	adds	r3, #1
 800daf0:	613b      	str	r3, [r7, #16]
 800daf2:	693a      	ldr	r2, [r7, #16]
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	429a      	cmp	r2, r3
 800daf8:	d102      	bne.n	800db00 <dir_alloc+0x64>
 800dafa:	e00c      	b.n	800db16 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dafc:	2300      	movs	r3, #0
 800dafe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800db00:	2101      	movs	r1, #1
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f7ff ff05 	bl	800d912 <dir_next>
 800db08:	4603      	mov	r3, r0
 800db0a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800db0c:	7dfb      	ldrb	r3, [r7, #23]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d0d7      	beq.n	800dac2 <dir_alloc+0x26>
 800db12:	e000      	b.n	800db16 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800db14:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800db16:	7dfb      	ldrb	r3, [r7, #23]
 800db18:	2b04      	cmp	r3, #4
 800db1a:	d101      	bne.n	800db20 <dir_alloc+0x84>
 800db1c:	2307      	movs	r3, #7
 800db1e:	75fb      	strb	r3, [r7, #23]
	return res;
 800db20:	7dfb      	ldrb	r3, [r7, #23]
}
 800db22:	4618      	mov	r0, r3
 800db24:	3718      	adds	r7, #24
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}

0800db2a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800db2a:	b580      	push	{r7, lr}
 800db2c:	b084      	sub	sp, #16
 800db2e:	af00      	add	r7, sp, #0
 800db30:	6078      	str	r0, [r7, #4]
 800db32:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	331a      	adds	r3, #26
 800db38:	4618      	mov	r0, r3
 800db3a:	f7ff f83f 	bl	800cbbc <ld_word>
 800db3e:	4603      	mov	r3, r0
 800db40:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	2b03      	cmp	r3, #3
 800db48:	d109      	bne.n	800db5e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	3314      	adds	r3, #20
 800db4e:	4618      	mov	r0, r3
 800db50:	f7ff f834 	bl	800cbbc <ld_word>
 800db54:	4603      	mov	r3, r0
 800db56:	041b      	lsls	r3, r3, #16
 800db58:	68fa      	ldr	r2, [r7, #12]
 800db5a:	4313      	orrs	r3, r2
 800db5c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800db5e:	68fb      	ldr	r3, [r7, #12]
}
 800db60:	4618      	mov	r0, r3
 800db62:	3710      	adds	r7, #16
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b084      	sub	sp, #16
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	60f8      	str	r0, [r7, #12]
 800db70:	60b9      	str	r1, [r7, #8]
 800db72:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	331a      	adds	r3, #26
 800db78:	687a      	ldr	r2, [r7, #4]
 800db7a:	b292      	uxth	r2, r2
 800db7c:	4611      	mov	r1, r2
 800db7e:	4618      	mov	r0, r3
 800db80:	f7ff f857 	bl	800cc32 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	781b      	ldrb	r3, [r3, #0]
 800db88:	2b03      	cmp	r3, #3
 800db8a:	d109      	bne.n	800dba0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	f103 0214 	add.w	r2, r3, #20
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	0c1b      	lsrs	r3, r3, #16
 800db96:	b29b      	uxth	r3, r3
 800db98:	4619      	mov	r1, r3
 800db9a:	4610      	mov	r0, r2
 800db9c:	f7ff f849 	bl	800cc32 <st_word>
	}
}
 800dba0:	bf00      	nop
 800dba2:	3710      	adds	r7, #16
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}

0800dba8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800dba8:	b590      	push	{r4, r7, lr}
 800dbaa:	b087      	sub	sp, #28
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	331a      	adds	r3, #26
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7ff f800 	bl	800cbbc <ld_word>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d001      	beq.n	800dbc6 <cmp_lfn+0x1e>
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	e059      	b.n	800dc7a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dbce:	1e5a      	subs	r2, r3, #1
 800dbd0:	4613      	mov	r3, r2
 800dbd2:	005b      	lsls	r3, r3, #1
 800dbd4:	4413      	add	r3, r2
 800dbd6:	009b      	lsls	r3, r3, #2
 800dbd8:	4413      	add	r3, r2
 800dbda:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dbdc:	2301      	movs	r3, #1
 800dbde:	81fb      	strh	r3, [r7, #14]
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	613b      	str	r3, [r7, #16]
 800dbe4:	e033      	b.n	800dc4e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800dbe6:	4a27      	ldr	r2, [pc, #156]	; (800dc84 <cmp_lfn+0xdc>)
 800dbe8:	693b      	ldr	r3, [r7, #16]
 800dbea:	4413      	add	r3, r2
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	461a      	mov	r2, r3
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	4413      	add	r3, r2
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f7fe ffe1 	bl	800cbbc <ld_word>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800dbfe:	89fb      	ldrh	r3, [r7, #14]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d01a      	beq.n	800dc3a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	2bfe      	cmp	r3, #254	; 0xfe
 800dc08:	d812      	bhi.n	800dc30 <cmp_lfn+0x88>
 800dc0a:	89bb      	ldrh	r3, [r7, #12]
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f001 fcd9 	bl	800f5c4 <ff_wtoupper>
 800dc12:	4603      	mov	r3, r0
 800dc14:	461c      	mov	r4, r3
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	1c5a      	adds	r2, r3, #1
 800dc1a:	617a      	str	r2, [r7, #20]
 800dc1c:	005b      	lsls	r3, r3, #1
 800dc1e:	687a      	ldr	r2, [r7, #4]
 800dc20:	4413      	add	r3, r2
 800dc22:	881b      	ldrh	r3, [r3, #0]
 800dc24:	4618      	mov	r0, r3
 800dc26:	f001 fccd 	bl	800f5c4 <ff_wtoupper>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	429c      	cmp	r4, r3
 800dc2e:	d001      	beq.n	800dc34 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800dc30:	2300      	movs	r3, #0
 800dc32:	e022      	b.n	800dc7a <cmp_lfn+0xd2>
			}
			wc = uc;
 800dc34:	89bb      	ldrh	r3, [r7, #12]
 800dc36:	81fb      	strh	r3, [r7, #14]
 800dc38:	e006      	b.n	800dc48 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800dc3a:	89bb      	ldrh	r3, [r7, #12]
 800dc3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc40:	4293      	cmp	r3, r2
 800dc42:	d001      	beq.n	800dc48 <cmp_lfn+0xa0>
 800dc44:	2300      	movs	r3, #0
 800dc46:	e018      	b.n	800dc7a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dc48:	693b      	ldr	r3, [r7, #16]
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	613b      	str	r3, [r7, #16]
 800dc4e:	693b      	ldr	r3, [r7, #16]
 800dc50:	2b0c      	cmp	r3, #12
 800dc52:	d9c8      	bls.n	800dbe6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d00b      	beq.n	800dc78 <cmp_lfn+0xd0>
 800dc60:	89fb      	ldrh	r3, [r7, #14]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d008      	beq.n	800dc78 <cmp_lfn+0xd0>
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	005b      	lsls	r3, r3, #1
 800dc6a:	687a      	ldr	r2, [r7, #4]
 800dc6c:	4413      	add	r3, r2
 800dc6e:	881b      	ldrh	r3, [r3, #0]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d001      	beq.n	800dc78 <cmp_lfn+0xd0>
 800dc74:	2300      	movs	r3, #0
 800dc76:	e000      	b.n	800dc7a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800dc78:	2301      	movs	r3, #1
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	371c      	adds	r7, #28
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd90      	pop	{r4, r7, pc}
 800dc82:	bf00      	nop
 800dc84:	08010864 	.word	0x08010864

0800dc88 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b088      	sub	sp, #32
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	60f8      	str	r0, [r7, #12]
 800dc90:	60b9      	str	r1, [r7, #8]
 800dc92:	4611      	mov	r1, r2
 800dc94:	461a      	mov	r2, r3
 800dc96:	460b      	mov	r3, r1
 800dc98:	71fb      	strb	r3, [r7, #7]
 800dc9a:	4613      	mov	r3, r2
 800dc9c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	330d      	adds	r3, #13
 800dca2:	79ba      	ldrb	r2, [r7, #6]
 800dca4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	330b      	adds	r3, #11
 800dcaa:	220f      	movs	r2, #15
 800dcac:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	330c      	adds	r3, #12
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	331a      	adds	r3, #26
 800dcba:	2100      	movs	r1, #0
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7fe ffb8 	bl	800cc32 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800dcc2:	79fb      	ldrb	r3, [r7, #7]
 800dcc4:	1e5a      	subs	r2, r3, #1
 800dcc6:	4613      	mov	r3, r2
 800dcc8:	005b      	lsls	r3, r3, #1
 800dcca:	4413      	add	r3, r2
 800dccc:	009b      	lsls	r3, r3, #2
 800dcce:	4413      	add	r3, r2
 800dcd0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	82fb      	strh	r3, [r7, #22]
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800dcda:	8afb      	ldrh	r3, [r7, #22]
 800dcdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dce0:	4293      	cmp	r3, r2
 800dce2:	d007      	beq.n	800dcf4 <put_lfn+0x6c>
 800dce4:	69fb      	ldr	r3, [r7, #28]
 800dce6:	1c5a      	adds	r2, r3, #1
 800dce8:	61fa      	str	r2, [r7, #28]
 800dcea:	005b      	lsls	r3, r3, #1
 800dcec:	68fa      	ldr	r2, [r7, #12]
 800dcee:	4413      	add	r3, r2
 800dcf0:	881b      	ldrh	r3, [r3, #0]
 800dcf2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800dcf4:	4a17      	ldr	r2, [pc, #92]	; (800dd54 <put_lfn+0xcc>)
 800dcf6:	69bb      	ldr	r3, [r7, #24]
 800dcf8:	4413      	add	r3, r2
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	68bb      	ldr	r3, [r7, #8]
 800dd00:	4413      	add	r3, r2
 800dd02:	8afa      	ldrh	r2, [r7, #22]
 800dd04:	4611      	mov	r1, r2
 800dd06:	4618      	mov	r0, r3
 800dd08:	f7fe ff93 	bl	800cc32 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800dd0c:	8afb      	ldrh	r3, [r7, #22]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d102      	bne.n	800dd18 <put_lfn+0x90>
 800dd12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dd16:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800dd18:	69bb      	ldr	r3, [r7, #24]
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	61bb      	str	r3, [r7, #24]
 800dd1e:	69bb      	ldr	r3, [r7, #24]
 800dd20:	2b0c      	cmp	r3, #12
 800dd22:	d9da      	bls.n	800dcda <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800dd24:	8afb      	ldrh	r3, [r7, #22]
 800dd26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	d006      	beq.n	800dd3c <put_lfn+0xb4>
 800dd2e:	69fb      	ldr	r3, [r7, #28]
 800dd30:	005b      	lsls	r3, r3, #1
 800dd32:	68fa      	ldr	r2, [r7, #12]
 800dd34:	4413      	add	r3, r2
 800dd36:	881b      	ldrh	r3, [r3, #0]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d103      	bne.n	800dd44 <put_lfn+0xbc>
 800dd3c:	79fb      	ldrb	r3, [r7, #7]
 800dd3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd42:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	79fa      	ldrb	r2, [r7, #7]
 800dd48:	701a      	strb	r2, [r3, #0]
}
 800dd4a:	bf00      	nop
 800dd4c:	3720      	adds	r7, #32
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}
 800dd52:	bf00      	nop
 800dd54:	08010864 	.word	0x08010864

0800dd58 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b08c      	sub	sp, #48	; 0x30
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	60f8      	str	r0, [r7, #12]
 800dd60:	60b9      	str	r1, [r7, #8]
 800dd62:	607a      	str	r2, [r7, #4]
 800dd64:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800dd66:	220b      	movs	r2, #11
 800dd68:	68b9      	ldr	r1, [r7, #8]
 800dd6a:	68f8      	ldr	r0, [r7, #12]
 800dd6c:	f7fe ffa8 	bl	800ccc0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	2b05      	cmp	r3, #5
 800dd74:	d929      	bls.n	800ddca <gen_numname+0x72>
		sr = seq;
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800dd7a:	e020      	b.n	800ddbe <gen_numname+0x66>
			wc = *lfn++;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	1c9a      	adds	r2, r3, #2
 800dd80:	607a      	str	r2, [r7, #4]
 800dd82:	881b      	ldrh	r3, [r3, #0]
 800dd84:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800dd86:	2300      	movs	r3, #0
 800dd88:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd8a:	e015      	b.n	800ddb8 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800dd8c:	69fb      	ldr	r3, [r7, #28]
 800dd8e:	005a      	lsls	r2, r3, #1
 800dd90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dd92:	f003 0301 	and.w	r3, r3, #1
 800dd96:	4413      	add	r3, r2
 800dd98:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800dd9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dd9c:	085b      	lsrs	r3, r3, #1
 800dd9e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800dda0:	69fb      	ldr	r3, [r7, #28]
 800dda2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d003      	beq.n	800ddb2 <gen_numname+0x5a>
 800ddaa:	69fa      	ldr	r2, [r7, #28]
 800ddac:	4b30      	ldr	r3, [pc, #192]	; (800de70 <gen_numname+0x118>)
 800ddae:	4053      	eors	r3, r2
 800ddb0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ddb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb4:	3301      	adds	r3, #1
 800ddb6:	62bb      	str	r3, [r7, #40]	; 0x28
 800ddb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddba:	2b0f      	cmp	r3, #15
 800ddbc:	d9e6      	bls.n	800dd8c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	881b      	ldrh	r3, [r3, #0]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d1da      	bne.n	800dd7c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ddc6:	69fb      	ldr	r3, [r7, #28]
 800ddc8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ddca:	2307      	movs	r3, #7
 800ddcc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	f003 030f 	and.w	r3, r3, #15
 800ddd6:	b2db      	uxtb	r3, r3
 800ddd8:	3330      	adds	r3, #48	; 0x30
 800ddda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800ddde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dde2:	2b39      	cmp	r3, #57	; 0x39
 800dde4:	d904      	bls.n	800ddf0 <gen_numname+0x98>
 800dde6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ddea:	3307      	adds	r3, #7
 800ddec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800ddf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf2:	1e5a      	subs	r2, r3, #1
 800ddf4:	62ba      	str	r2, [r7, #40]	; 0x28
 800ddf6:	3330      	adds	r3, #48	; 0x30
 800ddf8:	443b      	add	r3, r7
 800ddfa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ddfe:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	091b      	lsrs	r3, r3, #4
 800de06:	603b      	str	r3, [r7, #0]
	} while (seq);
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d1df      	bne.n	800ddce <gen_numname+0x76>
	ns[i] = '~';
 800de0e:	f107 0214 	add.w	r2, r7, #20
 800de12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de14:	4413      	add	r3, r2
 800de16:	227e      	movs	r2, #126	; 0x7e
 800de18:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800de1a:	2300      	movs	r3, #0
 800de1c:	627b      	str	r3, [r7, #36]	; 0x24
 800de1e:	e002      	b.n	800de26 <gen_numname+0xce>
 800de20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de22:	3301      	adds	r3, #1
 800de24:	627b      	str	r3, [r7, #36]	; 0x24
 800de26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2a:	429a      	cmp	r2, r3
 800de2c:	d205      	bcs.n	800de3a <gen_numname+0xe2>
 800de2e:	68fa      	ldr	r2, [r7, #12]
 800de30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de32:	4413      	add	r3, r2
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	2b20      	cmp	r3, #32
 800de38:	d1f2      	bne.n	800de20 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800de3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de3c:	2b07      	cmp	r3, #7
 800de3e:	d807      	bhi.n	800de50 <gen_numname+0xf8>
 800de40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de42:	1c5a      	adds	r2, r3, #1
 800de44:	62ba      	str	r2, [r7, #40]	; 0x28
 800de46:	3330      	adds	r3, #48	; 0x30
 800de48:	443b      	add	r3, r7
 800de4a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800de4e:	e000      	b.n	800de52 <gen_numname+0xfa>
 800de50:	2120      	movs	r1, #32
 800de52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de54:	1c5a      	adds	r2, r3, #1
 800de56:	627a      	str	r2, [r7, #36]	; 0x24
 800de58:	68fa      	ldr	r2, [r7, #12]
 800de5a:	4413      	add	r3, r2
 800de5c:	460a      	mov	r2, r1
 800de5e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800de60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de62:	2b07      	cmp	r3, #7
 800de64:	d9e9      	bls.n	800de3a <gen_numname+0xe2>
}
 800de66:	bf00      	nop
 800de68:	bf00      	nop
 800de6a:	3730      	adds	r7, #48	; 0x30
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}
 800de70:	00011021 	.word	0x00011021

0800de74 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800de74:	b480      	push	{r7}
 800de76:	b085      	sub	sp, #20
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800de7c:	2300      	movs	r3, #0
 800de7e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800de80:	230b      	movs	r3, #11
 800de82:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800de84:	7bfb      	ldrb	r3, [r7, #15]
 800de86:	b2da      	uxtb	r2, r3
 800de88:	0852      	lsrs	r2, r2, #1
 800de8a:	01db      	lsls	r3, r3, #7
 800de8c:	4313      	orrs	r3, r2
 800de8e:	b2da      	uxtb	r2, r3
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	1c59      	adds	r1, r3, #1
 800de94:	6079      	str	r1, [r7, #4]
 800de96:	781b      	ldrb	r3, [r3, #0]
 800de98:	4413      	add	r3, r2
 800de9a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	3b01      	subs	r3, #1
 800dea0:	60bb      	str	r3, [r7, #8]
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d1ed      	bne.n	800de84 <sum_sfn+0x10>
	return sum;
 800dea8:	7bfb      	ldrb	r3, [r7, #15]
}
 800deaa:	4618      	mov	r0, r3
 800deac:	3714      	adds	r7, #20
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr

0800deb6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800deb6:	b580      	push	{r7, lr}
 800deb8:	b086      	sub	sp, #24
 800deba:	af00      	add	r7, sp, #0
 800debc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800dec4:	2100      	movs	r1, #0
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f7ff fca8 	bl	800d81c <dir_sdi>
 800decc:	4603      	mov	r3, r0
 800dece:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ded0:	7dfb      	ldrb	r3, [r7, #23]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d001      	beq.n	800deda <dir_find+0x24>
 800ded6:	7dfb      	ldrb	r3, [r7, #23]
 800ded8:	e0a9      	b.n	800e02e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800deda:	23ff      	movs	r3, #255	; 0xff
 800dedc:	753b      	strb	r3, [r7, #20]
 800dede:	7d3b      	ldrb	r3, [r7, #20]
 800dee0:	757b      	strb	r3, [r7, #21]
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dee8:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	69db      	ldr	r3, [r3, #28]
 800deee:	4619      	mov	r1, r3
 800def0:	6938      	ldr	r0, [r7, #16]
 800def2:	f7ff f913 	bl	800d11c <move_window>
 800def6:	4603      	mov	r3, r0
 800def8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800defa:	7dfb      	ldrb	r3, [r7, #23]
 800defc:	2b00      	cmp	r3, #0
 800defe:	f040 8090 	bne.w	800e022 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6a1b      	ldr	r3, [r3, #32]
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800df0a:	7dbb      	ldrb	r3, [r7, #22]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d102      	bne.n	800df16 <dir_find+0x60>
 800df10:	2304      	movs	r3, #4
 800df12:	75fb      	strb	r3, [r7, #23]
 800df14:	e08a      	b.n	800e02c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6a1b      	ldr	r3, [r3, #32]
 800df1a:	330b      	adds	r3, #11
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800df22:	73fb      	strb	r3, [r7, #15]
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	7bfa      	ldrb	r2, [r7, #15]
 800df28:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800df2a:	7dbb      	ldrb	r3, [r7, #22]
 800df2c:	2be5      	cmp	r3, #229	; 0xe5
 800df2e:	d007      	beq.n	800df40 <dir_find+0x8a>
 800df30:	7bfb      	ldrb	r3, [r7, #15]
 800df32:	f003 0308 	and.w	r3, r3, #8
 800df36:	2b00      	cmp	r3, #0
 800df38:	d009      	beq.n	800df4e <dir_find+0x98>
 800df3a:	7bfb      	ldrb	r3, [r7, #15]
 800df3c:	2b0f      	cmp	r3, #15
 800df3e:	d006      	beq.n	800df4e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800df40:	23ff      	movs	r3, #255	; 0xff
 800df42:	757b      	strb	r3, [r7, #21]
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df4a:	631a      	str	r2, [r3, #48]	; 0x30
 800df4c:	e05e      	b.n	800e00c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800df4e:	7bfb      	ldrb	r3, [r7, #15]
 800df50:	2b0f      	cmp	r3, #15
 800df52:	d136      	bne.n	800dfc2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800df5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d154      	bne.n	800e00c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800df62:	7dbb      	ldrb	r3, [r7, #22]
 800df64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d00d      	beq.n	800df88 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6a1b      	ldr	r3, [r3, #32]
 800df70:	7b5b      	ldrb	r3, [r3, #13]
 800df72:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800df74:	7dbb      	ldrb	r3, [r7, #22]
 800df76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df7a:	75bb      	strb	r3, [r7, #22]
 800df7c:	7dbb      	ldrb	r3, [r7, #22]
 800df7e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	695a      	ldr	r2, [r3, #20]
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800df88:	7dba      	ldrb	r2, [r7, #22]
 800df8a:	7d7b      	ldrb	r3, [r7, #21]
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d115      	bne.n	800dfbc <dir_find+0x106>
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	6a1b      	ldr	r3, [r3, #32]
 800df94:	330d      	adds	r3, #13
 800df96:	781b      	ldrb	r3, [r3, #0]
 800df98:	7d3a      	ldrb	r2, [r7, #20]
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d10e      	bne.n	800dfbc <dir_find+0x106>
 800df9e:	693b      	ldr	r3, [r7, #16]
 800dfa0:	68da      	ldr	r2, [r3, #12]
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6a1b      	ldr	r3, [r3, #32]
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	4610      	mov	r0, r2
 800dfaa:	f7ff fdfd 	bl	800dba8 <cmp_lfn>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d003      	beq.n	800dfbc <dir_find+0x106>
 800dfb4:	7d7b      	ldrb	r3, [r7, #21]
 800dfb6:	3b01      	subs	r3, #1
 800dfb8:	b2db      	uxtb	r3, r3
 800dfba:	e000      	b.n	800dfbe <dir_find+0x108>
 800dfbc:	23ff      	movs	r3, #255	; 0xff
 800dfbe:	757b      	strb	r3, [r7, #21]
 800dfc0:	e024      	b.n	800e00c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800dfc2:	7d7b      	ldrb	r3, [r7, #21]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d109      	bne.n	800dfdc <dir_find+0x126>
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	6a1b      	ldr	r3, [r3, #32]
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f7ff ff51 	bl	800de74 <sum_sfn>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	461a      	mov	r2, r3
 800dfd6:	7d3b      	ldrb	r3, [r7, #20]
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	d024      	beq.n	800e026 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dfe2:	f003 0301 	and.w	r3, r3, #1
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d10a      	bne.n	800e000 <dir_find+0x14a>
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6a18      	ldr	r0, [r3, #32]
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	3324      	adds	r3, #36	; 0x24
 800dff2:	220b      	movs	r2, #11
 800dff4:	4619      	mov	r1, r3
 800dff6:	f7fe fe9f 	bl	800cd38 <mem_cmp>
 800dffa:	4603      	mov	r3, r0
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d014      	beq.n	800e02a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e000:	23ff      	movs	r3, #255	; 0xff
 800e002:	757b      	strb	r3, [r7, #21]
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e00a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e00c:	2100      	movs	r1, #0
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f7ff fc7f 	bl	800d912 <dir_next>
 800e014:	4603      	mov	r3, r0
 800e016:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e018:	7dfb      	ldrb	r3, [r7, #23]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	f43f af65 	beq.w	800deea <dir_find+0x34>
 800e020:	e004      	b.n	800e02c <dir_find+0x176>
		if (res != FR_OK) break;
 800e022:	bf00      	nop
 800e024:	e002      	b.n	800e02c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e026:	bf00      	nop
 800e028:	e000      	b.n	800e02c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e02a:	bf00      	nop

	return res;
 800e02c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e02e:	4618      	mov	r0, r3
 800e030:	3718      	adds	r7, #24
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}
	...

0800e038 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b08c      	sub	sp, #48	; 0x30
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e04c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e050:	2b00      	cmp	r3, #0
 800e052:	d001      	beq.n	800e058 <dir_register+0x20>
 800e054:	2306      	movs	r3, #6
 800e056:	e0e0      	b.n	800e21a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e058:	2300      	movs	r3, #0
 800e05a:	627b      	str	r3, [r7, #36]	; 0x24
 800e05c:	e002      	b.n	800e064 <dir_register+0x2c>
 800e05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e060:	3301      	adds	r3, #1
 800e062:	627b      	str	r3, [r7, #36]	; 0x24
 800e064:	69fb      	ldr	r3, [r7, #28]
 800e066:	68da      	ldr	r2, [r3, #12]
 800e068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e06a:	005b      	lsls	r3, r3, #1
 800e06c:	4413      	add	r3, r2
 800e06e:	881b      	ldrh	r3, [r3, #0]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d1f4      	bne.n	800e05e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800e07a:	f107 030c 	add.w	r3, r7, #12
 800e07e:	220c      	movs	r2, #12
 800e080:	4618      	mov	r0, r3
 800e082:	f7fe fe1d 	bl	800ccc0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e086:	7dfb      	ldrb	r3, [r7, #23]
 800e088:	f003 0301 	and.w	r3, r3, #1
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d032      	beq.n	800e0f6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2240      	movs	r2, #64	; 0x40
 800e094:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800e098:	2301      	movs	r3, #1
 800e09a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e09c:	e016      	b.n	800e0cc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800e0a4:	69fb      	ldr	r3, [r7, #28]
 800e0a6:	68da      	ldr	r2, [r3, #12]
 800e0a8:	f107 010c 	add.w	r1, r7, #12
 800e0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ae:	f7ff fe53 	bl	800dd58 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f7ff feff 	bl	800deb6 <dir_find>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800e0be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d106      	bne.n	800e0d4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c8:	3301      	adds	r3, #1
 800e0ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800e0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ce:	2b63      	cmp	r3, #99	; 0x63
 800e0d0:	d9e5      	bls.n	800e09e <dir_register+0x66>
 800e0d2:	e000      	b.n	800e0d6 <dir_register+0x9e>
			if (res != FR_OK) break;
 800e0d4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d8:	2b64      	cmp	r3, #100	; 0x64
 800e0da:	d101      	bne.n	800e0e0 <dir_register+0xa8>
 800e0dc:	2307      	movs	r3, #7
 800e0de:	e09c      	b.n	800e21a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e0e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e0e4:	2b04      	cmp	r3, #4
 800e0e6:	d002      	beq.n	800e0ee <dir_register+0xb6>
 800e0e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e0ec:	e095      	b.n	800e21a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e0ee:	7dfa      	ldrb	r2, [r7, #23]
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e0f6:	7dfb      	ldrb	r3, [r7, #23]
 800e0f8:	f003 0302 	and.w	r3, r3, #2
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d007      	beq.n	800e110 <dir_register+0xd8>
 800e100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e102:	330c      	adds	r3, #12
 800e104:	4a47      	ldr	r2, [pc, #284]	; (800e224 <dir_register+0x1ec>)
 800e106:	fba2 2303 	umull	r2, r3, r2, r3
 800e10a:	089b      	lsrs	r3, r3, #2
 800e10c:	3301      	adds	r3, #1
 800e10e:	e000      	b.n	800e112 <dir_register+0xda>
 800e110:	2301      	movs	r3, #1
 800e112:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e114:	6a39      	ldr	r1, [r7, #32]
 800e116:	6878      	ldr	r0, [r7, #4]
 800e118:	f7ff fcc0 	bl	800da9c <dir_alloc>
 800e11c:	4603      	mov	r3, r0
 800e11e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e122:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e126:	2b00      	cmp	r3, #0
 800e128:	d148      	bne.n	800e1bc <dir_register+0x184>
 800e12a:	6a3b      	ldr	r3, [r7, #32]
 800e12c:	3b01      	subs	r3, #1
 800e12e:	623b      	str	r3, [r7, #32]
 800e130:	6a3b      	ldr	r3, [r7, #32]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d042      	beq.n	800e1bc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	695a      	ldr	r2, [r3, #20]
 800e13a:	6a3b      	ldr	r3, [r7, #32]
 800e13c:	015b      	lsls	r3, r3, #5
 800e13e:	1ad3      	subs	r3, r2, r3
 800e140:	4619      	mov	r1, r3
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f7ff fb6a 	bl	800d81c <dir_sdi>
 800e148:	4603      	mov	r3, r0
 800e14a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e14e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e152:	2b00      	cmp	r3, #0
 800e154:	d132      	bne.n	800e1bc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	3324      	adds	r3, #36	; 0x24
 800e15a:	4618      	mov	r0, r3
 800e15c:	f7ff fe8a 	bl	800de74 <sum_sfn>
 800e160:	4603      	mov	r3, r0
 800e162:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	69db      	ldr	r3, [r3, #28]
 800e168:	4619      	mov	r1, r3
 800e16a:	69f8      	ldr	r0, [r7, #28]
 800e16c:	f7fe ffd6 	bl	800d11c <move_window>
 800e170:	4603      	mov	r3, r0
 800e172:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800e176:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d11d      	bne.n	800e1ba <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e17e:	69fb      	ldr	r3, [r7, #28]
 800e180:	68d8      	ldr	r0, [r3, #12]
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6a19      	ldr	r1, [r3, #32]
 800e186:	6a3b      	ldr	r3, [r7, #32]
 800e188:	b2da      	uxtb	r2, r3
 800e18a:	7efb      	ldrb	r3, [r7, #27]
 800e18c:	f7ff fd7c 	bl	800dc88 <put_lfn>
				fs->wflag = 1;
 800e190:	69fb      	ldr	r3, [r7, #28]
 800e192:	2201      	movs	r2, #1
 800e194:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e196:	2100      	movs	r1, #0
 800e198:	6878      	ldr	r0, [r7, #4]
 800e19a:	f7ff fbba 	bl	800d912 <dir_next>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800e1a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d107      	bne.n	800e1bc <dir_register+0x184>
 800e1ac:	6a3b      	ldr	r3, [r7, #32]
 800e1ae:	3b01      	subs	r3, #1
 800e1b0:	623b      	str	r3, [r7, #32]
 800e1b2:	6a3b      	ldr	r3, [r7, #32]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d1d5      	bne.n	800e164 <dir_register+0x12c>
 800e1b8:	e000      	b.n	800e1bc <dir_register+0x184>
				if (res != FR_OK) break;
 800e1ba:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e1bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d128      	bne.n	800e216 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	69db      	ldr	r3, [r3, #28]
 800e1c8:	4619      	mov	r1, r3
 800e1ca:	69f8      	ldr	r0, [r7, #28]
 800e1cc:	f7fe ffa6 	bl	800d11c <move_window>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e1d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d11b      	bne.n	800e216 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6a1b      	ldr	r3, [r3, #32]
 800e1e2:	2220      	movs	r2, #32
 800e1e4:	2100      	movs	r1, #0
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	f7fe fd8b 	bl	800cd02 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6a18      	ldr	r0, [r3, #32]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	3324      	adds	r3, #36	; 0x24
 800e1f4:	220b      	movs	r2, #11
 800e1f6:	4619      	mov	r1, r3
 800e1f8:	f7fe fd62 	bl	800ccc0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	6a1b      	ldr	r3, [r3, #32]
 800e206:	330c      	adds	r3, #12
 800e208:	f002 0218 	and.w	r2, r2, #24
 800e20c:	b2d2      	uxtb	r2, r2
 800e20e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e210:	69fb      	ldr	r3, [r7, #28]
 800e212:	2201      	movs	r2, #1
 800e214:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e216:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	3730      	adds	r7, #48	; 0x30
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}
 800e222:	bf00      	nop
 800e224:	4ec4ec4f 	.word	0x4ec4ec4f

0800e228 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b08a      	sub	sp, #40	; 0x28
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	613b      	str	r3, [r7, #16]
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	68db      	ldr	r3, [r3, #12]
 800e23e:	60fb      	str	r3, [r7, #12]
 800e240:	2300      	movs	r3, #0
 800e242:	617b      	str	r3, [r7, #20]
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e248:	69bb      	ldr	r3, [r7, #24]
 800e24a:	1c5a      	adds	r2, r3, #1
 800e24c:	61ba      	str	r2, [r7, #24]
 800e24e:	693a      	ldr	r2, [r7, #16]
 800e250:	4413      	add	r3, r2
 800e252:	781b      	ldrb	r3, [r3, #0]
 800e254:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e256:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e258:	2b1f      	cmp	r3, #31
 800e25a:	d940      	bls.n	800e2de <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e25c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e25e:	2b2f      	cmp	r3, #47	; 0x2f
 800e260:	d006      	beq.n	800e270 <create_name+0x48>
 800e262:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e264:	2b5c      	cmp	r3, #92	; 0x5c
 800e266:	d110      	bne.n	800e28a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e268:	e002      	b.n	800e270 <create_name+0x48>
 800e26a:	69bb      	ldr	r3, [r7, #24]
 800e26c:	3301      	adds	r3, #1
 800e26e:	61bb      	str	r3, [r7, #24]
 800e270:	693a      	ldr	r2, [r7, #16]
 800e272:	69bb      	ldr	r3, [r7, #24]
 800e274:	4413      	add	r3, r2
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	2b2f      	cmp	r3, #47	; 0x2f
 800e27a:	d0f6      	beq.n	800e26a <create_name+0x42>
 800e27c:	693a      	ldr	r2, [r7, #16]
 800e27e:	69bb      	ldr	r3, [r7, #24]
 800e280:	4413      	add	r3, r2
 800e282:	781b      	ldrb	r3, [r3, #0]
 800e284:	2b5c      	cmp	r3, #92	; 0x5c
 800e286:	d0f0      	beq.n	800e26a <create_name+0x42>
			break;
 800e288:	e02a      	b.n	800e2e0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	2bfe      	cmp	r3, #254	; 0xfe
 800e28e:	d901      	bls.n	800e294 <create_name+0x6c>
 800e290:	2306      	movs	r3, #6
 800e292:	e17d      	b.n	800e590 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e294:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e296:	b2db      	uxtb	r3, r3
 800e298:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e29a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e29c:	2101      	movs	r1, #1
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f001 f954 	bl	800f54c <ff_convert>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e2a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d101      	bne.n	800e2b2 <create_name+0x8a>
 800e2ae:	2306      	movs	r3, #6
 800e2b0:	e16e      	b.n	800e590 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e2b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2b4:	2b7f      	cmp	r3, #127	; 0x7f
 800e2b6:	d809      	bhi.n	800e2cc <create_name+0xa4>
 800e2b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2ba:	4619      	mov	r1, r3
 800e2bc:	488d      	ldr	r0, [pc, #564]	; (800e4f4 <create_name+0x2cc>)
 800e2be:	f7fe fd62 	bl	800cd86 <chk_chr>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d001      	beq.n	800e2cc <create_name+0xa4>
 800e2c8:	2306      	movs	r3, #6
 800e2ca:	e161      	b.n	800e590 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	1c5a      	adds	r2, r3, #1
 800e2d0:	617a      	str	r2, [r7, #20]
 800e2d2:	005b      	lsls	r3, r3, #1
 800e2d4:	68fa      	ldr	r2, [r7, #12]
 800e2d6:	4413      	add	r3, r2
 800e2d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e2da:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e2dc:	e7b4      	b.n	800e248 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e2de:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e2e0:	693a      	ldr	r2, [r7, #16]
 800e2e2:	69bb      	ldr	r3, [r7, #24]
 800e2e4:	441a      	add	r2, r3
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e2ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2ec:	2b1f      	cmp	r3, #31
 800e2ee:	d801      	bhi.n	800e2f4 <create_name+0xcc>
 800e2f0:	2304      	movs	r3, #4
 800e2f2:	e000      	b.n	800e2f6 <create_name+0xce>
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e2fa:	e011      	b.n	800e320 <create_name+0xf8>
		w = lfn[di - 1];
 800e2fc:	697a      	ldr	r2, [r7, #20]
 800e2fe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e302:	4413      	add	r3, r2
 800e304:	005b      	lsls	r3, r3, #1
 800e306:	68fa      	ldr	r2, [r7, #12]
 800e308:	4413      	add	r3, r2
 800e30a:	881b      	ldrh	r3, [r3, #0]
 800e30c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e30e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e310:	2b20      	cmp	r3, #32
 800e312:	d002      	beq.n	800e31a <create_name+0xf2>
 800e314:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e316:	2b2e      	cmp	r3, #46	; 0x2e
 800e318:	d106      	bne.n	800e328 <create_name+0x100>
		di--;
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	3b01      	subs	r3, #1
 800e31e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d1ea      	bne.n	800e2fc <create_name+0xd4>
 800e326:	e000      	b.n	800e32a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e328:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e32a:	697b      	ldr	r3, [r7, #20]
 800e32c:	005b      	lsls	r3, r3, #1
 800e32e:	68fa      	ldr	r2, [r7, #12]
 800e330:	4413      	add	r3, r2
 800e332:	2200      	movs	r2, #0
 800e334:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d101      	bne.n	800e340 <create_name+0x118>
 800e33c:	2306      	movs	r3, #6
 800e33e:	e127      	b.n	800e590 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	3324      	adds	r3, #36	; 0x24
 800e344:	220b      	movs	r2, #11
 800e346:	2120      	movs	r1, #32
 800e348:	4618      	mov	r0, r3
 800e34a:	f7fe fcda 	bl	800cd02 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e34e:	2300      	movs	r3, #0
 800e350:	61bb      	str	r3, [r7, #24]
 800e352:	e002      	b.n	800e35a <create_name+0x132>
 800e354:	69bb      	ldr	r3, [r7, #24]
 800e356:	3301      	adds	r3, #1
 800e358:	61bb      	str	r3, [r7, #24]
 800e35a:	69bb      	ldr	r3, [r7, #24]
 800e35c:	005b      	lsls	r3, r3, #1
 800e35e:	68fa      	ldr	r2, [r7, #12]
 800e360:	4413      	add	r3, r2
 800e362:	881b      	ldrh	r3, [r3, #0]
 800e364:	2b20      	cmp	r3, #32
 800e366:	d0f5      	beq.n	800e354 <create_name+0x12c>
 800e368:	69bb      	ldr	r3, [r7, #24]
 800e36a:	005b      	lsls	r3, r3, #1
 800e36c:	68fa      	ldr	r2, [r7, #12]
 800e36e:	4413      	add	r3, r2
 800e370:	881b      	ldrh	r3, [r3, #0]
 800e372:	2b2e      	cmp	r3, #46	; 0x2e
 800e374:	d0ee      	beq.n	800e354 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e376:	69bb      	ldr	r3, [r7, #24]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d009      	beq.n	800e390 <create_name+0x168>
 800e37c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e380:	f043 0303 	orr.w	r3, r3, #3
 800e384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e388:	e002      	b.n	800e390 <create_name+0x168>
 800e38a:	697b      	ldr	r3, [r7, #20]
 800e38c:	3b01      	subs	r3, #1
 800e38e:	617b      	str	r3, [r7, #20]
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d009      	beq.n	800e3aa <create_name+0x182>
 800e396:	697a      	ldr	r2, [r7, #20]
 800e398:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e39c:	4413      	add	r3, r2
 800e39e:	005b      	lsls	r3, r3, #1
 800e3a0:	68fa      	ldr	r2, [r7, #12]
 800e3a2:	4413      	add	r3, r2
 800e3a4:	881b      	ldrh	r3, [r3, #0]
 800e3a6:	2b2e      	cmp	r3, #46	; 0x2e
 800e3a8:	d1ef      	bne.n	800e38a <create_name+0x162>

	i = b = 0; ni = 8;
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	623b      	str	r3, [r7, #32]
 800e3b4:	2308      	movs	r3, #8
 800e3b6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e3b8:	69bb      	ldr	r3, [r7, #24]
 800e3ba:	1c5a      	adds	r2, r3, #1
 800e3bc:	61ba      	str	r2, [r7, #24]
 800e3be:	005b      	lsls	r3, r3, #1
 800e3c0:	68fa      	ldr	r2, [r7, #12]
 800e3c2:	4413      	add	r3, r2
 800e3c4:	881b      	ldrh	r3, [r3, #0]
 800e3c6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e3c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	f000 8090 	beq.w	800e4f0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e3d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3d2:	2b20      	cmp	r3, #32
 800e3d4:	d006      	beq.n	800e3e4 <create_name+0x1bc>
 800e3d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3d8:	2b2e      	cmp	r3, #46	; 0x2e
 800e3da:	d10a      	bne.n	800e3f2 <create_name+0x1ca>
 800e3dc:	69ba      	ldr	r2, [r7, #24]
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d006      	beq.n	800e3f2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e3e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3e8:	f043 0303 	orr.w	r3, r3, #3
 800e3ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e3f0:	e07d      	b.n	800e4ee <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e3f2:	6a3a      	ldr	r2, [r7, #32]
 800e3f4:	69fb      	ldr	r3, [r7, #28]
 800e3f6:	429a      	cmp	r2, r3
 800e3f8:	d203      	bcs.n	800e402 <create_name+0x1da>
 800e3fa:	69ba      	ldr	r2, [r7, #24]
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	429a      	cmp	r2, r3
 800e400:	d123      	bne.n	800e44a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e402:	69fb      	ldr	r3, [r7, #28]
 800e404:	2b0b      	cmp	r3, #11
 800e406:	d106      	bne.n	800e416 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e40c:	f043 0303 	orr.w	r3, r3, #3
 800e410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e414:	e075      	b.n	800e502 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e416:	69ba      	ldr	r2, [r7, #24]
 800e418:	697b      	ldr	r3, [r7, #20]
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d005      	beq.n	800e42a <create_name+0x202>
 800e41e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e422:	f043 0303 	orr.w	r3, r3, #3
 800e426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e42a:	69ba      	ldr	r2, [r7, #24]
 800e42c:	697b      	ldr	r3, [r7, #20]
 800e42e:	429a      	cmp	r2, r3
 800e430:	d866      	bhi.n	800e500 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e432:	697b      	ldr	r3, [r7, #20]
 800e434:	61bb      	str	r3, [r7, #24]
 800e436:	2308      	movs	r3, #8
 800e438:	623b      	str	r3, [r7, #32]
 800e43a:	230b      	movs	r3, #11
 800e43c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e43e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e442:	009b      	lsls	r3, r3, #2
 800e444:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e448:	e051      	b.n	800e4ee <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e44a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e44c:	2b7f      	cmp	r3, #127	; 0x7f
 800e44e:	d914      	bls.n	800e47a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e450:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e452:	2100      	movs	r1, #0
 800e454:	4618      	mov	r0, r3
 800e456:	f001 f879 	bl	800f54c <ff_convert>
 800e45a:	4603      	mov	r3, r0
 800e45c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e45e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e460:	2b00      	cmp	r3, #0
 800e462:	d004      	beq.n	800e46e <create_name+0x246>
 800e464:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e466:	3b80      	subs	r3, #128	; 0x80
 800e468:	4a23      	ldr	r2, [pc, #140]	; (800e4f8 <create_name+0x2d0>)
 800e46a:	5cd3      	ldrb	r3, [r2, r3]
 800e46c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e46e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e472:	f043 0302 	orr.w	r3, r3, #2
 800e476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e47a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d007      	beq.n	800e490 <create_name+0x268>
 800e480:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e482:	4619      	mov	r1, r3
 800e484:	481d      	ldr	r0, [pc, #116]	; (800e4fc <create_name+0x2d4>)
 800e486:	f7fe fc7e 	bl	800cd86 <chk_chr>
 800e48a:	4603      	mov	r3, r0
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d008      	beq.n	800e4a2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e490:	235f      	movs	r3, #95	; 0x5f
 800e492:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e498:	f043 0303 	orr.w	r3, r3, #3
 800e49c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e4a0:	e01b      	b.n	800e4da <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e4a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4a4:	2b40      	cmp	r3, #64	; 0x40
 800e4a6:	d909      	bls.n	800e4bc <create_name+0x294>
 800e4a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4aa:	2b5a      	cmp	r3, #90	; 0x5a
 800e4ac:	d806      	bhi.n	800e4bc <create_name+0x294>
					b |= 2;
 800e4ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e4b2:	f043 0302 	orr.w	r3, r3, #2
 800e4b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e4ba:	e00e      	b.n	800e4da <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e4bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4be:	2b60      	cmp	r3, #96	; 0x60
 800e4c0:	d90b      	bls.n	800e4da <create_name+0x2b2>
 800e4c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4c4:	2b7a      	cmp	r3, #122	; 0x7a
 800e4c6:	d808      	bhi.n	800e4da <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e4c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e4cc:	f043 0301 	orr.w	r3, r3, #1
 800e4d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e4d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4d6:	3b20      	subs	r3, #32
 800e4d8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e4da:	6a3b      	ldr	r3, [r7, #32]
 800e4dc:	1c5a      	adds	r2, r3, #1
 800e4de:	623a      	str	r2, [r7, #32]
 800e4e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e4e2:	b2d1      	uxtb	r1, r2
 800e4e4:	687a      	ldr	r2, [r7, #4]
 800e4e6:	4413      	add	r3, r2
 800e4e8:	460a      	mov	r2, r1
 800e4ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800e4ee:	e763      	b.n	800e3b8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e4f0:	bf00      	nop
 800e4f2:	e006      	b.n	800e502 <create_name+0x2da>
 800e4f4:	080101b4 	.word	0x080101b4
 800e4f8:	080107e4 	.word	0x080107e4
 800e4fc:	080101c0 	.word	0x080101c0
			if (si > di) break;			/* No extension */
 800e500:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e508:	2be5      	cmp	r3, #229	; 0xe5
 800e50a:	d103      	bne.n	800e514 <create_name+0x2ec>
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2205      	movs	r2, #5
 800e510:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800e514:	69fb      	ldr	r3, [r7, #28]
 800e516:	2b08      	cmp	r3, #8
 800e518:	d104      	bne.n	800e524 <create_name+0x2fc>
 800e51a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e51e:	009b      	lsls	r3, r3, #2
 800e520:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e524:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e528:	f003 030c 	and.w	r3, r3, #12
 800e52c:	2b0c      	cmp	r3, #12
 800e52e:	d005      	beq.n	800e53c <create_name+0x314>
 800e530:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e534:	f003 0303 	and.w	r3, r3, #3
 800e538:	2b03      	cmp	r3, #3
 800e53a:	d105      	bne.n	800e548 <create_name+0x320>
 800e53c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e540:	f043 0302 	orr.w	r3, r3, #2
 800e544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e548:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e54c:	f003 0302 	and.w	r3, r3, #2
 800e550:	2b00      	cmp	r3, #0
 800e552:	d117      	bne.n	800e584 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e554:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e558:	f003 0303 	and.w	r3, r3, #3
 800e55c:	2b01      	cmp	r3, #1
 800e55e:	d105      	bne.n	800e56c <create_name+0x344>
 800e560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e564:	f043 0310 	orr.w	r3, r3, #16
 800e568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e56c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e570:	f003 030c 	and.w	r3, r3, #12
 800e574:	2b04      	cmp	r3, #4
 800e576:	d105      	bne.n	800e584 <create_name+0x35c>
 800e578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e57c:	f043 0308 	orr.w	r3, r3, #8
 800e580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e58a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800e58e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e590:	4618      	mov	r0, r3
 800e592:	3728      	adds	r7, #40	; 0x28
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}

0800e598 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b086      	sub	sp, #24
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e5a6:	693b      	ldr	r3, [r7, #16]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e5ac:	e002      	b.n	800e5b4 <follow_path+0x1c>
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	3301      	adds	r3, #1
 800e5b2:	603b      	str	r3, [r7, #0]
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	2b2f      	cmp	r3, #47	; 0x2f
 800e5ba:	d0f8      	beq.n	800e5ae <follow_path+0x16>
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	781b      	ldrb	r3, [r3, #0]
 800e5c0:	2b5c      	cmp	r3, #92	; 0x5c
 800e5c2:	d0f4      	beq.n	800e5ae <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	781b      	ldrb	r3, [r3, #0]
 800e5ce:	2b1f      	cmp	r3, #31
 800e5d0:	d80a      	bhi.n	800e5e8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2280      	movs	r2, #128	; 0x80
 800e5d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e5da:	2100      	movs	r1, #0
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	f7ff f91d 	bl	800d81c <dir_sdi>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	75fb      	strb	r3, [r7, #23]
 800e5e6:	e043      	b.n	800e670 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e5e8:	463b      	mov	r3, r7
 800e5ea:	4619      	mov	r1, r3
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f7ff fe1b 	bl	800e228 <create_name>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e5f6:	7dfb      	ldrb	r3, [r7, #23]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d134      	bne.n	800e666 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	f7ff fc5a 	bl	800deb6 <dir_find>
 800e602:	4603      	mov	r3, r0
 800e604:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e60c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e60e:	7dfb      	ldrb	r3, [r7, #23]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d00a      	beq.n	800e62a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e614:	7dfb      	ldrb	r3, [r7, #23]
 800e616:	2b04      	cmp	r3, #4
 800e618:	d127      	bne.n	800e66a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e61a:	7afb      	ldrb	r3, [r7, #11]
 800e61c:	f003 0304 	and.w	r3, r3, #4
 800e620:	2b00      	cmp	r3, #0
 800e622:	d122      	bne.n	800e66a <follow_path+0xd2>
 800e624:	2305      	movs	r3, #5
 800e626:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e628:	e01f      	b.n	800e66a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e62a:	7afb      	ldrb	r3, [r7, #11]
 800e62c:	f003 0304 	and.w	r3, r3, #4
 800e630:	2b00      	cmp	r3, #0
 800e632:	d11c      	bne.n	800e66e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e634:	693b      	ldr	r3, [r7, #16]
 800e636:	799b      	ldrb	r3, [r3, #6]
 800e638:	f003 0310 	and.w	r3, r3, #16
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d102      	bne.n	800e646 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e640:	2305      	movs	r3, #5
 800e642:	75fb      	strb	r3, [r7, #23]
 800e644:	e014      	b.n	800e670 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	695b      	ldr	r3, [r3, #20]
 800e650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e654:	4413      	add	r3, r2
 800e656:	4619      	mov	r1, r3
 800e658:	68f8      	ldr	r0, [r7, #12]
 800e65a:	f7ff fa66 	bl	800db2a <ld_clust>
 800e65e:	4602      	mov	r2, r0
 800e660:	693b      	ldr	r3, [r7, #16]
 800e662:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e664:	e7c0      	b.n	800e5e8 <follow_path+0x50>
			if (res != FR_OK) break;
 800e666:	bf00      	nop
 800e668:	e002      	b.n	800e670 <follow_path+0xd8>
				break;
 800e66a:	bf00      	nop
 800e66c:	e000      	b.n	800e670 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e66e:	bf00      	nop
			}
		}
	}

	return res;
 800e670:	7dfb      	ldrb	r3, [r7, #23]
}
 800e672:	4618      	mov	r0, r3
 800e674:	3718      	adds	r7, #24
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}

0800e67a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e67a:	b480      	push	{r7}
 800e67c:	b087      	sub	sp, #28
 800e67e:	af00      	add	r7, sp, #0
 800e680:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e686:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d031      	beq.n	800e6f4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	617b      	str	r3, [r7, #20]
 800e696:	e002      	b.n	800e69e <get_ldnumber+0x24>
 800e698:	697b      	ldr	r3, [r7, #20]
 800e69a:	3301      	adds	r3, #1
 800e69c:	617b      	str	r3, [r7, #20]
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	781b      	ldrb	r3, [r3, #0]
 800e6a2:	2b1f      	cmp	r3, #31
 800e6a4:	d903      	bls.n	800e6ae <get_ldnumber+0x34>
 800e6a6:	697b      	ldr	r3, [r7, #20]
 800e6a8:	781b      	ldrb	r3, [r3, #0]
 800e6aa:	2b3a      	cmp	r3, #58	; 0x3a
 800e6ac:	d1f4      	bne.n	800e698 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	2b3a      	cmp	r3, #58	; 0x3a
 800e6b4:	d11c      	bne.n	800e6f0 <get_ldnumber+0x76>
			tp = *path;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	1c5a      	adds	r2, r3, #1
 800e6c0:	60fa      	str	r2, [r7, #12]
 800e6c2:	781b      	ldrb	r3, [r3, #0]
 800e6c4:	3b30      	subs	r3, #48	; 0x30
 800e6c6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	2b09      	cmp	r3, #9
 800e6cc:	d80e      	bhi.n	800e6ec <get_ldnumber+0x72>
 800e6ce:	68fa      	ldr	r2, [r7, #12]
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	429a      	cmp	r2, r3
 800e6d4:	d10a      	bne.n	800e6ec <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d107      	bne.n	800e6ec <get_ldnumber+0x72>
					vol = (int)i;
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e6e0:	697b      	ldr	r3, [r7, #20]
 800e6e2:	3301      	adds	r3, #1
 800e6e4:	617b      	str	r3, [r7, #20]
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	697a      	ldr	r2, [r7, #20]
 800e6ea:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	e002      	b.n	800e6f6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e6f4:	693b      	ldr	r3, [r7, #16]
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	371c      	adds	r7, #28
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e700:	4770      	bx	lr
	...

0800e704 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b082      	sub	sp, #8
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
 800e70c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2200      	movs	r2, #0
 800e712:	70da      	strb	r2, [r3, #3]
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e71a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e71c:	6839      	ldr	r1, [r7, #0]
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f7fe fcfc 	bl	800d11c <move_window>
 800e724:	4603      	mov	r3, r0
 800e726:	2b00      	cmp	r3, #0
 800e728:	d001      	beq.n	800e72e <check_fs+0x2a>
 800e72a:	2304      	movs	r3, #4
 800e72c:	e038      	b.n	800e7a0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	3334      	adds	r3, #52	; 0x34
 800e732:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e736:	4618      	mov	r0, r3
 800e738:	f7fe fa40 	bl	800cbbc <ld_word>
 800e73c:	4603      	mov	r3, r0
 800e73e:	461a      	mov	r2, r3
 800e740:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e744:	429a      	cmp	r2, r3
 800e746:	d001      	beq.n	800e74c <check_fs+0x48>
 800e748:	2303      	movs	r3, #3
 800e74a:	e029      	b.n	800e7a0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e752:	2be9      	cmp	r3, #233	; 0xe9
 800e754:	d009      	beq.n	800e76a <check_fs+0x66>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e75c:	2beb      	cmp	r3, #235	; 0xeb
 800e75e:	d11e      	bne.n	800e79e <check_fs+0x9a>
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e766:	2b90      	cmp	r3, #144	; 0x90
 800e768:	d119      	bne.n	800e79e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	3334      	adds	r3, #52	; 0x34
 800e76e:	3336      	adds	r3, #54	; 0x36
 800e770:	4618      	mov	r0, r3
 800e772:	f7fe fa3b 	bl	800cbec <ld_dword>
 800e776:	4603      	mov	r3, r0
 800e778:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e77c:	4a0a      	ldr	r2, [pc, #40]	; (800e7a8 <check_fs+0xa4>)
 800e77e:	4293      	cmp	r3, r2
 800e780:	d101      	bne.n	800e786 <check_fs+0x82>
 800e782:	2300      	movs	r3, #0
 800e784:	e00c      	b.n	800e7a0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	3334      	adds	r3, #52	; 0x34
 800e78a:	3352      	adds	r3, #82	; 0x52
 800e78c:	4618      	mov	r0, r3
 800e78e:	f7fe fa2d 	bl	800cbec <ld_dword>
 800e792:	4603      	mov	r3, r0
 800e794:	4a05      	ldr	r2, [pc, #20]	; (800e7ac <check_fs+0xa8>)
 800e796:	4293      	cmp	r3, r2
 800e798:	d101      	bne.n	800e79e <check_fs+0x9a>
 800e79a:	2300      	movs	r3, #0
 800e79c:	e000      	b.n	800e7a0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e79e:	2302      	movs	r3, #2
}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	3708      	adds	r7, #8
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}
 800e7a8:	00544146 	.word	0x00544146
 800e7ac:	33544146 	.word	0x33544146

0800e7b0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b096      	sub	sp, #88	; 0x58
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	60f8      	str	r0, [r7, #12]
 800e7b8:	60b9      	str	r1, [r7, #8]
 800e7ba:	4613      	mov	r3, r2
 800e7bc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e7c4:	68f8      	ldr	r0, [r7, #12]
 800e7c6:	f7ff ff58 	bl	800e67a <get_ldnumber>
 800e7ca:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e7cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	da01      	bge.n	800e7d6 <find_volume+0x26>
 800e7d2:	230b      	movs	r3, #11
 800e7d4:	e230      	b.n	800ec38 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e7d6:	4aa1      	ldr	r2, [pc, #644]	; (800ea5c <find_volume+0x2ac>)
 800e7d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7de:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d101      	bne.n	800e7ea <find_volume+0x3a>
 800e7e6:	230c      	movs	r3, #12
 800e7e8:	e226      	b.n	800ec38 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7ee:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e7f0:	79fb      	ldrb	r3, [r7, #7]
 800e7f2:	f023 0301 	bic.w	r3, r3, #1
 800e7f6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7fa:	781b      	ldrb	r3, [r3, #0]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d01a      	beq.n	800e836 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e802:	785b      	ldrb	r3, [r3, #1]
 800e804:	4618      	mov	r0, r3
 800e806:	f7fe f93b 	bl	800ca80 <disk_status>
 800e80a:	4603      	mov	r3, r0
 800e80c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e810:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e814:	f003 0301 	and.w	r3, r3, #1
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d10c      	bne.n	800e836 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e81c:	79fb      	ldrb	r3, [r7, #7]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d007      	beq.n	800e832 <find_volume+0x82>
 800e822:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e826:	f003 0304 	and.w	r3, r3, #4
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d001      	beq.n	800e832 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e82e:	230a      	movs	r3, #10
 800e830:	e202      	b.n	800ec38 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800e832:	2300      	movs	r3, #0
 800e834:	e200      	b.n	800ec38 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e838:	2200      	movs	r2, #0
 800e83a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e83c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e83e:	b2da      	uxtb	r2, r3
 800e840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e842:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e846:	785b      	ldrb	r3, [r3, #1]
 800e848:	4618      	mov	r0, r3
 800e84a:	f7fe f933 	bl	800cab4 <disk_initialize>
 800e84e:	4603      	mov	r3, r0
 800e850:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e854:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e858:	f003 0301 	and.w	r3, r3, #1
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d001      	beq.n	800e864 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e860:	2303      	movs	r3, #3
 800e862:	e1e9      	b.n	800ec38 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e864:	79fb      	ldrb	r3, [r7, #7]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d007      	beq.n	800e87a <find_volume+0xca>
 800e86a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e86e:	f003 0304 	and.w	r3, r3, #4
 800e872:	2b00      	cmp	r3, #0
 800e874:	d001      	beq.n	800e87a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e876:	230a      	movs	r3, #10
 800e878:	e1de      	b.n	800ec38 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e87a:	2300      	movs	r3, #0
 800e87c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e87e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e880:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e882:	f7ff ff3f 	bl	800e704 <check_fs>
 800e886:	4603      	mov	r3, r0
 800e888:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e88c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e890:	2b02      	cmp	r3, #2
 800e892:	d149      	bne.n	800e928 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e894:	2300      	movs	r3, #0
 800e896:	643b      	str	r3, [r7, #64]	; 0x40
 800e898:	e01e      	b.n	800e8d8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e89c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e8a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8a2:	011b      	lsls	r3, r3, #4
 800e8a4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e8a8:	4413      	add	r3, r2
 800e8aa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ae:	3304      	adds	r3, #4
 800e8b0:	781b      	ldrb	r3, [r3, #0]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d006      	beq.n	800e8c4 <find_volume+0x114>
 800e8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b8:	3308      	adds	r3, #8
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f7fe f996 	bl	800cbec <ld_dword>
 800e8c0:	4602      	mov	r2, r0
 800e8c2:	e000      	b.n	800e8c6 <find_volume+0x116>
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8c8:	009b      	lsls	r3, r3, #2
 800e8ca:	3358      	adds	r3, #88	; 0x58
 800e8cc:	443b      	add	r3, r7
 800e8ce:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e8d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8d4:	3301      	adds	r3, #1
 800e8d6:	643b      	str	r3, [r7, #64]	; 0x40
 800e8d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8da:	2b03      	cmp	r3, #3
 800e8dc:	d9dd      	bls.n	800e89a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e8de:	2300      	movs	r3, #0
 800e8e0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e8e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d002      	beq.n	800e8ee <find_volume+0x13e>
 800e8e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8ea:	3b01      	subs	r3, #1
 800e8ec:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e8ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8f0:	009b      	lsls	r3, r3, #2
 800e8f2:	3358      	adds	r3, #88	; 0x58
 800e8f4:	443b      	add	r3, r7
 800e8f6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e8fa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e8fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d005      	beq.n	800e90e <find_volume+0x15e>
 800e902:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e904:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e906:	f7ff fefd 	bl	800e704 <check_fs>
 800e90a:	4603      	mov	r3, r0
 800e90c:	e000      	b.n	800e910 <find_volume+0x160>
 800e90e:	2303      	movs	r3, #3
 800e910:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e914:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e918:	2b01      	cmp	r3, #1
 800e91a:	d905      	bls.n	800e928 <find_volume+0x178>
 800e91c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e91e:	3301      	adds	r3, #1
 800e920:	643b      	str	r3, [r7, #64]	; 0x40
 800e922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e924:	2b03      	cmp	r3, #3
 800e926:	d9e2      	bls.n	800e8ee <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e928:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e92c:	2b04      	cmp	r3, #4
 800e92e:	d101      	bne.n	800e934 <find_volume+0x184>
 800e930:	2301      	movs	r3, #1
 800e932:	e181      	b.n	800ec38 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e934:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e938:	2b01      	cmp	r3, #1
 800e93a:	d901      	bls.n	800e940 <find_volume+0x190>
 800e93c:	230d      	movs	r3, #13
 800e93e:	e17b      	b.n	800ec38 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e942:	3334      	adds	r3, #52	; 0x34
 800e944:	330b      	adds	r3, #11
 800e946:	4618      	mov	r0, r3
 800e948:	f7fe f938 	bl	800cbbc <ld_word>
 800e94c:	4603      	mov	r3, r0
 800e94e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e952:	d001      	beq.n	800e958 <find_volume+0x1a8>
 800e954:	230d      	movs	r3, #13
 800e956:	e16f      	b.n	800ec38 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e95a:	3334      	adds	r3, #52	; 0x34
 800e95c:	3316      	adds	r3, #22
 800e95e:	4618      	mov	r0, r3
 800e960:	f7fe f92c 	bl	800cbbc <ld_word>
 800e964:	4603      	mov	r3, r0
 800e966:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d106      	bne.n	800e97c <find_volume+0x1cc>
 800e96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e970:	3334      	adds	r3, #52	; 0x34
 800e972:	3324      	adds	r3, #36	; 0x24
 800e974:	4618      	mov	r0, r3
 800e976:	f7fe f939 	bl	800cbec <ld_dword>
 800e97a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e97e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e980:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e984:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e98a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e98e:	789b      	ldrb	r3, [r3, #2]
 800e990:	2b01      	cmp	r3, #1
 800e992:	d005      	beq.n	800e9a0 <find_volume+0x1f0>
 800e994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e996:	789b      	ldrb	r3, [r3, #2]
 800e998:	2b02      	cmp	r3, #2
 800e99a:	d001      	beq.n	800e9a0 <find_volume+0x1f0>
 800e99c:	230d      	movs	r3, #13
 800e99e:	e14b      	b.n	800ec38 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9a2:	789b      	ldrb	r3, [r3, #2]
 800e9a4:	461a      	mov	r2, r3
 800e9a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9a8:	fb02 f303 	mul.w	r3, r2, r3
 800e9ac:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e9b4:	b29a      	uxth	r2, r3
 800e9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9b8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9bc:	895b      	ldrh	r3, [r3, #10]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d008      	beq.n	800e9d4 <find_volume+0x224>
 800e9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9c4:	895b      	ldrh	r3, [r3, #10]
 800e9c6:	461a      	mov	r2, r3
 800e9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ca:	895b      	ldrh	r3, [r3, #10]
 800e9cc:	3b01      	subs	r3, #1
 800e9ce:	4013      	ands	r3, r2
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d001      	beq.n	800e9d8 <find_volume+0x228>
 800e9d4:	230d      	movs	r3, #13
 800e9d6:	e12f      	b.n	800ec38 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9da:	3334      	adds	r3, #52	; 0x34
 800e9dc:	3311      	adds	r3, #17
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7fe f8ec 	bl	800cbbc <ld_word>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	461a      	mov	r2, r3
 800e9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ea:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ee:	891b      	ldrh	r3, [r3, #8]
 800e9f0:	f003 030f 	and.w	r3, r3, #15
 800e9f4:	b29b      	uxth	r3, r3
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d001      	beq.n	800e9fe <find_volume+0x24e>
 800e9fa:	230d      	movs	r3, #13
 800e9fc:	e11c      	b.n	800ec38 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea00:	3334      	adds	r3, #52	; 0x34
 800ea02:	3313      	adds	r3, #19
 800ea04:	4618      	mov	r0, r3
 800ea06:	f7fe f8d9 	bl	800cbbc <ld_word>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ea0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d106      	bne.n	800ea22 <find_volume+0x272>
 800ea14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea16:	3334      	adds	r3, #52	; 0x34
 800ea18:	3320      	adds	r3, #32
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7fe f8e6 	bl	800cbec <ld_dword>
 800ea20:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ea22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea24:	3334      	adds	r3, #52	; 0x34
 800ea26:	330e      	adds	r3, #14
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f7fe f8c7 	bl	800cbbc <ld_word>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ea32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d101      	bne.n	800ea3c <find_volume+0x28c>
 800ea38:	230d      	movs	r3, #13
 800ea3a:	e0fd      	b.n	800ec38 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ea3c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ea3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea40:	4413      	add	r3, r2
 800ea42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea44:	8912      	ldrh	r2, [r2, #8]
 800ea46:	0912      	lsrs	r2, r2, #4
 800ea48:	b292      	uxth	r2, r2
 800ea4a:	4413      	add	r3, r2
 800ea4c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ea4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d204      	bcs.n	800ea60 <find_volume+0x2b0>
 800ea56:	230d      	movs	r3, #13
 800ea58:	e0ee      	b.n	800ec38 <find_volume+0x488>
 800ea5a:	bf00      	nop
 800ea5c:	24000304 	.word	0x24000304
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ea60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea64:	1ad3      	subs	r3, r2, r3
 800ea66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea68:	8952      	ldrh	r2, [r2, #10]
 800ea6a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea6e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ea70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d101      	bne.n	800ea7a <find_volume+0x2ca>
 800ea76:	230d      	movs	r3, #13
 800ea78:	e0de      	b.n	800ec38 <find_volume+0x488>
		fmt = FS_FAT32;
 800ea7a:	2303      	movs	r3, #3
 800ea7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ea80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea82:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ea86:	4293      	cmp	r3, r2
 800ea88:	d802      	bhi.n	800ea90 <find_volume+0x2e0>
 800ea8a:	2302      	movs	r3, #2
 800ea8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ea90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea92:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ea96:	4293      	cmp	r3, r2
 800ea98:	d802      	bhi.n	800eaa0 <find_volume+0x2f0>
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800eaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa2:	1c9a      	adds	r2, r3, #2
 800eaa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaa6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800eaa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaaa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eaac:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800eaae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800eab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eab2:	441a      	add	r2, r3
 800eab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eab6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800eab8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eaba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eabc:	441a      	add	r2, r3
 800eabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eac0:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800eac2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eac6:	2b03      	cmp	r3, #3
 800eac8:	d11e      	bne.n	800eb08 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800eaca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eacc:	3334      	adds	r3, #52	; 0x34
 800eace:	332a      	adds	r3, #42	; 0x2a
 800ead0:	4618      	mov	r0, r3
 800ead2:	f7fe f873 	bl	800cbbc <ld_word>
 800ead6:	4603      	mov	r3, r0
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d001      	beq.n	800eae0 <find_volume+0x330>
 800eadc:	230d      	movs	r3, #13
 800eade:	e0ab      	b.n	800ec38 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800eae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eae2:	891b      	ldrh	r3, [r3, #8]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d001      	beq.n	800eaec <find_volume+0x33c>
 800eae8:	230d      	movs	r3, #13
 800eaea:	e0a5      	b.n	800ec38 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800eaec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaee:	3334      	adds	r3, #52	; 0x34
 800eaf0:	332c      	adds	r3, #44	; 0x2c
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7fe f87a 	bl	800cbec <ld_dword>
 800eaf8:	4602      	mov	r2, r0
 800eafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eafc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800eafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb00:	699b      	ldr	r3, [r3, #24]
 800eb02:	009b      	lsls	r3, r3, #2
 800eb04:	647b      	str	r3, [r7, #68]	; 0x44
 800eb06:	e01f      	b.n	800eb48 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800eb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb0a:	891b      	ldrh	r3, [r3, #8]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d101      	bne.n	800eb14 <find_volume+0x364>
 800eb10:	230d      	movs	r3, #13
 800eb12:	e091      	b.n	800ec38 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800eb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb1a:	441a      	add	r2, r3
 800eb1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb1e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800eb20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eb24:	2b02      	cmp	r3, #2
 800eb26:	d103      	bne.n	800eb30 <find_volume+0x380>
 800eb28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb2a:	699b      	ldr	r3, [r3, #24]
 800eb2c:	005b      	lsls	r3, r3, #1
 800eb2e:	e00a      	b.n	800eb46 <find_volume+0x396>
 800eb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb32:	699a      	ldr	r2, [r3, #24]
 800eb34:	4613      	mov	r3, r2
 800eb36:	005b      	lsls	r3, r3, #1
 800eb38:	4413      	add	r3, r2
 800eb3a:	085a      	lsrs	r2, r3, #1
 800eb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb3e:	699b      	ldr	r3, [r3, #24]
 800eb40:	f003 0301 	and.w	r3, r3, #1
 800eb44:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800eb46:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800eb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb4a:	69da      	ldr	r2, [r3, #28]
 800eb4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb4e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800eb52:	0a5b      	lsrs	r3, r3, #9
 800eb54:	429a      	cmp	r2, r3
 800eb56:	d201      	bcs.n	800eb5c <find_volume+0x3ac>
 800eb58:	230d      	movs	r3, #13
 800eb5a:	e06d      	b.n	800ec38 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800eb5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb62:	615a      	str	r2, [r3, #20]
 800eb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb66:	695a      	ldr	r2, [r3, #20]
 800eb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb6a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800eb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb6e:	2280      	movs	r2, #128	; 0x80
 800eb70:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800eb72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eb76:	2b03      	cmp	r3, #3
 800eb78:	d149      	bne.n	800ec0e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800eb7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb7c:	3334      	adds	r3, #52	; 0x34
 800eb7e:	3330      	adds	r3, #48	; 0x30
 800eb80:	4618      	mov	r0, r3
 800eb82:	f7fe f81b 	bl	800cbbc <ld_word>
 800eb86:	4603      	mov	r3, r0
 800eb88:	2b01      	cmp	r3, #1
 800eb8a:	d140      	bne.n	800ec0e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800eb8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb8e:	3301      	adds	r3, #1
 800eb90:	4619      	mov	r1, r3
 800eb92:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eb94:	f7fe fac2 	bl	800d11c <move_window>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d137      	bne.n	800ec0e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800eb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba0:	2200      	movs	r2, #0
 800eba2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800eba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba6:	3334      	adds	r3, #52	; 0x34
 800eba8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ebac:	4618      	mov	r0, r3
 800ebae:	f7fe f805 	bl	800cbbc <ld_word>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	461a      	mov	r2, r3
 800ebb6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	d127      	bne.n	800ec0e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ebbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebc0:	3334      	adds	r3, #52	; 0x34
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f7fe f812 	bl	800cbec <ld_dword>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	4a1d      	ldr	r2, [pc, #116]	; (800ec40 <find_volume+0x490>)
 800ebcc:	4293      	cmp	r3, r2
 800ebce:	d11e      	bne.n	800ec0e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ebd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebd2:	3334      	adds	r3, #52	; 0x34
 800ebd4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f7fe f807 	bl	800cbec <ld_dword>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	4a18      	ldr	r2, [pc, #96]	; (800ec44 <find_volume+0x494>)
 800ebe2:	4293      	cmp	r3, r2
 800ebe4:	d113      	bne.n	800ec0e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ebe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebe8:	3334      	adds	r3, #52	; 0x34
 800ebea:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f7fd fffc 	bl	800cbec <ld_dword>
 800ebf4:	4602      	mov	r2, r0
 800ebf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebf8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ebfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebfc:	3334      	adds	r3, #52	; 0x34
 800ebfe:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ec02:	4618      	mov	r0, r3
 800ec04:	f7fd fff2 	bl	800cbec <ld_dword>
 800ec08:	4602      	mov	r2, r0
 800ec0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec0c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ec0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec10:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ec14:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ec16:	4b0c      	ldr	r3, [pc, #48]	; (800ec48 <find_volume+0x498>)
 800ec18:	881b      	ldrh	r3, [r3, #0]
 800ec1a:	3301      	adds	r3, #1
 800ec1c:	b29a      	uxth	r2, r3
 800ec1e:	4b0a      	ldr	r3, [pc, #40]	; (800ec48 <find_volume+0x498>)
 800ec20:	801a      	strh	r2, [r3, #0]
 800ec22:	4b09      	ldr	r3, [pc, #36]	; (800ec48 <find_volume+0x498>)
 800ec24:	881a      	ldrh	r2, [r3, #0]
 800ec26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec28:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ec2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec2c:	4a07      	ldr	r2, [pc, #28]	; (800ec4c <find_volume+0x49c>)
 800ec2e:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ec30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ec32:	f7fe fa0b 	bl	800d04c <clear_lock>
#endif
	return FR_OK;
 800ec36:	2300      	movs	r3, #0
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3758      	adds	r7, #88	; 0x58
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}
 800ec40:	41615252 	.word	0x41615252
 800ec44:	61417272 	.word	0x61417272
 800ec48:	24000308 	.word	0x24000308
 800ec4c:	2400032c 	.word	0x2400032c

0800ec50 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b084      	sub	sp, #16
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
 800ec58:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ec5a:	2309      	movs	r3, #9
 800ec5c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d01c      	beq.n	800ec9e <validate+0x4e>
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d018      	beq.n	800ec9e <validate+0x4e>
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	781b      	ldrb	r3, [r3, #0]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d013      	beq.n	800ec9e <validate+0x4e>
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	889a      	ldrh	r2, [r3, #4]
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	88db      	ldrh	r3, [r3, #6]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d10c      	bne.n	800ec9e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	785b      	ldrb	r3, [r3, #1]
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f7fd fef8 	bl	800ca80 <disk_status>
 800ec90:	4603      	mov	r3, r0
 800ec92:	f003 0301 	and.w	r3, r3, #1
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d101      	bne.n	800ec9e <validate+0x4e>
			res = FR_OK;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ec9e:	7bfb      	ldrb	r3, [r7, #15]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d102      	bne.n	800ecaa <validate+0x5a>
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	e000      	b.n	800ecac <validate+0x5c>
 800ecaa:	2300      	movs	r3, #0
 800ecac:	683a      	ldr	r2, [r7, #0]
 800ecae:	6013      	str	r3, [r2, #0]
	return res;
 800ecb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	3710      	adds	r7, #16
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}
	...

0800ecbc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b088      	sub	sp, #32
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	60f8      	str	r0, [r7, #12]
 800ecc4:	60b9      	str	r1, [r7, #8]
 800ecc6:	4613      	mov	r3, r2
 800ecc8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ecca:	68bb      	ldr	r3, [r7, #8]
 800eccc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ecce:	f107 0310 	add.w	r3, r7, #16
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f7ff fcd1 	bl	800e67a <get_ldnumber>
 800ecd8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ecda:	69fb      	ldr	r3, [r7, #28]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	da01      	bge.n	800ece4 <f_mount+0x28>
 800ece0:	230b      	movs	r3, #11
 800ece2:	e02b      	b.n	800ed3c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ece4:	4a17      	ldr	r2, [pc, #92]	; (800ed44 <f_mount+0x88>)
 800ece6:	69fb      	ldr	r3, [r7, #28]
 800ece8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecec:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ecee:	69bb      	ldr	r3, [r7, #24]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d005      	beq.n	800ed00 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ecf4:	69b8      	ldr	r0, [r7, #24]
 800ecf6:	f7fe f9a9 	bl	800d04c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ecfa:	69bb      	ldr	r3, [r7, #24]
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d002      	beq.n	800ed0c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	2200      	movs	r2, #0
 800ed0a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ed0c:	68fa      	ldr	r2, [r7, #12]
 800ed0e:	490d      	ldr	r1, [pc, #52]	; (800ed44 <f_mount+0x88>)
 800ed10:	69fb      	ldr	r3, [r7, #28]
 800ed12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d002      	beq.n	800ed22 <f_mount+0x66>
 800ed1c:	79fb      	ldrb	r3, [r7, #7]
 800ed1e:	2b01      	cmp	r3, #1
 800ed20:	d001      	beq.n	800ed26 <f_mount+0x6a>
 800ed22:	2300      	movs	r3, #0
 800ed24:	e00a      	b.n	800ed3c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ed26:	f107 010c 	add.w	r1, r7, #12
 800ed2a:	f107 0308 	add.w	r3, r7, #8
 800ed2e:	2200      	movs	r2, #0
 800ed30:	4618      	mov	r0, r3
 800ed32:	f7ff fd3d 	bl	800e7b0 <find_volume>
 800ed36:	4603      	mov	r3, r0
 800ed38:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ed3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3720      	adds	r7, #32
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}
 800ed44:	24000304 	.word	0x24000304

0800ed48 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b09a      	sub	sp, #104	; 0x68
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	60f8      	str	r0, [r7, #12]
 800ed50:	60b9      	str	r1, [r7, #8]
 800ed52:	4613      	mov	r3, r2
 800ed54:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d101      	bne.n	800ed60 <f_open+0x18>
 800ed5c:	2309      	movs	r3, #9
 800ed5e:	e1ad      	b.n	800f0bc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ed60:	79fb      	ldrb	r3, [r7, #7]
 800ed62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed66:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ed68:	79fa      	ldrb	r2, [r7, #7]
 800ed6a:	f107 0114 	add.w	r1, r7, #20
 800ed6e:	f107 0308 	add.w	r3, r7, #8
 800ed72:	4618      	mov	r0, r3
 800ed74:	f7ff fd1c 	bl	800e7b0 <find_volume>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800ed7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	f040 8191 	bne.w	800f0aa <f_open+0x362>
		dj.obj.fs = fs;
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ed8c:	68ba      	ldr	r2, [r7, #8]
 800ed8e:	f107 0318 	add.w	r3, r7, #24
 800ed92:	4611      	mov	r1, r2
 800ed94:	4618      	mov	r0, r3
 800ed96:	f7ff fbff 	bl	800e598 <follow_path>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800eda0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d11a      	bne.n	800edde <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800eda8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800edac:	b25b      	sxtb	r3, r3
 800edae:	2b00      	cmp	r3, #0
 800edb0:	da03      	bge.n	800edba <f_open+0x72>
				res = FR_INVALID_NAME;
 800edb2:	2306      	movs	r3, #6
 800edb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800edb8:	e011      	b.n	800edde <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800edba:	79fb      	ldrb	r3, [r7, #7]
 800edbc:	f023 0301 	bic.w	r3, r3, #1
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	bf14      	ite	ne
 800edc4:	2301      	movne	r3, #1
 800edc6:	2300      	moveq	r3, #0
 800edc8:	b2db      	uxtb	r3, r3
 800edca:	461a      	mov	r2, r3
 800edcc:	f107 0318 	add.w	r3, r7, #24
 800edd0:	4611      	mov	r1, r2
 800edd2:	4618      	mov	r0, r3
 800edd4:	f7fd fff2 	bl	800cdbc <chk_lock>
 800edd8:	4603      	mov	r3, r0
 800edda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800edde:	79fb      	ldrb	r3, [r7, #7]
 800ede0:	f003 031c 	and.w	r3, r3, #28
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d07f      	beq.n	800eee8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ede8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800edec:	2b00      	cmp	r3, #0
 800edee:	d017      	beq.n	800ee20 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800edf0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800edf4:	2b04      	cmp	r3, #4
 800edf6:	d10e      	bne.n	800ee16 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800edf8:	f7fe f83c 	bl	800ce74 <enq_lock>
 800edfc:	4603      	mov	r3, r0
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d006      	beq.n	800ee10 <f_open+0xc8>
 800ee02:	f107 0318 	add.w	r3, r7, #24
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7ff f916 	bl	800e038 <dir_register>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	e000      	b.n	800ee12 <f_open+0xca>
 800ee10:	2312      	movs	r3, #18
 800ee12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ee16:	79fb      	ldrb	r3, [r7, #7]
 800ee18:	f043 0308 	orr.w	r3, r3, #8
 800ee1c:	71fb      	strb	r3, [r7, #7]
 800ee1e:	e010      	b.n	800ee42 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ee20:	7fbb      	ldrb	r3, [r7, #30]
 800ee22:	f003 0311 	and.w	r3, r3, #17
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d003      	beq.n	800ee32 <f_open+0xea>
					res = FR_DENIED;
 800ee2a:	2307      	movs	r3, #7
 800ee2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ee30:	e007      	b.n	800ee42 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ee32:	79fb      	ldrb	r3, [r7, #7]
 800ee34:	f003 0304 	and.w	r3, r3, #4
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d002      	beq.n	800ee42 <f_open+0xfa>
 800ee3c:	2308      	movs	r3, #8
 800ee3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ee42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d168      	bne.n	800ef1c <f_open+0x1d4>
 800ee4a:	79fb      	ldrb	r3, [r7, #7]
 800ee4c:	f003 0308 	and.w	r3, r3, #8
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d063      	beq.n	800ef1c <f_open+0x1d4>
				dw = GET_FATTIME();
 800ee54:	f7fd fb00 	bl	800c458 <get_fattime>
 800ee58:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ee5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee5c:	330e      	adds	r3, #14
 800ee5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ee60:	4618      	mov	r0, r3
 800ee62:	f7fd ff01 	bl	800cc68 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ee66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee68:	3316      	adds	r3, #22
 800ee6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f7fd fefb 	bl	800cc68 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ee72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee74:	330b      	adds	r3, #11
 800ee76:	2220      	movs	r2, #32
 800ee78:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ee7a:	697b      	ldr	r3, [r7, #20]
 800ee7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee7e:	4611      	mov	r1, r2
 800ee80:	4618      	mov	r0, r3
 800ee82:	f7fe fe52 	bl	800db2a <ld_clust>
 800ee86:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ee88:	697b      	ldr	r3, [r7, #20]
 800ee8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f7fe fe6a 	bl	800db68 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ee94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee96:	331c      	adds	r3, #28
 800ee98:	2100      	movs	r1, #0
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f7fd fee4 	bl	800cc68 <st_dword>
					fs->wflag = 1;
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	2201      	movs	r2, #1
 800eea4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800eea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d037      	beq.n	800ef1c <f_open+0x1d4>
						dw = fs->winsect;
 800eeac:	697b      	ldr	r3, [r7, #20]
 800eeae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eeb0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800eeb2:	f107 0318 	add.w	r3, r7, #24
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800eeba:	4618      	mov	r0, r3
 800eebc:	f7fe fb7d 	bl	800d5ba <remove_chain>
 800eec0:	4603      	mov	r3, r0
 800eec2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800eec6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d126      	bne.n	800ef1c <f_open+0x1d4>
							res = move_window(fs, dw);
 800eece:	697b      	ldr	r3, [r7, #20]
 800eed0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7fe f922 	bl	800d11c <move_window>
 800eed8:	4603      	mov	r3, r0
 800eeda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800eede:	697b      	ldr	r3, [r7, #20]
 800eee0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800eee2:	3a01      	subs	r2, #1
 800eee4:	611a      	str	r2, [r3, #16]
 800eee6:	e019      	b.n	800ef1c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800eee8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d115      	bne.n	800ef1c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800eef0:	7fbb      	ldrb	r3, [r7, #30]
 800eef2:	f003 0310 	and.w	r3, r3, #16
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d003      	beq.n	800ef02 <f_open+0x1ba>
					res = FR_NO_FILE;
 800eefa:	2304      	movs	r3, #4
 800eefc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ef00:	e00c      	b.n	800ef1c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ef02:	79fb      	ldrb	r3, [r7, #7]
 800ef04:	f003 0302 	and.w	r3, r3, #2
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d007      	beq.n	800ef1c <f_open+0x1d4>
 800ef0c:	7fbb      	ldrb	r3, [r7, #30]
 800ef0e:	f003 0301 	and.w	r3, r3, #1
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d002      	beq.n	800ef1c <f_open+0x1d4>
						res = FR_DENIED;
 800ef16:	2307      	movs	r3, #7
 800ef18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800ef1c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d128      	bne.n	800ef76 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ef24:	79fb      	ldrb	r3, [r7, #7]
 800ef26:	f003 0308 	and.w	r3, r3, #8
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d003      	beq.n	800ef36 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ef2e:	79fb      	ldrb	r3, [r7, #7]
 800ef30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef34:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ef3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ef44:	79fb      	ldrb	r3, [r7, #7]
 800ef46:	f023 0301 	bic.w	r3, r3, #1
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	bf14      	ite	ne
 800ef4e:	2301      	movne	r3, #1
 800ef50:	2300      	moveq	r3, #0
 800ef52:	b2db      	uxtb	r3, r3
 800ef54:	461a      	mov	r2, r3
 800ef56:	f107 0318 	add.w	r3, r7, #24
 800ef5a:	4611      	mov	r1, r2
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f7fd ffab 	bl	800ceb8 <inc_lock>
 800ef62:	4602      	mov	r2, r0
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	691b      	ldr	r3, [r3, #16]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d102      	bne.n	800ef76 <f_open+0x22e>
 800ef70:	2302      	movs	r3, #2
 800ef72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ef76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	f040 8095 	bne.w	800f0aa <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef84:	4611      	mov	r1, r2
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7fe fdcf 	bl	800db2a <ld_clust>
 800ef8c:	4602      	mov	r2, r0
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ef92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef94:	331c      	adds	r3, #28
 800ef96:	4618      	mov	r0, r3
 800ef98:	f7fd fe28 	bl	800cbec <ld_dword>
 800ef9c:	4602      	mov	r2, r0
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	2200      	movs	r2, #0
 800efa6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800efa8:	697a      	ldr	r2, [r7, #20]
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800efae:	697b      	ldr	r3, [r7, #20]
 800efb0:	88da      	ldrh	r2, [r3, #6]
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	79fa      	ldrb	r2, [r7, #7]
 800efba:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	2200      	movs	r2, #0
 800efc0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	2200      	movs	r2, #0
 800efc6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	2200      	movs	r2, #0
 800efcc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	3330      	adds	r3, #48	; 0x30
 800efd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800efd6:	2100      	movs	r1, #0
 800efd8:	4618      	mov	r0, r3
 800efda:	f7fd fe92 	bl	800cd02 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800efde:	79fb      	ldrb	r3, [r7, #7]
 800efe0:	f003 0320 	and.w	r3, r3, #32
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d060      	beq.n	800f0aa <f_open+0x362>
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	68db      	ldr	r3, [r3, #12]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d05c      	beq.n	800f0aa <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	68da      	ldr	r2, [r3, #12]
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800eff8:	697b      	ldr	r3, [r7, #20]
 800effa:	895b      	ldrh	r3, [r3, #10]
 800effc:	025b      	lsls	r3, r3, #9
 800effe:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	689b      	ldr	r3, [r3, #8]
 800f004:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	68db      	ldr	r3, [r3, #12]
 800f00a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f00c:	e016      	b.n	800f03c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f012:	4618      	mov	r0, r3
 800f014:	f7fe f93d 	bl	800d292 <get_fat>
 800f018:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f01a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f01c:	2b01      	cmp	r3, #1
 800f01e:	d802      	bhi.n	800f026 <f_open+0x2de>
 800f020:	2302      	movs	r3, #2
 800f022:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f02c:	d102      	bne.n	800f034 <f_open+0x2ec>
 800f02e:	2301      	movs	r3, #1
 800f030:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f034:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f038:	1ad3      	subs	r3, r2, r3
 800f03a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f03c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f040:	2b00      	cmp	r3, #0
 800f042:	d103      	bne.n	800f04c <f_open+0x304>
 800f044:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f048:	429a      	cmp	r2, r3
 800f04a:	d8e0      	bhi.n	800f00e <f_open+0x2c6>
				}
				fp->clust = clst;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f050:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f052:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f056:	2b00      	cmp	r3, #0
 800f058:	d127      	bne.n	800f0aa <f_open+0x362>
 800f05a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f05c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f060:	2b00      	cmp	r3, #0
 800f062:	d022      	beq.n	800f0aa <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f064:	697b      	ldr	r3, [r7, #20]
 800f066:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f068:	4618      	mov	r0, r3
 800f06a:	f7fe f8f3 	bl	800d254 <clust2sect>
 800f06e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f072:	2b00      	cmp	r3, #0
 800f074:	d103      	bne.n	800f07e <f_open+0x336>
						res = FR_INT_ERR;
 800f076:	2302      	movs	r3, #2
 800f078:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f07c:	e015      	b.n	800f0aa <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f07e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f080:	0a5a      	lsrs	r2, r3, #9
 800f082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f084:	441a      	add	r2, r3
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f08a:	697b      	ldr	r3, [r7, #20]
 800f08c:	7858      	ldrb	r0, [r3, #1]
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	6a1a      	ldr	r2, [r3, #32]
 800f098:	2301      	movs	r3, #1
 800f09a:	f7fd fd31 	bl	800cb00 <disk_read>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d002      	beq.n	800f0aa <f_open+0x362>
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f0aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d002      	beq.n	800f0b8 <f_open+0x370>
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f0b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800f0bc:	4618      	mov	r0, r3
 800f0be:	3768      	adds	r7, #104	; 0x68
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b08e      	sub	sp, #56	; 0x38
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	60f8      	str	r0, [r7, #12]
 800f0cc:	60b9      	str	r1, [r7, #8]
 800f0ce:	607a      	str	r2, [r7, #4]
 800f0d0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800f0d6:	683b      	ldr	r3, [r7, #0]
 800f0d8:	2200      	movs	r2, #0
 800f0da:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	f107 0214 	add.w	r2, r7, #20
 800f0e2:	4611      	mov	r1, r2
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f7ff fdb3 	bl	800ec50 <validate>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f0f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d107      	bne.n	800f108 <f_read+0x44>
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	7d5b      	ldrb	r3, [r3, #21]
 800f0fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f100:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f104:	2b00      	cmp	r3, #0
 800f106:	d002      	beq.n	800f10e <f_read+0x4a>
 800f108:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f10c:	e115      	b.n	800f33a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	7d1b      	ldrb	r3, [r3, #20]
 800f112:	f003 0301 	and.w	r3, r3, #1
 800f116:	2b00      	cmp	r3, #0
 800f118:	d101      	bne.n	800f11e <f_read+0x5a>
 800f11a:	2307      	movs	r3, #7
 800f11c:	e10d      	b.n	800f33a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	68da      	ldr	r2, [r3, #12]
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	699b      	ldr	r3, [r3, #24]
 800f126:	1ad3      	subs	r3, r2, r3
 800f128:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800f12a:	687a      	ldr	r2, [r7, #4]
 800f12c:	6a3b      	ldr	r3, [r7, #32]
 800f12e:	429a      	cmp	r2, r3
 800f130:	f240 80fe 	bls.w	800f330 <f_read+0x26c>
 800f134:	6a3b      	ldr	r3, [r7, #32]
 800f136:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800f138:	e0fa      	b.n	800f330 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	699b      	ldr	r3, [r3, #24]
 800f13e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f142:	2b00      	cmp	r3, #0
 800f144:	f040 80c6 	bne.w	800f2d4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	699b      	ldr	r3, [r3, #24]
 800f14c:	0a5b      	lsrs	r3, r3, #9
 800f14e:	697a      	ldr	r2, [r7, #20]
 800f150:	8952      	ldrh	r2, [r2, #10]
 800f152:	3a01      	subs	r2, #1
 800f154:	4013      	ands	r3, r2
 800f156:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800f158:	69fb      	ldr	r3, [r7, #28]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d12f      	bne.n	800f1be <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	699b      	ldr	r3, [r3, #24]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d103      	bne.n	800f16e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	689b      	ldr	r3, [r3, #8]
 800f16a:	633b      	str	r3, [r7, #48]	; 0x30
 800f16c:	e013      	b.n	800f196 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f172:	2b00      	cmp	r3, #0
 800f174:	d007      	beq.n	800f186 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	699b      	ldr	r3, [r3, #24]
 800f17a:	4619      	mov	r1, r3
 800f17c:	68f8      	ldr	r0, [r7, #12]
 800f17e:	f7fe fb19 	bl	800d7b4 <clmt_clust>
 800f182:	6338      	str	r0, [r7, #48]	; 0x30
 800f184:	e007      	b.n	800f196 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f186:	68fa      	ldr	r2, [r7, #12]
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	69db      	ldr	r3, [r3, #28]
 800f18c:	4619      	mov	r1, r3
 800f18e:	4610      	mov	r0, r2
 800f190:	f7fe f87f 	bl	800d292 <get_fat>
 800f194:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f198:	2b01      	cmp	r3, #1
 800f19a:	d804      	bhi.n	800f1a6 <f_read+0xe2>
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	2202      	movs	r2, #2
 800f1a0:	755a      	strb	r2, [r3, #21]
 800f1a2:	2302      	movs	r3, #2
 800f1a4:	e0c9      	b.n	800f33a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f1ac:	d104      	bne.n	800f1b8 <f_read+0xf4>
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	2201      	movs	r2, #1
 800f1b2:	755a      	strb	r2, [r3, #21]
 800f1b4:	2301      	movs	r3, #1
 800f1b6:	e0c0      	b.n	800f33a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1bc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f1be:	697a      	ldr	r2, [r7, #20]
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	69db      	ldr	r3, [r3, #28]
 800f1c4:	4619      	mov	r1, r3
 800f1c6:	4610      	mov	r0, r2
 800f1c8:	f7fe f844 	bl	800d254 <clust2sect>
 800f1cc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f1ce:	69bb      	ldr	r3, [r7, #24]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d104      	bne.n	800f1de <f_read+0x11a>
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	2202      	movs	r2, #2
 800f1d8:	755a      	strb	r2, [r3, #21]
 800f1da:	2302      	movs	r3, #2
 800f1dc:	e0ad      	b.n	800f33a <f_read+0x276>
			sect += csect;
 800f1de:	69ba      	ldr	r2, [r7, #24]
 800f1e0:	69fb      	ldr	r3, [r7, #28]
 800f1e2:	4413      	add	r3, r2
 800f1e4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	0a5b      	lsrs	r3, r3, #9
 800f1ea:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d039      	beq.n	800f266 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f1f2:	69fa      	ldr	r2, [r7, #28]
 800f1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f6:	4413      	add	r3, r2
 800f1f8:	697a      	ldr	r2, [r7, #20]
 800f1fa:	8952      	ldrh	r2, [r2, #10]
 800f1fc:	4293      	cmp	r3, r2
 800f1fe:	d905      	bls.n	800f20c <f_read+0x148>
					cc = fs->csize - csect;
 800f200:	697b      	ldr	r3, [r7, #20]
 800f202:	895b      	ldrh	r3, [r3, #10]
 800f204:	461a      	mov	r2, r3
 800f206:	69fb      	ldr	r3, [r7, #28]
 800f208:	1ad3      	subs	r3, r2, r3
 800f20a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f20c:	697b      	ldr	r3, [r7, #20]
 800f20e:	7858      	ldrb	r0, [r3, #1]
 800f210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f212:	69ba      	ldr	r2, [r7, #24]
 800f214:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f216:	f7fd fc73 	bl	800cb00 <disk_read>
 800f21a:	4603      	mov	r3, r0
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d004      	beq.n	800f22a <f_read+0x166>
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	2201      	movs	r2, #1
 800f224:	755a      	strb	r2, [r3, #21]
 800f226:	2301      	movs	r3, #1
 800f228:	e087      	b.n	800f33a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	7d1b      	ldrb	r3, [r3, #20]
 800f22e:	b25b      	sxtb	r3, r3
 800f230:	2b00      	cmp	r3, #0
 800f232:	da14      	bge.n	800f25e <f_read+0x19a>
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	6a1a      	ldr	r2, [r3, #32]
 800f238:	69bb      	ldr	r3, [r7, #24]
 800f23a:	1ad3      	subs	r3, r2, r3
 800f23c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f23e:	429a      	cmp	r2, r3
 800f240:	d90d      	bls.n	800f25e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	6a1a      	ldr	r2, [r3, #32]
 800f246:	69bb      	ldr	r3, [r7, #24]
 800f248:	1ad3      	subs	r3, r2, r3
 800f24a:	025b      	lsls	r3, r3, #9
 800f24c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f24e:	18d0      	adds	r0, r2, r3
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	3330      	adds	r3, #48	; 0x30
 800f254:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f258:	4619      	mov	r1, r3
 800f25a:	f7fd fd31 	bl	800ccc0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f260:	025b      	lsls	r3, r3, #9
 800f262:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800f264:	e050      	b.n	800f308 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	6a1b      	ldr	r3, [r3, #32]
 800f26a:	69ba      	ldr	r2, [r7, #24]
 800f26c:	429a      	cmp	r2, r3
 800f26e:	d02e      	beq.n	800f2ce <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	7d1b      	ldrb	r3, [r3, #20]
 800f274:	b25b      	sxtb	r3, r3
 800f276:	2b00      	cmp	r3, #0
 800f278:	da18      	bge.n	800f2ac <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	7858      	ldrb	r0, [r3, #1]
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	6a1a      	ldr	r2, [r3, #32]
 800f288:	2301      	movs	r3, #1
 800f28a:	f7fd fc59 	bl	800cb40 <disk_write>
 800f28e:	4603      	mov	r3, r0
 800f290:	2b00      	cmp	r3, #0
 800f292:	d004      	beq.n	800f29e <f_read+0x1da>
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	2201      	movs	r2, #1
 800f298:	755a      	strb	r2, [r3, #21]
 800f29a:	2301      	movs	r3, #1
 800f29c:	e04d      	b.n	800f33a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	7d1b      	ldrb	r3, [r3, #20]
 800f2a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2a6:	b2da      	uxtb	r2, r3
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	7858      	ldrb	r0, [r3, #1]
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f2b6:	2301      	movs	r3, #1
 800f2b8:	69ba      	ldr	r2, [r7, #24]
 800f2ba:	f7fd fc21 	bl	800cb00 <disk_read>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d004      	beq.n	800f2ce <f_read+0x20a>
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	2201      	movs	r2, #1
 800f2c8:	755a      	strb	r2, [r3, #21]
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	e035      	b.n	800f33a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	69ba      	ldr	r2, [r7, #24]
 800f2d2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	699b      	ldr	r3, [r3, #24]
 800f2d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2dc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f2e0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f2e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	429a      	cmp	r2, r3
 800f2e8:	d901      	bls.n	800f2ee <f_read+0x22a>
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	699b      	ldr	r3, [r3, #24]
 800f2f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2fc:	4413      	add	r3, r2
 800f2fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f300:	4619      	mov	r1, r3
 800f302:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f304:	f7fd fcdc 	bl	800ccc0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f30c:	4413      	add	r3, r2
 800f30e:	627b      	str	r3, [r7, #36]	; 0x24
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	699a      	ldr	r2, [r3, #24]
 800f314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f316:	441a      	add	r2, r3
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	619a      	str	r2, [r3, #24]
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	681a      	ldr	r2, [r3, #0]
 800f320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f322:	441a      	add	r2, r3
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	601a      	str	r2, [r3, #0]
 800f328:	687a      	ldr	r2, [r7, #4]
 800f32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f32c:	1ad3      	subs	r3, r2, r3
 800f32e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2b00      	cmp	r3, #0
 800f334:	f47f af01 	bne.w	800f13a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800f338:	2300      	movs	r3, #0
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3738      	adds	r7, #56	; 0x38
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}

0800f342 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f342:	b580      	push	{r7, lr}
 800f344:	b086      	sub	sp, #24
 800f346:	af00      	add	r7, sp, #0
 800f348:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f107 0208 	add.w	r2, r7, #8
 800f350:	4611      	mov	r1, r2
 800f352:	4618      	mov	r0, r3
 800f354:	f7ff fc7c 	bl	800ec50 <validate>
 800f358:	4603      	mov	r3, r0
 800f35a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f35c:	7dfb      	ldrb	r3, [r7, #23]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d168      	bne.n	800f434 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	7d1b      	ldrb	r3, [r3, #20]
 800f366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d062      	beq.n	800f434 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	7d1b      	ldrb	r3, [r3, #20]
 800f372:	b25b      	sxtb	r3, r3
 800f374:	2b00      	cmp	r3, #0
 800f376:	da15      	bge.n	800f3a4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	7858      	ldrb	r0, [r3, #1]
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6a1a      	ldr	r2, [r3, #32]
 800f386:	2301      	movs	r3, #1
 800f388:	f7fd fbda 	bl	800cb40 <disk_write>
 800f38c:	4603      	mov	r3, r0
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d001      	beq.n	800f396 <f_sync+0x54>
 800f392:	2301      	movs	r3, #1
 800f394:	e04f      	b.n	800f436 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	7d1b      	ldrb	r3, [r3, #20]
 800f39a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f39e:	b2da      	uxtb	r2, r3
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f3a4:	f7fd f858 	bl	800c458 <get_fattime>
 800f3a8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f3aa:	68ba      	ldr	r2, [r7, #8]
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3b0:	4619      	mov	r1, r3
 800f3b2:	4610      	mov	r0, r2
 800f3b4:	f7fd feb2 	bl	800d11c <move_window>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f3bc:	7dfb      	ldrb	r3, [r7, #23]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d138      	bne.n	800f434 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3c6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	330b      	adds	r3, #11
 800f3cc:	781a      	ldrb	r2, [r3, #0]
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	330b      	adds	r3, #11
 800f3d2:	f042 0220 	orr.w	r2, r2, #32
 800f3d6:	b2d2      	uxtb	r2, r2
 800f3d8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6818      	ldr	r0, [r3, #0]
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	689b      	ldr	r3, [r3, #8]
 800f3e2:	461a      	mov	r2, r3
 800f3e4:	68f9      	ldr	r1, [r7, #12]
 800f3e6:	f7fe fbbf 	bl	800db68 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	f103 021c 	add.w	r2, r3, #28
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	68db      	ldr	r3, [r3, #12]
 800f3f4:	4619      	mov	r1, r3
 800f3f6:	4610      	mov	r0, r2
 800f3f8:	f7fd fc36 	bl	800cc68 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	3316      	adds	r3, #22
 800f400:	6939      	ldr	r1, [r7, #16]
 800f402:	4618      	mov	r0, r3
 800f404:	f7fd fc30 	bl	800cc68 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	3312      	adds	r3, #18
 800f40c:	2100      	movs	r1, #0
 800f40e:	4618      	mov	r0, r3
 800f410:	f7fd fc0f 	bl	800cc32 <st_word>
					fs->wflag = 1;
 800f414:	68bb      	ldr	r3, [r7, #8]
 800f416:	2201      	movs	r2, #1
 800f418:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f41a:	68bb      	ldr	r3, [r7, #8]
 800f41c:	4618      	mov	r0, r3
 800f41e:	f7fd feab 	bl	800d178 <sync_fs>
 800f422:	4603      	mov	r3, r0
 800f424:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	7d1b      	ldrb	r3, [r3, #20]
 800f42a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f42e:	b2da      	uxtb	r2, r3
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f434:	7dfb      	ldrb	r3, [r7, #23]
}
 800f436:	4618      	mov	r0, r3
 800f438:	3718      	adds	r7, #24
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}

0800f43e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f43e:	b580      	push	{r7, lr}
 800f440:	b084      	sub	sp, #16
 800f442:	af00      	add	r7, sp, #0
 800f444:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f446:	6878      	ldr	r0, [r7, #4]
 800f448:	f7ff ff7b 	bl	800f342 <f_sync>
 800f44c:	4603      	mov	r3, r0
 800f44e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f450:	7bfb      	ldrb	r3, [r7, #15]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d118      	bne.n	800f488 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f107 0208 	add.w	r2, r7, #8
 800f45c:	4611      	mov	r1, r2
 800f45e:	4618      	mov	r0, r3
 800f460:	f7ff fbf6 	bl	800ec50 <validate>
 800f464:	4603      	mov	r3, r0
 800f466:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f468:	7bfb      	ldrb	r3, [r7, #15]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d10c      	bne.n	800f488 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	691b      	ldr	r3, [r3, #16]
 800f472:	4618      	mov	r0, r3
 800f474:	f7fd fdae 	bl	800cfd4 <dec_lock>
 800f478:	4603      	mov	r3, r0
 800f47a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f47c:	7bfb      	ldrb	r3, [r7, #15]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d102      	bne.n	800f488 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2200      	movs	r2, #0
 800f486:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f488:	7bfb      	ldrb	r3, [r7, #15]
}
 800f48a:	4618      	mov	r0, r3
 800f48c:	3710      	adds	r7, #16
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}
	...

0800f494 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f494:	b480      	push	{r7}
 800f496:	b087      	sub	sp, #28
 800f498:	af00      	add	r7, sp, #0
 800f49a:	60f8      	str	r0, [r7, #12]
 800f49c:	60b9      	str	r1, [r7, #8]
 800f49e:	4613      	mov	r3, r2
 800f4a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f4aa:	4b1f      	ldr	r3, [pc, #124]	; (800f528 <FATFS_LinkDriverEx+0x94>)
 800f4ac:	7a5b      	ldrb	r3, [r3, #9]
 800f4ae:	b2db      	uxtb	r3, r3
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d131      	bne.n	800f518 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f4b4:	4b1c      	ldr	r3, [pc, #112]	; (800f528 <FATFS_LinkDriverEx+0x94>)
 800f4b6:	7a5b      	ldrb	r3, [r3, #9]
 800f4b8:	b2db      	uxtb	r3, r3
 800f4ba:	461a      	mov	r2, r3
 800f4bc:	4b1a      	ldr	r3, [pc, #104]	; (800f528 <FATFS_LinkDriverEx+0x94>)
 800f4be:	2100      	movs	r1, #0
 800f4c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f4c2:	4b19      	ldr	r3, [pc, #100]	; (800f528 <FATFS_LinkDriverEx+0x94>)
 800f4c4:	7a5b      	ldrb	r3, [r3, #9]
 800f4c6:	b2db      	uxtb	r3, r3
 800f4c8:	4a17      	ldr	r2, [pc, #92]	; (800f528 <FATFS_LinkDriverEx+0x94>)
 800f4ca:	009b      	lsls	r3, r3, #2
 800f4cc:	4413      	add	r3, r2
 800f4ce:	68fa      	ldr	r2, [r7, #12]
 800f4d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f4d2:	4b15      	ldr	r3, [pc, #84]	; (800f528 <FATFS_LinkDriverEx+0x94>)
 800f4d4:	7a5b      	ldrb	r3, [r3, #9]
 800f4d6:	b2db      	uxtb	r3, r3
 800f4d8:	461a      	mov	r2, r3
 800f4da:	4b13      	ldr	r3, [pc, #76]	; (800f528 <FATFS_LinkDriverEx+0x94>)
 800f4dc:	4413      	add	r3, r2
 800f4de:	79fa      	ldrb	r2, [r7, #7]
 800f4e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f4e2:	4b11      	ldr	r3, [pc, #68]	; (800f528 <FATFS_LinkDriverEx+0x94>)
 800f4e4:	7a5b      	ldrb	r3, [r3, #9]
 800f4e6:	b2db      	uxtb	r3, r3
 800f4e8:	1c5a      	adds	r2, r3, #1
 800f4ea:	b2d1      	uxtb	r1, r2
 800f4ec:	4a0e      	ldr	r2, [pc, #56]	; (800f528 <FATFS_LinkDriverEx+0x94>)
 800f4ee:	7251      	strb	r1, [r2, #9]
 800f4f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f4f2:	7dbb      	ldrb	r3, [r7, #22]
 800f4f4:	3330      	adds	r3, #48	; 0x30
 800f4f6:	b2da      	uxtb	r2, r3
 800f4f8:	68bb      	ldr	r3, [r7, #8]
 800f4fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	3301      	adds	r3, #1
 800f500:	223a      	movs	r2, #58	; 0x3a
 800f502:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	3302      	adds	r3, #2
 800f508:	222f      	movs	r2, #47	; 0x2f
 800f50a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	3303      	adds	r3, #3
 800f510:	2200      	movs	r2, #0
 800f512:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f514:	2300      	movs	r3, #0
 800f516:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f518:	7dfb      	ldrb	r3, [r7, #23]
}
 800f51a:	4618      	mov	r0, r3
 800f51c:	371c      	adds	r7, #28
 800f51e:	46bd      	mov	sp, r7
 800f520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f524:	4770      	bx	lr
 800f526:	bf00      	nop
 800f528:	2400052c 	.word	0x2400052c

0800f52c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b082      	sub	sp, #8
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
 800f534:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f536:	2200      	movs	r2, #0
 800f538:	6839      	ldr	r1, [r7, #0]
 800f53a:	6878      	ldr	r0, [r7, #4]
 800f53c:	f7ff ffaa 	bl	800f494 <FATFS_LinkDriverEx>
 800f540:	4603      	mov	r3, r0
}
 800f542:	4618      	mov	r0, r3
 800f544:	3708      	adds	r7, #8
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}
	...

0800f54c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f54c:	b480      	push	{r7}
 800f54e:	b085      	sub	sp, #20
 800f550:	af00      	add	r7, sp, #0
 800f552:	4603      	mov	r3, r0
 800f554:	6039      	str	r1, [r7, #0]
 800f556:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f558:	88fb      	ldrh	r3, [r7, #6]
 800f55a:	2b7f      	cmp	r3, #127	; 0x7f
 800f55c:	d802      	bhi.n	800f564 <ff_convert+0x18>
		c = chr;
 800f55e:	88fb      	ldrh	r3, [r7, #6]
 800f560:	81fb      	strh	r3, [r7, #14]
 800f562:	e025      	b.n	800f5b0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d00b      	beq.n	800f582 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f56a:	88fb      	ldrh	r3, [r7, #6]
 800f56c:	2bff      	cmp	r3, #255	; 0xff
 800f56e:	d805      	bhi.n	800f57c <ff_convert+0x30>
 800f570:	88fb      	ldrh	r3, [r7, #6]
 800f572:	3b80      	subs	r3, #128	; 0x80
 800f574:	4a12      	ldr	r2, [pc, #72]	; (800f5c0 <ff_convert+0x74>)
 800f576:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f57a:	e000      	b.n	800f57e <ff_convert+0x32>
 800f57c:	2300      	movs	r3, #0
 800f57e:	81fb      	strh	r3, [r7, #14]
 800f580:	e016      	b.n	800f5b0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f582:	2300      	movs	r3, #0
 800f584:	81fb      	strh	r3, [r7, #14]
 800f586:	e009      	b.n	800f59c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f588:	89fb      	ldrh	r3, [r7, #14]
 800f58a:	4a0d      	ldr	r2, [pc, #52]	; (800f5c0 <ff_convert+0x74>)
 800f58c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f590:	88fa      	ldrh	r2, [r7, #6]
 800f592:	429a      	cmp	r2, r3
 800f594:	d006      	beq.n	800f5a4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f596:	89fb      	ldrh	r3, [r7, #14]
 800f598:	3301      	adds	r3, #1
 800f59a:	81fb      	strh	r3, [r7, #14]
 800f59c:	89fb      	ldrh	r3, [r7, #14]
 800f59e:	2b7f      	cmp	r3, #127	; 0x7f
 800f5a0:	d9f2      	bls.n	800f588 <ff_convert+0x3c>
 800f5a2:	e000      	b.n	800f5a6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f5a4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f5a6:	89fb      	ldrh	r3, [r7, #14]
 800f5a8:	3380      	adds	r3, #128	; 0x80
 800f5aa:	b29b      	uxth	r3, r3
 800f5ac:	b2db      	uxtb	r3, r3
 800f5ae:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f5b0:	89fb      	ldrh	r3, [r7, #14]
}
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	3714      	adds	r7, #20
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5bc:	4770      	bx	lr
 800f5be:	bf00      	nop
 800f5c0:	08010874 	.word	0x08010874

0800f5c4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	b087      	sub	sp, #28
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f5ce:	88fb      	ldrh	r3, [r7, #6]
 800f5d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f5d4:	d201      	bcs.n	800f5da <ff_wtoupper+0x16>
 800f5d6:	4b3e      	ldr	r3, [pc, #248]	; (800f6d0 <ff_wtoupper+0x10c>)
 800f5d8:	e000      	b.n	800f5dc <ff_wtoupper+0x18>
 800f5da:	4b3e      	ldr	r3, [pc, #248]	; (800f6d4 <ff_wtoupper+0x110>)
 800f5dc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	1c9a      	adds	r2, r3, #2
 800f5e2:	617a      	str	r2, [r7, #20]
 800f5e4:	881b      	ldrh	r3, [r3, #0]
 800f5e6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f5e8:	8a7b      	ldrh	r3, [r7, #18]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d068      	beq.n	800f6c0 <ff_wtoupper+0xfc>
 800f5ee:	88fa      	ldrh	r2, [r7, #6]
 800f5f0:	8a7b      	ldrh	r3, [r7, #18]
 800f5f2:	429a      	cmp	r2, r3
 800f5f4:	d364      	bcc.n	800f6c0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	1c9a      	adds	r2, r3, #2
 800f5fa:	617a      	str	r2, [r7, #20]
 800f5fc:	881b      	ldrh	r3, [r3, #0]
 800f5fe:	823b      	strh	r3, [r7, #16]
 800f600:	8a3b      	ldrh	r3, [r7, #16]
 800f602:	0a1b      	lsrs	r3, r3, #8
 800f604:	81fb      	strh	r3, [r7, #14]
 800f606:	8a3b      	ldrh	r3, [r7, #16]
 800f608:	b2db      	uxtb	r3, r3
 800f60a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f60c:	88fa      	ldrh	r2, [r7, #6]
 800f60e:	8a79      	ldrh	r1, [r7, #18]
 800f610:	8a3b      	ldrh	r3, [r7, #16]
 800f612:	440b      	add	r3, r1
 800f614:	429a      	cmp	r2, r3
 800f616:	da49      	bge.n	800f6ac <ff_wtoupper+0xe8>
			switch (cmd) {
 800f618:	89fb      	ldrh	r3, [r7, #14]
 800f61a:	2b08      	cmp	r3, #8
 800f61c:	d84f      	bhi.n	800f6be <ff_wtoupper+0xfa>
 800f61e:	a201      	add	r2, pc, #4	; (adr r2, 800f624 <ff_wtoupper+0x60>)
 800f620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f624:	0800f649 	.word	0x0800f649
 800f628:	0800f65b 	.word	0x0800f65b
 800f62c:	0800f671 	.word	0x0800f671
 800f630:	0800f679 	.word	0x0800f679
 800f634:	0800f681 	.word	0x0800f681
 800f638:	0800f689 	.word	0x0800f689
 800f63c:	0800f691 	.word	0x0800f691
 800f640:	0800f699 	.word	0x0800f699
 800f644:	0800f6a1 	.word	0x0800f6a1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f648:	88fa      	ldrh	r2, [r7, #6]
 800f64a:	8a7b      	ldrh	r3, [r7, #18]
 800f64c:	1ad3      	subs	r3, r2, r3
 800f64e:	005b      	lsls	r3, r3, #1
 800f650:	697a      	ldr	r2, [r7, #20]
 800f652:	4413      	add	r3, r2
 800f654:	881b      	ldrh	r3, [r3, #0]
 800f656:	80fb      	strh	r3, [r7, #6]
 800f658:	e027      	b.n	800f6aa <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f65a:	88fa      	ldrh	r2, [r7, #6]
 800f65c:	8a7b      	ldrh	r3, [r7, #18]
 800f65e:	1ad3      	subs	r3, r2, r3
 800f660:	b29b      	uxth	r3, r3
 800f662:	f003 0301 	and.w	r3, r3, #1
 800f666:	b29b      	uxth	r3, r3
 800f668:	88fa      	ldrh	r2, [r7, #6]
 800f66a:	1ad3      	subs	r3, r2, r3
 800f66c:	80fb      	strh	r3, [r7, #6]
 800f66e:	e01c      	b.n	800f6aa <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f670:	88fb      	ldrh	r3, [r7, #6]
 800f672:	3b10      	subs	r3, #16
 800f674:	80fb      	strh	r3, [r7, #6]
 800f676:	e018      	b.n	800f6aa <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f678:	88fb      	ldrh	r3, [r7, #6]
 800f67a:	3b20      	subs	r3, #32
 800f67c:	80fb      	strh	r3, [r7, #6]
 800f67e:	e014      	b.n	800f6aa <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f680:	88fb      	ldrh	r3, [r7, #6]
 800f682:	3b30      	subs	r3, #48	; 0x30
 800f684:	80fb      	strh	r3, [r7, #6]
 800f686:	e010      	b.n	800f6aa <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f688:	88fb      	ldrh	r3, [r7, #6]
 800f68a:	3b1a      	subs	r3, #26
 800f68c:	80fb      	strh	r3, [r7, #6]
 800f68e:	e00c      	b.n	800f6aa <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f690:	88fb      	ldrh	r3, [r7, #6]
 800f692:	3308      	adds	r3, #8
 800f694:	80fb      	strh	r3, [r7, #6]
 800f696:	e008      	b.n	800f6aa <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f698:	88fb      	ldrh	r3, [r7, #6]
 800f69a:	3b50      	subs	r3, #80	; 0x50
 800f69c:	80fb      	strh	r3, [r7, #6]
 800f69e:	e004      	b.n	800f6aa <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f6a0:	88fb      	ldrh	r3, [r7, #6]
 800f6a2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800f6a6:	80fb      	strh	r3, [r7, #6]
 800f6a8:	bf00      	nop
			}
			break;
 800f6aa:	e008      	b.n	800f6be <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f6ac:	89fb      	ldrh	r3, [r7, #14]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d195      	bne.n	800f5de <ff_wtoupper+0x1a>
 800f6b2:	8a3b      	ldrh	r3, [r7, #16]
 800f6b4:	005b      	lsls	r3, r3, #1
 800f6b6:	697a      	ldr	r2, [r7, #20]
 800f6b8:	4413      	add	r3, r2
 800f6ba:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f6bc:	e78f      	b.n	800f5de <ff_wtoupper+0x1a>
			break;
 800f6be:	bf00      	nop
	}

	return chr;
 800f6c0:	88fb      	ldrh	r3, [r7, #6]
}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	371c      	adds	r7, #28
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6cc:	4770      	bx	lr
 800f6ce:	bf00      	nop
 800f6d0:	08010974 	.word	0x08010974
 800f6d4:	08010b68 	.word	0x08010b68

0800f6d8 <__errno>:
 800f6d8:	4b01      	ldr	r3, [pc, #4]	; (800f6e0 <__errno+0x8>)
 800f6da:	6818      	ldr	r0, [r3, #0]
 800f6dc:	4770      	bx	lr
 800f6de:	bf00      	nop
 800f6e0:	24000018 	.word	0x24000018

0800f6e4 <__libc_init_array>:
 800f6e4:	b570      	push	{r4, r5, r6, lr}
 800f6e6:	4d0d      	ldr	r5, [pc, #52]	; (800f71c <__libc_init_array+0x38>)
 800f6e8:	4c0d      	ldr	r4, [pc, #52]	; (800f720 <__libc_init_array+0x3c>)
 800f6ea:	1b64      	subs	r4, r4, r5
 800f6ec:	10a4      	asrs	r4, r4, #2
 800f6ee:	2600      	movs	r6, #0
 800f6f0:	42a6      	cmp	r6, r4
 800f6f2:	d109      	bne.n	800f708 <__libc_init_array+0x24>
 800f6f4:	4d0b      	ldr	r5, [pc, #44]	; (800f724 <__libc_init_array+0x40>)
 800f6f6:	4c0c      	ldr	r4, [pc, #48]	; (800f728 <__libc_init_array+0x44>)
 800f6f8:	f000 fcdc 	bl	80100b4 <_init>
 800f6fc:	1b64      	subs	r4, r4, r5
 800f6fe:	10a4      	asrs	r4, r4, #2
 800f700:	2600      	movs	r6, #0
 800f702:	42a6      	cmp	r6, r4
 800f704:	d105      	bne.n	800f712 <__libc_init_array+0x2e>
 800f706:	bd70      	pop	{r4, r5, r6, pc}
 800f708:	f855 3b04 	ldr.w	r3, [r5], #4
 800f70c:	4798      	blx	r3
 800f70e:	3601      	adds	r6, #1
 800f710:	e7ee      	b.n	800f6f0 <__libc_init_array+0xc>
 800f712:	f855 3b04 	ldr.w	r3, [r5], #4
 800f716:	4798      	blx	r3
 800f718:	3601      	adds	r6, #1
 800f71a:	e7f2      	b.n	800f702 <__libc_init_array+0x1e>
 800f71c:	08010c58 	.word	0x08010c58
 800f720:	08010c58 	.word	0x08010c58
 800f724:	08010c58 	.word	0x08010c58
 800f728:	08010c5c 	.word	0x08010c5c

0800f72c <memcpy>:
 800f72c:	440a      	add	r2, r1
 800f72e:	4291      	cmp	r1, r2
 800f730:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f734:	d100      	bne.n	800f738 <memcpy+0xc>
 800f736:	4770      	bx	lr
 800f738:	b510      	push	{r4, lr}
 800f73a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f73e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f742:	4291      	cmp	r1, r2
 800f744:	d1f9      	bne.n	800f73a <memcpy+0xe>
 800f746:	bd10      	pop	{r4, pc}

0800f748 <memmove>:
 800f748:	4288      	cmp	r0, r1
 800f74a:	b510      	push	{r4, lr}
 800f74c:	eb01 0402 	add.w	r4, r1, r2
 800f750:	d902      	bls.n	800f758 <memmove+0x10>
 800f752:	4284      	cmp	r4, r0
 800f754:	4623      	mov	r3, r4
 800f756:	d807      	bhi.n	800f768 <memmove+0x20>
 800f758:	1e43      	subs	r3, r0, #1
 800f75a:	42a1      	cmp	r1, r4
 800f75c:	d008      	beq.n	800f770 <memmove+0x28>
 800f75e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f762:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f766:	e7f8      	b.n	800f75a <memmove+0x12>
 800f768:	4402      	add	r2, r0
 800f76a:	4601      	mov	r1, r0
 800f76c:	428a      	cmp	r2, r1
 800f76e:	d100      	bne.n	800f772 <memmove+0x2a>
 800f770:	bd10      	pop	{r4, pc}
 800f772:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f776:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f77a:	e7f7      	b.n	800f76c <memmove+0x24>

0800f77c <memset>:
 800f77c:	4402      	add	r2, r0
 800f77e:	4603      	mov	r3, r0
 800f780:	4293      	cmp	r3, r2
 800f782:	d100      	bne.n	800f786 <memset+0xa>
 800f784:	4770      	bx	lr
 800f786:	f803 1b01 	strb.w	r1, [r3], #1
 800f78a:	e7f9      	b.n	800f780 <memset+0x4>

0800f78c <sniprintf>:
 800f78c:	b40c      	push	{r2, r3}
 800f78e:	b530      	push	{r4, r5, lr}
 800f790:	4b17      	ldr	r3, [pc, #92]	; (800f7f0 <sniprintf+0x64>)
 800f792:	1e0c      	subs	r4, r1, #0
 800f794:	681d      	ldr	r5, [r3, #0]
 800f796:	b09d      	sub	sp, #116	; 0x74
 800f798:	da08      	bge.n	800f7ac <sniprintf+0x20>
 800f79a:	238b      	movs	r3, #139	; 0x8b
 800f79c:	602b      	str	r3, [r5, #0]
 800f79e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f7a2:	b01d      	add	sp, #116	; 0x74
 800f7a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f7a8:	b002      	add	sp, #8
 800f7aa:	4770      	bx	lr
 800f7ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f7b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f7b4:	bf14      	ite	ne
 800f7b6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800f7ba:	4623      	moveq	r3, r4
 800f7bc:	9304      	str	r3, [sp, #16]
 800f7be:	9307      	str	r3, [sp, #28]
 800f7c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f7c4:	9002      	str	r0, [sp, #8]
 800f7c6:	9006      	str	r0, [sp, #24]
 800f7c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f7cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f7ce:	ab21      	add	r3, sp, #132	; 0x84
 800f7d0:	a902      	add	r1, sp, #8
 800f7d2:	4628      	mov	r0, r5
 800f7d4:	9301      	str	r3, [sp, #4]
 800f7d6:	f000 f8a3 	bl	800f920 <_svfiprintf_r>
 800f7da:	1c43      	adds	r3, r0, #1
 800f7dc:	bfbc      	itt	lt
 800f7de:	238b      	movlt	r3, #139	; 0x8b
 800f7e0:	602b      	strlt	r3, [r5, #0]
 800f7e2:	2c00      	cmp	r4, #0
 800f7e4:	d0dd      	beq.n	800f7a2 <sniprintf+0x16>
 800f7e6:	9b02      	ldr	r3, [sp, #8]
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	701a      	strb	r2, [r3, #0]
 800f7ec:	e7d9      	b.n	800f7a2 <sniprintf+0x16>
 800f7ee:	bf00      	nop
 800f7f0:	24000018 	.word	0x24000018

0800f7f4 <_vsniprintf_r>:
 800f7f4:	b530      	push	{r4, r5, lr}
 800f7f6:	4614      	mov	r4, r2
 800f7f8:	2c00      	cmp	r4, #0
 800f7fa:	b09b      	sub	sp, #108	; 0x6c
 800f7fc:	4605      	mov	r5, r0
 800f7fe:	461a      	mov	r2, r3
 800f800:	da05      	bge.n	800f80e <_vsniprintf_r+0x1a>
 800f802:	238b      	movs	r3, #139	; 0x8b
 800f804:	6003      	str	r3, [r0, #0]
 800f806:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f80a:	b01b      	add	sp, #108	; 0x6c
 800f80c:	bd30      	pop	{r4, r5, pc}
 800f80e:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f812:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f816:	bf14      	ite	ne
 800f818:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800f81c:	4623      	moveq	r3, r4
 800f81e:	9302      	str	r3, [sp, #8]
 800f820:	9305      	str	r3, [sp, #20]
 800f822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f826:	9100      	str	r1, [sp, #0]
 800f828:	9104      	str	r1, [sp, #16]
 800f82a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f82e:	4669      	mov	r1, sp
 800f830:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f832:	f000 f875 	bl	800f920 <_svfiprintf_r>
 800f836:	1c43      	adds	r3, r0, #1
 800f838:	bfbc      	itt	lt
 800f83a:	238b      	movlt	r3, #139	; 0x8b
 800f83c:	602b      	strlt	r3, [r5, #0]
 800f83e:	2c00      	cmp	r4, #0
 800f840:	d0e3      	beq.n	800f80a <_vsniprintf_r+0x16>
 800f842:	9b00      	ldr	r3, [sp, #0]
 800f844:	2200      	movs	r2, #0
 800f846:	701a      	strb	r2, [r3, #0]
 800f848:	e7df      	b.n	800f80a <_vsniprintf_r+0x16>
	...

0800f84c <vsniprintf>:
 800f84c:	b507      	push	{r0, r1, r2, lr}
 800f84e:	9300      	str	r3, [sp, #0]
 800f850:	4613      	mov	r3, r2
 800f852:	460a      	mov	r2, r1
 800f854:	4601      	mov	r1, r0
 800f856:	4803      	ldr	r0, [pc, #12]	; (800f864 <vsniprintf+0x18>)
 800f858:	6800      	ldr	r0, [r0, #0]
 800f85a:	f7ff ffcb 	bl	800f7f4 <_vsniprintf_r>
 800f85e:	b003      	add	sp, #12
 800f860:	f85d fb04 	ldr.w	pc, [sp], #4
 800f864:	24000018 	.word	0x24000018

0800f868 <__ssputs_r>:
 800f868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f86c:	688e      	ldr	r6, [r1, #8]
 800f86e:	429e      	cmp	r6, r3
 800f870:	4682      	mov	sl, r0
 800f872:	460c      	mov	r4, r1
 800f874:	4690      	mov	r8, r2
 800f876:	461f      	mov	r7, r3
 800f878:	d838      	bhi.n	800f8ec <__ssputs_r+0x84>
 800f87a:	898a      	ldrh	r2, [r1, #12]
 800f87c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f880:	d032      	beq.n	800f8e8 <__ssputs_r+0x80>
 800f882:	6825      	ldr	r5, [r4, #0]
 800f884:	6909      	ldr	r1, [r1, #16]
 800f886:	eba5 0901 	sub.w	r9, r5, r1
 800f88a:	6965      	ldr	r5, [r4, #20]
 800f88c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f890:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f894:	3301      	adds	r3, #1
 800f896:	444b      	add	r3, r9
 800f898:	106d      	asrs	r5, r5, #1
 800f89a:	429d      	cmp	r5, r3
 800f89c:	bf38      	it	cc
 800f89e:	461d      	movcc	r5, r3
 800f8a0:	0553      	lsls	r3, r2, #21
 800f8a2:	d531      	bpl.n	800f908 <__ssputs_r+0xa0>
 800f8a4:	4629      	mov	r1, r5
 800f8a6:	f000 fb3b 	bl	800ff20 <_malloc_r>
 800f8aa:	4606      	mov	r6, r0
 800f8ac:	b950      	cbnz	r0, 800f8c4 <__ssputs_r+0x5c>
 800f8ae:	230c      	movs	r3, #12
 800f8b0:	f8ca 3000 	str.w	r3, [sl]
 800f8b4:	89a3      	ldrh	r3, [r4, #12]
 800f8b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8ba:	81a3      	strh	r3, [r4, #12]
 800f8bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f8c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8c4:	6921      	ldr	r1, [r4, #16]
 800f8c6:	464a      	mov	r2, r9
 800f8c8:	f7ff ff30 	bl	800f72c <memcpy>
 800f8cc:	89a3      	ldrh	r3, [r4, #12]
 800f8ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f8d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8d6:	81a3      	strh	r3, [r4, #12]
 800f8d8:	6126      	str	r6, [r4, #16]
 800f8da:	6165      	str	r5, [r4, #20]
 800f8dc:	444e      	add	r6, r9
 800f8de:	eba5 0509 	sub.w	r5, r5, r9
 800f8e2:	6026      	str	r6, [r4, #0]
 800f8e4:	60a5      	str	r5, [r4, #8]
 800f8e6:	463e      	mov	r6, r7
 800f8e8:	42be      	cmp	r6, r7
 800f8ea:	d900      	bls.n	800f8ee <__ssputs_r+0x86>
 800f8ec:	463e      	mov	r6, r7
 800f8ee:	6820      	ldr	r0, [r4, #0]
 800f8f0:	4632      	mov	r2, r6
 800f8f2:	4641      	mov	r1, r8
 800f8f4:	f7ff ff28 	bl	800f748 <memmove>
 800f8f8:	68a3      	ldr	r3, [r4, #8]
 800f8fa:	1b9b      	subs	r3, r3, r6
 800f8fc:	60a3      	str	r3, [r4, #8]
 800f8fe:	6823      	ldr	r3, [r4, #0]
 800f900:	4433      	add	r3, r6
 800f902:	6023      	str	r3, [r4, #0]
 800f904:	2000      	movs	r0, #0
 800f906:	e7db      	b.n	800f8c0 <__ssputs_r+0x58>
 800f908:	462a      	mov	r2, r5
 800f90a:	f000 fb7d 	bl	8010008 <_realloc_r>
 800f90e:	4606      	mov	r6, r0
 800f910:	2800      	cmp	r0, #0
 800f912:	d1e1      	bne.n	800f8d8 <__ssputs_r+0x70>
 800f914:	6921      	ldr	r1, [r4, #16]
 800f916:	4650      	mov	r0, sl
 800f918:	f000 fa96 	bl	800fe48 <_free_r>
 800f91c:	e7c7      	b.n	800f8ae <__ssputs_r+0x46>
	...

0800f920 <_svfiprintf_r>:
 800f920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f924:	4698      	mov	r8, r3
 800f926:	898b      	ldrh	r3, [r1, #12]
 800f928:	061b      	lsls	r3, r3, #24
 800f92a:	b09d      	sub	sp, #116	; 0x74
 800f92c:	4607      	mov	r7, r0
 800f92e:	460d      	mov	r5, r1
 800f930:	4614      	mov	r4, r2
 800f932:	d50e      	bpl.n	800f952 <_svfiprintf_r+0x32>
 800f934:	690b      	ldr	r3, [r1, #16]
 800f936:	b963      	cbnz	r3, 800f952 <_svfiprintf_r+0x32>
 800f938:	2140      	movs	r1, #64	; 0x40
 800f93a:	f000 faf1 	bl	800ff20 <_malloc_r>
 800f93e:	6028      	str	r0, [r5, #0]
 800f940:	6128      	str	r0, [r5, #16]
 800f942:	b920      	cbnz	r0, 800f94e <_svfiprintf_r+0x2e>
 800f944:	230c      	movs	r3, #12
 800f946:	603b      	str	r3, [r7, #0]
 800f948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f94c:	e0d1      	b.n	800faf2 <_svfiprintf_r+0x1d2>
 800f94e:	2340      	movs	r3, #64	; 0x40
 800f950:	616b      	str	r3, [r5, #20]
 800f952:	2300      	movs	r3, #0
 800f954:	9309      	str	r3, [sp, #36]	; 0x24
 800f956:	2320      	movs	r3, #32
 800f958:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f95c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f960:	2330      	movs	r3, #48	; 0x30
 800f962:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fb0c <_svfiprintf_r+0x1ec>
 800f966:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f96a:	f04f 0901 	mov.w	r9, #1
 800f96e:	4623      	mov	r3, r4
 800f970:	469a      	mov	sl, r3
 800f972:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f976:	b10a      	cbz	r2, 800f97c <_svfiprintf_r+0x5c>
 800f978:	2a25      	cmp	r2, #37	; 0x25
 800f97a:	d1f9      	bne.n	800f970 <_svfiprintf_r+0x50>
 800f97c:	ebba 0b04 	subs.w	fp, sl, r4
 800f980:	d00b      	beq.n	800f99a <_svfiprintf_r+0x7a>
 800f982:	465b      	mov	r3, fp
 800f984:	4622      	mov	r2, r4
 800f986:	4629      	mov	r1, r5
 800f988:	4638      	mov	r0, r7
 800f98a:	f7ff ff6d 	bl	800f868 <__ssputs_r>
 800f98e:	3001      	adds	r0, #1
 800f990:	f000 80aa 	beq.w	800fae8 <_svfiprintf_r+0x1c8>
 800f994:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f996:	445a      	add	r2, fp
 800f998:	9209      	str	r2, [sp, #36]	; 0x24
 800f99a:	f89a 3000 	ldrb.w	r3, [sl]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	f000 80a2 	beq.w	800fae8 <_svfiprintf_r+0x1c8>
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f9aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f9ae:	f10a 0a01 	add.w	sl, sl, #1
 800f9b2:	9304      	str	r3, [sp, #16]
 800f9b4:	9307      	str	r3, [sp, #28]
 800f9b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f9ba:	931a      	str	r3, [sp, #104]	; 0x68
 800f9bc:	4654      	mov	r4, sl
 800f9be:	2205      	movs	r2, #5
 800f9c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9c4:	4851      	ldr	r0, [pc, #324]	; (800fb0c <_svfiprintf_r+0x1ec>)
 800f9c6:	f7f0 fc93 	bl	80002f0 <memchr>
 800f9ca:	9a04      	ldr	r2, [sp, #16]
 800f9cc:	b9d8      	cbnz	r0, 800fa06 <_svfiprintf_r+0xe6>
 800f9ce:	06d0      	lsls	r0, r2, #27
 800f9d0:	bf44      	itt	mi
 800f9d2:	2320      	movmi	r3, #32
 800f9d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9d8:	0711      	lsls	r1, r2, #28
 800f9da:	bf44      	itt	mi
 800f9dc:	232b      	movmi	r3, #43	; 0x2b
 800f9de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9e2:	f89a 3000 	ldrb.w	r3, [sl]
 800f9e6:	2b2a      	cmp	r3, #42	; 0x2a
 800f9e8:	d015      	beq.n	800fa16 <_svfiprintf_r+0xf6>
 800f9ea:	9a07      	ldr	r2, [sp, #28]
 800f9ec:	4654      	mov	r4, sl
 800f9ee:	2000      	movs	r0, #0
 800f9f0:	f04f 0c0a 	mov.w	ip, #10
 800f9f4:	4621      	mov	r1, r4
 800f9f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f9fa:	3b30      	subs	r3, #48	; 0x30
 800f9fc:	2b09      	cmp	r3, #9
 800f9fe:	d94e      	bls.n	800fa9e <_svfiprintf_r+0x17e>
 800fa00:	b1b0      	cbz	r0, 800fa30 <_svfiprintf_r+0x110>
 800fa02:	9207      	str	r2, [sp, #28]
 800fa04:	e014      	b.n	800fa30 <_svfiprintf_r+0x110>
 800fa06:	eba0 0308 	sub.w	r3, r0, r8
 800fa0a:	fa09 f303 	lsl.w	r3, r9, r3
 800fa0e:	4313      	orrs	r3, r2
 800fa10:	9304      	str	r3, [sp, #16]
 800fa12:	46a2      	mov	sl, r4
 800fa14:	e7d2      	b.n	800f9bc <_svfiprintf_r+0x9c>
 800fa16:	9b03      	ldr	r3, [sp, #12]
 800fa18:	1d19      	adds	r1, r3, #4
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	9103      	str	r1, [sp, #12]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	bfbb      	ittet	lt
 800fa22:	425b      	neglt	r3, r3
 800fa24:	f042 0202 	orrlt.w	r2, r2, #2
 800fa28:	9307      	strge	r3, [sp, #28]
 800fa2a:	9307      	strlt	r3, [sp, #28]
 800fa2c:	bfb8      	it	lt
 800fa2e:	9204      	strlt	r2, [sp, #16]
 800fa30:	7823      	ldrb	r3, [r4, #0]
 800fa32:	2b2e      	cmp	r3, #46	; 0x2e
 800fa34:	d10c      	bne.n	800fa50 <_svfiprintf_r+0x130>
 800fa36:	7863      	ldrb	r3, [r4, #1]
 800fa38:	2b2a      	cmp	r3, #42	; 0x2a
 800fa3a:	d135      	bne.n	800faa8 <_svfiprintf_r+0x188>
 800fa3c:	9b03      	ldr	r3, [sp, #12]
 800fa3e:	1d1a      	adds	r2, r3, #4
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	9203      	str	r2, [sp, #12]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	bfb8      	it	lt
 800fa48:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fa4c:	3402      	adds	r4, #2
 800fa4e:	9305      	str	r3, [sp, #20]
 800fa50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fb1c <_svfiprintf_r+0x1fc>
 800fa54:	7821      	ldrb	r1, [r4, #0]
 800fa56:	2203      	movs	r2, #3
 800fa58:	4650      	mov	r0, sl
 800fa5a:	f7f0 fc49 	bl	80002f0 <memchr>
 800fa5e:	b140      	cbz	r0, 800fa72 <_svfiprintf_r+0x152>
 800fa60:	2340      	movs	r3, #64	; 0x40
 800fa62:	eba0 000a 	sub.w	r0, r0, sl
 800fa66:	fa03 f000 	lsl.w	r0, r3, r0
 800fa6a:	9b04      	ldr	r3, [sp, #16]
 800fa6c:	4303      	orrs	r3, r0
 800fa6e:	3401      	adds	r4, #1
 800fa70:	9304      	str	r3, [sp, #16]
 800fa72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa76:	4826      	ldr	r0, [pc, #152]	; (800fb10 <_svfiprintf_r+0x1f0>)
 800fa78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fa7c:	2206      	movs	r2, #6
 800fa7e:	f7f0 fc37 	bl	80002f0 <memchr>
 800fa82:	2800      	cmp	r0, #0
 800fa84:	d038      	beq.n	800faf8 <_svfiprintf_r+0x1d8>
 800fa86:	4b23      	ldr	r3, [pc, #140]	; (800fb14 <_svfiprintf_r+0x1f4>)
 800fa88:	bb1b      	cbnz	r3, 800fad2 <_svfiprintf_r+0x1b2>
 800fa8a:	9b03      	ldr	r3, [sp, #12]
 800fa8c:	3307      	adds	r3, #7
 800fa8e:	f023 0307 	bic.w	r3, r3, #7
 800fa92:	3308      	adds	r3, #8
 800fa94:	9303      	str	r3, [sp, #12]
 800fa96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa98:	4433      	add	r3, r6
 800fa9a:	9309      	str	r3, [sp, #36]	; 0x24
 800fa9c:	e767      	b.n	800f96e <_svfiprintf_r+0x4e>
 800fa9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800faa2:	460c      	mov	r4, r1
 800faa4:	2001      	movs	r0, #1
 800faa6:	e7a5      	b.n	800f9f4 <_svfiprintf_r+0xd4>
 800faa8:	2300      	movs	r3, #0
 800faaa:	3401      	adds	r4, #1
 800faac:	9305      	str	r3, [sp, #20]
 800faae:	4619      	mov	r1, r3
 800fab0:	f04f 0c0a 	mov.w	ip, #10
 800fab4:	4620      	mov	r0, r4
 800fab6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800faba:	3a30      	subs	r2, #48	; 0x30
 800fabc:	2a09      	cmp	r2, #9
 800fabe:	d903      	bls.n	800fac8 <_svfiprintf_r+0x1a8>
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d0c5      	beq.n	800fa50 <_svfiprintf_r+0x130>
 800fac4:	9105      	str	r1, [sp, #20]
 800fac6:	e7c3      	b.n	800fa50 <_svfiprintf_r+0x130>
 800fac8:	fb0c 2101 	mla	r1, ip, r1, r2
 800facc:	4604      	mov	r4, r0
 800face:	2301      	movs	r3, #1
 800fad0:	e7f0      	b.n	800fab4 <_svfiprintf_r+0x194>
 800fad2:	ab03      	add	r3, sp, #12
 800fad4:	9300      	str	r3, [sp, #0]
 800fad6:	462a      	mov	r2, r5
 800fad8:	4b0f      	ldr	r3, [pc, #60]	; (800fb18 <_svfiprintf_r+0x1f8>)
 800fada:	a904      	add	r1, sp, #16
 800fadc:	4638      	mov	r0, r7
 800fade:	f3af 8000 	nop.w
 800fae2:	1c42      	adds	r2, r0, #1
 800fae4:	4606      	mov	r6, r0
 800fae6:	d1d6      	bne.n	800fa96 <_svfiprintf_r+0x176>
 800fae8:	89ab      	ldrh	r3, [r5, #12]
 800faea:	065b      	lsls	r3, r3, #25
 800faec:	f53f af2c 	bmi.w	800f948 <_svfiprintf_r+0x28>
 800faf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800faf2:	b01d      	add	sp, #116	; 0x74
 800faf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faf8:	ab03      	add	r3, sp, #12
 800fafa:	9300      	str	r3, [sp, #0]
 800fafc:	462a      	mov	r2, r5
 800fafe:	4b06      	ldr	r3, [pc, #24]	; (800fb18 <_svfiprintf_r+0x1f8>)
 800fb00:	a904      	add	r1, sp, #16
 800fb02:	4638      	mov	r0, r7
 800fb04:	f000 f87a 	bl	800fbfc <_printf_i>
 800fb08:	e7eb      	b.n	800fae2 <_svfiprintf_r+0x1c2>
 800fb0a:	bf00      	nop
 800fb0c:	08010c24 	.word	0x08010c24
 800fb10:	08010c2e 	.word	0x08010c2e
 800fb14:	00000000 	.word	0x00000000
 800fb18:	0800f869 	.word	0x0800f869
 800fb1c:	08010c2a 	.word	0x08010c2a

0800fb20 <_printf_common>:
 800fb20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb24:	4616      	mov	r6, r2
 800fb26:	4699      	mov	r9, r3
 800fb28:	688a      	ldr	r2, [r1, #8]
 800fb2a:	690b      	ldr	r3, [r1, #16]
 800fb2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fb30:	4293      	cmp	r3, r2
 800fb32:	bfb8      	it	lt
 800fb34:	4613      	movlt	r3, r2
 800fb36:	6033      	str	r3, [r6, #0]
 800fb38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fb3c:	4607      	mov	r7, r0
 800fb3e:	460c      	mov	r4, r1
 800fb40:	b10a      	cbz	r2, 800fb46 <_printf_common+0x26>
 800fb42:	3301      	adds	r3, #1
 800fb44:	6033      	str	r3, [r6, #0]
 800fb46:	6823      	ldr	r3, [r4, #0]
 800fb48:	0699      	lsls	r1, r3, #26
 800fb4a:	bf42      	ittt	mi
 800fb4c:	6833      	ldrmi	r3, [r6, #0]
 800fb4e:	3302      	addmi	r3, #2
 800fb50:	6033      	strmi	r3, [r6, #0]
 800fb52:	6825      	ldr	r5, [r4, #0]
 800fb54:	f015 0506 	ands.w	r5, r5, #6
 800fb58:	d106      	bne.n	800fb68 <_printf_common+0x48>
 800fb5a:	f104 0a19 	add.w	sl, r4, #25
 800fb5e:	68e3      	ldr	r3, [r4, #12]
 800fb60:	6832      	ldr	r2, [r6, #0]
 800fb62:	1a9b      	subs	r3, r3, r2
 800fb64:	42ab      	cmp	r3, r5
 800fb66:	dc26      	bgt.n	800fbb6 <_printf_common+0x96>
 800fb68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fb6c:	1e13      	subs	r3, r2, #0
 800fb6e:	6822      	ldr	r2, [r4, #0]
 800fb70:	bf18      	it	ne
 800fb72:	2301      	movne	r3, #1
 800fb74:	0692      	lsls	r2, r2, #26
 800fb76:	d42b      	bmi.n	800fbd0 <_printf_common+0xb0>
 800fb78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fb7c:	4649      	mov	r1, r9
 800fb7e:	4638      	mov	r0, r7
 800fb80:	47c0      	blx	r8
 800fb82:	3001      	adds	r0, #1
 800fb84:	d01e      	beq.n	800fbc4 <_printf_common+0xa4>
 800fb86:	6823      	ldr	r3, [r4, #0]
 800fb88:	68e5      	ldr	r5, [r4, #12]
 800fb8a:	6832      	ldr	r2, [r6, #0]
 800fb8c:	f003 0306 	and.w	r3, r3, #6
 800fb90:	2b04      	cmp	r3, #4
 800fb92:	bf08      	it	eq
 800fb94:	1aad      	subeq	r5, r5, r2
 800fb96:	68a3      	ldr	r3, [r4, #8]
 800fb98:	6922      	ldr	r2, [r4, #16]
 800fb9a:	bf0c      	ite	eq
 800fb9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fba0:	2500      	movne	r5, #0
 800fba2:	4293      	cmp	r3, r2
 800fba4:	bfc4      	itt	gt
 800fba6:	1a9b      	subgt	r3, r3, r2
 800fba8:	18ed      	addgt	r5, r5, r3
 800fbaa:	2600      	movs	r6, #0
 800fbac:	341a      	adds	r4, #26
 800fbae:	42b5      	cmp	r5, r6
 800fbb0:	d11a      	bne.n	800fbe8 <_printf_common+0xc8>
 800fbb2:	2000      	movs	r0, #0
 800fbb4:	e008      	b.n	800fbc8 <_printf_common+0xa8>
 800fbb6:	2301      	movs	r3, #1
 800fbb8:	4652      	mov	r2, sl
 800fbba:	4649      	mov	r1, r9
 800fbbc:	4638      	mov	r0, r7
 800fbbe:	47c0      	blx	r8
 800fbc0:	3001      	adds	r0, #1
 800fbc2:	d103      	bne.n	800fbcc <_printf_common+0xac>
 800fbc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fbc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbcc:	3501      	adds	r5, #1
 800fbce:	e7c6      	b.n	800fb5e <_printf_common+0x3e>
 800fbd0:	18e1      	adds	r1, r4, r3
 800fbd2:	1c5a      	adds	r2, r3, #1
 800fbd4:	2030      	movs	r0, #48	; 0x30
 800fbd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fbda:	4422      	add	r2, r4
 800fbdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fbe0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fbe4:	3302      	adds	r3, #2
 800fbe6:	e7c7      	b.n	800fb78 <_printf_common+0x58>
 800fbe8:	2301      	movs	r3, #1
 800fbea:	4622      	mov	r2, r4
 800fbec:	4649      	mov	r1, r9
 800fbee:	4638      	mov	r0, r7
 800fbf0:	47c0      	blx	r8
 800fbf2:	3001      	adds	r0, #1
 800fbf4:	d0e6      	beq.n	800fbc4 <_printf_common+0xa4>
 800fbf6:	3601      	adds	r6, #1
 800fbf8:	e7d9      	b.n	800fbae <_printf_common+0x8e>
	...

0800fbfc <_printf_i>:
 800fbfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc00:	7e0f      	ldrb	r7, [r1, #24]
 800fc02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fc04:	2f78      	cmp	r7, #120	; 0x78
 800fc06:	4691      	mov	r9, r2
 800fc08:	4680      	mov	r8, r0
 800fc0a:	460c      	mov	r4, r1
 800fc0c:	469a      	mov	sl, r3
 800fc0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fc12:	d807      	bhi.n	800fc24 <_printf_i+0x28>
 800fc14:	2f62      	cmp	r7, #98	; 0x62
 800fc16:	d80a      	bhi.n	800fc2e <_printf_i+0x32>
 800fc18:	2f00      	cmp	r7, #0
 800fc1a:	f000 80d8 	beq.w	800fdce <_printf_i+0x1d2>
 800fc1e:	2f58      	cmp	r7, #88	; 0x58
 800fc20:	f000 80a3 	beq.w	800fd6a <_printf_i+0x16e>
 800fc24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fc2c:	e03a      	b.n	800fca4 <_printf_i+0xa8>
 800fc2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fc32:	2b15      	cmp	r3, #21
 800fc34:	d8f6      	bhi.n	800fc24 <_printf_i+0x28>
 800fc36:	a101      	add	r1, pc, #4	; (adr r1, 800fc3c <_printf_i+0x40>)
 800fc38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fc3c:	0800fc95 	.word	0x0800fc95
 800fc40:	0800fca9 	.word	0x0800fca9
 800fc44:	0800fc25 	.word	0x0800fc25
 800fc48:	0800fc25 	.word	0x0800fc25
 800fc4c:	0800fc25 	.word	0x0800fc25
 800fc50:	0800fc25 	.word	0x0800fc25
 800fc54:	0800fca9 	.word	0x0800fca9
 800fc58:	0800fc25 	.word	0x0800fc25
 800fc5c:	0800fc25 	.word	0x0800fc25
 800fc60:	0800fc25 	.word	0x0800fc25
 800fc64:	0800fc25 	.word	0x0800fc25
 800fc68:	0800fdb5 	.word	0x0800fdb5
 800fc6c:	0800fcd9 	.word	0x0800fcd9
 800fc70:	0800fd97 	.word	0x0800fd97
 800fc74:	0800fc25 	.word	0x0800fc25
 800fc78:	0800fc25 	.word	0x0800fc25
 800fc7c:	0800fdd7 	.word	0x0800fdd7
 800fc80:	0800fc25 	.word	0x0800fc25
 800fc84:	0800fcd9 	.word	0x0800fcd9
 800fc88:	0800fc25 	.word	0x0800fc25
 800fc8c:	0800fc25 	.word	0x0800fc25
 800fc90:	0800fd9f 	.word	0x0800fd9f
 800fc94:	682b      	ldr	r3, [r5, #0]
 800fc96:	1d1a      	adds	r2, r3, #4
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	602a      	str	r2, [r5, #0]
 800fc9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fca4:	2301      	movs	r3, #1
 800fca6:	e0a3      	b.n	800fdf0 <_printf_i+0x1f4>
 800fca8:	6820      	ldr	r0, [r4, #0]
 800fcaa:	6829      	ldr	r1, [r5, #0]
 800fcac:	0606      	lsls	r6, r0, #24
 800fcae:	f101 0304 	add.w	r3, r1, #4
 800fcb2:	d50a      	bpl.n	800fcca <_printf_i+0xce>
 800fcb4:	680e      	ldr	r6, [r1, #0]
 800fcb6:	602b      	str	r3, [r5, #0]
 800fcb8:	2e00      	cmp	r6, #0
 800fcba:	da03      	bge.n	800fcc4 <_printf_i+0xc8>
 800fcbc:	232d      	movs	r3, #45	; 0x2d
 800fcbe:	4276      	negs	r6, r6
 800fcc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fcc4:	485e      	ldr	r0, [pc, #376]	; (800fe40 <_printf_i+0x244>)
 800fcc6:	230a      	movs	r3, #10
 800fcc8:	e019      	b.n	800fcfe <_printf_i+0x102>
 800fcca:	680e      	ldr	r6, [r1, #0]
 800fccc:	602b      	str	r3, [r5, #0]
 800fcce:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fcd2:	bf18      	it	ne
 800fcd4:	b236      	sxthne	r6, r6
 800fcd6:	e7ef      	b.n	800fcb8 <_printf_i+0xbc>
 800fcd8:	682b      	ldr	r3, [r5, #0]
 800fcda:	6820      	ldr	r0, [r4, #0]
 800fcdc:	1d19      	adds	r1, r3, #4
 800fcde:	6029      	str	r1, [r5, #0]
 800fce0:	0601      	lsls	r1, r0, #24
 800fce2:	d501      	bpl.n	800fce8 <_printf_i+0xec>
 800fce4:	681e      	ldr	r6, [r3, #0]
 800fce6:	e002      	b.n	800fcee <_printf_i+0xf2>
 800fce8:	0646      	lsls	r6, r0, #25
 800fcea:	d5fb      	bpl.n	800fce4 <_printf_i+0xe8>
 800fcec:	881e      	ldrh	r6, [r3, #0]
 800fcee:	4854      	ldr	r0, [pc, #336]	; (800fe40 <_printf_i+0x244>)
 800fcf0:	2f6f      	cmp	r7, #111	; 0x6f
 800fcf2:	bf0c      	ite	eq
 800fcf4:	2308      	moveq	r3, #8
 800fcf6:	230a      	movne	r3, #10
 800fcf8:	2100      	movs	r1, #0
 800fcfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fcfe:	6865      	ldr	r5, [r4, #4]
 800fd00:	60a5      	str	r5, [r4, #8]
 800fd02:	2d00      	cmp	r5, #0
 800fd04:	bfa2      	ittt	ge
 800fd06:	6821      	ldrge	r1, [r4, #0]
 800fd08:	f021 0104 	bicge.w	r1, r1, #4
 800fd0c:	6021      	strge	r1, [r4, #0]
 800fd0e:	b90e      	cbnz	r6, 800fd14 <_printf_i+0x118>
 800fd10:	2d00      	cmp	r5, #0
 800fd12:	d04d      	beq.n	800fdb0 <_printf_i+0x1b4>
 800fd14:	4615      	mov	r5, r2
 800fd16:	fbb6 f1f3 	udiv	r1, r6, r3
 800fd1a:	fb03 6711 	mls	r7, r3, r1, r6
 800fd1e:	5dc7      	ldrb	r7, [r0, r7]
 800fd20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fd24:	4637      	mov	r7, r6
 800fd26:	42bb      	cmp	r3, r7
 800fd28:	460e      	mov	r6, r1
 800fd2a:	d9f4      	bls.n	800fd16 <_printf_i+0x11a>
 800fd2c:	2b08      	cmp	r3, #8
 800fd2e:	d10b      	bne.n	800fd48 <_printf_i+0x14c>
 800fd30:	6823      	ldr	r3, [r4, #0]
 800fd32:	07de      	lsls	r6, r3, #31
 800fd34:	d508      	bpl.n	800fd48 <_printf_i+0x14c>
 800fd36:	6923      	ldr	r3, [r4, #16]
 800fd38:	6861      	ldr	r1, [r4, #4]
 800fd3a:	4299      	cmp	r1, r3
 800fd3c:	bfde      	ittt	le
 800fd3e:	2330      	movle	r3, #48	; 0x30
 800fd40:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fd44:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800fd48:	1b52      	subs	r2, r2, r5
 800fd4a:	6122      	str	r2, [r4, #16]
 800fd4c:	f8cd a000 	str.w	sl, [sp]
 800fd50:	464b      	mov	r3, r9
 800fd52:	aa03      	add	r2, sp, #12
 800fd54:	4621      	mov	r1, r4
 800fd56:	4640      	mov	r0, r8
 800fd58:	f7ff fee2 	bl	800fb20 <_printf_common>
 800fd5c:	3001      	adds	r0, #1
 800fd5e:	d14c      	bne.n	800fdfa <_printf_i+0x1fe>
 800fd60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fd64:	b004      	add	sp, #16
 800fd66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd6a:	4835      	ldr	r0, [pc, #212]	; (800fe40 <_printf_i+0x244>)
 800fd6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fd70:	6829      	ldr	r1, [r5, #0]
 800fd72:	6823      	ldr	r3, [r4, #0]
 800fd74:	f851 6b04 	ldr.w	r6, [r1], #4
 800fd78:	6029      	str	r1, [r5, #0]
 800fd7a:	061d      	lsls	r5, r3, #24
 800fd7c:	d514      	bpl.n	800fda8 <_printf_i+0x1ac>
 800fd7e:	07df      	lsls	r7, r3, #31
 800fd80:	bf44      	itt	mi
 800fd82:	f043 0320 	orrmi.w	r3, r3, #32
 800fd86:	6023      	strmi	r3, [r4, #0]
 800fd88:	b91e      	cbnz	r6, 800fd92 <_printf_i+0x196>
 800fd8a:	6823      	ldr	r3, [r4, #0]
 800fd8c:	f023 0320 	bic.w	r3, r3, #32
 800fd90:	6023      	str	r3, [r4, #0]
 800fd92:	2310      	movs	r3, #16
 800fd94:	e7b0      	b.n	800fcf8 <_printf_i+0xfc>
 800fd96:	6823      	ldr	r3, [r4, #0]
 800fd98:	f043 0320 	orr.w	r3, r3, #32
 800fd9c:	6023      	str	r3, [r4, #0]
 800fd9e:	2378      	movs	r3, #120	; 0x78
 800fda0:	4828      	ldr	r0, [pc, #160]	; (800fe44 <_printf_i+0x248>)
 800fda2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fda6:	e7e3      	b.n	800fd70 <_printf_i+0x174>
 800fda8:	0659      	lsls	r1, r3, #25
 800fdaa:	bf48      	it	mi
 800fdac:	b2b6      	uxthmi	r6, r6
 800fdae:	e7e6      	b.n	800fd7e <_printf_i+0x182>
 800fdb0:	4615      	mov	r5, r2
 800fdb2:	e7bb      	b.n	800fd2c <_printf_i+0x130>
 800fdb4:	682b      	ldr	r3, [r5, #0]
 800fdb6:	6826      	ldr	r6, [r4, #0]
 800fdb8:	6961      	ldr	r1, [r4, #20]
 800fdba:	1d18      	adds	r0, r3, #4
 800fdbc:	6028      	str	r0, [r5, #0]
 800fdbe:	0635      	lsls	r5, r6, #24
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	d501      	bpl.n	800fdc8 <_printf_i+0x1cc>
 800fdc4:	6019      	str	r1, [r3, #0]
 800fdc6:	e002      	b.n	800fdce <_printf_i+0x1d2>
 800fdc8:	0670      	lsls	r0, r6, #25
 800fdca:	d5fb      	bpl.n	800fdc4 <_printf_i+0x1c8>
 800fdcc:	8019      	strh	r1, [r3, #0]
 800fdce:	2300      	movs	r3, #0
 800fdd0:	6123      	str	r3, [r4, #16]
 800fdd2:	4615      	mov	r5, r2
 800fdd4:	e7ba      	b.n	800fd4c <_printf_i+0x150>
 800fdd6:	682b      	ldr	r3, [r5, #0]
 800fdd8:	1d1a      	adds	r2, r3, #4
 800fdda:	602a      	str	r2, [r5, #0]
 800fddc:	681d      	ldr	r5, [r3, #0]
 800fdde:	6862      	ldr	r2, [r4, #4]
 800fde0:	2100      	movs	r1, #0
 800fde2:	4628      	mov	r0, r5
 800fde4:	f7f0 fa84 	bl	80002f0 <memchr>
 800fde8:	b108      	cbz	r0, 800fdee <_printf_i+0x1f2>
 800fdea:	1b40      	subs	r0, r0, r5
 800fdec:	6060      	str	r0, [r4, #4]
 800fdee:	6863      	ldr	r3, [r4, #4]
 800fdf0:	6123      	str	r3, [r4, #16]
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fdf8:	e7a8      	b.n	800fd4c <_printf_i+0x150>
 800fdfa:	6923      	ldr	r3, [r4, #16]
 800fdfc:	462a      	mov	r2, r5
 800fdfe:	4649      	mov	r1, r9
 800fe00:	4640      	mov	r0, r8
 800fe02:	47d0      	blx	sl
 800fe04:	3001      	adds	r0, #1
 800fe06:	d0ab      	beq.n	800fd60 <_printf_i+0x164>
 800fe08:	6823      	ldr	r3, [r4, #0]
 800fe0a:	079b      	lsls	r3, r3, #30
 800fe0c:	d413      	bmi.n	800fe36 <_printf_i+0x23a>
 800fe0e:	68e0      	ldr	r0, [r4, #12]
 800fe10:	9b03      	ldr	r3, [sp, #12]
 800fe12:	4298      	cmp	r0, r3
 800fe14:	bfb8      	it	lt
 800fe16:	4618      	movlt	r0, r3
 800fe18:	e7a4      	b.n	800fd64 <_printf_i+0x168>
 800fe1a:	2301      	movs	r3, #1
 800fe1c:	4632      	mov	r2, r6
 800fe1e:	4649      	mov	r1, r9
 800fe20:	4640      	mov	r0, r8
 800fe22:	47d0      	blx	sl
 800fe24:	3001      	adds	r0, #1
 800fe26:	d09b      	beq.n	800fd60 <_printf_i+0x164>
 800fe28:	3501      	adds	r5, #1
 800fe2a:	68e3      	ldr	r3, [r4, #12]
 800fe2c:	9903      	ldr	r1, [sp, #12]
 800fe2e:	1a5b      	subs	r3, r3, r1
 800fe30:	42ab      	cmp	r3, r5
 800fe32:	dcf2      	bgt.n	800fe1a <_printf_i+0x21e>
 800fe34:	e7eb      	b.n	800fe0e <_printf_i+0x212>
 800fe36:	2500      	movs	r5, #0
 800fe38:	f104 0619 	add.w	r6, r4, #25
 800fe3c:	e7f5      	b.n	800fe2a <_printf_i+0x22e>
 800fe3e:	bf00      	nop
 800fe40:	08010c35 	.word	0x08010c35
 800fe44:	08010c46 	.word	0x08010c46

0800fe48 <_free_r>:
 800fe48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe4a:	2900      	cmp	r1, #0
 800fe4c:	d044      	beq.n	800fed8 <_free_r+0x90>
 800fe4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe52:	9001      	str	r0, [sp, #4]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	f1a1 0404 	sub.w	r4, r1, #4
 800fe5a:	bfb8      	it	lt
 800fe5c:	18e4      	addlt	r4, r4, r3
 800fe5e:	f000 f913 	bl	8010088 <__malloc_lock>
 800fe62:	4a1e      	ldr	r2, [pc, #120]	; (800fedc <_free_r+0x94>)
 800fe64:	9801      	ldr	r0, [sp, #4]
 800fe66:	6813      	ldr	r3, [r2, #0]
 800fe68:	b933      	cbnz	r3, 800fe78 <_free_r+0x30>
 800fe6a:	6063      	str	r3, [r4, #4]
 800fe6c:	6014      	str	r4, [r2, #0]
 800fe6e:	b003      	add	sp, #12
 800fe70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe74:	f000 b90e 	b.w	8010094 <__malloc_unlock>
 800fe78:	42a3      	cmp	r3, r4
 800fe7a:	d908      	bls.n	800fe8e <_free_r+0x46>
 800fe7c:	6825      	ldr	r5, [r4, #0]
 800fe7e:	1961      	adds	r1, r4, r5
 800fe80:	428b      	cmp	r3, r1
 800fe82:	bf01      	itttt	eq
 800fe84:	6819      	ldreq	r1, [r3, #0]
 800fe86:	685b      	ldreq	r3, [r3, #4]
 800fe88:	1949      	addeq	r1, r1, r5
 800fe8a:	6021      	streq	r1, [r4, #0]
 800fe8c:	e7ed      	b.n	800fe6a <_free_r+0x22>
 800fe8e:	461a      	mov	r2, r3
 800fe90:	685b      	ldr	r3, [r3, #4]
 800fe92:	b10b      	cbz	r3, 800fe98 <_free_r+0x50>
 800fe94:	42a3      	cmp	r3, r4
 800fe96:	d9fa      	bls.n	800fe8e <_free_r+0x46>
 800fe98:	6811      	ldr	r1, [r2, #0]
 800fe9a:	1855      	adds	r5, r2, r1
 800fe9c:	42a5      	cmp	r5, r4
 800fe9e:	d10b      	bne.n	800feb8 <_free_r+0x70>
 800fea0:	6824      	ldr	r4, [r4, #0]
 800fea2:	4421      	add	r1, r4
 800fea4:	1854      	adds	r4, r2, r1
 800fea6:	42a3      	cmp	r3, r4
 800fea8:	6011      	str	r1, [r2, #0]
 800feaa:	d1e0      	bne.n	800fe6e <_free_r+0x26>
 800feac:	681c      	ldr	r4, [r3, #0]
 800feae:	685b      	ldr	r3, [r3, #4]
 800feb0:	6053      	str	r3, [r2, #4]
 800feb2:	4421      	add	r1, r4
 800feb4:	6011      	str	r1, [r2, #0]
 800feb6:	e7da      	b.n	800fe6e <_free_r+0x26>
 800feb8:	d902      	bls.n	800fec0 <_free_r+0x78>
 800feba:	230c      	movs	r3, #12
 800febc:	6003      	str	r3, [r0, #0]
 800febe:	e7d6      	b.n	800fe6e <_free_r+0x26>
 800fec0:	6825      	ldr	r5, [r4, #0]
 800fec2:	1961      	adds	r1, r4, r5
 800fec4:	428b      	cmp	r3, r1
 800fec6:	bf04      	itt	eq
 800fec8:	6819      	ldreq	r1, [r3, #0]
 800feca:	685b      	ldreq	r3, [r3, #4]
 800fecc:	6063      	str	r3, [r4, #4]
 800fece:	bf04      	itt	eq
 800fed0:	1949      	addeq	r1, r1, r5
 800fed2:	6021      	streq	r1, [r4, #0]
 800fed4:	6054      	str	r4, [r2, #4]
 800fed6:	e7ca      	b.n	800fe6e <_free_r+0x26>
 800fed8:	b003      	add	sp, #12
 800feda:	bd30      	pop	{r4, r5, pc}
 800fedc:	24000538 	.word	0x24000538

0800fee0 <sbrk_aligned>:
 800fee0:	b570      	push	{r4, r5, r6, lr}
 800fee2:	4e0e      	ldr	r6, [pc, #56]	; (800ff1c <sbrk_aligned+0x3c>)
 800fee4:	460c      	mov	r4, r1
 800fee6:	6831      	ldr	r1, [r6, #0]
 800fee8:	4605      	mov	r5, r0
 800feea:	b911      	cbnz	r1, 800fef2 <sbrk_aligned+0x12>
 800feec:	f000 f8bc 	bl	8010068 <_sbrk_r>
 800fef0:	6030      	str	r0, [r6, #0]
 800fef2:	4621      	mov	r1, r4
 800fef4:	4628      	mov	r0, r5
 800fef6:	f000 f8b7 	bl	8010068 <_sbrk_r>
 800fefa:	1c43      	adds	r3, r0, #1
 800fefc:	d00a      	beq.n	800ff14 <sbrk_aligned+0x34>
 800fefe:	1cc4      	adds	r4, r0, #3
 800ff00:	f024 0403 	bic.w	r4, r4, #3
 800ff04:	42a0      	cmp	r0, r4
 800ff06:	d007      	beq.n	800ff18 <sbrk_aligned+0x38>
 800ff08:	1a21      	subs	r1, r4, r0
 800ff0a:	4628      	mov	r0, r5
 800ff0c:	f000 f8ac 	bl	8010068 <_sbrk_r>
 800ff10:	3001      	adds	r0, #1
 800ff12:	d101      	bne.n	800ff18 <sbrk_aligned+0x38>
 800ff14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ff18:	4620      	mov	r0, r4
 800ff1a:	bd70      	pop	{r4, r5, r6, pc}
 800ff1c:	2400053c 	.word	0x2400053c

0800ff20 <_malloc_r>:
 800ff20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff24:	1ccd      	adds	r5, r1, #3
 800ff26:	f025 0503 	bic.w	r5, r5, #3
 800ff2a:	3508      	adds	r5, #8
 800ff2c:	2d0c      	cmp	r5, #12
 800ff2e:	bf38      	it	cc
 800ff30:	250c      	movcc	r5, #12
 800ff32:	2d00      	cmp	r5, #0
 800ff34:	4607      	mov	r7, r0
 800ff36:	db01      	blt.n	800ff3c <_malloc_r+0x1c>
 800ff38:	42a9      	cmp	r1, r5
 800ff3a:	d905      	bls.n	800ff48 <_malloc_r+0x28>
 800ff3c:	230c      	movs	r3, #12
 800ff3e:	603b      	str	r3, [r7, #0]
 800ff40:	2600      	movs	r6, #0
 800ff42:	4630      	mov	r0, r6
 800ff44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff48:	4e2e      	ldr	r6, [pc, #184]	; (8010004 <_malloc_r+0xe4>)
 800ff4a:	f000 f89d 	bl	8010088 <__malloc_lock>
 800ff4e:	6833      	ldr	r3, [r6, #0]
 800ff50:	461c      	mov	r4, r3
 800ff52:	bb34      	cbnz	r4, 800ffa2 <_malloc_r+0x82>
 800ff54:	4629      	mov	r1, r5
 800ff56:	4638      	mov	r0, r7
 800ff58:	f7ff ffc2 	bl	800fee0 <sbrk_aligned>
 800ff5c:	1c43      	adds	r3, r0, #1
 800ff5e:	4604      	mov	r4, r0
 800ff60:	d14d      	bne.n	800fffe <_malloc_r+0xde>
 800ff62:	6834      	ldr	r4, [r6, #0]
 800ff64:	4626      	mov	r6, r4
 800ff66:	2e00      	cmp	r6, #0
 800ff68:	d140      	bne.n	800ffec <_malloc_r+0xcc>
 800ff6a:	6823      	ldr	r3, [r4, #0]
 800ff6c:	4631      	mov	r1, r6
 800ff6e:	4638      	mov	r0, r7
 800ff70:	eb04 0803 	add.w	r8, r4, r3
 800ff74:	f000 f878 	bl	8010068 <_sbrk_r>
 800ff78:	4580      	cmp	r8, r0
 800ff7a:	d13a      	bne.n	800fff2 <_malloc_r+0xd2>
 800ff7c:	6821      	ldr	r1, [r4, #0]
 800ff7e:	3503      	adds	r5, #3
 800ff80:	1a6d      	subs	r5, r5, r1
 800ff82:	f025 0503 	bic.w	r5, r5, #3
 800ff86:	3508      	adds	r5, #8
 800ff88:	2d0c      	cmp	r5, #12
 800ff8a:	bf38      	it	cc
 800ff8c:	250c      	movcc	r5, #12
 800ff8e:	4629      	mov	r1, r5
 800ff90:	4638      	mov	r0, r7
 800ff92:	f7ff ffa5 	bl	800fee0 <sbrk_aligned>
 800ff96:	3001      	adds	r0, #1
 800ff98:	d02b      	beq.n	800fff2 <_malloc_r+0xd2>
 800ff9a:	6823      	ldr	r3, [r4, #0]
 800ff9c:	442b      	add	r3, r5
 800ff9e:	6023      	str	r3, [r4, #0]
 800ffa0:	e00e      	b.n	800ffc0 <_malloc_r+0xa0>
 800ffa2:	6822      	ldr	r2, [r4, #0]
 800ffa4:	1b52      	subs	r2, r2, r5
 800ffa6:	d41e      	bmi.n	800ffe6 <_malloc_r+0xc6>
 800ffa8:	2a0b      	cmp	r2, #11
 800ffaa:	d916      	bls.n	800ffda <_malloc_r+0xba>
 800ffac:	1961      	adds	r1, r4, r5
 800ffae:	42a3      	cmp	r3, r4
 800ffb0:	6025      	str	r5, [r4, #0]
 800ffb2:	bf18      	it	ne
 800ffb4:	6059      	strne	r1, [r3, #4]
 800ffb6:	6863      	ldr	r3, [r4, #4]
 800ffb8:	bf08      	it	eq
 800ffba:	6031      	streq	r1, [r6, #0]
 800ffbc:	5162      	str	r2, [r4, r5]
 800ffbe:	604b      	str	r3, [r1, #4]
 800ffc0:	4638      	mov	r0, r7
 800ffc2:	f104 060b 	add.w	r6, r4, #11
 800ffc6:	f000 f865 	bl	8010094 <__malloc_unlock>
 800ffca:	f026 0607 	bic.w	r6, r6, #7
 800ffce:	1d23      	adds	r3, r4, #4
 800ffd0:	1af2      	subs	r2, r6, r3
 800ffd2:	d0b6      	beq.n	800ff42 <_malloc_r+0x22>
 800ffd4:	1b9b      	subs	r3, r3, r6
 800ffd6:	50a3      	str	r3, [r4, r2]
 800ffd8:	e7b3      	b.n	800ff42 <_malloc_r+0x22>
 800ffda:	6862      	ldr	r2, [r4, #4]
 800ffdc:	42a3      	cmp	r3, r4
 800ffde:	bf0c      	ite	eq
 800ffe0:	6032      	streq	r2, [r6, #0]
 800ffe2:	605a      	strne	r2, [r3, #4]
 800ffe4:	e7ec      	b.n	800ffc0 <_malloc_r+0xa0>
 800ffe6:	4623      	mov	r3, r4
 800ffe8:	6864      	ldr	r4, [r4, #4]
 800ffea:	e7b2      	b.n	800ff52 <_malloc_r+0x32>
 800ffec:	4634      	mov	r4, r6
 800ffee:	6876      	ldr	r6, [r6, #4]
 800fff0:	e7b9      	b.n	800ff66 <_malloc_r+0x46>
 800fff2:	230c      	movs	r3, #12
 800fff4:	603b      	str	r3, [r7, #0]
 800fff6:	4638      	mov	r0, r7
 800fff8:	f000 f84c 	bl	8010094 <__malloc_unlock>
 800fffc:	e7a1      	b.n	800ff42 <_malloc_r+0x22>
 800fffe:	6025      	str	r5, [r4, #0]
 8010000:	e7de      	b.n	800ffc0 <_malloc_r+0xa0>
 8010002:	bf00      	nop
 8010004:	24000538 	.word	0x24000538

08010008 <_realloc_r>:
 8010008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801000c:	4680      	mov	r8, r0
 801000e:	4614      	mov	r4, r2
 8010010:	460e      	mov	r6, r1
 8010012:	b921      	cbnz	r1, 801001e <_realloc_r+0x16>
 8010014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010018:	4611      	mov	r1, r2
 801001a:	f7ff bf81 	b.w	800ff20 <_malloc_r>
 801001e:	b92a      	cbnz	r2, 801002c <_realloc_r+0x24>
 8010020:	f7ff ff12 	bl	800fe48 <_free_r>
 8010024:	4625      	mov	r5, r4
 8010026:	4628      	mov	r0, r5
 8010028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801002c:	f000 f838 	bl	80100a0 <_malloc_usable_size_r>
 8010030:	4284      	cmp	r4, r0
 8010032:	4607      	mov	r7, r0
 8010034:	d802      	bhi.n	801003c <_realloc_r+0x34>
 8010036:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801003a:	d812      	bhi.n	8010062 <_realloc_r+0x5a>
 801003c:	4621      	mov	r1, r4
 801003e:	4640      	mov	r0, r8
 8010040:	f7ff ff6e 	bl	800ff20 <_malloc_r>
 8010044:	4605      	mov	r5, r0
 8010046:	2800      	cmp	r0, #0
 8010048:	d0ed      	beq.n	8010026 <_realloc_r+0x1e>
 801004a:	42bc      	cmp	r4, r7
 801004c:	4622      	mov	r2, r4
 801004e:	4631      	mov	r1, r6
 8010050:	bf28      	it	cs
 8010052:	463a      	movcs	r2, r7
 8010054:	f7ff fb6a 	bl	800f72c <memcpy>
 8010058:	4631      	mov	r1, r6
 801005a:	4640      	mov	r0, r8
 801005c:	f7ff fef4 	bl	800fe48 <_free_r>
 8010060:	e7e1      	b.n	8010026 <_realloc_r+0x1e>
 8010062:	4635      	mov	r5, r6
 8010064:	e7df      	b.n	8010026 <_realloc_r+0x1e>
	...

08010068 <_sbrk_r>:
 8010068:	b538      	push	{r3, r4, r5, lr}
 801006a:	4d06      	ldr	r5, [pc, #24]	; (8010084 <_sbrk_r+0x1c>)
 801006c:	2300      	movs	r3, #0
 801006e:	4604      	mov	r4, r0
 8010070:	4608      	mov	r0, r1
 8010072:	602b      	str	r3, [r5, #0]
 8010074:	f7f1 fc82 	bl	800197c <_sbrk>
 8010078:	1c43      	adds	r3, r0, #1
 801007a:	d102      	bne.n	8010082 <_sbrk_r+0x1a>
 801007c:	682b      	ldr	r3, [r5, #0]
 801007e:	b103      	cbz	r3, 8010082 <_sbrk_r+0x1a>
 8010080:	6023      	str	r3, [r4, #0]
 8010082:	bd38      	pop	{r3, r4, r5, pc}
 8010084:	24000540 	.word	0x24000540

08010088 <__malloc_lock>:
 8010088:	4801      	ldr	r0, [pc, #4]	; (8010090 <__malloc_lock+0x8>)
 801008a:	f000 b811 	b.w	80100b0 <__retarget_lock_acquire_recursive>
 801008e:	bf00      	nop
 8010090:	24000544 	.word	0x24000544

08010094 <__malloc_unlock>:
 8010094:	4801      	ldr	r0, [pc, #4]	; (801009c <__malloc_unlock+0x8>)
 8010096:	f000 b80c 	b.w	80100b2 <__retarget_lock_release_recursive>
 801009a:	bf00      	nop
 801009c:	24000544 	.word	0x24000544

080100a0 <_malloc_usable_size_r>:
 80100a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100a4:	1f18      	subs	r0, r3, #4
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	bfbc      	itt	lt
 80100aa:	580b      	ldrlt	r3, [r1, r0]
 80100ac:	18c0      	addlt	r0, r0, r3
 80100ae:	4770      	bx	lr

080100b0 <__retarget_lock_acquire_recursive>:
 80100b0:	4770      	bx	lr

080100b2 <__retarget_lock_release_recursive>:
 80100b2:	4770      	bx	lr

080100b4 <_init>:
 80100b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100b6:	bf00      	nop
 80100b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100ba:	bc08      	pop	{r3}
 80100bc:	469e      	mov	lr, r3
 80100be:	4770      	bx	lr

080100c0 <_fini>:
 80100c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100c2:	bf00      	nop
 80100c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100c6:	bc08      	pop	{r3}
 80100c8:	469e      	mov	lr, r3
 80100ca:	4770      	bx	lr
