
mewa_playground.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5bc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000840  0800a860  0800a860  0001a860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b0a0  0800b0a0  0001b0a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b0a4  0800b0a4  0001b0a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  24000000  0800b0a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000019c  2400007c  0800b124  0002007c  2**2
                  ALLOC
  7 .sdram        00004de4  c0000000  c0000000  00030000  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000218  24000218  00020218  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015390  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e46  00000000  00000000  0003543a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000fe0  00000000  00000000  00038280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000e70  00000000  00000000  00039260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000373fb  00000000  00000000  0003a0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001640d  00000000  00000000  000714cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00157a73  00000000  00000000  000878d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001df34b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000466c  00000000  00000000  001df39c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a844 	.word	0x0800a844

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	0800a844 	.word	0x0800a844

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <cs4270_reset>:
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void cs4270_reset(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS4270_NRESET_GPIO, CS4270_NRESET_PIN, GPIO_PIN_RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	2110      	movs	r1, #16
 8000398:	4807      	ldr	r0, [pc, #28]	; (80003b8 <cs4270_reset+0x28>)
 800039a:	f003 feb9 	bl	8004110 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800039e:	2001      	movs	r0, #1
 80003a0:	f001 faee 	bl	8001980 <HAL_Delay>
	HAL_GPIO_WritePin(CS4270_NRESET_GPIO, CS4270_NRESET_PIN, GPIO_PIN_SET);
 80003a4:	2201      	movs	r2, #1
 80003a6:	2110      	movs	r1, #16
 80003a8:	4803      	ldr	r0, [pc, #12]	; (80003b8 <cs4270_reset+0x28>)
 80003aa:	f003 feb1 	bl	8004110 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80003ae:	2001      	movs	r0, #1
 80003b0:	f001 fae6 	bl	8001980 <HAL_Delay>
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	58020c00 	.word	0x58020c00

080003bc <cs4270_init>:

bool cs4270_init(I2C_HandleTypeDef *hi2c1, uint8_t address)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b088      	sub	sp, #32
 80003c0:	af04      	add	r7, sp, #16
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	460b      	mov	r3, r1
 80003c6:	70fb      	strb	r3, [r7, #3]
	bool status;
	HAL_StatusTypeDef i2c_status;
	uint8_t reg_value;

	ctx.i2c = hi2c1;
 80003c8:	4a36      	ldr	r2, [pc, #216]	; (80004a4 <cs4270_init+0xe8>)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	6013      	str	r3, [r2, #0]
	ctx.address = ((CS4270_FIXED_ADDRESS | address) << 1);
 80003ce:	78fb      	ldrb	r3, [r7, #3]
 80003d0:	005b      	lsls	r3, r3, #1
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	f063 036f 	orn	r3, r3, #111	; 0x6f
 80003d8:	b2da      	uxtb	r2, r3
 80003da:	4b32      	ldr	r3, [pc, #200]	; (80004a4 <cs4270_init+0xe8>)
 80003dc:	711a      	strb	r2, [r3, #4]

	/* Reset the chip */
	cs4270_reset();
 80003de:	f7ff ffd7 	bl	8000390 <cs4270_reset>

	/* Check device's ID */
	if (cs4270_get_id() != CS4270_DEVICE_ID) {
 80003e2:	f000 f861 	bl	80004a8 <cs4270_get_id>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b0c      	cmp	r3, #12
 80003ea:	d001      	beq.n	80003f0 <cs4270_init+0x34>
		return false;
 80003ec:	2300      	movs	r3, #0
 80003ee:	e054      	b.n	800049a <cs4270_init+0xde>
	}

	/* Configure ADC and DAC: unfreeze ADC HPFs, disable digital loopback, set both ADC and DAC format to I2S */
	reg_value = 0b00001001;
 80003f0:	2309      	movs	r3, #9
 80003f2:	737b      	strb	r3, [r7, #13]
	i2c_status = HAL_I2C_Mem_Write(ctx.i2c, ctx.address, CS4270_ADC_DAC_CTRL_REG, CS4270_ADDRESS_SIZE, &reg_value, sizeof(reg_value), CS4270_I2C_TIMEOUT_MS);
 80003f4:	4b2b      	ldr	r3, [pc, #172]	; (80004a4 <cs4270_init+0xe8>)
 80003f6:	6818      	ldr	r0, [r3, #0]
 80003f8:	4b2a      	ldr	r3, [pc, #168]	; (80004a4 <cs4270_init+0xe8>)
 80003fa:	791b      	ldrb	r3, [r3, #4]
 80003fc:	b299      	uxth	r1, r3
 80003fe:	2364      	movs	r3, #100	; 0x64
 8000400:	9302      	str	r3, [sp, #8]
 8000402:	2301      	movs	r3, #1
 8000404:	9301      	str	r3, [sp, #4]
 8000406:	f107 030d 	add.w	r3, r7, #13
 800040a:	9300      	str	r3, [sp, #0]
 800040c:	2301      	movs	r3, #1
 800040e:	2204      	movs	r2, #4
 8000410:	f004 f81c 	bl	800444c <HAL_I2C_Mem_Write>
 8000414:	4603      	mov	r3, r0
 8000416:	73fb      	strb	r3, [r7, #15]

	/* Configure transition: enable DAC single volume control, enable Soft Ramp and Zero Cross, disable signal inversion, disable de-emphasis */
	reg_value = 0b11100000;
 8000418:	23e0      	movs	r3, #224	; 0xe0
 800041a:	737b      	strb	r3, [r7, #13]
	i2c_status |= HAL_I2C_Mem_Write(ctx.i2c, ctx.address, CS4270_TRANSITION_CTRL_REG, CS4270_ADDRESS_SIZE, &reg_value, sizeof(reg_value), CS4270_I2C_TIMEOUT_MS);
 800041c:	4b21      	ldr	r3, [pc, #132]	; (80004a4 <cs4270_init+0xe8>)
 800041e:	6818      	ldr	r0, [r3, #0]
 8000420:	4b20      	ldr	r3, [pc, #128]	; (80004a4 <cs4270_init+0xe8>)
 8000422:	791b      	ldrb	r3, [r3, #4]
 8000424:	b299      	uxth	r1, r3
 8000426:	2364      	movs	r3, #100	; 0x64
 8000428:	9302      	str	r3, [sp, #8]
 800042a:	2301      	movs	r3, #1
 800042c:	9301      	str	r3, [sp, #4]
 800042e:	f107 030d 	add.w	r3, r7, #13
 8000432:	9300      	str	r3, [sp, #0]
 8000434:	2301      	movs	r3, #1
 8000436:	2205      	movs	r2, #5
 8000438:	f004 f808 	bl	800444c <HAL_I2C_Mem_Write>
 800043c:	4603      	mov	r3, r0
 800043e:	461a      	mov	r2, r3
 8000440:	7bfb      	ldrb	r3, [r7, #15]
 8000442:	4313      	orrs	r3, r2
 8000444:	73fb      	strb	r3, [r7, #15]

	/* Configure muting: disable Auto-Mute, mute ADC channels, set active low mute signals polarity, disable DAC channels mute */
	reg_value = 0b00011000;
 8000446:	2318      	movs	r3, #24
 8000448:	737b      	strb	r3, [r7, #13]
	i2c_status |= HAL_I2C_Mem_Write(ctx.i2c, ctx.address, CS4270_MUTE_CTRL_REG, CS4270_ADDRESS_SIZE, &reg_value, sizeof(reg_value), CS4270_I2C_TIMEOUT_MS);
 800044a:	4b16      	ldr	r3, [pc, #88]	; (80004a4 <cs4270_init+0xe8>)
 800044c:	6818      	ldr	r0, [r3, #0]
 800044e:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <cs4270_init+0xe8>)
 8000450:	791b      	ldrb	r3, [r3, #4]
 8000452:	b299      	uxth	r1, r3
 8000454:	2364      	movs	r3, #100	; 0x64
 8000456:	9302      	str	r3, [sp, #8]
 8000458:	2301      	movs	r3, #1
 800045a:	9301      	str	r3, [sp, #4]
 800045c:	f107 030d 	add.w	r3, r7, #13
 8000460:	9300      	str	r3, [sp, #0]
 8000462:	2301      	movs	r3, #1
 8000464:	2206      	movs	r2, #6
 8000466:	f003 fff1 	bl	800444c <HAL_I2C_Mem_Write>
 800046a:	4603      	mov	r3, r0
 800046c:	461a      	mov	r2, r3
 800046e:	7bfb      	ldrb	r3, [r7, #15]
 8000470:	4313      	orrs	r3, r2
 8000472:	73fb      	strb	r3, [r7, #15]

	/* Set initial volume */
	status = cs4270_set_attenuation(CS4270_INITIAL_ATTENUATION_DB * CS4270_STEPS_PER_DB);
 8000474:	2030      	movs	r0, #48	; 0x30
 8000476:	f000 f835 	bl	80004e4 <cs4270_set_attenuation>
 800047a:	4603      	mov	r3, r0
 800047c:	73bb      	strb	r3, [r7, #14]
	status &= (i2c_status == HAL_OK);
 800047e:	7bbb      	ldrb	r3, [r7, #14]
 8000480:	7bfa      	ldrb	r2, [r7, #15]
 8000482:	2a00      	cmp	r2, #0
 8000484:	bf0c      	ite	eq
 8000486:	2201      	moveq	r2, #1
 8000488:	2200      	movne	r2, #0
 800048a:	b2d2      	uxtb	r2, r2
 800048c:	4013      	ands	r3, r2
 800048e:	2b00      	cmp	r3, #0
 8000490:	bf14      	ite	ne
 8000492:	2301      	movne	r3, #1
 8000494:	2300      	moveq	r3, #0
 8000496:	73bb      	strb	r3, [r7, #14]

	return status;
 8000498:	7bbb      	ldrb	r3, [r7, #14]
}
 800049a:	4618      	mov	r0, r3
 800049c:	3710      	adds	r7, #16
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	24000098 	.word	0x24000098

080004a8 <cs4270_get_id>:

uint8_t cs4270_get_id(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af04      	add	r7, sp, #16
	uint8_t reg_value = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(ctx.i2c, ctx.address, CS4270_DEVICE_ID_REG, CS4270_ADDRESS_SIZE, &reg_value, sizeof(reg_value), CS4270_I2C_TIMEOUT_MS);
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <cs4270_get_id+0x38>)
 80004b4:	6818      	ldr	r0, [r3, #0]
 80004b6:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <cs4270_get_id+0x38>)
 80004b8:	791b      	ldrb	r3, [r3, #4]
 80004ba:	b299      	uxth	r1, r3
 80004bc:	2364      	movs	r3, #100	; 0x64
 80004be:	9302      	str	r3, [sp, #8]
 80004c0:	2301      	movs	r3, #1
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	1dfb      	adds	r3, r7, #7
 80004c6:	9300      	str	r3, [sp, #0]
 80004c8:	2301      	movs	r3, #1
 80004ca:	2201      	movs	r2, #1
 80004cc:	f004 f8d2 	bl	8004674 <HAL_I2C_Mem_Read>
	return ((reg_value & CS4270_DEVICE_ID_MASK) >> CS4270_DEVICE_ID_SHIFT);
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	091b      	lsrs	r3, r3, #4
 80004d4:	b2db      	uxtb	r3, r3
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	24000098 	.word	0x24000098

080004e4 <cs4270_set_attenuation>:
	HAL_I2C_Mem_Read(ctx.i2c, ctx.address, CS4270_DEVICE_ID_REG, CS4270_ADDRESS_SIZE, &reg_value, sizeof(reg_value), CS4270_I2C_TIMEOUT_MS);
	return ((reg_value & CS4270_REVISION_MASK) >> CS4270_REVISION_SHIFT);
}

bool cs4270_set_attenuation(uint8_t steps)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af04      	add	r7, sp, #16
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef i2c_status;
	i2c_status = HAL_I2C_Mem_Write(ctx.i2c, ctx.address, CS4270_DAC_CH_A_VOL_REG, CS4270_ADDRESS_SIZE, &steps, sizeof(steps), CS4270_I2C_TIMEOUT_MS);
 80004ee:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <cs4270_set_attenuation+0x40>)
 80004f0:	6818      	ldr	r0, [r3, #0]
 80004f2:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <cs4270_set_attenuation+0x40>)
 80004f4:	791b      	ldrb	r3, [r3, #4]
 80004f6:	b299      	uxth	r1, r3
 80004f8:	2364      	movs	r3, #100	; 0x64
 80004fa:	9302      	str	r3, [sp, #8]
 80004fc:	2301      	movs	r3, #1
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	1dfb      	adds	r3, r7, #7
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	2301      	movs	r3, #1
 8000506:	2207      	movs	r2, #7
 8000508:	f003 ffa0 	bl	800444c <HAL_I2C_Mem_Write>
 800050c:	4603      	mov	r3, r0
 800050e:	73fb      	strb	r3, [r7, #15]
	return (i2c_status == HAL_OK);
 8000510:	7bfb      	ldrb	r3, [r7, #15]
 8000512:	2b00      	cmp	r3, #0
 8000514:	bf0c      	ite	eq
 8000516:	2301      	moveq	r3, #1
 8000518:	2300      	movne	r3, #0
 800051a:	b2db      	uxtb	r3, r3
}
 800051c:	4618      	mov	r0, r3
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	24000098 	.word	0x24000098

08000528 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
	...

08000538 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af04      	add	r7, sp, #16
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000546:	9302      	str	r3, [sp, #8]
 8000548:	2301      	movs	r3, #1
 800054a:	9301      	str	r3, [sp, #4]
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	2301      	movs	r3, #1
 8000552:	2200      	movs	r2, #0
 8000554:	2178      	movs	r1, #120	; 0x78
 8000556:	4803      	ldr	r0, [pc, #12]	; (8000564 <ssd1306_WriteCommand+0x2c>)
 8000558:	f003 ff78 	bl	800444c <HAL_I2C_Mem_Write>
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	240000a8 	.word	0x240000a8

08000568 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af04      	add	r7, sp, #16
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	b29b      	uxth	r3, r3
 8000576:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800057a:	9202      	str	r2, [sp, #8]
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2301      	movs	r3, #1
 8000584:	2240      	movs	r2, #64	; 0x40
 8000586:	2178      	movs	r1, #120	; 0x78
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <ssd1306_WriteData+0x30>)
 800058a:	f003 ff5f 	bl	800444c <HAL_I2C_Mem_Write>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	240000a8 	.word	0x240000a8

0800059c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80005a0:	f7ff ffc2 	bl	8000528 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80005a4:	2064      	movs	r0, #100	; 0x64
 80005a6:	f001 f9eb 	bl	8001980 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80005aa:	2000      	movs	r0, #0
 80005ac:	f000 f9da 	bl	8000964 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80005b0:	2020      	movs	r0, #32
 80005b2:	f7ff ffc1 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80005b6:	2000      	movs	r0, #0
 80005b8:	f7ff ffbe 	bl	8000538 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80005bc:	20b0      	movs	r0, #176	; 0xb0
 80005be:	f7ff ffbb 	bl	8000538 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80005c2:	20c8      	movs	r0, #200	; 0xc8
 80005c4:	f7ff ffb8 	bl	8000538 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80005c8:	2000      	movs	r0, #0
 80005ca:	f7ff ffb5 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80005ce:	2010      	movs	r0, #16
 80005d0:	f7ff ffb2 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80005d4:	2040      	movs	r0, #64	; 0x40
 80005d6:	f7ff ffaf 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80005da:	20ff      	movs	r0, #255	; 0xff
 80005dc:	f000 f9ae 	bl	800093c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80005e0:	20a1      	movs	r0, #161	; 0xa1
 80005e2:	f7ff ffa9 	bl	8000538 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80005e6:	20a6      	movs	r0, #166	; 0xa6
 80005e8:	f7ff ffa6 	bl	8000538 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80005ec:	20a8      	movs	r0, #168	; 0xa8
 80005ee:	f7ff ffa3 	bl	8000538 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 80005f2:	201f      	movs	r0, #31
 80005f4:	f7ff ffa0 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80005f8:	20a4      	movs	r0, #164	; 0xa4
 80005fa:	f7ff ff9d 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80005fe:	20d3      	movs	r0, #211	; 0xd3
 8000600:	f7ff ff9a 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000604:	2000      	movs	r0, #0
 8000606:	f7ff ff97 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800060a:	20d5      	movs	r0, #213	; 0xd5
 800060c:	f7ff ff94 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000610:	20f0      	movs	r0, #240	; 0xf0
 8000612:	f7ff ff91 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000616:	20d9      	movs	r0, #217	; 0xd9
 8000618:	f7ff ff8e 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800061c:	2022      	movs	r0, #34	; 0x22
 800061e:	f7ff ff8b 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000622:	20da      	movs	r0, #218	; 0xda
 8000624:	f7ff ff88 	bl	8000538 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8000628:	2002      	movs	r0, #2
 800062a:	f7ff ff85 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800062e:	20db      	movs	r0, #219	; 0xdb
 8000630:	f7ff ff82 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000634:	2020      	movs	r0, #32
 8000636:	f7ff ff7f 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800063a:	208d      	movs	r0, #141	; 0x8d
 800063c:	f7ff ff7c 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000640:	2014      	movs	r0, #20
 8000642:	f7ff ff79 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000646:	2001      	movs	r0, #1
 8000648:	f000 f98c 	bl	8000964 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800064c:	2000      	movs	r0, #0
 800064e:	f000 f80f 	bl	8000670 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000652:	f000 f831 	bl	80006b8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <ssd1306_Init+0xd0>)
 8000658:	2200      	movs	r2, #0
 800065a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <ssd1306_Init+0xd0>)
 800065e:	2200      	movs	r2, #0
 8000660:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000662:	4b02      	ldr	r3, [pc, #8]	; (800066c <ssd1306_Init+0xd0>)
 8000664:	2201      	movs	r2, #1
 8000666:	711a      	strb	r2, [r3, #4]
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	c0000200 	.word	0xc0000200

08000670 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	e00d      	b.n	800069c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d101      	bne.n	800068a <ssd1306_Fill+0x1a>
 8000686:	2100      	movs	r1, #0
 8000688:	e000      	b.n	800068c <ssd1306_Fill+0x1c>
 800068a:	21ff      	movs	r1, #255	; 0xff
 800068c:	4a09      	ldr	r2, [pc, #36]	; (80006b4 <ssd1306_Fill+0x44>)
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	4413      	add	r3, r2
 8000692:	460a      	mov	r2, r1
 8000694:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	3301      	adds	r3, #1
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006a2:	d3ed      	bcc.n	8000680 <ssd1306_Fill+0x10>
    }
}
 80006a4:	bf00      	nop
 80006a6:	bf00      	nop
 80006a8:	3714      	adds	r7, #20
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	c0000000 	.word	0xc0000000

080006b8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80006be:	2300      	movs	r3, #0
 80006c0:	71fb      	strb	r3, [r7, #7]
 80006c2:	e016      	b.n	80006f2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	3b50      	subs	r3, #80	; 0x50
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff ff34 	bl	8000538 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80006d0:	2000      	movs	r0, #0
 80006d2:	f7ff ff31 	bl	8000538 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80006d6:	2010      	movs	r0, #16
 80006d8:	f7ff ff2e 	bl	8000538 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	01db      	lsls	r3, r3, #7
 80006e0:	4a08      	ldr	r2, [pc, #32]	; (8000704 <ssd1306_UpdateScreen+0x4c>)
 80006e2:	4413      	add	r3, r2
 80006e4:	2180      	movs	r1, #128	; 0x80
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff3e 	bl	8000568 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	3301      	adds	r3, #1
 80006f0:	71fb      	strb	r3, [r7, #7]
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b03      	cmp	r3, #3
 80006f6:	d9e5      	bls.n	80006c4 <ssd1306_UpdateScreen+0xc>
    }
}
 80006f8:	bf00      	nop
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	c0000000 	.word	0xc0000000

08000708 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	460b      	mov	r3, r1
 8000714:	71bb      	strb	r3, [r7, #6]
 8000716:	4613      	mov	r3, r2
 8000718:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	2b00      	cmp	r3, #0
 8000720:	db3d      	blt.n	800079e <ssd1306_DrawPixel+0x96>
 8000722:	79bb      	ldrb	r3, [r7, #6]
 8000724:	2b1f      	cmp	r3, #31
 8000726:	d83a      	bhi.n	800079e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000728:	797b      	ldrb	r3, [r7, #5]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d11a      	bne.n	8000764 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800072e:	79fa      	ldrb	r2, [r7, #7]
 8000730:	79bb      	ldrb	r3, [r7, #6]
 8000732:	08db      	lsrs	r3, r3, #3
 8000734:	b2d8      	uxtb	r0, r3
 8000736:	4603      	mov	r3, r0
 8000738:	01db      	lsls	r3, r3, #7
 800073a:	4413      	add	r3, r2
 800073c:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <ssd1306_DrawPixel+0xa4>)
 800073e:	5cd3      	ldrb	r3, [r2, r3]
 8000740:	b25a      	sxtb	r2, r3
 8000742:	79bb      	ldrb	r3, [r7, #6]
 8000744:	f003 0307 	and.w	r3, r3, #7
 8000748:	2101      	movs	r1, #1
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	b25b      	sxtb	r3, r3
 8000750:	4313      	orrs	r3, r2
 8000752:	b259      	sxtb	r1, r3
 8000754:	79fa      	ldrb	r2, [r7, #7]
 8000756:	4603      	mov	r3, r0
 8000758:	01db      	lsls	r3, r3, #7
 800075a:	4413      	add	r3, r2
 800075c:	b2c9      	uxtb	r1, r1
 800075e:	4a13      	ldr	r2, [pc, #76]	; (80007ac <ssd1306_DrawPixel+0xa4>)
 8000760:	54d1      	strb	r1, [r2, r3]
 8000762:	e01d      	b.n	80007a0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000764:	79fa      	ldrb	r2, [r7, #7]
 8000766:	79bb      	ldrb	r3, [r7, #6]
 8000768:	08db      	lsrs	r3, r3, #3
 800076a:	b2d8      	uxtb	r0, r3
 800076c:	4603      	mov	r3, r0
 800076e:	01db      	lsls	r3, r3, #7
 8000770:	4413      	add	r3, r2
 8000772:	4a0e      	ldr	r2, [pc, #56]	; (80007ac <ssd1306_DrawPixel+0xa4>)
 8000774:	5cd3      	ldrb	r3, [r2, r3]
 8000776:	b25a      	sxtb	r2, r3
 8000778:	79bb      	ldrb	r3, [r7, #6]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	2101      	movs	r1, #1
 8000780:	fa01 f303 	lsl.w	r3, r1, r3
 8000784:	b25b      	sxtb	r3, r3
 8000786:	43db      	mvns	r3, r3
 8000788:	b25b      	sxtb	r3, r3
 800078a:	4013      	ands	r3, r2
 800078c:	b259      	sxtb	r1, r3
 800078e:	79fa      	ldrb	r2, [r7, #7]
 8000790:	4603      	mov	r3, r0
 8000792:	01db      	lsls	r3, r3, #7
 8000794:	4413      	add	r3, r2
 8000796:	b2c9      	uxtb	r1, r1
 8000798:	4a04      	ldr	r2, [pc, #16]	; (80007ac <ssd1306_DrawPixel+0xa4>)
 800079a:	54d1      	strb	r1, [r2, r3]
 800079c:	e000      	b.n	80007a0 <ssd1306_DrawPixel+0x98>
        return;
 800079e:	bf00      	nop
    }
}
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	c0000000 	.word	0xc0000000

080007b0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b089      	sub	sp, #36	; 0x24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4604      	mov	r4, r0
 80007b8:	1d38      	adds	r0, r7, #4
 80007ba:	e880 0006 	stmia.w	r0, {r1, r2}
 80007be:	461a      	mov	r2, r3
 80007c0:	4623      	mov	r3, r4
 80007c2:	73fb      	strb	r3, [r7, #15]
 80007c4:	4613      	mov	r3, r2
 80007c6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	2b1f      	cmp	r3, #31
 80007cc:	d902      	bls.n	80007d4 <ssd1306_WriteChar+0x24>
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	2b7e      	cmp	r3, #126	; 0x7e
 80007d2:	d901      	bls.n	80007d8 <ssd1306_WriteChar+0x28>
        return 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e06d      	b.n	80008b4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80007d8:	4b38      	ldr	r3, [pc, #224]	; (80008bc <ssd1306_WriteChar+0x10c>)
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	793b      	ldrb	r3, [r7, #4]
 80007e0:	4413      	add	r3, r2
 80007e2:	2b80      	cmp	r3, #128	; 0x80
 80007e4:	dc06      	bgt.n	80007f4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80007e6:	4b35      	ldr	r3, [pc, #212]	; (80008bc <ssd1306_WriteChar+0x10c>)
 80007e8:	885b      	ldrh	r3, [r3, #2]
 80007ea:	461a      	mov	r2, r3
 80007ec:	797b      	ldrb	r3, [r7, #5]
 80007ee:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80007f0:	2b20      	cmp	r3, #32
 80007f2:	dd01      	ble.n	80007f8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	e05d      	b.n	80008b4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
 80007fc:	e04c      	b.n	8000898 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80007fe:	68ba      	ldr	r2, [r7, #8]
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	3b20      	subs	r3, #32
 8000804:	7979      	ldrb	r1, [r7, #5]
 8000806:	fb01 f303 	mul.w	r3, r1, r3
 800080a:	4619      	mov	r1, r3
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	440b      	add	r3, r1
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	4413      	add	r3, r2
 8000814:	881b      	ldrh	r3, [r3, #0]
 8000816:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
 800081c:	e034      	b.n	8000888 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800081e:	697a      	ldr	r2, [r7, #20]
 8000820:	69bb      	ldr	r3, [r7, #24]
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
 8000826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800082a:	2b00      	cmp	r3, #0
 800082c:	d012      	beq.n	8000854 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800082e:	4b23      	ldr	r3, [pc, #140]	; (80008bc <ssd1306_WriteChar+0x10c>)
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	b2da      	uxtb	r2, r3
 8000834:	69bb      	ldr	r3, [r7, #24]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4413      	add	r3, r2
 800083a:	b2d8      	uxtb	r0, r3
 800083c:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <ssd1306_WriteChar+0x10c>)
 800083e:	885b      	ldrh	r3, [r3, #2]
 8000840:	b2da      	uxtb	r2, r3
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4413      	add	r3, r2
 8000848:	b2db      	uxtb	r3, r3
 800084a:	7bba      	ldrb	r2, [r7, #14]
 800084c:	4619      	mov	r1, r3
 800084e:	f7ff ff5b 	bl	8000708 <ssd1306_DrawPixel>
 8000852:	e016      	b.n	8000882 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000854:	4b19      	ldr	r3, [pc, #100]	; (80008bc <ssd1306_WriteChar+0x10c>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	b2da      	uxtb	r2, r3
 800085a:	69bb      	ldr	r3, [r7, #24]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4413      	add	r3, r2
 8000860:	b2d8      	uxtb	r0, r3
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <ssd1306_WriteChar+0x10c>)
 8000864:	885b      	ldrh	r3, [r3, #2]
 8000866:	b2da      	uxtb	r2, r3
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	4413      	add	r3, r2
 800086e:	b2d9      	uxtb	r1, r3
 8000870:	7bbb      	ldrb	r3, [r7, #14]
 8000872:	2b00      	cmp	r3, #0
 8000874:	bf0c      	ite	eq
 8000876:	2301      	moveq	r3, #1
 8000878:	2300      	movne	r3, #0
 800087a:	b2db      	uxtb	r3, r3
 800087c:	461a      	mov	r2, r3
 800087e:	f7ff ff43 	bl	8000708 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000882:	69bb      	ldr	r3, [r7, #24]
 8000884:	3301      	adds	r3, #1
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	793b      	ldrb	r3, [r7, #4]
 800088a:	461a      	mov	r2, r3
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	4293      	cmp	r3, r2
 8000890:	d3c5      	bcc.n	800081e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3301      	adds	r3, #1
 8000896:	61fb      	str	r3, [r7, #28]
 8000898:	797b      	ldrb	r3, [r7, #5]
 800089a:	461a      	mov	r2, r3
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	4293      	cmp	r3, r2
 80008a0:	d3ad      	bcc.n	80007fe <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <ssd1306_WriteChar+0x10c>)
 80008a4:	881a      	ldrh	r2, [r3, #0]
 80008a6:	793b      	ldrb	r3, [r7, #4]
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	4413      	add	r3, r2
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	4b03      	ldr	r3, [pc, #12]	; (80008bc <ssd1306_WriteChar+0x10c>)
 80008b0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3724      	adds	r7, #36	; 0x24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd90      	pop	{r4, r7, pc}
 80008bc:	c0000200 	.word	0xc0000200

080008c0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	1d38      	adds	r0, r7, #4
 80008ca:	e880 0006 	stmia.w	r0, {r1, r2}
 80008ce:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80008d0:	e012      	b.n	80008f8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	7818      	ldrb	r0, [r3, #0]
 80008d6:	78fb      	ldrb	r3, [r7, #3]
 80008d8:	1d3a      	adds	r2, r7, #4
 80008da:	ca06      	ldmia	r2, {r1, r2}
 80008dc:	f7ff ff68 	bl	80007b0 <ssd1306_WriteChar>
 80008e0:	4603      	mov	r3, r0
 80008e2:	461a      	mov	r2, r3
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d002      	beq.n	80008f2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	e008      	b.n	8000904 <ssd1306_WriteString+0x44>
        }
        str++;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	3301      	adds	r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d1e8      	bne.n	80008d2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	781b      	ldrb	r3, [r3, #0]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	460a      	mov	r2, r1
 8000916:	71fb      	strb	r3, [r7, #7]
 8000918:	4613      	mov	r3, r2
 800091a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	b29a      	uxth	r2, r3
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <ssd1306_SetCursor+0x2c>)
 8000922:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000924:	79bb      	ldrb	r3, [r7, #6]
 8000926:	b29a      	uxth	r2, r3
 8000928:	4b03      	ldr	r3, [pc, #12]	; (8000938 <ssd1306_SetCursor+0x2c>)
 800092a:	805a      	strh	r2, [r3, #2]
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	c0000200 	.word	0xc0000200

0800093c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000946:	2381      	movs	r3, #129	; 0x81
 8000948:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fdf3 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fdef 	bl	8000538 <ssd1306_WriteCommand>
}
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d005      	beq.n	8000980 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000974:	23af      	movs	r3, #175	; 0xaf
 8000976:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <ssd1306_SetDisplayOn+0x38>)
 800097a:	2201      	movs	r2, #1
 800097c:	715a      	strb	r2, [r3, #5]
 800097e:	e004      	b.n	800098a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000980:	23ae      	movs	r3, #174	; 0xae
 8000982:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <ssd1306_SetDisplayOn+0x38>)
 8000986:	2200      	movs	r2, #0
 8000988:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fdd3 	bl	8000538 <ssd1306_WriteCommand>
}
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	c0000200 	.word	0xc0000200

080009a0 <tca9548_write>:
};

static struct tca9548a_ctx_t ctx = {0};

static bool tca9548_write()
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af02      	add	r7, sp, #8
	return (HAL_I2C_Master_Transmit(ctx.i2c, ctx.address, &ctx.ctrl_reg_shadow, sizeof(ctx.ctrl_reg_shadow), TCA9548A_I2C_TIMEOUT_MS) == HAL_OK);
 80009a6:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <tca9548_write+0x30>)
 80009a8:	6818      	ldr	r0, [r3, #0]
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <tca9548_write+0x30>)
 80009ac:	791b      	ldrb	r3, [r3, #4]
 80009ae:	b299      	uxth	r1, r3
 80009b0:	2364      	movs	r3, #100	; 0x64
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	2301      	movs	r3, #1
 80009b6:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <tca9548_write+0x34>)
 80009b8:	f003 fc54 	bl	8004264 <HAL_I2C_Master_Transmit>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	bf0c      	ite	eq
 80009c2:	2301      	moveq	r3, #1
 80009c4:	2300      	movne	r3, #0
 80009c6:	b2db      	uxtb	r3, r3
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	240000a0 	.word	0x240000a0
 80009d4:	240000a5 	.word	0x240000a5

080009d8 <tca9548a_reset>:

void tca9548a_reset(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	/* Reset the chip */
	HAL_GPIO_WritePin(TCA9548A_NRESET_GPIO, TCA9548A_NRESET_PIN, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2120      	movs	r1, #32
 80009e0:	4809      	ldr	r0, [pc, #36]	; (8000a08 <tca9548a_reset+0x30>)
 80009e2:	f003 fb95 	bl	8004110 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009e6:	2001      	movs	r0, #1
 80009e8:	f000 ffca 	bl	8001980 <HAL_Delay>
	HAL_GPIO_WritePin(TCA9548A_NRESET_GPIO, TCA9548A_NRESET_PIN, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2120      	movs	r1, #32
 80009f0:	4805      	ldr	r0, [pc, #20]	; (8000a08 <tca9548a_reset+0x30>)
 80009f2:	f003 fb8d 	bl	8004110 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009f6:	2001      	movs	r0, #1
 80009f8:	f000 ffc2 	bl	8001980 <HAL_Delay>

	/* Update control register shadow with initial value */
	ctx.ctrl_reg_shadow = 0;
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <tca9548a_reset+0x34>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	715a      	strb	r2, [r3, #5]
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	58020400 	.word	0x58020400
 8000a0c:	240000a0 	.word	0x240000a0

08000a10 <tca9548a_init>:

bool tca9548a_init(I2C_HandleTypeDef *hi2c1, uint8_t address)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	460b      	mov	r3, r1
 8000a1a:	70fb      	strb	r3, [r7, #3]
	ctx.i2c = hi2c1;
 8000a1c:	4a09      	ldr	r2, [pc, #36]	; (8000a44 <tca9548a_init+0x34>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6013      	str	r3, [r2, #0]
	ctx.address = ((TCA9548A_FIXED_ADDRESS | address) << 1);
 8000a22:	78fb      	ldrb	r3, [r7, #3]
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	f063 031f 	orn	r3, r3, #31
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <tca9548a_init+0x34>)
 8000a30:	711a      	strb	r2, [r3, #4]
	tca9548a_reset();
 8000a32:	f7ff ffd1 	bl	80009d8 <tca9548a_reset>
	return tca9548a_close_all();
 8000a36:	f000 f821 	bl	8000a7c <tca9548a_close_all>
 8000a3a:	4603      	mov	r3, r0
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	240000a0 	.word	0x240000a0

08000a48 <tca9548a_switch_to>:

	return tca9548_write();
}

bool tca9548a_switch_to(uint8_t channel)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
	if (channel >= TCA9548A_CHANNELS_NUM) {
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	2b07      	cmp	r3, #7
 8000a56:	d901      	bls.n	8000a5c <tca9548a_switch_to+0x14>
		return false;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	e009      	b.n	8000a70 <tca9548a_switch_to+0x28>
	}

	ctx.ctrl_reg_shadow = (uint8_t)(1 << channel);
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	2201      	movs	r2, #1
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <tca9548a_switch_to+0x30>)
 8000a68:	715a      	strb	r2, [r3, #5]

	return tca9548_write();
 8000a6a:	f7ff ff99 	bl	80009a0 <tca9548_write>
 8000a6e:	4603      	mov	r3, r0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	240000a0 	.word	0x240000a0

08000a7c <tca9548a_close_all>:
	ctx.ctrl_reg_shadow = TCA9548A_ENABLE_ALL;
	return tca9548_write();
}

bool tca9548a_close_all(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	ctx.ctrl_reg_shadow = TCA9548A_DISABLE_ALL;
 8000a80:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <tca9548a_close_all+0x14>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	715a      	strb	r2, [r3, #5]
	return tca9548_write();
 8000a86:	f7ff ff8b 	bl	80009a0 <tca9548_write>
 8000a8a:	4603      	mov	r3, r0
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	240000a0 	.word	0x240000a0
 8000a94:	00000000 	.word	0x00000000

08000a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9e:	f000 fedd 	bl	800185c <HAL_Init>
  /* USER CODE BEGIN Init */
  // TODO setup MPU and caches
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa2:	f000 f877 	bl	8000b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa6:	f000 f9eb 	bl	8000e80 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aaa:	f000 f96f 	bl	8000d8c <MX_DMA_Init>
  MX_I2C1_Init();
 8000aae:	f000 f8fb 	bl	8000ca8 <MX_I2C1_Init>
  MX_FMC_Init();
 8000ab2:	f000 f993 	bl	8000ddc <MX_FMC_Init>
  MX_I2S1_Init();
 8000ab6:	f000 f935 	bl	8000d24 <MX_I2S1_Init>
  /* USER CODE BEGIN 2 */
  tca9548a_init(&hi2c1, 0);
 8000aba:	2100      	movs	r1, #0
 8000abc:	4830      	ldr	r0, [pc, #192]	; (8000b80 <main+0xe8>)
 8000abe:	f7ff ffa7 	bl	8000a10 <tca9548a_init>
  tca9548a_switch_to(1);
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	f7ff ffc0 	bl	8000a48 <tca9548a_switch_to>
  ssd1306_Init();
 8000ac8:	f7ff fd68 	bl	800059c <ssd1306_Init>
  logger_init();
 8000acc:	f008 fafe 	bl	80090cc <logger_init>

  bool status = cs4270_init(&hi2c1, 0);
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	482b      	ldr	r0, [pc, #172]	; (8000b80 <main+0xe8>)
 8000ad4:	f7ff fc72 	bl	80003bc <cs4270_init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	70fb      	strb	r3, [r7, #3]
  logger_log("codec status: %d", status);
 8000adc:	78fb      	ldrb	r3, [r7, #3]
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4828      	ldr	r0, [pc, #160]	; (8000b84 <main+0xec>)
 8000ae2:	f008 faff 	bl	80090e4 <logger_log>

  for (size_t i = 0; i < 4800; ++i) {
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	e02b      	b.n	8000b44 <main+0xac>
	  int16_t val = (int16_t)(16834.0f * sin(2.0f * M_PI * 100.0f * i / 48000.0f));
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	ee07 3a90 	vmov	s15, r3
 8000af2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000af6:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8000b68 <main+0xd0>
 8000afa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000afe:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8000b70 <main+0xd8>
 8000b02:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000b06:	eeb0 0b46 	vmov.f64	d0, d6
 8000b0a:	f009 f8a5 	bl	8009c58 <sin>
 8000b0e:	eeb0 7b40 	vmov.f64	d7, d0
 8000b12:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8000b78 <main+0xe0>
 8000b16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b1a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000b1e:	ee17 3a90 	vmov	r3, s15
 8000b22:	803b      	strh	r3, [r7, #0]
	  audio_data[2 * i] = val;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	4917      	ldr	r1, [pc, #92]	; (8000b88 <main+0xf0>)
 8000b2a:	883a      	ldrh	r2, [r7, #0]
 8000b2c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  audio_data[2 * i + 1] = val;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	3301      	adds	r3, #1
 8000b36:	4914      	ldr	r1, [pc, #80]	; (8000b88 <main+0xf0>)
 8000b38:	883a      	ldrh	r2, [r7, #0]
 8000b3a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (size_t i = 0; i < 4800; ++i) {
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	3301      	adds	r3, #1
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
 8000b4a:	d3cf      	bcc.n	8000aec <main+0x54>
  }

  HAL_StatusTypeDef st = HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)audio_data, sizeof(audio_data)/sizeof(audio_data[0]));
 8000b4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b50:	490d      	ldr	r1, [pc, #52]	; (8000b88 <main+0xf0>)
 8000b52:	480e      	ldr	r0, [pc, #56]	; (8000b8c <main+0xf4>)
 8000b54:	f004 fb1a 	bl	800518c <HAL_I2S_Transmit_DMA>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	70bb      	strb	r3, [r7, #2]

  logger_log("DMA status: %d", st);
 8000b5c:	78bb      	ldrb	r3, [r7, #2]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480b      	ldr	r0, [pc, #44]	; (8000b90 <main+0xf8>)
 8000b62:	f008 fabf 	bl	80090e4 <logger_log>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <main+0xce>
 8000b68:	59d5433b 	.word	0x59d5433b
 8000b6c:	4083a28c 	.word	0x4083a28c
 8000b70:	00000000 	.word	0x00000000
 8000b74:	40e77000 	.word	0x40e77000
 8000b78:	00000000 	.word	0x00000000
 8000b7c:	40d07080 	.word	0x40d07080
 8000b80:	240000a8 	.word	0x240000a8
 8000b84:	0800a860 	.word	0x0800a860
 8000b88:	c0000208 	.word	0xc0000208
 8000b8c:	240000fc 	.word	0x240000fc
 8000b90:	0800a874 	.word	0x0800a874

08000b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b09c      	sub	sp, #112	; 0x70
 8000b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9e:	224c      	movs	r2, #76	; 0x4c
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f008 fbba 	bl	800931c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2220      	movs	r2, #32
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f008 fbb4 	bl	800931c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bb4:	2002      	movs	r0, #2
 8000bb6:	f004 fbeb 	bl	8005390 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bba:	2300      	movs	r3, #0
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	4b37      	ldr	r3, [pc, #220]	; (8000c9c <SystemClock_Config+0x108>)
 8000bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc2:	4a36      	ldr	r2, [pc, #216]	; (8000c9c <SystemClock_Config+0x108>)
 8000bc4:	f023 0301 	bic.w	r3, r3, #1
 8000bc8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bca:	4b34      	ldr	r3, [pc, #208]	; (8000c9c <SystemClock_Config+0x108>)
 8000bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	4b32      	ldr	r3, [pc, #200]	; (8000ca0 <SystemClock_Config+0x10c>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bdc:	4a30      	ldr	r2, [pc, #192]	; (8000ca0 <SystemClock_Config+0x10c>)
 8000bde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be2:	6193      	str	r3, [r2, #24]
 8000be4:	4b2e      	ldr	r3, [pc, #184]	; (8000ca0 <SystemClock_Config+0x10c>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bec:	603b      	str	r3, [r7, #0]
 8000bee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bf0:	bf00      	nop
 8000bf2:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <SystemClock_Config+0x10c>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bfe:	d1f8      	bne.n	8000bf2 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000c00:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <SystemClock_Config+0x110>)
 8000c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c04:	f023 0303 	bic.w	r3, r3, #3
 8000c08:	4a26      	ldr	r2, [pc, #152]	; (8000ca4 <SystemClock_Config+0x110>)
 8000c0a:	f043 0302 	orr.w	r3, r3, #2
 8000c0e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 8000c10:	2311      	movs	r3, #17
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000c1a:	2380      	movs	r3, #128	; 0x80
 8000c1c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000c1e:	2320      	movs	r3, #32
 8000c20:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c22:	2302      	movs	r3, #2
 8000c24:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c26:	2302      	movs	r3, #2
 8000c28:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 23;
 8000c2e:	2317      	movs	r3, #23
 8000c30:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c32:	2302      	movs	r3, #2
 8000c34:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c36:	2302      	movs	r3, #2
 8000c38:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c3e:	230c      	movs	r3, #12
 8000c40:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3584;
 8000c46:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000c4a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c50:	4618      	mov	r0, r3
 8000c52:	f004 fbd7 	bl	8005404 <HAL_RCC_OscConfig>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000c5c:	f000 fa68 	bl	8001130 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c60:	233f      	movs	r3, #63	; 0x3f
 8000c62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c64:	2303      	movs	r3, #3
 8000c66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c6c:	2308      	movs	r3, #8
 8000c6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	2101      	movs	r1, #1
 8000c84:	4618      	mov	r0, r3
 8000c86:	f005 f817 	bl	8005cb8 <HAL_RCC_ClockConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8000c90:	f000 fa4e 	bl	8001130 <Error_Handler>
  }
}
 8000c94:	bf00      	nop
 8000c96:	3770      	adds	r7, #112	; 0x70
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	58000400 	.word	0x58000400
 8000ca0:	58024800 	.word	0x58024800
 8000ca4:	58024400 	.word	0x58024400

08000ca8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cae:	4a1c      	ldr	r2, [pc, #112]	; (8000d20 <MX_I2C1_Init+0x78>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000004;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cb4:	2204      	movs	r2, #4
 8000cb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc4:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ce2:	480e      	ldr	r0, [pc, #56]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000ce4:	f003 fa2e 	bl	8004144 <HAL_I2C_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cee:	f000 fa1f 	bl	8001130 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4809      	ldr	r0, [pc, #36]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cf6:	f004 f88f 	bl	8004e18 <HAL_I2CEx_ConfigAnalogFilter>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d00:	f000 fa16 	bl	8001130 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d04:	2100      	movs	r1, #0
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000d08:	f004 f8d1 	bl	8004eae <HAL_I2CEx_ConfigDigitalFilter>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d12:	f000 fa0d 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	240000a8 	.word	0x240000a8
 8000d20:	40005400 	.word	0x40005400

08000d24 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000d28:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <MX_I2S1_Init+0x60>)
 8000d2a:	4a17      	ldr	r2, [pc, #92]	; (8000d88 <MX_I2S1_Init+0x64>)
 8000d2c:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <MX_I2S1_Init+0x60>)
 8000d30:	220a      	movs	r2, #10
 8000d32:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d34:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <MX_I2S1_Init+0x60>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d3a:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MX_I2S1_Init+0x60>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d40:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <MX_I2S1_Init+0x60>)
 8000d42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d46:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_I2S1_Init+0x60>)
 8000d4a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000d4e:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_I2S1_Init+0x60>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <MX_I2S1_Init+0x60>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_I2S1_Init+0x60>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <MX_I2S1_Init+0x60>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_I2S1_Init+0x60>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_I2S1_Init+0x60>)
 8000d70:	f004 f8ea 	bl	8004f48 <HAL_I2S_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_I2S1_Init+0x5a>
  {
    Error_Handler();
 8000d7a:	f000 f9d9 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	240000fc 	.word	0x240000fc
 8000d88:	40013000 	.word	0x40013000

08000d8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_DMA_Init+0x4c>)
 8000d94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d98:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <MX_DMA_Init+0x4c>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <MX_DMA_Init+0x4c>)
 8000da4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2100      	movs	r1, #0
 8000db4:	200b      	movs	r0, #11
 8000db6:	f000 feee 	bl	8001b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000dba:	200b      	movs	r0, #11
 8000dbc:	f000 ff05 	bl	8001bca <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	2066      	movs	r0, #102	; 0x66
 8000dc6:	f000 fee6 	bl	8001b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8000dca:	2066      	movs	r0, #102	; 0x66
 8000dcc:	f000 fefd 	bl	8001bca <HAL_NVIC_EnableIRQ>

}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	58024400 	.word	0x58024400

08000ddc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
 8000df0:	615a      	str	r2, [r3, #20]
 8000df2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000df4:	4b20      	ldr	r3, [pc, #128]	; (8000e78 <MX_FMC_Init+0x9c>)
 8000df6:	4a21      	ldr	r2, [pc, #132]	; (8000e7c <MX_FMC_Init+0xa0>)
 8000df8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000dfa:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <MX_FMC_Init+0x9c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000e00:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <MX_FMC_Init+0x9c>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000e06:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <MX_FMC_Init+0x9c>)
 8000e08:	2208      	movs	r2, #8
 8000e0a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <MX_FMC_Init+0x9c>)
 8000e0e:	2210      	movs	r2, #16
 8000e10:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e12:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <MX_FMC_Init+0x9c>)
 8000e14:	2240      	movs	r2, #64	; 0x40
 8000e16:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <MX_FMC_Init+0x9c>)
 8000e1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e1e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <MX_FMC_Init+0x9c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <MX_FMC_Init+0x9c>)
 8000e28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e2c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000e2e:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <MX_FMC_Init+0x9c>)
 8000e30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e34:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <MX_FMC_Init+0x9c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 1;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 5;
 8000e40:	2305      	movs	r3, #5
 8000e42:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000e44:	2304      	movs	r3, #4
 8000e46:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 5;
 8000e48:	2305      	movs	r3, #5
 8000e4a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000e50:	2302      	movs	r3, #2
 8000e52:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4806      	ldr	r0, [pc, #24]	; (8000e78 <MX_FMC_Init+0x9c>)
 8000e5e:	f007 ff99 	bl	8008d94 <HAL_SDRAM_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000e68:	f000 f962 	bl	8001130 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  SDRAM_Init();
 8000e6c:	f000 f8d2 	bl	8001014 <SDRAM_Init>
  /* USER CODE END FMC_Init 2 */
}
 8000e70:	bf00      	nop
 8000e72:	3720      	adds	r7, #32
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	240001c8 	.word	0x240001c8
 8000e7c:	52004140 	.word	0x52004140

08000e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08e      	sub	sp, #56	; 0x38
 8000e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e96:	4b5b      	ldr	r3, [pc, #364]	; (8001004 <MX_GPIO_Init+0x184>)
 8000e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9c:	4a59      	ldr	r2, [pc, #356]	; (8001004 <MX_GPIO_Init+0x184>)
 8000e9e:	f043 0320 	orr.w	r3, r3, #32
 8000ea2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea6:	4b57      	ldr	r3, [pc, #348]	; (8001004 <MX_GPIO_Init+0x184>)
 8000ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eac:	f003 0320 	and.w	r3, r3, #32
 8000eb0:	623b      	str	r3, [r7, #32]
 8000eb2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eb4:	4b53      	ldr	r3, [pc, #332]	; (8001004 <MX_GPIO_Init+0x184>)
 8000eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eba:	4a52      	ldr	r2, [pc, #328]	; (8001004 <MX_GPIO_Init+0x184>)
 8000ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec4:	4b4f      	ldr	r3, [pc, #316]	; (8001004 <MX_GPIO_Init+0x184>)
 8000ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ece:	61fb      	str	r3, [r7, #28]
 8000ed0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed2:	4b4c      	ldr	r3, [pc, #304]	; (8001004 <MX_GPIO_Init+0x184>)
 8000ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed8:	4a4a      	ldr	r2, [pc, #296]	; (8001004 <MX_GPIO_Init+0x184>)
 8000eda:	f043 0304 	orr.w	r3, r3, #4
 8000ede:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee2:	4b48      	ldr	r3, [pc, #288]	; (8001004 <MX_GPIO_Init+0x184>)
 8000ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee8:	f003 0304 	and.w	r3, r3, #4
 8000eec:	61bb      	str	r3, [r7, #24]
 8000eee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef0:	4b44      	ldr	r3, [pc, #272]	; (8001004 <MX_GPIO_Init+0x184>)
 8000ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef6:	4a43      	ldr	r2, [pc, #268]	; (8001004 <MX_GPIO_Init+0x184>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f00:	4b40      	ldr	r3, [pc, #256]	; (8001004 <MX_GPIO_Init+0x184>)
 8000f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f0e:	4b3d      	ldr	r3, [pc, #244]	; (8001004 <MX_GPIO_Init+0x184>)
 8000f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f14:	4a3b      	ldr	r2, [pc, #236]	; (8001004 <MX_GPIO_Init+0x184>)
 8000f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f1e:	4b39      	ldr	r3, [pc, #228]	; (8001004 <MX_GPIO_Init+0x184>)
 8000f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f2c:	4b35      	ldr	r3, [pc, #212]	; (8001004 <MX_GPIO_Init+0x184>)
 8000f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f32:	4a34      	ldr	r2, [pc, #208]	; (8001004 <MX_GPIO_Init+0x184>)
 8000f34:	f043 0310 	orr.w	r3, r3, #16
 8000f38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f3c:	4b31      	ldr	r3, [pc, #196]	; (8001004 <MX_GPIO_Init+0x184>)
 8000f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f42:	f003 0310 	and.w	r3, r3, #16
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4a:	4b2e      	ldr	r3, [pc, #184]	; (8001004 <MX_GPIO_Init+0x184>)
 8000f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f50:	4a2c      	ldr	r2, [pc, #176]	; (8001004 <MX_GPIO_Init+0x184>)
 8000f52:	f043 0308 	orr.w	r3, r3, #8
 8000f56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f5a:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <MX_GPIO_Init+0x184>)
 8000f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f60:	f003 0308 	and.w	r3, r3, #8
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f68:	4b26      	ldr	r3, [pc, #152]	; (8001004 <MX_GPIO_Init+0x184>)
 8000f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6e:	4a25      	ldr	r2, [pc, #148]	; (8001004 <MX_GPIO_Init+0x184>)
 8000f70:	f043 0302 	orr.w	r3, r3, #2
 8000f74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f78:	4b22      	ldr	r3, [pc, #136]	; (8001004 <MX_GPIO_Init+0x184>)
 8000f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS4270_NRESET_GPIO_Port, CS4270_NRESET_Pin, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2110      	movs	r1, #16
 8000f8a:	481f      	ldr	r0, [pc, #124]	; (8001008 <MX_GPIO_Init+0x188>)
 8000f8c:	f003 f8c0 	bl	8004110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DBG_PAD1_GPIO_Port, DBG_PAD1_Pin, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f96:	481d      	ldr	r0, [pc, #116]	; (800100c <MX_GPIO_Init+0x18c>)
 8000f98:	f003 f8ba 	bl	8004110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TCA9548A_NRESET_GPIO_Port, TCA9548A_NRESET_Pin, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2120      	movs	r1, #32
 8000fa0:	481b      	ldr	r0, [pc, #108]	; (8001010 <MX_GPIO_Init+0x190>)
 8000fa2:	f003 f8b5 	bl	8004110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS4270_NRESET_Pin */
  GPIO_InitStruct.Pin = CS4270_NRESET_Pin;
 8000fa6:	2310      	movs	r3, #16
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS4270_NRESET_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4812      	ldr	r0, [pc, #72]	; (8001008 <MX_GPIO_Init+0x188>)
 8000fbe:	f002 fef7 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DBG_PAD1_Pin */
  GPIO_InitStruct.Pin = DBG_PAD1_Pin;
 8000fc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DBG_PAD1_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd8:	4619      	mov	r1, r3
 8000fda:	480c      	ldr	r0, [pc, #48]	; (800100c <MX_GPIO_Init+0x18c>)
 8000fdc:	f002 fee8 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TCA9548A_NRESET_Pin */
  GPIO_InitStruct.Pin = TCA9548A_NRESET_Pin;
 8000fe0:	2320      	movs	r3, #32
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TCA9548A_NRESET_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4806      	ldr	r0, [pc, #24]	; (8001010 <MX_GPIO_Init+0x190>)
 8000ff8:	f002 feda 	bl	8003db0 <HAL_GPIO_Init>

}
 8000ffc:	bf00      	nop
 8000ffe:	3738      	adds	r7, #56	; 0x38
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	58024400 	.word	0x58024400
 8001008:	58020c00 	.word	0x58020c00
 800100c:	58021800 	.word	0x58021800
 8001010:	58020400 	.word	0x58020400

08001014 <SDRAM_Init>:

/* USER CODE BEGIN 4 */

static void SDRAM_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
	FMC_SDRAM_CommandTypeDef cmd = {0};
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
	HAL_StatusTypeDef status = HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	75fb      	strb	r3, [r7, #23]

	/* Send clock configuration enable command */
	cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800102a:	2310      	movs	r3, #16
 800102c:	60bb      	str	r3, [r7, #8]
	cmd.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800102e:	2301      	movs	r3, #1
 8001030:	607b      	str	r3, [r7, #4]
	cmd.AutoRefreshNumber = 1;
 8001032:	2301      	movs	r3, #1
 8001034:	60fb      	str	r3, [r7, #12]
	cmd.ModeRegisterDefinition = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
	status = HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0xFFFF); // TODO magic number
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001040:	4619      	mov	r1, r3
 8001042:	4830      	ldr	r0, [pc, #192]	; (8001104 <SDRAM_Init+0xf0>)
 8001044:	f007 fee2 	bl	8008e0c <HAL_SDRAM_SendCommand>
 8001048:	4603      	mov	r3, r0
 800104a:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 800104c:	7dfb      	ldrb	r3, [r7, #23]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SDRAM_Init+0x42>
		Error_Handler();
 8001052:	f000 f86d 	bl	8001130 <Error_Handler>
	}

	/* Wait for at least 100us */
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f000 fc92 	bl	8001980 <HAL_Delay>

	/* Send Precharge All command */
	cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800105c:	2310      	movs	r3, #16
 800105e:	60bb      	str	r3, [r7, #8]
	cmd.CommandMode = FMC_SDRAM_CMD_PALL;
 8001060:	2302      	movs	r3, #2
 8001062:	607b      	str	r3, [r7, #4]
	cmd.AutoRefreshNumber = 1;
 8001064:	2301      	movs	r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
	cmd.ModeRegisterDefinition = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	613b      	str	r3, [r7, #16]
	status = HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0xFFFF); // TODO magic number
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001072:	4619      	mov	r1, r3
 8001074:	4823      	ldr	r0, [pc, #140]	; (8001104 <SDRAM_Init+0xf0>)
 8001076:	f007 fec9 	bl	8008e0c <HAL_SDRAM_SendCommand>
 800107a:	4603      	mov	r3, r0
 800107c:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 800107e:	7dfb      	ldrb	r3, [r7, #23]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SDRAM_Init+0x74>
		Error_Handler();
 8001084:	f000 f854 	bl	8001130 <Error_Handler>
	}

	/* Send Auto Refresh command 8 times */
	cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001088:	2310      	movs	r3, #16
 800108a:	60bb      	str	r3, [r7, #8]
	cmd.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800108c:	2303      	movs	r3, #3
 800108e:	607b      	str	r3, [r7, #4]
	cmd.AutoRefreshNumber = 8;
 8001090:	2308      	movs	r3, #8
 8001092:	60fb      	str	r3, [r7, #12]
	cmd.ModeRegisterDefinition = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
	status = HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0xFFFF); // TODO magic number
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800109e:	4619      	mov	r1, r3
 80010a0:	4818      	ldr	r0, [pc, #96]	; (8001104 <SDRAM_Init+0xf0>)
 80010a2:	f007 feb3 	bl	8008e0c <HAL_SDRAM_SendCommand>
 80010a6:	4603      	mov	r3, r0
 80010a8:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 80010aa:	7dfb      	ldrb	r3, [r7, #23]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SDRAM_Init+0xa0>
		Error_Handler();
 80010b0:	f000 f83e 	bl	8001130 <Error_Handler>
	}

	/* Program the external memory mode register */
	cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80010b4:	2310      	movs	r3, #16
 80010b6:	60bb      	str	r3, [r7, #8]
	cmd.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 80010b8:	2304      	movs	r3, #4
 80010ba:	607b      	str	r3, [r7, #4]
	cmd.AutoRefreshNumber = 1;
 80010bc:	2301      	movs	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
	cmd.ModeRegisterDefinition = (SDRAM_MODEREG_BURST_LENGTH_1 |
 80010c0:	f44f 7308 	mov.w	r3, #544	; 0x220
 80010c4:	613b      	str	r3, [r7, #16]
							 	 SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL |
								 SDRAM_MODEREG_CAS_LATENCY_2 |
								 SDRAM_MODEREG_OPERATING_MODE_STANDARD |
								 SDRAM_MODEREG_WRITEBURST_MODE_SINGLE);
	status = HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0xFFFF); // TODO magic number
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010cc:	4619      	mov	r1, r3
 80010ce:	480d      	ldr	r0, [pc, #52]	; (8001104 <SDRAM_Init+0xf0>)
 80010d0:	f007 fe9c 	bl	8008e0c <HAL_SDRAM_SendCommand>
 80010d4:	4603      	mov	r3, r0
 80010d6:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 80010d8:	7dfb      	ldrb	r3, [r7, #23]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SDRAM_Init+0xce>
		Error_Handler();
 80010de:	f000 f827 	bl	8001130 <Error_Handler>

	/* Set the rate refresh counter:
	 * refresh_rate = (FMC_freq * (full_refresh_time / refresh_cycles)) - 20
	 * refresh_rate = (72MHz * (64ms/8192)) - 20 = (72MHz * 7.8125us) - 20 = 542
	 *  */
	status = HAL_SDRAM_ProgramRefreshRate(&hsdram1, 542);
 80010e2:	f240 211e 	movw	r1, #542	; 0x21e
 80010e6:	4807      	ldr	r0, [pc, #28]	; (8001104 <SDRAM_Init+0xf0>)
 80010e8:	f007 fec5 	bl	8008e76 <HAL_SDRAM_ProgramRefreshRate>
 80010ec:	4603      	mov	r3, r0
 80010ee:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 80010f0:	7dfb      	ldrb	r3, [r7, #23]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SDRAM_Init+0xe6>
		Error_Handler();
 80010f6:	f000 f81b 	bl	8001130 <Error_Handler>
	}
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	240001c8 	.word	0x240001c8

08001108 <HAL_I2S_TxHalfCpltCallback>:

// TODO this shouldn't be here
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
//    logger_log("half sent");
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
//	logger_log("full sent");
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001134:	b672      	cpsid	i
}
 8001136:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001138:	e7fe      	b.n	8001138 <Error_Handler+0x8>
	...

0800113c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_MspInit+0x30>)
 8001144:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001148:	4a08      	ldr	r2, [pc, #32]	; (800116c <HAL_MspInit+0x30>)
 800114a:	f043 0302 	orr.w	r3, r3, #2
 800114e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_MspInit+0x30>)
 8001154:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	58024400 	.word	0x58024400

08001170 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b0ba      	sub	sp, #232	; 0xe8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	22c0      	movs	r2, #192	; 0xc0
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f008 f8c3 	bl	800931c <memset>
  if(hi2c->Instance==I2C1)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a27      	ldr	r2, [pc, #156]	; (8001238 <HAL_I2C_MspInit+0xc8>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d146      	bne.n	800122e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011a0:	f04f 0208 	mov.w	r2, #8
 80011a4:	f04f 0300 	mov.w	r3, #0
 80011a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_CSI;
 80011ac:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	4618      	mov	r0, r3
 80011ba:	f005 f8f3 	bl	80063a4 <HAL_RCCEx_PeriphCLKConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 80011c4:	f7ff ffb4 	bl	8001130 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c8:	4b1c      	ldr	r3, [pc, #112]	; (800123c <HAL_I2C_MspInit+0xcc>)
 80011ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ce:	4a1b      	ldr	r2, [pc, #108]	; (800123c <HAL_I2C_MspInit+0xcc>)
 80011d0:	f043 0302 	orr.w	r3, r3, #2
 80011d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011d8:	4b18      	ldr	r3, [pc, #96]	; (800123c <HAL_I2C_MspInit+0xcc>)
 80011da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011e6:	23c0      	movs	r3, #192	; 0xc0
 80011e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ec:	2312      	movs	r3, #18
 80011ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011fe:	2304      	movs	r3, #4
 8001200:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001204:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001208:	4619      	mov	r1, r3
 800120a:	480d      	ldr	r0, [pc, #52]	; (8001240 <HAL_I2C_MspInit+0xd0>)
 800120c:	f002 fdd0 	bl	8003db0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <HAL_I2C_MspInit+0xcc>)
 8001212:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001216:	4a09      	ldr	r2, [pc, #36]	; (800123c <HAL_I2C_MspInit+0xcc>)
 8001218:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800121c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_I2C_MspInit+0xcc>)
 8001222:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001226:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800122e:	bf00      	nop
 8001230:	37e8      	adds	r7, #232	; 0xe8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40005400 	.word	0x40005400
 800123c:	58024400 	.word	0x58024400
 8001240:	58020400 	.word	0x58020400

08001244 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0be      	sub	sp, #248	; 0xf8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800125c:	f107 0320 	add.w	r3, r7, #32
 8001260:	22c0      	movs	r2, #192	; 0xc0
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f008 f859 	bl	800931c <memset>
  if(hi2s->Instance==SPI1)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a7e      	ldr	r2, [pc, #504]	; (8001468 <HAL_I2S_MspInit+0x224>)
 8001270:	4293      	cmp	r3, r2
 8001272:	f040 80f5 	bne.w	8001460 <HAL_I2S_MspInit+0x21c>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001276:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800127a:	f04f 0300 	mov.w	r3, #0
 800127e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001282:	2301      	movs	r3, #1
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8001286:	2310      	movs	r3, #16
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 800128a:	2304      	movs	r3, #4
 800128c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800128e:	2302      	movs	r3, #2
 8001290:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001292:	2302      	movs	r3, #2
 8001294:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001296:	23c0      	movs	r3, #192	; 0xc0
 8001298:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800129a:	2300      	movs	r3, #0
 800129c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 800129e:	2300      	movs	r3, #0
 80012a0:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80012a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012aa:	f107 0320 	add.w	r3, r7, #32
 80012ae:	4618      	mov	r0, r3
 80012b0:	f005 f878 	bl	80063a4 <HAL_RCCEx_PeriphCLKConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_I2S_MspInit+0x7a>
    {
      Error_Handler();
 80012ba:	f7ff ff39 	bl	8001130 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012be:	4b6b      	ldr	r3, [pc, #428]	; (800146c <HAL_I2S_MspInit+0x228>)
 80012c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012c4:	4a69      	ldr	r2, [pc, #420]	; (800146c <HAL_I2S_MspInit+0x228>)
 80012c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80012ce:	4b67      	ldr	r3, [pc, #412]	; (800146c <HAL_I2S_MspInit+0x228>)
 80012d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012d8:	61fb      	str	r3, [r7, #28]
 80012da:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012dc:	4b63      	ldr	r3, [pc, #396]	; (800146c <HAL_I2S_MspInit+0x228>)
 80012de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e2:	4a62      	ldr	r2, [pc, #392]	; (800146c <HAL_I2S_MspInit+0x228>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ec:	4b5f      	ldr	r3, [pc, #380]	; (800146c <HAL_I2S_MspInit+0x228>)
 80012ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	61bb      	str	r3, [r7, #24]
 80012f8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fa:	4b5c      	ldr	r3, [pc, #368]	; (800146c <HAL_I2S_MspInit+0x228>)
 80012fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001300:	4a5a      	ldr	r2, [pc, #360]	; (800146c <HAL_I2S_MspInit+0x228>)
 8001302:	f043 0304 	orr.w	r3, r3, #4
 8001306:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800130a:	4b58      	ldr	r3, [pc, #352]	; (800146c <HAL_I2S_MspInit+0x228>)
 800130c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001318:	4b54      	ldr	r3, [pc, #336]	; (800146c <HAL_I2S_MspInit+0x228>)
 800131a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131e:	4a53      	ldr	r2, [pc, #332]	; (800146c <HAL_I2S_MspInit+0x228>)
 8001320:	f043 0308 	orr.w	r3, r3, #8
 8001324:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001328:	4b50      	ldr	r3, [pc, #320]	; (800146c <HAL_I2S_MspInit+0x228>)
 800132a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001336:	4b4d      	ldr	r3, [pc, #308]	; (800146c <HAL_I2S_MspInit+0x228>)
 8001338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133c:	4a4b      	ldr	r2, [pc, #300]	; (800146c <HAL_I2S_MspInit+0x228>)
 800133e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001342:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001346:	4b49      	ldr	r3, [pc, #292]	; (800146c <HAL_I2S_MspInit+0x228>)
 8001348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> I2S1_MCK
    PA15 (JTDI)     ------> I2S1_WS
    PD7     ------> I2S1_SDO
    PG9     ------> I2S1_SDI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 8001354:	f248 0320 	movw	r3, #32800	; 0x8020
 8001358:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800136e:	2305      	movs	r3, #5
 8001370:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001378:	4619      	mov	r1, r3
 800137a:	483d      	ldr	r0, [pc, #244]	; (8001470 <HAL_I2S_MspInit+0x22c>)
 800137c:	f002 fd18 	bl	8003db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001380:	2310      	movs	r3, #16
 8001382:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001398:	2305      	movs	r3, #5
 800139a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013a2:	4619      	mov	r1, r3
 80013a4:	4833      	ldr	r0, [pc, #204]	; (8001474 <HAL_I2S_MspInit+0x230>)
 80013a6:	f002 fd03 	bl	8003db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013c2:	2305      	movs	r3, #5
 80013c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013cc:	4619      	mov	r1, r3
 80013ce:	482a      	ldr	r0, [pc, #168]	; (8001478 <HAL_I2S_MspInit+0x234>)
 80013d0:	f002 fcee 	bl	8003db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013ee:	2305      	movs	r3, #5
 80013f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013f4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013f8:	4619      	mov	r1, r3
 80013fa:	4820      	ldr	r0, [pc, #128]	; (800147c <HAL_I2S_MspInit+0x238>)
 80013fc:	f002 fcd8 	bl	8003db0 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001400:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <HAL_I2S_MspInit+0x23c>)
 8001402:	4a20      	ldr	r2, [pc, #128]	; (8001484 <HAL_I2S_MspInit+0x240>)
 8001404:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001406:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <HAL_I2S_MspInit+0x23c>)
 8001408:	2226      	movs	r2, #38	; 0x26
 800140a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800140c:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <HAL_I2S_MspInit+0x23c>)
 800140e:	2240      	movs	r2, #64	; 0x40
 8001410:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001412:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <HAL_I2S_MspInit+0x23c>)
 8001414:	2200      	movs	r2, #0
 8001416:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_I2S_MspInit+0x23c>)
 800141a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800141e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001420:	4b17      	ldr	r3, [pc, #92]	; (8001480 <HAL_I2S_MspInit+0x23c>)
 8001422:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001426:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001428:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_I2S_MspInit+0x23c>)
 800142a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800142e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <HAL_I2S_MspInit+0x23c>)
 8001432:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001436:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <HAL_I2S_MspInit+0x23c>)
 800143a:	2200      	movs	r2, #0
 800143c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <HAL_I2S_MspInit+0x23c>)
 8001440:	2200      	movs	r2, #0
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001444:	480e      	ldr	r0, [pc, #56]	; (8001480 <HAL_I2S_MspInit+0x23c>)
 8001446:	f000 fbdb 	bl	8001c00 <HAL_DMA_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <HAL_I2S_MspInit+0x210>
    {
      Error_Handler();
 8001450:	f7ff fe6e 	bl	8001130 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <HAL_I2S_MspInit+0x23c>)
 8001458:	645a      	str	r2, [r3, #68]	; 0x44
 800145a:	4a09      	ldr	r2, [pc, #36]	; (8001480 <HAL_I2S_MspInit+0x23c>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001460:	bf00      	nop
 8001462:	37f8      	adds	r7, #248	; 0xf8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40013000 	.word	0x40013000
 800146c:	58024400 	.word	0x58024400
 8001470:	58020000 	.word	0x58020000
 8001474:	58020800 	.word	0x58020800
 8001478:	58020c00 	.word	0x58020c00
 800147c:	58021800 	.word	0x58021800
 8001480:	24000150 	.word	0x24000150
 8001484:	40020010 	.word	0x40020010

08001488 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001488:	b580      	push	{r7, lr}
 800148a:	b0b8      	sub	sp, #224	; 0xe0
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800148e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800149e:	4b51      	ldr	r3, [pc, #324]	; (80015e4 <HAL_FMC_MspInit+0x15c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f040 8099 	bne.w	80015da <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 80014a8:	4b4e      	ldr	r3, [pc, #312]	; (80015e4 <HAL_FMC_MspInit+0x15c>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014ae:	f107 0308 	add.w	r3, r7, #8
 80014b2:	22c0      	movs	r2, #192	; 0xc0
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f007 ff30 	bl	800931c <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80014bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80014c8:	2300      	movs	r3, #0
 80014ca:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014cc:	f107 0308 	add.w	r3, r7, #8
 80014d0:	4618      	mov	r0, r3
 80014d2:	f004 ff67 	bl	80063a4 <HAL_RCCEx_PeriphCLKConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80014dc:	f7ff fe28 	bl	8001130 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80014e0:	4b41      	ldr	r3, [pc, #260]	; (80015e8 <HAL_FMC_MspInit+0x160>)
 80014e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80014e6:	4a40      	ldr	r2, [pc, #256]	; (80015e8 <HAL_FMC_MspInit+0x160>)
 80014e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014ec:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80014f0:	4b3d      	ldr	r3, [pc, #244]	; (80015e8 <HAL_FMC_MspInit+0x160>)
 80014f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80014f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80014fe:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001502:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001512:	2303      	movs	r3, #3
 8001514:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001518:	230c      	movs	r3, #12
 800151a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800151e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001522:	4619      	mov	r1, r3
 8001524:	4831      	ldr	r0, [pc, #196]	; (80015ec <HAL_FMC_MspInit+0x164>)
 8001526:	f002 fc43 	bl	8003db0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800152a:	230d      	movs	r3, #13
 800152c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001542:	230c      	movs	r3, #12
 8001544:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001548:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800154c:	4619      	mov	r1, r3
 800154e:	4828      	ldr	r0, [pc, #160]	; (80015f0 <HAL_FMC_MspInit+0x168>)
 8001550:	f002 fc2e 	bl	8003db0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8001554:	f248 1337 	movw	r3, #33079	; 0x8137
 8001558:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001568:	2303      	movs	r3, #3
 800156a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800156e:	230c      	movs	r3, #12
 8001570:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001574:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001578:	4619      	mov	r1, r3
 800157a:	481e      	ldr	r0, [pc, #120]	; (80015f4 <HAL_FMC_MspInit+0x16c>)
 800157c:	f002 fc18 	bl	8003db0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001580:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001584:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800159a:	230c      	movs	r3, #12
 800159c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015a4:	4619      	mov	r1, r3
 80015a6:	4814      	ldr	r0, [pc, #80]	; (80015f8 <HAL_FMC_MspInit+0x170>)
 80015a8:	f002 fc02 	bl	8003db0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80015ac:	f24c 7303 	movw	r3, #50947	; 0xc703
 80015b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015c6:	230c      	movs	r3, #12
 80015c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015d0:	4619      	mov	r1, r3
 80015d2:	480a      	ldr	r0, [pc, #40]	; (80015fc <HAL_FMC_MspInit+0x174>)
 80015d4:	f002 fbec 	bl	8003db0 <HAL_GPIO_Init>
 80015d8:	e000      	b.n	80015dc <HAL_FMC_MspInit+0x154>
    return;
 80015da:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80015dc:	37e0      	adds	r7, #224	; 0xe0
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	240001fc 	.word	0x240001fc
 80015e8:	58024400 	.word	0x58024400
 80015ec:	58021400 	.word	0x58021400
 80015f0:	58020800 	.word	0x58020800
 80015f4:	58021800 	.word	0x58021800
 80015f8:	58021000 	.word	0x58021000
 80015fc:	58020c00 	.word	0x58020c00

08001600 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001608:	f7ff ff3e 	bl	8001488 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <NMI_Handler+0x4>

0800161a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161e:	e7fe      	b.n	800161e <HardFault_Handler+0x4>

08001620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <MemManage_Handler+0x4>

08001626 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162a:	e7fe      	b.n	800162a <BusFault_Handler+0x4>

0800162c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <UsageFault_Handler+0x4>

08001632 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001660:	f000 f96e 	bl	8001940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}

08001668 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <DMA1_Stream0_IRQHandler+0x10>)
 800166e:	f001 f88d 	bl	800278c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	24000150 	.word	0x24000150

0800167c <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX1_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001694:	4a14      	ldr	r2, [pc, #80]	; (80016e8 <_sbrk+0x5c>)
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <_sbrk+0x60>)
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016a0:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <_sbrk+0x64>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d102      	bne.n	80016ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <_sbrk+0x64>)
 80016aa:	4a12      	ldr	r2, [pc, #72]	; (80016f4 <_sbrk+0x68>)
 80016ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <_sbrk+0x64>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d207      	bcs.n	80016cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016bc:	f007 fddc 	bl	8009278 <__errno>
 80016c0:	4603      	mov	r3, r0
 80016c2:	220c      	movs	r2, #12
 80016c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ca:	e009      	b.n	80016e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <_sbrk+0x64>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016d2:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <_sbrk+0x64>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	4a05      	ldr	r2, [pc, #20]	; (80016f0 <_sbrk+0x64>)
 80016dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016de:	68fb      	ldr	r3, [r7, #12]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	24080000 	.word	0x24080000
 80016ec:	00000400 	.word	0x00000400
 80016f0:	24000200 	.word	0x24000200
 80016f4:	24000218 	.word	0x24000218

080016f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016fc:	4b37      	ldr	r3, [pc, #220]	; (80017dc <SystemInit+0xe4>)
 80016fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001702:	4a36      	ldr	r2, [pc, #216]	; (80017dc <SystemInit+0xe4>)
 8001704:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001708:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800170c:	4b34      	ldr	r3, [pc, #208]	; (80017e0 <SystemInit+0xe8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 030f 	and.w	r3, r3, #15
 8001714:	2b06      	cmp	r3, #6
 8001716:	d807      	bhi.n	8001728 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001718:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <SystemInit+0xe8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f023 030f 	bic.w	r3, r3, #15
 8001720:	4a2f      	ldr	r2, [pc, #188]	; (80017e0 <SystemInit+0xe8>)
 8001722:	f043 0307 	orr.w	r3, r3, #7
 8001726:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001728:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <SystemInit+0xec>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a2d      	ldr	r2, [pc, #180]	; (80017e4 <SystemInit+0xec>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001734:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <SystemInit+0xec>)
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800173a:	4b2a      	ldr	r3, [pc, #168]	; (80017e4 <SystemInit+0xec>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4929      	ldr	r1, [pc, #164]	; (80017e4 <SystemInit+0xec>)
 8001740:	4b29      	ldr	r3, [pc, #164]	; (80017e8 <SystemInit+0xf0>)
 8001742:	4013      	ands	r3, r2
 8001744:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001746:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <SystemInit+0xe8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d007      	beq.n	8001762 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001752:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <SystemInit+0xe8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f023 030f 	bic.w	r3, r3, #15
 800175a:	4a21      	ldr	r2, [pc, #132]	; (80017e0 <SystemInit+0xe8>)
 800175c:	f043 0307 	orr.w	r3, r3, #7
 8001760:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001762:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <SystemInit+0xec>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001768:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <SystemInit+0xec>)
 800176a:	2200      	movs	r2, #0
 800176c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800176e:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <SystemInit+0xec>)
 8001770:	2200      	movs	r2, #0
 8001772:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <SystemInit+0xec>)
 8001776:	4a1d      	ldr	r2, [pc, #116]	; (80017ec <SystemInit+0xf4>)
 8001778:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800177a:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <SystemInit+0xec>)
 800177c:	4a1c      	ldr	r2, [pc, #112]	; (80017f0 <SystemInit+0xf8>)
 800177e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001780:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <SystemInit+0xec>)
 8001782:	4a1c      	ldr	r2, [pc, #112]	; (80017f4 <SystemInit+0xfc>)
 8001784:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001786:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <SystemInit+0xec>)
 8001788:	2200      	movs	r2, #0
 800178a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800178c:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <SystemInit+0xec>)
 800178e:	4a19      	ldr	r2, [pc, #100]	; (80017f4 <SystemInit+0xfc>)
 8001790:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <SystemInit+0xec>)
 8001794:	2200      	movs	r2, #0
 8001796:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <SystemInit+0xec>)
 800179a:	4a16      	ldr	r2, [pc, #88]	; (80017f4 <SystemInit+0xfc>)
 800179c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <SystemInit+0xec>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <SystemInit+0xec>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0e      	ldr	r2, [pc, #56]	; (80017e4 <SystemInit+0xec>)
 80017aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <SystemInit+0xec>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <SystemInit+0x100>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	4b10      	ldr	r3, [pc, #64]	; (80017fc <SystemInit+0x104>)
 80017bc:	4013      	ands	r3, r2
 80017be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017c2:	d202      	bcs.n	80017ca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80017c4:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <SystemInit+0x108>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <SystemInit+0x10c>)
 80017cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80017d0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000ed00 	.word	0xe000ed00
 80017e0:	52002000 	.word	0x52002000
 80017e4:	58024400 	.word	0x58024400
 80017e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80017ec:	02020200 	.word	0x02020200
 80017f0:	01ff0000 	.word	0x01ff0000
 80017f4:	01010280 	.word	0x01010280
 80017f8:	5c001000 	.word	0x5c001000
 80017fc:	ffff0000 	.word	0xffff0000
 8001800:	51008108 	.word	0x51008108
 8001804:	52004000 	.word	0x52004000

08001808 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001808:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001840 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800180c:	f7ff ff74 	bl	80016f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001810:	480c      	ldr	r0, [pc, #48]	; (8001844 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001812:	490d      	ldr	r1, [pc, #52]	; (8001848 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001814:	4a0d      	ldr	r2, [pc, #52]	; (800184c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001818:	e002      	b.n	8001820 <LoopCopyDataInit>

0800181a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800181c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800181e:	3304      	adds	r3, #4

08001820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001824:	d3f9      	bcc.n	800181a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001826:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001828:	4c0a      	ldr	r4, [pc, #40]	; (8001854 <LoopFillZerobss+0x22>)
  movs r3, #0
 800182a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800182c:	e001      	b.n	8001832 <LoopFillZerobss>

0800182e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800182e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001830:	3204      	adds	r2, #4

08001832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001834:	d3fb      	bcc.n	800182e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001836:	f007 fd25 	bl	8009284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800183a:	f7ff f92d 	bl	8000a98 <main>
  bx  lr
 800183e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001840:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001844:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001848:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 800184c:	0800b0a8 	.word	0x0800b0a8
  ldr r2, =_sbss
 8001850:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8001854:	24000218 	.word	0x24000218

08001858 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001858:	e7fe      	b.n	8001858 <ADC3_IRQHandler>
	...

0800185c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001862:	2003      	movs	r0, #3
 8001864:	f000 f98c 	bl	8001b80 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001868:	f004 fbdc 	bl	8006024 <HAL_RCC_GetSysClockFreq>
 800186c:	4602      	mov	r2, r0
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <HAL_Init+0x68>)
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	0a1b      	lsrs	r3, r3, #8
 8001874:	f003 030f 	and.w	r3, r3, #15
 8001878:	4913      	ldr	r1, [pc, #76]	; (80018c8 <HAL_Init+0x6c>)
 800187a:	5ccb      	ldrb	r3, [r1, r3]
 800187c:	f003 031f 	and.w	r3, r3, #31
 8001880:	fa22 f303 	lsr.w	r3, r2, r3
 8001884:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001886:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <HAL_Init+0x68>)
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	4a0e      	ldr	r2, [pc, #56]	; (80018c8 <HAL_Init+0x6c>)
 8001890:	5cd3      	ldrb	r3, [r2, r3]
 8001892:	f003 031f 	and.w	r3, r3, #31
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	fa22 f303 	lsr.w	r3, r2, r3
 800189c:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <HAL_Init+0x70>)
 800189e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018a0:	4a0b      	ldr	r2, [pc, #44]	; (80018d0 <HAL_Init+0x74>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018a6:	200f      	movs	r0, #15
 80018a8:	f000 f814 	bl	80018d4 <HAL_InitTick>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e002      	b.n	80018bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018b6:	f7ff fc41 	bl	800113c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	58024400 	.word	0x58024400
 80018c8:	0800ae78 	.word	0x0800ae78
 80018cc:	2400000c 	.word	0x2400000c
 80018d0:	24000008 	.word	0x24000008

080018d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018dc:	4b15      	ldr	r3, [pc, #84]	; (8001934 <HAL_InitTick+0x60>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e021      	b.n	800192c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018e8:	4b13      	ldr	r3, [pc, #76]	; (8001938 <HAL_InitTick+0x64>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <HAL_InitTick+0x60>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	4619      	mov	r1, r3
 80018f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 f971 	bl	8001be6 <HAL_SYSTICK_Config>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e00e      	b.n	800192c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b0f      	cmp	r3, #15
 8001912:	d80a      	bhi.n	800192a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001914:	2200      	movs	r2, #0
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800191c:	f000 f93b 	bl	8001b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001920:	4a06      	ldr	r2, [pc, #24]	; (800193c <HAL_InitTick+0x68>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	e000      	b.n	800192c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	24000014 	.word	0x24000014
 8001938:	24000008 	.word	0x24000008
 800193c:	24000010 	.word	0x24000010

08001940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_IncTick+0x20>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_IncTick+0x24>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4413      	add	r3, r2
 8001950:	4a04      	ldr	r2, [pc, #16]	; (8001964 <HAL_IncTick+0x24>)
 8001952:	6013      	str	r3, [r2, #0]
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	24000014 	.word	0x24000014
 8001964:	24000204 	.word	0x24000204

08001968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return uwTick;
 800196c:	4b03      	ldr	r3, [pc, #12]	; (800197c <HAL_GetTick+0x14>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	24000204 	.word	0x24000204

08001980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001988:	f7ff ffee 	bl	8001968 <HAL_GetTick>
 800198c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001998:	d005      	beq.n	80019a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <HAL_Delay+0x44>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4413      	add	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019a6:	bf00      	nop
 80019a8:	f7ff ffde 	bl	8001968 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d8f7      	bhi.n	80019a8 <HAL_Delay+0x28>
  {
  }
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	24000014 	.word	0x24000014

080019c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80019cc:	4b03      	ldr	r3, [pc, #12]	; (80019dc <HAL_GetREVID+0x14>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	0c1b      	lsrs	r3, r3, #16
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	5c001000 	.word	0x5c001000

080019e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <__NVIC_SetPriorityGrouping+0x40>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a0e:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <__NVIC_SetPriorityGrouping+0x40>)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	60d3      	str	r3, [r2, #12]
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00
 8001a24:	05fa0000 	.word	0x05fa0000

08001a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <__NVIC_GetPriorityGrouping+0x18>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	f003 0307 	and.w	r3, r3, #7
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	db0b      	blt.n	8001a6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a56:	88fb      	ldrh	r3, [r7, #6]
 8001a58:	f003 021f 	and.w	r2, r3, #31
 8001a5c:	4907      	ldr	r1, [pc, #28]	; (8001a7c <__NVIC_EnableIRQ+0x38>)
 8001a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	2001      	movs	r0, #1
 8001a66:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000e100 	.word	0xe000e100

08001a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	6039      	str	r1, [r7, #0]
 8001a8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	db0a      	blt.n	8001aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	490c      	ldr	r1, [pc, #48]	; (8001acc <__NVIC_SetPriority+0x4c>)
 8001a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a9e:	0112      	lsls	r2, r2, #4
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa8:	e00a      	b.n	8001ac0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4908      	ldr	r1, [pc, #32]	; (8001ad0 <__NVIC_SetPriority+0x50>)
 8001ab0:	88fb      	ldrh	r3, [r7, #6]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	3b04      	subs	r3, #4
 8001ab8:	0112      	lsls	r2, r2, #4
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	440b      	add	r3, r1
 8001abe:	761a      	strb	r2, [r3, #24]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000e100 	.word	0xe000e100
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f1c3 0307 	rsb	r3, r3, #7
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	bf28      	it	cs
 8001af2:	2304      	movcs	r3, #4
 8001af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3304      	adds	r3, #4
 8001afa:	2b06      	cmp	r3, #6
 8001afc:	d902      	bls.n	8001b04 <NVIC_EncodePriority+0x30>
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3b03      	subs	r3, #3
 8001b02:	e000      	b.n	8001b06 <NVIC_EncodePriority+0x32>
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43da      	mvns	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	401a      	ands	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	43d9      	mvns	r1, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	4313      	orrs	r3, r2
         );
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3724      	adds	r7, #36	; 0x24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b4c:	d301      	bcc.n	8001b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e00f      	b.n	8001b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b52:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <SysTick_Config+0x40>)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5a:	210f      	movs	r1, #15
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b60:	f7ff ff8e 	bl	8001a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <SysTick_Config+0x40>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6a:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <SysTick_Config+0x40>)
 8001b6c:	2207      	movs	r2, #7
 8001b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	e000e010 	.word	0xe000e010

08001b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff ff29 	bl	80019e0 <__NVIC_SetPriorityGrouping>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b086      	sub	sp, #24
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
 8001ba2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba4:	f7ff ff40 	bl	8001a28 <__NVIC_GetPriorityGrouping>
 8001ba8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	68b9      	ldr	r1, [r7, #8]
 8001bae:	6978      	ldr	r0, [r7, #20]
 8001bb0:	f7ff ff90 	bl	8001ad4 <NVIC_EncodePriority>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bba:	4611      	mov	r1, r2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff5f 	bl	8001a80 <__NVIC_SetPriority>
}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff33 	bl	8001a44 <__NVIC_EnableIRQ>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff ffa4 	bl	8001b3c <SysTick_Config>
 8001bf4:	4603      	mov	r3, r0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001c08:	f7ff feae 	bl	8001968 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e316      	b.n	8002246 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a66      	ldr	r2, [pc, #408]	; (8001db8 <HAL_DMA_Init+0x1b8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d04a      	beq.n	8001cb8 <HAL_DMA_Init+0xb8>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a65      	ldr	r2, [pc, #404]	; (8001dbc <HAL_DMA_Init+0x1bc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d045      	beq.n	8001cb8 <HAL_DMA_Init+0xb8>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a63      	ldr	r2, [pc, #396]	; (8001dc0 <HAL_DMA_Init+0x1c0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d040      	beq.n	8001cb8 <HAL_DMA_Init+0xb8>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a62      	ldr	r2, [pc, #392]	; (8001dc4 <HAL_DMA_Init+0x1c4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d03b      	beq.n	8001cb8 <HAL_DMA_Init+0xb8>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a60      	ldr	r2, [pc, #384]	; (8001dc8 <HAL_DMA_Init+0x1c8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d036      	beq.n	8001cb8 <HAL_DMA_Init+0xb8>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a5f      	ldr	r2, [pc, #380]	; (8001dcc <HAL_DMA_Init+0x1cc>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d031      	beq.n	8001cb8 <HAL_DMA_Init+0xb8>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a5d      	ldr	r2, [pc, #372]	; (8001dd0 <HAL_DMA_Init+0x1d0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d02c      	beq.n	8001cb8 <HAL_DMA_Init+0xb8>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a5c      	ldr	r2, [pc, #368]	; (8001dd4 <HAL_DMA_Init+0x1d4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d027      	beq.n	8001cb8 <HAL_DMA_Init+0xb8>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a5a      	ldr	r2, [pc, #360]	; (8001dd8 <HAL_DMA_Init+0x1d8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d022      	beq.n	8001cb8 <HAL_DMA_Init+0xb8>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a59      	ldr	r2, [pc, #356]	; (8001ddc <HAL_DMA_Init+0x1dc>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d01d      	beq.n	8001cb8 <HAL_DMA_Init+0xb8>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a57      	ldr	r2, [pc, #348]	; (8001de0 <HAL_DMA_Init+0x1e0>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d018      	beq.n	8001cb8 <HAL_DMA_Init+0xb8>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a56      	ldr	r2, [pc, #344]	; (8001de4 <HAL_DMA_Init+0x1e4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d013      	beq.n	8001cb8 <HAL_DMA_Init+0xb8>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a54      	ldr	r2, [pc, #336]	; (8001de8 <HAL_DMA_Init+0x1e8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d00e      	beq.n	8001cb8 <HAL_DMA_Init+0xb8>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a53      	ldr	r2, [pc, #332]	; (8001dec <HAL_DMA_Init+0x1ec>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d009      	beq.n	8001cb8 <HAL_DMA_Init+0xb8>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a51      	ldr	r2, [pc, #324]	; (8001df0 <HAL_DMA_Init+0x1f0>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d004      	beq.n	8001cb8 <HAL_DMA_Init+0xb8>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a50      	ldr	r2, [pc, #320]	; (8001df4 <HAL_DMA_Init+0x1f4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d101      	bne.n	8001cbc <HAL_DMA_Init+0xbc>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <HAL_DMA_Init+0xbe>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 813b 	beq.w	8001f3a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a37      	ldr	r2, [pc, #220]	; (8001db8 <HAL_DMA_Init+0x1b8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d04a      	beq.n	8001d74 <HAL_DMA_Init+0x174>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a36      	ldr	r2, [pc, #216]	; (8001dbc <HAL_DMA_Init+0x1bc>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d045      	beq.n	8001d74 <HAL_DMA_Init+0x174>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a34      	ldr	r2, [pc, #208]	; (8001dc0 <HAL_DMA_Init+0x1c0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d040      	beq.n	8001d74 <HAL_DMA_Init+0x174>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a33      	ldr	r2, [pc, #204]	; (8001dc4 <HAL_DMA_Init+0x1c4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d03b      	beq.n	8001d74 <HAL_DMA_Init+0x174>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a31      	ldr	r2, [pc, #196]	; (8001dc8 <HAL_DMA_Init+0x1c8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d036      	beq.n	8001d74 <HAL_DMA_Init+0x174>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a30      	ldr	r2, [pc, #192]	; (8001dcc <HAL_DMA_Init+0x1cc>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d031      	beq.n	8001d74 <HAL_DMA_Init+0x174>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a2e      	ldr	r2, [pc, #184]	; (8001dd0 <HAL_DMA_Init+0x1d0>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d02c      	beq.n	8001d74 <HAL_DMA_Init+0x174>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a2d      	ldr	r2, [pc, #180]	; (8001dd4 <HAL_DMA_Init+0x1d4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d027      	beq.n	8001d74 <HAL_DMA_Init+0x174>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a2b      	ldr	r2, [pc, #172]	; (8001dd8 <HAL_DMA_Init+0x1d8>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d022      	beq.n	8001d74 <HAL_DMA_Init+0x174>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a2a      	ldr	r2, [pc, #168]	; (8001ddc <HAL_DMA_Init+0x1dc>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d01d      	beq.n	8001d74 <HAL_DMA_Init+0x174>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a28      	ldr	r2, [pc, #160]	; (8001de0 <HAL_DMA_Init+0x1e0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d018      	beq.n	8001d74 <HAL_DMA_Init+0x174>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a27      	ldr	r2, [pc, #156]	; (8001de4 <HAL_DMA_Init+0x1e4>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d013      	beq.n	8001d74 <HAL_DMA_Init+0x174>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a25      	ldr	r2, [pc, #148]	; (8001de8 <HAL_DMA_Init+0x1e8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d00e      	beq.n	8001d74 <HAL_DMA_Init+0x174>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a24      	ldr	r2, [pc, #144]	; (8001dec <HAL_DMA_Init+0x1ec>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d009      	beq.n	8001d74 <HAL_DMA_Init+0x174>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a22      	ldr	r2, [pc, #136]	; (8001df0 <HAL_DMA_Init+0x1f0>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d004      	beq.n	8001d74 <HAL_DMA_Init+0x174>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a21      	ldr	r2, [pc, #132]	; (8001df4 <HAL_DMA_Init+0x1f4>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d108      	bne.n	8001d86 <HAL_DMA_Init+0x186>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0201 	bic.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	e007      	b.n	8001d96 <HAL_DMA_Init+0x196>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 0201 	bic.w	r2, r2, #1
 8001d94:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d96:	e02f      	b.n	8001df8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d98:	f7ff fde6 	bl	8001968 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b05      	cmp	r3, #5
 8001da4:	d928      	bls.n	8001df8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2220      	movs	r2, #32
 8001daa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2203      	movs	r2, #3
 8001db0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e246      	b.n	8002246 <HAL_DMA_Init+0x646>
 8001db8:	40020010 	.word	0x40020010
 8001dbc:	40020028 	.word	0x40020028
 8001dc0:	40020040 	.word	0x40020040
 8001dc4:	40020058 	.word	0x40020058
 8001dc8:	40020070 	.word	0x40020070
 8001dcc:	40020088 	.word	0x40020088
 8001dd0:	400200a0 	.word	0x400200a0
 8001dd4:	400200b8 	.word	0x400200b8
 8001dd8:	40020410 	.word	0x40020410
 8001ddc:	40020428 	.word	0x40020428
 8001de0:	40020440 	.word	0x40020440
 8001de4:	40020458 	.word	0x40020458
 8001de8:	40020470 	.word	0x40020470
 8001dec:	40020488 	.word	0x40020488
 8001df0:	400204a0 	.word	0x400204a0
 8001df4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1c8      	bne.n	8001d98 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	4b83      	ldr	r3, [pc, #524]	; (8002020 <HAL_DMA_Init+0x420>)
 8001e12:	4013      	ands	r3, r2
 8001e14:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001e1e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e2a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e36:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d107      	bne.n	8001e5c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	4313      	orrs	r3, r2
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001e5c:	4b71      	ldr	r3, [pc, #452]	; (8002024 <HAL_DMA_Init+0x424>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4b71      	ldr	r3, [pc, #452]	; (8002028 <HAL_DMA_Init+0x428>)
 8001e62:	4013      	ands	r3, r2
 8001e64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e68:	d328      	bcc.n	8001ebc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b28      	cmp	r3, #40	; 0x28
 8001e70:	d903      	bls.n	8001e7a <HAL_DMA_Init+0x27a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b2e      	cmp	r3, #46	; 0x2e
 8001e78:	d917      	bls.n	8001eaa <HAL_DMA_Init+0x2aa>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b3e      	cmp	r3, #62	; 0x3e
 8001e80:	d903      	bls.n	8001e8a <HAL_DMA_Init+0x28a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b42      	cmp	r3, #66	; 0x42
 8001e88:	d90f      	bls.n	8001eaa <HAL_DMA_Init+0x2aa>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b46      	cmp	r3, #70	; 0x46
 8001e90:	d903      	bls.n	8001e9a <HAL_DMA_Init+0x29a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b48      	cmp	r3, #72	; 0x48
 8001e98:	d907      	bls.n	8001eaa <HAL_DMA_Init+0x2aa>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b4e      	cmp	r3, #78	; 0x4e
 8001ea0:	d905      	bls.n	8001eae <HAL_DMA_Init+0x2ae>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b52      	cmp	r3, #82	; 0x52
 8001ea8:	d801      	bhi.n	8001eae <HAL_DMA_Init+0x2ae>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <HAL_DMA_Init+0x2b0>
 8001eae:	2300      	movs	r3, #0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001eba:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f023 0307 	bic.w	r3, r3, #7
 8001ed2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d117      	bne.n	8001f16 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00e      	beq.n	8001f16 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f001 fdcf 	bl	8003a9c <DMA_CheckFifoParam>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d008      	beq.n	8001f16 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2240      	movs	r2, #64	; 0x40
 8001f08:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e197      	b.n	8002246 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f001 fd0a 	bl	8003938 <DMA_CalcBaseAndBitshift>
 8001f24:	4603      	mov	r3, r0
 8001f26:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2c:	f003 031f 	and.w	r3, r3, #31
 8001f30:	223f      	movs	r2, #63	; 0x3f
 8001f32:	409a      	lsls	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	e0cd      	b.n	80020d6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a3b      	ldr	r2, [pc, #236]	; (800202c <HAL_DMA_Init+0x42c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d022      	beq.n	8001f8a <HAL_DMA_Init+0x38a>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a39      	ldr	r2, [pc, #228]	; (8002030 <HAL_DMA_Init+0x430>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d01d      	beq.n	8001f8a <HAL_DMA_Init+0x38a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a38      	ldr	r2, [pc, #224]	; (8002034 <HAL_DMA_Init+0x434>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d018      	beq.n	8001f8a <HAL_DMA_Init+0x38a>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a36      	ldr	r2, [pc, #216]	; (8002038 <HAL_DMA_Init+0x438>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d013      	beq.n	8001f8a <HAL_DMA_Init+0x38a>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a35      	ldr	r2, [pc, #212]	; (800203c <HAL_DMA_Init+0x43c>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d00e      	beq.n	8001f8a <HAL_DMA_Init+0x38a>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a33      	ldr	r2, [pc, #204]	; (8002040 <HAL_DMA_Init+0x440>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d009      	beq.n	8001f8a <HAL_DMA_Init+0x38a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a32      	ldr	r2, [pc, #200]	; (8002044 <HAL_DMA_Init+0x444>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d004      	beq.n	8001f8a <HAL_DMA_Init+0x38a>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a30      	ldr	r2, [pc, #192]	; (8002048 <HAL_DMA_Init+0x448>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d101      	bne.n	8001f8e <HAL_DMA_Init+0x38e>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <HAL_DMA_Init+0x390>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 8097 	beq.w	80020c4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a24      	ldr	r2, [pc, #144]	; (800202c <HAL_DMA_Init+0x42c>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d021      	beq.n	8001fe4 <HAL_DMA_Init+0x3e4>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a22      	ldr	r2, [pc, #136]	; (8002030 <HAL_DMA_Init+0x430>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d01c      	beq.n	8001fe4 <HAL_DMA_Init+0x3e4>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a21      	ldr	r2, [pc, #132]	; (8002034 <HAL_DMA_Init+0x434>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d017      	beq.n	8001fe4 <HAL_DMA_Init+0x3e4>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a1f      	ldr	r2, [pc, #124]	; (8002038 <HAL_DMA_Init+0x438>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d012      	beq.n	8001fe4 <HAL_DMA_Init+0x3e4>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a1e      	ldr	r2, [pc, #120]	; (800203c <HAL_DMA_Init+0x43c>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d00d      	beq.n	8001fe4 <HAL_DMA_Init+0x3e4>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a1c      	ldr	r2, [pc, #112]	; (8002040 <HAL_DMA_Init+0x440>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d008      	beq.n	8001fe4 <HAL_DMA_Init+0x3e4>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a1b      	ldr	r2, [pc, #108]	; (8002044 <HAL_DMA_Init+0x444>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d003      	beq.n	8001fe4 <HAL_DMA_Init+0x3e4>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a19      	ldr	r2, [pc, #100]	; (8002048 <HAL_DMA_Init+0x448>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2202      	movs	r2, #2
 8001fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_DMA_Init+0x44c>)
 8002002:	4013      	ands	r3, r2
 8002004:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b40      	cmp	r3, #64	; 0x40
 800200c:	d020      	beq.n	8002050 <HAL_DMA_Init+0x450>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b80      	cmp	r3, #128	; 0x80
 8002014:	d102      	bne.n	800201c <HAL_DMA_Init+0x41c>
 8002016:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800201a:	e01a      	b.n	8002052 <HAL_DMA_Init+0x452>
 800201c:	2300      	movs	r3, #0
 800201e:	e018      	b.n	8002052 <HAL_DMA_Init+0x452>
 8002020:	fe10803f 	.word	0xfe10803f
 8002024:	5c001000 	.word	0x5c001000
 8002028:	ffff0000 	.word	0xffff0000
 800202c:	58025408 	.word	0x58025408
 8002030:	5802541c 	.word	0x5802541c
 8002034:	58025430 	.word	0x58025430
 8002038:	58025444 	.word	0x58025444
 800203c:	58025458 	.word	0x58025458
 8002040:	5802546c 	.word	0x5802546c
 8002044:	58025480 	.word	0x58025480
 8002048:	58025494 	.word	0x58025494
 800204c:	fffe000f 	.word	0xfffe000f
 8002050:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68d2      	ldr	r2, [r2, #12]
 8002056:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002058:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002060:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002068:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002070:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002078:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002080:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	4313      	orrs	r3, r2
 8002086:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	461a      	mov	r2, r3
 8002096:	4b6e      	ldr	r3, [pc, #440]	; (8002250 <HAL_DMA_Init+0x650>)
 8002098:	4413      	add	r3, r2
 800209a:	4a6e      	ldr	r2, [pc, #440]	; (8002254 <HAL_DMA_Init+0x654>)
 800209c:	fba2 2303 	umull	r2, r3, r2, r3
 80020a0:	091b      	lsrs	r3, r3, #4
 80020a2:	009a      	lsls	r2, r3, #2
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f001 fc45 	bl	8003938 <DMA_CalcBaseAndBitshift>
 80020ae:	4603      	mov	r3, r0
 80020b0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b6:	f003 031f 	and.w	r3, r3, #31
 80020ba:	2201      	movs	r2, #1
 80020bc:	409a      	lsls	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	e008      	b.n	80020d6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2240      	movs	r2, #64	; 0x40
 80020c8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2203      	movs	r2, #3
 80020ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e0b7      	b.n	8002246 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a5f      	ldr	r2, [pc, #380]	; (8002258 <HAL_DMA_Init+0x658>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d072      	beq.n	80021c6 <HAL_DMA_Init+0x5c6>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a5d      	ldr	r2, [pc, #372]	; (800225c <HAL_DMA_Init+0x65c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d06d      	beq.n	80021c6 <HAL_DMA_Init+0x5c6>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a5c      	ldr	r2, [pc, #368]	; (8002260 <HAL_DMA_Init+0x660>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d068      	beq.n	80021c6 <HAL_DMA_Init+0x5c6>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a5a      	ldr	r2, [pc, #360]	; (8002264 <HAL_DMA_Init+0x664>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d063      	beq.n	80021c6 <HAL_DMA_Init+0x5c6>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a59      	ldr	r2, [pc, #356]	; (8002268 <HAL_DMA_Init+0x668>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d05e      	beq.n	80021c6 <HAL_DMA_Init+0x5c6>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a57      	ldr	r2, [pc, #348]	; (800226c <HAL_DMA_Init+0x66c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d059      	beq.n	80021c6 <HAL_DMA_Init+0x5c6>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a56      	ldr	r2, [pc, #344]	; (8002270 <HAL_DMA_Init+0x670>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d054      	beq.n	80021c6 <HAL_DMA_Init+0x5c6>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a54      	ldr	r2, [pc, #336]	; (8002274 <HAL_DMA_Init+0x674>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d04f      	beq.n	80021c6 <HAL_DMA_Init+0x5c6>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a53      	ldr	r2, [pc, #332]	; (8002278 <HAL_DMA_Init+0x678>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d04a      	beq.n	80021c6 <HAL_DMA_Init+0x5c6>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a51      	ldr	r2, [pc, #324]	; (800227c <HAL_DMA_Init+0x67c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d045      	beq.n	80021c6 <HAL_DMA_Init+0x5c6>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a50      	ldr	r2, [pc, #320]	; (8002280 <HAL_DMA_Init+0x680>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d040      	beq.n	80021c6 <HAL_DMA_Init+0x5c6>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a4e      	ldr	r2, [pc, #312]	; (8002284 <HAL_DMA_Init+0x684>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d03b      	beq.n	80021c6 <HAL_DMA_Init+0x5c6>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a4d      	ldr	r2, [pc, #308]	; (8002288 <HAL_DMA_Init+0x688>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d036      	beq.n	80021c6 <HAL_DMA_Init+0x5c6>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a4b      	ldr	r2, [pc, #300]	; (800228c <HAL_DMA_Init+0x68c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d031      	beq.n	80021c6 <HAL_DMA_Init+0x5c6>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a4a      	ldr	r2, [pc, #296]	; (8002290 <HAL_DMA_Init+0x690>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d02c      	beq.n	80021c6 <HAL_DMA_Init+0x5c6>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a48      	ldr	r2, [pc, #288]	; (8002294 <HAL_DMA_Init+0x694>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d027      	beq.n	80021c6 <HAL_DMA_Init+0x5c6>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a47      	ldr	r2, [pc, #284]	; (8002298 <HAL_DMA_Init+0x698>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d022      	beq.n	80021c6 <HAL_DMA_Init+0x5c6>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a45      	ldr	r2, [pc, #276]	; (800229c <HAL_DMA_Init+0x69c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d01d      	beq.n	80021c6 <HAL_DMA_Init+0x5c6>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a44      	ldr	r2, [pc, #272]	; (80022a0 <HAL_DMA_Init+0x6a0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d018      	beq.n	80021c6 <HAL_DMA_Init+0x5c6>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a42      	ldr	r2, [pc, #264]	; (80022a4 <HAL_DMA_Init+0x6a4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d013      	beq.n	80021c6 <HAL_DMA_Init+0x5c6>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a41      	ldr	r2, [pc, #260]	; (80022a8 <HAL_DMA_Init+0x6a8>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d00e      	beq.n	80021c6 <HAL_DMA_Init+0x5c6>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a3f      	ldr	r2, [pc, #252]	; (80022ac <HAL_DMA_Init+0x6ac>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d009      	beq.n	80021c6 <HAL_DMA_Init+0x5c6>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a3e      	ldr	r2, [pc, #248]	; (80022b0 <HAL_DMA_Init+0x6b0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d004      	beq.n	80021c6 <HAL_DMA_Init+0x5c6>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a3c      	ldr	r2, [pc, #240]	; (80022b4 <HAL_DMA_Init+0x6b4>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d101      	bne.n	80021ca <HAL_DMA_Init+0x5ca>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <HAL_DMA_Init+0x5cc>
 80021ca:	2300      	movs	r3, #0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d032      	beq.n	8002236 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f001 fcdf 	bl	8003b94 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b80      	cmp	r3, #128	; 0x80
 80021dc:	d102      	bne.n	80021e4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80021f8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d010      	beq.n	8002224 <HAL_DMA_Init+0x624>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b08      	cmp	r3, #8
 8002208:	d80c      	bhi.n	8002224 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f001 fd5c 	bl	8003cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	e008      	b.n	8002236 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	a7fdabf8 	.word	0xa7fdabf8
 8002254:	cccccccd 	.word	0xcccccccd
 8002258:	40020010 	.word	0x40020010
 800225c:	40020028 	.word	0x40020028
 8002260:	40020040 	.word	0x40020040
 8002264:	40020058 	.word	0x40020058
 8002268:	40020070 	.word	0x40020070
 800226c:	40020088 	.word	0x40020088
 8002270:	400200a0 	.word	0x400200a0
 8002274:	400200b8 	.word	0x400200b8
 8002278:	40020410 	.word	0x40020410
 800227c:	40020428 	.word	0x40020428
 8002280:	40020440 	.word	0x40020440
 8002284:	40020458 	.word	0x40020458
 8002288:	40020470 	.word	0x40020470
 800228c:	40020488 	.word	0x40020488
 8002290:	400204a0 	.word	0x400204a0
 8002294:	400204b8 	.word	0x400204b8
 8002298:	58025408 	.word	0x58025408
 800229c:	5802541c 	.word	0x5802541c
 80022a0:	58025430 	.word	0x58025430
 80022a4:	58025444 	.word	0x58025444
 80022a8:	58025458 	.word	0x58025458
 80022ac:	5802546c 	.word	0x5802546c
 80022b0:	58025480 	.word	0x58025480
 80022b4:	58025494 	.word	0x58025494

080022b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e226      	b.n	8002722 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d101      	bne.n	80022e2 <HAL_DMA_Start_IT+0x2a>
 80022de:	2302      	movs	r3, #2
 80022e0:	e21f      	b.n	8002722 <HAL_DMA_Start_IT+0x46a>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	f040 820a 	bne.w	800270c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2202      	movs	r2, #2
 80022fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a68      	ldr	r2, [pc, #416]	; (80024ac <HAL_DMA_Start_IT+0x1f4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d04a      	beq.n	80023a6 <HAL_DMA_Start_IT+0xee>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a66      	ldr	r2, [pc, #408]	; (80024b0 <HAL_DMA_Start_IT+0x1f8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d045      	beq.n	80023a6 <HAL_DMA_Start_IT+0xee>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a65      	ldr	r2, [pc, #404]	; (80024b4 <HAL_DMA_Start_IT+0x1fc>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d040      	beq.n	80023a6 <HAL_DMA_Start_IT+0xee>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a63      	ldr	r2, [pc, #396]	; (80024b8 <HAL_DMA_Start_IT+0x200>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d03b      	beq.n	80023a6 <HAL_DMA_Start_IT+0xee>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a62      	ldr	r2, [pc, #392]	; (80024bc <HAL_DMA_Start_IT+0x204>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d036      	beq.n	80023a6 <HAL_DMA_Start_IT+0xee>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a60      	ldr	r2, [pc, #384]	; (80024c0 <HAL_DMA_Start_IT+0x208>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d031      	beq.n	80023a6 <HAL_DMA_Start_IT+0xee>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a5f      	ldr	r2, [pc, #380]	; (80024c4 <HAL_DMA_Start_IT+0x20c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d02c      	beq.n	80023a6 <HAL_DMA_Start_IT+0xee>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a5d      	ldr	r2, [pc, #372]	; (80024c8 <HAL_DMA_Start_IT+0x210>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d027      	beq.n	80023a6 <HAL_DMA_Start_IT+0xee>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a5c      	ldr	r2, [pc, #368]	; (80024cc <HAL_DMA_Start_IT+0x214>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d022      	beq.n	80023a6 <HAL_DMA_Start_IT+0xee>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a5a      	ldr	r2, [pc, #360]	; (80024d0 <HAL_DMA_Start_IT+0x218>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d01d      	beq.n	80023a6 <HAL_DMA_Start_IT+0xee>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a59      	ldr	r2, [pc, #356]	; (80024d4 <HAL_DMA_Start_IT+0x21c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d018      	beq.n	80023a6 <HAL_DMA_Start_IT+0xee>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a57      	ldr	r2, [pc, #348]	; (80024d8 <HAL_DMA_Start_IT+0x220>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d013      	beq.n	80023a6 <HAL_DMA_Start_IT+0xee>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a56      	ldr	r2, [pc, #344]	; (80024dc <HAL_DMA_Start_IT+0x224>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d00e      	beq.n	80023a6 <HAL_DMA_Start_IT+0xee>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a54      	ldr	r2, [pc, #336]	; (80024e0 <HAL_DMA_Start_IT+0x228>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d009      	beq.n	80023a6 <HAL_DMA_Start_IT+0xee>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a53      	ldr	r2, [pc, #332]	; (80024e4 <HAL_DMA_Start_IT+0x22c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d004      	beq.n	80023a6 <HAL_DMA_Start_IT+0xee>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a51      	ldr	r2, [pc, #324]	; (80024e8 <HAL_DMA_Start_IT+0x230>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d108      	bne.n	80023b8 <HAL_DMA_Start_IT+0x100>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0201 	bic.w	r2, r2, #1
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	e007      	b.n	80023c8 <HAL_DMA_Start_IT+0x110>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0201 	bic.w	r2, r2, #1
 80023c6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f001 f906 	bl	80035e0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a34      	ldr	r2, [pc, #208]	; (80024ac <HAL_DMA_Start_IT+0x1f4>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d04a      	beq.n	8002474 <HAL_DMA_Start_IT+0x1bc>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a33      	ldr	r2, [pc, #204]	; (80024b0 <HAL_DMA_Start_IT+0x1f8>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d045      	beq.n	8002474 <HAL_DMA_Start_IT+0x1bc>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a31      	ldr	r2, [pc, #196]	; (80024b4 <HAL_DMA_Start_IT+0x1fc>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d040      	beq.n	8002474 <HAL_DMA_Start_IT+0x1bc>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a30      	ldr	r2, [pc, #192]	; (80024b8 <HAL_DMA_Start_IT+0x200>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d03b      	beq.n	8002474 <HAL_DMA_Start_IT+0x1bc>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a2e      	ldr	r2, [pc, #184]	; (80024bc <HAL_DMA_Start_IT+0x204>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d036      	beq.n	8002474 <HAL_DMA_Start_IT+0x1bc>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a2d      	ldr	r2, [pc, #180]	; (80024c0 <HAL_DMA_Start_IT+0x208>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d031      	beq.n	8002474 <HAL_DMA_Start_IT+0x1bc>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a2b      	ldr	r2, [pc, #172]	; (80024c4 <HAL_DMA_Start_IT+0x20c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d02c      	beq.n	8002474 <HAL_DMA_Start_IT+0x1bc>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a2a      	ldr	r2, [pc, #168]	; (80024c8 <HAL_DMA_Start_IT+0x210>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d027      	beq.n	8002474 <HAL_DMA_Start_IT+0x1bc>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a28      	ldr	r2, [pc, #160]	; (80024cc <HAL_DMA_Start_IT+0x214>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d022      	beq.n	8002474 <HAL_DMA_Start_IT+0x1bc>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a27      	ldr	r2, [pc, #156]	; (80024d0 <HAL_DMA_Start_IT+0x218>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d01d      	beq.n	8002474 <HAL_DMA_Start_IT+0x1bc>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a25      	ldr	r2, [pc, #148]	; (80024d4 <HAL_DMA_Start_IT+0x21c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d018      	beq.n	8002474 <HAL_DMA_Start_IT+0x1bc>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a24      	ldr	r2, [pc, #144]	; (80024d8 <HAL_DMA_Start_IT+0x220>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d013      	beq.n	8002474 <HAL_DMA_Start_IT+0x1bc>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a22      	ldr	r2, [pc, #136]	; (80024dc <HAL_DMA_Start_IT+0x224>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d00e      	beq.n	8002474 <HAL_DMA_Start_IT+0x1bc>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a21      	ldr	r2, [pc, #132]	; (80024e0 <HAL_DMA_Start_IT+0x228>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d009      	beq.n	8002474 <HAL_DMA_Start_IT+0x1bc>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_DMA_Start_IT+0x22c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d004      	beq.n	8002474 <HAL_DMA_Start_IT+0x1bc>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a1e      	ldr	r2, [pc, #120]	; (80024e8 <HAL_DMA_Start_IT+0x230>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d101      	bne.n	8002478 <HAL_DMA_Start_IT+0x1c0>
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <HAL_DMA_Start_IT+0x1c2>
 8002478:	2300      	movs	r3, #0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d036      	beq.n	80024ec <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f023 021e 	bic.w	r2, r3, #30
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0216 	orr.w	r2, r2, #22
 8002490:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	2b00      	cmp	r3, #0
 8002498:	d03e      	beq.n	8002518 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 0208 	orr.w	r2, r2, #8
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	e035      	b.n	8002518 <HAL_DMA_Start_IT+0x260>
 80024ac:	40020010 	.word	0x40020010
 80024b0:	40020028 	.word	0x40020028
 80024b4:	40020040 	.word	0x40020040
 80024b8:	40020058 	.word	0x40020058
 80024bc:	40020070 	.word	0x40020070
 80024c0:	40020088 	.word	0x40020088
 80024c4:	400200a0 	.word	0x400200a0
 80024c8:	400200b8 	.word	0x400200b8
 80024cc:	40020410 	.word	0x40020410
 80024d0:	40020428 	.word	0x40020428
 80024d4:	40020440 	.word	0x40020440
 80024d8:	40020458 	.word	0x40020458
 80024dc:	40020470 	.word	0x40020470
 80024e0:	40020488 	.word	0x40020488
 80024e4:	400204a0 	.word	0x400204a0
 80024e8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 020e 	bic.w	r2, r3, #14
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 020a 	orr.w	r2, r2, #10
 80024fe:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	2b00      	cmp	r3, #0
 8002506:	d007      	beq.n	8002518 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0204 	orr.w	r2, r2, #4
 8002516:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a83      	ldr	r2, [pc, #524]	; (800272c <HAL_DMA_Start_IT+0x474>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d072      	beq.n	8002608 <HAL_DMA_Start_IT+0x350>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a82      	ldr	r2, [pc, #520]	; (8002730 <HAL_DMA_Start_IT+0x478>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d06d      	beq.n	8002608 <HAL_DMA_Start_IT+0x350>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a80      	ldr	r2, [pc, #512]	; (8002734 <HAL_DMA_Start_IT+0x47c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d068      	beq.n	8002608 <HAL_DMA_Start_IT+0x350>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a7f      	ldr	r2, [pc, #508]	; (8002738 <HAL_DMA_Start_IT+0x480>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d063      	beq.n	8002608 <HAL_DMA_Start_IT+0x350>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a7d      	ldr	r2, [pc, #500]	; (800273c <HAL_DMA_Start_IT+0x484>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d05e      	beq.n	8002608 <HAL_DMA_Start_IT+0x350>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a7c      	ldr	r2, [pc, #496]	; (8002740 <HAL_DMA_Start_IT+0x488>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d059      	beq.n	8002608 <HAL_DMA_Start_IT+0x350>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a7a      	ldr	r2, [pc, #488]	; (8002744 <HAL_DMA_Start_IT+0x48c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d054      	beq.n	8002608 <HAL_DMA_Start_IT+0x350>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a79      	ldr	r2, [pc, #484]	; (8002748 <HAL_DMA_Start_IT+0x490>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d04f      	beq.n	8002608 <HAL_DMA_Start_IT+0x350>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a77      	ldr	r2, [pc, #476]	; (800274c <HAL_DMA_Start_IT+0x494>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d04a      	beq.n	8002608 <HAL_DMA_Start_IT+0x350>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a76      	ldr	r2, [pc, #472]	; (8002750 <HAL_DMA_Start_IT+0x498>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d045      	beq.n	8002608 <HAL_DMA_Start_IT+0x350>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a74      	ldr	r2, [pc, #464]	; (8002754 <HAL_DMA_Start_IT+0x49c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d040      	beq.n	8002608 <HAL_DMA_Start_IT+0x350>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a73      	ldr	r2, [pc, #460]	; (8002758 <HAL_DMA_Start_IT+0x4a0>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d03b      	beq.n	8002608 <HAL_DMA_Start_IT+0x350>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a71      	ldr	r2, [pc, #452]	; (800275c <HAL_DMA_Start_IT+0x4a4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d036      	beq.n	8002608 <HAL_DMA_Start_IT+0x350>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a70      	ldr	r2, [pc, #448]	; (8002760 <HAL_DMA_Start_IT+0x4a8>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d031      	beq.n	8002608 <HAL_DMA_Start_IT+0x350>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a6e      	ldr	r2, [pc, #440]	; (8002764 <HAL_DMA_Start_IT+0x4ac>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d02c      	beq.n	8002608 <HAL_DMA_Start_IT+0x350>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a6d      	ldr	r2, [pc, #436]	; (8002768 <HAL_DMA_Start_IT+0x4b0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d027      	beq.n	8002608 <HAL_DMA_Start_IT+0x350>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a6b      	ldr	r2, [pc, #428]	; (800276c <HAL_DMA_Start_IT+0x4b4>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d022      	beq.n	8002608 <HAL_DMA_Start_IT+0x350>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a6a      	ldr	r2, [pc, #424]	; (8002770 <HAL_DMA_Start_IT+0x4b8>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d01d      	beq.n	8002608 <HAL_DMA_Start_IT+0x350>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a68      	ldr	r2, [pc, #416]	; (8002774 <HAL_DMA_Start_IT+0x4bc>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d018      	beq.n	8002608 <HAL_DMA_Start_IT+0x350>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a67      	ldr	r2, [pc, #412]	; (8002778 <HAL_DMA_Start_IT+0x4c0>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d013      	beq.n	8002608 <HAL_DMA_Start_IT+0x350>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a65      	ldr	r2, [pc, #404]	; (800277c <HAL_DMA_Start_IT+0x4c4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d00e      	beq.n	8002608 <HAL_DMA_Start_IT+0x350>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a64      	ldr	r2, [pc, #400]	; (8002780 <HAL_DMA_Start_IT+0x4c8>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d009      	beq.n	8002608 <HAL_DMA_Start_IT+0x350>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a62      	ldr	r2, [pc, #392]	; (8002784 <HAL_DMA_Start_IT+0x4cc>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d004      	beq.n	8002608 <HAL_DMA_Start_IT+0x350>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a61      	ldr	r2, [pc, #388]	; (8002788 <HAL_DMA_Start_IT+0x4d0>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d101      	bne.n	800260c <HAL_DMA_Start_IT+0x354>
 8002608:	2301      	movs	r3, #1
 800260a:	e000      	b.n	800260e <HAL_DMA_Start_IT+0x356>
 800260c:	2300      	movs	r3, #0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d01a      	beq.n	8002648 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d007      	beq.n	8002630 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800262e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002634:	2b00      	cmp	r3, #0
 8002636:	d007      	beq.n	8002648 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002642:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002646:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a37      	ldr	r2, [pc, #220]	; (800272c <HAL_DMA_Start_IT+0x474>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d04a      	beq.n	80026e8 <HAL_DMA_Start_IT+0x430>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a36      	ldr	r2, [pc, #216]	; (8002730 <HAL_DMA_Start_IT+0x478>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d045      	beq.n	80026e8 <HAL_DMA_Start_IT+0x430>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a34      	ldr	r2, [pc, #208]	; (8002734 <HAL_DMA_Start_IT+0x47c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d040      	beq.n	80026e8 <HAL_DMA_Start_IT+0x430>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a33      	ldr	r2, [pc, #204]	; (8002738 <HAL_DMA_Start_IT+0x480>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d03b      	beq.n	80026e8 <HAL_DMA_Start_IT+0x430>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a31      	ldr	r2, [pc, #196]	; (800273c <HAL_DMA_Start_IT+0x484>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d036      	beq.n	80026e8 <HAL_DMA_Start_IT+0x430>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a30      	ldr	r2, [pc, #192]	; (8002740 <HAL_DMA_Start_IT+0x488>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d031      	beq.n	80026e8 <HAL_DMA_Start_IT+0x430>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a2e      	ldr	r2, [pc, #184]	; (8002744 <HAL_DMA_Start_IT+0x48c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d02c      	beq.n	80026e8 <HAL_DMA_Start_IT+0x430>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a2d      	ldr	r2, [pc, #180]	; (8002748 <HAL_DMA_Start_IT+0x490>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d027      	beq.n	80026e8 <HAL_DMA_Start_IT+0x430>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a2b      	ldr	r2, [pc, #172]	; (800274c <HAL_DMA_Start_IT+0x494>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d022      	beq.n	80026e8 <HAL_DMA_Start_IT+0x430>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a2a      	ldr	r2, [pc, #168]	; (8002750 <HAL_DMA_Start_IT+0x498>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d01d      	beq.n	80026e8 <HAL_DMA_Start_IT+0x430>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a28      	ldr	r2, [pc, #160]	; (8002754 <HAL_DMA_Start_IT+0x49c>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d018      	beq.n	80026e8 <HAL_DMA_Start_IT+0x430>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a27      	ldr	r2, [pc, #156]	; (8002758 <HAL_DMA_Start_IT+0x4a0>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d013      	beq.n	80026e8 <HAL_DMA_Start_IT+0x430>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a25      	ldr	r2, [pc, #148]	; (800275c <HAL_DMA_Start_IT+0x4a4>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00e      	beq.n	80026e8 <HAL_DMA_Start_IT+0x430>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a24      	ldr	r2, [pc, #144]	; (8002760 <HAL_DMA_Start_IT+0x4a8>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d009      	beq.n	80026e8 <HAL_DMA_Start_IT+0x430>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a22      	ldr	r2, [pc, #136]	; (8002764 <HAL_DMA_Start_IT+0x4ac>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d004      	beq.n	80026e8 <HAL_DMA_Start_IT+0x430>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a21      	ldr	r2, [pc, #132]	; (8002768 <HAL_DMA_Start_IT+0x4b0>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d108      	bne.n	80026fa <HAL_DMA_Start_IT+0x442>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0201 	orr.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	e012      	b.n	8002720 <HAL_DMA_Start_IT+0x468>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f042 0201 	orr.w	r2, r2, #1
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	e009      	b.n	8002720 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002712:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002720:	7dfb      	ldrb	r3, [r7, #23]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40020010 	.word	0x40020010
 8002730:	40020028 	.word	0x40020028
 8002734:	40020040 	.word	0x40020040
 8002738:	40020058 	.word	0x40020058
 800273c:	40020070 	.word	0x40020070
 8002740:	40020088 	.word	0x40020088
 8002744:	400200a0 	.word	0x400200a0
 8002748:	400200b8 	.word	0x400200b8
 800274c:	40020410 	.word	0x40020410
 8002750:	40020428 	.word	0x40020428
 8002754:	40020440 	.word	0x40020440
 8002758:	40020458 	.word	0x40020458
 800275c:	40020470 	.word	0x40020470
 8002760:	40020488 	.word	0x40020488
 8002764:	400204a0 	.word	0x400204a0
 8002768:	400204b8 	.word	0x400204b8
 800276c:	58025408 	.word	0x58025408
 8002770:	5802541c 	.word	0x5802541c
 8002774:	58025430 	.word	0x58025430
 8002778:	58025444 	.word	0x58025444
 800277c:	58025458 	.word	0x58025458
 8002780:	5802546c 	.word	0x5802546c
 8002784:	58025480 	.word	0x58025480
 8002788:	58025494 	.word	0x58025494

0800278c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	; 0x28
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002798:	4b67      	ldr	r3, [pc, #412]	; (8002938 <HAL_DMA_IRQHandler+0x1ac>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a67      	ldr	r2, [pc, #412]	; (800293c <HAL_DMA_IRQHandler+0x1b0>)
 800279e:	fba2 2303 	umull	r2, r3, r2, r3
 80027a2:	0a9b      	lsrs	r3, r3, #10
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027aa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a5f      	ldr	r2, [pc, #380]	; (8002940 <HAL_DMA_IRQHandler+0x1b4>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d04a      	beq.n	800285e <HAL_DMA_IRQHandler+0xd2>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a5d      	ldr	r2, [pc, #372]	; (8002944 <HAL_DMA_IRQHandler+0x1b8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d045      	beq.n	800285e <HAL_DMA_IRQHandler+0xd2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a5c      	ldr	r2, [pc, #368]	; (8002948 <HAL_DMA_IRQHandler+0x1bc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d040      	beq.n	800285e <HAL_DMA_IRQHandler+0xd2>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a5a      	ldr	r2, [pc, #360]	; (800294c <HAL_DMA_IRQHandler+0x1c0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d03b      	beq.n	800285e <HAL_DMA_IRQHandler+0xd2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a59      	ldr	r2, [pc, #356]	; (8002950 <HAL_DMA_IRQHandler+0x1c4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d036      	beq.n	800285e <HAL_DMA_IRQHandler+0xd2>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a57      	ldr	r2, [pc, #348]	; (8002954 <HAL_DMA_IRQHandler+0x1c8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d031      	beq.n	800285e <HAL_DMA_IRQHandler+0xd2>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a56      	ldr	r2, [pc, #344]	; (8002958 <HAL_DMA_IRQHandler+0x1cc>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d02c      	beq.n	800285e <HAL_DMA_IRQHandler+0xd2>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a54      	ldr	r2, [pc, #336]	; (800295c <HAL_DMA_IRQHandler+0x1d0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d027      	beq.n	800285e <HAL_DMA_IRQHandler+0xd2>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a53      	ldr	r2, [pc, #332]	; (8002960 <HAL_DMA_IRQHandler+0x1d4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d022      	beq.n	800285e <HAL_DMA_IRQHandler+0xd2>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a51      	ldr	r2, [pc, #324]	; (8002964 <HAL_DMA_IRQHandler+0x1d8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d01d      	beq.n	800285e <HAL_DMA_IRQHandler+0xd2>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a50      	ldr	r2, [pc, #320]	; (8002968 <HAL_DMA_IRQHandler+0x1dc>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d018      	beq.n	800285e <HAL_DMA_IRQHandler+0xd2>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a4e      	ldr	r2, [pc, #312]	; (800296c <HAL_DMA_IRQHandler+0x1e0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d013      	beq.n	800285e <HAL_DMA_IRQHandler+0xd2>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a4d      	ldr	r2, [pc, #308]	; (8002970 <HAL_DMA_IRQHandler+0x1e4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d00e      	beq.n	800285e <HAL_DMA_IRQHandler+0xd2>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a4b      	ldr	r2, [pc, #300]	; (8002974 <HAL_DMA_IRQHandler+0x1e8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d009      	beq.n	800285e <HAL_DMA_IRQHandler+0xd2>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a4a      	ldr	r2, [pc, #296]	; (8002978 <HAL_DMA_IRQHandler+0x1ec>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d004      	beq.n	800285e <HAL_DMA_IRQHandler+0xd2>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a48      	ldr	r2, [pc, #288]	; (800297c <HAL_DMA_IRQHandler+0x1f0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d101      	bne.n	8002862 <HAL_DMA_IRQHandler+0xd6>
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <HAL_DMA_IRQHandler+0xd8>
 8002862:	2300      	movs	r3, #0
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 842b 	beq.w	80030c0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286e:	f003 031f 	and.w	r3, r3, #31
 8002872:	2208      	movs	r2, #8
 8002874:	409a      	lsls	r2, r3
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	4013      	ands	r3, r2
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 80a2 	beq.w	80029c4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a2e      	ldr	r2, [pc, #184]	; (8002940 <HAL_DMA_IRQHandler+0x1b4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d04a      	beq.n	8002920 <HAL_DMA_IRQHandler+0x194>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a2d      	ldr	r2, [pc, #180]	; (8002944 <HAL_DMA_IRQHandler+0x1b8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d045      	beq.n	8002920 <HAL_DMA_IRQHandler+0x194>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a2b      	ldr	r2, [pc, #172]	; (8002948 <HAL_DMA_IRQHandler+0x1bc>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d040      	beq.n	8002920 <HAL_DMA_IRQHandler+0x194>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a2a      	ldr	r2, [pc, #168]	; (800294c <HAL_DMA_IRQHandler+0x1c0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d03b      	beq.n	8002920 <HAL_DMA_IRQHandler+0x194>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a28      	ldr	r2, [pc, #160]	; (8002950 <HAL_DMA_IRQHandler+0x1c4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d036      	beq.n	8002920 <HAL_DMA_IRQHandler+0x194>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a27      	ldr	r2, [pc, #156]	; (8002954 <HAL_DMA_IRQHandler+0x1c8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d031      	beq.n	8002920 <HAL_DMA_IRQHandler+0x194>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a25      	ldr	r2, [pc, #148]	; (8002958 <HAL_DMA_IRQHandler+0x1cc>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d02c      	beq.n	8002920 <HAL_DMA_IRQHandler+0x194>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a24      	ldr	r2, [pc, #144]	; (800295c <HAL_DMA_IRQHandler+0x1d0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d027      	beq.n	8002920 <HAL_DMA_IRQHandler+0x194>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a22      	ldr	r2, [pc, #136]	; (8002960 <HAL_DMA_IRQHandler+0x1d4>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d022      	beq.n	8002920 <HAL_DMA_IRQHandler+0x194>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a21      	ldr	r2, [pc, #132]	; (8002964 <HAL_DMA_IRQHandler+0x1d8>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d01d      	beq.n	8002920 <HAL_DMA_IRQHandler+0x194>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a1f      	ldr	r2, [pc, #124]	; (8002968 <HAL_DMA_IRQHandler+0x1dc>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d018      	beq.n	8002920 <HAL_DMA_IRQHandler+0x194>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a1e      	ldr	r2, [pc, #120]	; (800296c <HAL_DMA_IRQHandler+0x1e0>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d013      	beq.n	8002920 <HAL_DMA_IRQHandler+0x194>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a1c      	ldr	r2, [pc, #112]	; (8002970 <HAL_DMA_IRQHandler+0x1e4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d00e      	beq.n	8002920 <HAL_DMA_IRQHandler+0x194>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a1b      	ldr	r2, [pc, #108]	; (8002974 <HAL_DMA_IRQHandler+0x1e8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d009      	beq.n	8002920 <HAL_DMA_IRQHandler+0x194>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a19      	ldr	r2, [pc, #100]	; (8002978 <HAL_DMA_IRQHandler+0x1ec>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d004      	beq.n	8002920 <HAL_DMA_IRQHandler+0x194>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a18      	ldr	r2, [pc, #96]	; (800297c <HAL_DMA_IRQHandler+0x1f0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d12f      	bne.n	8002980 <HAL_DMA_IRQHandler+0x1f4>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	2b00      	cmp	r3, #0
 800292c:	bf14      	ite	ne
 800292e:	2301      	movne	r3, #1
 8002930:	2300      	moveq	r3, #0
 8002932:	b2db      	uxtb	r3, r3
 8002934:	e02e      	b.n	8002994 <HAL_DMA_IRQHandler+0x208>
 8002936:	bf00      	nop
 8002938:	24000008 	.word	0x24000008
 800293c:	1b4e81b5 	.word	0x1b4e81b5
 8002940:	40020010 	.word	0x40020010
 8002944:	40020028 	.word	0x40020028
 8002948:	40020040 	.word	0x40020040
 800294c:	40020058 	.word	0x40020058
 8002950:	40020070 	.word	0x40020070
 8002954:	40020088 	.word	0x40020088
 8002958:	400200a0 	.word	0x400200a0
 800295c:	400200b8 	.word	0x400200b8
 8002960:	40020410 	.word	0x40020410
 8002964:	40020428 	.word	0x40020428
 8002968:	40020440 	.word	0x40020440
 800296c:	40020458 	.word	0x40020458
 8002970:	40020470 	.word	0x40020470
 8002974:	40020488 	.word	0x40020488
 8002978:	400204a0 	.word	0x400204a0
 800297c:	400204b8 	.word	0x400204b8
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	bf14      	ite	ne
 800298e:	2301      	movne	r3, #1
 8002990:	2300      	moveq	r3, #0
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	d015      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0204 	bic.w	r2, r2, #4
 80029a6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	2208      	movs	r2, #8
 80029b2:	409a      	lsls	r2, r3
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029bc:	f043 0201 	orr.w	r2, r3, #1
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c8:	f003 031f 	and.w	r3, r3, #31
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	fa22 f303 	lsr.w	r3, r2, r3
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d06e      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a69      	ldr	r2, [pc, #420]	; (8002b84 <HAL_DMA_IRQHandler+0x3f8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d04a      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x2ee>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a67      	ldr	r2, [pc, #412]	; (8002b88 <HAL_DMA_IRQHandler+0x3fc>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d045      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x2ee>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a66      	ldr	r2, [pc, #408]	; (8002b8c <HAL_DMA_IRQHandler+0x400>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d040      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x2ee>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a64      	ldr	r2, [pc, #400]	; (8002b90 <HAL_DMA_IRQHandler+0x404>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d03b      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x2ee>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a63      	ldr	r2, [pc, #396]	; (8002b94 <HAL_DMA_IRQHandler+0x408>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d036      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x2ee>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a61      	ldr	r2, [pc, #388]	; (8002b98 <HAL_DMA_IRQHandler+0x40c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d031      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x2ee>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a60      	ldr	r2, [pc, #384]	; (8002b9c <HAL_DMA_IRQHandler+0x410>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d02c      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x2ee>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a5e      	ldr	r2, [pc, #376]	; (8002ba0 <HAL_DMA_IRQHandler+0x414>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d027      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x2ee>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a5d      	ldr	r2, [pc, #372]	; (8002ba4 <HAL_DMA_IRQHandler+0x418>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d022      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x2ee>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a5b      	ldr	r2, [pc, #364]	; (8002ba8 <HAL_DMA_IRQHandler+0x41c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d01d      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x2ee>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a5a      	ldr	r2, [pc, #360]	; (8002bac <HAL_DMA_IRQHandler+0x420>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d018      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x2ee>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a58      	ldr	r2, [pc, #352]	; (8002bb0 <HAL_DMA_IRQHandler+0x424>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d013      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x2ee>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a57      	ldr	r2, [pc, #348]	; (8002bb4 <HAL_DMA_IRQHandler+0x428>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d00e      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x2ee>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a55      	ldr	r2, [pc, #340]	; (8002bb8 <HAL_DMA_IRQHandler+0x42c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d009      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x2ee>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a54      	ldr	r2, [pc, #336]	; (8002bbc <HAL_DMA_IRQHandler+0x430>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d004      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x2ee>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a52      	ldr	r2, [pc, #328]	; (8002bc0 <HAL_DMA_IRQHandler+0x434>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d10a      	bne.n	8002a90 <HAL_DMA_IRQHandler+0x304>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf14      	ite	ne
 8002a88:	2301      	movne	r3, #1
 8002a8a:	2300      	moveq	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	e003      	b.n	8002a98 <HAL_DMA_IRQHandler+0x30c>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2300      	movs	r3, #0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00d      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa0:	f003 031f 	and.w	r3, r3, #31
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	409a      	lsls	r2, r3
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab0:	f043 0202 	orr.w	r2, r3, #2
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 808f 	beq.w	8002bec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a2c      	ldr	r2, [pc, #176]	; (8002b84 <HAL_DMA_IRQHandler+0x3f8>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d04a      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x3e2>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a2a      	ldr	r2, [pc, #168]	; (8002b88 <HAL_DMA_IRQHandler+0x3fc>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d045      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x3e2>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a29      	ldr	r2, [pc, #164]	; (8002b8c <HAL_DMA_IRQHandler+0x400>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d040      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x3e2>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a27      	ldr	r2, [pc, #156]	; (8002b90 <HAL_DMA_IRQHandler+0x404>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d03b      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x3e2>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a26      	ldr	r2, [pc, #152]	; (8002b94 <HAL_DMA_IRQHandler+0x408>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d036      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x3e2>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a24      	ldr	r2, [pc, #144]	; (8002b98 <HAL_DMA_IRQHandler+0x40c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d031      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x3e2>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a23      	ldr	r2, [pc, #140]	; (8002b9c <HAL_DMA_IRQHandler+0x410>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d02c      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x3e2>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a21      	ldr	r2, [pc, #132]	; (8002ba0 <HAL_DMA_IRQHandler+0x414>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d027      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x3e2>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a20      	ldr	r2, [pc, #128]	; (8002ba4 <HAL_DMA_IRQHandler+0x418>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d022      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x3e2>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a1e      	ldr	r2, [pc, #120]	; (8002ba8 <HAL_DMA_IRQHandler+0x41c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d01d      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x3e2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a1d      	ldr	r2, [pc, #116]	; (8002bac <HAL_DMA_IRQHandler+0x420>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d018      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x3e2>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a1b      	ldr	r2, [pc, #108]	; (8002bb0 <HAL_DMA_IRQHandler+0x424>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d013      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x3e2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a1a      	ldr	r2, [pc, #104]	; (8002bb4 <HAL_DMA_IRQHandler+0x428>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d00e      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x3e2>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a18      	ldr	r2, [pc, #96]	; (8002bb8 <HAL_DMA_IRQHandler+0x42c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d009      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x3e2>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a17      	ldr	r2, [pc, #92]	; (8002bbc <HAL_DMA_IRQHandler+0x430>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d004      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x3e2>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a15      	ldr	r2, [pc, #84]	; (8002bc0 <HAL_DMA_IRQHandler+0x434>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d12a      	bne.n	8002bc4 <HAL_DMA_IRQHandler+0x438>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	bf14      	ite	ne
 8002b7c:	2301      	movne	r3, #1
 8002b7e:	2300      	moveq	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	e023      	b.n	8002bcc <HAL_DMA_IRQHandler+0x440>
 8002b84:	40020010 	.word	0x40020010
 8002b88:	40020028 	.word	0x40020028
 8002b8c:	40020040 	.word	0x40020040
 8002b90:	40020058 	.word	0x40020058
 8002b94:	40020070 	.word	0x40020070
 8002b98:	40020088 	.word	0x40020088
 8002b9c:	400200a0 	.word	0x400200a0
 8002ba0:	400200b8 	.word	0x400200b8
 8002ba4:	40020410 	.word	0x40020410
 8002ba8:	40020428 	.word	0x40020428
 8002bac:	40020440 	.word	0x40020440
 8002bb0:	40020458 	.word	0x40020458
 8002bb4:	40020470 	.word	0x40020470
 8002bb8:	40020488 	.word	0x40020488
 8002bbc:	400204a0 	.word	0x400204a0
 8002bc0:	400204b8 	.word	0x400204b8
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00d      	beq.n	8002bec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd4:	f003 031f 	and.w	r3, r3, #31
 8002bd8:	2204      	movs	r2, #4
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be4:	f043 0204 	orr.w	r2, r3, #4
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf0:	f003 031f 	and.w	r3, r3, #31
 8002bf4:	2210      	movs	r2, #16
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 80a6 	beq.w	8002d4e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a85      	ldr	r2, [pc, #532]	; (8002e1c <HAL_DMA_IRQHandler+0x690>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d04a      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x516>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a83      	ldr	r2, [pc, #524]	; (8002e20 <HAL_DMA_IRQHandler+0x694>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d045      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x516>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a82      	ldr	r2, [pc, #520]	; (8002e24 <HAL_DMA_IRQHandler+0x698>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d040      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x516>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a80      	ldr	r2, [pc, #512]	; (8002e28 <HAL_DMA_IRQHandler+0x69c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d03b      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x516>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a7f      	ldr	r2, [pc, #508]	; (8002e2c <HAL_DMA_IRQHandler+0x6a0>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d036      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x516>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a7d      	ldr	r2, [pc, #500]	; (8002e30 <HAL_DMA_IRQHandler+0x6a4>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d031      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x516>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a7c      	ldr	r2, [pc, #496]	; (8002e34 <HAL_DMA_IRQHandler+0x6a8>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d02c      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x516>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a7a      	ldr	r2, [pc, #488]	; (8002e38 <HAL_DMA_IRQHandler+0x6ac>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d027      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x516>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a79      	ldr	r2, [pc, #484]	; (8002e3c <HAL_DMA_IRQHandler+0x6b0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d022      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x516>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a77      	ldr	r2, [pc, #476]	; (8002e40 <HAL_DMA_IRQHandler+0x6b4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d01d      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x516>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a76      	ldr	r2, [pc, #472]	; (8002e44 <HAL_DMA_IRQHandler+0x6b8>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d018      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x516>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a74      	ldr	r2, [pc, #464]	; (8002e48 <HAL_DMA_IRQHandler+0x6bc>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d013      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x516>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a73      	ldr	r2, [pc, #460]	; (8002e4c <HAL_DMA_IRQHandler+0x6c0>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d00e      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x516>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a71      	ldr	r2, [pc, #452]	; (8002e50 <HAL_DMA_IRQHandler+0x6c4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d009      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x516>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a70      	ldr	r2, [pc, #448]	; (8002e54 <HAL_DMA_IRQHandler+0x6c8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d004      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x516>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a6e      	ldr	r2, [pc, #440]	; (8002e58 <HAL_DMA_IRQHandler+0x6cc>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d10a      	bne.n	8002cb8 <HAL_DMA_IRQHandler+0x52c>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0308 	and.w	r3, r3, #8
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	bf14      	ite	ne
 8002cb0:	2301      	movne	r3, #1
 8002cb2:	2300      	moveq	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	e009      	b.n	8002ccc <HAL_DMA_IRQHandler+0x540>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	bf14      	ite	ne
 8002cc6:	2301      	movne	r3, #1
 8002cc8:	2300      	moveq	r3, #0
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d03e      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd4:	f003 031f 	and.w	r3, r3, #31
 8002cd8:	2210      	movs	r2, #16
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d018      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d108      	bne.n	8002d0e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d024      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	4798      	blx	r3
 8002d0c:	e01f      	b.n	8002d4e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d01b      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	4798      	blx	r3
 8002d1e:	e016      	b.n	8002d4e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d107      	bne.n	8002d3e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0208 	bic.w	r2, r2, #8
 8002d3c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d52:	f003 031f 	and.w	r3, r3, #31
 8002d56:	2220      	movs	r2, #32
 8002d58:	409a      	lsls	r2, r3
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8110 	beq.w	8002f84 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a2c      	ldr	r2, [pc, #176]	; (8002e1c <HAL_DMA_IRQHandler+0x690>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d04a      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x678>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a2b      	ldr	r2, [pc, #172]	; (8002e20 <HAL_DMA_IRQHandler+0x694>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d045      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x678>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a29      	ldr	r2, [pc, #164]	; (8002e24 <HAL_DMA_IRQHandler+0x698>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d040      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x678>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a28      	ldr	r2, [pc, #160]	; (8002e28 <HAL_DMA_IRQHandler+0x69c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d03b      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x678>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a26      	ldr	r2, [pc, #152]	; (8002e2c <HAL_DMA_IRQHandler+0x6a0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d036      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x678>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a25      	ldr	r2, [pc, #148]	; (8002e30 <HAL_DMA_IRQHandler+0x6a4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d031      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x678>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a23      	ldr	r2, [pc, #140]	; (8002e34 <HAL_DMA_IRQHandler+0x6a8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d02c      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x678>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a22      	ldr	r2, [pc, #136]	; (8002e38 <HAL_DMA_IRQHandler+0x6ac>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d027      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x678>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a20      	ldr	r2, [pc, #128]	; (8002e3c <HAL_DMA_IRQHandler+0x6b0>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d022      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x678>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a1f      	ldr	r2, [pc, #124]	; (8002e40 <HAL_DMA_IRQHandler+0x6b4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d01d      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x678>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a1d      	ldr	r2, [pc, #116]	; (8002e44 <HAL_DMA_IRQHandler+0x6b8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d018      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x678>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a1c      	ldr	r2, [pc, #112]	; (8002e48 <HAL_DMA_IRQHandler+0x6bc>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d013      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x678>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a1a      	ldr	r2, [pc, #104]	; (8002e4c <HAL_DMA_IRQHandler+0x6c0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00e      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x678>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a19      	ldr	r2, [pc, #100]	; (8002e50 <HAL_DMA_IRQHandler+0x6c4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d009      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x678>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a17      	ldr	r2, [pc, #92]	; (8002e54 <HAL_DMA_IRQHandler+0x6c8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d004      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x678>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a16      	ldr	r2, [pc, #88]	; (8002e58 <HAL_DMA_IRQHandler+0x6cc>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d12b      	bne.n	8002e5c <HAL_DMA_IRQHandler+0x6d0>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0310 	and.w	r3, r3, #16
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	bf14      	ite	ne
 8002e12:	2301      	movne	r3, #1
 8002e14:	2300      	moveq	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	e02a      	b.n	8002e70 <HAL_DMA_IRQHandler+0x6e4>
 8002e1a:	bf00      	nop
 8002e1c:	40020010 	.word	0x40020010
 8002e20:	40020028 	.word	0x40020028
 8002e24:	40020040 	.word	0x40020040
 8002e28:	40020058 	.word	0x40020058
 8002e2c:	40020070 	.word	0x40020070
 8002e30:	40020088 	.word	0x40020088
 8002e34:	400200a0 	.word	0x400200a0
 8002e38:	400200b8 	.word	0x400200b8
 8002e3c:	40020410 	.word	0x40020410
 8002e40:	40020428 	.word	0x40020428
 8002e44:	40020440 	.word	0x40020440
 8002e48:	40020458 	.word	0x40020458
 8002e4c:	40020470 	.word	0x40020470
 8002e50:	40020488 	.word	0x40020488
 8002e54:	400204a0 	.word	0x400204a0
 8002e58:	400204b8 	.word	0x400204b8
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	bf14      	ite	ne
 8002e6a:	2301      	movne	r3, #1
 8002e6c:	2300      	moveq	r3, #0
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 8087 	beq.w	8002f84 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7a:	f003 031f 	and.w	r3, r3, #31
 8002e7e:	2220      	movs	r2, #32
 8002e80:	409a      	lsls	r2, r3
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d139      	bne.n	8002f06 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0216 	bic.w	r2, r2, #22
 8002ea0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695a      	ldr	r2, [r3, #20]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eb0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d103      	bne.n	8002ec2 <HAL_DMA_IRQHandler+0x736>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d007      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0208 	bic.w	r2, r2, #8
 8002ed0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed6:	f003 031f 	and.w	r3, r3, #31
 8002eda:	223f      	movs	r2, #63	; 0x3f
 8002edc:	409a      	lsls	r2, r3
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 834a 	beq.w	8003590 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	4798      	blx	r3
          }
          return;
 8002f04:	e344      	b.n	8003590 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d018      	beq.n	8002f46 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d108      	bne.n	8002f34 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d02c      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	4798      	blx	r3
 8002f32:	e027      	b.n	8002f84 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d023      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	4798      	blx	r3
 8002f44:	e01e      	b.n	8002f84 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10f      	bne.n	8002f74 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0210 	bic.w	r2, r2, #16
 8002f62:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 8306 	beq.w	800359a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 8088 	beq.w	80030ac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2204      	movs	r2, #4
 8002fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a7a      	ldr	r2, [pc, #488]	; (8003194 <HAL_DMA_IRQHandler+0xa08>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d04a      	beq.n	8003044 <HAL_DMA_IRQHandler+0x8b8>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a79      	ldr	r2, [pc, #484]	; (8003198 <HAL_DMA_IRQHandler+0xa0c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d045      	beq.n	8003044 <HAL_DMA_IRQHandler+0x8b8>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a77      	ldr	r2, [pc, #476]	; (800319c <HAL_DMA_IRQHandler+0xa10>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d040      	beq.n	8003044 <HAL_DMA_IRQHandler+0x8b8>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a76      	ldr	r2, [pc, #472]	; (80031a0 <HAL_DMA_IRQHandler+0xa14>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d03b      	beq.n	8003044 <HAL_DMA_IRQHandler+0x8b8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a74      	ldr	r2, [pc, #464]	; (80031a4 <HAL_DMA_IRQHandler+0xa18>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d036      	beq.n	8003044 <HAL_DMA_IRQHandler+0x8b8>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a73      	ldr	r2, [pc, #460]	; (80031a8 <HAL_DMA_IRQHandler+0xa1c>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d031      	beq.n	8003044 <HAL_DMA_IRQHandler+0x8b8>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a71      	ldr	r2, [pc, #452]	; (80031ac <HAL_DMA_IRQHandler+0xa20>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d02c      	beq.n	8003044 <HAL_DMA_IRQHandler+0x8b8>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a70      	ldr	r2, [pc, #448]	; (80031b0 <HAL_DMA_IRQHandler+0xa24>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d027      	beq.n	8003044 <HAL_DMA_IRQHandler+0x8b8>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a6e      	ldr	r2, [pc, #440]	; (80031b4 <HAL_DMA_IRQHandler+0xa28>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d022      	beq.n	8003044 <HAL_DMA_IRQHandler+0x8b8>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a6d      	ldr	r2, [pc, #436]	; (80031b8 <HAL_DMA_IRQHandler+0xa2c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d01d      	beq.n	8003044 <HAL_DMA_IRQHandler+0x8b8>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a6b      	ldr	r2, [pc, #428]	; (80031bc <HAL_DMA_IRQHandler+0xa30>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d018      	beq.n	8003044 <HAL_DMA_IRQHandler+0x8b8>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a6a      	ldr	r2, [pc, #424]	; (80031c0 <HAL_DMA_IRQHandler+0xa34>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d013      	beq.n	8003044 <HAL_DMA_IRQHandler+0x8b8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a68      	ldr	r2, [pc, #416]	; (80031c4 <HAL_DMA_IRQHandler+0xa38>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d00e      	beq.n	8003044 <HAL_DMA_IRQHandler+0x8b8>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a67      	ldr	r2, [pc, #412]	; (80031c8 <HAL_DMA_IRQHandler+0xa3c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d009      	beq.n	8003044 <HAL_DMA_IRQHandler+0x8b8>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a65      	ldr	r2, [pc, #404]	; (80031cc <HAL_DMA_IRQHandler+0xa40>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d004      	beq.n	8003044 <HAL_DMA_IRQHandler+0x8b8>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a64      	ldr	r2, [pc, #400]	; (80031d0 <HAL_DMA_IRQHandler+0xa44>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d108      	bne.n	8003056 <HAL_DMA_IRQHandler+0x8ca>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0201 	bic.w	r2, r2, #1
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	e007      	b.n	8003066 <HAL_DMA_IRQHandler+0x8da>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0201 	bic.w	r2, r2, #1
 8003064:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	3301      	adds	r3, #1
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306e:	429a      	cmp	r2, r3
 8003070:	d307      	bcc.n	8003082 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1f2      	bne.n	8003066 <HAL_DMA_IRQHandler+0x8da>
 8003080:	e000      	b.n	8003084 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003082:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d004      	beq.n	800309c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2203      	movs	r2, #3
 8003096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800309a:	e003      	b.n	80030a4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 8272 	beq.w	800359a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	4798      	blx	r3
 80030be:	e26c      	b.n	800359a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a43      	ldr	r2, [pc, #268]	; (80031d4 <HAL_DMA_IRQHandler+0xa48>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d022      	beq.n	8003110 <HAL_DMA_IRQHandler+0x984>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a42      	ldr	r2, [pc, #264]	; (80031d8 <HAL_DMA_IRQHandler+0xa4c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d01d      	beq.n	8003110 <HAL_DMA_IRQHandler+0x984>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a40      	ldr	r2, [pc, #256]	; (80031dc <HAL_DMA_IRQHandler+0xa50>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d018      	beq.n	8003110 <HAL_DMA_IRQHandler+0x984>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a3f      	ldr	r2, [pc, #252]	; (80031e0 <HAL_DMA_IRQHandler+0xa54>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d013      	beq.n	8003110 <HAL_DMA_IRQHandler+0x984>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a3d      	ldr	r2, [pc, #244]	; (80031e4 <HAL_DMA_IRQHandler+0xa58>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00e      	beq.n	8003110 <HAL_DMA_IRQHandler+0x984>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a3c      	ldr	r2, [pc, #240]	; (80031e8 <HAL_DMA_IRQHandler+0xa5c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d009      	beq.n	8003110 <HAL_DMA_IRQHandler+0x984>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a3a      	ldr	r2, [pc, #232]	; (80031ec <HAL_DMA_IRQHandler+0xa60>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d004      	beq.n	8003110 <HAL_DMA_IRQHandler+0x984>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a39      	ldr	r2, [pc, #228]	; (80031f0 <HAL_DMA_IRQHandler+0xa64>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d101      	bne.n	8003114 <HAL_DMA_IRQHandler+0x988>
 8003110:	2301      	movs	r3, #1
 8003112:	e000      	b.n	8003116 <HAL_DMA_IRQHandler+0x98a>
 8003114:	2300      	movs	r3, #0
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 823f 	beq.w	800359a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	2204      	movs	r2, #4
 800312e:	409a      	lsls	r2, r3
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	4013      	ands	r3, r2
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80cd 	beq.w	80032d4 <HAL_DMA_IRQHandler+0xb48>
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 80c7 	beq.w	80032d4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314a:	f003 031f 	and.w	r3, r3, #31
 800314e:	2204      	movs	r2, #4
 8003150:	409a      	lsls	r2, r3
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d049      	beq.n	80031f4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d109      	bne.n	800317e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 8210 	beq.w	8003594 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800317c:	e20a      	b.n	8003594 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 8206 	beq.w	8003594 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003190:	e200      	b.n	8003594 <HAL_DMA_IRQHandler+0xe08>
 8003192:	bf00      	nop
 8003194:	40020010 	.word	0x40020010
 8003198:	40020028 	.word	0x40020028
 800319c:	40020040 	.word	0x40020040
 80031a0:	40020058 	.word	0x40020058
 80031a4:	40020070 	.word	0x40020070
 80031a8:	40020088 	.word	0x40020088
 80031ac:	400200a0 	.word	0x400200a0
 80031b0:	400200b8 	.word	0x400200b8
 80031b4:	40020410 	.word	0x40020410
 80031b8:	40020428 	.word	0x40020428
 80031bc:	40020440 	.word	0x40020440
 80031c0:	40020458 	.word	0x40020458
 80031c4:	40020470 	.word	0x40020470
 80031c8:	40020488 	.word	0x40020488
 80031cc:	400204a0 	.word	0x400204a0
 80031d0:	400204b8 	.word	0x400204b8
 80031d4:	58025408 	.word	0x58025408
 80031d8:	5802541c 	.word	0x5802541c
 80031dc:	58025430 	.word	0x58025430
 80031e0:	58025444 	.word	0x58025444
 80031e4:	58025458 	.word	0x58025458
 80031e8:	5802546c 	.word	0x5802546c
 80031ec:	58025480 	.word	0x58025480
 80031f0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	f003 0320 	and.w	r3, r3, #32
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d160      	bne.n	80032c0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a7f      	ldr	r2, [pc, #508]	; (8003400 <HAL_DMA_IRQHandler+0xc74>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d04a      	beq.n	800329e <HAL_DMA_IRQHandler+0xb12>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a7d      	ldr	r2, [pc, #500]	; (8003404 <HAL_DMA_IRQHandler+0xc78>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d045      	beq.n	800329e <HAL_DMA_IRQHandler+0xb12>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a7c      	ldr	r2, [pc, #496]	; (8003408 <HAL_DMA_IRQHandler+0xc7c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d040      	beq.n	800329e <HAL_DMA_IRQHandler+0xb12>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a7a      	ldr	r2, [pc, #488]	; (800340c <HAL_DMA_IRQHandler+0xc80>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d03b      	beq.n	800329e <HAL_DMA_IRQHandler+0xb12>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a79      	ldr	r2, [pc, #484]	; (8003410 <HAL_DMA_IRQHandler+0xc84>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d036      	beq.n	800329e <HAL_DMA_IRQHandler+0xb12>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a77      	ldr	r2, [pc, #476]	; (8003414 <HAL_DMA_IRQHandler+0xc88>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d031      	beq.n	800329e <HAL_DMA_IRQHandler+0xb12>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a76      	ldr	r2, [pc, #472]	; (8003418 <HAL_DMA_IRQHandler+0xc8c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d02c      	beq.n	800329e <HAL_DMA_IRQHandler+0xb12>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a74      	ldr	r2, [pc, #464]	; (800341c <HAL_DMA_IRQHandler+0xc90>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d027      	beq.n	800329e <HAL_DMA_IRQHandler+0xb12>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a73      	ldr	r2, [pc, #460]	; (8003420 <HAL_DMA_IRQHandler+0xc94>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d022      	beq.n	800329e <HAL_DMA_IRQHandler+0xb12>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a71      	ldr	r2, [pc, #452]	; (8003424 <HAL_DMA_IRQHandler+0xc98>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d01d      	beq.n	800329e <HAL_DMA_IRQHandler+0xb12>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a70      	ldr	r2, [pc, #448]	; (8003428 <HAL_DMA_IRQHandler+0xc9c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d018      	beq.n	800329e <HAL_DMA_IRQHandler+0xb12>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a6e      	ldr	r2, [pc, #440]	; (800342c <HAL_DMA_IRQHandler+0xca0>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d013      	beq.n	800329e <HAL_DMA_IRQHandler+0xb12>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a6d      	ldr	r2, [pc, #436]	; (8003430 <HAL_DMA_IRQHandler+0xca4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d00e      	beq.n	800329e <HAL_DMA_IRQHandler+0xb12>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a6b      	ldr	r2, [pc, #428]	; (8003434 <HAL_DMA_IRQHandler+0xca8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d009      	beq.n	800329e <HAL_DMA_IRQHandler+0xb12>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a6a      	ldr	r2, [pc, #424]	; (8003438 <HAL_DMA_IRQHandler+0xcac>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d004      	beq.n	800329e <HAL_DMA_IRQHandler+0xb12>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a68      	ldr	r2, [pc, #416]	; (800343c <HAL_DMA_IRQHandler+0xcb0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d108      	bne.n	80032b0 <HAL_DMA_IRQHandler+0xb24>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0208 	bic.w	r2, r2, #8
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	e007      	b.n	80032c0 <HAL_DMA_IRQHandler+0xb34>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0204 	bic.w	r2, r2, #4
 80032be:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 8165 	beq.w	8003594 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032d2:	e15f      	b.n	8003594 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d8:	f003 031f 	and.w	r3, r3, #31
 80032dc:	2202      	movs	r2, #2
 80032de:	409a      	lsls	r2, r3
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80c5 	beq.w	8003474 <HAL_DMA_IRQHandler+0xce8>
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 80bf 	beq.w	8003474 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	2202      	movs	r2, #2
 8003300:	409a      	lsls	r2, r3
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d018      	beq.n	8003342 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d109      	bne.n	800332e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 813a 	beq.w	8003598 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800332c:	e134      	b.n	8003598 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 8130 	beq.w	8003598 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003340:	e12a      	b.n	8003598 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f003 0320 	and.w	r3, r3, #32
 8003348:	2b00      	cmp	r3, #0
 800334a:	f040 8089 	bne.w	8003460 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a2b      	ldr	r2, [pc, #172]	; (8003400 <HAL_DMA_IRQHandler+0xc74>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d04a      	beq.n	80033ee <HAL_DMA_IRQHandler+0xc62>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a29      	ldr	r2, [pc, #164]	; (8003404 <HAL_DMA_IRQHandler+0xc78>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d045      	beq.n	80033ee <HAL_DMA_IRQHandler+0xc62>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a28      	ldr	r2, [pc, #160]	; (8003408 <HAL_DMA_IRQHandler+0xc7c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d040      	beq.n	80033ee <HAL_DMA_IRQHandler+0xc62>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a26      	ldr	r2, [pc, #152]	; (800340c <HAL_DMA_IRQHandler+0xc80>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d03b      	beq.n	80033ee <HAL_DMA_IRQHandler+0xc62>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a25      	ldr	r2, [pc, #148]	; (8003410 <HAL_DMA_IRQHandler+0xc84>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d036      	beq.n	80033ee <HAL_DMA_IRQHandler+0xc62>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a23      	ldr	r2, [pc, #140]	; (8003414 <HAL_DMA_IRQHandler+0xc88>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d031      	beq.n	80033ee <HAL_DMA_IRQHandler+0xc62>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a22      	ldr	r2, [pc, #136]	; (8003418 <HAL_DMA_IRQHandler+0xc8c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d02c      	beq.n	80033ee <HAL_DMA_IRQHandler+0xc62>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a20      	ldr	r2, [pc, #128]	; (800341c <HAL_DMA_IRQHandler+0xc90>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d027      	beq.n	80033ee <HAL_DMA_IRQHandler+0xc62>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a1f      	ldr	r2, [pc, #124]	; (8003420 <HAL_DMA_IRQHandler+0xc94>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d022      	beq.n	80033ee <HAL_DMA_IRQHandler+0xc62>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a1d      	ldr	r2, [pc, #116]	; (8003424 <HAL_DMA_IRQHandler+0xc98>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d01d      	beq.n	80033ee <HAL_DMA_IRQHandler+0xc62>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a1c      	ldr	r2, [pc, #112]	; (8003428 <HAL_DMA_IRQHandler+0xc9c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d018      	beq.n	80033ee <HAL_DMA_IRQHandler+0xc62>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a1a      	ldr	r2, [pc, #104]	; (800342c <HAL_DMA_IRQHandler+0xca0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d013      	beq.n	80033ee <HAL_DMA_IRQHandler+0xc62>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a19      	ldr	r2, [pc, #100]	; (8003430 <HAL_DMA_IRQHandler+0xca4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d00e      	beq.n	80033ee <HAL_DMA_IRQHandler+0xc62>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a17      	ldr	r2, [pc, #92]	; (8003434 <HAL_DMA_IRQHandler+0xca8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d009      	beq.n	80033ee <HAL_DMA_IRQHandler+0xc62>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a16      	ldr	r2, [pc, #88]	; (8003438 <HAL_DMA_IRQHandler+0xcac>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d004      	beq.n	80033ee <HAL_DMA_IRQHandler+0xc62>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a14      	ldr	r2, [pc, #80]	; (800343c <HAL_DMA_IRQHandler+0xcb0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d128      	bne.n	8003440 <HAL_DMA_IRQHandler+0xcb4>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0214 	bic.w	r2, r2, #20
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	e027      	b.n	8003450 <HAL_DMA_IRQHandler+0xcc4>
 8003400:	40020010 	.word	0x40020010
 8003404:	40020028 	.word	0x40020028
 8003408:	40020040 	.word	0x40020040
 800340c:	40020058 	.word	0x40020058
 8003410:	40020070 	.word	0x40020070
 8003414:	40020088 	.word	0x40020088
 8003418:	400200a0 	.word	0x400200a0
 800341c:	400200b8 	.word	0x400200b8
 8003420:	40020410 	.word	0x40020410
 8003424:	40020428 	.word	0x40020428
 8003428:	40020440 	.word	0x40020440
 800342c:	40020458 	.word	0x40020458
 8003430:	40020470 	.word	0x40020470
 8003434:	40020488 	.word	0x40020488
 8003438:	400204a0 	.word	0x400204a0
 800343c:	400204b8 	.word	0x400204b8
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 020a 	bic.w	r2, r2, #10
 800344e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8097 	beq.w	8003598 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003472:	e091      	b.n	8003598 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003478:	f003 031f 	and.w	r3, r3, #31
 800347c:	2208      	movs	r2, #8
 800347e:	409a      	lsls	r2, r3
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	4013      	ands	r3, r2
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 8088 	beq.w	800359a <HAL_DMA_IRQHandler+0xe0e>
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 8082 	beq.w	800359a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a41      	ldr	r2, [pc, #260]	; (80035a0 <HAL_DMA_IRQHandler+0xe14>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d04a      	beq.n	8003536 <HAL_DMA_IRQHandler+0xdaa>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a3f      	ldr	r2, [pc, #252]	; (80035a4 <HAL_DMA_IRQHandler+0xe18>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d045      	beq.n	8003536 <HAL_DMA_IRQHandler+0xdaa>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a3e      	ldr	r2, [pc, #248]	; (80035a8 <HAL_DMA_IRQHandler+0xe1c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d040      	beq.n	8003536 <HAL_DMA_IRQHandler+0xdaa>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a3c      	ldr	r2, [pc, #240]	; (80035ac <HAL_DMA_IRQHandler+0xe20>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d03b      	beq.n	8003536 <HAL_DMA_IRQHandler+0xdaa>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a3b      	ldr	r2, [pc, #236]	; (80035b0 <HAL_DMA_IRQHandler+0xe24>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d036      	beq.n	8003536 <HAL_DMA_IRQHandler+0xdaa>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a39      	ldr	r2, [pc, #228]	; (80035b4 <HAL_DMA_IRQHandler+0xe28>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d031      	beq.n	8003536 <HAL_DMA_IRQHandler+0xdaa>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a38      	ldr	r2, [pc, #224]	; (80035b8 <HAL_DMA_IRQHandler+0xe2c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d02c      	beq.n	8003536 <HAL_DMA_IRQHandler+0xdaa>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a36      	ldr	r2, [pc, #216]	; (80035bc <HAL_DMA_IRQHandler+0xe30>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d027      	beq.n	8003536 <HAL_DMA_IRQHandler+0xdaa>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a35      	ldr	r2, [pc, #212]	; (80035c0 <HAL_DMA_IRQHandler+0xe34>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d022      	beq.n	8003536 <HAL_DMA_IRQHandler+0xdaa>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a33      	ldr	r2, [pc, #204]	; (80035c4 <HAL_DMA_IRQHandler+0xe38>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d01d      	beq.n	8003536 <HAL_DMA_IRQHandler+0xdaa>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a32      	ldr	r2, [pc, #200]	; (80035c8 <HAL_DMA_IRQHandler+0xe3c>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d018      	beq.n	8003536 <HAL_DMA_IRQHandler+0xdaa>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a30      	ldr	r2, [pc, #192]	; (80035cc <HAL_DMA_IRQHandler+0xe40>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d013      	beq.n	8003536 <HAL_DMA_IRQHandler+0xdaa>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a2f      	ldr	r2, [pc, #188]	; (80035d0 <HAL_DMA_IRQHandler+0xe44>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d00e      	beq.n	8003536 <HAL_DMA_IRQHandler+0xdaa>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a2d      	ldr	r2, [pc, #180]	; (80035d4 <HAL_DMA_IRQHandler+0xe48>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d009      	beq.n	8003536 <HAL_DMA_IRQHandler+0xdaa>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a2c      	ldr	r2, [pc, #176]	; (80035d8 <HAL_DMA_IRQHandler+0xe4c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d004      	beq.n	8003536 <HAL_DMA_IRQHandler+0xdaa>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a2a      	ldr	r2, [pc, #168]	; (80035dc <HAL_DMA_IRQHandler+0xe50>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d108      	bne.n	8003548 <HAL_DMA_IRQHandler+0xdbc>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 021c 	bic.w	r2, r2, #28
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	e007      	b.n	8003558 <HAL_DMA_IRQHandler+0xdcc>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 020e 	bic.w	r2, r2, #14
 8003556:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355c:	f003 031f 	and.w	r3, r3, #31
 8003560:	2201      	movs	r2, #1
 8003562:	409a      	lsls	r2, r3
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003582:	2b00      	cmp	r3, #0
 8003584:	d009      	beq.n	800359a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	4798      	blx	r3
 800358e:	e004      	b.n	800359a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003590:	bf00      	nop
 8003592:	e002      	b.n	800359a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003594:	bf00      	nop
 8003596:	e000      	b.n	800359a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003598:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800359a:	3728      	adds	r7, #40	; 0x28
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40020010 	.word	0x40020010
 80035a4:	40020028 	.word	0x40020028
 80035a8:	40020040 	.word	0x40020040
 80035ac:	40020058 	.word	0x40020058
 80035b0:	40020070 	.word	0x40020070
 80035b4:	40020088 	.word	0x40020088
 80035b8:	400200a0 	.word	0x400200a0
 80035bc:	400200b8 	.word	0x400200b8
 80035c0:	40020410 	.word	0x40020410
 80035c4:	40020428 	.word	0x40020428
 80035c8:	40020440 	.word	0x40020440
 80035cc:	40020458 	.word	0x40020458
 80035d0:	40020470 	.word	0x40020470
 80035d4:	40020488 	.word	0x40020488
 80035d8:	400204a0 	.word	0x400204a0
 80035dc:	400204b8 	.word	0x400204b8

080035e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a7f      	ldr	r2, [pc, #508]	; (80037fc <DMA_SetConfig+0x21c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d072      	beq.n	80036ea <DMA_SetConfig+0x10a>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a7d      	ldr	r2, [pc, #500]	; (8003800 <DMA_SetConfig+0x220>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d06d      	beq.n	80036ea <DMA_SetConfig+0x10a>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a7c      	ldr	r2, [pc, #496]	; (8003804 <DMA_SetConfig+0x224>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d068      	beq.n	80036ea <DMA_SetConfig+0x10a>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a7a      	ldr	r2, [pc, #488]	; (8003808 <DMA_SetConfig+0x228>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d063      	beq.n	80036ea <DMA_SetConfig+0x10a>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a79      	ldr	r2, [pc, #484]	; (800380c <DMA_SetConfig+0x22c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d05e      	beq.n	80036ea <DMA_SetConfig+0x10a>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a77      	ldr	r2, [pc, #476]	; (8003810 <DMA_SetConfig+0x230>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d059      	beq.n	80036ea <DMA_SetConfig+0x10a>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a76      	ldr	r2, [pc, #472]	; (8003814 <DMA_SetConfig+0x234>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d054      	beq.n	80036ea <DMA_SetConfig+0x10a>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a74      	ldr	r2, [pc, #464]	; (8003818 <DMA_SetConfig+0x238>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d04f      	beq.n	80036ea <DMA_SetConfig+0x10a>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a73      	ldr	r2, [pc, #460]	; (800381c <DMA_SetConfig+0x23c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d04a      	beq.n	80036ea <DMA_SetConfig+0x10a>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a71      	ldr	r2, [pc, #452]	; (8003820 <DMA_SetConfig+0x240>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d045      	beq.n	80036ea <DMA_SetConfig+0x10a>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a70      	ldr	r2, [pc, #448]	; (8003824 <DMA_SetConfig+0x244>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d040      	beq.n	80036ea <DMA_SetConfig+0x10a>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a6e      	ldr	r2, [pc, #440]	; (8003828 <DMA_SetConfig+0x248>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d03b      	beq.n	80036ea <DMA_SetConfig+0x10a>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a6d      	ldr	r2, [pc, #436]	; (800382c <DMA_SetConfig+0x24c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d036      	beq.n	80036ea <DMA_SetConfig+0x10a>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a6b      	ldr	r2, [pc, #428]	; (8003830 <DMA_SetConfig+0x250>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d031      	beq.n	80036ea <DMA_SetConfig+0x10a>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a6a      	ldr	r2, [pc, #424]	; (8003834 <DMA_SetConfig+0x254>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d02c      	beq.n	80036ea <DMA_SetConfig+0x10a>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a68      	ldr	r2, [pc, #416]	; (8003838 <DMA_SetConfig+0x258>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d027      	beq.n	80036ea <DMA_SetConfig+0x10a>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a67      	ldr	r2, [pc, #412]	; (800383c <DMA_SetConfig+0x25c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d022      	beq.n	80036ea <DMA_SetConfig+0x10a>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a65      	ldr	r2, [pc, #404]	; (8003840 <DMA_SetConfig+0x260>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d01d      	beq.n	80036ea <DMA_SetConfig+0x10a>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a64      	ldr	r2, [pc, #400]	; (8003844 <DMA_SetConfig+0x264>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d018      	beq.n	80036ea <DMA_SetConfig+0x10a>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a62      	ldr	r2, [pc, #392]	; (8003848 <DMA_SetConfig+0x268>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d013      	beq.n	80036ea <DMA_SetConfig+0x10a>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a61      	ldr	r2, [pc, #388]	; (800384c <DMA_SetConfig+0x26c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d00e      	beq.n	80036ea <DMA_SetConfig+0x10a>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a5f      	ldr	r2, [pc, #380]	; (8003850 <DMA_SetConfig+0x270>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d009      	beq.n	80036ea <DMA_SetConfig+0x10a>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a5e      	ldr	r2, [pc, #376]	; (8003854 <DMA_SetConfig+0x274>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d004      	beq.n	80036ea <DMA_SetConfig+0x10a>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a5c      	ldr	r2, [pc, #368]	; (8003858 <DMA_SetConfig+0x278>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d101      	bne.n	80036ee <DMA_SetConfig+0x10e>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <DMA_SetConfig+0x110>
 80036ee:	2300      	movs	r3, #0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00d      	beq.n	8003710 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80036fc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003702:	2b00      	cmp	r3, #0
 8003704:	d004      	beq.n	8003710 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800370e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a39      	ldr	r2, [pc, #228]	; (80037fc <DMA_SetConfig+0x21c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d04a      	beq.n	80037b0 <DMA_SetConfig+0x1d0>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a38      	ldr	r2, [pc, #224]	; (8003800 <DMA_SetConfig+0x220>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d045      	beq.n	80037b0 <DMA_SetConfig+0x1d0>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a36      	ldr	r2, [pc, #216]	; (8003804 <DMA_SetConfig+0x224>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d040      	beq.n	80037b0 <DMA_SetConfig+0x1d0>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a35      	ldr	r2, [pc, #212]	; (8003808 <DMA_SetConfig+0x228>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d03b      	beq.n	80037b0 <DMA_SetConfig+0x1d0>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a33      	ldr	r2, [pc, #204]	; (800380c <DMA_SetConfig+0x22c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d036      	beq.n	80037b0 <DMA_SetConfig+0x1d0>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a32      	ldr	r2, [pc, #200]	; (8003810 <DMA_SetConfig+0x230>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d031      	beq.n	80037b0 <DMA_SetConfig+0x1d0>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a30      	ldr	r2, [pc, #192]	; (8003814 <DMA_SetConfig+0x234>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d02c      	beq.n	80037b0 <DMA_SetConfig+0x1d0>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a2f      	ldr	r2, [pc, #188]	; (8003818 <DMA_SetConfig+0x238>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d027      	beq.n	80037b0 <DMA_SetConfig+0x1d0>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a2d      	ldr	r2, [pc, #180]	; (800381c <DMA_SetConfig+0x23c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d022      	beq.n	80037b0 <DMA_SetConfig+0x1d0>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a2c      	ldr	r2, [pc, #176]	; (8003820 <DMA_SetConfig+0x240>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d01d      	beq.n	80037b0 <DMA_SetConfig+0x1d0>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a2a      	ldr	r2, [pc, #168]	; (8003824 <DMA_SetConfig+0x244>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d018      	beq.n	80037b0 <DMA_SetConfig+0x1d0>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a29      	ldr	r2, [pc, #164]	; (8003828 <DMA_SetConfig+0x248>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d013      	beq.n	80037b0 <DMA_SetConfig+0x1d0>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a27      	ldr	r2, [pc, #156]	; (800382c <DMA_SetConfig+0x24c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d00e      	beq.n	80037b0 <DMA_SetConfig+0x1d0>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a26      	ldr	r2, [pc, #152]	; (8003830 <DMA_SetConfig+0x250>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d009      	beq.n	80037b0 <DMA_SetConfig+0x1d0>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a24      	ldr	r2, [pc, #144]	; (8003834 <DMA_SetConfig+0x254>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d004      	beq.n	80037b0 <DMA_SetConfig+0x1d0>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a23      	ldr	r2, [pc, #140]	; (8003838 <DMA_SetConfig+0x258>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d101      	bne.n	80037b4 <DMA_SetConfig+0x1d4>
 80037b0:	2301      	movs	r3, #1
 80037b2:	e000      	b.n	80037b6 <DMA_SetConfig+0x1d6>
 80037b4:	2300      	movs	r3, #0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d059      	beq.n	800386e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037be:	f003 031f 	and.w	r3, r3, #31
 80037c2:	223f      	movs	r2, #63	; 0x3f
 80037c4:	409a      	lsls	r2, r3
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037d8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2b40      	cmp	r3, #64	; 0x40
 80037e8:	d138      	bne.n	800385c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80037fa:	e086      	b.n	800390a <DMA_SetConfig+0x32a>
 80037fc:	40020010 	.word	0x40020010
 8003800:	40020028 	.word	0x40020028
 8003804:	40020040 	.word	0x40020040
 8003808:	40020058 	.word	0x40020058
 800380c:	40020070 	.word	0x40020070
 8003810:	40020088 	.word	0x40020088
 8003814:	400200a0 	.word	0x400200a0
 8003818:	400200b8 	.word	0x400200b8
 800381c:	40020410 	.word	0x40020410
 8003820:	40020428 	.word	0x40020428
 8003824:	40020440 	.word	0x40020440
 8003828:	40020458 	.word	0x40020458
 800382c:	40020470 	.word	0x40020470
 8003830:	40020488 	.word	0x40020488
 8003834:	400204a0 	.word	0x400204a0
 8003838:	400204b8 	.word	0x400204b8
 800383c:	58025408 	.word	0x58025408
 8003840:	5802541c 	.word	0x5802541c
 8003844:	58025430 	.word	0x58025430
 8003848:	58025444 	.word	0x58025444
 800384c:	58025458 	.word	0x58025458
 8003850:	5802546c 	.word	0x5802546c
 8003854:	58025480 	.word	0x58025480
 8003858:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	60da      	str	r2, [r3, #12]
}
 800386c:	e04d      	b.n	800390a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a29      	ldr	r2, [pc, #164]	; (8003918 <DMA_SetConfig+0x338>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d022      	beq.n	80038be <DMA_SetConfig+0x2de>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a27      	ldr	r2, [pc, #156]	; (800391c <DMA_SetConfig+0x33c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d01d      	beq.n	80038be <DMA_SetConfig+0x2de>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a26      	ldr	r2, [pc, #152]	; (8003920 <DMA_SetConfig+0x340>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d018      	beq.n	80038be <DMA_SetConfig+0x2de>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a24      	ldr	r2, [pc, #144]	; (8003924 <DMA_SetConfig+0x344>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d013      	beq.n	80038be <DMA_SetConfig+0x2de>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a23      	ldr	r2, [pc, #140]	; (8003928 <DMA_SetConfig+0x348>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00e      	beq.n	80038be <DMA_SetConfig+0x2de>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a21      	ldr	r2, [pc, #132]	; (800392c <DMA_SetConfig+0x34c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d009      	beq.n	80038be <DMA_SetConfig+0x2de>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a20      	ldr	r2, [pc, #128]	; (8003930 <DMA_SetConfig+0x350>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d004      	beq.n	80038be <DMA_SetConfig+0x2de>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a1e      	ldr	r2, [pc, #120]	; (8003934 <DMA_SetConfig+0x354>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d101      	bne.n	80038c2 <DMA_SetConfig+0x2e2>
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <DMA_SetConfig+0x2e4>
 80038c2:	2300      	movs	r3, #0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d020      	beq.n	800390a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038cc:	f003 031f 	and.w	r3, r3, #31
 80038d0:	2201      	movs	r2, #1
 80038d2:	409a      	lsls	r2, r3
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	2b40      	cmp	r3, #64	; 0x40
 80038e6:	d108      	bne.n	80038fa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	60da      	str	r2, [r3, #12]
}
 80038f8:	e007      	b.n	800390a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	60da      	str	r2, [r3, #12]
}
 800390a:	bf00      	nop
 800390c:	371c      	adds	r7, #28
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	58025408 	.word	0x58025408
 800391c:	5802541c 	.word	0x5802541c
 8003920:	58025430 	.word	0x58025430
 8003924:	58025444 	.word	0x58025444
 8003928:	58025458 	.word	0x58025458
 800392c:	5802546c 	.word	0x5802546c
 8003930:	58025480 	.word	0x58025480
 8003934:	58025494 	.word	0x58025494

08003938 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a42      	ldr	r2, [pc, #264]	; (8003a50 <DMA_CalcBaseAndBitshift+0x118>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d04a      	beq.n	80039e0 <DMA_CalcBaseAndBitshift+0xa8>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a41      	ldr	r2, [pc, #260]	; (8003a54 <DMA_CalcBaseAndBitshift+0x11c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d045      	beq.n	80039e0 <DMA_CalcBaseAndBitshift+0xa8>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a3f      	ldr	r2, [pc, #252]	; (8003a58 <DMA_CalcBaseAndBitshift+0x120>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d040      	beq.n	80039e0 <DMA_CalcBaseAndBitshift+0xa8>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a3e      	ldr	r2, [pc, #248]	; (8003a5c <DMA_CalcBaseAndBitshift+0x124>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d03b      	beq.n	80039e0 <DMA_CalcBaseAndBitshift+0xa8>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a3c      	ldr	r2, [pc, #240]	; (8003a60 <DMA_CalcBaseAndBitshift+0x128>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d036      	beq.n	80039e0 <DMA_CalcBaseAndBitshift+0xa8>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a3b      	ldr	r2, [pc, #236]	; (8003a64 <DMA_CalcBaseAndBitshift+0x12c>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d031      	beq.n	80039e0 <DMA_CalcBaseAndBitshift+0xa8>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a39      	ldr	r2, [pc, #228]	; (8003a68 <DMA_CalcBaseAndBitshift+0x130>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d02c      	beq.n	80039e0 <DMA_CalcBaseAndBitshift+0xa8>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a38      	ldr	r2, [pc, #224]	; (8003a6c <DMA_CalcBaseAndBitshift+0x134>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d027      	beq.n	80039e0 <DMA_CalcBaseAndBitshift+0xa8>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a36      	ldr	r2, [pc, #216]	; (8003a70 <DMA_CalcBaseAndBitshift+0x138>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d022      	beq.n	80039e0 <DMA_CalcBaseAndBitshift+0xa8>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a35      	ldr	r2, [pc, #212]	; (8003a74 <DMA_CalcBaseAndBitshift+0x13c>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d01d      	beq.n	80039e0 <DMA_CalcBaseAndBitshift+0xa8>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a33      	ldr	r2, [pc, #204]	; (8003a78 <DMA_CalcBaseAndBitshift+0x140>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d018      	beq.n	80039e0 <DMA_CalcBaseAndBitshift+0xa8>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a32      	ldr	r2, [pc, #200]	; (8003a7c <DMA_CalcBaseAndBitshift+0x144>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d013      	beq.n	80039e0 <DMA_CalcBaseAndBitshift+0xa8>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a30      	ldr	r2, [pc, #192]	; (8003a80 <DMA_CalcBaseAndBitshift+0x148>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00e      	beq.n	80039e0 <DMA_CalcBaseAndBitshift+0xa8>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a2f      	ldr	r2, [pc, #188]	; (8003a84 <DMA_CalcBaseAndBitshift+0x14c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d009      	beq.n	80039e0 <DMA_CalcBaseAndBitshift+0xa8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a2d      	ldr	r2, [pc, #180]	; (8003a88 <DMA_CalcBaseAndBitshift+0x150>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d004      	beq.n	80039e0 <DMA_CalcBaseAndBitshift+0xa8>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a2c      	ldr	r2, [pc, #176]	; (8003a8c <DMA_CalcBaseAndBitshift+0x154>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d101      	bne.n	80039e4 <DMA_CalcBaseAndBitshift+0xac>
 80039e0:	2301      	movs	r3, #1
 80039e2:	e000      	b.n	80039e6 <DMA_CalcBaseAndBitshift+0xae>
 80039e4:	2300      	movs	r3, #0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d024      	beq.n	8003a34 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	3b10      	subs	r3, #16
 80039f2:	4a27      	ldr	r2, [pc, #156]	; (8003a90 <DMA_CalcBaseAndBitshift+0x158>)
 80039f4:	fba2 2303 	umull	r2, r3, r2, r3
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	4a24      	ldr	r2, [pc, #144]	; (8003a94 <DMA_CalcBaseAndBitshift+0x15c>)
 8003a04:	5cd3      	ldrb	r3, [r2, r3]
 8003a06:	461a      	mov	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	d908      	bls.n	8003a24 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	4b1f      	ldr	r3, [pc, #124]	; (8003a98 <DMA_CalcBaseAndBitshift+0x160>)
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	1d1a      	adds	r2, r3, #4
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	659a      	str	r2, [r3, #88]	; 0x58
 8003a22:	e00d      	b.n	8003a40 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	4b1b      	ldr	r3, [pc, #108]	; (8003a98 <DMA_CalcBaseAndBitshift+0x160>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6593      	str	r3, [r2, #88]	; 0x58
 8003a32:	e005      	b.n	8003a40 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	40020010 	.word	0x40020010
 8003a54:	40020028 	.word	0x40020028
 8003a58:	40020040 	.word	0x40020040
 8003a5c:	40020058 	.word	0x40020058
 8003a60:	40020070 	.word	0x40020070
 8003a64:	40020088 	.word	0x40020088
 8003a68:	400200a0 	.word	0x400200a0
 8003a6c:	400200b8 	.word	0x400200b8
 8003a70:	40020410 	.word	0x40020410
 8003a74:	40020428 	.word	0x40020428
 8003a78:	40020440 	.word	0x40020440
 8003a7c:	40020458 	.word	0x40020458
 8003a80:	40020470 	.word	0x40020470
 8003a84:	40020488 	.word	0x40020488
 8003a88:	400204a0 	.word	0x400204a0
 8003a8c:	400204b8 	.word	0x400204b8
 8003a90:	aaaaaaab 	.word	0xaaaaaaab
 8003a94:	0800ae88 	.word	0x0800ae88
 8003a98:	fffffc00 	.word	0xfffffc00

08003a9c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d120      	bne.n	8003af2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d858      	bhi.n	8003b6a <DMA_CheckFifoParam+0xce>
 8003ab8:	a201      	add	r2, pc, #4	; (adr r2, 8003ac0 <DMA_CheckFifoParam+0x24>)
 8003aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abe:	bf00      	nop
 8003ac0:	08003ad1 	.word	0x08003ad1
 8003ac4:	08003ae3 	.word	0x08003ae3
 8003ac8:	08003ad1 	.word	0x08003ad1
 8003acc:	08003b6b 	.word	0x08003b6b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d048      	beq.n	8003b6e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ae0:	e045      	b.n	8003b6e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003aea:	d142      	bne.n	8003b72 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003af0:	e03f      	b.n	8003b72 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003afa:	d123      	bne.n	8003b44 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d838      	bhi.n	8003b76 <DMA_CheckFifoParam+0xda>
 8003b04:	a201      	add	r2, pc, #4	; (adr r2, 8003b0c <DMA_CheckFifoParam+0x70>)
 8003b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0a:	bf00      	nop
 8003b0c:	08003b1d 	.word	0x08003b1d
 8003b10:	08003b23 	.word	0x08003b23
 8003b14:	08003b1d 	.word	0x08003b1d
 8003b18:	08003b35 	.word	0x08003b35
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	73fb      	strb	r3, [r7, #15]
        break;
 8003b20:	e030      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d025      	beq.n	8003b7a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b32:	e022      	b.n	8003b7a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b3c:	d11f      	bne.n	8003b7e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b42:	e01c      	b.n	8003b7e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d902      	bls.n	8003b52 <DMA_CheckFifoParam+0xb6>
 8003b4c:	2b03      	cmp	r3, #3
 8003b4e:	d003      	beq.n	8003b58 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003b50:	e018      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	73fb      	strb	r3, [r7, #15]
        break;
 8003b56:	e015      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00e      	beq.n	8003b82 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	73fb      	strb	r3, [r7, #15]
    break;
 8003b68:	e00b      	b.n	8003b82 <DMA_CheckFifoParam+0xe6>
        break;
 8003b6a:	bf00      	nop
 8003b6c:	e00a      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
        break;
 8003b6e:	bf00      	nop
 8003b70:	e008      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
        break;
 8003b72:	bf00      	nop
 8003b74:	e006      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
        break;
 8003b76:	bf00      	nop
 8003b78:	e004      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
        break;
 8003b7a:	bf00      	nop
 8003b7c:	e002      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
        break;
 8003b7e:	bf00      	nop
 8003b80:	e000      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
    break;
 8003b82:	bf00      	nop
    }
  }

  return status;
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop

08003b94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a38      	ldr	r2, [pc, #224]	; (8003c88 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d022      	beq.n	8003bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a36      	ldr	r2, [pc, #216]	; (8003c8c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d01d      	beq.n	8003bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a35      	ldr	r2, [pc, #212]	; (8003c90 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d018      	beq.n	8003bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a33      	ldr	r2, [pc, #204]	; (8003c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d013      	beq.n	8003bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a32      	ldr	r2, [pc, #200]	; (8003c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00e      	beq.n	8003bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a30      	ldr	r2, [pc, #192]	; (8003c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d009      	beq.n	8003bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a2f      	ldr	r2, [pc, #188]	; (8003ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d004      	beq.n	8003bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a2d      	ldr	r2, [pc, #180]	; (8003ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d101      	bne.n	8003bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d01a      	beq.n	8003c32 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	3b08      	subs	r3, #8
 8003c04:	4a28      	ldr	r2, [pc, #160]	; (8003ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003c06:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0a:	091b      	lsrs	r3, r3, #4
 8003c0c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	4b26      	ldr	r3, [pc, #152]	; (8003cac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003c12:	4413      	add	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	461a      	mov	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a24      	ldr	r2, [pc, #144]	; (8003cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003c20:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f003 031f 	and.w	r3, r3, #31
 8003c28:	2201      	movs	r2, #1
 8003c2a:	409a      	lsls	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003c30:	e024      	b.n	8003c7c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	3b10      	subs	r3, #16
 8003c3a:	4a1e      	ldr	r2, [pc, #120]	; (8003cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c40:	091b      	lsrs	r3, r3, #4
 8003c42:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	4a1c      	ldr	r2, [pc, #112]	; (8003cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d806      	bhi.n	8003c5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4a1b      	ldr	r2, [pc, #108]	; (8003cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d902      	bls.n	8003c5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	3308      	adds	r3, #8
 8003c58:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	4b18      	ldr	r3, [pc, #96]	; (8003cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003c5e:	4413      	add	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	461a      	mov	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a16      	ldr	r2, [pc, #88]	; (8003cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003c6c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f003 031f 	and.w	r3, r3, #31
 8003c74:	2201      	movs	r2, #1
 8003c76:	409a      	lsls	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003c7c:	bf00      	nop
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	58025408 	.word	0x58025408
 8003c8c:	5802541c 	.word	0x5802541c
 8003c90:	58025430 	.word	0x58025430
 8003c94:	58025444 	.word	0x58025444
 8003c98:	58025458 	.word	0x58025458
 8003c9c:	5802546c 	.word	0x5802546c
 8003ca0:	58025480 	.word	0x58025480
 8003ca4:	58025494 	.word	0x58025494
 8003ca8:	cccccccd 	.word	0xcccccccd
 8003cac:	16009600 	.word	0x16009600
 8003cb0:	58025880 	.word	0x58025880
 8003cb4:	aaaaaaab 	.word	0xaaaaaaab
 8003cb8:	400204b8 	.word	0x400204b8
 8003cbc:	4002040f 	.word	0x4002040f
 8003cc0:	10008200 	.word	0x10008200
 8003cc4:	40020880 	.word	0x40020880

08003cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d04a      	beq.n	8003d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d847      	bhi.n	8003d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a25      	ldr	r2, [pc, #148]	; (8003d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d022      	beq.n	8003d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a24      	ldr	r2, [pc, #144]	; (8003d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d01d      	beq.n	8003d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a22      	ldr	r2, [pc, #136]	; (8003d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d018      	beq.n	8003d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a21      	ldr	r2, [pc, #132]	; (8003d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d013      	beq.n	8003d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a1f      	ldr	r2, [pc, #124]	; (8003d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00e      	beq.n	8003d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a1e      	ldr	r2, [pc, #120]	; (8003d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d009      	beq.n	8003d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a1c      	ldr	r2, [pc, #112]	; (8003d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d004      	beq.n	8003d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a1b      	ldr	r2, [pc, #108]	; (8003d9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d101      	bne.n	8003d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	4b17      	ldr	r3, [pc, #92]	; (8003da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003d42:	4413      	add	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	461a      	mov	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a15      	ldr	r2, [pc, #84]	; (8003da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003d50:	671a      	str	r2, [r3, #112]	; 0x70
 8003d52:	e009      	b.n	8003d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4b14      	ldr	r3, [pc, #80]	; (8003da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a11      	ldr	r2, [pc, #68]	; (8003dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003d66:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	409a      	lsls	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003d74:	bf00      	nop
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	58025408 	.word	0x58025408
 8003d84:	5802541c 	.word	0x5802541c
 8003d88:	58025430 	.word	0x58025430
 8003d8c:	58025444 	.word	0x58025444
 8003d90:	58025458 	.word	0x58025458
 8003d94:	5802546c 	.word	0x5802546c
 8003d98:	58025480 	.word	0x58025480
 8003d9c:	58025494 	.word	0x58025494
 8003da0:	1600963f 	.word	0x1600963f
 8003da4:	58025940 	.word	0x58025940
 8003da8:	1000823f 	.word	0x1000823f
 8003dac:	40020940 	.word	0x40020940

08003db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b089      	sub	sp, #36	; 0x24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003dbe:	4b89      	ldr	r3, [pc, #548]	; (8003fe4 <HAL_GPIO_Init+0x234>)
 8003dc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003dc2:	e194      	b.n	80040ee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	2101      	movs	r1, #1
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 8186 	beq.w	80040e8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f003 0303 	and.w	r3, r3, #3
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d005      	beq.n	8003df4 <HAL_GPIO_Init+0x44>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f003 0303 	and.w	r3, r3, #3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d130      	bne.n	8003e56 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	2203      	movs	r2, #3
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	43db      	mvns	r3, r3
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	43db      	mvns	r3, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4013      	ands	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	091b      	lsrs	r3, r3, #4
 8003e40:	f003 0201 	and.w	r2, r3, #1
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	d017      	beq.n	8003e92 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	2203      	movs	r2, #3
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	43db      	mvns	r3, r3
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	4013      	ands	r3, r2
 8003e78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d123      	bne.n	8003ee6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	08da      	lsrs	r2, r3, #3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3208      	adds	r2, #8
 8003ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	220f      	movs	r2, #15
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	43db      	mvns	r3, r3
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	08da      	lsrs	r2, r3, #3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3208      	adds	r2, #8
 8003ee0:	69b9      	ldr	r1, [r7, #24]
 8003ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4013      	ands	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f003 0203 	and.w	r2, r3, #3
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 80e0 	beq.w	80040e8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f28:	4b2f      	ldr	r3, [pc, #188]	; (8003fe8 <HAL_GPIO_Init+0x238>)
 8003f2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f2e:	4a2e      	ldr	r2, [pc, #184]	; (8003fe8 <HAL_GPIO_Init+0x238>)
 8003f30:	f043 0302 	orr.w	r3, r3, #2
 8003f34:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003f38:	4b2b      	ldr	r3, [pc, #172]	; (8003fe8 <HAL_GPIO_Init+0x238>)
 8003f3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f46:	4a29      	ldr	r2, [pc, #164]	; (8003fec <HAL_GPIO_Init+0x23c>)
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	089b      	lsrs	r3, r3, #2
 8003f4c:	3302      	adds	r3, #2
 8003f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	220f      	movs	r2, #15
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	43db      	mvns	r3, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4013      	ands	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a20      	ldr	r2, [pc, #128]	; (8003ff0 <HAL_GPIO_Init+0x240>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d052      	beq.n	8004018 <HAL_GPIO_Init+0x268>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a1f      	ldr	r2, [pc, #124]	; (8003ff4 <HAL_GPIO_Init+0x244>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d031      	beq.n	8003fde <HAL_GPIO_Init+0x22e>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a1e      	ldr	r2, [pc, #120]	; (8003ff8 <HAL_GPIO_Init+0x248>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d02b      	beq.n	8003fda <HAL_GPIO_Init+0x22a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a1d      	ldr	r2, [pc, #116]	; (8003ffc <HAL_GPIO_Init+0x24c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d025      	beq.n	8003fd6 <HAL_GPIO_Init+0x226>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a1c      	ldr	r2, [pc, #112]	; (8004000 <HAL_GPIO_Init+0x250>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d01f      	beq.n	8003fd2 <HAL_GPIO_Init+0x222>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a1b      	ldr	r2, [pc, #108]	; (8004004 <HAL_GPIO_Init+0x254>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d019      	beq.n	8003fce <HAL_GPIO_Init+0x21e>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a1a      	ldr	r2, [pc, #104]	; (8004008 <HAL_GPIO_Init+0x258>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <HAL_GPIO_Init+0x21a>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a19      	ldr	r2, [pc, #100]	; (800400c <HAL_GPIO_Init+0x25c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00d      	beq.n	8003fc6 <HAL_GPIO_Init+0x216>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a18      	ldr	r2, [pc, #96]	; (8004010 <HAL_GPIO_Init+0x260>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d007      	beq.n	8003fc2 <HAL_GPIO_Init+0x212>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a17      	ldr	r2, [pc, #92]	; (8004014 <HAL_GPIO_Init+0x264>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d101      	bne.n	8003fbe <HAL_GPIO_Init+0x20e>
 8003fba:	2309      	movs	r3, #9
 8003fbc:	e02d      	b.n	800401a <HAL_GPIO_Init+0x26a>
 8003fbe:	230a      	movs	r3, #10
 8003fc0:	e02b      	b.n	800401a <HAL_GPIO_Init+0x26a>
 8003fc2:	2308      	movs	r3, #8
 8003fc4:	e029      	b.n	800401a <HAL_GPIO_Init+0x26a>
 8003fc6:	2307      	movs	r3, #7
 8003fc8:	e027      	b.n	800401a <HAL_GPIO_Init+0x26a>
 8003fca:	2306      	movs	r3, #6
 8003fcc:	e025      	b.n	800401a <HAL_GPIO_Init+0x26a>
 8003fce:	2305      	movs	r3, #5
 8003fd0:	e023      	b.n	800401a <HAL_GPIO_Init+0x26a>
 8003fd2:	2304      	movs	r3, #4
 8003fd4:	e021      	b.n	800401a <HAL_GPIO_Init+0x26a>
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e01f      	b.n	800401a <HAL_GPIO_Init+0x26a>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e01d      	b.n	800401a <HAL_GPIO_Init+0x26a>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e01b      	b.n	800401a <HAL_GPIO_Init+0x26a>
 8003fe2:	bf00      	nop
 8003fe4:	58000080 	.word	0x58000080
 8003fe8:	58024400 	.word	0x58024400
 8003fec:	58000400 	.word	0x58000400
 8003ff0:	58020000 	.word	0x58020000
 8003ff4:	58020400 	.word	0x58020400
 8003ff8:	58020800 	.word	0x58020800
 8003ffc:	58020c00 	.word	0x58020c00
 8004000:	58021000 	.word	0x58021000
 8004004:	58021400 	.word	0x58021400
 8004008:	58021800 	.word	0x58021800
 800400c:	58021c00 	.word	0x58021c00
 8004010:	58022000 	.word	0x58022000
 8004014:	58022400 	.word	0x58022400
 8004018:	2300      	movs	r3, #0
 800401a:	69fa      	ldr	r2, [r7, #28]
 800401c:	f002 0203 	and.w	r2, r2, #3
 8004020:	0092      	lsls	r2, r2, #2
 8004022:	4093      	lsls	r3, r2
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	4313      	orrs	r3, r2
 8004028:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800402a:	4938      	ldr	r1, [pc, #224]	; (800410c <HAL_GPIO_Init+0x35c>)
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	089b      	lsrs	r3, r3, #2
 8004030:	3302      	adds	r3, #2
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	43db      	mvns	r3, r3
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4013      	ands	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800405e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	43db      	mvns	r3, r3
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	4013      	ands	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800408c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	43db      	mvns	r3, r3
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	4013      	ands	r3, r2
 80040a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	43db      	mvns	r3, r3
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	4013      	ands	r3, r2
 80040cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	4313      	orrs	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	3301      	adds	r3, #1
 80040ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	fa22 f303 	lsr.w	r3, r2, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f47f ae63 	bne.w	8003dc4 <HAL_GPIO_Init+0x14>
  }
}
 80040fe:	bf00      	nop
 8004100:	bf00      	nop
 8004102:	3724      	adds	r7, #36	; 0x24
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	58000400 	.word	0x58000400

08004110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	460b      	mov	r3, r1
 800411a:	807b      	strh	r3, [r7, #2]
 800411c:	4613      	mov	r3, r2
 800411e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004120:	787b      	ldrb	r3, [r7, #1]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004126:	887a      	ldrh	r2, [r7, #2]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800412c:	e003      	b.n	8004136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800412e:	887b      	ldrh	r3, [r7, #2]
 8004130:	041a      	lsls	r2, r3, #16
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	619a      	str	r2, [r3, #24]
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
	...

08004144 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e07f      	b.n	8004256 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d106      	bne.n	8004170 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7fd f800 	bl	8001170 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2224      	movs	r2, #36	; 0x24
 8004174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 0201 	bic.w	r2, r2, #1
 8004186:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004194:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d107      	bne.n	80041be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041ba:	609a      	str	r2, [r3, #8]
 80041bc:	e006      	b.n	80041cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80041ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d104      	bne.n	80041de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6859      	ldr	r1, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	4b1d      	ldr	r3, [pc, #116]	; (8004260 <HAL_I2C_Init+0x11c>)
 80041ea:	430b      	orrs	r3, r1
 80041ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691a      	ldr	r2, [r3, #16]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	69d9      	ldr	r1, [r3, #28]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1a      	ldr	r2, [r3, #32]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0201 	orr.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2220      	movs	r2, #32
 8004242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	02008000 	.word	0x02008000

08004264 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af02      	add	r7, sp, #8
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	607a      	str	r2, [r7, #4]
 800426e:	461a      	mov	r2, r3
 8004270:	460b      	mov	r3, r1
 8004272:	817b      	strh	r3, [r7, #10]
 8004274:	4613      	mov	r3, r2
 8004276:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b20      	cmp	r3, #32
 8004282:	f040 80da 	bne.w	800443a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_I2C_Master_Transmit+0x30>
 8004290:	2302      	movs	r3, #2
 8004292:	e0d3      	b.n	800443c <HAL_I2C_Master_Transmit+0x1d8>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800429c:	f7fd fb64 	bl	8001968 <HAL_GetTick>
 80042a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	2319      	movs	r3, #25
 80042a8:	2201      	movs	r2, #1
 80042aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 fbc6 	bl	8004a40 <I2C_WaitOnFlagUntilTimeout>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e0be      	b.n	800443c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2221      	movs	r2, #33	; 0x21
 80042c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2210      	movs	r2, #16
 80042ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	893a      	ldrh	r2, [r7, #8]
 80042de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	2bff      	cmp	r3, #255	; 0xff
 80042ee:	d90e      	bls.n	800430e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	22ff      	movs	r2, #255	; 0xff
 80042f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	8979      	ldrh	r1, [r7, #10]
 80042fe:	4b51      	ldr	r3, [pc, #324]	; (8004444 <HAL_I2C_Master_Transmit+0x1e0>)
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 fd54 	bl	8004db4 <I2C_TransferConfig>
 800430c:	e06c      	b.n	80043e8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004312:	b29a      	uxth	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431c:	b2da      	uxtb	r2, r3
 800431e:	8979      	ldrh	r1, [r7, #10]
 8004320:	4b48      	ldr	r3, [pc, #288]	; (8004444 <HAL_I2C_Master_Transmit+0x1e0>)
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 fd43 	bl	8004db4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800432e:	e05b      	b.n	80043e8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	6a39      	ldr	r1, [r7, #32]
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 fbd2 	bl	8004ade <I2C_WaitOnTXISFlagUntilTimeout>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e07b      	b.n	800443c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	781a      	ldrb	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435e:	b29b      	uxth	r3, r3
 8004360:	3b01      	subs	r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436c:	3b01      	subs	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d034      	beq.n	80043e8 <HAL_I2C_Master_Transmit+0x184>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004382:	2b00      	cmp	r3, #0
 8004384:	d130      	bne.n	80043e8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	2200      	movs	r2, #0
 800438e:	2180      	movs	r1, #128	; 0x80
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 fb55 	bl	8004a40 <I2C_WaitOnFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e04d      	b.n	800443c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	2bff      	cmp	r3, #255	; 0xff
 80043a8:	d90e      	bls.n	80043c8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	22ff      	movs	r2, #255	; 0xff
 80043ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	8979      	ldrh	r1, [r7, #10]
 80043b8:	2300      	movs	r3, #0
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 fcf7 	bl	8004db4 <I2C_TransferConfig>
 80043c6:	e00f      	b.n	80043e8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	8979      	ldrh	r1, [r7, #10]
 80043da:	2300      	movs	r3, #0
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 fce6 	bl	8004db4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d19e      	bne.n	8004330 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	6a39      	ldr	r1, [r7, #32]
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 fbb8 	bl	8004b6c <I2C_WaitOnSTOPFlagUntilTimeout>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e01a      	b.n	800443c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2220      	movs	r2, #32
 800440c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6859      	ldr	r1, [r3, #4]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <HAL_I2C_Master_Transmit+0x1e4>)
 800441a:	400b      	ands	r3, r1
 800441c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2220      	movs	r2, #32
 8004422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004436:	2300      	movs	r3, #0
 8004438:	e000      	b.n	800443c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800443a:	2302      	movs	r3, #2
  }
}
 800443c:	4618      	mov	r0, r3
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	80002000 	.word	0x80002000
 8004448:	fe00e800 	.word	0xfe00e800

0800444c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b088      	sub	sp, #32
 8004450:	af02      	add	r7, sp, #8
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	4608      	mov	r0, r1
 8004456:	4611      	mov	r1, r2
 8004458:	461a      	mov	r2, r3
 800445a:	4603      	mov	r3, r0
 800445c:	817b      	strh	r3, [r7, #10]
 800445e:	460b      	mov	r3, r1
 8004460:	813b      	strh	r3, [r7, #8]
 8004462:	4613      	mov	r3, r2
 8004464:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b20      	cmp	r3, #32
 8004470:	f040 80f9 	bne.w	8004666 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <HAL_I2C_Mem_Write+0x34>
 800447a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800447c:	2b00      	cmp	r3, #0
 800447e:	d105      	bne.n	800448c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004486:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e0ed      	b.n	8004668 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004492:	2b01      	cmp	r3, #1
 8004494:	d101      	bne.n	800449a <HAL_I2C_Mem_Write+0x4e>
 8004496:	2302      	movs	r3, #2
 8004498:	e0e6      	b.n	8004668 <HAL_I2C_Mem_Write+0x21c>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044a2:	f7fd fa61 	bl	8001968 <HAL_GetTick>
 80044a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	2319      	movs	r3, #25
 80044ae:	2201      	movs	r2, #1
 80044b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 fac3 	bl	8004a40 <I2C_WaitOnFlagUntilTimeout>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e0d1      	b.n	8004668 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2221      	movs	r2, #33	; 0x21
 80044c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2240      	movs	r2, #64	; 0x40
 80044d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6a3a      	ldr	r2, [r7, #32]
 80044de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044ec:	88f8      	ldrh	r0, [r7, #6]
 80044ee:	893a      	ldrh	r2, [r7, #8]
 80044f0:	8979      	ldrh	r1, [r7, #10]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	9301      	str	r3, [sp, #4]
 80044f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	4603      	mov	r3, r0
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 f9d3 	bl	80048a8 <I2C_RequestMemoryWrite>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e0a9      	b.n	8004668 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004518:	b29b      	uxth	r3, r3
 800451a:	2bff      	cmp	r3, #255	; 0xff
 800451c:	d90e      	bls.n	800453c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	22ff      	movs	r2, #255	; 0xff
 8004522:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004528:	b2da      	uxtb	r2, r3
 800452a:	8979      	ldrh	r1, [r7, #10]
 800452c:	2300      	movs	r3, #0
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 fc3d 	bl	8004db4 <I2C_TransferConfig>
 800453a:	e00f      	b.n	800455c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454a:	b2da      	uxtb	r2, r3
 800454c:	8979      	ldrh	r1, [r7, #10]
 800454e:	2300      	movs	r3, #0
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 fc2c 	bl	8004db4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 fabc 	bl	8004ade <I2C_WaitOnTXISFlagUntilTimeout>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e07b      	b.n	8004668 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	781a      	ldrb	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458a:	b29b      	uxth	r3, r3
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d034      	beq.n	8004614 <HAL_I2C_Mem_Write+0x1c8>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d130      	bne.n	8004614 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b8:	2200      	movs	r2, #0
 80045ba:	2180      	movs	r1, #128	; 0x80
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 fa3f 	bl	8004a40 <I2C_WaitOnFlagUntilTimeout>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e04d      	b.n	8004668 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2bff      	cmp	r3, #255	; 0xff
 80045d4:	d90e      	bls.n	80045f4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	22ff      	movs	r2, #255	; 0xff
 80045da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	8979      	ldrh	r1, [r7, #10]
 80045e4:	2300      	movs	r3, #0
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 fbe1 	bl	8004db4 <I2C_TransferConfig>
 80045f2:	e00f      	b.n	8004614 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004602:	b2da      	uxtb	r2, r3
 8004604:	8979      	ldrh	r1, [r7, #10]
 8004606:	2300      	movs	r3, #0
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 fbd0 	bl	8004db4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d19e      	bne.n	800455c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 faa2 	bl	8004b6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e01a      	b.n	8004668 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2220      	movs	r2, #32
 8004638:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6859      	ldr	r1, [r3, #4]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <HAL_I2C_Mem_Write+0x224>)
 8004646:	400b      	ands	r3, r1
 8004648:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2220      	movs	r2, #32
 800464e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004662:	2300      	movs	r3, #0
 8004664:	e000      	b.n	8004668 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004666:	2302      	movs	r3, #2
  }
}
 8004668:	4618      	mov	r0, r3
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	fe00e800 	.word	0xfe00e800

08004674 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b088      	sub	sp, #32
 8004678:	af02      	add	r7, sp, #8
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	4608      	mov	r0, r1
 800467e:	4611      	mov	r1, r2
 8004680:	461a      	mov	r2, r3
 8004682:	4603      	mov	r3, r0
 8004684:	817b      	strh	r3, [r7, #10]
 8004686:	460b      	mov	r3, r1
 8004688:	813b      	strh	r3, [r7, #8]
 800468a:	4613      	mov	r3, r2
 800468c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b20      	cmp	r3, #32
 8004698:	f040 80fd 	bne.w	8004896 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <HAL_I2C_Mem_Read+0x34>
 80046a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d105      	bne.n	80046b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e0f1      	b.n	8004898 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_I2C_Mem_Read+0x4e>
 80046be:	2302      	movs	r3, #2
 80046c0:	e0ea      	b.n	8004898 <HAL_I2C_Mem_Read+0x224>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046ca:	f7fd f94d 	bl	8001968 <HAL_GetTick>
 80046ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	2319      	movs	r3, #25
 80046d6:	2201      	movs	r2, #1
 80046d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f9af 	bl	8004a40 <I2C_WaitOnFlagUntilTimeout>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e0d5      	b.n	8004898 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2222      	movs	r2, #34	; 0x22
 80046f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2240      	movs	r2, #64	; 0x40
 80046f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6a3a      	ldr	r2, [r7, #32]
 8004706:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800470c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004714:	88f8      	ldrh	r0, [r7, #6]
 8004716:	893a      	ldrh	r2, [r7, #8]
 8004718:	8979      	ldrh	r1, [r7, #10]
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	9301      	str	r3, [sp, #4]
 800471e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	4603      	mov	r3, r0
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f913 	bl	8004950 <I2C_RequestMemoryRead>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e0ad      	b.n	8004898 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004740:	b29b      	uxth	r3, r3
 8004742:	2bff      	cmp	r3, #255	; 0xff
 8004744:	d90e      	bls.n	8004764 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	22ff      	movs	r2, #255	; 0xff
 800474a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004750:	b2da      	uxtb	r2, r3
 8004752:	8979      	ldrh	r1, [r7, #10]
 8004754:	4b52      	ldr	r3, [pc, #328]	; (80048a0 <HAL_I2C_Mem_Read+0x22c>)
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 fb29 	bl	8004db4 <I2C_TransferConfig>
 8004762:	e00f      	b.n	8004784 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004768:	b29a      	uxth	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004772:	b2da      	uxtb	r2, r3
 8004774:	8979      	ldrh	r1, [r7, #10]
 8004776:	4b4a      	ldr	r3, [pc, #296]	; (80048a0 <HAL_I2C_Mem_Read+0x22c>)
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 fb18 	bl	8004db4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478a:	2200      	movs	r2, #0
 800478c:	2104      	movs	r1, #4
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 f956 	bl	8004a40 <I2C_WaitOnFlagUntilTimeout>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e07c      	b.n	8004898 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d034      	beq.n	8004844 <HAL_I2C_Mem_Read+0x1d0>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d130      	bne.n	8004844 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e8:	2200      	movs	r2, #0
 80047ea:	2180      	movs	r1, #128	; 0x80
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 f927 	bl	8004a40 <I2C_WaitOnFlagUntilTimeout>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e04d      	b.n	8004898 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004800:	b29b      	uxth	r3, r3
 8004802:	2bff      	cmp	r3, #255	; 0xff
 8004804:	d90e      	bls.n	8004824 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	22ff      	movs	r2, #255	; 0xff
 800480a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004810:	b2da      	uxtb	r2, r3
 8004812:	8979      	ldrh	r1, [r7, #10]
 8004814:	2300      	movs	r3, #0
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 fac9 	bl	8004db4 <I2C_TransferConfig>
 8004822:	e00f      	b.n	8004844 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004832:	b2da      	uxtb	r2, r3
 8004834:	8979      	ldrh	r1, [r7, #10]
 8004836:	2300      	movs	r3, #0
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 fab8 	bl	8004db4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004848:	b29b      	uxth	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d19a      	bne.n	8004784 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 f98a 	bl	8004b6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e01a      	b.n	8004898 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2220      	movs	r2, #32
 8004868:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6859      	ldr	r1, [r3, #4]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <HAL_I2C_Mem_Read+0x230>)
 8004876:	400b      	ands	r3, r1
 8004878:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	e000      	b.n	8004898 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004896:	2302      	movs	r3, #2
  }
}
 8004898:	4618      	mov	r0, r3
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	80002400 	.word	0x80002400
 80048a4:	fe00e800 	.word	0xfe00e800

080048a8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af02      	add	r7, sp, #8
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	4608      	mov	r0, r1
 80048b2:	4611      	mov	r1, r2
 80048b4:	461a      	mov	r2, r3
 80048b6:	4603      	mov	r3, r0
 80048b8:	817b      	strh	r3, [r7, #10]
 80048ba:	460b      	mov	r3, r1
 80048bc:	813b      	strh	r3, [r7, #8]
 80048be:	4613      	mov	r3, r2
 80048c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80048c2:	88fb      	ldrh	r3, [r7, #6]
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	8979      	ldrh	r1, [r7, #10]
 80048c8:	4b20      	ldr	r3, [pc, #128]	; (800494c <I2C_RequestMemoryWrite+0xa4>)
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 fa6f 	bl	8004db4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048d6:	69fa      	ldr	r2, [r7, #28]
 80048d8:	69b9      	ldr	r1, [r7, #24]
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 f8ff 	bl	8004ade <I2C_WaitOnTXISFlagUntilTimeout>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e02c      	b.n	8004944 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048ea:	88fb      	ldrh	r3, [r7, #6]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d105      	bne.n	80048fc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048f0:	893b      	ldrh	r3, [r7, #8]
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	629a      	str	r2, [r3, #40]	; 0x28
 80048fa:	e015      	b.n	8004928 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80048fc:	893b      	ldrh	r3, [r7, #8]
 80048fe:	0a1b      	lsrs	r3, r3, #8
 8004900:	b29b      	uxth	r3, r3
 8004902:	b2da      	uxtb	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800490a:	69fa      	ldr	r2, [r7, #28]
 800490c:	69b9      	ldr	r1, [r7, #24]
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 f8e5 	bl	8004ade <I2C_WaitOnTXISFlagUntilTimeout>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e012      	b.n	8004944 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800491e:	893b      	ldrh	r3, [r7, #8]
 8004920:	b2da      	uxtb	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	2200      	movs	r2, #0
 8004930:	2180      	movs	r1, #128	; 0x80
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 f884 	bl	8004a40 <I2C_WaitOnFlagUntilTimeout>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	80002000 	.word	0x80002000

08004950 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af02      	add	r7, sp, #8
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	4608      	mov	r0, r1
 800495a:	4611      	mov	r1, r2
 800495c:	461a      	mov	r2, r3
 800495e:	4603      	mov	r3, r0
 8004960:	817b      	strh	r3, [r7, #10]
 8004962:	460b      	mov	r3, r1
 8004964:	813b      	strh	r3, [r7, #8]
 8004966:	4613      	mov	r3, r2
 8004968:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800496a:	88fb      	ldrh	r3, [r7, #6]
 800496c:	b2da      	uxtb	r2, r3
 800496e:	8979      	ldrh	r1, [r7, #10]
 8004970:	4b20      	ldr	r3, [pc, #128]	; (80049f4 <I2C_RequestMemoryRead+0xa4>)
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	2300      	movs	r3, #0
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 fa1c 	bl	8004db4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800497c:	69fa      	ldr	r2, [r7, #28]
 800497e:	69b9      	ldr	r1, [r7, #24]
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 f8ac 	bl	8004ade <I2C_WaitOnTXISFlagUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e02c      	b.n	80049ea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004990:	88fb      	ldrh	r3, [r7, #6]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d105      	bne.n	80049a2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004996:	893b      	ldrh	r3, [r7, #8]
 8004998:	b2da      	uxtb	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	629a      	str	r2, [r3, #40]	; 0x28
 80049a0:	e015      	b.n	80049ce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80049a2:	893b      	ldrh	r3, [r7, #8]
 80049a4:	0a1b      	lsrs	r3, r3, #8
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049b0:	69fa      	ldr	r2, [r7, #28]
 80049b2:	69b9      	ldr	r1, [r7, #24]
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 f892 	bl	8004ade <I2C_WaitOnTXISFlagUntilTimeout>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e012      	b.n	80049ea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049c4:	893b      	ldrh	r3, [r7, #8]
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	2200      	movs	r2, #0
 80049d6:	2140      	movs	r1, #64	; 0x40
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f831 	bl	8004a40 <I2C_WaitOnFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e000      	b.n	80049ea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	80002000 	.word	0x80002000

080049f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d103      	bne.n	8004a16 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2200      	movs	r2, #0
 8004a14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d007      	beq.n	8004a34 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699a      	ldr	r2, [r3, #24]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0201 	orr.w	r2, r2, #1
 8004a32:	619a      	str	r2, [r3, #24]
  }
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	603b      	str	r3, [r7, #0]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a50:	e031      	b.n	8004ab6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a58:	d02d      	beq.n	8004ab6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a5a:	f7fc ff85 	bl	8001968 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d302      	bcc.n	8004a70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d122      	bne.n	8004ab6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699a      	ldr	r2, [r3, #24]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	bf0c      	ite	eq
 8004a80:	2301      	moveq	r3, #1
 8004a82:	2300      	movne	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	461a      	mov	r2, r3
 8004a88:	79fb      	ldrb	r3, [r7, #7]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d113      	bne.n	8004ab6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a92:	f043 0220 	orr.w	r2, r3, #32
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e00f      	b.n	8004ad6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	699a      	ldr	r2, [r3, #24]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	bf0c      	ite	eq
 8004ac6:	2301      	moveq	r3, #1
 8004ac8:	2300      	movne	r3, #0
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	461a      	mov	r2, r3
 8004ace:	79fb      	ldrb	r3, [r7, #7]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d0be      	beq.n	8004a52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b084      	sub	sp, #16
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	60f8      	str	r0, [r7, #12]
 8004ae6:	60b9      	str	r1, [r7, #8]
 8004ae8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004aea:	e033      	b.n	8004b54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	68b9      	ldr	r1, [r7, #8]
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 f87f 	bl	8004bf4 <I2C_IsErrorOccurred>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e031      	b.n	8004b64 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b06:	d025      	beq.n	8004b54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b08:	f7fc ff2e 	bl	8001968 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d302      	bcc.n	8004b1e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d11a      	bne.n	8004b54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d013      	beq.n	8004b54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b30:	f043 0220 	orr.w	r2, r3, #32
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e007      	b.n	8004b64 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d1c4      	bne.n	8004aec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b78:	e02f      	b.n	8004bda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	68b9      	ldr	r1, [r7, #8]
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 f838 	bl	8004bf4 <I2C_IsErrorOccurred>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e02d      	b.n	8004bea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b8e:	f7fc feeb 	bl	8001968 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d302      	bcc.n	8004ba4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d11a      	bne.n	8004bda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b20      	cmp	r3, #32
 8004bb0:	d013      	beq.n	8004bda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb6:	f043 0220 	orr.w	r2, r3, #32
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e007      	b.n	8004bea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d1c8      	bne.n	8004b7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
	...

08004bf4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08a      	sub	sp, #40	; 0x28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d068      	beq.n	8004cf2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2210      	movs	r2, #16
 8004c26:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c28:	e049      	b.n	8004cbe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c30:	d045      	beq.n	8004cbe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c32:	f7fc fe99 	bl	8001968 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d302      	bcc.n	8004c48 <I2C_IsErrorOccurred+0x54>
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d13a      	bne.n	8004cbe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c52:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c5a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c6a:	d121      	bne.n	8004cb0 <I2C_IsErrorOccurred+0xbc>
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c72:	d01d      	beq.n	8004cb0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004c74:	7cfb      	ldrb	r3, [r7, #19]
 8004c76:	2b20      	cmp	r3, #32
 8004c78:	d01a      	beq.n	8004cb0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c88:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004c8a:	f7fc fe6d 	bl	8001968 <HAL_GetTick>
 8004c8e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c90:	e00e      	b.n	8004cb0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004c92:	f7fc fe69 	bl	8001968 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b19      	cmp	r3, #25
 8004c9e:	d907      	bls.n	8004cb0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	f043 0320 	orr.w	r3, r3, #32
 8004ca6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004cae:	e006      	b.n	8004cbe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	f003 0320 	and.w	r3, r3, #32
 8004cba:	2b20      	cmp	r3, #32
 8004cbc:	d1e9      	bne.n	8004c92 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	f003 0320 	and.w	r3, r3, #32
 8004cc8:	2b20      	cmp	r3, #32
 8004cca:	d003      	beq.n	8004cd4 <I2C_IsErrorOccurred+0xe0>
 8004ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0aa      	beq.n	8004c2a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d103      	bne.n	8004ce4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	f043 0304 	orr.w	r3, r3, #4
 8004cea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00b      	beq.n	8004d1c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	f043 0301 	orr.w	r3, r3, #1
 8004d0a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00b      	beq.n	8004d3e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004d26:	6a3b      	ldr	r3, [r7, #32]
 8004d28:	f043 0308 	orr.w	r3, r3, #8
 8004d2c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d36:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00b      	beq.n	8004d60 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	f043 0302 	orr.w	r3, r3, #2
 8004d4e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004d60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d01c      	beq.n	8004da2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f7ff fe45 	bl	80049f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6859      	ldr	r1, [r3, #4]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	4b0d      	ldr	r3, [pc, #52]	; (8004db0 <I2C_IsErrorOccurred+0x1bc>)
 8004d7a:	400b      	ands	r3, r1
 8004d7c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d82:	6a3b      	ldr	r3, [r7, #32]
 8004d84:	431a      	orrs	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004da2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3728      	adds	r7, #40	; 0x28
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	fe00e800 	.word	0xfe00e800

08004db4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	607b      	str	r3, [r7, #4]
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	817b      	strh	r3, [r7, #10]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004dc6:	897b      	ldrh	r3, [r7, #10]
 8004dc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004dcc:	7a7b      	ldrb	r3, [r7, #9]
 8004dce:	041b      	lsls	r3, r3, #16
 8004dd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004dd4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004de2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	0d5b      	lsrs	r3, r3, #21
 8004dee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004df2:	4b08      	ldr	r3, [pc, #32]	; (8004e14 <I2C_TransferConfig+0x60>)
 8004df4:	430b      	orrs	r3, r1
 8004df6:	43db      	mvns	r3, r3
 8004df8:	ea02 0103 	and.w	r1, r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004e06:	bf00      	nop
 8004e08:	371c      	adds	r7, #28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	03ff63ff 	.word	0x03ff63ff

08004e18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b20      	cmp	r3, #32
 8004e2c:	d138      	bne.n	8004ea0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d101      	bne.n	8004e3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	e032      	b.n	8004ea2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2224      	movs	r2, #36	; 0x24
 8004e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0201 	bic.w	r2, r2, #1
 8004e5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6819      	ldr	r1, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0201 	orr.w	r2, r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	e000      	b.n	8004ea2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ea0:	2302      	movs	r3, #2
  }
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b085      	sub	sp, #20
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b20      	cmp	r3, #32
 8004ec2:	d139      	bne.n	8004f38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d101      	bne.n	8004ed2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	e033      	b.n	8004f3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2224      	movs	r2, #36	; 0x24
 8004ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0201 	bic.w	r2, r2, #1
 8004ef0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	021b      	lsls	r3, r3, #8
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0201 	orr.w	r2, r2, #1
 8004f22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f34:	2300      	movs	r3, #0
 8004f36:	e000      	b.n	8004f3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f38:	2302      	movs	r3, #2
  }
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
	...

08004f48 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b088      	sub	sp, #32
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e10d      	b.n	8005176 <HAL_I2S_Init+0x22e>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7fc f968 	bl	8001244 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d107      	bne.n	8004f9a <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0201 	bic.w	r2, r2, #1
 8004f98:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d008      	beq.n	8004fbc <HAL_I2S_Init+0x74>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2b06      	cmp	r3, #6
 8004fb0:	d004      	beq.n	8004fbc <HAL_I2S_Init+0x74>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b0a      	cmp	r3, #10
 8004fb8:	f040 8087 	bne.w	80050ca <HAL_I2S_Init+0x182>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d05a      	beq.n	800507a <HAL_I2S_Init+0x132>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d002      	beq.n	8004fd2 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8004fcc:	2302      	movs	r3, #2
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	e001      	b.n	8004fd6 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	2b30      	cmp	r3, #48	; 0x30
 8004fdc:	d003      	beq.n	8004fe6 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8004fe2:	2bb0      	cmp	r3, #176	; 0xb0
 8004fe4:	d102      	bne.n	8004fec <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	e001      	b.n	8004ff0 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8004fec:	2300      	movs	r3, #0
 8004fee:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8004ff0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004ff4:	f04f 0100 	mov.w	r1, #0
 8004ff8:	f002 fbde 	bl	80077b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ffc:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005006:	d113      	bne.n	8005030 <HAL_I2S_Init+0xe8>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8005008:	f44f 7280 	mov.w	r2, #256	; 0x100
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	fa22 f303 	lsr.w	r3, r2, r3
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	fbb2 f2f3 	udiv	r2, r2, r3
 8005018:	4613      	mov	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	461a      	mov	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	fbb2 f3f3 	udiv	r3, r2, r3
 800502a:	3305      	adds	r3, #5
 800502c:	613b      	str	r3, [r7, #16]
 800502e:	e014      	b.n	800505a <HAL_I2S_Init+0x112>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8005030:	2220      	movs	r2, #32
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	fa22 f303 	lsr.w	r3, r2, r3
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	fb02 f303 	mul.w	r3, r2, r3
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	fbb2 f2f3 	udiv	r2, r2, r3
 8005044:	4613      	mov	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4413      	add	r3, r2
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	461a      	mov	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	fbb2 f3f3 	udiv	r3, r2, r3
 8005056:	3305      	adds	r3, #5
 8005058:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	4a48      	ldr	r2, [pc, #288]	; (8005180 <HAL_I2S_Init+0x238>)
 800505e:	fba2 2303 	umull	r2, r3, r2, r3
 8005062:	08db      	lsrs	r3, r3, #3
 8005064:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	085b      	lsrs	r3, r3, #1
 8005076:	61fb      	str	r3, [r7, #28]
 8005078:	e003      	b.n	8005082 <HAL_I2S_Init+0x13a>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 800507a:	2302      	movs	r3, #2
 800507c:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 800507e:	2300      	movs	r3, #0
 8005080:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d102      	bne.n	800508e <HAL_I2S_Init+0x146>
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d002      	beq.n	8005094 <HAL_I2S_Init+0x14c>
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	2bff      	cmp	r3, #255	; 0xff
 8005092:	d907      	bls.n	80050a4 <HAL_I2S_Init+0x15c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005098:	f043 0210 	orr.w	r2, r3, #16
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e068      	b.n	8005176 <HAL_I2S_Init+0x22e>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_I2S_Init+0x166>
    {
      i2sodd = 1UL;
 80050aa:	2301      	movs	r3, #1
 80050ac:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050b4:	4b33      	ldr	r3, [pc, #204]	; (8005184 <HAL_I2S_Init+0x23c>)
 80050b6:	4013      	ands	r3, r2
 80050b8:	69fa      	ldr	r2, [r7, #28]
 80050ba:	0411      	lsls	r1, r2, #16
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	0612      	lsls	r2, r2, #24
 80050c0:	4311      	orrs	r1, r2
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6812      	ldr	r2, [r2, #0]
 80050c6:	430b      	orrs	r3, r1
 80050c8:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050d0:	4b2d      	ldr	r3, [pc, #180]	; (8005188 <HAL_I2S_Init+0x240>)
 80050d2:	4013      	ands	r3, r2
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	6851      	ldr	r1, [r2, #4]
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6892      	ldr	r2, [r2, #8]
 80050dc:	4311      	orrs	r1, r2
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	68d2      	ldr	r2, [r2, #12]
 80050e2:	4311      	orrs	r1, r2
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6992      	ldr	r2, [r2, #24]
 80050e8:	4311      	orrs	r1, r2
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6a12      	ldr	r2, [r2, #32]
 80050ee:	4311      	orrs	r1, r2
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050f4:	4311      	orrs	r1, r2
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	6912      	ldr	r2, [r2, #16]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	431a      	orrs	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f042 0201 	orr.w	r2, r2, #1
 8005106:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f640 72f8 	movw	r2, #4088	; 0xff8
 8005110:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005120:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	69da      	ldr	r2, [r3, #28]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	2b04      	cmp	r3, #4
 800513e:	d007      	beq.n	8005150 <HAL_I2S_Init+0x208>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2b06      	cmp	r3, #6
 8005146:	d003      	beq.n	8005150 <HAL_I2S_Init+0x208>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	2b0a      	cmp	r3, #10
 800514e:	d10a      	bne.n	8005166 <HAL_I2S_Init+0x21e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3720      	adds	r7, #32
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	cccccccd 	.word	0xcccccccd
 8005184:	fe00ffff 	.word	0xfe00ffff
 8005188:	fdff9040 	.word	0xfdff9040

0800518c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, const uint16_t *pData, uint16_t Size)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	4613      	mov	r3, r2
 8005198:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	75fb      	strb	r3, [r7, #23]

  if ((pData == NULL) || (Size == 0UL))
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d002      	beq.n	80051aa <HAL_I2S_Transmit_DMA+0x1e>
 80051a4:	88fb      	ldrh	r3, [r7, #6]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_I2S_Transmit_DMA+0x22>
  {
    return  HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e086      	b.n	80052bc <HAL_I2S_Transmit_DMA+0x130>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d001      	beq.n	80051be <HAL_I2S_Transmit_DMA+0x32>
  {
    return HAL_BUSY;
 80051ba:	2302      	movs	r3, #2
 80051bc:	e07e      	b.n	80052bc <HAL_I2S_Transmit_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d101      	bne.n	80051ce <HAL_I2S_Transmit_DMA+0x42>
 80051ca:	2302      	movs	r3, #2
 80051cc:	e076      	b.n	80052bc <HAL_I2S_Transmit_DMA+0x130>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_TX;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2203      	movs	r2, #3
 80051da:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->pTxBuffPtr  = (const uint16_t *)pData;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->TxXferSize  = Size;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	88fa      	ldrh	r2, [r7, #6]
 80051ee:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = Size;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	88fa      	ldrh	r2, [r7, #6]
 80051f4:	865a      	strh	r2, [r3, #50]	; 0x32

  /* Init field not used in handle to zero */
  hi2s->pRxBuffPtr  = NULL;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	635a      	str	r2, [r3, #52]	; 0x34
  hi2s->RxXferSize  = (uint16_t)0UL;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = (uint16_t)0UL;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800520c:	4a2d      	ldr	r2, [pc, #180]	; (80052c4 <HAL_I2S_Transmit_DMA+0x138>)
 800520e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005214:	4a2c      	ldr	r2, [pc, #176]	; (80052c8 <HAL_I2S_Transmit_DMA+0x13c>)
 8005216:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521c:	4a2b      	ldr	r2, [pc, #172]	; (80052cc <HAL_I2S_Transmit_DMA+0x140>)
 800521e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005228:	4619      	mov	r1, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3320      	adds	r3, #32
 8005230:	461a      	mov	r2, r3
                                 hi2s->TxXferCount))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005236:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8005238:	f7fd f83e 	bl	80022b8 <HAL_DMA_Start_IT>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d011      	beq.n	8005266 <HAL_I2S_Transmit_DMA+0xda>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005246:	f043 0208 	orr.w	r2, r3, #8
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    __HAL_UNLOCK(hi2s);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    errorcode = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8005262:	7dfb      	ldrb	r3, [r7, #23]
 8005264:	e02a      	b.n	80052bc <HAL_I2S_Transmit_DMA+0x130>
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d107      	bne.n	8005284 <HAL_I2S_Transmit_DMA+0xf8>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005282:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d107      	bne.n	80052a2 <HAL_I2S_Transmit_DMA+0x116>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f042 0201 	orr.w	r2, r2, #1
 80052a0:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b0:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return errorcode;
 80052ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3718      	adds	r7, #24
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	08005327 	.word	0x08005327
 80052c8:	080052e5 	.word	0x080052e5
 80052cc:	08005343 	.word	0x08005343

080052d0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10e      	bne.n	8005318 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005308:	609a      	str	r2, [r3, #8]

    hi2s->TxXferCount = (uint16_t) 0UL;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f7fb feff 	bl	800111c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800531e:	bf00      	nop
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b084      	sub	sp, #16
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005332:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f7fb fee7 	bl	8001108 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800533a:	bf00      	nop
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b084      	sub	sp, #16
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800535e:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005378:	f043 0208 	orr.w	r2, r3, #8
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	651a      	str	r2, [r3, #80]	; 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f7ff ffa5 	bl	80052d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005386:	bf00      	nop
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
	...

08005390 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005398:	4b19      	ldr	r3, [pc, #100]	; (8005400 <HAL_PWREx_ConfigSupply+0x70>)
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d00a      	beq.n	80053ba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80053a4:	4b16      	ldr	r3, [pc, #88]	; (8005400 <HAL_PWREx_ConfigSupply+0x70>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d001      	beq.n	80053b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e01f      	b.n	80053f6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80053b6:	2300      	movs	r3, #0
 80053b8:	e01d      	b.n	80053f6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80053ba:	4b11      	ldr	r3, [pc, #68]	; (8005400 <HAL_PWREx_ConfigSupply+0x70>)
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	f023 0207 	bic.w	r2, r3, #7
 80053c2:	490f      	ldr	r1, [pc, #60]	; (8005400 <HAL_PWREx_ConfigSupply+0x70>)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80053ca:	f7fc facd 	bl	8001968 <HAL_GetTick>
 80053ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80053d0:	e009      	b.n	80053e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80053d2:	f7fc fac9 	bl	8001968 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053e0:	d901      	bls.n	80053e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e007      	b.n	80053f6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80053e6:	4b06      	ldr	r3, [pc, #24]	; (8005400 <HAL_PWREx_ConfigSupply+0x70>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053f2:	d1ee      	bne.n	80053d2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	58024800 	.word	0x58024800

08005404 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b08c      	sub	sp, #48	; 0x30
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d102      	bne.n	8005418 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	f000 bc48 	b.w	8005ca8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 8088 	beq.w	8005536 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005426:	4b99      	ldr	r3, [pc, #612]	; (800568c <HAL_RCC_OscConfig+0x288>)
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800542e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005430:	4b96      	ldr	r3, [pc, #600]	; (800568c <HAL_RCC_OscConfig+0x288>)
 8005432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005434:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005438:	2b10      	cmp	r3, #16
 800543a:	d007      	beq.n	800544c <HAL_RCC_OscConfig+0x48>
 800543c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543e:	2b18      	cmp	r3, #24
 8005440:	d111      	bne.n	8005466 <HAL_RCC_OscConfig+0x62>
 8005442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005444:	f003 0303 	and.w	r3, r3, #3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d10c      	bne.n	8005466 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800544c:	4b8f      	ldr	r3, [pc, #572]	; (800568c <HAL_RCC_OscConfig+0x288>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d06d      	beq.n	8005534 <HAL_RCC_OscConfig+0x130>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d169      	bne.n	8005534 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	f000 bc21 	b.w	8005ca8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800546e:	d106      	bne.n	800547e <HAL_RCC_OscConfig+0x7a>
 8005470:	4b86      	ldr	r3, [pc, #536]	; (800568c <HAL_RCC_OscConfig+0x288>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a85      	ldr	r2, [pc, #532]	; (800568c <HAL_RCC_OscConfig+0x288>)
 8005476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800547a:	6013      	str	r3, [r2, #0]
 800547c:	e02e      	b.n	80054dc <HAL_RCC_OscConfig+0xd8>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10c      	bne.n	80054a0 <HAL_RCC_OscConfig+0x9c>
 8005486:	4b81      	ldr	r3, [pc, #516]	; (800568c <HAL_RCC_OscConfig+0x288>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a80      	ldr	r2, [pc, #512]	; (800568c <HAL_RCC_OscConfig+0x288>)
 800548c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005490:	6013      	str	r3, [r2, #0]
 8005492:	4b7e      	ldr	r3, [pc, #504]	; (800568c <HAL_RCC_OscConfig+0x288>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a7d      	ldr	r2, [pc, #500]	; (800568c <HAL_RCC_OscConfig+0x288>)
 8005498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800549c:	6013      	str	r3, [r2, #0]
 800549e:	e01d      	b.n	80054dc <HAL_RCC_OscConfig+0xd8>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054a8:	d10c      	bne.n	80054c4 <HAL_RCC_OscConfig+0xc0>
 80054aa:	4b78      	ldr	r3, [pc, #480]	; (800568c <HAL_RCC_OscConfig+0x288>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a77      	ldr	r2, [pc, #476]	; (800568c <HAL_RCC_OscConfig+0x288>)
 80054b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054b4:	6013      	str	r3, [r2, #0]
 80054b6:	4b75      	ldr	r3, [pc, #468]	; (800568c <HAL_RCC_OscConfig+0x288>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a74      	ldr	r2, [pc, #464]	; (800568c <HAL_RCC_OscConfig+0x288>)
 80054bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	e00b      	b.n	80054dc <HAL_RCC_OscConfig+0xd8>
 80054c4:	4b71      	ldr	r3, [pc, #452]	; (800568c <HAL_RCC_OscConfig+0x288>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a70      	ldr	r2, [pc, #448]	; (800568c <HAL_RCC_OscConfig+0x288>)
 80054ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ce:	6013      	str	r3, [r2, #0]
 80054d0:	4b6e      	ldr	r3, [pc, #440]	; (800568c <HAL_RCC_OscConfig+0x288>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a6d      	ldr	r2, [pc, #436]	; (800568c <HAL_RCC_OscConfig+0x288>)
 80054d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d013      	beq.n	800550c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e4:	f7fc fa40 	bl	8001968 <HAL_GetTick>
 80054e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054ea:	e008      	b.n	80054fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054ec:	f7fc fa3c 	bl	8001968 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b64      	cmp	r3, #100	; 0x64
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e3d4      	b.n	8005ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054fe:	4b63      	ldr	r3, [pc, #396]	; (800568c <HAL_RCC_OscConfig+0x288>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d0f0      	beq.n	80054ec <HAL_RCC_OscConfig+0xe8>
 800550a:	e014      	b.n	8005536 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550c:	f7fc fa2c 	bl	8001968 <HAL_GetTick>
 8005510:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005514:	f7fc fa28 	bl	8001968 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b64      	cmp	r3, #100	; 0x64
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e3c0      	b.n	8005ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005526:	4b59      	ldr	r3, [pc, #356]	; (800568c <HAL_RCC_OscConfig+0x288>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f0      	bne.n	8005514 <HAL_RCC_OscConfig+0x110>
 8005532:	e000      	b.n	8005536 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 80ca 	beq.w	80056d8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005544:	4b51      	ldr	r3, [pc, #324]	; (800568c <HAL_RCC_OscConfig+0x288>)
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800554c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800554e:	4b4f      	ldr	r3, [pc, #316]	; (800568c <HAL_RCC_OscConfig+0x288>)
 8005550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005552:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d007      	beq.n	800556a <HAL_RCC_OscConfig+0x166>
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	2b18      	cmp	r3, #24
 800555e:	d156      	bne.n	800560e <HAL_RCC_OscConfig+0x20a>
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	f003 0303 	and.w	r3, r3, #3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d151      	bne.n	800560e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800556a:	4b48      	ldr	r3, [pc, #288]	; (800568c <HAL_RCC_OscConfig+0x288>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0304 	and.w	r3, r3, #4
 8005572:	2b00      	cmp	r3, #0
 8005574:	d005      	beq.n	8005582 <HAL_RCC_OscConfig+0x17e>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e392      	b.n	8005ca8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005582:	4b42      	ldr	r3, [pc, #264]	; (800568c <HAL_RCC_OscConfig+0x288>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f023 0219 	bic.w	r2, r3, #25
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	493f      	ldr	r1, [pc, #252]	; (800568c <HAL_RCC_OscConfig+0x288>)
 8005590:	4313      	orrs	r3, r2
 8005592:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005594:	f7fc f9e8 	bl	8001968 <HAL_GetTick>
 8005598:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800559c:	f7fc f9e4 	bl	8001968 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e37c      	b.n	8005ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055ae:	4b37      	ldr	r3, [pc, #220]	; (800568c <HAL_RCC_OscConfig+0x288>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0304 	and.w	r3, r3, #4
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d0f0      	beq.n	800559c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ba:	f7fc fa05 	bl	80019c8 <HAL_GetREVID>
 80055be:	4603      	mov	r3, r0
 80055c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d817      	bhi.n	80055f8 <HAL_RCC_OscConfig+0x1f4>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	2b40      	cmp	r3, #64	; 0x40
 80055ce:	d108      	bne.n	80055e2 <HAL_RCC_OscConfig+0x1de>
 80055d0:	4b2e      	ldr	r3, [pc, #184]	; (800568c <HAL_RCC_OscConfig+0x288>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80055d8:	4a2c      	ldr	r2, [pc, #176]	; (800568c <HAL_RCC_OscConfig+0x288>)
 80055da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055de:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055e0:	e07a      	b.n	80056d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055e2:	4b2a      	ldr	r3, [pc, #168]	; (800568c <HAL_RCC_OscConfig+0x288>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	031b      	lsls	r3, r3, #12
 80055f0:	4926      	ldr	r1, [pc, #152]	; (800568c <HAL_RCC_OscConfig+0x288>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055f6:	e06f      	b.n	80056d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055f8:	4b24      	ldr	r3, [pc, #144]	; (800568c <HAL_RCC_OscConfig+0x288>)
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	061b      	lsls	r3, r3, #24
 8005606:	4921      	ldr	r1, [pc, #132]	; (800568c <HAL_RCC_OscConfig+0x288>)
 8005608:	4313      	orrs	r3, r2
 800560a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800560c:	e064      	b.n	80056d8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d047      	beq.n	80056a6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005616:	4b1d      	ldr	r3, [pc, #116]	; (800568c <HAL_RCC_OscConfig+0x288>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f023 0219 	bic.w	r2, r3, #25
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	491a      	ldr	r1, [pc, #104]	; (800568c <HAL_RCC_OscConfig+0x288>)
 8005624:	4313      	orrs	r3, r2
 8005626:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005628:	f7fc f99e 	bl	8001968 <HAL_GetTick>
 800562c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005630:	f7fc f99a 	bl	8001968 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e332      	b.n	8005ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005642:	4b12      	ldr	r3, [pc, #72]	; (800568c <HAL_RCC_OscConfig+0x288>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	2b00      	cmp	r3, #0
 800564c:	d0f0      	beq.n	8005630 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800564e:	f7fc f9bb 	bl	80019c8 <HAL_GetREVID>
 8005652:	4603      	mov	r3, r0
 8005654:	f241 0203 	movw	r2, #4099	; 0x1003
 8005658:	4293      	cmp	r3, r2
 800565a:	d819      	bhi.n	8005690 <HAL_RCC_OscConfig+0x28c>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	2b40      	cmp	r3, #64	; 0x40
 8005662:	d108      	bne.n	8005676 <HAL_RCC_OscConfig+0x272>
 8005664:	4b09      	ldr	r3, [pc, #36]	; (800568c <HAL_RCC_OscConfig+0x288>)
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800566c:	4a07      	ldr	r2, [pc, #28]	; (800568c <HAL_RCC_OscConfig+0x288>)
 800566e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005672:	6053      	str	r3, [r2, #4]
 8005674:	e030      	b.n	80056d8 <HAL_RCC_OscConfig+0x2d4>
 8005676:	4b05      	ldr	r3, [pc, #20]	; (800568c <HAL_RCC_OscConfig+0x288>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	031b      	lsls	r3, r3, #12
 8005684:	4901      	ldr	r1, [pc, #4]	; (800568c <HAL_RCC_OscConfig+0x288>)
 8005686:	4313      	orrs	r3, r2
 8005688:	604b      	str	r3, [r1, #4]
 800568a:	e025      	b.n	80056d8 <HAL_RCC_OscConfig+0x2d4>
 800568c:	58024400 	.word	0x58024400
 8005690:	4b9a      	ldr	r3, [pc, #616]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	061b      	lsls	r3, r3, #24
 800569e:	4997      	ldr	r1, [pc, #604]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	604b      	str	r3, [r1, #4]
 80056a4:	e018      	b.n	80056d8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056a6:	4b95      	ldr	r3, [pc, #596]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a94      	ldr	r2, [pc, #592]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 80056ac:	f023 0301 	bic.w	r3, r3, #1
 80056b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b2:	f7fc f959 	bl	8001968 <HAL_GetTick>
 80056b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80056b8:	e008      	b.n	80056cc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056ba:	f7fc f955 	bl	8001968 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e2ed      	b.n	8005ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80056cc:	4b8b      	ldr	r3, [pc, #556]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1f0      	bne.n	80056ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0310 	and.w	r3, r3, #16
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 80a9 	beq.w	8005838 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056e6:	4b85      	ldr	r3, [pc, #532]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80056f0:	4b82      	ldr	r3, [pc, #520]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 80056f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d007      	beq.n	800570c <HAL_RCC_OscConfig+0x308>
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	2b18      	cmp	r3, #24
 8005700:	d13a      	bne.n	8005778 <HAL_RCC_OscConfig+0x374>
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f003 0303 	and.w	r3, r3, #3
 8005708:	2b01      	cmp	r3, #1
 800570a:	d135      	bne.n	8005778 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800570c:	4b7b      	ldr	r3, [pc, #492]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005714:	2b00      	cmp	r3, #0
 8005716:	d005      	beq.n	8005724 <HAL_RCC_OscConfig+0x320>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	2b80      	cmp	r3, #128	; 0x80
 800571e:	d001      	beq.n	8005724 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e2c1      	b.n	8005ca8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005724:	f7fc f950 	bl	80019c8 <HAL_GetREVID>
 8005728:	4603      	mov	r3, r0
 800572a:	f241 0203 	movw	r2, #4099	; 0x1003
 800572e:	4293      	cmp	r3, r2
 8005730:	d817      	bhi.n	8005762 <HAL_RCC_OscConfig+0x35e>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	2b20      	cmp	r3, #32
 8005738:	d108      	bne.n	800574c <HAL_RCC_OscConfig+0x348>
 800573a:	4b70      	ldr	r3, [pc, #448]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005742:	4a6e      	ldr	r2, [pc, #440]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 8005744:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005748:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800574a:	e075      	b.n	8005838 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800574c:	4b6b      	ldr	r3, [pc, #428]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	069b      	lsls	r3, r3, #26
 800575a:	4968      	ldr	r1, [pc, #416]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 800575c:	4313      	orrs	r3, r2
 800575e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005760:	e06a      	b.n	8005838 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005762:	4b66      	ldr	r3, [pc, #408]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	061b      	lsls	r3, r3, #24
 8005770:	4962      	ldr	r1, [pc, #392]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 8005772:	4313      	orrs	r3, r2
 8005774:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005776:	e05f      	b.n	8005838 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d042      	beq.n	8005806 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005780:	4b5e      	ldr	r3, [pc, #376]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a5d      	ldr	r2, [pc, #372]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 8005786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800578a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800578c:	f7fc f8ec 	bl	8001968 <HAL_GetTick>
 8005790:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005792:	e008      	b.n	80057a6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005794:	f7fc f8e8 	bl	8001968 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e280      	b.n	8005ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80057a6:	4b55      	ldr	r3, [pc, #340]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d0f0      	beq.n	8005794 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80057b2:	f7fc f909 	bl	80019c8 <HAL_GetREVID>
 80057b6:	4603      	mov	r3, r0
 80057b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80057bc:	4293      	cmp	r3, r2
 80057be:	d817      	bhi.n	80057f0 <HAL_RCC_OscConfig+0x3ec>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	2b20      	cmp	r3, #32
 80057c6:	d108      	bne.n	80057da <HAL_RCC_OscConfig+0x3d6>
 80057c8:	4b4c      	ldr	r3, [pc, #304]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80057d0:	4a4a      	ldr	r2, [pc, #296]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 80057d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057d6:	6053      	str	r3, [r2, #4]
 80057d8:	e02e      	b.n	8005838 <HAL_RCC_OscConfig+0x434>
 80057da:	4b48      	ldr	r3, [pc, #288]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	069b      	lsls	r3, r3, #26
 80057e8:	4944      	ldr	r1, [pc, #272]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	604b      	str	r3, [r1, #4]
 80057ee:	e023      	b.n	8005838 <HAL_RCC_OscConfig+0x434>
 80057f0:	4b42      	ldr	r3, [pc, #264]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	061b      	lsls	r3, r3, #24
 80057fe:	493f      	ldr	r1, [pc, #252]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 8005800:	4313      	orrs	r3, r2
 8005802:	60cb      	str	r3, [r1, #12]
 8005804:	e018      	b.n	8005838 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005806:	4b3d      	ldr	r3, [pc, #244]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a3c      	ldr	r2, [pc, #240]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 800580c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005812:	f7fc f8a9 	bl	8001968 <HAL_GetTick>
 8005816:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005818:	e008      	b.n	800582c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800581a:	f7fc f8a5 	bl	8001968 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e23d      	b.n	8005ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800582c:	4b33      	ldr	r3, [pc, #204]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1f0      	bne.n	800581a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0308 	and.w	r3, r3, #8
 8005840:	2b00      	cmp	r3, #0
 8005842:	d036      	beq.n	80058b2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d019      	beq.n	8005880 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800584c:	4b2b      	ldr	r3, [pc, #172]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 800584e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005850:	4a2a      	ldr	r2, [pc, #168]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 8005852:	f043 0301 	orr.w	r3, r3, #1
 8005856:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005858:	f7fc f886 	bl	8001968 <HAL_GetTick>
 800585c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800585e:	e008      	b.n	8005872 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005860:	f7fc f882 	bl	8001968 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e21a      	b.n	8005ca8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005872:	4b22      	ldr	r3, [pc, #136]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 8005874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0f0      	beq.n	8005860 <HAL_RCC_OscConfig+0x45c>
 800587e:	e018      	b.n	80058b2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005880:	4b1e      	ldr	r3, [pc, #120]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 8005882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005884:	4a1d      	ldr	r2, [pc, #116]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 8005886:	f023 0301 	bic.w	r3, r3, #1
 800588a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800588c:	f7fc f86c 	bl	8001968 <HAL_GetTick>
 8005890:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005892:	e008      	b.n	80058a6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005894:	f7fc f868 	bl	8001968 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e200      	b.n	8005ca8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80058a6:	4b15      	ldr	r3, [pc, #84]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 80058a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1f0      	bne.n	8005894 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0320 	and.w	r3, r3, #32
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d039      	beq.n	8005932 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d01c      	beq.n	8005900 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80058c6:	4b0d      	ldr	r3, [pc, #52]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a0c      	ldr	r2, [pc, #48]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 80058cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80058d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80058d2:	f7fc f849 	bl	8001968 <HAL_GetTick>
 80058d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80058d8:	e008      	b.n	80058ec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058da:	f7fc f845 	bl	8001968 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d901      	bls.n	80058ec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e1dd      	b.n	8005ca8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80058ec:	4b03      	ldr	r3, [pc, #12]	; (80058fc <HAL_RCC_OscConfig+0x4f8>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0f0      	beq.n	80058da <HAL_RCC_OscConfig+0x4d6>
 80058f8:	e01b      	b.n	8005932 <HAL_RCC_OscConfig+0x52e>
 80058fa:	bf00      	nop
 80058fc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005900:	4b9b      	ldr	r3, [pc, #620]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a9a      	ldr	r2, [pc, #616]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005906:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800590a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800590c:	f7fc f82c 	bl	8001968 <HAL_GetTick>
 8005910:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005912:	e008      	b.n	8005926 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005914:	f7fc f828 	bl	8001968 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	2b02      	cmp	r3, #2
 8005920:	d901      	bls.n	8005926 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e1c0      	b.n	8005ca8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005926:	4b92      	ldr	r3, [pc, #584]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1f0      	bne.n	8005914 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0304 	and.w	r3, r3, #4
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 8081 	beq.w	8005a42 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005940:	4b8c      	ldr	r3, [pc, #560]	; (8005b74 <HAL_RCC_OscConfig+0x770>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a8b      	ldr	r2, [pc, #556]	; (8005b74 <HAL_RCC_OscConfig+0x770>)
 8005946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800594a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800594c:	f7fc f80c 	bl	8001968 <HAL_GetTick>
 8005950:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005954:	f7fc f808 	bl	8001968 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b64      	cmp	r3, #100	; 0x64
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e1a0      	b.n	8005ca8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005966:	4b83      	ldr	r3, [pc, #524]	; (8005b74 <HAL_RCC_OscConfig+0x770>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596e:	2b00      	cmp	r3, #0
 8005970:	d0f0      	beq.n	8005954 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d106      	bne.n	8005988 <HAL_RCC_OscConfig+0x584>
 800597a:	4b7d      	ldr	r3, [pc, #500]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 800597c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597e:	4a7c      	ldr	r2, [pc, #496]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005980:	f043 0301 	orr.w	r3, r3, #1
 8005984:	6713      	str	r3, [r2, #112]	; 0x70
 8005986:	e02d      	b.n	80059e4 <HAL_RCC_OscConfig+0x5e0>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10c      	bne.n	80059aa <HAL_RCC_OscConfig+0x5a6>
 8005990:	4b77      	ldr	r3, [pc, #476]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005994:	4a76      	ldr	r2, [pc, #472]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005996:	f023 0301 	bic.w	r3, r3, #1
 800599a:	6713      	str	r3, [r2, #112]	; 0x70
 800599c:	4b74      	ldr	r3, [pc, #464]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 800599e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a0:	4a73      	ldr	r2, [pc, #460]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 80059a2:	f023 0304 	bic.w	r3, r3, #4
 80059a6:	6713      	str	r3, [r2, #112]	; 0x70
 80059a8:	e01c      	b.n	80059e4 <HAL_RCC_OscConfig+0x5e0>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	2b05      	cmp	r3, #5
 80059b0:	d10c      	bne.n	80059cc <HAL_RCC_OscConfig+0x5c8>
 80059b2:	4b6f      	ldr	r3, [pc, #444]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 80059b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b6:	4a6e      	ldr	r2, [pc, #440]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 80059b8:	f043 0304 	orr.w	r3, r3, #4
 80059bc:	6713      	str	r3, [r2, #112]	; 0x70
 80059be:	4b6c      	ldr	r3, [pc, #432]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 80059c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c2:	4a6b      	ldr	r2, [pc, #428]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 80059c4:	f043 0301 	orr.w	r3, r3, #1
 80059c8:	6713      	str	r3, [r2, #112]	; 0x70
 80059ca:	e00b      	b.n	80059e4 <HAL_RCC_OscConfig+0x5e0>
 80059cc:	4b68      	ldr	r3, [pc, #416]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 80059ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d0:	4a67      	ldr	r2, [pc, #412]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 80059d2:	f023 0301 	bic.w	r3, r3, #1
 80059d6:	6713      	str	r3, [r2, #112]	; 0x70
 80059d8:	4b65      	ldr	r3, [pc, #404]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 80059da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059dc:	4a64      	ldr	r2, [pc, #400]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 80059de:	f023 0304 	bic.w	r3, r3, #4
 80059e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d015      	beq.n	8005a18 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ec:	f7fb ffbc 	bl	8001968 <HAL_GetTick>
 80059f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059f2:	e00a      	b.n	8005a0a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059f4:	f7fb ffb8 	bl	8001968 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d901      	bls.n	8005a0a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e14e      	b.n	8005ca8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a0a:	4b59      	ldr	r3, [pc, #356]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d0ee      	beq.n	80059f4 <HAL_RCC_OscConfig+0x5f0>
 8005a16:	e014      	b.n	8005a42 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a18:	f7fb ffa6 	bl	8001968 <HAL_GetTick>
 8005a1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a1e:	e00a      	b.n	8005a36 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a20:	f7fb ffa2 	bl	8001968 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d901      	bls.n	8005a36 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e138      	b.n	8005ca8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a36:	4b4e      	ldr	r3, [pc, #312]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1ee      	bne.n	8005a20 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f000 812d 	beq.w	8005ca6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005a4c:	4b48      	ldr	r3, [pc, #288]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a54:	2b18      	cmp	r3, #24
 8005a56:	f000 80bd 	beq.w	8005bd4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	f040 809e 	bne.w	8005ba0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a64:	4b42      	ldr	r3, [pc, #264]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a41      	ldr	r2, [pc, #260]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005a6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a70:	f7fb ff7a 	bl	8001968 <HAL_GetTick>
 8005a74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a78:	f7fb ff76 	bl	8001968 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e10e      	b.n	8005ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a8a:	4b39      	ldr	r3, [pc, #228]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1f0      	bne.n	8005a78 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a96:	4b36      	ldr	r3, [pc, #216]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a9a:	4b37      	ldr	r3, [pc, #220]	; (8005b78 <HAL_RCC_OscConfig+0x774>)
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005aa6:	0112      	lsls	r2, r2, #4
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	4931      	ldr	r1, [pc, #196]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	628b      	str	r3, [r1, #40]	; 0x28
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	025b      	lsls	r3, r3, #9
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aca:	3b01      	subs	r3, #1
 8005acc:	041b      	lsls	r3, r3, #16
 8005ace:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	061b      	lsls	r3, r3, #24
 8005adc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ae0:	4923      	ldr	r1, [pc, #140]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005ae6:	4b22      	ldr	r3, [pc, #136]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aea:	4a21      	ldr	r2, [pc, #132]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005aec:	f023 0301 	bic.w	r3, r3, #1
 8005af0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005af2:	4b1f      	ldr	r3, [pc, #124]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005af4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005af6:	4b21      	ldr	r3, [pc, #132]	; (8005b7c <HAL_RCC_OscConfig+0x778>)
 8005af8:	4013      	ands	r3, r2
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005afe:	00d2      	lsls	r2, r2, #3
 8005b00:	491b      	ldr	r1, [pc, #108]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005b06:	4b1a      	ldr	r3, [pc, #104]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0a:	f023 020c 	bic.w	r2, r3, #12
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b12:	4917      	ldr	r1, [pc, #92]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005b18:	4b15      	ldr	r3, [pc, #84]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1c:	f023 0202 	bic.w	r2, r3, #2
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b24:	4912      	ldr	r1, [pc, #72]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b2a:	4b11      	ldr	r3, [pc, #68]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2e:	4a10      	ldr	r2, [pc, #64]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b36:	4b0e      	ldr	r3, [pc, #56]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3a:	4a0d      	ldr	r2, [pc, #52]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005b42:	4b0b      	ldr	r3, [pc, #44]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b46:	4a0a      	ldr	r2, [pc, #40]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005b4e:	4b08      	ldr	r3, [pc, #32]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b52:	4a07      	ldr	r2, [pc, #28]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005b54:	f043 0301 	orr.w	r3, r3, #1
 8005b58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b5a:	4b05      	ldr	r3, [pc, #20]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a04      	ldr	r2, [pc, #16]	; (8005b70 <HAL_RCC_OscConfig+0x76c>)
 8005b60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b66:	f7fb feff 	bl	8001968 <HAL_GetTick>
 8005b6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b6c:	e011      	b.n	8005b92 <HAL_RCC_OscConfig+0x78e>
 8005b6e:	bf00      	nop
 8005b70:	58024400 	.word	0x58024400
 8005b74:	58024800 	.word	0x58024800
 8005b78:	fffffc0c 	.word	0xfffffc0c
 8005b7c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b80:	f7fb fef2 	bl	8001968 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e08a      	b.n	8005ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b92:	4b47      	ldr	r3, [pc, #284]	; (8005cb0 <HAL_RCC_OscConfig+0x8ac>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0f0      	beq.n	8005b80 <HAL_RCC_OscConfig+0x77c>
 8005b9e:	e082      	b.n	8005ca6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ba0:	4b43      	ldr	r3, [pc, #268]	; (8005cb0 <HAL_RCC_OscConfig+0x8ac>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a42      	ldr	r2, [pc, #264]	; (8005cb0 <HAL_RCC_OscConfig+0x8ac>)
 8005ba6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bac:	f7fb fedc 	bl	8001968 <HAL_GetTick>
 8005bb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bb4:	f7fb fed8 	bl	8001968 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e070      	b.n	8005ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005bc6:	4b3a      	ldr	r3, [pc, #232]	; (8005cb0 <HAL_RCC_OscConfig+0x8ac>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1f0      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x7b0>
 8005bd2:	e068      	b.n	8005ca6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005bd4:	4b36      	ldr	r3, [pc, #216]	; (8005cb0 <HAL_RCC_OscConfig+0x8ac>)
 8005bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005bda:	4b35      	ldr	r3, [pc, #212]	; (8005cb0 <HAL_RCC_OscConfig+0x8ac>)
 8005bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bde:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d031      	beq.n	8005c4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f003 0203 	and.w	r2, r3, #3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d12a      	bne.n	8005c4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	091b      	lsrs	r3, r3, #4
 8005bfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d122      	bne.n	8005c4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c10:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d11a      	bne.n	8005c4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	0a5b      	lsrs	r3, r3, #9
 8005c1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c22:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d111      	bne.n	8005c4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	0c1b      	lsrs	r3, r3, #16
 8005c2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c34:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d108      	bne.n	8005c4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	0e1b      	lsrs	r3, r3, #24
 8005c3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c46:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d001      	beq.n	8005c50 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e02b      	b.n	8005ca8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005c50:	4b17      	ldr	r3, [pc, #92]	; (8005cb0 <HAL_RCC_OscConfig+0x8ac>)
 8005c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c54:	08db      	lsrs	r3, r3, #3
 8005c56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c5a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d01f      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005c66:	4b12      	ldr	r3, [pc, #72]	; (8005cb0 <HAL_RCC_OscConfig+0x8ac>)
 8005c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6a:	4a11      	ldr	r2, [pc, #68]	; (8005cb0 <HAL_RCC_OscConfig+0x8ac>)
 8005c6c:	f023 0301 	bic.w	r3, r3, #1
 8005c70:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c72:	f7fb fe79 	bl	8001968 <HAL_GetTick>
 8005c76:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005c78:	bf00      	nop
 8005c7a:	f7fb fe75 	bl	8001968 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d0f9      	beq.n	8005c7a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005c86:	4b0a      	ldr	r3, [pc, #40]	; (8005cb0 <HAL_RCC_OscConfig+0x8ac>)
 8005c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c8a:	4b0a      	ldr	r3, [pc, #40]	; (8005cb4 <HAL_RCC_OscConfig+0x8b0>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005c92:	00d2      	lsls	r2, r2, #3
 8005c94:	4906      	ldr	r1, [pc, #24]	; (8005cb0 <HAL_RCC_OscConfig+0x8ac>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005c9a:	4b05      	ldr	r3, [pc, #20]	; (8005cb0 <HAL_RCC_OscConfig+0x8ac>)
 8005c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9e:	4a04      	ldr	r2, [pc, #16]	; (8005cb0 <HAL_RCC_OscConfig+0x8ac>)
 8005ca0:	f043 0301 	orr.w	r3, r3, #1
 8005ca4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3730      	adds	r7, #48	; 0x30
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	58024400 	.word	0x58024400
 8005cb4:	ffff0007 	.word	0xffff0007

08005cb8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d101      	bne.n	8005ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e19c      	b.n	8006006 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ccc:	4b8a      	ldr	r3, [pc, #552]	; (8005ef8 <HAL_RCC_ClockConfig+0x240>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 030f 	and.w	r3, r3, #15
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d910      	bls.n	8005cfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cda:	4b87      	ldr	r3, [pc, #540]	; (8005ef8 <HAL_RCC_ClockConfig+0x240>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f023 020f 	bic.w	r2, r3, #15
 8005ce2:	4985      	ldr	r1, [pc, #532]	; (8005ef8 <HAL_RCC_ClockConfig+0x240>)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cea:	4b83      	ldr	r3, [pc, #524]	; (8005ef8 <HAL_RCC_ClockConfig+0x240>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 030f 	and.w	r3, r3, #15
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d001      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e184      	b.n	8006006 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d010      	beq.n	8005d2a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	691a      	ldr	r2, [r3, #16]
 8005d0c:	4b7b      	ldr	r3, [pc, #492]	; (8005efc <HAL_RCC_ClockConfig+0x244>)
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d908      	bls.n	8005d2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d18:	4b78      	ldr	r3, [pc, #480]	; (8005efc <HAL_RCC_ClockConfig+0x244>)
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	4975      	ldr	r1, [pc, #468]	; (8005efc <HAL_RCC_ClockConfig+0x244>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0308 	and.w	r3, r3, #8
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d010      	beq.n	8005d58 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	695a      	ldr	r2, [r3, #20]
 8005d3a:	4b70      	ldr	r3, [pc, #448]	; (8005efc <HAL_RCC_ClockConfig+0x244>)
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d908      	bls.n	8005d58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d46:	4b6d      	ldr	r3, [pc, #436]	; (8005efc <HAL_RCC_ClockConfig+0x244>)
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	496a      	ldr	r1, [pc, #424]	; (8005efc <HAL_RCC_ClockConfig+0x244>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0310 	and.w	r3, r3, #16
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d010      	beq.n	8005d86 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	699a      	ldr	r2, [r3, #24]
 8005d68:	4b64      	ldr	r3, [pc, #400]	; (8005efc <HAL_RCC_ClockConfig+0x244>)
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d908      	bls.n	8005d86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d74:	4b61      	ldr	r3, [pc, #388]	; (8005efc <HAL_RCC_ClockConfig+0x244>)
 8005d76:	69db      	ldr	r3, [r3, #28]
 8005d78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	495e      	ldr	r1, [pc, #376]	; (8005efc <HAL_RCC_ClockConfig+0x244>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0320 	and.w	r3, r3, #32
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d010      	beq.n	8005db4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	69da      	ldr	r2, [r3, #28]
 8005d96:	4b59      	ldr	r3, [pc, #356]	; (8005efc <HAL_RCC_ClockConfig+0x244>)
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d908      	bls.n	8005db4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005da2:	4b56      	ldr	r3, [pc, #344]	; (8005efc <HAL_RCC_ClockConfig+0x244>)
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	4953      	ldr	r1, [pc, #332]	; (8005efc <HAL_RCC_ClockConfig+0x244>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0302 	and.w	r3, r3, #2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d010      	beq.n	8005de2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68da      	ldr	r2, [r3, #12]
 8005dc4:	4b4d      	ldr	r3, [pc, #308]	; (8005efc <HAL_RCC_ClockConfig+0x244>)
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	f003 030f 	and.w	r3, r3, #15
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d908      	bls.n	8005de2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dd0:	4b4a      	ldr	r3, [pc, #296]	; (8005efc <HAL_RCC_ClockConfig+0x244>)
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	f023 020f 	bic.w	r2, r3, #15
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	4947      	ldr	r1, [pc, #284]	; (8005efc <HAL_RCC_ClockConfig+0x244>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d055      	beq.n	8005e9a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005dee:	4b43      	ldr	r3, [pc, #268]	; (8005efc <HAL_RCC_ClockConfig+0x244>)
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	4940      	ldr	r1, [pc, #256]	; (8005efc <HAL_RCC_ClockConfig+0x244>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d107      	bne.n	8005e18 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e08:	4b3c      	ldr	r3, [pc, #240]	; (8005efc <HAL_RCC_ClockConfig+0x244>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d121      	bne.n	8005e58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e0f6      	b.n	8006006 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	2b03      	cmp	r3, #3
 8005e1e:	d107      	bne.n	8005e30 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e20:	4b36      	ldr	r3, [pc, #216]	; (8005efc <HAL_RCC_ClockConfig+0x244>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d115      	bne.n	8005e58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e0ea      	b.n	8006006 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d107      	bne.n	8005e48 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e38:	4b30      	ldr	r3, [pc, #192]	; (8005efc <HAL_RCC_ClockConfig+0x244>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d109      	bne.n	8005e58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e0de      	b.n	8006006 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e48:	4b2c      	ldr	r3, [pc, #176]	; (8005efc <HAL_RCC_ClockConfig+0x244>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e0d6      	b.n	8006006 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e58:	4b28      	ldr	r3, [pc, #160]	; (8005efc <HAL_RCC_ClockConfig+0x244>)
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	f023 0207 	bic.w	r2, r3, #7
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	4925      	ldr	r1, [pc, #148]	; (8005efc <HAL_RCC_ClockConfig+0x244>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e6a:	f7fb fd7d 	bl	8001968 <HAL_GetTick>
 8005e6e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e70:	e00a      	b.n	8005e88 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e72:	f7fb fd79 	bl	8001968 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d901      	bls.n	8005e88 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e0be      	b.n	8006006 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e88:	4b1c      	ldr	r3, [pc, #112]	; (8005efc <HAL_RCC_ClockConfig+0x244>)
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	00db      	lsls	r3, r3, #3
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d1eb      	bne.n	8005e72 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d010      	beq.n	8005ec8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68da      	ldr	r2, [r3, #12]
 8005eaa:	4b14      	ldr	r3, [pc, #80]	; (8005efc <HAL_RCC_ClockConfig+0x244>)
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	f003 030f 	and.w	r3, r3, #15
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d208      	bcs.n	8005ec8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005eb6:	4b11      	ldr	r3, [pc, #68]	; (8005efc <HAL_RCC_ClockConfig+0x244>)
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	f023 020f 	bic.w	r2, r3, #15
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	490e      	ldr	r1, [pc, #56]	; (8005efc <HAL_RCC_ClockConfig+0x244>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ec8:	4b0b      	ldr	r3, [pc, #44]	; (8005ef8 <HAL_RCC_ClockConfig+0x240>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 030f 	and.w	r3, r3, #15
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d214      	bcs.n	8005f00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ed6:	4b08      	ldr	r3, [pc, #32]	; (8005ef8 <HAL_RCC_ClockConfig+0x240>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f023 020f 	bic.w	r2, r3, #15
 8005ede:	4906      	ldr	r1, [pc, #24]	; (8005ef8 <HAL_RCC_ClockConfig+0x240>)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ee6:	4b04      	ldr	r3, [pc, #16]	; (8005ef8 <HAL_RCC_ClockConfig+0x240>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 030f 	and.w	r3, r3, #15
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d005      	beq.n	8005f00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e086      	b.n	8006006 <HAL_RCC_ClockConfig+0x34e>
 8005ef8:	52002000 	.word	0x52002000
 8005efc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0304 	and.w	r3, r3, #4
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d010      	beq.n	8005f2e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	691a      	ldr	r2, [r3, #16]
 8005f10:	4b3f      	ldr	r3, [pc, #252]	; (8006010 <HAL_RCC_ClockConfig+0x358>)
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d208      	bcs.n	8005f2e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005f1c:	4b3c      	ldr	r3, [pc, #240]	; (8006010 <HAL_RCC_ClockConfig+0x358>)
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	4939      	ldr	r1, [pc, #228]	; (8006010 <HAL_RCC_ClockConfig+0x358>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0308 	and.w	r3, r3, #8
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d010      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	695a      	ldr	r2, [r3, #20]
 8005f3e:	4b34      	ldr	r3, [pc, #208]	; (8006010 <HAL_RCC_ClockConfig+0x358>)
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d208      	bcs.n	8005f5c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005f4a:	4b31      	ldr	r3, [pc, #196]	; (8006010 <HAL_RCC_ClockConfig+0x358>)
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	492e      	ldr	r1, [pc, #184]	; (8006010 <HAL_RCC_ClockConfig+0x358>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0310 	and.w	r3, r3, #16
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d010      	beq.n	8005f8a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	699a      	ldr	r2, [r3, #24]
 8005f6c:	4b28      	ldr	r3, [pc, #160]	; (8006010 <HAL_RCC_ClockConfig+0x358>)
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d208      	bcs.n	8005f8a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005f78:	4b25      	ldr	r3, [pc, #148]	; (8006010 <HAL_RCC_ClockConfig+0x358>)
 8005f7a:	69db      	ldr	r3, [r3, #28]
 8005f7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	4922      	ldr	r1, [pc, #136]	; (8006010 <HAL_RCC_ClockConfig+0x358>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0320 	and.w	r3, r3, #32
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d010      	beq.n	8005fb8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	69da      	ldr	r2, [r3, #28]
 8005f9a:	4b1d      	ldr	r3, [pc, #116]	; (8006010 <HAL_RCC_ClockConfig+0x358>)
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d208      	bcs.n	8005fb8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005fa6:	4b1a      	ldr	r3, [pc, #104]	; (8006010 <HAL_RCC_ClockConfig+0x358>)
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	69db      	ldr	r3, [r3, #28]
 8005fb2:	4917      	ldr	r1, [pc, #92]	; (8006010 <HAL_RCC_ClockConfig+0x358>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005fb8:	f000 f834 	bl	8006024 <HAL_RCC_GetSysClockFreq>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	4b14      	ldr	r3, [pc, #80]	; (8006010 <HAL_RCC_ClockConfig+0x358>)
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	0a1b      	lsrs	r3, r3, #8
 8005fc4:	f003 030f 	and.w	r3, r3, #15
 8005fc8:	4912      	ldr	r1, [pc, #72]	; (8006014 <HAL_RCC_ClockConfig+0x35c>)
 8005fca:	5ccb      	ldrb	r3, [r1, r3]
 8005fcc:	f003 031f 	and.w	r3, r3, #31
 8005fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8005fd4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005fd6:	4b0e      	ldr	r3, [pc, #56]	; (8006010 <HAL_RCC_ClockConfig+0x358>)
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	f003 030f 	and.w	r3, r3, #15
 8005fde:	4a0d      	ldr	r2, [pc, #52]	; (8006014 <HAL_RCC_ClockConfig+0x35c>)
 8005fe0:	5cd3      	ldrb	r3, [r2, r3]
 8005fe2:	f003 031f 	and.w	r3, r3, #31
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8005fec:	4a0a      	ldr	r2, [pc, #40]	; (8006018 <HAL_RCC_ClockConfig+0x360>)
 8005fee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ff0:	4a0a      	ldr	r2, [pc, #40]	; (800601c <HAL_RCC_ClockConfig+0x364>)
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005ff6:	4b0a      	ldr	r3, [pc, #40]	; (8006020 <HAL_RCC_ClockConfig+0x368>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fb fc6a 	bl	80018d4 <HAL_InitTick>
 8006000:	4603      	mov	r3, r0
 8006002:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006004:	7bfb      	ldrb	r3, [r7, #15]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3718      	adds	r7, #24
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	58024400 	.word	0x58024400
 8006014:	0800ae78 	.word	0x0800ae78
 8006018:	2400000c 	.word	0x2400000c
 800601c:	24000008 	.word	0x24000008
 8006020:	24000010 	.word	0x24000010

08006024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006024:	b480      	push	{r7}
 8006026:	b089      	sub	sp, #36	; 0x24
 8006028:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800602a:	4bb3      	ldr	r3, [pc, #716]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006032:	2b18      	cmp	r3, #24
 8006034:	f200 8155 	bhi.w	80062e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8006038:	a201      	add	r2, pc, #4	; (adr r2, 8006040 <HAL_RCC_GetSysClockFreq+0x1c>)
 800603a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603e:	bf00      	nop
 8006040:	080060a5 	.word	0x080060a5
 8006044:	080062e3 	.word	0x080062e3
 8006048:	080062e3 	.word	0x080062e3
 800604c:	080062e3 	.word	0x080062e3
 8006050:	080062e3 	.word	0x080062e3
 8006054:	080062e3 	.word	0x080062e3
 8006058:	080062e3 	.word	0x080062e3
 800605c:	080062e3 	.word	0x080062e3
 8006060:	080060cb 	.word	0x080060cb
 8006064:	080062e3 	.word	0x080062e3
 8006068:	080062e3 	.word	0x080062e3
 800606c:	080062e3 	.word	0x080062e3
 8006070:	080062e3 	.word	0x080062e3
 8006074:	080062e3 	.word	0x080062e3
 8006078:	080062e3 	.word	0x080062e3
 800607c:	080062e3 	.word	0x080062e3
 8006080:	080060d1 	.word	0x080060d1
 8006084:	080062e3 	.word	0x080062e3
 8006088:	080062e3 	.word	0x080062e3
 800608c:	080062e3 	.word	0x080062e3
 8006090:	080062e3 	.word	0x080062e3
 8006094:	080062e3 	.word	0x080062e3
 8006098:	080062e3 	.word	0x080062e3
 800609c:	080062e3 	.word	0x080062e3
 80060a0:	080060d7 	.word	0x080060d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060a4:	4b94      	ldr	r3, [pc, #592]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0320 	and.w	r3, r3, #32
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d009      	beq.n	80060c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060b0:	4b91      	ldr	r3, [pc, #580]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	08db      	lsrs	r3, r3, #3
 80060b6:	f003 0303 	and.w	r3, r3, #3
 80060ba:	4a90      	ldr	r2, [pc, #576]	; (80062fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80060bc:	fa22 f303 	lsr.w	r3, r2, r3
 80060c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80060c2:	e111      	b.n	80062e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80060c4:	4b8d      	ldr	r3, [pc, #564]	; (80062fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80060c6:	61bb      	str	r3, [r7, #24]
      break;
 80060c8:	e10e      	b.n	80062e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80060ca:	4b8d      	ldr	r3, [pc, #564]	; (8006300 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80060cc:	61bb      	str	r3, [r7, #24]
      break;
 80060ce:	e10b      	b.n	80062e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80060d0:	4b8c      	ldr	r3, [pc, #560]	; (8006304 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80060d2:	61bb      	str	r3, [r7, #24]
      break;
 80060d4:	e108      	b.n	80062e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80060d6:	4b88      	ldr	r3, [pc, #544]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060da:	f003 0303 	and.w	r3, r3, #3
 80060de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80060e0:	4b85      	ldr	r3, [pc, #532]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e4:	091b      	lsrs	r3, r3, #4
 80060e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80060ec:	4b82      	ldr	r3, [pc, #520]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80060f6:	4b80      	ldr	r3, [pc, #512]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060fa:	08db      	lsrs	r3, r3, #3
 80060fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	fb02 f303 	mul.w	r3, r2, r3
 8006106:	ee07 3a90 	vmov	s15, r3
 800610a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800610e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	2b00      	cmp	r3, #0
 8006116:	f000 80e1 	beq.w	80062dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	2b02      	cmp	r3, #2
 800611e:	f000 8083 	beq.w	8006228 <HAL_RCC_GetSysClockFreq+0x204>
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	2b02      	cmp	r3, #2
 8006126:	f200 80a1 	bhi.w	800626c <HAL_RCC_GetSysClockFreq+0x248>
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d003      	beq.n	8006138 <HAL_RCC_GetSysClockFreq+0x114>
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d056      	beq.n	80061e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006136:	e099      	b.n	800626c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006138:	4b6f      	ldr	r3, [pc, #444]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0320 	and.w	r3, r3, #32
 8006140:	2b00      	cmp	r3, #0
 8006142:	d02d      	beq.n	80061a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006144:	4b6c      	ldr	r3, [pc, #432]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	08db      	lsrs	r3, r3, #3
 800614a:	f003 0303 	and.w	r3, r3, #3
 800614e:	4a6b      	ldr	r2, [pc, #428]	; (80062fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006150:	fa22 f303 	lsr.w	r3, r2, r3
 8006154:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	ee07 3a90 	vmov	s15, r3
 800615c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	ee07 3a90 	vmov	s15, r3
 8006166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800616a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800616e:	4b62      	ldr	r3, [pc, #392]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006176:	ee07 3a90 	vmov	s15, r3
 800617a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800617e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006182:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006308 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800618a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800618e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800619a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800619e:	e087      	b.n	80062b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	ee07 3a90 	vmov	s15, r3
 80061a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800630c <HAL_RCC_GetSysClockFreq+0x2e8>
 80061ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061b2:	4b51      	ldr	r3, [pc, #324]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ba:	ee07 3a90 	vmov	s15, r3
 80061be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80061c6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006308 <HAL_RCC_GetSysClockFreq+0x2e4>
 80061ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80061e2:	e065      	b.n	80062b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	ee07 3a90 	vmov	s15, r3
 80061ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006310 <HAL_RCC_GetSysClockFreq+0x2ec>
 80061f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061f6:	4b40      	ldr	r3, [pc, #256]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061fe:	ee07 3a90 	vmov	s15, r3
 8006202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006206:	ed97 6a02 	vldr	s12, [r7, #8]
 800620a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006308 <HAL_RCC_GetSysClockFreq+0x2e4>
 800620e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800621a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800621e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006222:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006226:	e043      	b.n	80062b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	ee07 3a90 	vmov	s15, r3
 800622e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006232:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006314 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800623a:	4b2f      	ldr	r3, [pc, #188]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800623c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006242:	ee07 3a90 	vmov	s15, r3
 8006246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800624a:	ed97 6a02 	vldr	s12, [r7, #8]
 800624e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006308 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800625a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800625e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006266:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800626a:	e021      	b.n	80062b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	ee07 3a90 	vmov	s15, r3
 8006272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006276:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006310 <HAL_RCC_GetSysClockFreq+0x2ec>
 800627a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800627e:	4b1e      	ldr	r3, [pc, #120]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006286:	ee07 3a90 	vmov	s15, r3
 800628a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800628e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006292:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006308 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800629a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800629e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80062ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80062b0:	4b11      	ldr	r3, [pc, #68]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b4:	0a5b      	lsrs	r3, r3, #9
 80062b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062ba:	3301      	adds	r3, #1
 80062bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	ee07 3a90 	vmov	s15, r3
 80062c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80062c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80062cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062d4:	ee17 3a90 	vmov	r3, s15
 80062d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80062da:	e005      	b.n	80062e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	61bb      	str	r3, [r7, #24]
      break;
 80062e0:	e002      	b.n	80062e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80062e2:	4b07      	ldr	r3, [pc, #28]	; (8006300 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80062e4:	61bb      	str	r3, [r7, #24]
      break;
 80062e6:	bf00      	nop
  }

  return sysclockfreq;
 80062e8:	69bb      	ldr	r3, [r7, #24]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3724      	adds	r7, #36	; 0x24
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	58024400 	.word	0x58024400
 80062fc:	03d09000 	.word	0x03d09000
 8006300:	003d0900 	.word	0x003d0900
 8006304:	00bb8000 	.word	0x00bb8000
 8006308:	46000000 	.word	0x46000000
 800630c:	4c742400 	.word	0x4c742400
 8006310:	4a742400 	.word	0x4a742400
 8006314:	4b3b8000 	.word	0x4b3b8000

08006318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800631e:	f7ff fe81 	bl	8006024 <HAL_RCC_GetSysClockFreq>
 8006322:	4602      	mov	r2, r0
 8006324:	4b10      	ldr	r3, [pc, #64]	; (8006368 <HAL_RCC_GetHCLKFreq+0x50>)
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	0a1b      	lsrs	r3, r3, #8
 800632a:	f003 030f 	and.w	r3, r3, #15
 800632e:	490f      	ldr	r1, [pc, #60]	; (800636c <HAL_RCC_GetHCLKFreq+0x54>)
 8006330:	5ccb      	ldrb	r3, [r1, r3]
 8006332:	f003 031f 	and.w	r3, r3, #31
 8006336:	fa22 f303 	lsr.w	r3, r2, r3
 800633a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800633c:	4b0a      	ldr	r3, [pc, #40]	; (8006368 <HAL_RCC_GetHCLKFreq+0x50>)
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	f003 030f 	and.w	r3, r3, #15
 8006344:	4a09      	ldr	r2, [pc, #36]	; (800636c <HAL_RCC_GetHCLKFreq+0x54>)
 8006346:	5cd3      	ldrb	r3, [r2, r3]
 8006348:	f003 031f 	and.w	r3, r3, #31
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	fa22 f303 	lsr.w	r3, r2, r3
 8006352:	4a07      	ldr	r2, [pc, #28]	; (8006370 <HAL_RCC_GetHCLKFreq+0x58>)
 8006354:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006356:	4a07      	ldr	r2, [pc, #28]	; (8006374 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800635c:	4b04      	ldr	r3, [pc, #16]	; (8006370 <HAL_RCC_GetHCLKFreq+0x58>)
 800635e:	681b      	ldr	r3, [r3, #0]
}
 8006360:	4618      	mov	r0, r3
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	58024400 	.word	0x58024400
 800636c:	0800ae78 	.word	0x0800ae78
 8006370:	2400000c 	.word	0x2400000c
 8006374:	24000008 	.word	0x24000008

08006378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800637c:	f7ff ffcc 	bl	8006318 <HAL_RCC_GetHCLKFreq>
 8006380:	4602      	mov	r2, r0
 8006382:	4b06      	ldr	r3, [pc, #24]	; (800639c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	091b      	lsrs	r3, r3, #4
 8006388:	f003 0307 	and.w	r3, r3, #7
 800638c:	4904      	ldr	r1, [pc, #16]	; (80063a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800638e:	5ccb      	ldrb	r3, [r1, r3]
 8006390:	f003 031f 	and.w	r3, r3, #31
 8006394:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006398:	4618      	mov	r0, r3
 800639a:	bd80      	pop	{r7, pc}
 800639c:	58024400 	.word	0x58024400
 80063a0:	0800ae78 	.word	0x0800ae78

080063a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063a8:	b0ca      	sub	sp, #296	; 0x128
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80063b0:	2300      	movs	r3, #0
 80063b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80063b6:	2300      	movs	r3, #0
 80063b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80063bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80063c8:	2500      	movs	r5, #0
 80063ca:	ea54 0305 	orrs.w	r3, r4, r5
 80063ce:	d049      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80063d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063da:	d02f      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80063dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063e0:	d828      	bhi.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80063e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063e6:	d01a      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80063e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063ec:	d822      	bhi.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d003      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80063f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063f6:	d007      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80063f8:	e01c      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063fa:	4bb8      	ldr	r3, [pc, #736]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fe:	4ab7      	ldr	r2, [pc, #732]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006404:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006406:	e01a      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800640c:	3308      	adds	r3, #8
 800640e:	2102      	movs	r1, #2
 8006410:	4618      	mov	r0, r3
 8006412:	f002 fb5b 	bl	8008acc <RCCEx_PLL2_Config>
 8006416:	4603      	mov	r3, r0
 8006418:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800641c:	e00f      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800641e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006422:	3328      	adds	r3, #40	; 0x28
 8006424:	2102      	movs	r1, #2
 8006426:	4618      	mov	r0, r3
 8006428:	f002 fc02 	bl	8008c30 <RCCEx_PLL3_Config>
 800642c:	4603      	mov	r3, r0
 800642e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006432:	e004      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800643a:	e000      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800643c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800643e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10a      	bne.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006446:	4ba5      	ldr	r3, [pc, #660]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800644a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800644e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006454:	4aa1      	ldr	r2, [pc, #644]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006456:	430b      	orrs	r3, r1
 8006458:	6513      	str	r3, [r2, #80]	; 0x50
 800645a:	e003      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800645c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006460:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006470:	f04f 0900 	mov.w	r9, #0
 8006474:	ea58 0309 	orrs.w	r3, r8, r9
 8006478:	d047      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800647a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800647e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006480:	2b04      	cmp	r3, #4
 8006482:	d82a      	bhi.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006484:	a201      	add	r2, pc, #4	; (adr r2, 800648c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648a:	bf00      	nop
 800648c:	080064a1 	.word	0x080064a1
 8006490:	080064af 	.word	0x080064af
 8006494:	080064c5 	.word	0x080064c5
 8006498:	080064e3 	.word	0x080064e3
 800649c:	080064e3 	.word	0x080064e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064a0:	4b8e      	ldr	r3, [pc, #568]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a4:	4a8d      	ldr	r2, [pc, #564]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80064ac:	e01a      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064b2:	3308      	adds	r3, #8
 80064b4:	2100      	movs	r1, #0
 80064b6:	4618      	mov	r0, r3
 80064b8:	f002 fb08 	bl	8008acc <RCCEx_PLL2_Config>
 80064bc:	4603      	mov	r3, r0
 80064be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80064c2:	e00f      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064c8:	3328      	adds	r3, #40	; 0x28
 80064ca:	2100      	movs	r1, #0
 80064cc:	4618      	mov	r0, r3
 80064ce:	f002 fbaf 	bl	8008c30 <RCCEx_PLL3_Config>
 80064d2:	4603      	mov	r3, r0
 80064d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80064d8:	e004      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80064e0:	e000      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80064e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10a      	bne.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064ec:	4b7b      	ldr	r3, [pc, #492]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f0:	f023 0107 	bic.w	r1, r3, #7
 80064f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064fa:	4a78      	ldr	r2, [pc, #480]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064fc:	430b      	orrs	r3, r1
 80064fe:	6513      	str	r3, [r2, #80]	; 0x50
 8006500:	e003      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006502:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006506:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800650a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800650e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006512:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006516:	f04f 0b00 	mov.w	fp, #0
 800651a:	ea5a 030b 	orrs.w	r3, sl, fp
 800651e:	d04c      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800652a:	d030      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800652c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006530:	d829      	bhi.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006532:	2bc0      	cmp	r3, #192	; 0xc0
 8006534:	d02d      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006536:	2bc0      	cmp	r3, #192	; 0xc0
 8006538:	d825      	bhi.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800653a:	2b80      	cmp	r3, #128	; 0x80
 800653c:	d018      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800653e:	2b80      	cmp	r3, #128	; 0x80
 8006540:	d821      	bhi.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006546:	2b40      	cmp	r3, #64	; 0x40
 8006548:	d007      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800654a:	e01c      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800654c:	4b63      	ldr	r3, [pc, #396]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800654e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006550:	4a62      	ldr	r2, [pc, #392]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006556:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006558:	e01c      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800655a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800655e:	3308      	adds	r3, #8
 8006560:	2100      	movs	r1, #0
 8006562:	4618      	mov	r0, r3
 8006564:	f002 fab2 	bl	8008acc <RCCEx_PLL2_Config>
 8006568:	4603      	mov	r3, r0
 800656a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800656e:	e011      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006574:	3328      	adds	r3, #40	; 0x28
 8006576:	2100      	movs	r1, #0
 8006578:	4618      	mov	r0, r3
 800657a:	f002 fb59 	bl	8008c30 <RCCEx_PLL3_Config>
 800657e:	4603      	mov	r3, r0
 8006580:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006584:	e006      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800658c:	e002      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800658e:	bf00      	nop
 8006590:	e000      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006592:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006594:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10a      	bne.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800659c:	4b4f      	ldr	r3, [pc, #316]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800659e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065a0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80065a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065aa:	4a4c      	ldr	r2, [pc, #304]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065ac:	430b      	orrs	r3, r1
 80065ae:	6513      	str	r3, [r2, #80]	; 0x50
 80065b0:	e003      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80065ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80065c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80065ca:	2300      	movs	r3, #0
 80065cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80065d0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80065d4:	460b      	mov	r3, r1
 80065d6:	4313      	orrs	r3, r2
 80065d8:	d053      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80065da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80065e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065e6:	d035      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80065e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065ec:	d82e      	bhi.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80065ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80065f2:	d031      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80065f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80065f8:	d828      	bhi.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80065fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065fe:	d01a      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006600:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006604:	d822      	bhi.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800660a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800660e:	d007      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006610:	e01c      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006612:	4b32      	ldr	r3, [pc, #200]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006616:	4a31      	ldr	r2, [pc, #196]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800661c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800661e:	e01c      	b.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006624:	3308      	adds	r3, #8
 8006626:	2100      	movs	r1, #0
 8006628:	4618      	mov	r0, r3
 800662a:	f002 fa4f 	bl	8008acc <RCCEx_PLL2_Config>
 800662e:	4603      	mov	r3, r0
 8006630:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006634:	e011      	b.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800663a:	3328      	adds	r3, #40	; 0x28
 800663c:	2100      	movs	r1, #0
 800663e:	4618      	mov	r0, r3
 8006640:	f002 faf6 	bl	8008c30 <RCCEx_PLL3_Config>
 8006644:	4603      	mov	r3, r0
 8006646:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800664a:	e006      	b.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006652:	e002      	b.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006654:	bf00      	nop
 8006656:	e000      	b.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006658:	bf00      	nop
    }

    if (ret == HAL_OK)
 800665a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10b      	bne.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006662:	4b1e      	ldr	r3, [pc, #120]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006666:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800666a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800666e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006672:	4a1a      	ldr	r2, [pc, #104]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006674:	430b      	orrs	r3, r1
 8006676:	6593      	str	r3, [r2, #88]	; 0x58
 8006678:	e003      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800667a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800667e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800668e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006692:	2300      	movs	r3, #0
 8006694:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006698:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800669c:	460b      	mov	r3, r1
 800669e:	4313      	orrs	r3, r2
 80066a0:	d056      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80066a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80066aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066ae:	d038      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80066b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066b4:	d831      	bhi.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80066b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80066ba:	d034      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80066bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80066c0:	d82b      	bhi.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80066c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066c6:	d01d      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80066c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066cc:	d825      	bhi.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d006      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80066d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066d6:	d00a      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80066d8:	e01f      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80066da:	bf00      	nop
 80066dc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066e0:	4ba2      	ldr	r3, [pc, #648]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e4:	4aa1      	ldr	r2, [pc, #644]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066ec:	e01c      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066f2:	3308      	adds	r3, #8
 80066f4:	2100      	movs	r1, #0
 80066f6:	4618      	mov	r0, r3
 80066f8:	f002 f9e8 	bl	8008acc <RCCEx_PLL2_Config>
 80066fc:	4603      	mov	r3, r0
 80066fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006702:	e011      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006708:	3328      	adds	r3, #40	; 0x28
 800670a:	2100      	movs	r1, #0
 800670c:	4618      	mov	r0, r3
 800670e:	f002 fa8f 	bl	8008c30 <RCCEx_PLL3_Config>
 8006712:	4603      	mov	r3, r0
 8006714:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006718:	e006      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006720:	e002      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006722:	bf00      	nop
 8006724:	e000      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006726:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006728:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10b      	bne.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006730:	4b8e      	ldr	r3, [pc, #568]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006734:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800673c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006740:	4a8a      	ldr	r2, [pc, #552]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006742:	430b      	orrs	r3, r1
 8006744:	6593      	str	r3, [r2, #88]	; 0x58
 8006746:	e003      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006748:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800674c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006758:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800675c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006760:	2300      	movs	r3, #0
 8006762:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006766:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800676a:	460b      	mov	r3, r1
 800676c:	4313      	orrs	r3, r2
 800676e:	d03a      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006776:	2b30      	cmp	r3, #48	; 0x30
 8006778:	d01f      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x416>
 800677a:	2b30      	cmp	r3, #48	; 0x30
 800677c:	d819      	bhi.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800677e:	2b20      	cmp	r3, #32
 8006780:	d00c      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006782:	2b20      	cmp	r3, #32
 8006784:	d815      	bhi.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006786:	2b00      	cmp	r3, #0
 8006788:	d019      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800678a:	2b10      	cmp	r3, #16
 800678c:	d111      	bne.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800678e:	4b77      	ldr	r3, [pc, #476]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006792:	4a76      	ldr	r2, [pc, #472]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006798:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800679a:	e011      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800679c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067a0:	3308      	adds	r3, #8
 80067a2:	2102      	movs	r1, #2
 80067a4:	4618      	mov	r0, r3
 80067a6:	f002 f991 	bl	8008acc <RCCEx_PLL2_Config>
 80067aa:	4603      	mov	r3, r0
 80067ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80067b0:	e006      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80067b8:	e002      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80067ba:	bf00      	nop
 80067bc:	e000      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80067be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10a      	bne.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80067c8:	4b68      	ldr	r3, [pc, #416]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80067ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067cc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80067d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067d6:	4a65      	ldr	r2, [pc, #404]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80067d8:	430b      	orrs	r3, r1
 80067da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067dc:	e003      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80067e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ee:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80067f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80067f6:	2300      	movs	r3, #0
 80067f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80067fc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006800:	460b      	mov	r3, r1
 8006802:	4313      	orrs	r3, r2
 8006804:	d051      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800680a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800680c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006810:	d035      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006812:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006816:	d82e      	bhi.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006818:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800681c:	d031      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800681e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006822:	d828      	bhi.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006828:	d01a      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800682a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800682e:	d822      	bhi.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006830:	2b00      	cmp	r3, #0
 8006832:	d003      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006838:	d007      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800683a:	e01c      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800683c:	4b4b      	ldr	r3, [pc, #300]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800683e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006840:	4a4a      	ldr	r2, [pc, #296]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006846:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006848:	e01c      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800684a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800684e:	3308      	adds	r3, #8
 8006850:	2100      	movs	r1, #0
 8006852:	4618      	mov	r0, r3
 8006854:	f002 f93a 	bl	8008acc <RCCEx_PLL2_Config>
 8006858:	4603      	mov	r3, r0
 800685a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800685e:	e011      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006864:	3328      	adds	r3, #40	; 0x28
 8006866:	2100      	movs	r1, #0
 8006868:	4618      	mov	r0, r3
 800686a:	f002 f9e1 	bl	8008c30 <RCCEx_PLL3_Config>
 800686e:	4603      	mov	r3, r0
 8006870:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006874:	e006      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800687c:	e002      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800687e:	bf00      	nop
 8006880:	e000      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006882:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006884:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10a      	bne.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800688c:	4b37      	ldr	r3, [pc, #220]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800688e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006890:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800689a:	4a34      	ldr	r2, [pc, #208]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800689c:	430b      	orrs	r3, r1
 800689e:	6513      	str	r3, [r2, #80]	; 0x50
 80068a0:	e003      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80068aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80068b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068ba:	2300      	movs	r3, #0
 80068bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80068c0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80068c4:	460b      	mov	r3, r1
 80068c6:	4313      	orrs	r3, r2
 80068c8:	d056      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80068ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068d4:	d033      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80068d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068da:	d82c      	bhi.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80068dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068e0:	d02f      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80068e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068e6:	d826      	bhi.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80068e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068ec:	d02b      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80068ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068f2:	d820      	bhi.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80068f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068f8:	d012      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80068fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068fe:	d81a      	bhi.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006900:	2b00      	cmp	r3, #0
 8006902:	d022      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006908:	d115      	bne.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800690a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800690e:	3308      	adds	r3, #8
 8006910:	2101      	movs	r1, #1
 8006912:	4618      	mov	r0, r3
 8006914:	f002 f8da 	bl	8008acc <RCCEx_PLL2_Config>
 8006918:	4603      	mov	r3, r0
 800691a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800691e:	e015      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006924:	3328      	adds	r3, #40	; 0x28
 8006926:	2101      	movs	r1, #1
 8006928:	4618      	mov	r0, r3
 800692a:	f002 f981 	bl	8008c30 <RCCEx_PLL3_Config>
 800692e:	4603      	mov	r3, r0
 8006930:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006934:	e00a      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800693c:	e006      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800693e:	bf00      	nop
 8006940:	e004      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006942:	bf00      	nop
 8006944:	e002      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006946:	bf00      	nop
 8006948:	e000      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800694a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800694c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10d      	bne.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006954:	4b05      	ldr	r3, [pc, #20]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006958:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800695c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006962:	4a02      	ldr	r2, [pc, #8]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006964:	430b      	orrs	r3, r1
 8006966:	6513      	str	r3, [r2, #80]	; 0x50
 8006968:	e006      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800696a:	bf00      	nop
 800696c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006970:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006974:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800697c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006980:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006984:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006988:	2300      	movs	r3, #0
 800698a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800698e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006992:	460b      	mov	r3, r1
 8006994:	4313      	orrs	r3, r2
 8006996:	d055      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800699c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069a4:	d033      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80069a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069aa:	d82c      	bhi.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80069ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069b0:	d02f      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80069b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069b6:	d826      	bhi.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80069b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80069bc:	d02b      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80069be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80069c2:	d820      	bhi.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80069c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069c8:	d012      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80069ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069ce:	d81a      	bhi.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d022      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80069d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069d8:	d115      	bne.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069de:	3308      	adds	r3, #8
 80069e0:	2101      	movs	r1, #1
 80069e2:	4618      	mov	r0, r3
 80069e4:	f002 f872 	bl	8008acc <RCCEx_PLL2_Config>
 80069e8:	4603      	mov	r3, r0
 80069ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80069ee:	e015      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069f4:	3328      	adds	r3, #40	; 0x28
 80069f6:	2101      	movs	r1, #1
 80069f8:	4618      	mov	r0, r3
 80069fa:	f002 f919 	bl	8008c30 <RCCEx_PLL3_Config>
 80069fe:	4603      	mov	r3, r0
 8006a00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006a04:	e00a      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a0c:	e006      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006a0e:	bf00      	nop
 8006a10:	e004      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006a12:	bf00      	nop
 8006a14:	e002      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006a16:	bf00      	nop
 8006a18:	e000      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006a1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10b      	bne.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006a24:	4ba3      	ldr	r3, [pc, #652]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a28:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a34:	4a9f      	ldr	r2, [pc, #636]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a36:	430b      	orrs	r3, r1
 8006a38:	6593      	str	r3, [r2, #88]	; 0x58
 8006a3a:	e003      	b.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006a50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a54:	2300      	movs	r3, #0
 8006a56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4313      	orrs	r3, r2
 8006a62:	d037      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a6e:	d00e      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a74:	d816      	bhi.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d018      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006a7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a7e:	d111      	bne.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a80:	4b8c      	ldr	r3, [pc, #560]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a84:	4a8b      	ldr	r2, [pc, #556]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006a8c:	e00f      	b.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a92:	3308      	adds	r3, #8
 8006a94:	2101      	movs	r1, #1
 8006a96:	4618      	mov	r0, r3
 8006a98:	f002 f818 	bl	8008acc <RCCEx_PLL2_Config>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006aa2:	e004      	b.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006aaa:	e000      	b.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006aac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10a      	bne.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006ab6:	4b7f      	ldr	r3, [pc, #508]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aba:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac4:	4a7b      	ldr	r2, [pc, #492]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ac6:	430b      	orrs	r3, r1
 8006ac8:	6513      	str	r3, [r2, #80]	; 0x50
 8006aca:	e003      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006acc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ad0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006adc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006aea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006aee:	460b      	mov	r3, r1
 8006af0:	4313      	orrs	r3, r2
 8006af2:	d039      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006afa:	2b03      	cmp	r3, #3
 8006afc:	d81c      	bhi.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006afe:	a201      	add	r2, pc, #4	; (adr r2, 8006b04 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b04:	08006b41 	.word	0x08006b41
 8006b08:	08006b15 	.word	0x08006b15
 8006b0c:	08006b23 	.word	0x08006b23
 8006b10:	08006b41 	.word	0x08006b41
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b14:	4b67      	ldr	r3, [pc, #412]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b18:	4a66      	ldr	r2, [pc, #408]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006b20:	e00f      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b26:	3308      	adds	r3, #8
 8006b28:	2102      	movs	r1, #2
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f001 ffce 	bl	8008acc <RCCEx_PLL2_Config>
 8006b30:	4603      	mov	r3, r0
 8006b32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006b36:	e004      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b3e:	e000      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10a      	bne.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006b4a:	4b5a      	ldr	r3, [pc, #360]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b4e:	f023 0103 	bic.w	r1, r3, #3
 8006b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b58:	4a56      	ldr	r2, [pc, #344]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b5a:	430b      	orrs	r3, r1
 8006b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b5e:	e003      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b70:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006b74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b7e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006b82:	460b      	mov	r3, r1
 8006b84:	4313      	orrs	r3, r2
 8006b86:	f000 809f 	beq.w	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b8a:	4b4b      	ldr	r3, [pc, #300]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a4a      	ldr	r2, [pc, #296]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b96:	f7fa fee7 	bl	8001968 <HAL_GetTick>
 8006b9a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b9e:	e00b      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ba0:	f7fa fee2 	bl	8001968 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	2b64      	cmp	r3, #100	; 0x64
 8006bae:	d903      	bls.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006bb6:	e005      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006bb8:	4b3f      	ldr	r3, [pc, #252]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d0ed      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d179      	bne.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006bcc:	4b39      	ldr	r3, [pc, #228]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bd4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006bd8:	4053      	eors	r3, r2
 8006bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d015      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006be2:	4b34      	ldr	r3, [pc, #208]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006bee:	4b31      	ldr	r3, [pc, #196]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf2:	4a30      	ldr	r2, [pc, #192]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bf8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006bfa:	4b2e      	ldr	r3, [pc, #184]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bfe:	4a2d      	ldr	r2, [pc, #180]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c04:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006c06:	4a2b      	ldr	r2, [pc, #172]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c0c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c1a:	d118      	bne.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c1c:	f7fa fea4 	bl	8001968 <HAL_GetTick>
 8006c20:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c24:	e00d      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c26:	f7fa fe9f 	bl	8001968 <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006c30:	1ad2      	subs	r2, r2, r3
 8006c32:	f241 3388 	movw	r3, #5000	; 0x1388
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d903      	bls.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8006c40:	e005      	b.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c42:	4b1c      	ldr	r3, [pc, #112]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c46:	f003 0302 	and.w	r3, r3, #2
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d0eb      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d129      	bne.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c66:	d10e      	bne.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006c68:	4b12      	ldr	r3, [pc, #72]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006c78:	091a      	lsrs	r2, r3, #4
 8006c7a:	4b10      	ldr	r3, [pc, #64]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	4a0d      	ldr	r2, [pc, #52]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c80:	430b      	orrs	r3, r1
 8006c82:	6113      	str	r3, [r2, #16]
 8006c84:	e005      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006c86:	4b0b      	ldr	r3, [pc, #44]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	4a0a      	ldr	r2, [pc, #40]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c8c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006c90:	6113      	str	r3, [r2, #16]
 8006c92:	4b08      	ldr	r3, [pc, #32]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c94:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ca2:	4a04      	ldr	r2, [pc, #16]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ca4:	430b      	orrs	r3, r1
 8006ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ca8:	e00e      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006caa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8006cb2:	e009      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006cb4:	58024400 	.word	0x58024400
 8006cb8:	58024800 	.word	0x58024800
 8006cbc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cc4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd0:	f002 0301 	and.w	r3, r2, #1
 8006cd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cd8:	2300      	movs	r3, #0
 8006cda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006cde:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	f000 8089 	beq.w	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cf0:	2b28      	cmp	r3, #40	; 0x28
 8006cf2:	d86b      	bhi.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006cf4:	a201      	add	r2, pc, #4	; (adr r2, 8006cfc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfa:	bf00      	nop
 8006cfc:	08006dd5 	.word	0x08006dd5
 8006d00:	08006dcd 	.word	0x08006dcd
 8006d04:	08006dcd 	.word	0x08006dcd
 8006d08:	08006dcd 	.word	0x08006dcd
 8006d0c:	08006dcd 	.word	0x08006dcd
 8006d10:	08006dcd 	.word	0x08006dcd
 8006d14:	08006dcd 	.word	0x08006dcd
 8006d18:	08006dcd 	.word	0x08006dcd
 8006d1c:	08006da1 	.word	0x08006da1
 8006d20:	08006dcd 	.word	0x08006dcd
 8006d24:	08006dcd 	.word	0x08006dcd
 8006d28:	08006dcd 	.word	0x08006dcd
 8006d2c:	08006dcd 	.word	0x08006dcd
 8006d30:	08006dcd 	.word	0x08006dcd
 8006d34:	08006dcd 	.word	0x08006dcd
 8006d38:	08006dcd 	.word	0x08006dcd
 8006d3c:	08006db7 	.word	0x08006db7
 8006d40:	08006dcd 	.word	0x08006dcd
 8006d44:	08006dcd 	.word	0x08006dcd
 8006d48:	08006dcd 	.word	0x08006dcd
 8006d4c:	08006dcd 	.word	0x08006dcd
 8006d50:	08006dcd 	.word	0x08006dcd
 8006d54:	08006dcd 	.word	0x08006dcd
 8006d58:	08006dcd 	.word	0x08006dcd
 8006d5c:	08006dd5 	.word	0x08006dd5
 8006d60:	08006dcd 	.word	0x08006dcd
 8006d64:	08006dcd 	.word	0x08006dcd
 8006d68:	08006dcd 	.word	0x08006dcd
 8006d6c:	08006dcd 	.word	0x08006dcd
 8006d70:	08006dcd 	.word	0x08006dcd
 8006d74:	08006dcd 	.word	0x08006dcd
 8006d78:	08006dcd 	.word	0x08006dcd
 8006d7c:	08006dd5 	.word	0x08006dd5
 8006d80:	08006dcd 	.word	0x08006dcd
 8006d84:	08006dcd 	.word	0x08006dcd
 8006d88:	08006dcd 	.word	0x08006dcd
 8006d8c:	08006dcd 	.word	0x08006dcd
 8006d90:	08006dcd 	.word	0x08006dcd
 8006d94:	08006dcd 	.word	0x08006dcd
 8006d98:	08006dcd 	.word	0x08006dcd
 8006d9c:	08006dd5 	.word	0x08006dd5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006da4:	3308      	adds	r3, #8
 8006da6:	2101      	movs	r1, #1
 8006da8:	4618      	mov	r0, r3
 8006daa:	f001 fe8f 	bl	8008acc <RCCEx_PLL2_Config>
 8006dae:	4603      	mov	r3, r0
 8006db0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006db4:	e00f      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dba:	3328      	adds	r3, #40	; 0x28
 8006dbc:	2101      	movs	r1, #1
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f001 ff36 	bl	8008c30 <RCCEx_PLL3_Config>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006dca:	e004      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006dd2:	e000      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10a      	bne.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006dde:	4bbf      	ldr	r3, [pc, #764]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dec:	4abb      	ldr	r2, [pc, #748]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006dee:	430b      	orrs	r3, r1
 8006df0:	6553      	str	r3, [r2, #84]	; 0x54
 8006df2:	e003      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006df8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e04:	f002 0302 	and.w	r3, r2, #2
 8006e08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006e12:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006e16:	460b      	mov	r3, r1
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	d041      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e22:	2b05      	cmp	r3, #5
 8006e24:	d824      	bhi.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006e26:	a201      	add	r2, pc, #4	; (adr r2, 8006e2c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2c:	08006e79 	.word	0x08006e79
 8006e30:	08006e45 	.word	0x08006e45
 8006e34:	08006e5b 	.word	0x08006e5b
 8006e38:	08006e79 	.word	0x08006e79
 8006e3c:	08006e79 	.word	0x08006e79
 8006e40:	08006e79 	.word	0x08006e79
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e48:	3308      	adds	r3, #8
 8006e4a:	2101      	movs	r1, #1
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f001 fe3d 	bl	8008acc <RCCEx_PLL2_Config>
 8006e52:	4603      	mov	r3, r0
 8006e54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006e58:	e00f      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e5e:	3328      	adds	r3, #40	; 0x28
 8006e60:	2101      	movs	r1, #1
 8006e62:	4618      	mov	r0, r3
 8006e64:	f001 fee4 	bl	8008c30 <RCCEx_PLL3_Config>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006e6e:	e004      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e76:	e000      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10a      	bne.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006e82:	4b96      	ldr	r3, [pc, #600]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e86:	f023 0107 	bic.w	r1, r3, #7
 8006e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e90:	4a92      	ldr	r2, [pc, #584]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e92:	430b      	orrs	r3, r1
 8006e94:	6553      	str	r3, [r2, #84]	; 0x54
 8006e96:	e003      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea8:	f002 0304 	and.w	r3, r2, #4
 8006eac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006eb6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006eba:	460b      	mov	r3, r1
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	d044      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ec8:	2b05      	cmp	r3, #5
 8006eca:	d825      	bhi.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006ecc:	a201      	add	r2, pc, #4	; (adr r2, 8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed2:	bf00      	nop
 8006ed4:	08006f21 	.word	0x08006f21
 8006ed8:	08006eed 	.word	0x08006eed
 8006edc:	08006f03 	.word	0x08006f03
 8006ee0:	08006f21 	.word	0x08006f21
 8006ee4:	08006f21 	.word	0x08006f21
 8006ee8:	08006f21 	.word	0x08006f21
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ef0:	3308      	adds	r3, #8
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f001 fde9 	bl	8008acc <RCCEx_PLL2_Config>
 8006efa:	4603      	mov	r3, r0
 8006efc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006f00:	e00f      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f06:	3328      	adds	r3, #40	; 0x28
 8006f08:	2101      	movs	r1, #1
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f001 fe90 	bl	8008c30 <RCCEx_PLL3_Config>
 8006f10:	4603      	mov	r3, r0
 8006f12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006f16:	e004      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f1e:	e000      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006f20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10b      	bne.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f2a:	4b6c      	ldr	r3, [pc, #432]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f2e:	f023 0107 	bic.w	r1, r3, #7
 8006f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f3a:	4a68      	ldr	r2, [pc, #416]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f3c:	430b      	orrs	r3, r1
 8006f3e:	6593      	str	r3, [r2, #88]	; 0x58
 8006f40:	e003      	b.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f52:	f002 0320 	and.w	r3, r2, #32
 8006f56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006f64:	460b      	mov	r3, r1
 8006f66:	4313      	orrs	r3, r2
 8006f68:	d055      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f76:	d033      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f7c:	d82c      	bhi.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f82:	d02f      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f88:	d826      	bhi.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006f8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f8e:	d02b      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006f90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f94:	d820      	bhi.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006f96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f9a:	d012      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006f9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fa0:	d81a      	bhi.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d022      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006fa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006faa:	d115      	bne.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fb0:	3308      	adds	r3, #8
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f001 fd89 	bl	8008acc <RCCEx_PLL2_Config>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006fc0:	e015      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fc6:	3328      	adds	r3, #40	; 0x28
 8006fc8:	2102      	movs	r1, #2
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f001 fe30 	bl	8008c30 <RCCEx_PLL3_Config>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006fd6:	e00a      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006fde:	e006      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006fe0:	bf00      	nop
 8006fe2:	e004      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006fe4:	bf00      	nop
 8006fe6:	e002      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006fe8:	bf00      	nop
 8006fea:	e000      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10b      	bne.n	800700e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ff6:	4b39      	ldr	r3, [pc, #228]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ffa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007006:	4a35      	ldr	r2, [pc, #212]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007008:	430b      	orrs	r3, r1
 800700a:	6553      	str	r3, [r2, #84]	; 0x54
 800700c:	e003      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800700e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007012:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800701a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007022:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007026:	2300      	movs	r3, #0
 8007028:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800702c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007030:	460b      	mov	r3, r1
 8007032:	4313      	orrs	r3, r2
 8007034:	d058      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800703a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800703e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007042:	d033      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007044:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007048:	d82c      	bhi.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800704a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800704e:	d02f      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007054:	d826      	bhi.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007056:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800705a:	d02b      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800705c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007060:	d820      	bhi.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007066:	d012      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007068:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800706c:	d81a      	bhi.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800706e:	2b00      	cmp	r3, #0
 8007070:	d022      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007076:	d115      	bne.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800707c:	3308      	adds	r3, #8
 800707e:	2100      	movs	r1, #0
 8007080:	4618      	mov	r0, r3
 8007082:	f001 fd23 	bl	8008acc <RCCEx_PLL2_Config>
 8007086:	4603      	mov	r3, r0
 8007088:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800708c:	e015      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800708e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007092:	3328      	adds	r3, #40	; 0x28
 8007094:	2102      	movs	r1, #2
 8007096:	4618      	mov	r0, r3
 8007098:	f001 fdca 	bl	8008c30 <RCCEx_PLL3_Config>
 800709c:	4603      	mov	r3, r0
 800709e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80070a2:	e00a      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80070aa:	e006      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80070ac:	bf00      	nop
 80070ae:	e004      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80070b0:	bf00      	nop
 80070b2:	e002      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80070b4:	bf00      	nop
 80070b6:	e000      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80070b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10e      	bne.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80070c2:	4b06      	ldr	r3, [pc, #24]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80070c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070c6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80070ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070d2:	4a02      	ldr	r2, [pc, #8]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80070d4:	430b      	orrs	r3, r1
 80070d6:	6593      	str	r3, [r2, #88]	; 0x58
 80070d8:	e006      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80070da:	bf00      	nop
 80070dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80070e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80070f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80070f8:	2300      	movs	r3, #0
 80070fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80070fe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007102:	460b      	mov	r3, r1
 8007104:	4313      	orrs	r3, r2
 8007106:	d055      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800710c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007110:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007114:	d033      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007116:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800711a:	d82c      	bhi.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800711c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007120:	d02f      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007122:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007126:	d826      	bhi.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007128:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800712c:	d02b      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800712e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007132:	d820      	bhi.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007134:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007138:	d012      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800713a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800713e:	d81a      	bhi.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007140:	2b00      	cmp	r3, #0
 8007142:	d022      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007148:	d115      	bne.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800714a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800714e:	3308      	adds	r3, #8
 8007150:	2100      	movs	r1, #0
 8007152:	4618      	mov	r0, r3
 8007154:	f001 fcba 	bl	8008acc <RCCEx_PLL2_Config>
 8007158:	4603      	mov	r3, r0
 800715a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800715e:	e015      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007164:	3328      	adds	r3, #40	; 0x28
 8007166:	2102      	movs	r1, #2
 8007168:	4618      	mov	r0, r3
 800716a:	f001 fd61 	bl	8008c30 <RCCEx_PLL3_Config>
 800716e:	4603      	mov	r3, r0
 8007170:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007174:	e00a      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800717c:	e006      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800717e:	bf00      	nop
 8007180:	e004      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007182:	bf00      	nop
 8007184:	e002      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007186:	bf00      	nop
 8007188:	e000      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800718a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800718c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10b      	bne.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007194:	4ba1      	ldr	r3, [pc, #644]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007198:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800719c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80071a4:	4a9d      	ldr	r2, [pc, #628]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071a6:	430b      	orrs	r3, r1
 80071a8:	6593      	str	r3, [r2, #88]	; 0x58
 80071aa:	e003      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80071b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071bc:	f002 0308 	and.w	r3, r2, #8
 80071c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071c4:	2300      	movs	r3, #0
 80071c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80071ca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80071ce:	460b      	mov	r3, r1
 80071d0:	4313      	orrs	r3, r2
 80071d2:	d01e      	beq.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80071d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071e0:	d10c      	bne.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80071e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071e6:	3328      	adds	r3, #40	; 0x28
 80071e8:	2102      	movs	r1, #2
 80071ea:	4618      	mov	r0, r3
 80071ec:	f001 fd20 	bl	8008c30 <RCCEx_PLL3_Config>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d002      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80071fc:	4b87      	ldr	r3, [pc, #540]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007200:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800720c:	4a83      	ldr	r2, [pc, #524]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800720e:	430b      	orrs	r3, r1
 8007210:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721a:	f002 0310 	and.w	r3, r2, #16
 800721e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007222:	2300      	movs	r3, #0
 8007224:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007228:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800722c:	460b      	mov	r3, r1
 800722e:	4313      	orrs	r3, r2
 8007230:	d01e      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007236:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800723a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800723e:	d10c      	bne.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007244:	3328      	adds	r3, #40	; 0x28
 8007246:	2102      	movs	r1, #2
 8007248:	4618      	mov	r0, r3
 800724a:	f001 fcf1 	bl	8008c30 <RCCEx_PLL3_Config>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d002      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800725a:	4b70      	ldr	r3, [pc, #448]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800725c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800725e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007266:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800726a:	4a6c      	ldr	r2, [pc, #432]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800726c:	430b      	orrs	r3, r1
 800726e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007278:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800727c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007280:	2300      	movs	r3, #0
 8007282:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007286:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800728a:	460b      	mov	r3, r1
 800728c:	4313      	orrs	r3, r2
 800728e:	d03e      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007290:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007294:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007298:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800729c:	d022      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800729e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072a2:	d81b      	bhi.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d003      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80072a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072ac:	d00b      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80072ae:	e015      	b.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072b4:	3308      	adds	r3, #8
 80072b6:	2100      	movs	r1, #0
 80072b8:	4618      	mov	r0, r3
 80072ba:	f001 fc07 	bl	8008acc <RCCEx_PLL2_Config>
 80072be:	4603      	mov	r3, r0
 80072c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80072c4:	e00f      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80072c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ca:	3328      	adds	r3, #40	; 0x28
 80072cc:	2102      	movs	r1, #2
 80072ce:	4618      	mov	r0, r3
 80072d0:	f001 fcae 	bl	8008c30 <RCCEx_PLL3_Config>
 80072d4:	4603      	mov	r3, r0
 80072d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80072da:	e004      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80072e2:	e000      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80072e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10b      	bne.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80072ee:	4b4b      	ldr	r3, [pc, #300]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072f2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80072f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80072fe:	4a47      	ldr	r2, [pc, #284]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007300:	430b      	orrs	r3, r1
 8007302:	6593      	str	r3, [r2, #88]	; 0x58
 8007304:	e003      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007306:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800730a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800730e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007316:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800731a:	67bb      	str	r3, [r7, #120]	; 0x78
 800731c:	2300      	movs	r3, #0
 800731e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007320:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007324:	460b      	mov	r3, r1
 8007326:	4313      	orrs	r3, r2
 8007328:	d03b      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800732a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800732e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007332:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007336:	d01f      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007338:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800733c:	d818      	bhi.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800733e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007342:	d003      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007344:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007348:	d007      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800734a:	e011      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800734c:	4b33      	ldr	r3, [pc, #204]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800734e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007350:	4a32      	ldr	r2, [pc, #200]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007356:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007358:	e00f      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800735a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800735e:	3328      	adds	r3, #40	; 0x28
 8007360:	2101      	movs	r1, #1
 8007362:	4618      	mov	r0, r3
 8007364:	f001 fc64 	bl	8008c30 <RCCEx_PLL3_Config>
 8007368:	4603      	mov	r3, r0
 800736a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800736e:	e004      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007376:	e000      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007378:	bf00      	nop
    }

    if (ret == HAL_OK)
 800737a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10b      	bne.n	800739a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007382:	4b26      	ldr	r3, [pc, #152]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007386:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800738a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800738e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007392:	4a22      	ldr	r2, [pc, #136]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007394:	430b      	orrs	r3, r1
 8007396:	6553      	str	r3, [r2, #84]	; 0x54
 8007398:	e003      	b.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800739a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800739e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80073a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073aa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80073ae:	673b      	str	r3, [r7, #112]	; 0x70
 80073b0:	2300      	movs	r3, #0
 80073b2:	677b      	str	r3, [r7, #116]	; 0x74
 80073b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80073b8:	460b      	mov	r3, r1
 80073ba:	4313      	orrs	r3, r2
 80073bc:	d034      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80073be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d003      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80073c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073cc:	d007      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80073ce:	e011      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073d0:	4b12      	ldr	r3, [pc, #72]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d4:	4a11      	ldr	r2, [pc, #68]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80073dc:	e00e      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80073de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073e2:	3308      	adds	r3, #8
 80073e4:	2102      	movs	r1, #2
 80073e6:	4618      	mov	r0, r3
 80073e8:	f001 fb70 	bl	8008acc <RCCEx_PLL2_Config>
 80073ec:	4603      	mov	r3, r0
 80073ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80073f2:	e003      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80073fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10d      	bne.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007404:	4b05      	ldr	r3, [pc, #20]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007408:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800740c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007412:	4a02      	ldr	r2, [pc, #8]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007414:	430b      	orrs	r3, r1
 8007416:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007418:	e006      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800741a:	bf00      	nop
 800741c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007420:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007424:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800742c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007430:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007434:	66bb      	str	r3, [r7, #104]	; 0x68
 8007436:	2300      	movs	r3, #0
 8007438:	66fb      	str	r3, [r7, #108]	; 0x6c
 800743a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800743e:	460b      	mov	r3, r1
 8007440:	4313      	orrs	r3, r2
 8007442:	d00c      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007448:	3328      	adds	r3, #40	; 0x28
 800744a:	2102      	movs	r1, #2
 800744c:	4618      	mov	r0, r3
 800744e:	f001 fbef 	bl	8008c30 <RCCEx_PLL3_Config>
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d002      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800745e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007466:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800746a:	663b      	str	r3, [r7, #96]	; 0x60
 800746c:	2300      	movs	r3, #0
 800746e:	667b      	str	r3, [r7, #100]	; 0x64
 8007470:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007474:	460b      	mov	r3, r1
 8007476:	4313      	orrs	r3, r2
 8007478:	d038      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800747a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800747e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007482:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007486:	d018      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007488:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800748c:	d811      	bhi.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800748e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007492:	d014      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007498:	d80b      	bhi.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800749a:	2b00      	cmp	r3, #0
 800749c:	d011      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800749e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074a2:	d106      	bne.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074a4:	4bc3      	ldr	r3, [pc, #780]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a8:	4ac2      	ldr	r2, [pc, #776]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80074b0:	e008      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80074b8:	e004      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80074ba:	bf00      	nop
 80074bc:	e002      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80074be:	bf00      	nop
 80074c0:	e000      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80074c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10b      	bne.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80074cc:	4bb9      	ldr	r3, [pc, #740]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80074d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074dc:	4ab5      	ldr	r2, [pc, #724]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074de:	430b      	orrs	r3, r1
 80074e0:	6553      	str	r3, [r2, #84]	; 0x54
 80074e2:	e003      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80074ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80074f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80074fa:	2300      	movs	r3, #0
 80074fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074fe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007502:	460b      	mov	r3, r1
 8007504:	4313      	orrs	r3, r2
 8007506:	d009      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007508:	4baa      	ldr	r3, [pc, #680]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800750a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800750c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007516:	4aa7      	ldr	r2, [pc, #668]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007518:	430b      	orrs	r3, r1
 800751a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800751c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007524:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007528:	653b      	str	r3, [r7, #80]	; 0x50
 800752a:	2300      	movs	r3, #0
 800752c:	657b      	str	r3, [r7, #84]	; 0x54
 800752e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007532:	460b      	mov	r3, r1
 8007534:	4313      	orrs	r3, r2
 8007536:	d00a      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007538:	4b9e      	ldr	r3, [pc, #632]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007544:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007548:	4a9a      	ldr	r2, [pc, #616]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800754a:	430b      	orrs	r3, r1
 800754c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800754e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007556:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800755a:	64bb      	str	r3, [r7, #72]	; 0x48
 800755c:	2300      	movs	r3, #0
 800755e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007560:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007564:	460b      	mov	r3, r1
 8007566:	4313      	orrs	r3, r2
 8007568:	d009      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800756a:	4b92      	ldr	r3, [pc, #584]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800756c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800756e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007578:	4a8e      	ldr	r2, [pc, #568]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800757a:	430b      	orrs	r3, r1
 800757c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800757e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007586:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800758a:	643b      	str	r3, [r7, #64]	; 0x40
 800758c:	2300      	movs	r3, #0
 800758e:	647b      	str	r3, [r7, #68]	; 0x44
 8007590:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007594:	460b      	mov	r3, r1
 8007596:	4313      	orrs	r3, r2
 8007598:	d00e      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800759a:	4b86      	ldr	r3, [pc, #536]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	4a85      	ldr	r2, [pc, #532]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075a4:	6113      	str	r3, [r2, #16]
 80075a6:	4b83      	ldr	r3, [pc, #524]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075a8:	6919      	ldr	r1, [r3, #16]
 80075aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80075b2:	4a80      	ldr	r2, [pc, #512]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075b4:	430b      	orrs	r3, r1
 80075b6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80075b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80075c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80075c6:	2300      	movs	r3, #0
 80075c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075ca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80075ce:	460b      	mov	r3, r1
 80075d0:	4313      	orrs	r3, r2
 80075d2:	d009      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80075d4:	4b77      	ldr	r3, [pc, #476]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075d8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80075dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e2:	4a74      	ldr	r2, [pc, #464]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075e4:	430b      	orrs	r3, r1
 80075e6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80075e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80075f4:	633b      	str	r3, [r7, #48]	; 0x30
 80075f6:	2300      	movs	r3, #0
 80075f8:	637b      	str	r3, [r7, #52]	; 0x34
 80075fa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80075fe:	460b      	mov	r3, r1
 8007600:	4313      	orrs	r3, r2
 8007602:	d00a      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007604:	4b6b      	ldr	r3, [pc, #428]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007608:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800760c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007614:	4a67      	ldr	r2, [pc, #412]	; (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007616:	430b      	orrs	r3, r1
 8007618:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800761a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800761e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007622:	2100      	movs	r1, #0
 8007624:	62b9      	str	r1, [r7, #40]	; 0x28
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800762c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007630:	460b      	mov	r3, r1
 8007632:	4313      	orrs	r3, r2
 8007634:	d011      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800763a:	3308      	adds	r3, #8
 800763c:	2100      	movs	r1, #0
 800763e:	4618      	mov	r0, r3
 8007640:	f001 fa44 	bl	8008acc <RCCEx_PLL2_Config>
 8007644:	4603      	mov	r3, r0
 8007646:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800764a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800764e:	2b00      	cmp	r3, #0
 8007650:	d003      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007652:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007656:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800765a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800765e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007662:	2100      	movs	r1, #0
 8007664:	6239      	str	r1, [r7, #32]
 8007666:	f003 0302 	and.w	r3, r3, #2
 800766a:	627b      	str	r3, [r7, #36]	; 0x24
 800766c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007670:	460b      	mov	r3, r1
 8007672:	4313      	orrs	r3, r2
 8007674:	d011      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800767a:	3308      	adds	r3, #8
 800767c:	2101      	movs	r1, #1
 800767e:	4618      	mov	r0, r3
 8007680:	f001 fa24 	bl	8008acc <RCCEx_PLL2_Config>
 8007684:	4603      	mov	r3, r0
 8007686:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800768a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800768e:	2b00      	cmp	r3, #0
 8007690:	d003      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007692:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007696:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800769a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800769e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a2:	2100      	movs	r1, #0
 80076a4:	61b9      	str	r1, [r7, #24]
 80076a6:	f003 0304 	and.w	r3, r3, #4
 80076aa:	61fb      	str	r3, [r7, #28]
 80076ac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80076b0:	460b      	mov	r3, r1
 80076b2:	4313      	orrs	r3, r2
 80076b4:	d011      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80076b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076ba:	3308      	adds	r3, #8
 80076bc:	2102      	movs	r1, #2
 80076be:	4618      	mov	r0, r3
 80076c0:	f001 fa04 	bl	8008acc <RCCEx_PLL2_Config>
 80076c4:	4603      	mov	r3, r0
 80076c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80076ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80076da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e2:	2100      	movs	r1, #0
 80076e4:	6139      	str	r1, [r7, #16]
 80076e6:	f003 0308 	and.w	r3, r3, #8
 80076ea:	617b      	str	r3, [r7, #20]
 80076ec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80076f0:	460b      	mov	r3, r1
 80076f2:	4313      	orrs	r3, r2
 80076f4:	d011      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076fa:	3328      	adds	r3, #40	; 0x28
 80076fc:	2100      	movs	r1, #0
 80076fe:	4618      	mov	r0, r3
 8007700:	f001 fa96 	bl	8008c30 <RCCEx_PLL3_Config>
 8007704:	4603      	mov	r3, r0
 8007706:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800770a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007712:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007716:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800771a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800771e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007722:	2100      	movs	r1, #0
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	f003 0310 	and.w	r3, r3, #16
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007730:	460b      	mov	r3, r1
 8007732:	4313      	orrs	r3, r2
 8007734:	d011      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800773a:	3328      	adds	r3, #40	; 0x28
 800773c:	2101      	movs	r1, #1
 800773e:	4618      	mov	r0, r3
 8007740:	f001 fa76 	bl	8008c30 <RCCEx_PLL3_Config>
 8007744:	4603      	mov	r3, r0
 8007746:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800774a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800774e:	2b00      	cmp	r3, #0
 8007750:	d003      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007752:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007756:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800775a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800775e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007762:	2100      	movs	r1, #0
 8007764:	6039      	str	r1, [r7, #0]
 8007766:	f003 0320 	and.w	r3, r3, #32
 800776a:	607b      	str	r3, [r7, #4]
 800776c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007770:	460b      	mov	r3, r1
 8007772:	4313      	orrs	r3, r2
 8007774:	d011      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800777a:	3328      	adds	r3, #40	; 0x28
 800777c:	2102      	movs	r1, #2
 800777e:	4618      	mov	r0, r3
 8007780:	f001 fa56 	bl	8008c30 <RCCEx_PLL3_Config>
 8007784:	4603      	mov	r3, r0
 8007786:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800778a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800778e:	2b00      	cmp	r3, #0
 8007790:	d003      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007792:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007796:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800779a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	e000      	b.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80077ae:	46bd      	mov	sp, r7
 80077b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077b4:	58024400 	.word	0x58024400

080077b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b090      	sub	sp, #64	; 0x40
 80077bc:	af00      	add	r7, sp, #0
 80077be:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80077c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077c6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80077ca:	430b      	orrs	r3, r1
 80077cc:	f040 8094 	bne.w	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80077d0:	4b9e      	ldr	r3, [pc, #632]	; (8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077d4:	f003 0307 	and.w	r3, r3, #7
 80077d8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80077da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077dc:	2b04      	cmp	r3, #4
 80077de:	f200 8087 	bhi.w	80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80077e2:	a201      	add	r2, pc, #4	; (adr r2, 80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80077e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e8:	080077fd 	.word	0x080077fd
 80077ec:	08007825 	.word	0x08007825
 80077f0:	0800784d 	.word	0x0800784d
 80077f4:	080078e9 	.word	0x080078e9
 80077f8:	08007875 	.word	0x08007875
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80077fc:	4b93      	ldr	r3, [pc, #588]	; (8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007804:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007808:	d108      	bne.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800780a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800780e:	4618      	mov	r0, r3
 8007810:	f001 f80a 	bl	8008828 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007816:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007818:	f000 bd3f 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 800781c:	2300      	movs	r3, #0
 800781e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007820:	f000 bd3b 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007824:	4b89      	ldr	r3, [pc, #548]	; (8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800782c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007830:	d108      	bne.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007832:	f107 0318 	add.w	r3, r7, #24
 8007836:	4618      	mov	r0, r3
 8007838:	f000 fd4e 	bl	80082d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007840:	f000 bd2b 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8007844:	2300      	movs	r3, #0
 8007846:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007848:	f000 bd27 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800784c:	4b7f      	ldr	r3, [pc, #508]	; (8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007854:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007858:	d108      	bne.n	800786c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800785a:	f107 030c 	add.w	r3, r7, #12
 800785e:	4618      	mov	r0, r3
 8007860:	f000 fe8e 	bl	8008580 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007868:	f000 bd17 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 800786c:	2300      	movs	r3, #0
 800786e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007870:	f000 bd13 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007874:	4b75      	ldr	r3, [pc, #468]	; (8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007878:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800787c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800787e:	4b73      	ldr	r3, [pc, #460]	; (8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 0304 	and.w	r3, r3, #4
 8007886:	2b04      	cmp	r3, #4
 8007888:	d10c      	bne.n	80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800788a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800788c:	2b00      	cmp	r3, #0
 800788e:	d109      	bne.n	80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007890:	4b6e      	ldr	r3, [pc, #440]	; (8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	08db      	lsrs	r3, r3, #3
 8007896:	f003 0303 	and.w	r3, r3, #3
 800789a:	4a6d      	ldr	r2, [pc, #436]	; (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800789c:	fa22 f303 	lsr.w	r3, r2, r3
 80078a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078a2:	e01f      	b.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078a4:	4b69      	ldr	r3, [pc, #420]	; (8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078b0:	d106      	bne.n	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80078b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078b8:	d102      	bne.n	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80078ba:	4b66      	ldr	r3, [pc, #408]	; (8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80078bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078be:	e011      	b.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078c0:	4b62      	ldr	r3, [pc, #392]	; (8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078cc:	d106      	bne.n	80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80078ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078d4:	d102      	bne.n	80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80078d6:	4b60      	ldr	r3, [pc, #384]	; (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80078d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078da:	e003      	b.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80078dc:	2300      	movs	r3, #0
 80078de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80078e0:	f000 bcdb 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 80078e4:	f000 bcd9 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80078e8:	4b5b      	ldr	r3, [pc, #364]	; (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80078ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078ec:	f000 bcd5 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      default :
      {
        frequency = 0;
 80078f0:	2300      	movs	r3, #0
 80078f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078f4:	f000 bcd1 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80078f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078fc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007900:	430b      	orrs	r3, r1
 8007902:	f040 80ab 	bne.w	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007906:	4b51      	ldr	r3, [pc, #324]	; (8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800790a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800790e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007916:	d056      	beq.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800791e:	f200 8090 	bhi.w	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007924:	2bc0      	cmp	r3, #192	; 0xc0
 8007926:	f000 8088 	beq.w	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800792a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792c:	2bc0      	cmp	r3, #192	; 0xc0
 800792e:	f200 8088 	bhi.w	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007934:	2b80      	cmp	r3, #128	; 0x80
 8007936:	d032      	beq.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793a:	2b80      	cmp	r3, #128	; 0x80
 800793c:	f200 8081 	bhi.w	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007942:	2b00      	cmp	r3, #0
 8007944:	d003      	beq.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007948:	2b40      	cmp	r3, #64	; 0x40
 800794a:	d014      	beq.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800794c:	e079      	b.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800794e:	4b3f      	ldr	r3, [pc, #252]	; (8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007956:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800795a:	d108      	bne.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800795c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007960:	4618      	mov	r0, r3
 8007962:	f000 ff61 	bl	8008828 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007968:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800796a:	f000 bc96 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 800796e:	2300      	movs	r3, #0
 8007970:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007972:	f000 bc92 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007976:	4b35      	ldr	r3, [pc, #212]	; (8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800797e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007982:	d108      	bne.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007984:	f107 0318 	add.w	r3, r7, #24
 8007988:	4618      	mov	r0, r3
 800798a:	f000 fca5 	bl	80082d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007992:	f000 bc82 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8007996:	2300      	movs	r3, #0
 8007998:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800799a:	f000 bc7e 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800799e:	4b2b      	ldr	r3, [pc, #172]	; (8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079aa:	d108      	bne.n	80079be <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079ac:	f107 030c 	add.w	r3, r7, #12
 80079b0:	4618      	mov	r0, r3
 80079b2:	f000 fde5 	bl	8008580 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079ba:	f000 bc6e 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 80079be:	2300      	movs	r3, #0
 80079c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079c2:	f000 bc6a 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80079c6:	4b21      	ldr	r3, [pc, #132]	; (8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80079c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079ce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079d0:	4b1e      	ldr	r3, [pc, #120]	; (8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 0304 	and.w	r3, r3, #4
 80079d8:	2b04      	cmp	r3, #4
 80079da:	d10c      	bne.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80079dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d109      	bne.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079e2:	4b1a      	ldr	r3, [pc, #104]	; (8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	08db      	lsrs	r3, r3, #3
 80079e8:	f003 0303 	and.w	r3, r3, #3
 80079ec:	4a18      	ldr	r2, [pc, #96]	; (8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80079ee:	fa22 f303 	lsr.w	r3, r2, r3
 80079f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079f4:	e01f      	b.n	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80079f6:	4b15      	ldr	r3, [pc, #84]	; (8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a02:	d106      	bne.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a0a:	d102      	bne.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007a0c:	4b11      	ldr	r3, [pc, #68]	; (8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a10:	e011      	b.n	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a12:	4b0e      	ldr	r3, [pc, #56]	; (8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a1e:	d106      	bne.n	8007a2e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a26:	d102      	bne.n	8007a2e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007a28:	4b0b      	ldr	r3, [pc, #44]	; (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a2c:	e003      	b.n	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007a32:	f000 bc32 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8007a36:	f000 bc30 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a3a:	4b07      	ldr	r3, [pc, #28]	; (8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a3e:	f000 bc2c 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      default :
      {
        frequency = 0;
 8007a42:	2300      	movs	r3, #0
 8007a44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a46:	f000 bc28 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8007a4a:	bf00      	nop
 8007a4c:	58024400 	.word	0x58024400
 8007a50:	03d09000 	.word	0x03d09000
 8007a54:	003d0900 	.word	0x003d0900
 8007a58:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007a5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a60:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007a64:	430b      	orrs	r3, r1
 8007a66:	f040 809c 	bne.w	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007a6a:	4b9e      	ldr	r3, [pc, #632]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a6e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007a72:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a7a:	d054      	beq.n	8007b26 <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 8007a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a82:	f200 808b 	bhi.w	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
 8007a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a88:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007a8c:	f000 8083 	beq.w	8007b96 <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
 8007a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a92:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007a96:	f200 8081 	bhi.w	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007aa0:	d02f      	beq.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8007aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007aa8:	d878      	bhi.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
 8007aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d004      	beq.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ab6:	d012      	beq.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8007ab8:	e070      	b.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007aba:	4b8a      	ldr	r3, [pc, #552]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ac2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ac6:	d107      	bne.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007acc:	4618      	mov	r0, r3
 8007ace:	f000 feab 	bl	8008828 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ad6:	e3e0      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007adc:	e3dd      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ade:	4b81      	ldr	r3, [pc, #516]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ae6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007aea:	d107      	bne.n	8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aec:	f107 0318 	add.w	r3, r7, #24
 8007af0:	4618      	mov	r0, r3
 8007af2:	f000 fbf1 	bl	80082d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007afa:	e3ce      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8007afc:	2300      	movs	r3, #0
 8007afe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b00:	e3cb      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b02:	4b78      	ldr	r3, [pc, #480]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b0e:	d107      	bne.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b10:	f107 030c 	add.w	r3, r7, #12
 8007b14:	4618      	mov	r0, r3
 8007b16:	f000 fd33 	bl	8008580 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b1e:	e3bc      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8007b20:	2300      	movs	r3, #0
 8007b22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b24:	e3b9      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b26:	4b6f      	ldr	r3, [pc, #444]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b2e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b30:	4b6c      	ldr	r3, [pc, #432]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 0304 	and.w	r3, r3, #4
 8007b38:	2b04      	cmp	r3, #4
 8007b3a:	d10c      	bne.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8007b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d109      	bne.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b42:	4b68      	ldr	r3, [pc, #416]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	08db      	lsrs	r3, r3, #3
 8007b48:	f003 0303 	and.w	r3, r3, #3
 8007b4c:	4a66      	ldr	r2, [pc, #408]	; (8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b54:	e01e      	b.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b56:	4b63      	ldr	r3, [pc, #396]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b62:	d106      	bne.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8007b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b6a:	d102      	bne.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007b6c:	4b5f      	ldr	r3, [pc, #380]	; (8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b70:	e010      	b.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b72:	4b5c      	ldr	r3, [pc, #368]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b7e:	d106      	bne.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8007b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b86:	d102      	bne.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007b88:	4b59      	ldr	r3, [pc, #356]	; (8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b8c:	e002      	b.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007b92:	e382      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8007b94:	e381      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007b96:	4b56      	ldr	r3, [pc, #344]	; (8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007b98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b9a:	e37e      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      default :
      {
        frequency = 0;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ba0:	e37b      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007ba2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ba6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007baa:	430b      	orrs	r3, r1
 8007bac:	f040 80a5 	bne.w	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x542>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007bb0:	4b4c      	ldr	r3, [pc, #304]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bb4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007bb8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007bc0:	d055      	beq.n	8007c6e <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 8007bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007bc8:	f200 8094 	bhi.w	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
 8007bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007bd2:	f000 8084 	beq.w	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x526>
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007bdc:	f200 808a 	bhi.w	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
 8007be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007be6:	d030      	beq.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8007be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bee:	f200 8081 	bhi.w	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d004      	beq.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
 8007bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007bfe:	d012      	beq.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 8007c00:	e078      	b.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c02:	4b38      	ldr	r3, [pc, #224]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c0e:	d107      	bne.n	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c14:	4618      	mov	r0, r3
 8007c16:	f000 fe07 	bl	8008828 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c1e:	e33c      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8007c20:	2300      	movs	r3, #0
 8007c22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c24:	e339      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c26:	4b2f      	ldr	r3, [pc, #188]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c32:	d107      	bne.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c34:	f107 0318 	add.w	r3, r7, #24
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 fb4d 	bl	80082d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c42:	e32a      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8007c44:	2300      	movs	r3, #0
 8007c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c48:	e327      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c4a:	4b26      	ldr	r3, [pc, #152]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c56:	d107      	bne.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c58:	f107 030c 	add.w	r3, r7, #12
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f000 fc8f 	bl	8008580 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c66:	e318      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c6c:	e315      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c6e:	4b1d      	ldr	r3, [pc, #116]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c76:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c78:	4b1a      	ldr	r3, [pc, #104]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0304 	and.w	r3, r3, #4
 8007c80:	2b04      	cmp	r3, #4
 8007c82:	d10c      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8007c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d109      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c8a:	4b16      	ldr	r3, [pc, #88]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	08db      	lsrs	r3, r3, #3
 8007c90:	f003 0303 	and.w	r3, r3, #3
 8007c94:	4a14      	ldr	r2, [pc, #80]	; (8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007c96:	fa22 f303 	lsr.w	r3, r2, r3
 8007c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c9c:	e01e      	b.n	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x524>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c9e:	4b11      	ldr	r3, [pc, #68]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007caa:	d106      	bne.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8007cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cb2:	d102      	bne.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007cb4:	4b0d      	ldr	r3, [pc, #52]	; (8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cb8:	e010      	b.n	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x524>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007cba:	4b0a      	ldr	r3, [pc, #40]	; (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cc6:	d106      	bne.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8007cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cce:	d102      	bne.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007cd0:	4b07      	ldr	r3, [pc, #28]	; (8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cd4:	e002      	b.n	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x524>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007cda:	e2de      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8007cdc:	e2dd      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007cde:	4b04      	ldr	r3, [pc, #16]	; (8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ce2:	e2da      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8007ce4:	58024400 	.word	0x58024400
 8007ce8:	03d09000 	.word	0x03d09000
 8007cec:	003d0900 	.word	0x003d0900
 8007cf0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cf8:	e2cf      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007cfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cfe:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007d02:	430b      	orrs	r3, r1
 8007d04:	f040 809c 	bne.w	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x688>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007d08:	4b93      	ldr	r3, [pc, #588]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8007d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d0c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007d10:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d18:	d054      	beq.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8007d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d20:	f200 808b 	bhi.w	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8007d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d2a:	f000 8083 	beq.w	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d34:	f200 8081 	bhi.w	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8007d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d3e:	d02f      	beq.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8007d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d46:	d878      	bhi.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8007d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d004      	beq.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8007d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d54:	d012      	beq.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8007d56:	e070      	b.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d58:	4b7f      	ldr	r3, [pc, #508]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d64:	d107      	bne.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f000 fd5c 	bl	8008828 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d74:	e291      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8007d76:	2300      	movs	r3, #0
 8007d78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d7a:	e28e      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d7c:	4b76      	ldr	r3, [pc, #472]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d88:	d107      	bne.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d8a:	f107 0318 	add.w	r3, r7, #24
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f000 faa2 	bl	80082d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d98:	e27f      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d9e:	e27c      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007da0:	4b6d      	ldr	r3, [pc, #436]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007da8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dac:	d107      	bne.n	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dae:	f107 030c 	add.w	r3, r7, #12
 8007db2:	4618      	mov	r0, r3
 8007db4:	f000 fbe4 	bl	8008580 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dbc:	e26d      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dc2:	e26a      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007dc4:	4b64      	ldr	r3, [pc, #400]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8007dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007dcc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007dce:	4b62      	ldr	r3, [pc, #392]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 0304 	and.w	r3, r3, #4
 8007dd6:	2b04      	cmp	r3, #4
 8007dd8:	d10c      	bne.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8007dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d109      	bne.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007de0:	4b5d      	ldr	r3, [pc, #372]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	08db      	lsrs	r3, r3, #3
 8007de6:	f003 0303 	and.w	r3, r3, #3
 8007dea:	4a5c      	ldr	r2, [pc, #368]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8007dec:	fa22 f303 	lsr.w	r3, r2, r3
 8007df0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007df2:	e01e      	b.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007df4:	4b58      	ldr	r3, [pc, #352]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e00:	d106      	bne.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8007e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e08:	d102      	bne.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007e0a:	4b55      	ldr	r3, [pc, #340]	; (8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e0e:	e010      	b.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e10:	4b51      	ldr	r3, [pc, #324]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e1c:	d106      	bne.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
 8007e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e24:	d102      	bne.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007e26:	4b4f      	ldr	r3, [pc, #316]	; (8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007e28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e2a:	e002      	b.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007e30:	e233      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8007e32:	e232      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007e34:	4b4b      	ldr	r3, [pc, #300]	; (8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007e36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e38:	e22f      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      default :
      {
        frequency = 0;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e3e:	e22c      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e44:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007e48:	430b      	orrs	r3, r1
 8007e4a:	f040 808d 	bne.w	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007e4e:	4b42      	ldr	r3, [pc, #264]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8007e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e52:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007e56:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8007e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e5e:	d06b      	beq.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
 8007e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e66:	d874      	bhi.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8007e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e6e:	d056      	beq.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x766>
 8007e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e76:	d86c      	bhi.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8007e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e7e:	d03b      	beq.n	8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x740>
 8007e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e86:	d864      	bhi.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8007e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e8e:	d021      	beq.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8007e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e96:	d85c      	bhi.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8007e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d004      	beq.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
 8007e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ea4:	d004      	beq.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007ea6:	e054      	b.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007ea8:	f7fe fa66 	bl	8006378 <HAL_RCC_GetPCLK1Freq>
 8007eac:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007eae:	e1f4      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007eb0:	4b29      	ldr	r3, [pc, #164]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007eb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ebc:	d107      	bne.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ebe:	f107 0318 	add.w	r3, r7, #24
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f000 fa08 	bl	80082d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ecc:	e1e5      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ed2:	e1e2      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ed4:	4b20      	ldr	r3, [pc, #128]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ee0:	d107      	bne.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ee2:	f107 030c 	add.w	r3, r7, #12
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 fb4a 	bl	8008580 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ef0:	e1d3      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ef6:	e1d0      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ef8:	4b17      	ldr	r3, [pc, #92]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 0304 	and.w	r3, r3, #4
 8007f00:	2b04      	cmp	r3, #4
 8007f02:	d109      	bne.n	8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f04:	4b14      	ldr	r3, [pc, #80]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	08db      	lsrs	r3, r3, #3
 8007f0a:	f003 0303 	and.w	r3, r3, #3
 8007f0e:	4a13      	ldr	r2, [pc, #76]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8007f10:	fa22 f303 	lsr.w	r3, r2, r3
 8007f14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f16:	e1c0      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f1c:	e1bd      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007f1e:	4b0e      	ldr	r3, [pc, #56]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f2a:	d102      	bne.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
        {
          frequency = CSI_VALUE;
 8007f2c:	4b0c      	ldr	r3, [pc, #48]	; (8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f30:	e1b3      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8007f32:	2300      	movs	r3, #0
 8007f34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f36:	e1b0      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007f38:	4b07      	ldr	r3, [pc, #28]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f44:	d102      	bne.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HSE_VALUE;
 8007f46:	4b07      	ldr	r3, [pc, #28]	; (8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007f48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f4a:	e1a6      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f50:	e1a3      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      default :
      {
        frequency = 0;
 8007f52:	2300      	movs	r3, #0
 8007f54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f56:	e1a0      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8007f58:	58024400 	.word	0x58024400
 8007f5c:	03d09000 	.word	0x03d09000
 8007f60:	003d0900 	.word	0x003d0900
 8007f64:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f6c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007f70:	430b      	orrs	r3, r1
 8007f72:	d173      	bne.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007f74:	4b9c      	ldr	r3, [pc, #624]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8007f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f7c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f84:	d02f      	beq.n	8007fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
 8007f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f8c:	d863      	bhi.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8007f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d004      	beq.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8007f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f9a:	d012      	beq.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8007f9c:	e05b      	b.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f9e:	4b92      	ldr	r3, [pc, #584]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007faa:	d107      	bne.n	8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x804>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fac:	f107 0318 	add.w	r3, r7, #24
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f000 f991 	bl	80082d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fba:	e16e      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fc0:	e16b      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fc2:	4b89      	ldr	r3, [pc, #548]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fce:	d107      	bne.n	8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fd0:	f107 030c 	add.w	r3, r7, #12
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f000 fad3 	bl	8008580 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fde:	e15c      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fe4:	e159      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fe6:	4b80      	ldr	r3, [pc, #512]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8007fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007fee:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ff0:	4b7d      	ldr	r3, [pc, #500]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 0304 	and.w	r3, r3, #4
 8007ff8:	2b04      	cmp	r3, #4
 8007ffa:	d10c      	bne.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8007ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d109      	bne.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008002:	4b79      	ldr	r3, [pc, #484]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	08db      	lsrs	r3, r3, #3
 8008008:	f003 0303 	and.w	r3, r3, #3
 800800c:	4a77      	ldr	r2, [pc, #476]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xa34>)
 800800e:	fa22 f303 	lsr.w	r3, r2, r3
 8008012:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008014:	e01e      	b.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008016:	4b74      	ldr	r3, [pc, #464]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800801e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008022:	d106      	bne.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
 8008024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008026:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800802a:	d102      	bne.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800802c:	4b70      	ldr	r3, [pc, #448]	; (80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>)
 800802e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008030:	e010      	b.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008032:	4b6d      	ldr	r3, [pc, #436]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800803a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800803e:	d106      	bne.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
 8008040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008042:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008046:	d102      	bne.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008048:	4b6a      	ldr	r3, [pc, #424]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800804a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800804c:	e002      	b.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800804e:	2300      	movs	r3, #0
 8008050:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008052:	e122      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8008054:	e121      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      default :
      {
        frequency = 0;
 8008056:	2300      	movs	r3, #0
 8008058:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800805a:	e11e      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800805c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008060:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008064:	430b      	orrs	r3, r1
 8008066:	d133      	bne.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008068:	4b5f      	ldr	r3, [pc, #380]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 800806a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800806c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008070:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008074:	2b00      	cmp	r3, #0
 8008076:	d004      	beq.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8008078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800807e:	d012      	beq.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
 8008080:	e023      	b.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0x912>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008082:	4b59      	ldr	r3, [pc, #356]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800808a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800808e:	d107      	bne.n	80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008094:	4618      	mov	r0, r3
 8008096:	f000 fbc7 	bl	8008828 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800809a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800809e:	e0fc      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 80080a0:	2300      	movs	r3, #0
 80080a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080a4:	e0f9      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080a6:	4b50      	ldr	r3, [pc, #320]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080b2:	d107      	bne.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080b4:	f107 0318 	add.w	r3, r7, #24
 80080b8:	4618      	mov	r0, r3
 80080ba:	f000 f90d 	bl	80082d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80080be:	6a3b      	ldr	r3, [r7, #32]
 80080c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080c2:	e0ea      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 80080c4:	2300      	movs	r3, #0
 80080c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080c8:	e0e7      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      default :
      {
        frequency = 0;
 80080ca:	2300      	movs	r3, #0
 80080cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080ce:	e0e4      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80080d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080d4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80080d8:	430b      	orrs	r3, r1
 80080da:	f040 808d 	bne.w	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80080de:	4b42      	ldr	r3, [pc, #264]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 80080e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080e2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80080e6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80080e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080ee:	d06b      	beq.n	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>
 80080f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080f6:	d874      	bhi.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 80080f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080fe:	d056      	beq.n	80081ae <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8008100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008106:	d86c      	bhi.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8008108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800810e:	d03b      	beq.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8008110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008112:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008116:	d864      	bhi.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8008118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800811e:	d021      	beq.n	8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8008120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008126:	d85c      	bhi.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8008128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812a:	2b00      	cmp	r3, #0
 800812c:	d004      	beq.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800812e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008130:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008134:	d004      	beq.n	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008136:	e054      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008138:	f000 f8b8 	bl	80082ac <HAL_RCCEx_GetD3PCLK1Freq>
 800813c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800813e:	e0ac      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008140:	4b29      	ldr	r3, [pc, #164]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008148:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800814c:	d107      	bne.n	800815e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800814e:	f107 0318 	add.w	r3, r7, #24
 8008152:	4618      	mov	r0, r3
 8008154:	f000 f8c0 	bl	80082d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800815c:	e09d      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 800815e:	2300      	movs	r3, #0
 8008160:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008162:	e09a      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008164:	4b20      	ldr	r3, [pc, #128]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800816c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008170:	d107      	bne.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008172:	f107 030c 	add.w	r3, r7, #12
 8008176:	4618      	mov	r0, r3
 8008178:	f000 fa02 	bl	8008580 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008180:	e08b      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008182:	2300      	movs	r3, #0
 8008184:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008186:	e088      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008188:	4b17      	ldr	r3, [pc, #92]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 0304 	and.w	r3, r3, #4
 8008190:	2b04      	cmp	r3, #4
 8008192:	d109      	bne.n	80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9f0>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008194:	4b14      	ldr	r3, [pc, #80]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	08db      	lsrs	r3, r3, #3
 800819a:	f003 0303 	and.w	r3, r3, #3
 800819e:	4a13      	ldr	r2, [pc, #76]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0xa34>)
 80081a0:	fa22 f303 	lsr.w	r3, r2, r3
 80081a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081a6:	e078      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 80081a8:	2300      	movs	r3, #0
 80081aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081ac:	e075      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80081ae:	4b0e      	ldr	r3, [pc, #56]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081ba:	d102      	bne.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
        {
          frequency = CSI_VALUE;
 80081bc:	4b0c      	ldr	r3, [pc, #48]	; (80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>)
 80081be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081c0:	e06b      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 80081c2:	2300      	movs	r3, #0
 80081c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081c6:	e068      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80081c8:	4b07      	ldr	r3, [pc, #28]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081d4:	d102      	bne.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
        {
          frequency = HSE_VALUE;
 80081d6:	4b07      	ldr	r3, [pc, #28]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80081d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081da:	e05e      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 80081dc:	2300      	movs	r3, #0
 80081de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081e0:	e05b      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80081e2:	2300      	movs	r3, #0
 80081e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081e6:	e058      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 80081e8:	58024400 	.word	0x58024400
 80081ec:	03d09000 	.word	0x03d09000
 80081f0:	003d0900 	.word	0x003d0900
 80081f4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80081f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081fc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008200:	430b      	orrs	r3, r1
 8008202:	d148      	bne.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008204:	4b27      	ldr	r3, [pc, #156]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8008206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008208:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800820c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800820e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008210:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008214:	d02a      	beq.n	800826c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8008216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800821c:	d838      	bhi.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
 800821e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008220:	2b00      	cmp	r3, #0
 8008222:	d004      	beq.n	800822e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8008224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008226:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800822a:	d00d      	beq.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>
 800822c:	e030      	b.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800822e:	4b1d      	ldr	r3, [pc, #116]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008236:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800823a:	d102      	bne.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
        {
          frequency = HSE_VALUE;
 800823c:	4b1a      	ldr	r3, [pc, #104]	; (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800823e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008240:	e02b      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008242:	2300      	movs	r3, #0
 8008244:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008246:	e028      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008248:	4b16      	ldr	r3, [pc, #88]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008250:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008254:	d107      	bne.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800825a:	4618      	mov	r0, r3
 800825c:	f000 fae4 	bl	8008828 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008262:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008264:	e019      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008266:	2300      	movs	r3, #0
 8008268:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800826a:	e016      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800826c:	4b0d      	ldr	r3, [pc, #52]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008274:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008278:	d107      	bne.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800827a:	f107 0318 	add.w	r3, r7, #24
 800827e:	4618      	mov	r0, r3
 8008280:	f000 f82a 	bl	80082d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008288:	e007      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 800828a:	2300      	movs	r3, #0
 800828c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800828e:	e004      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      default :
      {
        frequency = 0;
 8008290:	2300      	movs	r3, #0
 8008292:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008294:	e001      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
    }
  }
  else
  {
    frequency = 0;
 8008296:	2300      	movs	r3, #0
 8008298:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800829a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800829c:	4618      	mov	r0, r3
 800829e:	3740      	adds	r7, #64	; 0x40
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	58024400 	.word	0x58024400
 80082a8:	00bb8000 	.word	0x00bb8000

080082ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80082b0:	f7fe f832 	bl	8006318 <HAL_RCC_GetHCLKFreq>
 80082b4:	4602      	mov	r2, r0
 80082b6:	4b06      	ldr	r3, [pc, #24]	; (80082d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80082b8:	6a1b      	ldr	r3, [r3, #32]
 80082ba:	091b      	lsrs	r3, r3, #4
 80082bc:	f003 0307 	and.w	r3, r3, #7
 80082c0:	4904      	ldr	r1, [pc, #16]	; (80082d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80082c2:	5ccb      	ldrb	r3, [r1, r3]
 80082c4:	f003 031f 	and.w	r3, r3, #31
 80082c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	58024400 	.word	0x58024400
 80082d4:	0800ae78 	.word	0x0800ae78

080082d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80082d8:	b480      	push	{r7}
 80082da:	b089      	sub	sp, #36	; 0x24
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082e0:	4ba1      	ldr	r3, [pc, #644]	; (8008568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e4:	f003 0303 	and.w	r3, r3, #3
 80082e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80082ea:	4b9f      	ldr	r3, [pc, #636]	; (8008568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ee:	0b1b      	lsrs	r3, r3, #12
 80082f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082f4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80082f6:	4b9c      	ldr	r3, [pc, #624]	; (8008568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fa:	091b      	lsrs	r3, r3, #4
 80082fc:	f003 0301 	and.w	r3, r3, #1
 8008300:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008302:	4b99      	ldr	r3, [pc, #612]	; (8008568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008306:	08db      	lsrs	r3, r3, #3
 8008308:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	fb02 f303 	mul.w	r3, r2, r3
 8008312:	ee07 3a90 	vmov	s15, r3
 8008316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800831a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	2b00      	cmp	r3, #0
 8008322:	f000 8111 	beq.w	8008548 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	2b02      	cmp	r3, #2
 800832a:	f000 8083 	beq.w	8008434 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	2b02      	cmp	r3, #2
 8008332:	f200 80a1 	bhi.w	8008478 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d003      	beq.n	8008344 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	2b01      	cmp	r3, #1
 8008340:	d056      	beq.n	80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008342:	e099      	b.n	8008478 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008344:	4b88      	ldr	r3, [pc, #544]	; (8008568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 0320 	and.w	r3, r3, #32
 800834c:	2b00      	cmp	r3, #0
 800834e:	d02d      	beq.n	80083ac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008350:	4b85      	ldr	r3, [pc, #532]	; (8008568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	08db      	lsrs	r3, r3, #3
 8008356:	f003 0303 	and.w	r3, r3, #3
 800835a:	4a84      	ldr	r2, [pc, #528]	; (800856c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800835c:	fa22 f303 	lsr.w	r3, r2, r3
 8008360:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	ee07 3a90 	vmov	s15, r3
 8008368:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	ee07 3a90 	vmov	s15, r3
 8008372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800837a:	4b7b      	ldr	r3, [pc, #492]	; (8008568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800837c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008382:	ee07 3a90 	vmov	s15, r3
 8008386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800838a:	ed97 6a03 	vldr	s12, [r7, #12]
 800838e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008570 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800839a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800839e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80083aa:	e087      	b.n	80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	ee07 3a90 	vmov	s15, r3
 80083b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008574 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80083ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083be:	4b6a      	ldr	r3, [pc, #424]	; (8008568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083c6:	ee07 3a90 	vmov	s15, r3
 80083ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80083d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008570 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083ee:	e065      	b.n	80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	ee07 3a90 	vmov	s15, r3
 80083f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80083fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008402:	4b59      	ldr	r3, [pc, #356]	; (8008568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800840a:	ee07 3a90 	vmov	s15, r3
 800840e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008412:	ed97 6a03 	vldr	s12, [r7, #12]
 8008416:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008570 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800841a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800841e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800842a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800842e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008432:	e043      	b.n	80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	ee07 3a90 	vmov	s15, r3
 800843a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800843e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800857c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008446:	4b48      	ldr	r3, [pc, #288]	; (8008568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800844e:	ee07 3a90 	vmov	s15, r3
 8008452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008456:	ed97 6a03 	vldr	s12, [r7, #12]
 800845a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008570 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800845e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800846a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800846e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008472:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008476:	e021      	b.n	80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	ee07 3a90 	vmov	s15, r3
 800847e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008482:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800848a:	4b37      	ldr	r3, [pc, #220]	; (8008568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800848c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008492:	ee07 3a90 	vmov	s15, r3
 8008496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800849a:	ed97 6a03 	vldr	s12, [r7, #12]
 800849e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008570 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80084a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084ba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80084bc:	4b2a      	ldr	r3, [pc, #168]	; (8008568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c0:	0a5b      	lsrs	r3, r3, #9
 80084c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084c6:	ee07 3a90 	vmov	s15, r3
 80084ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80084da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084e2:	ee17 2a90 	vmov	r2, s15
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80084ea:	4b1f      	ldr	r3, [pc, #124]	; (8008568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ee:	0c1b      	lsrs	r3, r3, #16
 80084f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084f4:	ee07 3a90 	vmov	s15, r3
 80084f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008500:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008504:	edd7 6a07 	vldr	s13, [r7, #28]
 8008508:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800850c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008510:	ee17 2a90 	vmov	r2, s15
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008518:	4b13      	ldr	r3, [pc, #76]	; (8008568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800851a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851c:	0e1b      	lsrs	r3, r3, #24
 800851e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008522:	ee07 3a90 	vmov	s15, r3
 8008526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800852a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800852e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008532:	edd7 6a07 	vldr	s13, [r7, #28]
 8008536:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800853a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800853e:	ee17 2a90 	vmov	r2, s15
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008546:	e008      	b.n	800855a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	609a      	str	r2, [r3, #8]
}
 800855a:	bf00      	nop
 800855c:	3724      	adds	r7, #36	; 0x24
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	58024400 	.word	0x58024400
 800856c:	03d09000 	.word	0x03d09000
 8008570:	46000000 	.word	0x46000000
 8008574:	4c742400 	.word	0x4c742400
 8008578:	4a742400 	.word	0x4a742400
 800857c:	4b3b8000 	.word	0x4b3b8000

08008580 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008580:	b480      	push	{r7}
 8008582:	b089      	sub	sp, #36	; 0x24
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008588:	4ba1      	ldr	r3, [pc, #644]	; (8008810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800858a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800858c:	f003 0303 	and.w	r3, r3, #3
 8008590:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008592:	4b9f      	ldr	r3, [pc, #636]	; (8008810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008596:	0d1b      	lsrs	r3, r3, #20
 8008598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800859c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800859e:	4b9c      	ldr	r3, [pc, #624]	; (8008810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a2:	0a1b      	lsrs	r3, r3, #8
 80085a4:	f003 0301 	and.w	r3, r3, #1
 80085a8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80085aa:	4b99      	ldr	r3, [pc, #612]	; (8008810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ae:	08db      	lsrs	r3, r3, #3
 80085b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085b4:	693a      	ldr	r2, [r7, #16]
 80085b6:	fb02 f303 	mul.w	r3, r2, r3
 80085ba:	ee07 3a90 	vmov	s15, r3
 80085be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 8111 	beq.w	80087f0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	f000 8083 	beq.w	80086dc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	2b02      	cmp	r3, #2
 80085da:	f200 80a1 	bhi.w	8008720 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d003      	beq.n	80085ec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d056      	beq.n	8008698 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80085ea:	e099      	b.n	8008720 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085ec:	4b88      	ldr	r3, [pc, #544]	; (8008810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0320 	and.w	r3, r3, #32
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d02d      	beq.n	8008654 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085f8:	4b85      	ldr	r3, [pc, #532]	; (8008810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	08db      	lsrs	r3, r3, #3
 80085fe:	f003 0303 	and.w	r3, r3, #3
 8008602:	4a84      	ldr	r2, [pc, #528]	; (8008814 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008604:	fa22 f303 	lsr.w	r3, r2, r3
 8008608:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	ee07 3a90 	vmov	s15, r3
 8008610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	ee07 3a90 	vmov	s15, r3
 800861a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800861e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008622:	4b7b      	ldr	r3, [pc, #492]	; (8008810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800862a:	ee07 3a90 	vmov	s15, r3
 800862e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008632:	ed97 6a03 	vldr	s12, [r7, #12]
 8008636:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008818 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800863a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800863e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800864a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800864e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008652:	e087      	b.n	8008764 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	ee07 3a90 	vmov	s15, r3
 800865a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800865e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800881c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008666:	4b6a      	ldr	r3, [pc, #424]	; (8008810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800866e:	ee07 3a90 	vmov	s15, r3
 8008672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008676:	ed97 6a03 	vldr	s12, [r7, #12]
 800867a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008818 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800867e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800868a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800868e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008692:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008696:	e065      	b.n	8008764 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	ee07 3a90 	vmov	s15, r3
 800869e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008820 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80086a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086aa:	4b59      	ldr	r3, [pc, #356]	; (8008810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086b2:	ee07 3a90 	vmov	s15, r3
 80086b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80086be:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008818 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086da:	e043      	b.n	8008764 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	ee07 3a90 	vmov	s15, r3
 80086e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80086ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ee:	4b48      	ldr	r3, [pc, #288]	; (8008810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086f6:	ee07 3a90 	vmov	s15, r3
 80086fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008702:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008818 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800870a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800870e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800871a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800871e:	e021      	b.n	8008764 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	ee07 3a90 	vmov	s15, r3
 8008726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800872a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008820 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800872e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008732:	4b37      	ldr	r3, [pc, #220]	; (8008810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800873a:	ee07 3a90 	vmov	s15, r3
 800873e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008742:	ed97 6a03 	vldr	s12, [r7, #12]
 8008746:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008818 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800874a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800874e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800875a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800875e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008762:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008764:	4b2a      	ldr	r3, [pc, #168]	; (8008810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008768:	0a5b      	lsrs	r3, r3, #9
 800876a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800876e:	ee07 3a90 	vmov	s15, r3
 8008772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008776:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800877a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800877e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008782:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008786:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800878a:	ee17 2a90 	vmov	r2, s15
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008792:	4b1f      	ldr	r3, [pc, #124]	; (8008810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008796:	0c1b      	lsrs	r3, r3, #16
 8008798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800879c:	ee07 3a90 	vmov	s15, r3
 80087a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80087b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087b8:	ee17 2a90 	vmov	r2, s15
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80087c0:	4b13      	ldr	r3, [pc, #76]	; (8008810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c4:	0e1b      	lsrs	r3, r3, #24
 80087c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087ca:	ee07 3a90 	vmov	s15, r3
 80087ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087da:	edd7 6a07 	vldr	s13, [r7, #28]
 80087de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087e6:	ee17 2a90 	vmov	r2, s15
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80087ee:	e008      	b.n	8008802 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	609a      	str	r2, [r3, #8]
}
 8008802:	bf00      	nop
 8008804:	3724      	adds	r7, #36	; 0x24
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	58024400 	.word	0x58024400
 8008814:	03d09000 	.word	0x03d09000
 8008818:	46000000 	.word	0x46000000
 800881c:	4c742400 	.word	0x4c742400
 8008820:	4a742400 	.word	0x4a742400
 8008824:	4b3b8000 	.word	0x4b3b8000

08008828 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008828:	b480      	push	{r7}
 800882a:	b089      	sub	sp, #36	; 0x24
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008830:	4ba0      	ldr	r3, [pc, #640]	; (8008ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008834:	f003 0303 	and.w	r3, r3, #3
 8008838:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800883a:	4b9e      	ldr	r3, [pc, #632]	; (8008ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800883c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800883e:	091b      	lsrs	r3, r3, #4
 8008840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008844:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008846:	4b9b      	ldr	r3, [pc, #620]	; (8008ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884a:	f003 0301 	and.w	r3, r3, #1
 800884e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008850:	4b98      	ldr	r3, [pc, #608]	; (8008ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008854:	08db      	lsrs	r3, r3, #3
 8008856:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800885a:	693a      	ldr	r2, [r7, #16]
 800885c:	fb02 f303 	mul.w	r3, r2, r3
 8008860:	ee07 3a90 	vmov	s15, r3
 8008864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008868:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	2b00      	cmp	r3, #0
 8008870:	f000 8111 	beq.w	8008a96 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	2b02      	cmp	r3, #2
 8008878:	f000 8083 	beq.w	8008982 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	2b02      	cmp	r3, #2
 8008880:	f200 80a1 	bhi.w	80089c6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d003      	beq.n	8008892 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d056      	beq.n	800893e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008890:	e099      	b.n	80089c6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008892:	4b88      	ldr	r3, [pc, #544]	; (8008ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 0320 	and.w	r3, r3, #32
 800889a:	2b00      	cmp	r3, #0
 800889c:	d02d      	beq.n	80088fa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800889e:	4b85      	ldr	r3, [pc, #532]	; (8008ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	08db      	lsrs	r3, r3, #3
 80088a4:	f003 0303 	and.w	r3, r3, #3
 80088a8:	4a83      	ldr	r2, [pc, #524]	; (8008ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80088aa:	fa22 f303 	lsr.w	r3, r2, r3
 80088ae:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	ee07 3a90 	vmov	s15, r3
 80088b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	ee07 3a90 	vmov	s15, r3
 80088c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088c8:	4b7a      	ldr	r3, [pc, #488]	; (8008ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088d0:	ee07 3a90 	vmov	s15, r3
 80088d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80088dc:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008abc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088f4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80088f8:	e087      	b.n	8008a0a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	ee07 3a90 	vmov	s15, r3
 8008900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008904:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008908:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800890c:	4b69      	ldr	r3, [pc, #420]	; (8008ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800890e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008914:	ee07 3a90 	vmov	s15, r3
 8008918:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800891c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008920:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008abc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008924:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008928:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800892c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008930:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008938:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800893c:	e065      	b.n	8008a0a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	ee07 3a90 	vmov	s15, r3
 8008944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008948:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800894c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008950:	4b58      	ldr	r3, [pc, #352]	; (8008ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008958:	ee07 3a90 	vmov	s15, r3
 800895c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008960:	ed97 6a03 	vldr	s12, [r7, #12]
 8008964:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008abc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008968:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800896c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008970:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008974:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800897c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008980:	e043      	b.n	8008a0a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	ee07 3a90 	vmov	s15, r3
 8008988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800898c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008990:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008994:	4b47      	ldr	r3, [pc, #284]	; (8008ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800899c:	ee07 3a90 	vmov	s15, r3
 80089a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80089a8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008abc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80089ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089c4:	e021      	b.n	8008a0a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	ee07 3a90 	vmov	s15, r3
 80089cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089d0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80089d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089d8:	4b36      	ldr	r3, [pc, #216]	; (8008ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089e0:	ee07 3a90 	vmov	s15, r3
 80089e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80089ec:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008abc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80089f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a08:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008a0a:	4b2a      	ldr	r3, [pc, #168]	; (8008ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a0e:	0a5b      	lsrs	r3, r3, #9
 8008a10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a14:	ee07 3a90 	vmov	s15, r3
 8008a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a24:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a30:	ee17 2a90 	vmov	r2, s15
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008a38:	4b1e      	ldr	r3, [pc, #120]	; (8008ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a3c:	0c1b      	lsrs	r3, r3, #16
 8008a3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a42:	ee07 3a90 	vmov	s15, r3
 8008a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a52:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a5e:	ee17 2a90 	vmov	r2, s15
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008a66:	4b13      	ldr	r3, [pc, #76]	; (8008ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6a:	0e1b      	lsrs	r3, r3, #24
 8008a6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a70:	ee07 3a90 	vmov	s15, r3
 8008a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a80:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a8c:	ee17 2a90 	vmov	r2, s15
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008a94:	e008      	b.n	8008aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	609a      	str	r2, [r3, #8]
}
 8008aa8:	bf00      	nop
 8008aaa:	3724      	adds	r7, #36	; 0x24
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr
 8008ab4:	58024400 	.word	0x58024400
 8008ab8:	03d09000 	.word	0x03d09000
 8008abc:	46000000 	.word	0x46000000
 8008ac0:	4c742400 	.word	0x4c742400
 8008ac4:	4a742400 	.word	0x4a742400
 8008ac8:	4b3b8000 	.word	0x4b3b8000

08008acc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ada:	4b53      	ldr	r3, [pc, #332]	; (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ade:	f003 0303 	and.w	r3, r3, #3
 8008ae2:	2b03      	cmp	r3, #3
 8008ae4:	d101      	bne.n	8008aea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e099      	b.n	8008c1e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008aea:	4b4f      	ldr	r3, [pc, #316]	; (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a4e      	ldr	r2, [pc, #312]	; (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008af0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008af4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008af6:	f7f8 ff37 	bl	8001968 <HAL_GetTick>
 8008afa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008afc:	e008      	b.n	8008b10 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008afe:	f7f8 ff33 	bl	8001968 <HAL_GetTick>
 8008b02:	4602      	mov	r2, r0
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	1ad3      	subs	r3, r2, r3
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d901      	bls.n	8008b10 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e086      	b.n	8008c1e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b10:	4b45      	ldr	r3, [pc, #276]	; (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1f0      	bne.n	8008afe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008b1c:	4b42      	ldr	r3, [pc, #264]	; (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b20:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	031b      	lsls	r3, r3, #12
 8008b2a:	493f      	ldr	r1, [pc, #252]	; (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	628b      	str	r3, [r1, #40]	; 0x28
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	3b01      	subs	r3, #1
 8008b36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	025b      	lsls	r3, r3, #9
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	431a      	orrs	r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	041b      	lsls	r3, r3, #16
 8008b4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008b52:	431a      	orrs	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	061b      	lsls	r3, r3, #24
 8008b5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008b60:	4931      	ldr	r1, [pc, #196]	; (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008b62:	4313      	orrs	r3, r2
 8008b64:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008b66:	4b30      	ldr	r3, [pc, #192]	; (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	695b      	ldr	r3, [r3, #20]
 8008b72:	492d      	ldr	r1, [pc, #180]	; (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008b74:	4313      	orrs	r3, r2
 8008b76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008b78:	4b2b      	ldr	r3, [pc, #172]	; (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7c:	f023 0220 	bic.w	r2, r3, #32
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	4928      	ldr	r1, [pc, #160]	; (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008b86:	4313      	orrs	r3, r2
 8008b88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008b8a:	4b27      	ldr	r3, [pc, #156]	; (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8e:	4a26      	ldr	r2, [pc, #152]	; (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008b90:	f023 0310 	bic.w	r3, r3, #16
 8008b94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008b96:	4b24      	ldr	r3, [pc, #144]	; (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008b98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b9a:	4b24      	ldr	r3, [pc, #144]	; (8008c2c <RCCEx_PLL2_Config+0x160>)
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	69d2      	ldr	r2, [r2, #28]
 8008ba2:	00d2      	lsls	r2, r2, #3
 8008ba4:	4920      	ldr	r1, [pc, #128]	; (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008baa:	4b1f      	ldr	r3, [pc, #124]	; (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bae:	4a1e      	ldr	r2, [pc, #120]	; (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008bb0:	f043 0310 	orr.w	r3, r3, #16
 8008bb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d106      	bne.n	8008bca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008bbc:	4b1a      	ldr	r3, [pc, #104]	; (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc0:	4a19      	ldr	r2, [pc, #100]	; (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008bc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008bc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008bc8:	e00f      	b.n	8008bea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d106      	bne.n	8008bde <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008bd0:	4b15      	ldr	r3, [pc, #84]	; (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd4:	4a14      	ldr	r2, [pc, #80]	; (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008bd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008bdc:	e005      	b.n	8008bea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008bde:	4b12      	ldr	r3, [pc, #72]	; (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be2:	4a11      	ldr	r2, [pc, #68]	; (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008be4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008be8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008bea:	4b0f      	ldr	r3, [pc, #60]	; (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a0e      	ldr	r2, [pc, #56]	; (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008bf0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008bf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bf6:	f7f8 feb7 	bl	8001968 <HAL_GetTick>
 8008bfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008bfc:	e008      	b.n	8008c10 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008bfe:	f7f8 feb3 	bl	8001968 <HAL_GetTick>
 8008c02:	4602      	mov	r2, r0
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	1ad3      	subs	r3, r2, r3
 8008c08:	2b02      	cmp	r3, #2
 8008c0a:	d901      	bls.n	8008c10 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008c0c:	2303      	movs	r3, #3
 8008c0e:	e006      	b.n	8008c1e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c10:	4b05      	ldr	r3, [pc, #20]	; (8008c28 <RCCEx_PLL2_Config+0x15c>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d0f0      	beq.n	8008bfe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	58024400 	.word	0x58024400
 8008c2c:	ffff0007 	.word	0xffff0007

08008c30 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c3e:	4b53      	ldr	r3, [pc, #332]	; (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c42:	f003 0303 	and.w	r3, r3, #3
 8008c46:	2b03      	cmp	r3, #3
 8008c48:	d101      	bne.n	8008c4e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e099      	b.n	8008d82 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008c4e:	4b4f      	ldr	r3, [pc, #316]	; (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a4e      	ldr	r2, [pc, #312]	; (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c5a:	f7f8 fe85 	bl	8001968 <HAL_GetTick>
 8008c5e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c60:	e008      	b.n	8008c74 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008c62:	f7f8 fe81 	bl	8001968 <HAL_GetTick>
 8008c66:	4602      	mov	r2, r0
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	1ad3      	subs	r3, r2, r3
 8008c6c:	2b02      	cmp	r3, #2
 8008c6e:	d901      	bls.n	8008c74 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c70:	2303      	movs	r3, #3
 8008c72:	e086      	b.n	8008d82 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c74:	4b45      	ldr	r3, [pc, #276]	; (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1f0      	bne.n	8008c62 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008c80:	4b42      	ldr	r3, [pc, #264]	; (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c84:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	051b      	lsls	r3, r3, #20
 8008c8e:	493f      	ldr	r1, [pc, #252]	; (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008c90:	4313      	orrs	r3, r2
 8008c92:	628b      	str	r3, [r1, #40]	; 0x28
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	025b      	lsls	r3, r3, #9
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	431a      	orrs	r2, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	041b      	lsls	r3, r3, #16
 8008cb2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008cb6:	431a      	orrs	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	061b      	lsls	r3, r3, #24
 8008cc0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008cc4:	4931      	ldr	r1, [pc, #196]	; (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008cca:	4b30      	ldr	r3, [pc, #192]	; (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	695b      	ldr	r3, [r3, #20]
 8008cd6:	492d      	ldr	r1, [pc, #180]	; (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008cdc:	4b2b      	ldr	r3, [pc, #172]	; (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	4928      	ldr	r1, [pc, #160]	; (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008cea:	4313      	orrs	r3, r2
 8008cec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008cee:	4b27      	ldr	r3, [pc, #156]	; (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf2:	4a26      	ldr	r2, [pc, #152]	; (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008cf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cf8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008cfa:	4b24      	ldr	r3, [pc, #144]	; (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008cfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cfe:	4b24      	ldr	r3, [pc, #144]	; (8008d90 <RCCEx_PLL3_Config+0x160>)
 8008d00:	4013      	ands	r3, r2
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	69d2      	ldr	r2, [r2, #28]
 8008d06:	00d2      	lsls	r2, r2, #3
 8008d08:	4920      	ldr	r1, [pc, #128]	; (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008d0e:	4b1f      	ldr	r3, [pc, #124]	; (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d12:	4a1e      	ldr	r2, [pc, #120]	; (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d106      	bne.n	8008d2e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008d20:	4b1a      	ldr	r3, [pc, #104]	; (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d24:	4a19      	ldr	r2, [pc, #100]	; (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008d26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008d2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d2c:	e00f      	b.n	8008d4e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d106      	bne.n	8008d42 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008d34:	4b15      	ldr	r3, [pc, #84]	; (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d38:	4a14      	ldr	r2, [pc, #80]	; (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008d3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008d3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d40:	e005      	b.n	8008d4e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008d42:	4b12      	ldr	r3, [pc, #72]	; (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d46:	4a11      	ldr	r2, [pc, #68]	; (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008d48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008d4e:	4b0f      	ldr	r3, [pc, #60]	; (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a0e      	ldr	r2, [pc, #56]	; (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d5a:	f7f8 fe05 	bl	8001968 <HAL_GetTick>
 8008d5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d60:	e008      	b.n	8008d74 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008d62:	f7f8 fe01 	bl	8001968 <HAL_GetTick>
 8008d66:	4602      	mov	r2, r0
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	1ad3      	subs	r3, r2, r3
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	d901      	bls.n	8008d74 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d70:	2303      	movs	r3, #3
 8008d72:	e006      	b.n	8008d82 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d74:	4b05      	ldr	r3, [pc, #20]	; (8008d8c <RCCEx_PLL3_Config+0x15c>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d0f0      	beq.n	8008d62 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	58024400 	.word	0x58024400
 8008d90:	ffff0007 	.word	0xffff0007

08008d94 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d101      	bne.n	8008da8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	e02b      	b.n	8008e00 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d106      	bne.n	8008dc2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7f8 fc1f 	bl	8001600 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2202      	movs	r2, #2
 8008dc6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	3304      	adds	r3, #4
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	f000 f877 	bl	8008ec8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6818      	ldr	r0, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	461a      	mov	r2, r3
 8008de4:	6839      	ldr	r1, [r7, #0]
 8008de6:	f000 f8cb 	bl	8008f80 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8008dea:	4b07      	ldr	r3, [pc, #28]	; (8008e08 <HAL_SDRAM_Init+0x74>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a06      	ldr	r2, [pc, #24]	; (8008e08 <HAL_SDRAM_Init+0x74>)
 8008df0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008df4:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	52004000 	.word	0x52004000

08008e0c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b086      	sub	sp, #24
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008e1e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8008e20:	7dfb      	ldrb	r3, [r7, #23]
 8008e22:	2b02      	cmp	r3, #2
 8008e24:	d101      	bne.n	8008e2a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8008e26:	2302      	movs	r3, #2
 8008e28:	e021      	b.n	8008e6e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8008e2a:	7dfb      	ldrb	r3, [r7, #23]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d002      	beq.n	8008e36 <HAL_SDRAM_SendCommand+0x2a>
 8008e30:	7dfb      	ldrb	r3, [r7, #23]
 8008e32:	2b05      	cmp	r3, #5
 8008e34:	d118      	bne.n	8008e68 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2202      	movs	r2, #2
 8008e3a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	68b9      	ldr	r1, [r7, #8]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f000 f904 	bl	8009054 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2b02      	cmp	r3, #2
 8008e52:	d104      	bne.n	8008e5e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2205      	movs	r2, #5
 8008e58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008e5c:	e006      	b.n	8008e6c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008e66:	e001      	b.n	8008e6c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e000      	b.n	8008e6e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3718      	adds	r7, #24
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b082      	sub	sp, #8
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
 8008e7e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	d101      	bne.n	8008e90 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	e016      	b.n	8008ebe <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d10f      	bne.n	8008ebc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2202      	movs	r2, #2
 8008ea0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 f8f6 	bl	800909c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	e000      	b.n	8008ebe <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
	...

08008ec8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d121      	bne.n	8008f1e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	4b27      	ldr	r3, [pc, #156]	; (8008f7c <FMC_SDRAM_Init+0xb4>)
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	683a      	ldr	r2, [r7, #0]
 8008ee4:	6851      	ldr	r1, [r2, #4]
 8008ee6:	683a      	ldr	r2, [r7, #0]
 8008ee8:	6892      	ldr	r2, [r2, #8]
 8008eea:	4311      	orrs	r1, r2
 8008eec:	683a      	ldr	r2, [r7, #0]
 8008eee:	68d2      	ldr	r2, [r2, #12]
 8008ef0:	4311      	orrs	r1, r2
 8008ef2:	683a      	ldr	r2, [r7, #0]
 8008ef4:	6912      	ldr	r2, [r2, #16]
 8008ef6:	4311      	orrs	r1, r2
 8008ef8:	683a      	ldr	r2, [r7, #0]
 8008efa:	6952      	ldr	r2, [r2, #20]
 8008efc:	4311      	orrs	r1, r2
 8008efe:	683a      	ldr	r2, [r7, #0]
 8008f00:	6992      	ldr	r2, [r2, #24]
 8008f02:	4311      	orrs	r1, r2
 8008f04:	683a      	ldr	r2, [r7, #0]
 8008f06:	69d2      	ldr	r2, [r2, #28]
 8008f08:	4311      	orrs	r1, r2
 8008f0a:	683a      	ldr	r2, [r7, #0]
 8008f0c:	6a12      	ldr	r2, [r2, #32]
 8008f0e:	4311      	orrs	r1, r2
 8008f10:	683a      	ldr	r2, [r7, #0]
 8008f12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008f14:	430a      	orrs	r2, r1
 8008f16:	431a      	orrs	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	601a      	str	r2, [r3, #0]
 8008f1c:	e026      	b.n	8008f6c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	69d9      	ldr	r1, [r3, #28]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	6a1b      	ldr	r3, [r3, #32]
 8008f2e:	4319      	orrs	r1, r3
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f34:	430b      	orrs	r3, r1
 8008f36:	431a      	orrs	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	685a      	ldr	r2, [r3, #4]
 8008f40:	4b0e      	ldr	r3, [pc, #56]	; (8008f7c <FMC_SDRAM_Init+0xb4>)
 8008f42:	4013      	ands	r3, r2
 8008f44:	683a      	ldr	r2, [r7, #0]
 8008f46:	6851      	ldr	r1, [r2, #4]
 8008f48:	683a      	ldr	r2, [r7, #0]
 8008f4a:	6892      	ldr	r2, [r2, #8]
 8008f4c:	4311      	orrs	r1, r2
 8008f4e:	683a      	ldr	r2, [r7, #0]
 8008f50:	68d2      	ldr	r2, [r2, #12]
 8008f52:	4311      	orrs	r1, r2
 8008f54:	683a      	ldr	r2, [r7, #0]
 8008f56:	6912      	ldr	r2, [r2, #16]
 8008f58:	4311      	orrs	r1, r2
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	6952      	ldr	r2, [r2, #20]
 8008f5e:	4311      	orrs	r1, r2
 8008f60:	683a      	ldr	r2, [r7, #0]
 8008f62:	6992      	ldr	r2, [r2, #24]
 8008f64:	430a      	orrs	r2, r1
 8008f66:	431a      	orrs	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	370c      	adds	r7, #12
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr
 8008f7a:	bf00      	nop
 8008f7c:	ffff8000 	.word	0xffff8000

08008f80 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d128      	bne.n	8008fe4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	1e59      	subs	r1, r3, #1
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	3b01      	subs	r3, #1
 8008fa6:	011b      	lsls	r3, r3, #4
 8008fa8:	4319      	orrs	r1, r3
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	3b01      	subs	r3, #1
 8008fb0:	021b      	lsls	r3, r3, #8
 8008fb2:	4319      	orrs	r1, r3
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	3b01      	subs	r3, #1
 8008fba:	031b      	lsls	r3, r3, #12
 8008fbc:	4319      	orrs	r1, r3
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	3b01      	subs	r3, #1
 8008fc4:	041b      	lsls	r3, r3, #16
 8008fc6:	4319      	orrs	r1, r3
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	695b      	ldr	r3, [r3, #20]
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	051b      	lsls	r3, r3, #20
 8008fd0:	4319      	orrs	r1, r3
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	699b      	ldr	r3, [r3, #24]
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	061b      	lsls	r3, r3, #24
 8008fda:	430b      	orrs	r3, r1
 8008fdc:	431a      	orrs	r2, r3
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	609a      	str	r2, [r3, #8]
 8008fe2:	e02d      	b.n	8009040 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	689a      	ldr	r2, [r3, #8]
 8008fe8:	4b19      	ldr	r3, [pc, #100]	; (8009050 <FMC_SDRAM_Timing_Init+0xd0>)
 8008fea:	4013      	ands	r3, r2
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	68d2      	ldr	r2, [r2, #12]
 8008ff0:	3a01      	subs	r2, #1
 8008ff2:	0311      	lsls	r1, r2, #12
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	6952      	ldr	r2, [r2, #20]
 8008ff8:	3a01      	subs	r2, #1
 8008ffa:	0512      	lsls	r2, r2, #20
 8008ffc:	430a      	orrs	r2, r1
 8008ffe:	431a      	orrs	r2, r3
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	1e59      	subs	r1, r3, #1
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	3b01      	subs	r3, #1
 8009018:	011b      	lsls	r3, r3, #4
 800901a:	4319      	orrs	r1, r3
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	3b01      	subs	r3, #1
 8009022:	021b      	lsls	r3, r3, #8
 8009024:	4319      	orrs	r1, r3
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	3b01      	subs	r3, #1
 800902c:	041b      	lsls	r3, r3, #16
 800902e:	4319      	orrs	r1, r3
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	699b      	ldr	r3, [r3, #24]
 8009034:	3b01      	subs	r3, #1
 8009036:	061b      	lsls	r3, r3, #24
 8009038:	430b      	orrs	r3, r1
 800903a:	431a      	orrs	r2, r3
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8009040:	2300      	movs	r3, #0
}
 8009042:	4618      	mov	r0, r3
 8009044:	3714      	adds	r7, #20
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	ff0f0fff 	.word	0xff0f0fff

08009054 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009054:	b480      	push	{r7}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	691a      	ldr	r2, [r3, #16]
 8009064:	4b0c      	ldr	r3, [pc, #48]	; (8009098 <FMC_SDRAM_SendCommand+0x44>)
 8009066:	4013      	ands	r3, r2
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	6811      	ldr	r1, [r2, #0]
 800906c:	68ba      	ldr	r2, [r7, #8]
 800906e:	6852      	ldr	r2, [r2, #4]
 8009070:	4311      	orrs	r1, r2
 8009072:	68ba      	ldr	r2, [r7, #8]
 8009074:	6892      	ldr	r2, [r2, #8]
 8009076:	3a01      	subs	r2, #1
 8009078:	0152      	lsls	r2, r2, #5
 800907a:	4311      	orrs	r1, r2
 800907c:	68ba      	ldr	r2, [r7, #8]
 800907e:	68d2      	ldr	r2, [r2, #12]
 8009080:	0252      	lsls	r2, r2, #9
 8009082:	430a      	orrs	r2, r1
 8009084:	431a      	orrs	r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3714      	adds	r7, #20
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr
 8009098:	ffc00000 	.word	0xffc00000

0800909c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	695a      	ldr	r2, [r3, #20]
 80090aa:	4b07      	ldr	r3, [pc, #28]	; (80090c8 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 80090ac:	4013      	ands	r3, r2
 80090ae:	683a      	ldr	r2, [r7, #0]
 80090b0:	0052      	lsls	r2, r2, #1
 80090b2:	431a      	orrs	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	370c      	adds	r7, #12
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop
 80090c8:	ffffc001 	.word	0xffffc001

080090cc <logger_init>:

static struct line_buffer_t __attribute__((section(".sdram"))) line_buffer;
static char __attribute__((section(".sdram"))) msg_parsed[LOGGER_PARSE_BUFFER_SIZE];

void logger_init(void)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	af00      	add	r7, sp, #0
	memset(&line_buffer, 0, sizeof(line_buffer));
 80090d0:	2259      	movs	r2, #89	; 0x59
 80090d2:	2100      	movs	r1, #0
 80090d4:	4802      	ldr	r0, [pc, #8]	; (80090e0 <logger_init+0x14>)
 80090d6:	f000 f921 	bl	800931c <memset>
}
 80090da:	bf00      	nop
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	c0004d08 	.word	0xc0004d08

080090e4 <logger_log>:

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wformat-truncation"

void logger_log(const char *msg, ...)
{
 80090e4:	b40f      	push	{r0, r1, r2, r3}
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b086      	sub	sp, #24
 80090ea:	af00      	add	r7, sp, #0
	va_list arg_list;

	va_start(arg_list, msg);
 80090ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090f0:	603b      	str	r3, [r7, #0]
	int length = vsnprintf(msg_parsed, sizeof(msg_parsed), msg, arg_list);
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	6a3a      	ldr	r2, [r7, #32]
 80090f6:	2180      	movs	r1, #128	; 0x80
 80090f8:	4859      	ldr	r0, [pc, #356]	; (8009260 <logger_log+0x17c>)
 80090fa:	f000 f977 	bl	80093ec <vsniprintf>
 80090fe:	60f8      	str	r0, [r7, #12]
	va_end(arg_list);

	if (length == 0) {
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2b00      	cmp	r3, #0
 8009104:	f000 80a4 	beq.w	8009250 <logger_log+0x16c>
		return;
	}

	size_t total_copied = 0;
 8009108:	2300      	movs	r3, #0
 800910a:	617b      	str	r3, [r7, #20]
	while (total_copied < length) {
 800910c:	e07c      	b.n	8009208 <logger_log+0x124>
		if (line_buffer.lines_used < LOGGER_LINES) {
 800910e:	4b55      	ldr	r3, [pc, #340]	; (8009264 <logger_log+0x180>)
 8009110:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009114:	2b03      	cmp	r3, #3
 8009116:	d845      	bhi.n	80091a4 <logger_log+0xc0>
			snprintf(&line_buffer.data[line_buffer.lines_used * LOGGER_LINE_SIZE], LOGGER_LINE_SIZE, "%s", &msg_parsed[total_copied]);
 8009118:	4b52      	ldr	r3, [pc, #328]	; (8009264 <logger_log+0x180>)
 800911a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800911e:	461a      	mov	r2, r3
 8009120:	2316      	movs	r3, #22
 8009122:	fb02 f303 	mul.w	r3, r2, r3
 8009126:	4a4f      	ldr	r2, [pc, #316]	; (8009264 <logger_log+0x180>)
 8009128:	1898      	adds	r0, r3, r2
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	4a4c      	ldr	r2, [pc, #304]	; (8009260 <logger_log+0x17c>)
 800912e:	4413      	add	r3, r2
 8009130:	4a4d      	ldr	r2, [pc, #308]	; (8009268 <logger_log+0x184>)
 8009132:	2116      	movs	r1, #22
 8009134:	f000 f8fa 	bl	800932c <sniprintf>

			const size_t copied = MIN(LOGGER_LINE_LENGTH, strlen(&msg_parsed[total_copied]));
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	4a49      	ldr	r2, [pc, #292]	; (8009260 <logger_log+0x17c>)
 800913c:	4413      	add	r3, r2
 800913e:	4618      	mov	r0, r3
 8009140:	f7f7 f8ce 	bl	80002e0 <strlen>
 8009144:	4603      	mov	r3, r0
 8009146:	2b15      	cmp	r3, #21
 8009148:	d807      	bhi.n	800915a <logger_log+0x76>
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	4a44      	ldr	r2, [pc, #272]	; (8009260 <logger_log+0x17c>)
 800914e:	4413      	add	r3, r2
 8009150:	4618      	mov	r0, r3
 8009152:	f7f7 f8c5 	bl	80002e0 <strlen>
 8009156:	4603      	mov	r3, r0
 8009158:	e000      	b.n	800915c <logger_log+0x78>
 800915a:	2315      	movs	r3, #21
 800915c:	607b      	str	r3, [r7, #4]
			if (copied < LOGGER_LINE_LENGTH) {
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2b14      	cmp	r3, #20
 8009162:	d812      	bhi.n	800918a <logger_log+0xa6>
				memset(&line_buffer.data[line_buffer.lines_used * LOGGER_LINE_SIZE + copied], ' ', LOGGER_LINE_LENGTH - copied);
 8009164:	4b3f      	ldr	r3, [pc, #252]	; (8009264 <logger_log+0x180>)
 8009166:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800916a:	461a      	mov	r2, r3
 800916c:	2316      	movs	r3, #22
 800916e:	fb02 f303 	mul.w	r3, r2, r3
 8009172:	461a      	mov	r2, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4413      	add	r3, r2
 8009178:	4a3a      	ldr	r2, [pc, #232]	; (8009264 <logger_log+0x180>)
 800917a:	1898      	adds	r0, r3, r2
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f1c3 0315 	rsb	r3, r3, #21
 8009182:	461a      	mov	r2, r3
 8009184:	2120      	movs	r1, #32
 8009186:	f000 f8c9 	bl	800931c <memset>
			}
			total_copied += copied;
 800918a:	697a      	ldr	r2, [r7, #20]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	4413      	add	r3, r2
 8009190:	617b      	str	r3, [r7, #20]

			++line_buffer.lines_used;
 8009192:	4b34      	ldr	r3, [pc, #208]	; (8009264 <logger_log+0x180>)
 8009194:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009198:	3301      	adds	r3, #1
 800919a:	b2da      	uxtb	r2, r3
 800919c:	4b31      	ldr	r3, [pc, #196]	; (8009264 <logger_log+0x180>)
 800919e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80091a2:	e031      	b.n	8009208 <logger_log+0x124>
		}
		else {
			memmove(&line_buffer.data[0], &line_buffer.data[LOGGER_LINE_SIZE], (LOGGER_LINES - 1) * LOGGER_LINE_SIZE); // Move all lines one line up
 80091a4:	2242      	movs	r2, #66	; 0x42
 80091a6:	4931      	ldr	r1, [pc, #196]	; (800926c <logger_log+0x188>)
 80091a8:	482e      	ldr	r0, [pc, #184]	; (8009264 <logger_log+0x180>)
 80091aa:	f000 f89d 	bl	80092e8 <memmove>
			snprintf(&line_buffer.data[(LOGGER_LINES - 1) * LOGGER_LINE_SIZE], LOGGER_LINE_SIZE, "%s", &msg_parsed[total_copied]); // Write to last line
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	4a2b      	ldr	r2, [pc, #172]	; (8009260 <logger_log+0x17c>)
 80091b2:	4413      	add	r3, r2
 80091b4:	4a2c      	ldr	r2, [pc, #176]	; (8009268 <logger_log+0x184>)
 80091b6:	2116      	movs	r1, #22
 80091b8:	482d      	ldr	r0, [pc, #180]	; (8009270 <logger_log+0x18c>)
 80091ba:	f000 f8b7 	bl	800932c <sniprintf>

			const size_t copied = MIN(LOGGER_LINE_LENGTH, strlen(&msg_parsed[total_copied]));
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	4a27      	ldr	r2, [pc, #156]	; (8009260 <logger_log+0x17c>)
 80091c2:	4413      	add	r3, r2
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7f7 f88b 	bl	80002e0 <strlen>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b15      	cmp	r3, #21
 80091ce:	d807      	bhi.n	80091e0 <logger_log+0xfc>
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	4a23      	ldr	r2, [pc, #140]	; (8009260 <logger_log+0x17c>)
 80091d4:	4413      	add	r3, r2
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7f7 f882 	bl	80002e0 <strlen>
 80091dc:	4603      	mov	r3, r0
 80091de:	e000      	b.n	80091e2 <logger_log+0xfe>
 80091e0:	2315      	movs	r3, #21
 80091e2:	60bb      	str	r3, [r7, #8]
			if (copied < LOGGER_LINE_LENGTH) {
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	2b14      	cmp	r3, #20
 80091e8:	d80a      	bhi.n	8009200 <logger_log+0x11c>
				memset(&line_buffer.data[(LOGGER_LINES - 1) * LOGGER_LINE_SIZE + copied], ' ', LOGGER_LINE_LENGTH - copied);
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	3342      	adds	r3, #66	; 0x42
 80091ee:	4a1d      	ldr	r2, [pc, #116]	; (8009264 <logger_log+0x180>)
 80091f0:	1898      	adds	r0, r3, r2
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	f1c3 0315 	rsb	r3, r3, #21
 80091f8:	461a      	mov	r2, r3
 80091fa:	2120      	movs	r1, #32
 80091fc:	f000 f88e 	bl	800931c <memset>
			}
			total_copied += copied;
 8009200:	697a      	ldr	r2, [r7, #20]
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	4413      	add	r3, r2
 8009206:	617b      	str	r3, [r7, #20]
	while (total_copied < length) {
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	697a      	ldr	r2, [r7, #20]
 800920c:	429a      	cmp	r2, r3
 800920e:	f4ff af7e 	bcc.w	800910e <logger_log+0x2a>
		}
	}

	for (size_t i = 0; i < LOGGER_LINES; ++i) {
 8009212:	2300      	movs	r3, #0
 8009214:	613b      	str	r3, [r7, #16]
 8009216:	e015      	b.n	8009244 <logger_log+0x160>
		ssd1306_SetCursor(0, i * LOGGER_FONT_HEIGHT);
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	b2db      	uxtb	r3, r3
 800921c:	00db      	lsls	r3, r3, #3
 800921e:	b2db      	uxtb	r3, r3
 8009220:	4619      	mov	r1, r3
 8009222:	2000      	movs	r0, #0
 8009224:	f7f7 fb72 	bl	800090c <ssd1306_SetCursor>
		ssd1306_WriteString(&line_buffer.data[i * LOGGER_LINE_SIZE], Font_6x8, White);
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	2216      	movs	r2, #22
 800922c:	fb02 f303 	mul.w	r3, r2, r3
 8009230:	4a0c      	ldr	r2, [pc, #48]	; (8009264 <logger_log+0x180>)
 8009232:	1898      	adds	r0, r3, r2
 8009234:	4a0f      	ldr	r2, [pc, #60]	; (8009274 <logger_log+0x190>)
 8009236:	2301      	movs	r3, #1
 8009238:	ca06      	ldmia	r2, {r1, r2}
 800923a:	f7f7 fb41 	bl	80008c0 <ssd1306_WriteString>
	for (size_t i = 0; i < LOGGER_LINES; ++i) {
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	3301      	adds	r3, #1
 8009242:	613b      	str	r3, [r7, #16]
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	2b03      	cmp	r3, #3
 8009248:	d9e6      	bls.n	8009218 <logger_log+0x134>
	}
	ssd1306_UpdateScreen();
 800924a:	f7f7 fa35 	bl	80006b8 <ssd1306_UpdateScreen>
 800924e:	e000      	b.n	8009252 <logger_log+0x16e>
		return;
 8009250:	bf00      	nop
}
 8009252:	3718      	adds	r7, #24
 8009254:	46bd      	mov	sp, r7
 8009256:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800925a:	b004      	add	sp, #16
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	c0004d64 	.word	0xc0004d64
 8009264:	c0004d08 	.word	0xc0004d08
 8009268:	0800a884 	.word	0x0800a884
 800926c:	c0004d1e 	.word	0xc0004d1e
 8009270:	c0004d4a 	.word	0xc0004d4a
 8009274:	24000000 	.word	0x24000000

08009278 <__errno>:
 8009278:	4b01      	ldr	r3, [pc, #4]	; (8009280 <__errno+0x8>)
 800927a:	6818      	ldr	r0, [r3, #0]
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	24000018 	.word	0x24000018

08009284 <__libc_init_array>:
 8009284:	b570      	push	{r4, r5, r6, lr}
 8009286:	4d0d      	ldr	r5, [pc, #52]	; (80092bc <__libc_init_array+0x38>)
 8009288:	4c0d      	ldr	r4, [pc, #52]	; (80092c0 <__libc_init_array+0x3c>)
 800928a:	1b64      	subs	r4, r4, r5
 800928c:	10a4      	asrs	r4, r4, #2
 800928e:	2600      	movs	r6, #0
 8009290:	42a6      	cmp	r6, r4
 8009292:	d109      	bne.n	80092a8 <__libc_init_array+0x24>
 8009294:	4d0b      	ldr	r5, [pc, #44]	; (80092c4 <__libc_init_array+0x40>)
 8009296:	4c0c      	ldr	r4, [pc, #48]	; (80092c8 <__libc_init_array+0x44>)
 8009298:	f001 fad4 	bl	800a844 <_init>
 800929c:	1b64      	subs	r4, r4, r5
 800929e:	10a4      	asrs	r4, r4, #2
 80092a0:	2600      	movs	r6, #0
 80092a2:	42a6      	cmp	r6, r4
 80092a4:	d105      	bne.n	80092b2 <__libc_init_array+0x2e>
 80092a6:	bd70      	pop	{r4, r5, r6, pc}
 80092a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80092ac:	4798      	blx	r3
 80092ae:	3601      	adds	r6, #1
 80092b0:	e7ee      	b.n	8009290 <__libc_init_array+0xc>
 80092b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80092b6:	4798      	blx	r3
 80092b8:	3601      	adds	r6, #1
 80092ba:	e7f2      	b.n	80092a2 <__libc_init_array+0x1e>
 80092bc:	0800b0a0 	.word	0x0800b0a0
 80092c0:	0800b0a0 	.word	0x0800b0a0
 80092c4:	0800b0a0 	.word	0x0800b0a0
 80092c8:	0800b0a4 	.word	0x0800b0a4

080092cc <memcpy>:
 80092cc:	440a      	add	r2, r1
 80092ce:	4291      	cmp	r1, r2
 80092d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80092d4:	d100      	bne.n	80092d8 <memcpy+0xc>
 80092d6:	4770      	bx	lr
 80092d8:	b510      	push	{r4, lr}
 80092da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092e2:	4291      	cmp	r1, r2
 80092e4:	d1f9      	bne.n	80092da <memcpy+0xe>
 80092e6:	bd10      	pop	{r4, pc}

080092e8 <memmove>:
 80092e8:	4288      	cmp	r0, r1
 80092ea:	b510      	push	{r4, lr}
 80092ec:	eb01 0402 	add.w	r4, r1, r2
 80092f0:	d902      	bls.n	80092f8 <memmove+0x10>
 80092f2:	4284      	cmp	r4, r0
 80092f4:	4623      	mov	r3, r4
 80092f6:	d807      	bhi.n	8009308 <memmove+0x20>
 80092f8:	1e43      	subs	r3, r0, #1
 80092fa:	42a1      	cmp	r1, r4
 80092fc:	d008      	beq.n	8009310 <memmove+0x28>
 80092fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009302:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009306:	e7f8      	b.n	80092fa <memmove+0x12>
 8009308:	4402      	add	r2, r0
 800930a:	4601      	mov	r1, r0
 800930c:	428a      	cmp	r2, r1
 800930e:	d100      	bne.n	8009312 <memmove+0x2a>
 8009310:	bd10      	pop	{r4, pc}
 8009312:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009316:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800931a:	e7f7      	b.n	800930c <memmove+0x24>

0800931c <memset>:
 800931c:	4402      	add	r2, r0
 800931e:	4603      	mov	r3, r0
 8009320:	4293      	cmp	r3, r2
 8009322:	d100      	bne.n	8009326 <memset+0xa>
 8009324:	4770      	bx	lr
 8009326:	f803 1b01 	strb.w	r1, [r3], #1
 800932a:	e7f9      	b.n	8009320 <memset+0x4>

0800932c <sniprintf>:
 800932c:	b40c      	push	{r2, r3}
 800932e:	b530      	push	{r4, r5, lr}
 8009330:	4b17      	ldr	r3, [pc, #92]	; (8009390 <sniprintf+0x64>)
 8009332:	1e0c      	subs	r4, r1, #0
 8009334:	681d      	ldr	r5, [r3, #0]
 8009336:	b09d      	sub	sp, #116	; 0x74
 8009338:	da08      	bge.n	800934c <sniprintf+0x20>
 800933a:	238b      	movs	r3, #139	; 0x8b
 800933c:	602b      	str	r3, [r5, #0]
 800933e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009342:	b01d      	add	sp, #116	; 0x74
 8009344:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009348:	b002      	add	sp, #8
 800934a:	4770      	bx	lr
 800934c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009350:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009354:	bf14      	ite	ne
 8009356:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800935a:	4623      	moveq	r3, r4
 800935c:	9304      	str	r3, [sp, #16]
 800935e:	9307      	str	r3, [sp, #28]
 8009360:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009364:	9002      	str	r0, [sp, #8]
 8009366:	9006      	str	r0, [sp, #24]
 8009368:	f8ad 3016 	strh.w	r3, [sp, #22]
 800936c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800936e:	ab21      	add	r3, sp, #132	; 0x84
 8009370:	a902      	add	r1, sp, #8
 8009372:	4628      	mov	r0, r5
 8009374:	9301      	str	r3, [sp, #4]
 8009376:	f000 f8a3 	bl	80094c0 <_svfiprintf_r>
 800937a:	1c43      	adds	r3, r0, #1
 800937c:	bfbc      	itt	lt
 800937e:	238b      	movlt	r3, #139	; 0x8b
 8009380:	602b      	strlt	r3, [r5, #0]
 8009382:	2c00      	cmp	r4, #0
 8009384:	d0dd      	beq.n	8009342 <sniprintf+0x16>
 8009386:	9b02      	ldr	r3, [sp, #8]
 8009388:	2200      	movs	r2, #0
 800938a:	701a      	strb	r2, [r3, #0]
 800938c:	e7d9      	b.n	8009342 <sniprintf+0x16>
 800938e:	bf00      	nop
 8009390:	24000018 	.word	0x24000018

08009394 <_vsniprintf_r>:
 8009394:	b530      	push	{r4, r5, lr}
 8009396:	4614      	mov	r4, r2
 8009398:	2c00      	cmp	r4, #0
 800939a:	b09b      	sub	sp, #108	; 0x6c
 800939c:	4605      	mov	r5, r0
 800939e:	461a      	mov	r2, r3
 80093a0:	da05      	bge.n	80093ae <_vsniprintf_r+0x1a>
 80093a2:	238b      	movs	r3, #139	; 0x8b
 80093a4:	6003      	str	r3, [r0, #0]
 80093a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093aa:	b01b      	add	sp, #108	; 0x6c
 80093ac:	bd30      	pop	{r4, r5, pc}
 80093ae:	f44f 7302 	mov.w	r3, #520	; 0x208
 80093b2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80093b6:	bf14      	ite	ne
 80093b8:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80093bc:	4623      	moveq	r3, r4
 80093be:	9302      	str	r3, [sp, #8]
 80093c0:	9305      	str	r3, [sp, #20]
 80093c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80093c6:	9100      	str	r1, [sp, #0]
 80093c8:	9104      	str	r1, [sp, #16]
 80093ca:	f8ad 300e 	strh.w	r3, [sp, #14]
 80093ce:	4669      	mov	r1, sp
 80093d0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80093d2:	f000 f875 	bl	80094c0 <_svfiprintf_r>
 80093d6:	1c43      	adds	r3, r0, #1
 80093d8:	bfbc      	itt	lt
 80093da:	238b      	movlt	r3, #139	; 0x8b
 80093dc:	602b      	strlt	r3, [r5, #0]
 80093de:	2c00      	cmp	r4, #0
 80093e0:	d0e3      	beq.n	80093aa <_vsniprintf_r+0x16>
 80093e2:	9b00      	ldr	r3, [sp, #0]
 80093e4:	2200      	movs	r2, #0
 80093e6:	701a      	strb	r2, [r3, #0]
 80093e8:	e7df      	b.n	80093aa <_vsniprintf_r+0x16>
	...

080093ec <vsniprintf>:
 80093ec:	b507      	push	{r0, r1, r2, lr}
 80093ee:	9300      	str	r3, [sp, #0]
 80093f0:	4613      	mov	r3, r2
 80093f2:	460a      	mov	r2, r1
 80093f4:	4601      	mov	r1, r0
 80093f6:	4803      	ldr	r0, [pc, #12]	; (8009404 <vsniprintf+0x18>)
 80093f8:	6800      	ldr	r0, [r0, #0]
 80093fa:	f7ff ffcb 	bl	8009394 <_vsniprintf_r>
 80093fe:	b003      	add	sp, #12
 8009400:	f85d fb04 	ldr.w	pc, [sp], #4
 8009404:	24000018 	.word	0x24000018

08009408 <__ssputs_r>:
 8009408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800940c:	688e      	ldr	r6, [r1, #8]
 800940e:	429e      	cmp	r6, r3
 8009410:	4682      	mov	sl, r0
 8009412:	460c      	mov	r4, r1
 8009414:	4690      	mov	r8, r2
 8009416:	461f      	mov	r7, r3
 8009418:	d838      	bhi.n	800948c <__ssputs_r+0x84>
 800941a:	898a      	ldrh	r2, [r1, #12]
 800941c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009420:	d032      	beq.n	8009488 <__ssputs_r+0x80>
 8009422:	6825      	ldr	r5, [r4, #0]
 8009424:	6909      	ldr	r1, [r1, #16]
 8009426:	eba5 0901 	sub.w	r9, r5, r1
 800942a:	6965      	ldr	r5, [r4, #20]
 800942c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009430:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009434:	3301      	adds	r3, #1
 8009436:	444b      	add	r3, r9
 8009438:	106d      	asrs	r5, r5, #1
 800943a:	429d      	cmp	r5, r3
 800943c:	bf38      	it	cc
 800943e:	461d      	movcc	r5, r3
 8009440:	0553      	lsls	r3, r2, #21
 8009442:	d531      	bpl.n	80094a8 <__ssputs_r+0xa0>
 8009444:	4629      	mov	r1, r5
 8009446:	f000 fb3b 	bl	8009ac0 <_malloc_r>
 800944a:	4606      	mov	r6, r0
 800944c:	b950      	cbnz	r0, 8009464 <__ssputs_r+0x5c>
 800944e:	230c      	movs	r3, #12
 8009450:	f8ca 3000 	str.w	r3, [sl]
 8009454:	89a3      	ldrh	r3, [r4, #12]
 8009456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800945a:	81a3      	strh	r3, [r4, #12]
 800945c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009464:	6921      	ldr	r1, [r4, #16]
 8009466:	464a      	mov	r2, r9
 8009468:	f7ff ff30 	bl	80092cc <memcpy>
 800946c:	89a3      	ldrh	r3, [r4, #12]
 800946e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009476:	81a3      	strh	r3, [r4, #12]
 8009478:	6126      	str	r6, [r4, #16]
 800947a:	6165      	str	r5, [r4, #20]
 800947c:	444e      	add	r6, r9
 800947e:	eba5 0509 	sub.w	r5, r5, r9
 8009482:	6026      	str	r6, [r4, #0]
 8009484:	60a5      	str	r5, [r4, #8]
 8009486:	463e      	mov	r6, r7
 8009488:	42be      	cmp	r6, r7
 800948a:	d900      	bls.n	800948e <__ssputs_r+0x86>
 800948c:	463e      	mov	r6, r7
 800948e:	6820      	ldr	r0, [r4, #0]
 8009490:	4632      	mov	r2, r6
 8009492:	4641      	mov	r1, r8
 8009494:	f7ff ff28 	bl	80092e8 <memmove>
 8009498:	68a3      	ldr	r3, [r4, #8]
 800949a:	1b9b      	subs	r3, r3, r6
 800949c:	60a3      	str	r3, [r4, #8]
 800949e:	6823      	ldr	r3, [r4, #0]
 80094a0:	4433      	add	r3, r6
 80094a2:	6023      	str	r3, [r4, #0]
 80094a4:	2000      	movs	r0, #0
 80094a6:	e7db      	b.n	8009460 <__ssputs_r+0x58>
 80094a8:	462a      	mov	r2, r5
 80094aa:	f000 fb7d 	bl	8009ba8 <_realloc_r>
 80094ae:	4606      	mov	r6, r0
 80094b0:	2800      	cmp	r0, #0
 80094b2:	d1e1      	bne.n	8009478 <__ssputs_r+0x70>
 80094b4:	6921      	ldr	r1, [r4, #16]
 80094b6:	4650      	mov	r0, sl
 80094b8:	f000 fa96 	bl	80099e8 <_free_r>
 80094bc:	e7c7      	b.n	800944e <__ssputs_r+0x46>
	...

080094c0 <_svfiprintf_r>:
 80094c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c4:	4698      	mov	r8, r3
 80094c6:	898b      	ldrh	r3, [r1, #12]
 80094c8:	061b      	lsls	r3, r3, #24
 80094ca:	b09d      	sub	sp, #116	; 0x74
 80094cc:	4607      	mov	r7, r0
 80094ce:	460d      	mov	r5, r1
 80094d0:	4614      	mov	r4, r2
 80094d2:	d50e      	bpl.n	80094f2 <_svfiprintf_r+0x32>
 80094d4:	690b      	ldr	r3, [r1, #16]
 80094d6:	b963      	cbnz	r3, 80094f2 <_svfiprintf_r+0x32>
 80094d8:	2140      	movs	r1, #64	; 0x40
 80094da:	f000 faf1 	bl	8009ac0 <_malloc_r>
 80094de:	6028      	str	r0, [r5, #0]
 80094e0:	6128      	str	r0, [r5, #16]
 80094e2:	b920      	cbnz	r0, 80094ee <_svfiprintf_r+0x2e>
 80094e4:	230c      	movs	r3, #12
 80094e6:	603b      	str	r3, [r7, #0]
 80094e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094ec:	e0d1      	b.n	8009692 <_svfiprintf_r+0x1d2>
 80094ee:	2340      	movs	r3, #64	; 0x40
 80094f0:	616b      	str	r3, [r5, #20]
 80094f2:	2300      	movs	r3, #0
 80094f4:	9309      	str	r3, [sp, #36]	; 0x24
 80094f6:	2320      	movs	r3, #32
 80094f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009500:	2330      	movs	r3, #48	; 0x30
 8009502:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80096ac <_svfiprintf_r+0x1ec>
 8009506:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800950a:	f04f 0901 	mov.w	r9, #1
 800950e:	4623      	mov	r3, r4
 8009510:	469a      	mov	sl, r3
 8009512:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009516:	b10a      	cbz	r2, 800951c <_svfiprintf_r+0x5c>
 8009518:	2a25      	cmp	r2, #37	; 0x25
 800951a:	d1f9      	bne.n	8009510 <_svfiprintf_r+0x50>
 800951c:	ebba 0b04 	subs.w	fp, sl, r4
 8009520:	d00b      	beq.n	800953a <_svfiprintf_r+0x7a>
 8009522:	465b      	mov	r3, fp
 8009524:	4622      	mov	r2, r4
 8009526:	4629      	mov	r1, r5
 8009528:	4638      	mov	r0, r7
 800952a:	f7ff ff6d 	bl	8009408 <__ssputs_r>
 800952e:	3001      	adds	r0, #1
 8009530:	f000 80aa 	beq.w	8009688 <_svfiprintf_r+0x1c8>
 8009534:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009536:	445a      	add	r2, fp
 8009538:	9209      	str	r2, [sp, #36]	; 0x24
 800953a:	f89a 3000 	ldrb.w	r3, [sl]
 800953e:	2b00      	cmp	r3, #0
 8009540:	f000 80a2 	beq.w	8009688 <_svfiprintf_r+0x1c8>
 8009544:	2300      	movs	r3, #0
 8009546:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800954a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800954e:	f10a 0a01 	add.w	sl, sl, #1
 8009552:	9304      	str	r3, [sp, #16]
 8009554:	9307      	str	r3, [sp, #28]
 8009556:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800955a:	931a      	str	r3, [sp, #104]	; 0x68
 800955c:	4654      	mov	r4, sl
 800955e:	2205      	movs	r2, #5
 8009560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009564:	4851      	ldr	r0, [pc, #324]	; (80096ac <_svfiprintf_r+0x1ec>)
 8009566:	f7f6 fec3 	bl	80002f0 <memchr>
 800956a:	9a04      	ldr	r2, [sp, #16]
 800956c:	b9d8      	cbnz	r0, 80095a6 <_svfiprintf_r+0xe6>
 800956e:	06d0      	lsls	r0, r2, #27
 8009570:	bf44      	itt	mi
 8009572:	2320      	movmi	r3, #32
 8009574:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009578:	0711      	lsls	r1, r2, #28
 800957a:	bf44      	itt	mi
 800957c:	232b      	movmi	r3, #43	; 0x2b
 800957e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009582:	f89a 3000 	ldrb.w	r3, [sl]
 8009586:	2b2a      	cmp	r3, #42	; 0x2a
 8009588:	d015      	beq.n	80095b6 <_svfiprintf_r+0xf6>
 800958a:	9a07      	ldr	r2, [sp, #28]
 800958c:	4654      	mov	r4, sl
 800958e:	2000      	movs	r0, #0
 8009590:	f04f 0c0a 	mov.w	ip, #10
 8009594:	4621      	mov	r1, r4
 8009596:	f811 3b01 	ldrb.w	r3, [r1], #1
 800959a:	3b30      	subs	r3, #48	; 0x30
 800959c:	2b09      	cmp	r3, #9
 800959e:	d94e      	bls.n	800963e <_svfiprintf_r+0x17e>
 80095a0:	b1b0      	cbz	r0, 80095d0 <_svfiprintf_r+0x110>
 80095a2:	9207      	str	r2, [sp, #28]
 80095a4:	e014      	b.n	80095d0 <_svfiprintf_r+0x110>
 80095a6:	eba0 0308 	sub.w	r3, r0, r8
 80095aa:	fa09 f303 	lsl.w	r3, r9, r3
 80095ae:	4313      	orrs	r3, r2
 80095b0:	9304      	str	r3, [sp, #16]
 80095b2:	46a2      	mov	sl, r4
 80095b4:	e7d2      	b.n	800955c <_svfiprintf_r+0x9c>
 80095b6:	9b03      	ldr	r3, [sp, #12]
 80095b8:	1d19      	adds	r1, r3, #4
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	9103      	str	r1, [sp, #12]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	bfbb      	ittet	lt
 80095c2:	425b      	neglt	r3, r3
 80095c4:	f042 0202 	orrlt.w	r2, r2, #2
 80095c8:	9307      	strge	r3, [sp, #28]
 80095ca:	9307      	strlt	r3, [sp, #28]
 80095cc:	bfb8      	it	lt
 80095ce:	9204      	strlt	r2, [sp, #16]
 80095d0:	7823      	ldrb	r3, [r4, #0]
 80095d2:	2b2e      	cmp	r3, #46	; 0x2e
 80095d4:	d10c      	bne.n	80095f0 <_svfiprintf_r+0x130>
 80095d6:	7863      	ldrb	r3, [r4, #1]
 80095d8:	2b2a      	cmp	r3, #42	; 0x2a
 80095da:	d135      	bne.n	8009648 <_svfiprintf_r+0x188>
 80095dc:	9b03      	ldr	r3, [sp, #12]
 80095de:	1d1a      	adds	r2, r3, #4
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	9203      	str	r2, [sp, #12]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	bfb8      	it	lt
 80095e8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80095ec:	3402      	adds	r4, #2
 80095ee:	9305      	str	r3, [sp, #20]
 80095f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80096bc <_svfiprintf_r+0x1fc>
 80095f4:	7821      	ldrb	r1, [r4, #0]
 80095f6:	2203      	movs	r2, #3
 80095f8:	4650      	mov	r0, sl
 80095fa:	f7f6 fe79 	bl	80002f0 <memchr>
 80095fe:	b140      	cbz	r0, 8009612 <_svfiprintf_r+0x152>
 8009600:	2340      	movs	r3, #64	; 0x40
 8009602:	eba0 000a 	sub.w	r0, r0, sl
 8009606:	fa03 f000 	lsl.w	r0, r3, r0
 800960a:	9b04      	ldr	r3, [sp, #16]
 800960c:	4303      	orrs	r3, r0
 800960e:	3401      	adds	r4, #1
 8009610:	9304      	str	r3, [sp, #16]
 8009612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009616:	4826      	ldr	r0, [pc, #152]	; (80096b0 <_svfiprintf_r+0x1f0>)
 8009618:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800961c:	2206      	movs	r2, #6
 800961e:	f7f6 fe67 	bl	80002f0 <memchr>
 8009622:	2800      	cmp	r0, #0
 8009624:	d038      	beq.n	8009698 <_svfiprintf_r+0x1d8>
 8009626:	4b23      	ldr	r3, [pc, #140]	; (80096b4 <_svfiprintf_r+0x1f4>)
 8009628:	bb1b      	cbnz	r3, 8009672 <_svfiprintf_r+0x1b2>
 800962a:	9b03      	ldr	r3, [sp, #12]
 800962c:	3307      	adds	r3, #7
 800962e:	f023 0307 	bic.w	r3, r3, #7
 8009632:	3308      	adds	r3, #8
 8009634:	9303      	str	r3, [sp, #12]
 8009636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009638:	4433      	add	r3, r6
 800963a:	9309      	str	r3, [sp, #36]	; 0x24
 800963c:	e767      	b.n	800950e <_svfiprintf_r+0x4e>
 800963e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009642:	460c      	mov	r4, r1
 8009644:	2001      	movs	r0, #1
 8009646:	e7a5      	b.n	8009594 <_svfiprintf_r+0xd4>
 8009648:	2300      	movs	r3, #0
 800964a:	3401      	adds	r4, #1
 800964c:	9305      	str	r3, [sp, #20]
 800964e:	4619      	mov	r1, r3
 8009650:	f04f 0c0a 	mov.w	ip, #10
 8009654:	4620      	mov	r0, r4
 8009656:	f810 2b01 	ldrb.w	r2, [r0], #1
 800965a:	3a30      	subs	r2, #48	; 0x30
 800965c:	2a09      	cmp	r2, #9
 800965e:	d903      	bls.n	8009668 <_svfiprintf_r+0x1a8>
 8009660:	2b00      	cmp	r3, #0
 8009662:	d0c5      	beq.n	80095f0 <_svfiprintf_r+0x130>
 8009664:	9105      	str	r1, [sp, #20]
 8009666:	e7c3      	b.n	80095f0 <_svfiprintf_r+0x130>
 8009668:	fb0c 2101 	mla	r1, ip, r1, r2
 800966c:	4604      	mov	r4, r0
 800966e:	2301      	movs	r3, #1
 8009670:	e7f0      	b.n	8009654 <_svfiprintf_r+0x194>
 8009672:	ab03      	add	r3, sp, #12
 8009674:	9300      	str	r3, [sp, #0]
 8009676:	462a      	mov	r2, r5
 8009678:	4b0f      	ldr	r3, [pc, #60]	; (80096b8 <_svfiprintf_r+0x1f8>)
 800967a:	a904      	add	r1, sp, #16
 800967c:	4638      	mov	r0, r7
 800967e:	f3af 8000 	nop.w
 8009682:	1c42      	adds	r2, r0, #1
 8009684:	4606      	mov	r6, r0
 8009686:	d1d6      	bne.n	8009636 <_svfiprintf_r+0x176>
 8009688:	89ab      	ldrh	r3, [r5, #12]
 800968a:	065b      	lsls	r3, r3, #25
 800968c:	f53f af2c 	bmi.w	80094e8 <_svfiprintf_r+0x28>
 8009690:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009692:	b01d      	add	sp, #116	; 0x74
 8009694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009698:	ab03      	add	r3, sp, #12
 800969a:	9300      	str	r3, [sp, #0]
 800969c:	462a      	mov	r2, r5
 800969e:	4b06      	ldr	r3, [pc, #24]	; (80096b8 <_svfiprintf_r+0x1f8>)
 80096a0:	a904      	add	r1, sp, #16
 80096a2:	4638      	mov	r0, r7
 80096a4:	f000 f87a 	bl	800979c <_printf_i>
 80096a8:	e7eb      	b.n	8009682 <_svfiprintf_r+0x1c2>
 80096aa:	bf00      	nop
 80096ac:	0800ae90 	.word	0x0800ae90
 80096b0:	0800ae9a 	.word	0x0800ae9a
 80096b4:	00000000 	.word	0x00000000
 80096b8:	08009409 	.word	0x08009409
 80096bc:	0800ae96 	.word	0x0800ae96

080096c0 <_printf_common>:
 80096c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096c4:	4616      	mov	r6, r2
 80096c6:	4699      	mov	r9, r3
 80096c8:	688a      	ldr	r2, [r1, #8]
 80096ca:	690b      	ldr	r3, [r1, #16]
 80096cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096d0:	4293      	cmp	r3, r2
 80096d2:	bfb8      	it	lt
 80096d4:	4613      	movlt	r3, r2
 80096d6:	6033      	str	r3, [r6, #0]
 80096d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096dc:	4607      	mov	r7, r0
 80096de:	460c      	mov	r4, r1
 80096e0:	b10a      	cbz	r2, 80096e6 <_printf_common+0x26>
 80096e2:	3301      	adds	r3, #1
 80096e4:	6033      	str	r3, [r6, #0]
 80096e6:	6823      	ldr	r3, [r4, #0]
 80096e8:	0699      	lsls	r1, r3, #26
 80096ea:	bf42      	ittt	mi
 80096ec:	6833      	ldrmi	r3, [r6, #0]
 80096ee:	3302      	addmi	r3, #2
 80096f0:	6033      	strmi	r3, [r6, #0]
 80096f2:	6825      	ldr	r5, [r4, #0]
 80096f4:	f015 0506 	ands.w	r5, r5, #6
 80096f8:	d106      	bne.n	8009708 <_printf_common+0x48>
 80096fa:	f104 0a19 	add.w	sl, r4, #25
 80096fe:	68e3      	ldr	r3, [r4, #12]
 8009700:	6832      	ldr	r2, [r6, #0]
 8009702:	1a9b      	subs	r3, r3, r2
 8009704:	42ab      	cmp	r3, r5
 8009706:	dc26      	bgt.n	8009756 <_printf_common+0x96>
 8009708:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800970c:	1e13      	subs	r3, r2, #0
 800970e:	6822      	ldr	r2, [r4, #0]
 8009710:	bf18      	it	ne
 8009712:	2301      	movne	r3, #1
 8009714:	0692      	lsls	r2, r2, #26
 8009716:	d42b      	bmi.n	8009770 <_printf_common+0xb0>
 8009718:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800971c:	4649      	mov	r1, r9
 800971e:	4638      	mov	r0, r7
 8009720:	47c0      	blx	r8
 8009722:	3001      	adds	r0, #1
 8009724:	d01e      	beq.n	8009764 <_printf_common+0xa4>
 8009726:	6823      	ldr	r3, [r4, #0]
 8009728:	68e5      	ldr	r5, [r4, #12]
 800972a:	6832      	ldr	r2, [r6, #0]
 800972c:	f003 0306 	and.w	r3, r3, #6
 8009730:	2b04      	cmp	r3, #4
 8009732:	bf08      	it	eq
 8009734:	1aad      	subeq	r5, r5, r2
 8009736:	68a3      	ldr	r3, [r4, #8]
 8009738:	6922      	ldr	r2, [r4, #16]
 800973a:	bf0c      	ite	eq
 800973c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009740:	2500      	movne	r5, #0
 8009742:	4293      	cmp	r3, r2
 8009744:	bfc4      	itt	gt
 8009746:	1a9b      	subgt	r3, r3, r2
 8009748:	18ed      	addgt	r5, r5, r3
 800974a:	2600      	movs	r6, #0
 800974c:	341a      	adds	r4, #26
 800974e:	42b5      	cmp	r5, r6
 8009750:	d11a      	bne.n	8009788 <_printf_common+0xc8>
 8009752:	2000      	movs	r0, #0
 8009754:	e008      	b.n	8009768 <_printf_common+0xa8>
 8009756:	2301      	movs	r3, #1
 8009758:	4652      	mov	r2, sl
 800975a:	4649      	mov	r1, r9
 800975c:	4638      	mov	r0, r7
 800975e:	47c0      	blx	r8
 8009760:	3001      	adds	r0, #1
 8009762:	d103      	bne.n	800976c <_printf_common+0xac>
 8009764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800976c:	3501      	adds	r5, #1
 800976e:	e7c6      	b.n	80096fe <_printf_common+0x3e>
 8009770:	18e1      	adds	r1, r4, r3
 8009772:	1c5a      	adds	r2, r3, #1
 8009774:	2030      	movs	r0, #48	; 0x30
 8009776:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800977a:	4422      	add	r2, r4
 800977c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009780:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009784:	3302      	adds	r3, #2
 8009786:	e7c7      	b.n	8009718 <_printf_common+0x58>
 8009788:	2301      	movs	r3, #1
 800978a:	4622      	mov	r2, r4
 800978c:	4649      	mov	r1, r9
 800978e:	4638      	mov	r0, r7
 8009790:	47c0      	blx	r8
 8009792:	3001      	adds	r0, #1
 8009794:	d0e6      	beq.n	8009764 <_printf_common+0xa4>
 8009796:	3601      	adds	r6, #1
 8009798:	e7d9      	b.n	800974e <_printf_common+0x8e>
	...

0800979c <_printf_i>:
 800979c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097a0:	7e0f      	ldrb	r7, [r1, #24]
 80097a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80097a4:	2f78      	cmp	r7, #120	; 0x78
 80097a6:	4691      	mov	r9, r2
 80097a8:	4680      	mov	r8, r0
 80097aa:	460c      	mov	r4, r1
 80097ac:	469a      	mov	sl, r3
 80097ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80097b2:	d807      	bhi.n	80097c4 <_printf_i+0x28>
 80097b4:	2f62      	cmp	r7, #98	; 0x62
 80097b6:	d80a      	bhi.n	80097ce <_printf_i+0x32>
 80097b8:	2f00      	cmp	r7, #0
 80097ba:	f000 80d8 	beq.w	800996e <_printf_i+0x1d2>
 80097be:	2f58      	cmp	r7, #88	; 0x58
 80097c0:	f000 80a3 	beq.w	800990a <_printf_i+0x16e>
 80097c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80097cc:	e03a      	b.n	8009844 <_printf_i+0xa8>
 80097ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80097d2:	2b15      	cmp	r3, #21
 80097d4:	d8f6      	bhi.n	80097c4 <_printf_i+0x28>
 80097d6:	a101      	add	r1, pc, #4	; (adr r1, 80097dc <_printf_i+0x40>)
 80097d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097dc:	08009835 	.word	0x08009835
 80097e0:	08009849 	.word	0x08009849
 80097e4:	080097c5 	.word	0x080097c5
 80097e8:	080097c5 	.word	0x080097c5
 80097ec:	080097c5 	.word	0x080097c5
 80097f0:	080097c5 	.word	0x080097c5
 80097f4:	08009849 	.word	0x08009849
 80097f8:	080097c5 	.word	0x080097c5
 80097fc:	080097c5 	.word	0x080097c5
 8009800:	080097c5 	.word	0x080097c5
 8009804:	080097c5 	.word	0x080097c5
 8009808:	08009955 	.word	0x08009955
 800980c:	08009879 	.word	0x08009879
 8009810:	08009937 	.word	0x08009937
 8009814:	080097c5 	.word	0x080097c5
 8009818:	080097c5 	.word	0x080097c5
 800981c:	08009977 	.word	0x08009977
 8009820:	080097c5 	.word	0x080097c5
 8009824:	08009879 	.word	0x08009879
 8009828:	080097c5 	.word	0x080097c5
 800982c:	080097c5 	.word	0x080097c5
 8009830:	0800993f 	.word	0x0800993f
 8009834:	682b      	ldr	r3, [r5, #0]
 8009836:	1d1a      	adds	r2, r3, #4
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	602a      	str	r2, [r5, #0]
 800983c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009840:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009844:	2301      	movs	r3, #1
 8009846:	e0a3      	b.n	8009990 <_printf_i+0x1f4>
 8009848:	6820      	ldr	r0, [r4, #0]
 800984a:	6829      	ldr	r1, [r5, #0]
 800984c:	0606      	lsls	r6, r0, #24
 800984e:	f101 0304 	add.w	r3, r1, #4
 8009852:	d50a      	bpl.n	800986a <_printf_i+0xce>
 8009854:	680e      	ldr	r6, [r1, #0]
 8009856:	602b      	str	r3, [r5, #0]
 8009858:	2e00      	cmp	r6, #0
 800985a:	da03      	bge.n	8009864 <_printf_i+0xc8>
 800985c:	232d      	movs	r3, #45	; 0x2d
 800985e:	4276      	negs	r6, r6
 8009860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009864:	485e      	ldr	r0, [pc, #376]	; (80099e0 <_printf_i+0x244>)
 8009866:	230a      	movs	r3, #10
 8009868:	e019      	b.n	800989e <_printf_i+0x102>
 800986a:	680e      	ldr	r6, [r1, #0]
 800986c:	602b      	str	r3, [r5, #0]
 800986e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009872:	bf18      	it	ne
 8009874:	b236      	sxthne	r6, r6
 8009876:	e7ef      	b.n	8009858 <_printf_i+0xbc>
 8009878:	682b      	ldr	r3, [r5, #0]
 800987a:	6820      	ldr	r0, [r4, #0]
 800987c:	1d19      	adds	r1, r3, #4
 800987e:	6029      	str	r1, [r5, #0]
 8009880:	0601      	lsls	r1, r0, #24
 8009882:	d501      	bpl.n	8009888 <_printf_i+0xec>
 8009884:	681e      	ldr	r6, [r3, #0]
 8009886:	e002      	b.n	800988e <_printf_i+0xf2>
 8009888:	0646      	lsls	r6, r0, #25
 800988a:	d5fb      	bpl.n	8009884 <_printf_i+0xe8>
 800988c:	881e      	ldrh	r6, [r3, #0]
 800988e:	4854      	ldr	r0, [pc, #336]	; (80099e0 <_printf_i+0x244>)
 8009890:	2f6f      	cmp	r7, #111	; 0x6f
 8009892:	bf0c      	ite	eq
 8009894:	2308      	moveq	r3, #8
 8009896:	230a      	movne	r3, #10
 8009898:	2100      	movs	r1, #0
 800989a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800989e:	6865      	ldr	r5, [r4, #4]
 80098a0:	60a5      	str	r5, [r4, #8]
 80098a2:	2d00      	cmp	r5, #0
 80098a4:	bfa2      	ittt	ge
 80098a6:	6821      	ldrge	r1, [r4, #0]
 80098a8:	f021 0104 	bicge.w	r1, r1, #4
 80098ac:	6021      	strge	r1, [r4, #0]
 80098ae:	b90e      	cbnz	r6, 80098b4 <_printf_i+0x118>
 80098b0:	2d00      	cmp	r5, #0
 80098b2:	d04d      	beq.n	8009950 <_printf_i+0x1b4>
 80098b4:	4615      	mov	r5, r2
 80098b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80098ba:	fb03 6711 	mls	r7, r3, r1, r6
 80098be:	5dc7      	ldrb	r7, [r0, r7]
 80098c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80098c4:	4637      	mov	r7, r6
 80098c6:	42bb      	cmp	r3, r7
 80098c8:	460e      	mov	r6, r1
 80098ca:	d9f4      	bls.n	80098b6 <_printf_i+0x11a>
 80098cc:	2b08      	cmp	r3, #8
 80098ce:	d10b      	bne.n	80098e8 <_printf_i+0x14c>
 80098d0:	6823      	ldr	r3, [r4, #0]
 80098d2:	07de      	lsls	r6, r3, #31
 80098d4:	d508      	bpl.n	80098e8 <_printf_i+0x14c>
 80098d6:	6923      	ldr	r3, [r4, #16]
 80098d8:	6861      	ldr	r1, [r4, #4]
 80098da:	4299      	cmp	r1, r3
 80098dc:	bfde      	ittt	le
 80098de:	2330      	movle	r3, #48	; 0x30
 80098e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80098e4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80098e8:	1b52      	subs	r2, r2, r5
 80098ea:	6122      	str	r2, [r4, #16]
 80098ec:	f8cd a000 	str.w	sl, [sp]
 80098f0:	464b      	mov	r3, r9
 80098f2:	aa03      	add	r2, sp, #12
 80098f4:	4621      	mov	r1, r4
 80098f6:	4640      	mov	r0, r8
 80098f8:	f7ff fee2 	bl	80096c0 <_printf_common>
 80098fc:	3001      	adds	r0, #1
 80098fe:	d14c      	bne.n	800999a <_printf_i+0x1fe>
 8009900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009904:	b004      	add	sp, #16
 8009906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800990a:	4835      	ldr	r0, [pc, #212]	; (80099e0 <_printf_i+0x244>)
 800990c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009910:	6829      	ldr	r1, [r5, #0]
 8009912:	6823      	ldr	r3, [r4, #0]
 8009914:	f851 6b04 	ldr.w	r6, [r1], #4
 8009918:	6029      	str	r1, [r5, #0]
 800991a:	061d      	lsls	r5, r3, #24
 800991c:	d514      	bpl.n	8009948 <_printf_i+0x1ac>
 800991e:	07df      	lsls	r7, r3, #31
 8009920:	bf44      	itt	mi
 8009922:	f043 0320 	orrmi.w	r3, r3, #32
 8009926:	6023      	strmi	r3, [r4, #0]
 8009928:	b91e      	cbnz	r6, 8009932 <_printf_i+0x196>
 800992a:	6823      	ldr	r3, [r4, #0]
 800992c:	f023 0320 	bic.w	r3, r3, #32
 8009930:	6023      	str	r3, [r4, #0]
 8009932:	2310      	movs	r3, #16
 8009934:	e7b0      	b.n	8009898 <_printf_i+0xfc>
 8009936:	6823      	ldr	r3, [r4, #0]
 8009938:	f043 0320 	orr.w	r3, r3, #32
 800993c:	6023      	str	r3, [r4, #0]
 800993e:	2378      	movs	r3, #120	; 0x78
 8009940:	4828      	ldr	r0, [pc, #160]	; (80099e4 <_printf_i+0x248>)
 8009942:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009946:	e7e3      	b.n	8009910 <_printf_i+0x174>
 8009948:	0659      	lsls	r1, r3, #25
 800994a:	bf48      	it	mi
 800994c:	b2b6      	uxthmi	r6, r6
 800994e:	e7e6      	b.n	800991e <_printf_i+0x182>
 8009950:	4615      	mov	r5, r2
 8009952:	e7bb      	b.n	80098cc <_printf_i+0x130>
 8009954:	682b      	ldr	r3, [r5, #0]
 8009956:	6826      	ldr	r6, [r4, #0]
 8009958:	6961      	ldr	r1, [r4, #20]
 800995a:	1d18      	adds	r0, r3, #4
 800995c:	6028      	str	r0, [r5, #0]
 800995e:	0635      	lsls	r5, r6, #24
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	d501      	bpl.n	8009968 <_printf_i+0x1cc>
 8009964:	6019      	str	r1, [r3, #0]
 8009966:	e002      	b.n	800996e <_printf_i+0x1d2>
 8009968:	0670      	lsls	r0, r6, #25
 800996a:	d5fb      	bpl.n	8009964 <_printf_i+0x1c8>
 800996c:	8019      	strh	r1, [r3, #0]
 800996e:	2300      	movs	r3, #0
 8009970:	6123      	str	r3, [r4, #16]
 8009972:	4615      	mov	r5, r2
 8009974:	e7ba      	b.n	80098ec <_printf_i+0x150>
 8009976:	682b      	ldr	r3, [r5, #0]
 8009978:	1d1a      	adds	r2, r3, #4
 800997a:	602a      	str	r2, [r5, #0]
 800997c:	681d      	ldr	r5, [r3, #0]
 800997e:	6862      	ldr	r2, [r4, #4]
 8009980:	2100      	movs	r1, #0
 8009982:	4628      	mov	r0, r5
 8009984:	f7f6 fcb4 	bl	80002f0 <memchr>
 8009988:	b108      	cbz	r0, 800998e <_printf_i+0x1f2>
 800998a:	1b40      	subs	r0, r0, r5
 800998c:	6060      	str	r0, [r4, #4]
 800998e:	6863      	ldr	r3, [r4, #4]
 8009990:	6123      	str	r3, [r4, #16]
 8009992:	2300      	movs	r3, #0
 8009994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009998:	e7a8      	b.n	80098ec <_printf_i+0x150>
 800999a:	6923      	ldr	r3, [r4, #16]
 800999c:	462a      	mov	r2, r5
 800999e:	4649      	mov	r1, r9
 80099a0:	4640      	mov	r0, r8
 80099a2:	47d0      	blx	sl
 80099a4:	3001      	adds	r0, #1
 80099a6:	d0ab      	beq.n	8009900 <_printf_i+0x164>
 80099a8:	6823      	ldr	r3, [r4, #0]
 80099aa:	079b      	lsls	r3, r3, #30
 80099ac:	d413      	bmi.n	80099d6 <_printf_i+0x23a>
 80099ae:	68e0      	ldr	r0, [r4, #12]
 80099b0:	9b03      	ldr	r3, [sp, #12]
 80099b2:	4298      	cmp	r0, r3
 80099b4:	bfb8      	it	lt
 80099b6:	4618      	movlt	r0, r3
 80099b8:	e7a4      	b.n	8009904 <_printf_i+0x168>
 80099ba:	2301      	movs	r3, #1
 80099bc:	4632      	mov	r2, r6
 80099be:	4649      	mov	r1, r9
 80099c0:	4640      	mov	r0, r8
 80099c2:	47d0      	blx	sl
 80099c4:	3001      	adds	r0, #1
 80099c6:	d09b      	beq.n	8009900 <_printf_i+0x164>
 80099c8:	3501      	adds	r5, #1
 80099ca:	68e3      	ldr	r3, [r4, #12]
 80099cc:	9903      	ldr	r1, [sp, #12]
 80099ce:	1a5b      	subs	r3, r3, r1
 80099d0:	42ab      	cmp	r3, r5
 80099d2:	dcf2      	bgt.n	80099ba <_printf_i+0x21e>
 80099d4:	e7eb      	b.n	80099ae <_printf_i+0x212>
 80099d6:	2500      	movs	r5, #0
 80099d8:	f104 0619 	add.w	r6, r4, #25
 80099dc:	e7f5      	b.n	80099ca <_printf_i+0x22e>
 80099de:	bf00      	nop
 80099e0:	0800aea1 	.word	0x0800aea1
 80099e4:	0800aeb2 	.word	0x0800aeb2

080099e8 <_free_r>:
 80099e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099ea:	2900      	cmp	r1, #0
 80099ec:	d044      	beq.n	8009a78 <_free_r+0x90>
 80099ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099f2:	9001      	str	r0, [sp, #4]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	f1a1 0404 	sub.w	r4, r1, #4
 80099fa:	bfb8      	it	lt
 80099fc:	18e4      	addlt	r4, r4, r3
 80099fe:	f000 f913 	bl	8009c28 <__malloc_lock>
 8009a02:	4a1e      	ldr	r2, [pc, #120]	; (8009a7c <_free_r+0x94>)
 8009a04:	9801      	ldr	r0, [sp, #4]
 8009a06:	6813      	ldr	r3, [r2, #0]
 8009a08:	b933      	cbnz	r3, 8009a18 <_free_r+0x30>
 8009a0a:	6063      	str	r3, [r4, #4]
 8009a0c:	6014      	str	r4, [r2, #0]
 8009a0e:	b003      	add	sp, #12
 8009a10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a14:	f000 b90e 	b.w	8009c34 <__malloc_unlock>
 8009a18:	42a3      	cmp	r3, r4
 8009a1a:	d908      	bls.n	8009a2e <_free_r+0x46>
 8009a1c:	6825      	ldr	r5, [r4, #0]
 8009a1e:	1961      	adds	r1, r4, r5
 8009a20:	428b      	cmp	r3, r1
 8009a22:	bf01      	itttt	eq
 8009a24:	6819      	ldreq	r1, [r3, #0]
 8009a26:	685b      	ldreq	r3, [r3, #4]
 8009a28:	1949      	addeq	r1, r1, r5
 8009a2a:	6021      	streq	r1, [r4, #0]
 8009a2c:	e7ed      	b.n	8009a0a <_free_r+0x22>
 8009a2e:	461a      	mov	r2, r3
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	b10b      	cbz	r3, 8009a38 <_free_r+0x50>
 8009a34:	42a3      	cmp	r3, r4
 8009a36:	d9fa      	bls.n	8009a2e <_free_r+0x46>
 8009a38:	6811      	ldr	r1, [r2, #0]
 8009a3a:	1855      	adds	r5, r2, r1
 8009a3c:	42a5      	cmp	r5, r4
 8009a3e:	d10b      	bne.n	8009a58 <_free_r+0x70>
 8009a40:	6824      	ldr	r4, [r4, #0]
 8009a42:	4421      	add	r1, r4
 8009a44:	1854      	adds	r4, r2, r1
 8009a46:	42a3      	cmp	r3, r4
 8009a48:	6011      	str	r1, [r2, #0]
 8009a4a:	d1e0      	bne.n	8009a0e <_free_r+0x26>
 8009a4c:	681c      	ldr	r4, [r3, #0]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	6053      	str	r3, [r2, #4]
 8009a52:	4421      	add	r1, r4
 8009a54:	6011      	str	r1, [r2, #0]
 8009a56:	e7da      	b.n	8009a0e <_free_r+0x26>
 8009a58:	d902      	bls.n	8009a60 <_free_r+0x78>
 8009a5a:	230c      	movs	r3, #12
 8009a5c:	6003      	str	r3, [r0, #0]
 8009a5e:	e7d6      	b.n	8009a0e <_free_r+0x26>
 8009a60:	6825      	ldr	r5, [r4, #0]
 8009a62:	1961      	adds	r1, r4, r5
 8009a64:	428b      	cmp	r3, r1
 8009a66:	bf04      	itt	eq
 8009a68:	6819      	ldreq	r1, [r3, #0]
 8009a6a:	685b      	ldreq	r3, [r3, #4]
 8009a6c:	6063      	str	r3, [r4, #4]
 8009a6e:	bf04      	itt	eq
 8009a70:	1949      	addeq	r1, r1, r5
 8009a72:	6021      	streq	r1, [r4, #0]
 8009a74:	6054      	str	r4, [r2, #4]
 8009a76:	e7ca      	b.n	8009a0e <_free_r+0x26>
 8009a78:	b003      	add	sp, #12
 8009a7a:	bd30      	pop	{r4, r5, pc}
 8009a7c:	24000208 	.word	0x24000208

08009a80 <sbrk_aligned>:
 8009a80:	b570      	push	{r4, r5, r6, lr}
 8009a82:	4e0e      	ldr	r6, [pc, #56]	; (8009abc <sbrk_aligned+0x3c>)
 8009a84:	460c      	mov	r4, r1
 8009a86:	6831      	ldr	r1, [r6, #0]
 8009a88:	4605      	mov	r5, r0
 8009a8a:	b911      	cbnz	r1, 8009a92 <sbrk_aligned+0x12>
 8009a8c:	f000 f8bc 	bl	8009c08 <_sbrk_r>
 8009a90:	6030      	str	r0, [r6, #0]
 8009a92:	4621      	mov	r1, r4
 8009a94:	4628      	mov	r0, r5
 8009a96:	f000 f8b7 	bl	8009c08 <_sbrk_r>
 8009a9a:	1c43      	adds	r3, r0, #1
 8009a9c:	d00a      	beq.n	8009ab4 <sbrk_aligned+0x34>
 8009a9e:	1cc4      	adds	r4, r0, #3
 8009aa0:	f024 0403 	bic.w	r4, r4, #3
 8009aa4:	42a0      	cmp	r0, r4
 8009aa6:	d007      	beq.n	8009ab8 <sbrk_aligned+0x38>
 8009aa8:	1a21      	subs	r1, r4, r0
 8009aaa:	4628      	mov	r0, r5
 8009aac:	f000 f8ac 	bl	8009c08 <_sbrk_r>
 8009ab0:	3001      	adds	r0, #1
 8009ab2:	d101      	bne.n	8009ab8 <sbrk_aligned+0x38>
 8009ab4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009ab8:	4620      	mov	r0, r4
 8009aba:	bd70      	pop	{r4, r5, r6, pc}
 8009abc:	2400020c 	.word	0x2400020c

08009ac0 <_malloc_r>:
 8009ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac4:	1ccd      	adds	r5, r1, #3
 8009ac6:	f025 0503 	bic.w	r5, r5, #3
 8009aca:	3508      	adds	r5, #8
 8009acc:	2d0c      	cmp	r5, #12
 8009ace:	bf38      	it	cc
 8009ad0:	250c      	movcc	r5, #12
 8009ad2:	2d00      	cmp	r5, #0
 8009ad4:	4607      	mov	r7, r0
 8009ad6:	db01      	blt.n	8009adc <_malloc_r+0x1c>
 8009ad8:	42a9      	cmp	r1, r5
 8009ada:	d905      	bls.n	8009ae8 <_malloc_r+0x28>
 8009adc:	230c      	movs	r3, #12
 8009ade:	603b      	str	r3, [r7, #0]
 8009ae0:	2600      	movs	r6, #0
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ae8:	4e2e      	ldr	r6, [pc, #184]	; (8009ba4 <_malloc_r+0xe4>)
 8009aea:	f000 f89d 	bl	8009c28 <__malloc_lock>
 8009aee:	6833      	ldr	r3, [r6, #0]
 8009af0:	461c      	mov	r4, r3
 8009af2:	bb34      	cbnz	r4, 8009b42 <_malloc_r+0x82>
 8009af4:	4629      	mov	r1, r5
 8009af6:	4638      	mov	r0, r7
 8009af8:	f7ff ffc2 	bl	8009a80 <sbrk_aligned>
 8009afc:	1c43      	adds	r3, r0, #1
 8009afe:	4604      	mov	r4, r0
 8009b00:	d14d      	bne.n	8009b9e <_malloc_r+0xde>
 8009b02:	6834      	ldr	r4, [r6, #0]
 8009b04:	4626      	mov	r6, r4
 8009b06:	2e00      	cmp	r6, #0
 8009b08:	d140      	bne.n	8009b8c <_malloc_r+0xcc>
 8009b0a:	6823      	ldr	r3, [r4, #0]
 8009b0c:	4631      	mov	r1, r6
 8009b0e:	4638      	mov	r0, r7
 8009b10:	eb04 0803 	add.w	r8, r4, r3
 8009b14:	f000 f878 	bl	8009c08 <_sbrk_r>
 8009b18:	4580      	cmp	r8, r0
 8009b1a:	d13a      	bne.n	8009b92 <_malloc_r+0xd2>
 8009b1c:	6821      	ldr	r1, [r4, #0]
 8009b1e:	3503      	adds	r5, #3
 8009b20:	1a6d      	subs	r5, r5, r1
 8009b22:	f025 0503 	bic.w	r5, r5, #3
 8009b26:	3508      	adds	r5, #8
 8009b28:	2d0c      	cmp	r5, #12
 8009b2a:	bf38      	it	cc
 8009b2c:	250c      	movcc	r5, #12
 8009b2e:	4629      	mov	r1, r5
 8009b30:	4638      	mov	r0, r7
 8009b32:	f7ff ffa5 	bl	8009a80 <sbrk_aligned>
 8009b36:	3001      	adds	r0, #1
 8009b38:	d02b      	beq.n	8009b92 <_malloc_r+0xd2>
 8009b3a:	6823      	ldr	r3, [r4, #0]
 8009b3c:	442b      	add	r3, r5
 8009b3e:	6023      	str	r3, [r4, #0]
 8009b40:	e00e      	b.n	8009b60 <_malloc_r+0xa0>
 8009b42:	6822      	ldr	r2, [r4, #0]
 8009b44:	1b52      	subs	r2, r2, r5
 8009b46:	d41e      	bmi.n	8009b86 <_malloc_r+0xc6>
 8009b48:	2a0b      	cmp	r2, #11
 8009b4a:	d916      	bls.n	8009b7a <_malloc_r+0xba>
 8009b4c:	1961      	adds	r1, r4, r5
 8009b4e:	42a3      	cmp	r3, r4
 8009b50:	6025      	str	r5, [r4, #0]
 8009b52:	bf18      	it	ne
 8009b54:	6059      	strne	r1, [r3, #4]
 8009b56:	6863      	ldr	r3, [r4, #4]
 8009b58:	bf08      	it	eq
 8009b5a:	6031      	streq	r1, [r6, #0]
 8009b5c:	5162      	str	r2, [r4, r5]
 8009b5e:	604b      	str	r3, [r1, #4]
 8009b60:	4638      	mov	r0, r7
 8009b62:	f104 060b 	add.w	r6, r4, #11
 8009b66:	f000 f865 	bl	8009c34 <__malloc_unlock>
 8009b6a:	f026 0607 	bic.w	r6, r6, #7
 8009b6e:	1d23      	adds	r3, r4, #4
 8009b70:	1af2      	subs	r2, r6, r3
 8009b72:	d0b6      	beq.n	8009ae2 <_malloc_r+0x22>
 8009b74:	1b9b      	subs	r3, r3, r6
 8009b76:	50a3      	str	r3, [r4, r2]
 8009b78:	e7b3      	b.n	8009ae2 <_malloc_r+0x22>
 8009b7a:	6862      	ldr	r2, [r4, #4]
 8009b7c:	42a3      	cmp	r3, r4
 8009b7e:	bf0c      	ite	eq
 8009b80:	6032      	streq	r2, [r6, #0]
 8009b82:	605a      	strne	r2, [r3, #4]
 8009b84:	e7ec      	b.n	8009b60 <_malloc_r+0xa0>
 8009b86:	4623      	mov	r3, r4
 8009b88:	6864      	ldr	r4, [r4, #4]
 8009b8a:	e7b2      	b.n	8009af2 <_malloc_r+0x32>
 8009b8c:	4634      	mov	r4, r6
 8009b8e:	6876      	ldr	r6, [r6, #4]
 8009b90:	e7b9      	b.n	8009b06 <_malloc_r+0x46>
 8009b92:	230c      	movs	r3, #12
 8009b94:	603b      	str	r3, [r7, #0]
 8009b96:	4638      	mov	r0, r7
 8009b98:	f000 f84c 	bl	8009c34 <__malloc_unlock>
 8009b9c:	e7a1      	b.n	8009ae2 <_malloc_r+0x22>
 8009b9e:	6025      	str	r5, [r4, #0]
 8009ba0:	e7de      	b.n	8009b60 <_malloc_r+0xa0>
 8009ba2:	bf00      	nop
 8009ba4:	24000208 	.word	0x24000208

08009ba8 <_realloc_r>:
 8009ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bac:	4680      	mov	r8, r0
 8009bae:	4614      	mov	r4, r2
 8009bb0:	460e      	mov	r6, r1
 8009bb2:	b921      	cbnz	r1, 8009bbe <_realloc_r+0x16>
 8009bb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb8:	4611      	mov	r1, r2
 8009bba:	f7ff bf81 	b.w	8009ac0 <_malloc_r>
 8009bbe:	b92a      	cbnz	r2, 8009bcc <_realloc_r+0x24>
 8009bc0:	f7ff ff12 	bl	80099e8 <_free_r>
 8009bc4:	4625      	mov	r5, r4
 8009bc6:	4628      	mov	r0, r5
 8009bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bcc:	f000 f838 	bl	8009c40 <_malloc_usable_size_r>
 8009bd0:	4284      	cmp	r4, r0
 8009bd2:	4607      	mov	r7, r0
 8009bd4:	d802      	bhi.n	8009bdc <_realloc_r+0x34>
 8009bd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009bda:	d812      	bhi.n	8009c02 <_realloc_r+0x5a>
 8009bdc:	4621      	mov	r1, r4
 8009bde:	4640      	mov	r0, r8
 8009be0:	f7ff ff6e 	bl	8009ac0 <_malloc_r>
 8009be4:	4605      	mov	r5, r0
 8009be6:	2800      	cmp	r0, #0
 8009be8:	d0ed      	beq.n	8009bc6 <_realloc_r+0x1e>
 8009bea:	42bc      	cmp	r4, r7
 8009bec:	4622      	mov	r2, r4
 8009bee:	4631      	mov	r1, r6
 8009bf0:	bf28      	it	cs
 8009bf2:	463a      	movcs	r2, r7
 8009bf4:	f7ff fb6a 	bl	80092cc <memcpy>
 8009bf8:	4631      	mov	r1, r6
 8009bfa:	4640      	mov	r0, r8
 8009bfc:	f7ff fef4 	bl	80099e8 <_free_r>
 8009c00:	e7e1      	b.n	8009bc6 <_realloc_r+0x1e>
 8009c02:	4635      	mov	r5, r6
 8009c04:	e7df      	b.n	8009bc6 <_realloc_r+0x1e>
	...

08009c08 <_sbrk_r>:
 8009c08:	b538      	push	{r3, r4, r5, lr}
 8009c0a:	4d06      	ldr	r5, [pc, #24]	; (8009c24 <_sbrk_r+0x1c>)
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	4604      	mov	r4, r0
 8009c10:	4608      	mov	r0, r1
 8009c12:	602b      	str	r3, [r5, #0]
 8009c14:	f7f7 fd3a 	bl	800168c <_sbrk>
 8009c18:	1c43      	adds	r3, r0, #1
 8009c1a:	d102      	bne.n	8009c22 <_sbrk_r+0x1a>
 8009c1c:	682b      	ldr	r3, [r5, #0]
 8009c1e:	b103      	cbz	r3, 8009c22 <_sbrk_r+0x1a>
 8009c20:	6023      	str	r3, [r4, #0]
 8009c22:	bd38      	pop	{r3, r4, r5, pc}
 8009c24:	24000210 	.word	0x24000210

08009c28 <__malloc_lock>:
 8009c28:	4801      	ldr	r0, [pc, #4]	; (8009c30 <__malloc_lock+0x8>)
 8009c2a:	f000 b811 	b.w	8009c50 <__retarget_lock_acquire_recursive>
 8009c2e:	bf00      	nop
 8009c30:	24000214 	.word	0x24000214

08009c34 <__malloc_unlock>:
 8009c34:	4801      	ldr	r0, [pc, #4]	; (8009c3c <__malloc_unlock+0x8>)
 8009c36:	f000 b80c 	b.w	8009c52 <__retarget_lock_release_recursive>
 8009c3a:	bf00      	nop
 8009c3c:	24000214 	.word	0x24000214

08009c40 <_malloc_usable_size_r>:
 8009c40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c44:	1f18      	subs	r0, r3, #4
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	bfbc      	itt	lt
 8009c4a:	580b      	ldrlt	r3, [r1, r0]
 8009c4c:	18c0      	addlt	r0, r0, r3
 8009c4e:	4770      	bx	lr

08009c50 <__retarget_lock_acquire_recursive>:
 8009c50:	4770      	bx	lr

08009c52 <__retarget_lock_release_recursive>:
 8009c52:	4770      	bx	lr
 8009c54:	0000      	movs	r0, r0
	...

08009c58 <sin>:
 8009c58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c5a:	eeb0 7b40 	vmov.f64	d7, d0
 8009c5e:	ee17 3a90 	vmov	r3, s15
 8009c62:	4a21      	ldr	r2, [pc, #132]	; (8009ce8 <sin+0x90>)
 8009c64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	dc07      	bgt.n	8009c7c <sin+0x24>
 8009c6c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8009ce0 <sin+0x88>
 8009c70:	2000      	movs	r0, #0
 8009c72:	b005      	add	sp, #20
 8009c74:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c78:	f000 bc82 	b.w	800a580 <__kernel_sin>
 8009c7c:	4a1b      	ldr	r2, [pc, #108]	; (8009cec <sin+0x94>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	dd04      	ble.n	8009c8c <sin+0x34>
 8009c82:	ee30 0b40 	vsub.f64	d0, d0, d0
 8009c86:	b005      	add	sp, #20
 8009c88:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c8c:	4668      	mov	r0, sp
 8009c8e:	f000 f82f 	bl	8009cf0 <__ieee754_rem_pio2>
 8009c92:	f000 0003 	and.w	r0, r0, #3
 8009c96:	2801      	cmp	r0, #1
 8009c98:	d00a      	beq.n	8009cb0 <sin+0x58>
 8009c9a:	2802      	cmp	r0, #2
 8009c9c:	d00f      	beq.n	8009cbe <sin+0x66>
 8009c9e:	b9c0      	cbnz	r0, 8009cd2 <sin+0x7a>
 8009ca0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ca4:	ed9d 0b00 	vldr	d0, [sp]
 8009ca8:	2001      	movs	r0, #1
 8009caa:	f000 fc69 	bl	800a580 <__kernel_sin>
 8009cae:	e7ea      	b.n	8009c86 <sin+0x2e>
 8009cb0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009cb4:	ed9d 0b00 	vldr	d0, [sp]
 8009cb8:	f000 f95e 	bl	8009f78 <__kernel_cos>
 8009cbc:	e7e3      	b.n	8009c86 <sin+0x2e>
 8009cbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009cc2:	ed9d 0b00 	vldr	d0, [sp]
 8009cc6:	2001      	movs	r0, #1
 8009cc8:	f000 fc5a 	bl	800a580 <__kernel_sin>
 8009ccc:	eeb1 0b40 	vneg.f64	d0, d0
 8009cd0:	e7d9      	b.n	8009c86 <sin+0x2e>
 8009cd2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009cd6:	ed9d 0b00 	vldr	d0, [sp]
 8009cda:	f000 f94d 	bl	8009f78 <__kernel_cos>
 8009cde:	e7f5      	b.n	8009ccc <sin+0x74>
	...
 8009ce8:	3fe921fb 	.word	0x3fe921fb
 8009cec:	7fefffff 	.word	0x7fefffff

08009cf0 <__ieee754_rem_pio2>:
 8009cf0:	b570      	push	{r4, r5, r6, lr}
 8009cf2:	eeb0 7b40 	vmov.f64	d7, d0
 8009cf6:	ee17 5a90 	vmov	r5, s15
 8009cfa:	4b99      	ldr	r3, [pc, #612]	; (8009f60 <__ieee754_rem_pio2+0x270>)
 8009cfc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009d00:	429e      	cmp	r6, r3
 8009d02:	b088      	sub	sp, #32
 8009d04:	4604      	mov	r4, r0
 8009d06:	dc07      	bgt.n	8009d18 <__ieee754_rem_pio2+0x28>
 8009d08:	2200      	movs	r2, #0
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	ed84 0b00 	vstr	d0, [r4]
 8009d10:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009d14:	2000      	movs	r0, #0
 8009d16:	e01b      	b.n	8009d50 <__ieee754_rem_pio2+0x60>
 8009d18:	4b92      	ldr	r3, [pc, #584]	; (8009f64 <__ieee754_rem_pio2+0x274>)
 8009d1a:	429e      	cmp	r6, r3
 8009d1c:	dc3b      	bgt.n	8009d96 <__ieee754_rem_pio2+0xa6>
 8009d1e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8009d22:	2d00      	cmp	r5, #0
 8009d24:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8009f20 <__ieee754_rem_pio2+0x230>
 8009d28:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8009d2c:	dd19      	ble.n	8009d62 <__ieee754_rem_pio2+0x72>
 8009d2e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8009d32:	429e      	cmp	r6, r3
 8009d34:	d00e      	beq.n	8009d54 <__ieee754_rem_pio2+0x64>
 8009d36:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8009f28 <__ieee754_rem_pio2+0x238>
 8009d3a:	ee37 5b46 	vsub.f64	d5, d7, d6
 8009d3e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8009d42:	ed84 5b00 	vstr	d5, [r4]
 8009d46:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009d4a:	ed84 7b02 	vstr	d7, [r4, #8]
 8009d4e:	2001      	movs	r0, #1
 8009d50:	b008      	add	sp, #32
 8009d52:	bd70      	pop	{r4, r5, r6, pc}
 8009d54:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8009f30 <__ieee754_rem_pio2+0x240>
 8009d58:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009d5c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8009f38 <__ieee754_rem_pio2+0x248>
 8009d60:	e7eb      	b.n	8009d3a <__ieee754_rem_pio2+0x4a>
 8009d62:	429e      	cmp	r6, r3
 8009d64:	ee30 7b06 	vadd.f64	d7, d0, d6
 8009d68:	d00e      	beq.n	8009d88 <__ieee754_rem_pio2+0x98>
 8009d6a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8009f28 <__ieee754_rem_pio2+0x238>
 8009d6e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8009d72:	ee37 7b45 	vsub.f64	d7, d7, d5
 8009d76:	ed84 5b00 	vstr	d5, [r4]
 8009d7a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009d7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d82:	ed84 7b02 	vstr	d7, [r4, #8]
 8009d86:	e7e3      	b.n	8009d50 <__ieee754_rem_pio2+0x60>
 8009d88:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8009f30 <__ieee754_rem_pio2+0x240>
 8009d8c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009d90:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8009f38 <__ieee754_rem_pio2+0x248>
 8009d94:	e7eb      	b.n	8009d6e <__ieee754_rem_pio2+0x7e>
 8009d96:	4b74      	ldr	r3, [pc, #464]	; (8009f68 <__ieee754_rem_pio2+0x278>)
 8009d98:	429e      	cmp	r6, r3
 8009d9a:	dc70      	bgt.n	8009e7e <__ieee754_rem_pio2+0x18e>
 8009d9c:	f000 fc48 	bl	800a630 <fabs>
 8009da0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8009da4:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8009f40 <__ieee754_rem_pio2+0x250>
 8009da8:	eea0 7b06 	vfma.f64	d7, d0, d6
 8009dac:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8009db0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8009db4:	ee17 0a90 	vmov	r0, s15
 8009db8:	eeb1 4b45 	vneg.f64	d4, d5
 8009dbc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8009f20 <__ieee754_rem_pio2+0x230>
 8009dc0:	eea5 0b47 	vfms.f64	d0, d5, d7
 8009dc4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8009f28 <__ieee754_rem_pio2+0x238>
 8009dc8:	281f      	cmp	r0, #31
 8009dca:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009dce:	ee30 6b47 	vsub.f64	d6, d0, d7
 8009dd2:	dc08      	bgt.n	8009de6 <__ieee754_rem_pio2+0xf6>
 8009dd4:	4b65      	ldr	r3, [pc, #404]	; (8009f6c <__ieee754_rem_pio2+0x27c>)
 8009dd6:	1e42      	subs	r2, r0, #1
 8009dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ddc:	42b3      	cmp	r3, r6
 8009dde:	d002      	beq.n	8009de6 <__ieee754_rem_pio2+0xf6>
 8009de0:	ed84 6b00 	vstr	d6, [r4]
 8009de4:	e026      	b.n	8009e34 <__ieee754_rem_pio2+0x144>
 8009de6:	ee16 3a90 	vmov	r3, s13
 8009dea:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8009dee:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8009df2:	2b10      	cmp	r3, #16
 8009df4:	ea4f 5226 	mov.w	r2, r6, asr #20
 8009df8:	ddf2      	ble.n	8009de0 <__ieee754_rem_pio2+0xf0>
 8009dfa:	eeb0 6b40 	vmov.f64	d6, d0
 8009dfe:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8009f30 <__ieee754_rem_pio2+0x240>
 8009e02:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8009f38 <__ieee754_rem_pio2+0x248>
 8009e06:	eea4 6b07 	vfma.f64	d6, d4, d7
 8009e0a:	ee30 0b46 	vsub.f64	d0, d0, d6
 8009e0e:	eea4 0b07 	vfma.f64	d0, d4, d7
 8009e12:	eeb0 7b40 	vmov.f64	d7, d0
 8009e16:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8009e1a:	ee36 3b47 	vsub.f64	d3, d6, d7
 8009e1e:	ee13 3a90 	vmov	r3, s7
 8009e22:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8009e26:	1ad3      	subs	r3, r2, r3
 8009e28:	2b31      	cmp	r3, #49	; 0x31
 8009e2a:	dc17      	bgt.n	8009e5c <__ieee754_rem_pio2+0x16c>
 8009e2c:	eeb0 0b46 	vmov.f64	d0, d6
 8009e30:	ed84 3b00 	vstr	d3, [r4]
 8009e34:	ed94 6b00 	vldr	d6, [r4]
 8009e38:	2d00      	cmp	r5, #0
 8009e3a:	ee30 0b46 	vsub.f64	d0, d0, d6
 8009e3e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8009e42:	ed84 0b02 	vstr	d0, [r4, #8]
 8009e46:	da83      	bge.n	8009d50 <__ieee754_rem_pio2+0x60>
 8009e48:	eeb1 6b46 	vneg.f64	d6, d6
 8009e4c:	eeb1 0b40 	vneg.f64	d0, d0
 8009e50:	ed84 6b00 	vstr	d6, [r4]
 8009e54:	ed84 0b02 	vstr	d0, [r4, #8]
 8009e58:	4240      	negs	r0, r0
 8009e5a:	e779      	b.n	8009d50 <__ieee754_rem_pio2+0x60>
 8009e5c:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8009f48 <__ieee754_rem_pio2+0x258>
 8009e60:	eeb0 0b46 	vmov.f64	d0, d6
 8009e64:	eea4 0b03 	vfma.f64	d0, d4, d3
 8009e68:	ee36 7b40 	vsub.f64	d7, d6, d0
 8009e6c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8009f50 <__ieee754_rem_pio2+0x260>
 8009e70:	eea4 7b03 	vfma.f64	d7, d4, d3
 8009e74:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8009e78:	ee30 6b47 	vsub.f64	d6, d0, d7
 8009e7c:	e7b0      	b.n	8009de0 <__ieee754_rem_pio2+0xf0>
 8009e7e:	4b3c      	ldr	r3, [pc, #240]	; (8009f70 <__ieee754_rem_pio2+0x280>)
 8009e80:	429e      	cmp	r6, r3
 8009e82:	dd06      	ble.n	8009e92 <__ieee754_rem_pio2+0x1a2>
 8009e84:	ee30 7b40 	vsub.f64	d7, d0, d0
 8009e88:	ed80 7b02 	vstr	d7, [r0, #8]
 8009e8c:	ed80 7b00 	vstr	d7, [r0]
 8009e90:	e740      	b.n	8009d14 <__ieee754_rem_pio2+0x24>
 8009e92:	1532      	asrs	r2, r6, #20
 8009e94:	ee10 0a10 	vmov	r0, s0
 8009e98:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8009e9c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8009ea0:	ec41 0b17 	vmov	d7, r0, r1
 8009ea4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8009ea8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8009f58 <__ieee754_rem_pio2+0x268>
 8009eac:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8009eb0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009eb4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009eb8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009ebc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8009ec0:	a902      	add	r1, sp, #8
 8009ec2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8009ec6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009eca:	ed8d 6b04 	vstr	d6, [sp, #16]
 8009ece:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009ed2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009ed6:	2603      	movs	r6, #3
 8009ed8:	4608      	mov	r0, r1
 8009eda:	ed91 7b04 	vldr	d7, [r1, #16]
 8009ede:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ee6:	4633      	mov	r3, r6
 8009ee8:	f1a1 0108 	sub.w	r1, r1, #8
 8009eec:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8009ef0:	d0f3      	beq.n	8009eda <__ieee754_rem_pio2+0x1ea>
 8009ef2:	4920      	ldr	r1, [pc, #128]	; (8009f74 <__ieee754_rem_pio2+0x284>)
 8009ef4:	9101      	str	r1, [sp, #4]
 8009ef6:	2102      	movs	r1, #2
 8009ef8:	9100      	str	r1, [sp, #0]
 8009efa:	4621      	mov	r1, r4
 8009efc:	f000 f8a8 	bl	800a050 <__kernel_rem_pio2>
 8009f00:	2d00      	cmp	r5, #0
 8009f02:	f6bf af25 	bge.w	8009d50 <__ieee754_rem_pio2+0x60>
 8009f06:	ed94 7b00 	vldr	d7, [r4]
 8009f0a:	eeb1 7b47 	vneg.f64	d7, d7
 8009f0e:	ed84 7b00 	vstr	d7, [r4]
 8009f12:	ed94 7b02 	vldr	d7, [r4, #8]
 8009f16:	eeb1 7b47 	vneg.f64	d7, d7
 8009f1a:	ed84 7b02 	vstr	d7, [r4, #8]
 8009f1e:	e79b      	b.n	8009e58 <__ieee754_rem_pio2+0x168>
 8009f20:	54400000 	.word	0x54400000
 8009f24:	3ff921fb 	.word	0x3ff921fb
 8009f28:	1a626331 	.word	0x1a626331
 8009f2c:	3dd0b461 	.word	0x3dd0b461
 8009f30:	1a600000 	.word	0x1a600000
 8009f34:	3dd0b461 	.word	0x3dd0b461
 8009f38:	2e037073 	.word	0x2e037073
 8009f3c:	3ba3198a 	.word	0x3ba3198a
 8009f40:	6dc9c883 	.word	0x6dc9c883
 8009f44:	3fe45f30 	.word	0x3fe45f30
 8009f48:	2e000000 	.word	0x2e000000
 8009f4c:	3ba3198a 	.word	0x3ba3198a
 8009f50:	252049c1 	.word	0x252049c1
 8009f54:	397b839a 	.word	0x397b839a
 8009f58:	00000000 	.word	0x00000000
 8009f5c:	41700000 	.word	0x41700000
 8009f60:	3fe921fb 	.word	0x3fe921fb
 8009f64:	4002d97b 	.word	0x4002d97b
 8009f68:	413921fb 	.word	0x413921fb
 8009f6c:	0800aec4 	.word	0x0800aec4
 8009f70:	7fefffff 	.word	0x7fefffff
 8009f74:	0800af44 	.word	0x0800af44

08009f78 <__kernel_cos>:
 8009f78:	ee10 1a90 	vmov	r1, s1
 8009f7c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8009f80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009f84:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8009f88:	da05      	bge.n	8009f96 <__kernel_cos+0x1e>
 8009f8a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8009f8e:	ee17 3a90 	vmov	r3, s15
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d03d      	beq.n	800a012 <__kernel_cos+0x9a>
 8009f96:	ee20 3b00 	vmul.f64	d3, d0, d0
 8009f9a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800a018 <__kernel_cos+0xa0>
 8009f9e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800a020 <__kernel_cos+0xa8>
 8009fa2:	eea3 6b07 	vfma.f64	d6, d3, d7
 8009fa6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800a028 <__kernel_cos+0xb0>
 8009faa:	eea6 7b03 	vfma.f64	d7, d6, d3
 8009fae:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800a030 <__kernel_cos+0xb8>
 8009fb2:	eea7 6b03 	vfma.f64	d6, d7, d3
 8009fb6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800a038 <__kernel_cos+0xc0>
 8009fba:	4b23      	ldr	r3, [pc, #140]	; (800a048 <__kernel_cos+0xd0>)
 8009fbc:	eea6 7b03 	vfma.f64	d7, d6, d3
 8009fc0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800a040 <__kernel_cos+0xc8>
 8009fc4:	4299      	cmp	r1, r3
 8009fc6:	eea7 6b03 	vfma.f64	d6, d7, d3
 8009fca:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8009fce:	ee26 5b03 	vmul.f64	d5, d6, d3
 8009fd2:	ee23 7b07 	vmul.f64	d7, d3, d7
 8009fd6:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8009fda:	eea3 6b05 	vfma.f64	d6, d3, d5
 8009fde:	dc04      	bgt.n	8009fea <__kernel_cos+0x72>
 8009fe0:	ee37 6b46 	vsub.f64	d6, d7, d6
 8009fe4:	ee34 0b46 	vsub.f64	d0, d4, d6
 8009fe8:	4770      	bx	lr
 8009fea:	4b18      	ldr	r3, [pc, #96]	; (800a04c <__kernel_cos+0xd4>)
 8009fec:	4299      	cmp	r1, r3
 8009fee:	dc0d      	bgt.n	800a00c <__kernel_cos+0x94>
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8009ff6:	ec43 2b15 	vmov	d5, r2, r3
 8009ffa:	ee34 0b45 	vsub.f64	d0, d4, d5
 8009ffe:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a002:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a006:	ee30 0b47 	vsub.f64	d0, d0, d7
 800a00a:	4770      	bx	lr
 800a00c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800a010:	e7f3      	b.n	8009ffa <__kernel_cos+0x82>
 800a012:	eeb0 0b44 	vmov.f64	d0, d4
 800a016:	4770      	bx	lr
 800a018:	be8838d4 	.word	0xbe8838d4
 800a01c:	bda8fae9 	.word	0xbda8fae9
 800a020:	bdb4b1c4 	.word	0xbdb4b1c4
 800a024:	3e21ee9e 	.word	0x3e21ee9e
 800a028:	809c52ad 	.word	0x809c52ad
 800a02c:	be927e4f 	.word	0xbe927e4f
 800a030:	19cb1590 	.word	0x19cb1590
 800a034:	3efa01a0 	.word	0x3efa01a0
 800a038:	16c15177 	.word	0x16c15177
 800a03c:	bf56c16c 	.word	0xbf56c16c
 800a040:	5555554c 	.word	0x5555554c
 800a044:	3fa55555 	.word	0x3fa55555
 800a048:	3fd33332 	.word	0x3fd33332
 800a04c:	3fe90000 	.word	0x3fe90000

0800a050 <__kernel_rem_pio2>:
 800a050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a054:	ed2d 8b06 	vpush	{d8-d10}
 800a058:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800a05c:	460f      	mov	r7, r1
 800a05e:	9002      	str	r0, [sp, #8]
 800a060:	49c5      	ldr	r1, [pc, #788]	; (800a378 <__kernel_rem_pio2+0x328>)
 800a062:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800a064:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 800a068:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800a06c:	9301      	str	r3, [sp, #4]
 800a06e:	f112 0f14 	cmn.w	r2, #20
 800a072:	bfa8      	it	ge
 800a074:	2018      	movge	r0, #24
 800a076:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 800a07a:	bfb8      	it	lt
 800a07c:	2000      	movlt	r0, #0
 800a07e:	f06f 0417 	mvn.w	r4, #23
 800a082:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 800a360 <__kernel_rem_pio2+0x310>
 800a086:	bfa4      	itt	ge
 800a088:	f1a2 0a03 	subge.w	sl, r2, #3
 800a08c:	fb9a f0f0 	sdivge	r0, sl, r0
 800a090:	fb00 4404 	mla	r4, r0, r4, r4
 800a094:	1a46      	subs	r6, r0, r1
 800a096:	4414      	add	r4, r2
 800a098:	eb09 0c01 	add.w	ip, r9, r1
 800a09c:	ad1a      	add	r5, sp, #104	; 0x68
 800a09e:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	4562      	cmp	r2, ip
 800a0a6:	dd10      	ble.n	800a0ca <__kernel_rem_pio2+0x7a>
 800a0a8:	9a01      	ldr	r2, [sp, #4]
 800a0aa:	ab1a      	add	r3, sp, #104	; 0x68
 800a0ac:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800a0b0:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 800a0b4:	f04f 0c00 	mov.w	ip, #0
 800a0b8:	45cc      	cmp	ip, r9
 800a0ba:	dc26      	bgt.n	800a10a <__kernel_rem_pio2+0xba>
 800a0bc:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 800a360 <__kernel_rem_pio2+0x310>
 800a0c0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a0c4:	4616      	mov	r6, r2
 800a0c6:	2500      	movs	r5, #0
 800a0c8:	e015      	b.n	800a0f6 <__kernel_rem_pio2+0xa6>
 800a0ca:	42d6      	cmn	r6, r2
 800a0cc:	d409      	bmi.n	800a0e2 <__kernel_rem_pio2+0x92>
 800a0ce:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 800a0d2:	ee07 3a90 	vmov	s15, r3
 800a0d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a0da:	eca5 7b02 	vstmia	r5!, {d7}
 800a0de:	3201      	adds	r2, #1
 800a0e0:	e7e0      	b.n	800a0a4 <__kernel_rem_pio2+0x54>
 800a0e2:	eeb0 7b46 	vmov.f64	d7, d6
 800a0e6:	e7f8      	b.n	800a0da <__kernel_rem_pio2+0x8a>
 800a0e8:	ecb8 5b02 	vldmia	r8!, {d5}
 800a0ec:	ed96 6b00 	vldr	d6, [r6]
 800a0f0:	3501      	adds	r5, #1
 800a0f2:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a0f6:	428d      	cmp	r5, r1
 800a0f8:	f1a6 0608 	sub.w	r6, r6, #8
 800a0fc:	ddf4      	ble.n	800a0e8 <__kernel_rem_pio2+0x98>
 800a0fe:	ecaa 7b02 	vstmia	sl!, {d7}
 800a102:	f10c 0c01 	add.w	ip, ip, #1
 800a106:	3208      	adds	r2, #8
 800a108:	e7d6      	b.n	800a0b8 <__kernel_rem_pio2+0x68>
 800a10a:	ab06      	add	r3, sp, #24
 800a10c:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800a368 <__kernel_rem_pio2+0x318>
 800a110:	ed9f ab97 	vldr	d10, [pc, #604]	; 800a370 <__kernel_rem_pio2+0x320>
 800a114:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800a118:	9303      	str	r3, [sp, #12]
 800a11a:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 800a11e:	464d      	mov	r5, r9
 800a120:	00eb      	lsls	r3, r5, #3
 800a122:	9304      	str	r3, [sp, #16]
 800a124:	ab92      	add	r3, sp, #584	; 0x248
 800a126:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800a12a:	f10d 0b18 	add.w	fp, sp, #24
 800a12e:	ab6a      	add	r3, sp, #424	; 0x1a8
 800a130:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800a134:	465e      	mov	r6, fp
 800a136:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800a13a:	4628      	mov	r0, r5
 800a13c:	2800      	cmp	r0, #0
 800a13e:	f1a2 0208 	sub.w	r2, r2, #8
 800a142:	dc4c      	bgt.n	800a1de <__kernel_rem_pio2+0x18e>
 800a144:	4620      	mov	r0, r4
 800a146:	9105      	str	r1, [sp, #20]
 800a148:	f000 faf2 	bl	800a730 <scalbn>
 800a14c:	eeb0 8b40 	vmov.f64	d8, d0
 800a150:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800a154:	ee28 0b00 	vmul.f64	d0, d8, d0
 800a158:	f000 fa76 	bl	800a648 <floor>
 800a15c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800a160:	eea0 8b47 	vfms.f64	d8, d0, d7
 800a164:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800a168:	2c00      	cmp	r4, #0
 800a16a:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800a16e:	ee17 8a90 	vmov	r8, s15
 800a172:	ee38 8b40 	vsub.f64	d8, d8, d0
 800a176:	9905      	ldr	r1, [sp, #20]
 800a178:	dd43      	ble.n	800a202 <__kernel_rem_pio2+0x1b2>
 800a17a:	1e68      	subs	r0, r5, #1
 800a17c:	ab06      	add	r3, sp, #24
 800a17e:	f1c4 0c18 	rsb	ip, r4, #24
 800a182:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800a186:	fa46 f20c 	asr.w	r2, r6, ip
 800a18a:	4490      	add	r8, r2
 800a18c:	fa02 f20c 	lsl.w	r2, r2, ip
 800a190:	1ab6      	subs	r6, r6, r2
 800a192:	f1c4 0217 	rsb	r2, r4, #23
 800a196:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800a19a:	4116      	asrs	r6, r2
 800a19c:	2e00      	cmp	r6, #0
 800a19e:	dd3f      	ble.n	800a220 <__kernel_rem_pio2+0x1d0>
 800a1a0:	f04f 0c00 	mov.w	ip, #0
 800a1a4:	f108 0801 	add.w	r8, r8, #1
 800a1a8:	4660      	mov	r0, ip
 800a1aa:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800a1ae:	4565      	cmp	r5, ip
 800a1b0:	dc6e      	bgt.n	800a290 <__kernel_rem_pio2+0x240>
 800a1b2:	2c00      	cmp	r4, #0
 800a1b4:	dd04      	ble.n	800a1c0 <__kernel_rem_pio2+0x170>
 800a1b6:	2c01      	cmp	r4, #1
 800a1b8:	d07f      	beq.n	800a2ba <__kernel_rem_pio2+0x26a>
 800a1ba:	2c02      	cmp	r4, #2
 800a1bc:	f000 8087 	beq.w	800a2ce <__kernel_rem_pio2+0x27e>
 800a1c0:	2e02      	cmp	r6, #2
 800a1c2:	d12d      	bne.n	800a220 <__kernel_rem_pio2+0x1d0>
 800a1c4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a1c8:	ee30 8b48 	vsub.f64	d8, d0, d8
 800a1cc:	b340      	cbz	r0, 800a220 <__kernel_rem_pio2+0x1d0>
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	9105      	str	r1, [sp, #20]
 800a1d2:	f000 faad 	bl	800a730 <scalbn>
 800a1d6:	9905      	ldr	r1, [sp, #20]
 800a1d8:	ee38 8b40 	vsub.f64	d8, d8, d0
 800a1dc:	e020      	b.n	800a220 <__kernel_rem_pio2+0x1d0>
 800a1de:	ee20 7b09 	vmul.f64	d7, d0, d9
 800a1e2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800a1e6:	3801      	subs	r0, #1
 800a1e8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800a1ec:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800a1f0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800a1f4:	eca6 0a01 	vstmia	r6!, {s0}
 800a1f8:	ed92 0b00 	vldr	d0, [r2]
 800a1fc:	ee37 0b00 	vadd.f64	d0, d7, d0
 800a200:	e79c      	b.n	800a13c <__kernel_rem_pio2+0xec>
 800a202:	d105      	bne.n	800a210 <__kernel_rem_pio2+0x1c0>
 800a204:	1e6a      	subs	r2, r5, #1
 800a206:	ab06      	add	r3, sp, #24
 800a208:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800a20c:	15f6      	asrs	r6, r6, #23
 800a20e:	e7c5      	b.n	800a19c <__kernel_rem_pio2+0x14c>
 800a210:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800a214:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a21c:	da36      	bge.n	800a28c <__kernel_rem_pio2+0x23c>
 800a21e:	2600      	movs	r6, #0
 800a220:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a228:	f040 80aa 	bne.w	800a380 <__kernel_rem_pio2+0x330>
 800a22c:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800a230:	4658      	mov	r0, fp
 800a232:	2200      	movs	r2, #0
 800a234:	4548      	cmp	r0, r9
 800a236:	da52      	bge.n	800a2de <__kernel_rem_pio2+0x28e>
 800a238:	2a00      	cmp	r2, #0
 800a23a:	f000 8081 	beq.w	800a340 <__kernel_rem_pio2+0x2f0>
 800a23e:	ab06      	add	r3, sp, #24
 800a240:	3c18      	subs	r4, #24
 800a242:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800a246:	2b00      	cmp	r3, #0
 800a248:	f000 8087 	beq.w	800a35a <__kernel_rem_pio2+0x30a>
 800a24c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a250:	4620      	mov	r0, r4
 800a252:	f000 fa6d 	bl	800a730 <scalbn>
 800a256:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a25a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 800a368 <__kernel_rem_pio2+0x318>
 800a25e:	a96a      	add	r1, sp, #424	; 0x1a8
 800a260:	f103 0208 	add.w	r2, r3, #8
 800a264:	1888      	adds	r0, r1, r2
 800a266:	4659      	mov	r1, fp
 800a268:	2900      	cmp	r1, #0
 800a26a:	f280 80b7 	bge.w	800a3dc <__kernel_rem_pio2+0x38c>
 800a26e:	4659      	mov	r1, fp
 800a270:	2900      	cmp	r1, #0
 800a272:	f2c0 80d5 	blt.w	800a420 <__kernel_rem_pio2+0x3d0>
 800a276:	a86a      	add	r0, sp, #424	; 0x1a8
 800a278:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 800a27c:	ed9f 7b38 	vldr	d7, [pc, #224]	; 800a360 <__kernel_rem_pio2+0x310>
 800a280:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800a37c <__kernel_rem_pio2+0x32c>
 800a284:	2400      	movs	r4, #0
 800a286:	ebab 0001 	sub.w	r0, fp, r1
 800a28a:	e0be      	b.n	800a40a <__kernel_rem_pio2+0x3ba>
 800a28c:	2602      	movs	r6, #2
 800a28e:	e787      	b.n	800a1a0 <__kernel_rem_pio2+0x150>
 800a290:	f8db 2000 	ldr.w	r2, [fp]
 800a294:	b958      	cbnz	r0, 800a2ae <__kernel_rem_pio2+0x25e>
 800a296:	b122      	cbz	r2, 800a2a2 <__kernel_rem_pio2+0x252>
 800a298:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800a29c:	f8cb 2000 	str.w	r2, [fp]
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	f10c 0c01 	add.w	ip, ip, #1
 800a2a6:	f10b 0b04 	add.w	fp, fp, #4
 800a2aa:	4610      	mov	r0, r2
 800a2ac:	e77f      	b.n	800a1ae <__kernel_rem_pio2+0x15e>
 800a2ae:	ebae 0202 	sub.w	r2, lr, r2
 800a2b2:	f8cb 2000 	str.w	r2, [fp]
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	e7f3      	b.n	800a2a2 <__kernel_rem_pio2+0x252>
 800a2ba:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800a2be:	ab06      	add	r3, sp, #24
 800a2c0:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800a2c4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800a2c8:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800a2cc:	e778      	b.n	800a1c0 <__kernel_rem_pio2+0x170>
 800a2ce:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800a2d2:	ab06      	add	r3, sp, #24
 800a2d4:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800a2d8:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800a2dc:	e7f4      	b.n	800a2c8 <__kernel_rem_pio2+0x278>
 800a2de:	ab06      	add	r3, sp, #24
 800a2e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a2e4:	3801      	subs	r0, #1
 800a2e6:	431a      	orrs	r2, r3
 800a2e8:	e7a4      	b.n	800a234 <__kernel_rem_pio2+0x1e4>
 800a2ea:	f10c 0c01 	add.w	ip, ip, #1
 800a2ee:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800a2f2:	2800      	cmp	r0, #0
 800a2f4:	d0f9      	beq.n	800a2ea <__kernel_rem_pio2+0x29a>
 800a2f6:	9b04      	ldr	r3, [sp, #16]
 800a2f8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800a2fc:	eb0d 0203 	add.w	r2, sp, r3
 800a300:	9b01      	ldr	r3, [sp, #4]
 800a302:	18e8      	adds	r0, r5, r3
 800a304:	ab1a      	add	r3, sp, #104	; 0x68
 800a306:	1c6e      	adds	r6, r5, #1
 800a308:	3a98      	subs	r2, #152	; 0x98
 800a30a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800a30e:	4465      	add	r5, ip
 800a310:	42b5      	cmp	r5, r6
 800a312:	f6ff af05 	blt.w	800a120 <__kernel_rem_pio2+0xd0>
 800a316:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 800a31a:	f8dd e008 	ldr.w	lr, [sp, #8]
 800a31e:	ee07 3a90 	vmov	s15, r3
 800a322:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a326:	f04f 0c00 	mov.w	ip, #0
 800a32a:	eca0 7b02 	vstmia	r0!, {d7}
 800a32e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800a360 <__kernel_rem_pio2+0x310>
 800a332:	4680      	mov	r8, r0
 800a334:	458c      	cmp	ip, r1
 800a336:	dd07      	ble.n	800a348 <__kernel_rem_pio2+0x2f8>
 800a338:	eca2 7b02 	vstmia	r2!, {d7}
 800a33c:	3601      	adds	r6, #1
 800a33e:	e7e7      	b.n	800a310 <__kernel_rem_pio2+0x2c0>
 800a340:	9a03      	ldr	r2, [sp, #12]
 800a342:	f04f 0c01 	mov.w	ip, #1
 800a346:	e7d2      	b.n	800a2ee <__kernel_rem_pio2+0x29e>
 800a348:	ecbe 5b02 	vldmia	lr!, {d5}
 800a34c:	ed38 6b02 	vldmdb	r8!, {d6}
 800a350:	f10c 0c01 	add.w	ip, ip, #1
 800a354:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a358:	e7ec      	b.n	800a334 <__kernel_rem_pio2+0x2e4>
 800a35a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a35e:	e76e      	b.n	800a23e <__kernel_rem_pio2+0x1ee>
	...
 800a36c:	3e700000 	.word	0x3e700000
 800a370:	00000000 	.word	0x00000000
 800a374:	41700000 	.word	0x41700000
 800a378:	0800b090 	.word	0x0800b090
 800a37c:	0800b050 	.word	0x0800b050
 800a380:	4260      	negs	r0, r4
 800a382:	eeb0 0b48 	vmov.f64	d0, d8
 800a386:	f000 f9d3 	bl	800a730 <scalbn>
 800a38a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800a568 <__kernel_rem_pio2+0x518>
 800a38e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800a392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a396:	db18      	blt.n	800a3ca <__kernel_rem_pio2+0x37a>
 800a398:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800a570 <__kernel_rem_pio2+0x520>
 800a39c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800a3a0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800a3a4:	aa06      	add	r2, sp, #24
 800a3a6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800a3aa:	eea5 0b46 	vfms.f64	d0, d5, d6
 800a3ae:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800a3b2:	f105 0b01 	add.w	fp, r5, #1
 800a3b6:	ee10 3a10 	vmov	r3, s0
 800a3ba:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800a3be:	ee17 3a10 	vmov	r3, s14
 800a3c2:	3418      	adds	r4, #24
 800a3c4:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800a3c8:	e740      	b.n	800a24c <__kernel_rem_pio2+0x1fc>
 800a3ca:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800a3ce:	aa06      	add	r2, sp, #24
 800a3d0:	ee10 3a10 	vmov	r3, s0
 800a3d4:	46ab      	mov	fp, r5
 800a3d6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800a3da:	e737      	b.n	800a24c <__kernel_rem_pio2+0x1fc>
 800a3dc:	ac06      	add	r4, sp, #24
 800a3de:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 800a3e2:	9401      	str	r4, [sp, #4]
 800a3e4:	ee07 4a90 	vmov	s15, r4
 800a3e8:	3901      	subs	r1, #1
 800a3ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a3ee:	ee27 7b00 	vmul.f64	d7, d7, d0
 800a3f2:	ee20 0b06 	vmul.f64	d0, d0, d6
 800a3f6:	ed20 7b02 	vstmdb	r0!, {d7}
 800a3fa:	e735      	b.n	800a268 <__kernel_rem_pio2+0x218>
 800a3fc:	ecbc 5b02 	vldmia	ip!, {d5}
 800a400:	ecb5 6b02 	vldmia	r5!, {d6}
 800a404:	3401      	adds	r4, #1
 800a406:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a40a:	454c      	cmp	r4, r9
 800a40c:	dc01      	bgt.n	800a412 <__kernel_rem_pio2+0x3c2>
 800a40e:	4284      	cmp	r4, r0
 800a410:	ddf4      	ble.n	800a3fc <__kernel_rem_pio2+0x3ac>
 800a412:	ac42      	add	r4, sp, #264	; 0x108
 800a414:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800a418:	ed80 7b00 	vstr	d7, [r0]
 800a41c:	3901      	subs	r1, #1
 800a41e:	e727      	b.n	800a270 <__kernel_rem_pio2+0x220>
 800a420:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800a422:	2902      	cmp	r1, #2
 800a424:	dc0a      	bgt.n	800a43c <__kernel_rem_pio2+0x3ec>
 800a426:	2900      	cmp	r1, #0
 800a428:	dc2c      	bgt.n	800a484 <__kernel_rem_pio2+0x434>
 800a42a:	d045      	beq.n	800a4b8 <__kernel_rem_pio2+0x468>
 800a42c:	f008 0007 	and.w	r0, r8, #7
 800a430:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800a434:	ecbd 8b06 	vpop	{d8-d10}
 800a438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a43c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800a43e:	2a03      	cmp	r2, #3
 800a440:	d1f4      	bne.n	800a42c <__kernel_rem_pio2+0x3dc>
 800a442:	aa42      	add	r2, sp, #264	; 0x108
 800a444:	4413      	add	r3, r2
 800a446:	461a      	mov	r2, r3
 800a448:	4619      	mov	r1, r3
 800a44a:	4658      	mov	r0, fp
 800a44c:	2800      	cmp	r0, #0
 800a44e:	f1a1 0108 	sub.w	r1, r1, #8
 800a452:	dc54      	bgt.n	800a4fe <__kernel_rem_pio2+0x4ae>
 800a454:	4659      	mov	r1, fp
 800a456:	2901      	cmp	r1, #1
 800a458:	f1a2 0208 	sub.w	r2, r2, #8
 800a45c:	dc5f      	bgt.n	800a51e <__kernel_rem_pio2+0x4ce>
 800a45e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800a578 <__kernel_rem_pio2+0x528>
 800a462:	3308      	adds	r3, #8
 800a464:	f1bb 0f01 	cmp.w	fp, #1
 800a468:	dc69      	bgt.n	800a53e <__kernel_rem_pio2+0x4ee>
 800a46a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800a46e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800a472:	2e00      	cmp	r6, #0
 800a474:	d16a      	bne.n	800a54c <__kernel_rem_pio2+0x4fc>
 800a476:	ed87 5b00 	vstr	d5, [r7]
 800a47a:	ed87 6b02 	vstr	d6, [r7, #8]
 800a47e:	ed87 7b04 	vstr	d7, [r7, #16]
 800a482:	e7d3      	b.n	800a42c <__kernel_rem_pio2+0x3dc>
 800a484:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800a578 <__kernel_rem_pio2+0x528>
 800a488:	ab42      	add	r3, sp, #264	; 0x108
 800a48a:	441a      	add	r2, r3
 800a48c:	465b      	mov	r3, fp
 800a48e:	2b00      	cmp	r3, #0
 800a490:	da26      	bge.n	800a4e0 <__kernel_rem_pio2+0x490>
 800a492:	b35e      	cbz	r6, 800a4ec <__kernel_rem_pio2+0x49c>
 800a494:	eeb1 7b46 	vneg.f64	d7, d6
 800a498:	ed87 7b00 	vstr	d7, [r7]
 800a49c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800a4a0:	aa44      	add	r2, sp, #272	; 0x110
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a4a8:	459b      	cmp	fp, r3
 800a4aa:	da22      	bge.n	800a4f2 <__kernel_rem_pio2+0x4a2>
 800a4ac:	b10e      	cbz	r6, 800a4b2 <__kernel_rem_pio2+0x462>
 800a4ae:	eeb1 7b47 	vneg.f64	d7, d7
 800a4b2:	ed87 7b02 	vstr	d7, [r7, #8]
 800a4b6:	e7b9      	b.n	800a42c <__kernel_rem_pio2+0x3dc>
 800a4b8:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800a578 <__kernel_rem_pio2+0x528>
 800a4bc:	ab42      	add	r3, sp, #264	; 0x108
 800a4be:	441a      	add	r2, r3
 800a4c0:	f1bb 0f00 	cmp.w	fp, #0
 800a4c4:	da05      	bge.n	800a4d2 <__kernel_rem_pio2+0x482>
 800a4c6:	b10e      	cbz	r6, 800a4cc <__kernel_rem_pio2+0x47c>
 800a4c8:	eeb1 7b47 	vneg.f64	d7, d7
 800a4cc:	ed87 7b00 	vstr	d7, [r7]
 800a4d0:	e7ac      	b.n	800a42c <__kernel_rem_pio2+0x3dc>
 800a4d2:	ed32 6b02 	vldmdb	r2!, {d6}
 800a4d6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a4da:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a4de:	e7ef      	b.n	800a4c0 <__kernel_rem_pio2+0x470>
 800a4e0:	ed32 7b02 	vldmdb	r2!, {d7}
 800a4e4:	3b01      	subs	r3, #1
 800a4e6:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a4ea:	e7d0      	b.n	800a48e <__kernel_rem_pio2+0x43e>
 800a4ec:	eeb0 7b46 	vmov.f64	d7, d6
 800a4f0:	e7d2      	b.n	800a498 <__kernel_rem_pio2+0x448>
 800a4f2:	ecb2 6b02 	vldmia	r2!, {d6}
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a4fc:	e7d4      	b.n	800a4a8 <__kernel_rem_pio2+0x458>
 800a4fe:	ed91 7b00 	vldr	d7, [r1]
 800a502:	ed91 5b02 	vldr	d5, [r1, #8]
 800a506:	3801      	subs	r0, #1
 800a508:	ee37 6b05 	vadd.f64	d6, d7, d5
 800a50c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a510:	ed81 6b00 	vstr	d6, [r1]
 800a514:	ee37 7b05 	vadd.f64	d7, d7, d5
 800a518:	ed81 7b02 	vstr	d7, [r1, #8]
 800a51c:	e796      	b.n	800a44c <__kernel_rem_pio2+0x3fc>
 800a51e:	ed92 7b00 	vldr	d7, [r2]
 800a522:	ed92 5b02 	vldr	d5, [r2, #8]
 800a526:	3901      	subs	r1, #1
 800a528:	ee37 6b05 	vadd.f64	d6, d7, d5
 800a52c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a530:	ed82 6b00 	vstr	d6, [r2]
 800a534:	ee37 7b05 	vadd.f64	d7, d7, d5
 800a538:	ed82 7b02 	vstr	d7, [r2, #8]
 800a53c:	e78b      	b.n	800a456 <__kernel_rem_pio2+0x406>
 800a53e:	ed33 6b02 	vldmdb	r3!, {d6}
 800a542:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a546:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a54a:	e78b      	b.n	800a464 <__kernel_rem_pio2+0x414>
 800a54c:	eeb1 5b45 	vneg.f64	d5, d5
 800a550:	eeb1 6b46 	vneg.f64	d6, d6
 800a554:	ed87 5b00 	vstr	d5, [r7]
 800a558:	eeb1 7b47 	vneg.f64	d7, d7
 800a55c:	ed87 6b02 	vstr	d6, [r7, #8]
 800a560:	e78d      	b.n	800a47e <__kernel_rem_pio2+0x42e>
 800a562:	bf00      	nop
 800a564:	f3af 8000 	nop.w
 800a568:	00000000 	.word	0x00000000
 800a56c:	41700000 	.word	0x41700000
 800a570:	00000000 	.word	0x00000000
 800a574:	3e700000 	.word	0x3e700000
	...

0800a580 <__kernel_sin>:
 800a580:	ee10 3a90 	vmov	r3, s1
 800a584:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a588:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a58c:	da04      	bge.n	800a598 <__kernel_sin+0x18>
 800a58e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800a592:	ee17 3a90 	vmov	r3, s15
 800a596:	b35b      	cbz	r3, 800a5f0 <__kernel_sin+0x70>
 800a598:	ee20 6b00 	vmul.f64	d6, d0, d0
 800a59c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800a5a0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800a5f8 <__kernel_sin+0x78>
 800a5a4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800a600 <__kernel_sin+0x80>
 800a5a8:	eea6 4b07 	vfma.f64	d4, d6, d7
 800a5ac:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800a608 <__kernel_sin+0x88>
 800a5b0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a5b4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800a610 <__kernel_sin+0x90>
 800a5b8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800a5bc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800a618 <__kernel_sin+0x98>
 800a5c0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a5c4:	b930      	cbnz	r0, 800a5d4 <__kernel_sin+0x54>
 800a5c6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800a620 <__kernel_sin+0xa0>
 800a5ca:	eea6 4b07 	vfma.f64	d4, d6, d7
 800a5ce:	eea4 0b05 	vfma.f64	d0, d4, d5
 800a5d2:	4770      	bx	lr
 800a5d4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800a5d8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800a5dc:	eea1 7b04 	vfma.f64	d7, d1, d4
 800a5e0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800a5e4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800a628 <__kernel_sin+0xa8>
 800a5e8:	eea5 1b07 	vfma.f64	d1, d5, d7
 800a5ec:	ee30 0b41 	vsub.f64	d0, d0, d1
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	f3af 8000 	nop.w
 800a5f8:	5acfd57c 	.word	0x5acfd57c
 800a5fc:	3de5d93a 	.word	0x3de5d93a
 800a600:	8a2b9ceb 	.word	0x8a2b9ceb
 800a604:	be5ae5e6 	.word	0xbe5ae5e6
 800a608:	57b1fe7d 	.word	0x57b1fe7d
 800a60c:	3ec71de3 	.word	0x3ec71de3
 800a610:	19c161d5 	.word	0x19c161d5
 800a614:	bf2a01a0 	.word	0xbf2a01a0
 800a618:	1110f8a6 	.word	0x1110f8a6
 800a61c:	3f811111 	.word	0x3f811111
 800a620:	55555549 	.word	0x55555549
 800a624:	bfc55555 	.word	0xbfc55555
 800a628:	55555549 	.word	0x55555549
 800a62c:	3fc55555 	.word	0x3fc55555

0800a630 <fabs>:
 800a630:	ec51 0b10 	vmov	r0, r1, d0
 800a634:	ee10 2a10 	vmov	r2, s0
 800a638:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a63c:	ec43 2b10 	vmov	d0, r2, r3
 800a640:	4770      	bx	lr
 800a642:	0000      	movs	r0, r0
 800a644:	0000      	movs	r0, r0
	...

0800a648 <floor>:
 800a648:	ee10 1a90 	vmov	r1, s1
 800a64c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a650:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800a654:	2b13      	cmp	r3, #19
 800a656:	b530      	push	{r4, r5, lr}
 800a658:	ee10 0a10 	vmov	r0, s0
 800a65c:	ee10 5a10 	vmov	r5, s0
 800a660:	dc31      	bgt.n	800a6c6 <floor+0x7e>
 800a662:	2b00      	cmp	r3, #0
 800a664:	da15      	bge.n	800a692 <floor+0x4a>
 800a666:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800a720 <floor+0xd8>
 800a66a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a66e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a676:	dd07      	ble.n	800a688 <floor+0x40>
 800a678:	2900      	cmp	r1, #0
 800a67a:	da4e      	bge.n	800a71a <floor+0xd2>
 800a67c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a680:	4318      	orrs	r0, r3
 800a682:	d001      	beq.n	800a688 <floor+0x40>
 800a684:	4928      	ldr	r1, [pc, #160]	; (800a728 <floor+0xe0>)
 800a686:	2000      	movs	r0, #0
 800a688:	460b      	mov	r3, r1
 800a68a:	4602      	mov	r2, r0
 800a68c:	ec43 2b10 	vmov	d0, r2, r3
 800a690:	e020      	b.n	800a6d4 <floor+0x8c>
 800a692:	4a26      	ldr	r2, [pc, #152]	; (800a72c <floor+0xe4>)
 800a694:	411a      	asrs	r2, r3
 800a696:	ea01 0402 	and.w	r4, r1, r2
 800a69a:	4304      	orrs	r4, r0
 800a69c:	d01a      	beq.n	800a6d4 <floor+0x8c>
 800a69e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800a720 <floor+0xd8>
 800a6a2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a6a6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a6aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ae:	ddeb      	ble.n	800a688 <floor+0x40>
 800a6b0:	2900      	cmp	r1, #0
 800a6b2:	bfbe      	ittt	lt
 800a6b4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800a6b8:	fa40 f303 	asrlt.w	r3, r0, r3
 800a6bc:	18c9      	addlt	r1, r1, r3
 800a6be:	ea21 0102 	bic.w	r1, r1, r2
 800a6c2:	2000      	movs	r0, #0
 800a6c4:	e7e0      	b.n	800a688 <floor+0x40>
 800a6c6:	2b33      	cmp	r3, #51	; 0x33
 800a6c8:	dd05      	ble.n	800a6d6 <floor+0x8e>
 800a6ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6ce:	d101      	bne.n	800a6d4 <floor+0x8c>
 800a6d0:	ee30 0b00 	vadd.f64	d0, d0, d0
 800a6d4:	bd30      	pop	{r4, r5, pc}
 800a6d6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800a6da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6de:	40e2      	lsrs	r2, r4
 800a6e0:	4202      	tst	r2, r0
 800a6e2:	d0f7      	beq.n	800a6d4 <floor+0x8c>
 800a6e4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800a720 <floor+0xd8>
 800a6e8:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a6ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a6f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6f4:	ddc8      	ble.n	800a688 <floor+0x40>
 800a6f6:	2900      	cmp	r1, #0
 800a6f8:	da02      	bge.n	800a700 <floor+0xb8>
 800a6fa:	2b14      	cmp	r3, #20
 800a6fc:	d103      	bne.n	800a706 <floor+0xbe>
 800a6fe:	3101      	adds	r1, #1
 800a700:	ea20 0002 	bic.w	r0, r0, r2
 800a704:	e7c0      	b.n	800a688 <floor+0x40>
 800a706:	2401      	movs	r4, #1
 800a708:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a70c:	fa04 f303 	lsl.w	r3, r4, r3
 800a710:	4418      	add	r0, r3
 800a712:	42a8      	cmp	r0, r5
 800a714:	bf38      	it	cc
 800a716:	1909      	addcc	r1, r1, r4
 800a718:	e7f2      	b.n	800a700 <floor+0xb8>
 800a71a:	2000      	movs	r0, #0
 800a71c:	4601      	mov	r1, r0
 800a71e:	e7b3      	b.n	800a688 <floor+0x40>
 800a720:	8800759c 	.word	0x8800759c
 800a724:	7e37e43c 	.word	0x7e37e43c
 800a728:	bff00000 	.word	0xbff00000
 800a72c:	000fffff 	.word	0x000fffff

0800a730 <scalbn>:
 800a730:	ee10 1a90 	vmov	r1, s1
 800a734:	b510      	push	{r4, lr}
 800a736:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800a73a:	b98c      	cbnz	r4, 800a760 <scalbn+0x30>
 800a73c:	ee10 3a10 	vmov	r3, s0
 800a740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a744:	430b      	orrs	r3, r1
 800a746:	d011      	beq.n	800a76c <scalbn+0x3c>
 800a748:	ed9f 7b31 	vldr	d7, [pc, #196]	; 800a810 <scalbn+0xe0>
 800a74c:	4b3c      	ldr	r3, [pc, #240]	; (800a840 <scalbn+0x110>)
 800a74e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a752:	4298      	cmp	r0, r3
 800a754:	da0b      	bge.n	800a76e <scalbn+0x3e>
 800a756:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800a818 <scalbn+0xe8>
 800a75a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a75e:	e005      	b.n	800a76c <scalbn+0x3c>
 800a760:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800a764:	429c      	cmp	r4, r3
 800a766:	d107      	bne.n	800a778 <scalbn+0x48>
 800a768:	ee30 0b00 	vadd.f64	d0, d0, d0
 800a76c:	bd10      	pop	{r4, pc}
 800a76e:	ee10 1a90 	vmov	r1, s1
 800a772:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800a776:	3c36      	subs	r4, #54	; 0x36
 800a778:	4404      	add	r4, r0
 800a77a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800a77e:	429c      	cmp	r4, r3
 800a780:	dd0d      	ble.n	800a79e <scalbn+0x6e>
 800a782:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800a820 <scalbn+0xf0>
 800a786:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800a828 <scalbn+0xf8>
 800a78a:	eeb0 6b47 	vmov.f64	d6, d7
 800a78e:	ee10 3a90 	vmov	r3, s1
 800a792:	2b00      	cmp	r3, #0
 800a794:	fe27 7b05 	vselge.f64	d7, d7, d5
 800a798:	ee27 0b06 	vmul.f64	d0, d7, d6
 800a79c:	e7e6      	b.n	800a76c <scalbn+0x3c>
 800a79e:	2c00      	cmp	r4, #0
 800a7a0:	dd0a      	ble.n	800a7b8 <scalbn+0x88>
 800a7a2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800a7a6:	ec53 2b10 	vmov	r2, r3, d0
 800a7aa:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800a7ae:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800a7b2:	ec43 2b10 	vmov	d0, r2, r3
 800a7b6:	e7d9      	b.n	800a76c <scalbn+0x3c>
 800a7b8:	f114 0f35 	cmn.w	r4, #53	; 0x35
 800a7bc:	da19      	bge.n	800a7f2 <scalbn+0xc2>
 800a7be:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a7c2:	4298      	cmp	r0, r3
 800a7c4:	ee10 3a90 	vmov	r3, s1
 800a7c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7cc:	dd09      	ble.n	800a7e2 <scalbn+0xb2>
 800a7ce:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800a820 <scalbn+0xf0>
 800a7d2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800a828 <scalbn+0xf8>
 800a7d6:	eeb0 7b40 	vmov.f64	d7, d0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	fe00 0b06 	vseleq.f64	d0, d0, d6
 800a7e0:	e7bb      	b.n	800a75a <scalbn+0x2a>
 800a7e2:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800a818 <scalbn+0xe8>
 800a7e6:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800a830 <scalbn+0x100>
 800a7ea:	eeb0 7b40 	vmov.f64	d7, d0
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	e7f4      	b.n	800a7dc <scalbn+0xac>
 800a7f2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800a7f6:	ec53 2b10 	vmov	r2, r3, d0
 800a7fa:	3436      	adds	r4, #54	; 0x36
 800a7fc:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800a800:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800a804:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800a838 <scalbn+0x108>
 800a808:	ec43 2b10 	vmov	d0, r2, r3
 800a80c:	e7a5      	b.n	800a75a <scalbn+0x2a>
 800a80e:	bf00      	nop
 800a810:	00000000 	.word	0x00000000
 800a814:	43500000 	.word	0x43500000
 800a818:	c2f8f359 	.word	0xc2f8f359
 800a81c:	01a56e1f 	.word	0x01a56e1f
 800a820:	8800759c 	.word	0x8800759c
 800a824:	7e37e43c 	.word	0x7e37e43c
 800a828:	8800759c 	.word	0x8800759c
 800a82c:	fe37e43c 	.word	0xfe37e43c
 800a830:	c2f8f359 	.word	0xc2f8f359
 800a834:	81a56e1f 	.word	0x81a56e1f
 800a838:	00000000 	.word	0x00000000
 800a83c:	3c900000 	.word	0x3c900000
 800a840:	ffff3cb0 	.word	0xffff3cb0

0800a844 <_init>:
 800a844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a846:	bf00      	nop
 800a848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a84a:	bc08      	pop	{r3}
 800a84c:	469e      	mov	lr, r3
 800a84e:	4770      	bx	lr

0800a850 <_fini>:
 800a850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a852:	bf00      	nop
 800a854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a856:	bc08      	pop	{r3}
 800a858:	469e      	mov	lr, r3
 800a85a:	4770      	bx	lr
