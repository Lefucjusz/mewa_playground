
mewa_playground.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000feb4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b8c  08010154  08010154  00020154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08010ce0  08010ce0  00020ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08010ce4  08010ce4  00020ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  24000000  08010ce8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004cc  2400007c  08010d64  0003007c  2**2
                  ALLOC
  7 .sdram        00010518  c0000000  c0000000  00040000  2**2
                  ALLOC
  8 ._user_heap_stack 00005000  24000548  24000548  00030548  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001edbe  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004237  00000000  00000000  0004ee68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017f0  00000000  00000000  000530a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000015d0  00000000  00000000  00054890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003acf7  00000000  00000000  00055e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023147  00000000  00000000  00090b57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015fc8f  00000000  00000000  000b3c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0021392d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006684  00000000  00000000  00213980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801013c 	.word	0x0801013c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	0801013c 	.word	0x0801013c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <cs4270_reset>:
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void cs4270_reset(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS4270_NRESET_GPIO, CS4270_NRESET_PIN, GPIO_PIN_RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	2110      	movs	r1, #16
 8000398:	4807      	ldr	r0, [pc, #28]	; (80003b8 <cs4270_reset+0x28>)
 800039a:	f004 fbab 	bl	8004af4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800039e:	2001      	movs	r0, #1
 80003a0:	f001 fcaa 	bl	8001cf8 <HAL_Delay>
	HAL_GPIO_WritePin(CS4270_NRESET_GPIO, CS4270_NRESET_PIN, GPIO_PIN_SET);
 80003a4:	2201      	movs	r2, #1
 80003a6:	2110      	movs	r1, #16
 80003a8:	4803      	ldr	r0, [pc, #12]	; (80003b8 <cs4270_reset+0x28>)
 80003aa:	f004 fba3 	bl	8004af4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80003ae:	2001      	movs	r0, #1
 80003b0:	f001 fca2 	bl	8001cf8 <HAL_Delay>
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	58020c00 	.word	0x58020c00

080003bc <cs4270_init>:

bool cs4270_init(I2C_HandleTypeDef *hi2c1, uint8_t address)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b088      	sub	sp, #32
 80003c0:	af04      	add	r7, sp, #16
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	460b      	mov	r3, r1
 80003c6:	70fb      	strb	r3, [r7, #3]
	bool status;
	HAL_StatusTypeDef i2c_status;
	uint8_t reg_value;

	ctx.i2c = hi2c1;
 80003c8:	4a36      	ldr	r2, [pc, #216]	; (80004a4 <cs4270_init+0xe8>)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	6013      	str	r3, [r2, #0]
	ctx.address = ((CS4270_FIXED_ADDRESS | address) << 1);
 80003ce:	78fb      	ldrb	r3, [r7, #3]
 80003d0:	005b      	lsls	r3, r3, #1
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	f063 036f 	orn	r3, r3, #111	; 0x6f
 80003d8:	b2da      	uxtb	r2, r3
 80003da:	4b32      	ldr	r3, [pc, #200]	; (80004a4 <cs4270_init+0xe8>)
 80003dc:	711a      	strb	r2, [r3, #4]

	/* Reset the chip */
	cs4270_reset();
 80003de:	f7ff ffd7 	bl	8000390 <cs4270_reset>

	/* Check device's ID */
	if (cs4270_get_id() != CS4270_DEVICE_ID) {
 80003e2:	f000 f861 	bl	80004a8 <cs4270_get_id>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b0c      	cmp	r3, #12
 80003ea:	d001      	beq.n	80003f0 <cs4270_init+0x34>
		return false;
 80003ec:	2300      	movs	r3, #0
 80003ee:	e054      	b.n	800049a <cs4270_init+0xde>
	}

	/* Configure ADC and DAC: unfreeze ADC HPFs, disable digital loopback, set both ADC and DAC format to I2S */
	reg_value = 0b00001001;
 80003f0:	2309      	movs	r3, #9
 80003f2:	737b      	strb	r3, [r7, #13]
	i2c_status = HAL_I2C_Mem_Write(ctx.i2c, ctx.address, CS4270_ADC_DAC_CTRL_REG, CS4270_ADDRESS_SIZE, &reg_value, sizeof(reg_value), CS4270_I2C_TIMEOUT_MS);
 80003f4:	4b2b      	ldr	r3, [pc, #172]	; (80004a4 <cs4270_init+0xe8>)
 80003f6:	6818      	ldr	r0, [r3, #0]
 80003f8:	4b2a      	ldr	r3, [pc, #168]	; (80004a4 <cs4270_init+0xe8>)
 80003fa:	791b      	ldrb	r3, [r3, #4]
 80003fc:	b299      	uxth	r1, r3
 80003fe:	2364      	movs	r3, #100	; 0x64
 8000400:	9302      	str	r3, [sp, #8]
 8000402:	2301      	movs	r3, #1
 8000404:	9301      	str	r3, [sp, #4]
 8000406:	f107 030d 	add.w	r3, r7, #13
 800040a:	9300      	str	r3, [sp, #0]
 800040c:	2301      	movs	r3, #1
 800040e:	2204      	movs	r2, #4
 8000410:	f004 fd0e 	bl	8004e30 <HAL_I2C_Mem_Write>
 8000414:	4603      	mov	r3, r0
 8000416:	73fb      	strb	r3, [r7, #15]

	/* Configure transition: enable DAC single volume control, enable Soft Ramp and Zero Cross, disable signal inversion, disable de-emphasis */
	reg_value = 0b11100000;
 8000418:	23e0      	movs	r3, #224	; 0xe0
 800041a:	737b      	strb	r3, [r7, #13]
	i2c_status |= HAL_I2C_Mem_Write(ctx.i2c, ctx.address, CS4270_TRANSITION_CTRL_REG, CS4270_ADDRESS_SIZE, &reg_value, sizeof(reg_value), CS4270_I2C_TIMEOUT_MS);
 800041c:	4b21      	ldr	r3, [pc, #132]	; (80004a4 <cs4270_init+0xe8>)
 800041e:	6818      	ldr	r0, [r3, #0]
 8000420:	4b20      	ldr	r3, [pc, #128]	; (80004a4 <cs4270_init+0xe8>)
 8000422:	791b      	ldrb	r3, [r3, #4]
 8000424:	b299      	uxth	r1, r3
 8000426:	2364      	movs	r3, #100	; 0x64
 8000428:	9302      	str	r3, [sp, #8]
 800042a:	2301      	movs	r3, #1
 800042c:	9301      	str	r3, [sp, #4]
 800042e:	f107 030d 	add.w	r3, r7, #13
 8000432:	9300      	str	r3, [sp, #0]
 8000434:	2301      	movs	r3, #1
 8000436:	2205      	movs	r2, #5
 8000438:	f004 fcfa 	bl	8004e30 <HAL_I2C_Mem_Write>
 800043c:	4603      	mov	r3, r0
 800043e:	461a      	mov	r2, r3
 8000440:	7bfb      	ldrb	r3, [r7, #15]
 8000442:	4313      	orrs	r3, r2
 8000444:	73fb      	strb	r3, [r7, #15]

	/* Configure muting: disable Auto-Mute, mute ADC channels, set active low mute signals polarity, disable DAC channels mute */
	reg_value = 0b00011000;
 8000446:	2318      	movs	r3, #24
 8000448:	737b      	strb	r3, [r7, #13]
	i2c_status |= HAL_I2C_Mem_Write(ctx.i2c, ctx.address, CS4270_MUTE_CTRL_REG, CS4270_ADDRESS_SIZE, &reg_value, sizeof(reg_value), CS4270_I2C_TIMEOUT_MS);
 800044a:	4b16      	ldr	r3, [pc, #88]	; (80004a4 <cs4270_init+0xe8>)
 800044c:	6818      	ldr	r0, [r3, #0]
 800044e:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <cs4270_init+0xe8>)
 8000450:	791b      	ldrb	r3, [r3, #4]
 8000452:	b299      	uxth	r1, r3
 8000454:	2364      	movs	r3, #100	; 0x64
 8000456:	9302      	str	r3, [sp, #8]
 8000458:	2301      	movs	r3, #1
 800045a:	9301      	str	r3, [sp, #4]
 800045c:	f107 030d 	add.w	r3, r7, #13
 8000460:	9300      	str	r3, [sp, #0]
 8000462:	2301      	movs	r3, #1
 8000464:	2206      	movs	r2, #6
 8000466:	f004 fce3 	bl	8004e30 <HAL_I2C_Mem_Write>
 800046a:	4603      	mov	r3, r0
 800046c:	461a      	mov	r2, r3
 800046e:	7bfb      	ldrb	r3, [r7, #15]
 8000470:	4313      	orrs	r3, r2
 8000472:	73fb      	strb	r3, [r7, #15]

	/* Set initial volume */
	status = cs4270_set_attenuation(CS4270_INITIAL_ATTENUATION_DB * CS4270_STEPS_PER_DB);
 8000474:	2030      	movs	r0, #48	; 0x30
 8000476:	f000 f835 	bl	80004e4 <cs4270_set_attenuation>
 800047a:	4603      	mov	r3, r0
 800047c:	73bb      	strb	r3, [r7, #14]
	status &= (i2c_status == HAL_OK);
 800047e:	7bbb      	ldrb	r3, [r7, #14]
 8000480:	7bfa      	ldrb	r2, [r7, #15]
 8000482:	2a00      	cmp	r2, #0
 8000484:	bf0c      	ite	eq
 8000486:	2201      	moveq	r2, #1
 8000488:	2200      	movne	r2, #0
 800048a:	b2d2      	uxtb	r2, r2
 800048c:	4013      	ands	r3, r2
 800048e:	2b00      	cmp	r3, #0
 8000490:	bf14      	ite	ne
 8000492:	2301      	movne	r3, #1
 8000494:	2300      	moveq	r3, #0
 8000496:	73bb      	strb	r3, [r7, #14]

	return status;
 8000498:	7bbb      	ldrb	r3, [r7, #14]
}
 800049a:	4618      	mov	r0, r3
 800049c:	3710      	adds	r7, #16
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	24000098 	.word	0x24000098

080004a8 <cs4270_get_id>:

uint8_t cs4270_get_id(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af04      	add	r7, sp, #16
	uint8_t reg_value = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(ctx.i2c, ctx.address, CS4270_DEVICE_ID_REG, CS4270_ADDRESS_SIZE, &reg_value, sizeof(reg_value), CS4270_I2C_TIMEOUT_MS);
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <cs4270_get_id+0x38>)
 80004b4:	6818      	ldr	r0, [r3, #0]
 80004b6:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <cs4270_get_id+0x38>)
 80004b8:	791b      	ldrb	r3, [r3, #4]
 80004ba:	b299      	uxth	r1, r3
 80004bc:	2364      	movs	r3, #100	; 0x64
 80004be:	9302      	str	r3, [sp, #8]
 80004c0:	2301      	movs	r3, #1
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	1dfb      	adds	r3, r7, #7
 80004c6:	9300      	str	r3, [sp, #0]
 80004c8:	2301      	movs	r3, #1
 80004ca:	2201      	movs	r2, #1
 80004cc:	f004 fdc4 	bl	8005058 <HAL_I2C_Mem_Read>
	return ((reg_value & CS4270_DEVICE_ID_MASK) >> CS4270_DEVICE_ID_SHIFT);
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	091b      	lsrs	r3, r3, #4
 80004d4:	b2db      	uxtb	r3, r3
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	24000098 	.word	0x24000098

080004e4 <cs4270_set_attenuation>:
	HAL_I2C_Mem_Read(ctx.i2c, ctx.address, CS4270_DEVICE_ID_REG, CS4270_ADDRESS_SIZE, &reg_value, sizeof(reg_value), CS4270_I2C_TIMEOUT_MS);
	return ((reg_value & CS4270_REVISION_MASK) >> CS4270_REVISION_SHIFT);
}

bool cs4270_set_attenuation(uint8_t steps)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af04      	add	r7, sp, #16
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef i2c_status;
	i2c_status = HAL_I2C_Mem_Write(ctx.i2c, ctx.address, CS4270_DAC_CH_A_VOL_REG, CS4270_ADDRESS_SIZE, &steps, sizeof(steps), CS4270_I2C_TIMEOUT_MS);
 80004ee:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <cs4270_set_attenuation+0x40>)
 80004f0:	6818      	ldr	r0, [r3, #0]
 80004f2:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <cs4270_set_attenuation+0x40>)
 80004f4:	791b      	ldrb	r3, [r3, #4]
 80004f6:	b299      	uxth	r1, r3
 80004f8:	2364      	movs	r3, #100	; 0x64
 80004fa:	9302      	str	r3, [sp, #8]
 80004fc:	2301      	movs	r3, #1
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	1dfb      	adds	r3, r7, #7
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	2301      	movs	r3, #1
 8000506:	2207      	movs	r2, #7
 8000508:	f004 fc92 	bl	8004e30 <HAL_I2C_Mem_Write>
 800050c:	4603      	mov	r3, r0
 800050e:	73fb      	strb	r3, [r7, #15]
	return (i2c_status == HAL_OK);
 8000510:	7bfb      	ldrb	r3, [r7, #15]
 8000512:	2b00      	cmp	r3, #0
 8000514:	bf0c      	ite	eq
 8000516:	2301      	moveq	r3, #1
 8000518:	2300      	movne	r3, #0
 800051a:	b2db      	uxtb	r3, r3
}
 800051c:	4618      	mov	r0, r3
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	24000098 	.word	0x24000098

08000528 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
	...

08000538 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af04      	add	r7, sp, #16
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000546:	9302      	str	r3, [sp, #8]
 8000548:	2301      	movs	r3, #1
 800054a:	9301      	str	r3, [sp, #4]
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	2301      	movs	r3, #1
 8000552:	2200      	movs	r2, #0
 8000554:	2178      	movs	r1, #120	; 0x78
 8000556:	4803      	ldr	r0, [pc, #12]	; (8000564 <ssd1306_WriteCommand+0x2c>)
 8000558:	f004 fc6a 	bl	8004e30 <HAL_I2C_Mem_Write>
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	240000a8 	.word	0x240000a8

08000568 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af04      	add	r7, sp, #16
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	b29b      	uxth	r3, r3
 8000576:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800057a:	9202      	str	r2, [sp, #8]
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2301      	movs	r3, #1
 8000584:	2240      	movs	r2, #64	; 0x40
 8000586:	2178      	movs	r1, #120	; 0x78
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <ssd1306_WriteData+0x30>)
 800058a:	f004 fc51 	bl	8004e30 <HAL_I2C_Mem_Write>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	240000a8 	.word	0x240000a8

0800059c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80005a0:	f7ff ffc2 	bl	8000528 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80005a4:	2064      	movs	r0, #100	; 0x64
 80005a6:	f001 fba7 	bl	8001cf8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80005aa:	2000      	movs	r0, #0
 80005ac:	f000 f9da 	bl	8000964 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80005b0:	2020      	movs	r0, #32
 80005b2:	f7ff ffc1 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80005b6:	2000      	movs	r0, #0
 80005b8:	f7ff ffbe 	bl	8000538 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80005bc:	20b0      	movs	r0, #176	; 0xb0
 80005be:	f7ff ffbb 	bl	8000538 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80005c2:	20c8      	movs	r0, #200	; 0xc8
 80005c4:	f7ff ffb8 	bl	8000538 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80005c8:	2000      	movs	r0, #0
 80005ca:	f7ff ffb5 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80005ce:	2010      	movs	r0, #16
 80005d0:	f7ff ffb2 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80005d4:	2040      	movs	r0, #64	; 0x40
 80005d6:	f7ff ffaf 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80005da:	20ff      	movs	r0, #255	; 0xff
 80005dc:	f000 f9ae 	bl	800093c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80005e0:	20a1      	movs	r0, #161	; 0xa1
 80005e2:	f7ff ffa9 	bl	8000538 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80005e6:	20a6      	movs	r0, #166	; 0xa6
 80005e8:	f7ff ffa6 	bl	8000538 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80005ec:	20a8      	movs	r0, #168	; 0xa8
 80005ee:	f7ff ffa3 	bl	8000538 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 80005f2:	201f      	movs	r0, #31
 80005f4:	f7ff ffa0 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80005f8:	20a4      	movs	r0, #164	; 0xa4
 80005fa:	f7ff ff9d 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80005fe:	20d3      	movs	r0, #211	; 0xd3
 8000600:	f7ff ff9a 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000604:	2000      	movs	r0, #0
 8000606:	f7ff ff97 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800060a:	20d5      	movs	r0, #213	; 0xd5
 800060c:	f7ff ff94 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000610:	20f0      	movs	r0, #240	; 0xf0
 8000612:	f7ff ff91 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000616:	20d9      	movs	r0, #217	; 0xd9
 8000618:	f7ff ff8e 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800061c:	2022      	movs	r0, #34	; 0x22
 800061e:	f7ff ff8b 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000622:	20da      	movs	r0, #218	; 0xda
 8000624:	f7ff ff88 	bl	8000538 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8000628:	2002      	movs	r0, #2
 800062a:	f7ff ff85 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800062e:	20db      	movs	r0, #219	; 0xdb
 8000630:	f7ff ff82 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000634:	2020      	movs	r0, #32
 8000636:	f7ff ff7f 	bl	8000538 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800063a:	208d      	movs	r0, #141	; 0x8d
 800063c:	f7ff ff7c 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000640:	2014      	movs	r0, #20
 8000642:	f7ff ff79 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000646:	2001      	movs	r0, #1
 8000648:	f000 f98c 	bl	8000964 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800064c:	2000      	movs	r0, #0
 800064e:	f000 f80f 	bl	8000670 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000652:	f000 f831 	bl	80006b8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <ssd1306_Init+0xd0>)
 8000658:	2200      	movs	r2, #0
 800065a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <ssd1306_Init+0xd0>)
 800065e:	2200      	movs	r2, #0
 8000660:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000662:	4b02      	ldr	r3, [pc, #8]	; (800066c <ssd1306_Init+0xd0>)
 8000664:	2201      	movs	r2, #1
 8000666:	711a      	strb	r2, [r3, #4]
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	c0000200 	.word	0xc0000200

08000670 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	e00d      	b.n	800069c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d101      	bne.n	800068a <ssd1306_Fill+0x1a>
 8000686:	2100      	movs	r1, #0
 8000688:	e000      	b.n	800068c <ssd1306_Fill+0x1c>
 800068a:	21ff      	movs	r1, #255	; 0xff
 800068c:	4a09      	ldr	r2, [pc, #36]	; (80006b4 <ssd1306_Fill+0x44>)
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	4413      	add	r3, r2
 8000692:	460a      	mov	r2, r1
 8000694:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	3301      	adds	r3, #1
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006a2:	d3ed      	bcc.n	8000680 <ssd1306_Fill+0x10>
    }
}
 80006a4:	bf00      	nop
 80006a6:	bf00      	nop
 80006a8:	3714      	adds	r7, #20
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	c0000000 	.word	0xc0000000

080006b8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80006be:	2300      	movs	r3, #0
 80006c0:	71fb      	strb	r3, [r7, #7]
 80006c2:	e016      	b.n	80006f2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	3b50      	subs	r3, #80	; 0x50
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff ff34 	bl	8000538 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80006d0:	2000      	movs	r0, #0
 80006d2:	f7ff ff31 	bl	8000538 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80006d6:	2010      	movs	r0, #16
 80006d8:	f7ff ff2e 	bl	8000538 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	01db      	lsls	r3, r3, #7
 80006e0:	4a08      	ldr	r2, [pc, #32]	; (8000704 <ssd1306_UpdateScreen+0x4c>)
 80006e2:	4413      	add	r3, r2
 80006e4:	2180      	movs	r1, #128	; 0x80
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff3e 	bl	8000568 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	3301      	adds	r3, #1
 80006f0:	71fb      	strb	r3, [r7, #7]
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b03      	cmp	r3, #3
 80006f6:	d9e5      	bls.n	80006c4 <ssd1306_UpdateScreen+0xc>
    }
}
 80006f8:	bf00      	nop
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	c0000000 	.word	0xc0000000

08000708 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	460b      	mov	r3, r1
 8000714:	71bb      	strb	r3, [r7, #6]
 8000716:	4613      	mov	r3, r2
 8000718:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	2b00      	cmp	r3, #0
 8000720:	db3d      	blt.n	800079e <ssd1306_DrawPixel+0x96>
 8000722:	79bb      	ldrb	r3, [r7, #6]
 8000724:	2b1f      	cmp	r3, #31
 8000726:	d83a      	bhi.n	800079e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000728:	797b      	ldrb	r3, [r7, #5]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d11a      	bne.n	8000764 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800072e:	79fa      	ldrb	r2, [r7, #7]
 8000730:	79bb      	ldrb	r3, [r7, #6]
 8000732:	08db      	lsrs	r3, r3, #3
 8000734:	b2d8      	uxtb	r0, r3
 8000736:	4603      	mov	r3, r0
 8000738:	01db      	lsls	r3, r3, #7
 800073a:	4413      	add	r3, r2
 800073c:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <ssd1306_DrawPixel+0xa4>)
 800073e:	5cd3      	ldrb	r3, [r2, r3]
 8000740:	b25a      	sxtb	r2, r3
 8000742:	79bb      	ldrb	r3, [r7, #6]
 8000744:	f003 0307 	and.w	r3, r3, #7
 8000748:	2101      	movs	r1, #1
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	b25b      	sxtb	r3, r3
 8000750:	4313      	orrs	r3, r2
 8000752:	b259      	sxtb	r1, r3
 8000754:	79fa      	ldrb	r2, [r7, #7]
 8000756:	4603      	mov	r3, r0
 8000758:	01db      	lsls	r3, r3, #7
 800075a:	4413      	add	r3, r2
 800075c:	b2c9      	uxtb	r1, r1
 800075e:	4a13      	ldr	r2, [pc, #76]	; (80007ac <ssd1306_DrawPixel+0xa4>)
 8000760:	54d1      	strb	r1, [r2, r3]
 8000762:	e01d      	b.n	80007a0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000764:	79fa      	ldrb	r2, [r7, #7]
 8000766:	79bb      	ldrb	r3, [r7, #6]
 8000768:	08db      	lsrs	r3, r3, #3
 800076a:	b2d8      	uxtb	r0, r3
 800076c:	4603      	mov	r3, r0
 800076e:	01db      	lsls	r3, r3, #7
 8000770:	4413      	add	r3, r2
 8000772:	4a0e      	ldr	r2, [pc, #56]	; (80007ac <ssd1306_DrawPixel+0xa4>)
 8000774:	5cd3      	ldrb	r3, [r2, r3]
 8000776:	b25a      	sxtb	r2, r3
 8000778:	79bb      	ldrb	r3, [r7, #6]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	2101      	movs	r1, #1
 8000780:	fa01 f303 	lsl.w	r3, r1, r3
 8000784:	b25b      	sxtb	r3, r3
 8000786:	43db      	mvns	r3, r3
 8000788:	b25b      	sxtb	r3, r3
 800078a:	4013      	ands	r3, r2
 800078c:	b259      	sxtb	r1, r3
 800078e:	79fa      	ldrb	r2, [r7, #7]
 8000790:	4603      	mov	r3, r0
 8000792:	01db      	lsls	r3, r3, #7
 8000794:	4413      	add	r3, r2
 8000796:	b2c9      	uxtb	r1, r1
 8000798:	4a04      	ldr	r2, [pc, #16]	; (80007ac <ssd1306_DrawPixel+0xa4>)
 800079a:	54d1      	strb	r1, [r2, r3]
 800079c:	e000      	b.n	80007a0 <ssd1306_DrawPixel+0x98>
        return;
 800079e:	bf00      	nop
    }
}
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	c0000000 	.word	0xc0000000

080007b0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b089      	sub	sp, #36	; 0x24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4604      	mov	r4, r0
 80007b8:	1d38      	adds	r0, r7, #4
 80007ba:	e880 0006 	stmia.w	r0, {r1, r2}
 80007be:	461a      	mov	r2, r3
 80007c0:	4623      	mov	r3, r4
 80007c2:	73fb      	strb	r3, [r7, #15]
 80007c4:	4613      	mov	r3, r2
 80007c6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	2b1f      	cmp	r3, #31
 80007cc:	d902      	bls.n	80007d4 <ssd1306_WriteChar+0x24>
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	2b7e      	cmp	r3, #126	; 0x7e
 80007d2:	d901      	bls.n	80007d8 <ssd1306_WriteChar+0x28>
        return 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e06d      	b.n	80008b4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80007d8:	4b38      	ldr	r3, [pc, #224]	; (80008bc <ssd1306_WriteChar+0x10c>)
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	793b      	ldrb	r3, [r7, #4]
 80007e0:	4413      	add	r3, r2
 80007e2:	2b80      	cmp	r3, #128	; 0x80
 80007e4:	dc06      	bgt.n	80007f4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80007e6:	4b35      	ldr	r3, [pc, #212]	; (80008bc <ssd1306_WriteChar+0x10c>)
 80007e8:	885b      	ldrh	r3, [r3, #2]
 80007ea:	461a      	mov	r2, r3
 80007ec:	797b      	ldrb	r3, [r7, #5]
 80007ee:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80007f0:	2b20      	cmp	r3, #32
 80007f2:	dd01      	ble.n	80007f8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	e05d      	b.n	80008b4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
 80007fc:	e04c      	b.n	8000898 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80007fe:	68ba      	ldr	r2, [r7, #8]
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	3b20      	subs	r3, #32
 8000804:	7979      	ldrb	r1, [r7, #5]
 8000806:	fb01 f303 	mul.w	r3, r1, r3
 800080a:	4619      	mov	r1, r3
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	440b      	add	r3, r1
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	4413      	add	r3, r2
 8000814:	881b      	ldrh	r3, [r3, #0]
 8000816:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
 800081c:	e034      	b.n	8000888 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800081e:	697a      	ldr	r2, [r7, #20]
 8000820:	69bb      	ldr	r3, [r7, #24]
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
 8000826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800082a:	2b00      	cmp	r3, #0
 800082c:	d012      	beq.n	8000854 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800082e:	4b23      	ldr	r3, [pc, #140]	; (80008bc <ssd1306_WriteChar+0x10c>)
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	b2da      	uxtb	r2, r3
 8000834:	69bb      	ldr	r3, [r7, #24]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4413      	add	r3, r2
 800083a:	b2d8      	uxtb	r0, r3
 800083c:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <ssd1306_WriteChar+0x10c>)
 800083e:	885b      	ldrh	r3, [r3, #2]
 8000840:	b2da      	uxtb	r2, r3
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4413      	add	r3, r2
 8000848:	b2db      	uxtb	r3, r3
 800084a:	7bba      	ldrb	r2, [r7, #14]
 800084c:	4619      	mov	r1, r3
 800084e:	f7ff ff5b 	bl	8000708 <ssd1306_DrawPixel>
 8000852:	e016      	b.n	8000882 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000854:	4b19      	ldr	r3, [pc, #100]	; (80008bc <ssd1306_WriteChar+0x10c>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	b2da      	uxtb	r2, r3
 800085a:	69bb      	ldr	r3, [r7, #24]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4413      	add	r3, r2
 8000860:	b2d8      	uxtb	r0, r3
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <ssd1306_WriteChar+0x10c>)
 8000864:	885b      	ldrh	r3, [r3, #2]
 8000866:	b2da      	uxtb	r2, r3
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	4413      	add	r3, r2
 800086e:	b2d9      	uxtb	r1, r3
 8000870:	7bbb      	ldrb	r3, [r7, #14]
 8000872:	2b00      	cmp	r3, #0
 8000874:	bf0c      	ite	eq
 8000876:	2301      	moveq	r3, #1
 8000878:	2300      	movne	r3, #0
 800087a:	b2db      	uxtb	r3, r3
 800087c:	461a      	mov	r2, r3
 800087e:	f7ff ff43 	bl	8000708 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000882:	69bb      	ldr	r3, [r7, #24]
 8000884:	3301      	adds	r3, #1
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	793b      	ldrb	r3, [r7, #4]
 800088a:	461a      	mov	r2, r3
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	4293      	cmp	r3, r2
 8000890:	d3c5      	bcc.n	800081e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3301      	adds	r3, #1
 8000896:	61fb      	str	r3, [r7, #28]
 8000898:	797b      	ldrb	r3, [r7, #5]
 800089a:	461a      	mov	r2, r3
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	4293      	cmp	r3, r2
 80008a0:	d3ad      	bcc.n	80007fe <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <ssd1306_WriteChar+0x10c>)
 80008a4:	881a      	ldrh	r2, [r3, #0]
 80008a6:	793b      	ldrb	r3, [r7, #4]
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	4413      	add	r3, r2
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	4b03      	ldr	r3, [pc, #12]	; (80008bc <ssd1306_WriteChar+0x10c>)
 80008b0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3724      	adds	r7, #36	; 0x24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd90      	pop	{r4, r7, pc}
 80008bc:	c0000200 	.word	0xc0000200

080008c0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	1d38      	adds	r0, r7, #4
 80008ca:	e880 0006 	stmia.w	r0, {r1, r2}
 80008ce:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80008d0:	e012      	b.n	80008f8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	7818      	ldrb	r0, [r3, #0]
 80008d6:	78fb      	ldrb	r3, [r7, #3]
 80008d8:	1d3a      	adds	r2, r7, #4
 80008da:	ca06      	ldmia	r2, {r1, r2}
 80008dc:	f7ff ff68 	bl	80007b0 <ssd1306_WriteChar>
 80008e0:	4603      	mov	r3, r0
 80008e2:	461a      	mov	r2, r3
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d002      	beq.n	80008f2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	e008      	b.n	8000904 <ssd1306_WriteString+0x44>
        }
        str++;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	3301      	adds	r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d1e8      	bne.n	80008d2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	781b      	ldrb	r3, [r3, #0]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	460a      	mov	r2, r1
 8000916:	71fb      	strb	r3, [r7, #7]
 8000918:	4613      	mov	r3, r2
 800091a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	b29a      	uxth	r2, r3
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <ssd1306_SetCursor+0x2c>)
 8000922:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000924:	79bb      	ldrb	r3, [r7, #6]
 8000926:	b29a      	uxth	r2, r3
 8000928:	4b03      	ldr	r3, [pc, #12]	; (8000938 <ssd1306_SetCursor+0x2c>)
 800092a:	805a      	strh	r2, [r3, #2]
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	c0000200 	.word	0xc0000200

0800093c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000946:	2381      	movs	r3, #129	; 0x81
 8000948:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fdf3 	bl	8000538 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fdef 	bl	8000538 <ssd1306_WriteCommand>
}
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d005      	beq.n	8000980 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000974:	23af      	movs	r3, #175	; 0xaf
 8000976:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <ssd1306_SetDisplayOn+0x38>)
 800097a:	2201      	movs	r2, #1
 800097c:	715a      	strb	r2, [r3, #5]
 800097e:	e004      	b.n	800098a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000980:	23ae      	movs	r3, #174	; 0xae
 8000982:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <ssd1306_SetDisplayOn+0x38>)
 8000986:	2200      	movs	r2, #0
 8000988:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fdd3 	bl	8000538 <ssd1306_WriteCommand>
}
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	c0000200 	.word	0xc0000200

080009a0 <tca9548_write>:
};

static struct tca9548a_ctx_t ctx = {0};

static bool tca9548_write()
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af02      	add	r7, sp, #8
	return (HAL_I2C_Master_Transmit(ctx.i2c, ctx.address, &ctx.ctrl_reg_shadow, sizeof(ctx.ctrl_reg_shadow), TCA9548A_I2C_TIMEOUT_MS) == HAL_OK);
 80009a6:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <tca9548_write+0x30>)
 80009a8:	6818      	ldr	r0, [r3, #0]
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <tca9548_write+0x30>)
 80009ac:	791b      	ldrb	r3, [r3, #4]
 80009ae:	b299      	uxth	r1, r3
 80009b0:	2364      	movs	r3, #100	; 0x64
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	2301      	movs	r3, #1
 80009b6:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <tca9548_write+0x34>)
 80009b8:	f004 f946 	bl	8004c48 <HAL_I2C_Master_Transmit>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	bf0c      	ite	eq
 80009c2:	2301      	moveq	r3, #1
 80009c4:	2300      	movne	r3, #0
 80009c6:	b2db      	uxtb	r3, r3
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	240000a0 	.word	0x240000a0
 80009d4:	240000a5 	.word	0x240000a5

080009d8 <tca9548a_reset>:

void tca9548a_reset(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	/* Reset the chip */
	HAL_GPIO_WritePin(TCA9548A_NRESET_GPIO, TCA9548A_NRESET_PIN, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2120      	movs	r1, #32
 80009e0:	4809      	ldr	r0, [pc, #36]	; (8000a08 <tca9548a_reset+0x30>)
 80009e2:	f004 f887 	bl	8004af4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009e6:	2001      	movs	r0, #1
 80009e8:	f001 f986 	bl	8001cf8 <HAL_Delay>
	HAL_GPIO_WritePin(TCA9548A_NRESET_GPIO, TCA9548A_NRESET_PIN, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2120      	movs	r1, #32
 80009f0:	4805      	ldr	r0, [pc, #20]	; (8000a08 <tca9548a_reset+0x30>)
 80009f2:	f004 f87f 	bl	8004af4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009f6:	2001      	movs	r0, #1
 80009f8:	f001 f97e 	bl	8001cf8 <HAL_Delay>

	/* Update control register shadow with initial value */
	ctx.ctrl_reg_shadow = 0;
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <tca9548a_reset+0x34>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	715a      	strb	r2, [r3, #5]
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	58020400 	.word	0x58020400
 8000a0c:	240000a0 	.word	0x240000a0

08000a10 <tca9548a_init>:

bool tca9548a_init(I2C_HandleTypeDef *hi2c1, uint8_t address)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	460b      	mov	r3, r1
 8000a1a:	70fb      	strb	r3, [r7, #3]
	ctx.i2c = hi2c1;
 8000a1c:	4a09      	ldr	r2, [pc, #36]	; (8000a44 <tca9548a_init+0x34>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6013      	str	r3, [r2, #0]
	ctx.address = ((TCA9548A_FIXED_ADDRESS | address) << 1);
 8000a22:	78fb      	ldrb	r3, [r7, #3]
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	f063 031f 	orn	r3, r3, #31
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <tca9548a_init+0x34>)
 8000a30:	711a      	strb	r2, [r3, #4]
	tca9548a_reset();
 8000a32:	f7ff ffd1 	bl	80009d8 <tca9548a_reset>
	return tca9548a_close_all();
 8000a36:	f000 f821 	bl	8000a7c <tca9548a_close_all>
 8000a3a:	4603      	mov	r3, r0
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	240000a0 	.word	0x240000a0

08000a48 <tca9548a_switch_to>:

	return tca9548_write();
}

bool tca9548a_switch_to(uint8_t channel)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
	if (channel >= TCA9548A_CHANNELS_NUM) {
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	2b07      	cmp	r3, #7
 8000a56:	d901      	bls.n	8000a5c <tca9548a_switch_to+0x14>
		return false;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	e009      	b.n	8000a70 <tca9548a_switch_to+0x28>
	}

	ctx.ctrl_reg_shadow = (uint8_t)(1 << channel);
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	2201      	movs	r2, #1
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <tca9548a_switch_to+0x30>)
 8000a68:	715a      	strb	r2, [r3, #5]

	return tca9548_write();
 8000a6a:	f7ff ff99 	bl	80009a0 <tca9548_write>
 8000a6e:	4603      	mov	r3, r0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	240000a0 	.word	0x240000a0

08000a7c <tca9548a_close_all>:
	ctx.ctrl_reg_shadow = TCA9548A_ENABLE_ALL;
	return tca9548_write();
}

bool tca9548a_close_all(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	ctx.ctrl_reg_shadow = TCA9548A_DISABLE_ALL;
 8000a80:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <tca9548a_close_all+0x14>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	715a      	strb	r2, [r3, #5]
	return tca9548_write();
 8000a86:	f7ff ff8b 	bl	80009a0 <tca9548_write>
 8000a8a:	4603      	mov	r3, r0
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	240000a0 	.word	0x240000a0

08000a94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9c:	f001 f89a 	bl	8001bd4 <HAL_Init>
  /* USER CODE BEGIN Init */
  // TODO setup MPU and caches
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa0:	f000 f916 	bl	8000cd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa4:	f000 fb04 	bl	80010b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aa8:	f000 fa2c 	bl	8000f04 <MX_DMA_Init>
  MX_MDMA_Init();
 8000aac:	f000 fa4a 	bl	8000f44 <MX_MDMA_Init>
  MX_I2S1_Init();
 8000ab0:	f000 f9d6 	bl	8000e60 <MX_I2S1_Init>
  MX_SDMMC1_SD_Init();
 8000ab4:	f000 fa08 	bl	8000ec8 <MX_SDMMC1_SD_Init>
  MX_I2C1_Init();
 8000ab8:	f000 f992 	bl	8000de0 <MX_I2C1_Init>
  MX_FMC_Init();
 8000abc:	f000 faa6 	bl	800100c <MX_FMC_Init>
  MX_FATFS_Init();
 8000ac0:	f00b fcfc 	bl	800c4bc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  tca9548a_init(&hi2c1, 0);
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	486b      	ldr	r0, [pc, #428]	; (8000c74 <main+0x1e0>)
 8000ac8:	f7ff ffa2 	bl	8000a10 <tca9548a_init>
  tca9548a_switch_to(1);
 8000acc:	2001      	movs	r0, #1
 8000ace:	f7ff ffbb 	bl	8000a48 <tca9548a_switch_to>
  ssd1306_Init();
 8000ad2:	f7ff fd63 	bl	800059c <ssd1306_Init>
  logger_init();
 8000ad6:	f00b ff41 	bl	800c95c <logger_init>

  bool codec_ret = cs4270_init(&hi2c1, 0);
 8000ada:	2100      	movs	r1, #0
 8000adc:	4865      	ldr	r0, [pc, #404]	; (8000c74 <main+0x1e0>)
 8000ade:	f7ff fc6d 	bl	80003bc <cs4270_init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247

  cs4270_set_attenuation(24);
 8000ae8:	2018      	movs	r0, #24
 8000aea:	f7ff fcfb 	bl	80004e4 <cs4270_set_attenuation>

  logger_log("Codec %s", codec_ret ? "OK" : "fail");
 8000aee:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <main+0x66>
 8000af6:	4b60      	ldr	r3, [pc, #384]	; (8000c78 <main+0x1e4>)
 8000af8:	e000      	b.n	8000afc <main+0x68>
 8000afa:	4b60      	ldr	r3, [pc, #384]	; (8000c7c <main+0x1e8>)
 8000afc:	4619      	mov	r1, r3
 8000afe:	4860      	ldr	r0, [pc, #384]	; (8000c80 <main+0x1ec>)
 8000b00:	f00b ff38 	bl	800c974 <logger_log>

  const char *const mount_point = "";
 8000b04:	4b5f      	ldr	r3, [pc, #380]	; (8000c84 <main+0x1f0>)
 8000b06:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
  const char *const file_path = "01. A Gallant Gentleman.wav";
 8000b0a:	4b5f      	ldr	r3, [pc, #380]	; (8000c88 <main+0x1f4>)
 8000b0c:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

  FRESULT ret;
  FIL f;

  logger_log("Mounting SD card...");
 8000b10:	485e      	ldr	r0, [pc, #376]	; (8000c8c <main+0x1f8>)
 8000b12:	f00b ff2f 	bl	800c974 <logger_log>

  ret = f_mount(&fatfs, mount_point, 1);
 8000b16:	2201      	movs	r2, #1
 8000b18:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8000b1c:	485c      	ldr	r0, [pc, #368]	; (8000c90 <main+0x1fc>)
 8000b1e:	f00e f911 	bl	800ed44 <f_mount>
 8000b22:	4603      	mov	r3, r0
 8000b24:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
  if (ret) {
 8000b28:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d003      	beq.n	8000b38 <main+0xa4>
	  logger_log("Failed");
 8000b30:	4858      	ldr	r0, [pc, #352]	; (8000c94 <main+0x200>)
 8000b32:	f00b ff1f 	bl	800c974 <logger_log>
	  while(1);
 8000b36:	e7fe      	b.n	8000b36 <main+0xa2>
  }

  logger_log("Opening %s...", file_path);
 8000b38:	f8d7 123c 	ldr.w	r1, [r7, #572]	; 0x23c
 8000b3c:	4856      	ldr	r0, [pc, #344]	; (8000c98 <main+0x204>)
 8000b3e:	f00b ff19 	bl	800c974 <logger_log>
  ret = f_open(&f, file_path, FA_READ);
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2201      	movs	r2, #1
 8000b46:	f8d7 123c 	ldr.w	r1, [r7, #572]	; 0x23c
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f00e f940 	bl	800edd0 <f_open>
 8000b50:	4603      	mov	r3, r0
 8000b52:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
  if (ret) {
 8000b56:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d003      	beq.n	8000b66 <main+0xd2>
	  logger_log("Failed");
 8000b5e:	484d      	ldr	r0, [pc, #308]	; (8000c94 <main+0x200>)
 8000b60:	f00b ff08 	bl	800c974 <logger_log>
	  while(1);
 8000b64:	e7fe      	b.n	8000b64 <main+0xd0>
  }

  logger_log("Reading file...");
 8000b66:	484d      	ldr	r0, [pc, #308]	; (8000c9c <main+0x208>)
 8000b68:	f00b ff04 	bl	800c974 <logger_log>
  const size_t file_size = f_size(&f);
 8000b6c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8000b70:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
  logger_log("File size: %uB", file_size);
 8000b7a:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 8000b7e:	4848      	ldr	r0, [pc, #288]	; (8000ca0 <main+0x20c>)
 8000b80:	f00b fef8 	bl	800c974 <logger_log>
//	  seek_val++;
//  }
//
//  f_lseek(&f, seek_val);

  logger_log("Filling buffer...");
 8000b84:	4847      	ldr	r0, [pc, #284]	; (8000ca4 <main+0x210>)
 8000b86:	f00b fef5 	bl	800c974 <logger_log>
  size_t bytes_read;
  ret = f_read(&f, audio_buffer, 2 * 16384 * sizeof(audio_buffer[0]), &bytes_read);
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	1d38      	adds	r0, r7, #4
 8000b8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b92:	4945      	ldr	r1, [pc, #276]	; (8000ca8 <main+0x214>)
 8000b94:	f00e fada 	bl	800f14c <f_read>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
  if (ret) {
 8000b9e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d003      	beq.n	8000bae <main+0x11a>
  	  logger_log("Failed");
 8000ba6:	483b      	ldr	r0, [pc, #236]	; (8000c94 <main+0x200>)
 8000ba8:	f00b fee4 	bl	800c974 <logger_log>
  	  while(1);
 8000bac:	e7fe      	b.n	8000bac <main+0x118>
  }

  HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t *)audio_buffer, sizeof(audio_buffer)/sizeof(audio_buffer[0]));
 8000bae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bb2:	493d      	ldr	r1, [pc, #244]	; (8000ca8 <main+0x214>)
 8000bb4:	483d      	ldr	r0, [pc, #244]	; (8000cac <main+0x218>)
 8000bb6:	f004 ffdb 	bl	8005b70 <HAL_I2S_Transmit_DMA>

  logger_log("Playing");
 8000bba:	483d      	ldr	r0, [pc, #244]	; (8000cb0 <main+0x21c>)
 8000bbc:	f00b feda 	bl	800c974 <logger_log>

  while (1) {
	  if (first_half) {
 8000bc0:	4b3c      	ldr	r3, [pc, #240]	; (8000cb4 <main+0x220>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d009      	beq.n	8000bde <main+0x14a>
		  first_half = false;
 8000bca:	4b3a      	ldr	r3, [pc, #232]	; (8000cb4 <main+0x220>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]
		  f_read(&f, audio_buffer, 16384 * sizeof(audio_buffer[0]), &bytes_read);
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	1d38      	adds	r0, r7, #4
 8000bd4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bd8:	4933      	ldr	r1, [pc, #204]	; (8000ca8 <main+0x214>)
 8000bda:	f00e fab7 	bl	800f14c <f_read>
	  }

	  if (second_half) {
 8000bde:	4b36      	ldr	r3, [pc, #216]	; (8000cb8 <main+0x224>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d009      	beq.n	8000bfc <main+0x168>
		  second_half = false;
 8000be8:	4b33      	ldr	r3, [pc, #204]	; (8000cb8 <main+0x224>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
		  f_read(&f, &audio_buffer[16384], 16384 * sizeof(audio_buffer[0]), &bytes_read);
 8000bee:	463b      	mov	r3, r7
 8000bf0:	1d38      	adds	r0, r7, #4
 8000bf2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bf6:	4931      	ldr	r1, [pc, #196]	; (8000cbc <main+0x228>)
 8000bf8:	f00e faa8 	bl	800f14c <f_read>
	  }

	  if (bytes_read == 0) {
 8000bfc:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8000c00:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d000      	beq.n	8000c0c <main+0x178>
	  if (first_half) {
 8000c0a:	e7d9      	b.n	8000bc0 <main+0x12c>
		  break;
 8000c0c:	bf00      	nop
	  }
  }

  HAL_I2S_DMAStop(&hi2s1);
 8000c0e:	4827      	ldr	r0, [pc, #156]	; (8000cac <main+0x218>)
 8000c10:	f005 f850 	bl	8005cb4 <HAL_I2S_DMAStop>
  logger_log("Playback done");
 8000c14:	482a      	ldr	r0, [pc, #168]	; (8000cc0 <main+0x22c>)
 8000c16:	f00b fead 	bl	800c974 <logger_log>

  logger_log("Closing %s...", file_path);
 8000c1a:	f8d7 123c 	ldr.w	r1, [r7, #572]	; 0x23c
 8000c1e:	4829      	ldr	r0, [pc, #164]	; (8000cc4 <main+0x230>)
 8000c20:	f00b fea8 	bl	800c974 <logger_log>
  ret = f_close(&f);
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	4618      	mov	r0, r3
 8000c28:	f00e fc4d 	bl	800f4c6 <f_close>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
  if (ret) {
 8000c32:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d003      	beq.n	8000c42 <main+0x1ae>
      logger_log("Failed");
 8000c3a:	4816      	ldr	r0, [pc, #88]	; (8000c94 <main+0x200>)
 8000c3c:	f00b fe9a 	bl	800c974 <logger_log>
      while(1);
 8000c40:	e7fe      	b.n	8000c40 <main+0x1ac>
  }

  logger_log("Unmounting SD card...");
 8000c42:	4821      	ldr	r0, [pc, #132]	; (8000cc8 <main+0x234>)
 8000c44:	f00b fe96 	bl	800c974 <logger_log>
  ret = f_mount(0, mount_point, 0);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f00e f878 	bl	800ed44 <f_mount>
 8000c54:	4603      	mov	r3, r0
 8000c56:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
  if (ret) {
 8000c5a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <main+0x1d6>
      logger_log("Failed");
 8000c62:	480c      	ldr	r0, [pc, #48]	; (8000c94 <main+0x200>)
 8000c64:	f00b fe86 	bl	800c974 <logger_log>
      while(1);
 8000c68:	e7fe      	b.n	8000c68 <main+0x1d4>
  }

  logger_log("Success!");
 8000c6a:	4818      	ldr	r0, [pc, #96]	; (8000ccc <main+0x238>)
 8000c6c:	f00b fe82 	bl	800c974 <logger_log>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <main+0x1dc>
 8000c72:	bf00      	nop
 8000c74:	240000a8 	.word	0x240000a8
 8000c78:	08010154 	.word	0x08010154
 8000c7c:	08010158 	.word	0x08010158
 8000c80:	08010160 	.word	0x08010160
 8000c84:	0801016c 	.word	0x0801016c
 8000c88:	08010170 	.word	0x08010170
 8000c8c:	0801018c 	.word	0x0801018c
 8000c90:	c0000208 	.word	0xc0000208
 8000c94:	080101a0 	.word	0x080101a0
 8000c98:	080101a8 	.word	0x080101a8
 8000c9c:	080101b8 	.word	0x080101b8
 8000ca0:	080101c8 	.word	0x080101c8
 8000ca4:	080101d8 	.word	0x080101d8
 8000ca8:	c000043c 	.word	0xc000043c
 8000cac:	240000fc 	.word	0x240000fc
 8000cb0:	080101ec 	.word	0x080101ec
 8000cb4:	240002e4 	.word	0x240002e4
 8000cb8:	240002e5 	.word	0x240002e5
 8000cbc:	c000843c 	.word	0xc000843c
 8000cc0:	080101f4 	.word	0x080101f4
 8000cc4:	08010204 	.word	0x08010204
 8000cc8:	08010214 	.word	0x08010214
 8000ccc:	0801022c 	.word	0x0801022c

08000cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b09c      	sub	sp, #112	; 0x70
 8000cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cda:	224c      	movs	r2, #76	; 0x4c
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f00e fd90 	bl	800f804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2220      	movs	r2, #32
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f00e fd8a 	bl	800f804 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cf0:	2002      	movs	r0, #2
 8000cf2:	f005 fb17 	bl	8006324 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	603b      	str	r3, [r7, #0]
 8000cfa:	4b36      	ldr	r3, [pc, #216]	; (8000dd4 <SystemClock_Config+0x104>)
 8000cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cfe:	4a35      	ldr	r2, [pc, #212]	; (8000dd4 <SystemClock_Config+0x104>)
 8000d00:	f023 0301 	bic.w	r3, r3, #1
 8000d04:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d06:	4b33      	ldr	r3, [pc, #204]	; (8000dd4 <SystemClock_Config+0x104>)
 8000d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	4b31      	ldr	r3, [pc, #196]	; (8000dd8 <SystemClock_Config+0x108>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d18:	4a2f      	ldr	r2, [pc, #188]	; (8000dd8 <SystemClock_Config+0x108>)
 8000d1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b2d      	ldr	r3, [pc, #180]	; (8000dd8 <SystemClock_Config+0x108>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d2c:	bf00      	nop
 8000d2e:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <SystemClock_Config+0x108>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d3a:	d1f8      	bne.n	8000d2e <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000d3c:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <SystemClock_Config+0x10c>)
 8000d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d40:	f023 0303 	bic.w	r3, r3, #3
 8000d44:	4a25      	ldr	r2, [pc, #148]	; (8000ddc <SystemClock_Config+0x10c>)
 8000d46:	f043 0302 	orr.w	r3, r3, #2
 8000d4a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d56:	2302      	movs	r3, #2
 8000d58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 23;
 8000d62:	2317      	movs	r3, #23
 8000d64:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d66:	2302      	movs	r3, #2
 8000d68:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8000d6a:	230c      	movs	r3, #12
 8000d6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d72:	230c      	movs	r3, #12
 8000d74:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3584;
 8000d7a:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000d7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d84:	4618      	mov	r0, r3
 8000d86:	f005 fb07 	bl	8006398 <HAL_RCC_OscConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d90:	f000 faea 	bl	8001368 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d94:	233f      	movs	r3, #63	; 0x3f
 8000d96:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000da0:	2308      	movs	r3, #8
 8000da2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000da4:	2340      	movs	r3, #64	; 0x40
 8000da6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000da8:	2340      	movs	r3, #64	; 0x40
 8000daa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000db0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000db2:	2340      	movs	r3, #64	; 0x40
 8000db4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	2101      	movs	r1, #1
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f005 ff46 	bl	8006c4c <HAL_RCC_ClockConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000dc6:	f000 facf 	bl	8001368 <Error_Handler>
  }
}
 8000dca:	bf00      	nop
 8000dcc:	3770      	adds	r7, #112	; 0x70
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	58000400 	.word	0x58000400
 8000dd8:	58024800 	.word	0x58024800
 8000ddc:	58024400 	.word	0x58024400

08000de0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000de4:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000de6:	4a1c      	ldr	r2, [pc, #112]	; (8000e58 <MX_I2C1_Init+0x78>)
 8000de8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301739;
 8000dea:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000dec:	4a1b      	ldr	r2, [pc, #108]	; (8000e5c <MX_I2C1_Init+0x7c>)
 8000dee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000df0:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dfc:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e02:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e1a:	480e      	ldr	r0, [pc, #56]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e1c:	f003 fe84 	bl	8004b28 <HAL_I2C_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e26:	f000 fa9f 	bl	8001368 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4809      	ldr	r0, [pc, #36]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e2e:	f004 fce5 	bl	80057fc <HAL_I2CEx_ConfigAnalogFilter>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e38:	f000 fa96 	bl	8001368 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e40:	f004 fd27 	bl	8005892 <HAL_I2CEx_ConfigDigitalFilter>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e4a:	f000 fa8d 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	240000a8 	.word	0x240000a8
 8000e58:	40005400 	.word	0x40005400
 8000e5c:	00301739 	.word	0x00301739

08000e60 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000e64:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <MX_I2S1_Init+0x60>)
 8000e66:	4a17      	ldr	r2, [pc, #92]	; (8000ec4 <MX_I2S1_Init+0x64>)
 8000e68:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <MX_I2S1_Init+0x60>)
 8000e6c:	220a      	movs	r2, #10
 8000e6e:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <MX_I2S1_Init+0x60>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <MX_I2S1_Init+0x60>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000e7c:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <MX_I2S1_Init+0x60>)
 8000e7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e82:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <MX_I2S1_Init+0x60>)
 8000e86:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000e8a:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <MX_I2S1_Init+0x60>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <MX_I2S1_Init+0x60>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <MX_I2S1_Init+0x60>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000e9e:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <MX_I2S1_Init+0x60>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MX_I2S1_Init+0x60>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_I2S1_Init+0x60>)
 8000eac:	f004 fd3e 	bl	800592c <HAL_I2S_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_I2S1_Init+0x5a>
  {
    Error_Handler();
 8000eb6:	f000 fa57 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	240000fc 	.word	0x240000fc
 8000ec4:	40013000 	.word	0x40013000

08000ec8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <MX_SDMMC1_SD_Init+0x34>)
 8000ece:	4a0c      	ldr	r2, [pc, #48]	; (8000f00 <MX_SDMMC1_SD_Init+0x38>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <MX_SDMMC1_SD_Init+0x34>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <MX_SDMMC1_SD_Init+0x34>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000ede:	4b07      	ldr	r3, [pc, #28]	; (8000efc <MX_SDMMC1_SD_Init+0x34>)
 8000ee0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ee4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ee6:	4b05      	ldr	r3, [pc, #20]	; (8000efc <MX_SDMMC1_SD_Init+0x34>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <MX_SDMMC1_SD_Init+0x34>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	240001c8 	.word	0x240001c8
 8000f00:	52007000 	.word	0x52007000

08000f04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <MX_DMA_Init+0x3c>)
 8000f0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f10:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <MX_DMA_Init+0x3c>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_DMA_Init+0x3c>)
 8000f1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	200b      	movs	r0, #11
 8000f2e:	f000 ffee 	bl	8001f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f32:	200b      	movs	r0, #11
 8000f34:	f001 f805 	bl	8001f42 <HAL_NVIC_EnableIRQ>

}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	58024400 	.word	0x58024400

08000f44 <MX_MDMA_Init>:
  * Enable MDMA controller clock
  * Configure MDMA for global transfers
  *   hmdma_mdma_channel40_sdmmc1_end_data_0
  */
static void MX_MDMA_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <MX_MDMA_Init+0xbc>)
 8000f4c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f50:	4a2b      	ldr	r2, [pc, #172]	; (8001000 <MX_MDMA_Init+0xbc>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000f5a:	4b29      	ldr	r3, [pc, #164]	; (8001000 <MX_MDMA_Init+0xbc>)
 8000f5c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel40_sdmmc1_end_data_0 on MDMA_Channel0 */
  hmdma_mdma_channel40_sdmmc1_end_data_0.Instance = MDMA_Channel0;
 8000f68:	4b26      	ldr	r3, [pc, #152]	; (8001004 <MX_MDMA_Init+0xc0>)
 8000f6a:	4a27      	ldr	r2, [pc, #156]	; (8001008 <MX_MDMA_Init+0xc4>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Request = MDMA_REQUEST_SDMMC1_END_DATA;
 8000f6e:	4b25      	ldr	r3, [pc, #148]	; (8001004 <MX_MDMA_Init+0xc0>)
 8000f70:	221d      	movs	r2, #29
 8000f72:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8000f74:	4b23      	ldr	r3, [pc, #140]	; (8001004 <MX_MDMA_Init+0xc0>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Priority = MDMA_PRIORITY_LOW;
 8000f7a:	4b22      	ldr	r3, [pc, #136]	; (8001004 <MX_MDMA_Init+0xc0>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000f80:	4b20      	ldr	r3, [pc, #128]	; (8001004 <MX_MDMA_Init+0xc0>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8000f86:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <MX_MDMA_Init+0xc0>)
 8000f88:	2202      	movs	r2, #2
 8000f8a:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <MX_MDMA_Init+0xc0>)
 8000f8e:	2208      	movs	r2, #8
 8000f90:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <MX_MDMA_Init+0xc0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <MX_MDMA_Init+0xc0>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <MX_MDMA_Init+0xc0>)
 8000fa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.BufferTransferLength = 1;
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <MX_MDMA_Init+0xc0>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <MX_MDMA_Init+0xc0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <MX_MDMA_Init+0xc0>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBlockAddressOffset = 0;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <MX_MDMA_Init+0xc0>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	635a      	str	r2, [r3, #52]	; 0x34
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBlockAddressOffset = 0;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <MX_MDMA_Init+0xc0>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel40_sdmmc1_end_data_0) != HAL_OK)
 8000fc4:	480f      	ldr	r0, [pc, #60]	; (8001004 <MX_MDMA_Init+0xc0>)
 8000fc6:	f004 ff23 	bl	8005e10 <HAL_MDMA_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_MDMA_Init+0x90>
  {
    Error_Handler();
 8000fd0:	f000 f9ca 	bl	8001368 <Error_Handler>
  }

  /* Configure post request address and data masks */
  if (HAL_MDMA_ConfigPostRequestMask(&hmdma_mdma_channel40_sdmmc1_end_data_0, 0, 0) != HAL_OK)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	480a      	ldr	r0, [pc, #40]	; (8001004 <MX_MDMA_Init+0xc0>)
 8000fda:	f004 ff65 	bl	8005ea8 <HAL_MDMA_ConfigPostRequestMask>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_MDMA_Init+0xa4>
  {
    Error_Handler();
 8000fe4:	f000 f9c0 	bl	8001368 <Error_Handler>
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2100      	movs	r1, #0
 8000fec:	207a      	movs	r0, #122	; 0x7a
 8000fee:	f000 ff8e 	bl	8001f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000ff2:	207a      	movs	r0, #122	; 0x7a
 8000ff4:	f000 ffa5 	bl	8001f42 <HAL_NVIC_EnableIRQ>

}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	58024400 	.word	0x58024400
 8001004:	24000244 	.word	0x24000244
 8001008:	52000040 	.word	0x52000040

0800100c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	615a      	str	r2, [r3, #20]
 8001022:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001024:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <MX_FMC_Init+0x9c>)
 8001026:	4a21      	ldr	r2, [pc, #132]	; (80010ac <MX_FMC_Init+0xa0>)
 8001028:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800102a:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <MX_FMC_Init+0x9c>)
 800102c:	2200      	movs	r2, #0
 800102e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8001030:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <MX_FMC_Init+0x9c>)
 8001032:	2201      	movs	r2, #1
 8001034:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <MX_FMC_Init+0x9c>)
 8001038:	2208      	movs	r2, #8
 800103a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800103c:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <MX_FMC_Init+0x9c>)
 800103e:	2210      	movs	r2, #16
 8001040:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001042:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <MX_FMC_Init+0x9c>)
 8001044:	2240      	movs	r2, #64	; 0x40
 8001046:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8001048:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_FMC_Init+0x9c>)
 800104a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800104e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <MX_FMC_Init+0x9c>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_FMC_Init+0x9c>)
 8001058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800105c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800105e:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <MX_FMC_Init+0x9c>)
 8001060:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001064:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <MX_FMC_Init+0x9c>)
 8001068:	2200      	movs	r2, #0
 800106a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 1;
 800106c:	2301      	movs	r3, #1
 800106e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 5;
 8001070:	2305      	movs	r3, #5
 8001072:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001074:	2304      	movs	r3, #4
 8001076:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 5;
 8001078:	2305      	movs	r3, #5
 800107a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 800107c:	2302      	movs	r3, #2
 800107e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001080:	2302      	movs	r3, #2
 8001082:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001084:	2302      	movs	r3, #2
 8001086:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	4619      	mov	r1, r3
 800108c:	4806      	ldr	r0, [pc, #24]	; (80010a8 <MX_FMC_Init+0x9c>)
 800108e:	f00a faaf 	bl	800b5f0 <HAL_SDRAM_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001098:	f000 f966 	bl	8001368 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  SDRAM_Init();
 800109c:	f000 f8ca 	bl	8001234 <SDRAM_Init>
  /* USER CODE END FMC_Init 2 */
}
 80010a0:	bf00      	nop
 80010a2:	3720      	adds	r7, #32
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	240002b0 	.word	0x240002b0
 80010ac:	52004140 	.word	0x52004140

080010b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08e      	sub	sp, #56	; 0x38
 80010b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
 80010c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010c6:	4b57      	ldr	r3, [pc, #348]	; (8001224 <MX_GPIO_Init+0x174>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010cc:	4a55      	ldr	r2, [pc, #340]	; (8001224 <MX_GPIO_Init+0x174>)
 80010ce:	f043 0320 	orr.w	r3, r3, #32
 80010d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010d6:	4b53      	ldr	r3, [pc, #332]	; (8001224 <MX_GPIO_Init+0x174>)
 80010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010dc:	f003 0320 	and.w	r3, r3, #32
 80010e0:	623b      	str	r3, [r7, #32]
 80010e2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010e4:	4b4f      	ldr	r3, [pc, #316]	; (8001224 <MX_GPIO_Init+0x174>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ea:	4a4e      	ldr	r2, [pc, #312]	; (8001224 <MX_GPIO_Init+0x174>)
 80010ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f4:	4b4b      	ldr	r3, [pc, #300]	; (8001224 <MX_GPIO_Init+0x174>)
 80010f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001102:	4b48      	ldr	r3, [pc, #288]	; (8001224 <MX_GPIO_Init+0x174>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001108:	4a46      	ldr	r2, [pc, #280]	; (8001224 <MX_GPIO_Init+0x174>)
 800110a:	f043 0304 	orr.w	r3, r3, #4
 800110e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001112:	4b44      	ldr	r3, [pc, #272]	; (8001224 <MX_GPIO_Init+0x174>)
 8001114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	61bb      	str	r3, [r7, #24]
 800111e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001120:	4b40      	ldr	r3, [pc, #256]	; (8001224 <MX_GPIO_Init+0x174>)
 8001122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001126:	4a3f      	ldr	r2, [pc, #252]	; (8001224 <MX_GPIO_Init+0x174>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001130:	4b3c      	ldr	r3, [pc, #240]	; (8001224 <MX_GPIO_Init+0x174>)
 8001132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800113e:	4b39      	ldr	r3, [pc, #228]	; (8001224 <MX_GPIO_Init+0x174>)
 8001140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001144:	4a37      	ldr	r2, [pc, #220]	; (8001224 <MX_GPIO_Init+0x174>)
 8001146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800114a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800114e:	4b35      	ldr	r3, [pc, #212]	; (8001224 <MX_GPIO_Init+0x174>)
 8001150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800115c:	4b31      	ldr	r3, [pc, #196]	; (8001224 <MX_GPIO_Init+0x174>)
 800115e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001162:	4a30      	ldr	r2, [pc, #192]	; (8001224 <MX_GPIO_Init+0x174>)
 8001164:	f043 0310 	orr.w	r3, r3, #16
 8001168:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800116c:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <MX_GPIO_Init+0x174>)
 800116e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001172:	f003 0310 	and.w	r3, r3, #16
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800117a:	4b2a      	ldr	r3, [pc, #168]	; (8001224 <MX_GPIO_Init+0x174>)
 800117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001180:	4a28      	ldr	r2, [pc, #160]	; (8001224 <MX_GPIO_Init+0x174>)
 8001182:	f043 0308 	orr.w	r3, r3, #8
 8001186:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800118a:	4b26      	ldr	r3, [pc, #152]	; (8001224 <MX_GPIO_Init+0x174>)
 800118c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001190:	f003 0308 	and.w	r3, r3, #8
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001198:	4b22      	ldr	r3, [pc, #136]	; (8001224 <MX_GPIO_Init+0x174>)
 800119a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119e:	4a21      	ldr	r2, [pc, #132]	; (8001224 <MX_GPIO_Init+0x174>)
 80011a0:	f043 0302 	orr.w	r3, r3, #2
 80011a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a8:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <MX_GPIO_Init+0x174>)
 80011aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS4270_NRESET_GPIO_Port, CS4270_NRESET_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2110      	movs	r1, #16
 80011ba:	481b      	ldr	r0, [pc, #108]	; (8001228 <MX_GPIO_Init+0x178>)
 80011bc:	f003 fc9a 	bl	8004af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TCA9548A_NRESET_GPIO_Port, TCA9548A_NRESET_Pin, GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2120      	movs	r1, #32
 80011c4:	4819      	ldr	r0, [pc, #100]	; (800122c <MX_GPIO_Init+0x17c>)
 80011c6:	f003 fc95 	bl	8004af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS4270_NRESET_Pin */
  GPIO_InitStruct.Pin = CS4270_NRESET_Pin;
 80011ca:	2310      	movs	r3, #16
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS4270_NRESET_GPIO_Port, &GPIO_InitStruct);
 80011da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011de:	4619      	mov	r1, r3
 80011e0:	4811      	ldr	r0, [pc, #68]	; (8001228 <MX_GPIO_Init+0x178>)
 80011e2:	f003 fabf 	bl	8004764 <HAL_GPIO_Init>

  /*Configure GPIO pin : DBG_PAD1_Pin */
  GPIO_InitStruct.Pin = DBG_PAD1_Pin;
 80011e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011f0:	2302      	movs	r3, #2
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DBG_PAD1_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f8:	4619      	mov	r1, r3
 80011fa:	480d      	ldr	r0, [pc, #52]	; (8001230 <MX_GPIO_Init+0x180>)
 80011fc:	f003 fab2 	bl	8004764 <HAL_GPIO_Init>

  /*Configure GPIO pin : TCA9548A_NRESET_Pin */
  GPIO_InitStruct.Pin = TCA9548A_NRESET_Pin;
 8001200:	2320      	movs	r3, #32
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TCA9548A_NRESET_GPIO_Port, &GPIO_InitStruct);
 8001210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001214:	4619      	mov	r1, r3
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_GPIO_Init+0x17c>)
 8001218:	f003 faa4 	bl	8004764 <HAL_GPIO_Init>

}
 800121c:	bf00      	nop
 800121e:	3738      	adds	r7, #56	; 0x38
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	58024400 	.word	0x58024400
 8001228:	58020c00 	.word	0x58020c00
 800122c:	58020400 	.word	0x58020400
 8001230:	58021800 	.word	0x58021800

08001234 <SDRAM_Init>:

/* USER CODE BEGIN 4 */

static void SDRAM_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
	FMC_SDRAM_CommandTypeDef cmd = {0};
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
	HAL_StatusTypeDef status = HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	75fb      	strb	r3, [r7, #23]

	/* Send clock configuration enable command */
	cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800124a:	2310      	movs	r3, #16
 800124c:	60bb      	str	r3, [r7, #8]
	cmd.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800124e:	2301      	movs	r3, #1
 8001250:	607b      	str	r3, [r7, #4]
	cmd.AutoRefreshNumber = 1;
 8001252:	2301      	movs	r3, #1
 8001254:	60fb      	str	r3, [r7, #12]
	cmd.ModeRegisterDefinition = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
	status = HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0xFFFF); // TODO magic number
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001260:	4619      	mov	r1, r3
 8001262:	4830      	ldr	r0, [pc, #192]	; (8001324 <SDRAM_Init+0xf0>)
 8001264:	f00a fa00 	bl	800b668 <HAL_SDRAM_SendCommand>
 8001268:	4603      	mov	r3, r0
 800126a:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 800126c:	7dfb      	ldrb	r3, [r7, #23]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SDRAM_Init+0x42>
		Error_Handler();
 8001272:	f000 f879 	bl	8001368 <Error_Handler>
	}

	/* Wait for at least 100us */
	HAL_Delay(1);
 8001276:	2001      	movs	r0, #1
 8001278:	f000 fd3e 	bl	8001cf8 <HAL_Delay>

	/* Send Precharge All command */
	cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800127c:	2310      	movs	r3, #16
 800127e:	60bb      	str	r3, [r7, #8]
	cmd.CommandMode = FMC_SDRAM_CMD_PALL;
 8001280:	2302      	movs	r3, #2
 8001282:	607b      	str	r3, [r7, #4]
	cmd.AutoRefreshNumber = 1;
 8001284:	2301      	movs	r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
	cmd.ModeRegisterDefinition = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
	status = HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0xFFFF); // TODO magic number
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001292:	4619      	mov	r1, r3
 8001294:	4823      	ldr	r0, [pc, #140]	; (8001324 <SDRAM_Init+0xf0>)
 8001296:	f00a f9e7 	bl	800b668 <HAL_SDRAM_SendCommand>
 800129a:	4603      	mov	r3, r0
 800129c:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 800129e:	7dfb      	ldrb	r3, [r7, #23]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <SDRAM_Init+0x74>
		Error_Handler();
 80012a4:	f000 f860 	bl	8001368 <Error_Handler>
	}

	/* Send Auto Refresh command 8 times */
	cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80012a8:	2310      	movs	r3, #16
 80012aa:	60bb      	str	r3, [r7, #8]
	cmd.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80012ac:	2303      	movs	r3, #3
 80012ae:	607b      	str	r3, [r7, #4]
	cmd.AutoRefreshNumber = 8;
 80012b0:	2308      	movs	r3, #8
 80012b2:	60fb      	str	r3, [r7, #12]
	cmd.ModeRegisterDefinition = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	613b      	str	r3, [r7, #16]
	status = HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0xFFFF); // TODO magic number
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012be:	4619      	mov	r1, r3
 80012c0:	4818      	ldr	r0, [pc, #96]	; (8001324 <SDRAM_Init+0xf0>)
 80012c2:	f00a f9d1 	bl	800b668 <HAL_SDRAM_SendCommand>
 80012c6:	4603      	mov	r3, r0
 80012c8:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 80012ca:	7dfb      	ldrb	r3, [r7, #23]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <SDRAM_Init+0xa0>
		Error_Handler();
 80012d0:	f000 f84a 	bl	8001368 <Error_Handler>
	}

	/* Program the external memory mode register */
	cmd.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80012d4:	2310      	movs	r3, #16
 80012d6:	60bb      	str	r3, [r7, #8]
	cmd.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 80012d8:	2304      	movs	r3, #4
 80012da:	607b      	str	r3, [r7, #4]
	cmd.AutoRefreshNumber = 1;
 80012dc:	2301      	movs	r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
	cmd.ModeRegisterDefinition = (SDRAM_MODEREG_BURST_LENGTH_1 |
 80012e0:	f44f 7308 	mov.w	r3, #544	; 0x220
 80012e4:	613b      	str	r3, [r7, #16]
							 	 SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL |
								 SDRAM_MODEREG_CAS_LATENCY_2 |
								 SDRAM_MODEREG_OPERATING_MODE_STANDARD |
								 SDRAM_MODEREG_WRITEBURST_MODE_SINGLE);
	status = HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0xFFFF); // TODO magic number
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ec:	4619      	mov	r1, r3
 80012ee:	480d      	ldr	r0, [pc, #52]	; (8001324 <SDRAM_Init+0xf0>)
 80012f0:	f00a f9ba 	bl	800b668 <HAL_SDRAM_SendCommand>
 80012f4:	4603      	mov	r3, r0
 80012f6:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 80012f8:	7dfb      	ldrb	r3, [r7, #23]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <SDRAM_Init+0xce>
		Error_Handler();
 80012fe:	f000 f833 	bl	8001368 <Error_Handler>

	/* Set the rate refresh counter:
	 * refresh_rate = (FMC_freq * (full_refresh_time / refresh_cycles)) - 20
	 * refresh_rate = (72MHz * (64ms/8192)) - 20 = (72MHz * 7.8125us) - 20 = 542
	 *  */
	status = HAL_SDRAM_ProgramRefreshRate(&hsdram1, 542);
 8001302:	f240 211e 	movw	r1, #542	; 0x21e
 8001306:	4807      	ldr	r0, [pc, #28]	; (8001324 <SDRAM_Init+0xf0>)
 8001308:	f00a f9e3 	bl	800b6d2 <HAL_SDRAM_ProgramRefreshRate>
 800130c:	4603      	mov	r3, r0
 800130e:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 8001310:	7dfb      	ldrb	r3, [r7, #23]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <SDRAM_Init+0xe6>
		Error_Handler();
 8001316:	f000 f827 	bl	8001368 <Error_Handler>
	}
}
 800131a:	bf00      	nop
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	240002b0 	.word	0x240002b0

08001328 <HAL_I2S_TxHalfCpltCallback>:

// TODO this shouldn't be here
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	first_half = true;
 8001330:	4b04      	ldr	r3, [pc, #16]	; (8001344 <HAL_I2S_TxHalfCpltCallback+0x1c>)
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	240002e4 	.word	0x240002e4

08001348 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	second_half = true;
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <HAL_I2S_TxCpltCallback+0x1c>)
 8001352:	2201      	movs	r2, #1
 8001354:	701a      	strb	r2, [r3, #0]
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	240002e5 	.word	0x240002e5

08001368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800136c:	b672      	cpsid	i
}
 800136e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001370:	e7fe      	b.n	8001370 <Error_Handler+0x8>
	...

08001374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <HAL_MspInit+0x30>)
 800137c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001380:	4a08      	ldr	r2, [pc, #32]	; (80013a4 <HAL_MspInit+0x30>)
 8001382:	f043 0302 	orr.w	r3, r3, #2
 8001386:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_MspInit+0x30>)
 800138c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	58024400 	.word	0x58024400

080013a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b0ba      	sub	sp, #232	; 0xe8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	22c0      	movs	r2, #192	; 0xc0
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f00e fa1b 	bl	800f804 <memset>
  if(hi2c->Instance==I2C1)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a26      	ldr	r2, [pc, #152]	; (800146c <HAL_I2C_MspInit+0xc4>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d145      	bne.n	8001464 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013d8:	f04f 0208 	mov.w	r2, #8
 80013dc:	f04f 0300 	mov.w	r3, #0
 80013e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ea:	f107 0310 	add.w	r3, r7, #16
 80013ee:	4618      	mov	r0, r3
 80013f0:	f005 ffa2 	bl	8007338 <HAL_RCCEx_PeriphCLKConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80013fa:	f7ff ffb5 	bl	8001368 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <HAL_I2C_MspInit+0xc8>)
 8001400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001404:	4a1a      	ldr	r2, [pc, #104]	; (8001470 <HAL_I2C_MspInit+0xc8>)
 8001406:	f043 0302 	orr.w	r3, r3, #2
 800140a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800140e:	4b18      	ldr	r3, [pc, #96]	; (8001470 <HAL_I2C_MspInit+0xc8>)
 8001410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800141c:	23c0      	movs	r3, #192	; 0xc0
 800141e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001422:	2312      	movs	r3, #18
 8001424:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001434:	2304      	movs	r3, #4
 8001436:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800143e:	4619      	mov	r1, r3
 8001440:	480c      	ldr	r0, [pc, #48]	; (8001474 <HAL_I2C_MspInit+0xcc>)
 8001442:	f003 f98f 	bl	8004764 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_I2C_MspInit+0xc8>)
 8001448:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800144c:	4a08      	ldr	r2, [pc, #32]	; (8001470 <HAL_I2C_MspInit+0xc8>)
 800144e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001452:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_I2C_MspInit+0xc8>)
 8001458:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800145c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001464:	bf00      	nop
 8001466:	37e8      	adds	r7, #232	; 0xe8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40005400 	.word	0x40005400
 8001470:	58024400 	.word	0x58024400
 8001474:	58020400 	.word	0x58020400

08001478 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b0be      	sub	sp, #248	; 0xf8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001490:	f107 0320 	add.w	r3, r7, #32
 8001494:	22c0      	movs	r2, #192	; 0xc0
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f00e f9b3 	bl	800f804 <memset>
  if(hi2s->Instance==SPI1)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a7e      	ldr	r2, [pc, #504]	; (800169c <HAL_I2S_MspInit+0x224>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	f040 80f5 	bne.w	8001694 <HAL_I2S_MspInit+0x21c>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80014aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80014b6:	2301      	movs	r3, #1
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 80014ba:	2310      	movs	r3, #16
 80014bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 80014be:	2304      	movs	r3, #4
 80014c0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80014c2:	2302      	movs	r3, #2
 80014c4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80014c6:	2302      	movs	r3, #2
 80014c8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80014ca:	23c0      	movs	r3, #192	; 0xc0
 80014cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80014d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014de:	f107 0320 	add.w	r3, r7, #32
 80014e2:	4618      	mov	r0, r3
 80014e4:	f005 ff28 	bl	8007338 <HAL_RCCEx_PeriphCLKConfig>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_I2S_MspInit+0x7a>
    {
      Error_Handler();
 80014ee:	f7ff ff3b 	bl	8001368 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014f2:	4b6b      	ldr	r3, [pc, #428]	; (80016a0 <HAL_I2S_MspInit+0x228>)
 80014f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014f8:	4a69      	ldr	r2, [pc, #420]	; (80016a0 <HAL_I2S_MspInit+0x228>)
 80014fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001502:	4b67      	ldr	r3, [pc, #412]	; (80016a0 <HAL_I2S_MspInit+0x228>)
 8001504:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001508:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800150c:	61fb      	str	r3, [r7, #28]
 800150e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001510:	4b63      	ldr	r3, [pc, #396]	; (80016a0 <HAL_I2S_MspInit+0x228>)
 8001512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001516:	4a62      	ldr	r2, [pc, #392]	; (80016a0 <HAL_I2S_MspInit+0x228>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001520:	4b5f      	ldr	r3, [pc, #380]	; (80016a0 <HAL_I2S_MspInit+0x228>)
 8001522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	61bb      	str	r3, [r7, #24]
 800152c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800152e:	4b5c      	ldr	r3, [pc, #368]	; (80016a0 <HAL_I2S_MspInit+0x228>)
 8001530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001534:	4a5a      	ldr	r2, [pc, #360]	; (80016a0 <HAL_I2S_MspInit+0x228>)
 8001536:	f043 0304 	orr.w	r3, r3, #4
 800153a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800153e:	4b58      	ldr	r3, [pc, #352]	; (80016a0 <HAL_I2S_MspInit+0x228>)
 8001540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800154c:	4b54      	ldr	r3, [pc, #336]	; (80016a0 <HAL_I2S_MspInit+0x228>)
 800154e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001552:	4a53      	ldr	r2, [pc, #332]	; (80016a0 <HAL_I2S_MspInit+0x228>)
 8001554:	f043 0308 	orr.w	r3, r3, #8
 8001558:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <HAL_I2S_MspInit+0x228>)
 800155e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800156a:	4b4d      	ldr	r3, [pc, #308]	; (80016a0 <HAL_I2S_MspInit+0x228>)
 800156c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001570:	4a4b      	ldr	r2, [pc, #300]	; (80016a0 <HAL_I2S_MspInit+0x228>)
 8001572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001576:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800157a:	4b49      	ldr	r3, [pc, #292]	; (80016a0 <HAL_I2S_MspInit+0x228>)
 800157c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> I2S1_MCK
    PA15 (JTDI)     ------> I2S1_WS
    PD7     ------> I2S1_SDO
    PG9     ------> I2S1_SDI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 8001588:	f248 0320 	movw	r3, #32800	; 0x8020
 800158c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015a2:	2305      	movs	r3, #5
 80015a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015ac:	4619      	mov	r1, r3
 80015ae:	483d      	ldr	r0, [pc, #244]	; (80016a4 <HAL_I2S_MspInit+0x22c>)
 80015b0:	f003 f8d8 	bl	8004764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015b4:	2310      	movs	r3, #16
 80015b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015cc:	2305      	movs	r3, #5
 80015ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015d6:	4619      	mov	r1, r3
 80015d8:	4833      	ldr	r0, [pc, #204]	; (80016a8 <HAL_I2S_MspInit+0x230>)
 80015da:	f003 f8c3 	bl	8004764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015de:	2380      	movs	r3, #128	; 0x80
 80015e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015f6:	2305      	movs	r3, #5
 80015f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015fc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001600:	4619      	mov	r1, r3
 8001602:	482a      	ldr	r0, [pc, #168]	; (80016ac <HAL_I2S_MspInit+0x234>)
 8001604:	f003 f8ae 	bl	8004764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800160c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001622:	2305      	movs	r3, #5
 8001624:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001628:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800162c:	4619      	mov	r1, r3
 800162e:	4820      	ldr	r0, [pc, #128]	; (80016b0 <HAL_I2S_MspInit+0x238>)
 8001630:	f003 f898 	bl	8004764 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8001634:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <HAL_I2S_MspInit+0x23c>)
 8001636:	4a20      	ldr	r2, [pc, #128]	; (80016b8 <HAL_I2S_MspInit+0x240>)
 8001638:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800163a:	4b1e      	ldr	r3, [pc, #120]	; (80016b4 <HAL_I2S_MspInit+0x23c>)
 800163c:	2226      	movs	r2, #38	; 0x26
 800163e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001640:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <HAL_I2S_MspInit+0x23c>)
 8001642:	2240      	movs	r2, #64	; 0x40
 8001644:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001646:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <HAL_I2S_MspInit+0x23c>)
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800164c:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <HAL_I2S_MspInit+0x23c>)
 800164e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001652:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001654:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <HAL_I2S_MspInit+0x23c>)
 8001656:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800165a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800165c:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <HAL_I2S_MspInit+0x23c>)
 800165e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001662:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8001664:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <HAL_I2S_MspInit+0x23c>)
 8001666:	f44f 7280 	mov.w	r2, #256	; 0x100
 800166a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <HAL_I2S_MspInit+0x23c>)
 800166e:	2200      	movs	r2, #0
 8001670:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <HAL_I2S_MspInit+0x23c>)
 8001674:	2200      	movs	r2, #0
 8001676:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001678:	480e      	ldr	r0, [pc, #56]	; (80016b4 <HAL_I2S_MspInit+0x23c>)
 800167a:	f000 fc7d 	bl	8001f78 <HAL_DMA_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <HAL_I2S_MspInit+0x210>
    {
      Error_Handler();
 8001684:	f7ff fe70 	bl	8001368 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <HAL_I2S_MspInit+0x23c>)
 800168c:	645a      	str	r2, [r3, #68]	; 0x44
 800168e:	4a09      	ldr	r2, [pc, #36]	; (80016b4 <HAL_I2S_MspInit+0x23c>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001694:	bf00      	nop
 8001696:	37f8      	adds	r7, #248	; 0xf8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40013000 	.word	0x40013000
 80016a0:	58024400 	.word	0x58024400
 80016a4:	58020000 	.word	0x58020000
 80016a8:	58020800 	.word	0x58020800
 80016ac:	58020c00 	.word	0x58020c00
 80016b0:	58021800 	.word	0x58021800
 80016b4:	24000150 	.word	0x24000150
 80016b8:	40020010 	.word	0x40020010

080016bc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b0bc      	sub	sp, #240	; 0xf0
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016d4:	f107 0318 	add.w	r3, r7, #24
 80016d8:	22c0      	movs	r2, #192	; 0xc0
 80016da:	2100      	movs	r1, #0
 80016dc:	4618      	mov	r0, r3
 80016de:	f00e f891 	bl	800f804 <memset>
  if(hsd->Instance==SDMMC1)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a3c      	ldr	r2, [pc, #240]	; (80017d8 <HAL_SD_MspInit+0x11c>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d171      	bne.n	80017d0 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80016ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016fc:	f107 0318 	add.w	r3, r7, #24
 8001700:	4618      	mov	r0, r3
 8001702:	f005 fe19 	bl	8007338 <HAL_RCCEx_PeriphCLKConfig>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800170c:	f7ff fe2c 	bl	8001368 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001710:	4b32      	ldr	r3, [pc, #200]	; (80017dc <HAL_SD_MspInit+0x120>)
 8001712:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001716:	4a31      	ldr	r2, [pc, #196]	; (80017dc <HAL_SD_MspInit+0x120>)
 8001718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800171c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001720:	4b2e      	ldr	r3, [pc, #184]	; (80017dc <HAL_SD_MspInit+0x120>)
 8001722:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800172e:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <HAL_SD_MspInit+0x120>)
 8001730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001734:	4a29      	ldr	r2, [pc, #164]	; (80017dc <HAL_SD_MspInit+0x120>)
 8001736:	f043 0304 	orr.w	r3, r3, #4
 800173a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800173e:	4b27      	ldr	r3, [pc, #156]	; (80017dc <HAL_SD_MspInit+0x120>)
 8001740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800174c:	4b23      	ldr	r3, [pc, #140]	; (80017dc <HAL_SD_MspInit+0x120>)
 800174e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001752:	4a22      	ldr	r2, [pc, #136]	; (80017dc <HAL_SD_MspInit+0x120>)
 8001754:	f043 0308 	orr.w	r3, r3, #8
 8001758:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800175c:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <HAL_SD_MspInit+0x120>)
 800175e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800176a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800176e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177e:	2303      	movs	r3, #3
 8001780:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001784:	230c      	movs	r3, #12
 8001786:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800178a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800178e:	4619      	mov	r1, r3
 8001790:	4813      	ldr	r0, [pc, #76]	; (80017e0 <HAL_SD_MspInit+0x124>)
 8001792:	f002 ffe7 	bl	8004764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001796:	2304      	movs	r3, #4
 8001798:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a8:	2303      	movs	r3, #3
 80017aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80017ae:	230c      	movs	r3, #12
 80017b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017b8:	4619      	mov	r1, r3
 80017ba:	480a      	ldr	r0, [pc, #40]	; (80017e4 <HAL_SD_MspInit+0x128>)
 80017bc:	f002 ffd2 	bl	8004764 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2100      	movs	r1, #0
 80017c4:	2031      	movs	r0, #49	; 0x31
 80017c6:	f000 fba2 	bl	8001f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80017ca:	2031      	movs	r0, #49	; 0x31
 80017cc:	f000 fbb9 	bl	8001f42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80017d0:	bf00      	nop
 80017d2:	37f0      	adds	r7, #240	; 0xf0
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	52007000 	.word	0x52007000
 80017dc:	58024400 	.word	0x58024400
 80017e0:	58020800 	.word	0x58020800
 80017e4:	58020c00 	.word	0x58020c00

080017e8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b0b8      	sub	sp, #224	; 0xe0
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80017ee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80017fe:	4b51      	ldr	r3, [pc, #324]	; (8001944 <HAL_FMC_MspInit+0x15c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	f040 8099 	bne.w	800193a <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8001808:	4b4e      	ldr	r3, [pc, #312]	; (8001944 <HAL_FMC_MspInit+0x15c>)
 800180a:	2201      	movs	r2, #1
 800180c:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800180e:	f107 0308 	add.w	r3, r7, #8
 8001812:	22c0      	movs	r2, #192	; 0xc0
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f00d fff4 	bl	800f804 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800181c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8001828:	2300      	movs	r3, #0
 800182a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800182c:	f107 0308 	add.w	r3, r7, #8
 8001830:	4618      	mov	r0, r3
 8001832:	f005 fd81 	bl	8007338 <HAL_RCCEx_PeriphCLKConfig>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 800183c:	f7ff fd94 	bl	8001368 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001840:	4b41      	ldr	r3, [pc, #260]	; (8001948 <HAL_FMC_MspInit+0x160>)
 8001842:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001846:	4a40      	ldr	r2, [pc, #256]	; (8001948 <HAL_FMC_MspInit+0x160>)
 8001848:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800184c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001850:	4b3d      	ldr	r3, [pc, #244]	; (8001948 <HAL_FMC_MspInit+0x160>)
 8001852:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800185e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001862:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001872:	2303      	movs	r3, #3
 8001874:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001878:	230c      	movs	r3, #12
 800187a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800187e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001882:	4619      	mov	r1, r3
 8001884:	4831      	ldr	r0, [pc, #196]	; (800194c <HAL_FMC_MspInit+0x164>)
 8001886:	f002 ff6d 	bl	8004764 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800188a:	230d      	movs	r3, #13
 800188c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189c:	2303      	movs	r3, #3
 800189e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018a2:	230c      	movs	r3, #12
 80018a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018ac:	4619      	mov	r1, r3
 80018ae:	4828      	ldr	r0, [pc, #160]	; (8001950 <HAL_FMC_MspInit+0x168>)
 80018b0:	f002 ff58 	bl	8004764 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80018b4:	f248 1337 	movw	r3, #33079	; 0x8137
 80018b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c8:	2303      	movs	r3, #3
 80018ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018ce:	230c      	movs	r3, #12
 80018d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018d8:	4619      	mov	r1, r3
 80018da:	481e      	ldr	r0, [pc, #120]	; (8001954 <HAL_FMC_MspInit+0x16c>)
 80018dc:	f002 ff42 	bl	8004764 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80018e0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80018e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f4:	2303      	movs	r3, #3
 80018f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018fa:	230c      	movs	r3, #12
 80018fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001900:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001904:	4619      	mov	r1, r3
 8001906:	4814      	ldr	r0, [pc, #80]	; (8001958 <HAL_FMC_MspInit+0x170>)
 8001908:	f002 ff2c 	bl	8004764 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800190c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001910:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001920:	2303      	movs	r3, #3
 8001922:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001926:	230c      	movs	r3, #12
 8001928:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800192c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001930:	4619      	mov	r1, r3
 8001932:	480a      	ldr	r0, [pc, #40]	; (800195c <HAL_FMC_MspInit+0x174>)
 8001934:	f002 ff16 	bl	8004764 <HAL_GPIO_Init>
 8001938:	e000      	b.n	800193c <HAL_FMC_MspInit+0x154>
    return;
 800193a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800193c:	37e0      	adds	r7, #224	; 0xe0
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	240002e8 	.word	0x240002e8
 8001948:	58024400 	.word	0x58024400
 800194c:	58021400 	.word	0x58021400
 8001950:	58020800 	.word	0x58020800
 8001954:	58021800 	.word	0x58021800
 8001958:	58021000 	.word	0x58021000
 800195c:	58020c00 	.word	0x58020c00

08001960 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001968:	f7ff ff3e 	bl	80017e8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <NMI_Handler+0x4>

0800197a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <HardFault_Handler+0x4>

08001980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <MemManage_Handler+0x4>

08001986 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <BusFault_Handler+0x4>

0800198c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <UsageFault_Handler+0x4>

08001992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c0:	f000 f97a 	bl	8001cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <DMA1_Stream0_IRQHandler+0x10>)
 80019ce:	f001 fbb7 	bl	8003140 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	24000150 	.word	0x24000150

080019dc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80019e0:	4802      	ldr	r0, [pc, #8]	; (80019ec <SDMMC1_IRQHandler+0x10>)
 80019e2:	f008 fc11 	bl	800a208 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	240001c8 	.word	0x240001c8

080019f0 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel40_sdmmc1_end_data_0);
 80019f4:	4802      	ldr	r0, [pc, #8]	; (8001a00 <MDMA_IRQHandler+0x10>)
 80019f6:	f004 faa9 	bl	8005f4c <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	24000244 	.word	0x24000244

08001a04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a0c:	4a14      	ldr	r2, [pc, #80]	; (8001a60 <_sbrk+0x5c>)
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <_sbrk+0x60>)
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a18:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <_sbrk+0x64>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d102      	bne.n	8001a26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <_sbrk+0x64>)
 8001a22:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <_sbrk+0x68>)
 8001a24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <_sbrk+0x64>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d207      	bcs.n	8001a44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a34:	f00d fe94 	bl	800f760 <__errno>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a42:	e009      	b.n	8001a58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <_sbrk+0x64>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a4a:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <_sbrk+0x64>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	4a05      	ldr	r2, [pc, #20]	; (8001a68 <_sbrk+0x64>)
 8001a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a56:	68fb      	ldr	r3, [r7, #12]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	24080000 	.word	0x24080000
 8001a64:	00004000 	.word	0x00004000
 8001a68:	240002ec 	.word	0x240002ec
 8001a6c:	24000548 	.word	0x24000548

08001a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a74:	4b37      	ldr	r3, [pc, #220]	; (8001b54 <SystemInit+0xe4>)
 8001a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a7a:	4a36      	ldr	r2, [pc, #216]	; (8001b54 <SystemInit+0xe4>)
 8001a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a84:	4b34      	ldr	r3, [pc, #208]	; (8001b58 <SystemInit+0xe8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 030f 	and.w	r3, r3, #15
 8001a8c:	2b06      	cmp	r3, #6
 8001a8e:	d807      	bhi.n	8001aa0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a90:	4b31      	ldr	r3, [pc, #196]	; (8001b58 <SystemInit+0xe8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f023 030f 	bic.w	r3, r3, #15
 8001a98:	4a2f      	ldr	r2, [pc, #188]	; (8001b58 <SystemInit+0xe8>)
 8001a9a:	f043 0307 	orr.w	r3, r3, #7
 8001a9e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001aa0:	4b2e      	ldr	r3, [pc, #184]	; (8001b5c <SystemInit+0xec>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a2d      	ldr	r2, [pc, #180]	; (8001b5c <SystemInit+0xec>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001aac:	4b2b      	ldr	r3, [pc, #172]	; (8001b5c <SystemInit+0xec>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ab2:	4b2a      	ldr	r3, [pc, #168]	; (8001b5c <SystemInit+0xec>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	4929      	ldr	r1, [pc, #164]	; (8001b5c <SystemInit+0xec>)
 8001ab8:	4b29      	ldr	r3, [pc, #164]	; (8001b60 <SystemInit+0xf0>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001abe:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <SystemInit+0xe8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d007      	beq.n	8001ada <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001aca:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <SystemInit+0xe8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f023 030f 	bic.w	r3, r3, #15
 8001ad2:	4a21      	ldr	r2, [pc, #132]	; (8001b58 <SystemInit+0xe8>)
 8001ad4:	f043 0307 	orr.w	r3, r3, #7
 8001ad8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001ada:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <SystemInit+0xec>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ae0:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <SystemInit+0xec>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001ae6:	4b1d      	ldr	r3, [pc, #116]	; (8001b5c <SystemInit+0xec>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001aec:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <SystemInit+0xec>)
 8001aee:	4a1d      	ldr	r2, [pc, #116]	; (8001b64 <SystemInit+0xf4>)
 8001af0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001af2:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <SystemInit+0xec>)
 8001af4:	4a1c      	ldr	r2, [pc, #112]	; (8001b68 <SystemInit+0xf8>)
 8001af6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001af8:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <SystemInit+0xec>)
 8001afa:	4a1c      	ldr	r2, [pc, #112]	; (8001b6c <SystemInit+0xfc>)
 8001afc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001afe:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <SystemInit+0xec>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b04:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <SystemInit+0xec>)
 8001b06:	4a19      	ldr	r2, [pc, #100]	; (8001b6c <SystemInit+0xfc>)
 8001b08:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b0a:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <SystemInit+0xec>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <SystemInit+0xec>)
 8001b12:	4a16      	ldr	r2, [pc, #88]	; (8001b6c <SystemInit+0xfc>)
 8001b14:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <SystemInit+0xec>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <SystemInit+0xec>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a0e      	ldr	r2, [pc, #56]	; (8001b5c <SystemInit+0xec>)
 8001b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <SystemInit+0xec>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <SystemInit+0x100>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <SystemInit+0x104>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b3a:	d202      	bcs.n	8001b42 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001b3c:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <SystemInit+0x108>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <SystemInit+0x10c>)
 8001b44:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001b48:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001b4a:	bf00      	nop
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000ed00 	.word	0xe000ed00
 8001b58:	52002000 	.word	0x52002000
 8001b5c:	58024400 	.word	0x58024400
 8001b60:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b64:	02020200 	.word	0x02020200
 8001b68:	01ff0000 	.word	0x01ff0000
 8001b6c:	01010280 	.word	0x01010280
 8001b70:	5c001000 	.word	0x5c001000
 8001b74:	ffff0000 	.word	0xffff0000
 8001b78:	51008108 	.word	0x51008108
 8001b7c:	52004000 	.word	0x52004000

08001b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b84:	f7ff ff74 	bl	8001a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b88:	480c      	ldr	r0, [pc, #48]	; (8001bbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b8a:	490d      	ldr	r1, [pc, #52]	; (8001bc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b8c:	4a0d      	ldr	r2, [pc, #52]	; (8001bc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b90:	e002      	b.n	8001b98 <LoopCopyDataInit>

08001b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b96:	3304      	adds	r3, #4

08001b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b9c:	d3f9      	bcc.n	8001b92 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ba0:	4c0a      	ldr	r4, [pc, #40]	; (8001bcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba4:	e001      	b.n	8001baa <LoopFillZerobss>

08001ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba8:	3204      	adds	r2, #4

08001baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bac:	d3fb      	bcc.n	8001ba6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bae:	f00d fddd 	bl	800f76c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bb2:	f7fe ff6f 	bl	8000a94 <main>
  bx  lr
 8001bb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bb8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001bbc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001bc0:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8001bc4:	08010ce8 	.word	0x08010ce8
  ldr r2, =_sbss
 8001bc8:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8001bcc:	24000548 	.word	0x24000548

08001bd0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bd0:	e7fe      	b.n	8001bd0 <ADC3_IRQHandler>
	...

08001bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bda:	2003      	movs	r0, #3
 8001bdc:	f000 f98c 	bl	8001ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001be0:	f005 f9ea 	bl	8006fb8 <HAL_RCC_GetSysClockFreq>
 8001be4:	4602      	mov	r2, r0
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <HAL_Init+0x68>)
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	0a1b      	lsrs	r3, r3, #8
 8001bec:	f003 030f 	and.w	r3, r3, #15
 8001bf0:	4913      	ldr	r1, [pc, #76]	; (8001c40 <HAL_Init+0x6c>)
 8001bf2:	5ccb      	ldrb	r3, [r1, r3]
 8001bf4:	f003 031f 	and.w	r3, r3, #31
 8001bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <HAL_Init+0x68>)
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	4a0e      	ldr	r2, [pc, #56]	; (8001c40 <HAL_Init+0x6c>)
 8001c08:	5cd3      	ldrb	r3, [r2, r3]
 8001c0a:	f003 031f 	and.w	r3, r3, #31
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	fa22 f303 	lsr.w	r3, r2, r3
 8001c14:	4a0b      	ldr	r2, [pc, #44]	; (8001c44 <HAL_Init+0x70>)
 8001c16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c18:	4a0b      	ldr	r2, [pc, #44]	; (8001c48 <HAL_Init+0x74>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c1e:	200f      	movs	r0, #15
 8001c20:	f000 f814 	bl	8001c4c <HAL_InitTick>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e002      	b.n	8001c34 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c2e:	f7ff fba1 	bl	8001374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	58024400 	.word	0x58024400
 8001c40:	08010840 	.word	0x08010840
 8001c44:	2400000c 	.word	0x2400000c
 8001c48:	24000008 	.word	0x24000008

08001c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c54:	4b15      	ldr	r3, [pc, #84]	; (8001cac <HAL_InitTick+0x60>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e021      	b.n	8001ca4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <HAL_InitTick+0x64>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <HAL_InitTick+0x60>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 f971 	bl	8001f5e <HAL_SYSTICK_Config>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e00e      	b.n	8001ca4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b0f      	cmp	r3, #15
 8001c8a:	d80a      	bhi.n	8001ca2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c94:	f000 f93b 	bl	8001f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c98:	4a06      	ldr	r2, [pc, #24]	; (8001cb4 <HAL_InitTick+0x68>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	e000      	b.n	8001ca4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	24000014 	.word	0x24000014
 8001cb0:	24000008 	.word	0x24000008
 8001cb4:	24000010 	.word	0x24000010

08001cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_IncTick+0x20>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_IncTick+0x24>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <HAL_IncTick+0x24>)
 8001cca:	6013      	str	r3, [r2, #0]
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	24000014 	.word	0x24000014
 8001cdc:	240002f0 	.word	0x240002f0

08001ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <HAL_GetTick+0x14>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	240002f0 	.word	0x240002f0

08001cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d00:	f7ff ffee 	bl	8001ce0 <HAL_GetTick>
 8001d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d10:	d005      	beq.n	8001d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <HAL_Delay+0x44>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d1e:	bf00      	nop
 8001d20:	f7ff ffde 	bl	8001ce0 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d8f7      	bhi.n	8001d20 <HAL_Delay+0x28>
  {
  }
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	24000014 	.word	0x24000014

08001d40 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <HAL_GetREVID+0x14>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	0c1b      	lsrs	r3, r3, #16
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	5c001000 	.word	0x5c001000

08001d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d68:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <__NVIC_SetPriorityGrouping+0x40>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d74:	4013      	ands	r3, r2
 8001d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <__NVIC_SetPriorityGrouping+0x44>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d86:	4a04      	ldr	r2, [pc, #16]	; (8001d98 <__NVIC_SetPriorityGrouping+0x40>)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	60d3      	str	r3, [r2, #12]
}
 8001d8c:	bf00      	nop
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000ed00 	.word	0xe000ed00
 8001d9c:	05fa0000 	.word	0x05fa0000

08001da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001da4:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <__NVIC_GetPriorityGrouping+0x18>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	0a1b      	lsrs	r3, r3, #8
 8001daa:	f003 0307 	and.w	r3, r3, #7
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	db0b      	blt.n	8001de6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	f003 021f 	and.w	r2, r3, #31
 8001dd4:	4907      	ldr	r1, [pc, #28]	; (8001df4 <__NVIC_EnableIRQ+0x38>)
 8001dd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dda:	095b      	lsrs	r3, r3, #5
 8001ddc:	2001      	movs	r0, #1
 8001dde:	fa00 f202 	lsl.w	r2, r0, r2
 8001de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000e100 	.word	0xe000e100

08001df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	6039      	str	r1, [r7, #0]
 8001e02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	db0a      	blt.n	8001e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	490c      	ldr	r1, [pc, #48]	; (8001e44 <__NVIC_SetPriority+0x4c>)
 8001e12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e16:	0112      	lsls	r2, r2, #4
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e20:	e00a      	b.n	8001e38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4908      	ldr	r1, [pc, #32]	; (8001e48 <__NVIC_SetPriority+0x50>)
 8001e28:	88fb      	ldrh	r3, [r7, #6]
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	3b04      	subs	r3, #4
 8001e30:	0112      	lsls	r2, r2, #4
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	440b      	add	r3, r1
 8001e36:	761a      	strb	r2, [r3, #24]
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000e100 	.word	0xe000e100
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b089      	sub	sp, #36	; 0x24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f1c3 0307 	rsb	r3, r3, #7
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	bf28      	it	cs
 8001e6a:	2304      	movcs	r3, #4
 8001e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3304      	adds	r3, #4
 8001e72:	2b06      	cmp	r3, #6
 8001e74:	d902      	bls.n	8001e7c <NVIC_EncodePriority+0x30>
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3b03      	subs	r3, #3
 8001e7a:	e000      	b.n	8001e7e <NVIC_EncodePriority+0x32>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	401a      	ands	r2, r3
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9e:	43d9      	mvns	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	4313      	orrs	r3, r2
         );
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3724      	adds	r7, #36	; 0x24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ec4:	d301      	bcc.n	8001eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e00f      	b.n	8001eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eca:	4a0a      	ldr	r2, [pc, #40]	; (8001ef4 <SysTick_Config+0x40>)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed2:	210f      	movs	r1, #15
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ed8:	f7ff ff8e 	bl	8001df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <SysTick_Config+0x40>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee2:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <SysTick_Config+0x40>)
 8001ee4:	2207      	movs	r2, #7
 8001ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	e000e010 	.word	0xe000e010

08001ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff ff29 	bl	8001d58 <__NVIC_SetPriorityGrouping>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b086      	sub	sp, #24
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4603      	mov	r3, r0
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
 8001f1a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f1c:	f7ff ff40 	bl	8001da0 <__NVIC_GetPriorityGrouping>
 8001f20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	68b9      	ldr	r1, [r7, #8]
 8001f26:	6978      	ldr	r0, [r7, #20]
 8001f28:	f7ff ff90 	bl	8001e4c <NVIC_EncodePriority>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f32:	4611      	mov	r1, r2
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff ff5f 	bl	8001df8 <__NVIC_SetPriority>
}
 8001f3a:	bf00      	nop
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	4603      	mov	r3, r0
 8001f4a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff ff33 	bl	8001dbc <__NVIC_EnableIRQ>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff ffa4 	bl	8001eb4 <SysTick_Config>
 8001f6c:	4603      	mov	r3, r0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001f80:	f7ff feae 	bl	8001ce0 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e316      	b.n	80025be <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a66      	ldr	r2, [pc, #408]	; (8002130 <HAL_DMA_Init+0x1b8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d04a      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a65      	ldr	r2, [pc, #404]	; (8002134 <HAL_DMA_Init+0x1bc>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d045      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a63      	ldr	r2, [pc, #396]	; (8002138 <HAL_DMA_Init+0x1c0>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d040      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a62      	ldr	r2, [pc, #392]	; (800213c <HAL_DMA_Init+0x1c4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d03b      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a60      	ldr	r2, [pc, #384]	; (8002140 <HAL_DMA_Init+0x1c8>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d036      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a5f      	ldr	r2, [pc, #380]	; (8002144 <HAL_DMA_Init+0x1cc>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d031      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a5d      	ldr	r2, [pc, #372]	; (8002148 <HAL_DMA_Init+0x1d0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d02c      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a5c      	ldr	r2, [pc, #368]	; (800214c <HAL_DMA_Init+0x1d4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d027      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a5a      	ldr	r2, [pc, #360]	; (8002150 <HAL_DMA_Init+0x1d8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d022      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a59      	ldr	r2, [pc, #356]	; (8002154 <HAL_DMA_Init+0x1dc>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d01d      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a57      	ldr	r2, [pc, #348]	; (8002158 <HAL_DMA_Init+0x1e0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d018      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a56      	ldr	r2, [pc, #344]	; (800215c <HAL_DMA_Init+0x1e4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d013      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a54      	ldr	r2, [pc, #336]	; (8002160 <HAL_DMA_Init+0x1e8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00e      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a53      	ldr	r2, [pc, #332]	; (8002164 <HAL_DMA_Init+0x1ec>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d009      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a51      	ldr	r2, [pc, #324]	; (8002168 <HAL_DMA_Init+0x1f0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d004      	beq.n	8002030 <HAL_DMA_Init+0xb8>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a50      	ldr	r2, [pc, #320]	; (800216c <HAL_DMA_Init+0x1f4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d101      	bne.n	8002034 <HAL_DMA_Init+0xbc>
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <HAL_DMA_Init+0xbe>
 8002034:	2300      	movs	r3, #0
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 813b 	beq.w	80022b2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2202      	movs	r2, #2
 8002040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a37      	ldr	r2, [pc, #220]	; (8002130 <HAL_DMA_Init+0x1b8>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d04a      	beq.n	80020ec <HAL_DMA_Init+0x174>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a36      	ldr	r2, [pc, #216]	; (8002134 <HAL_DMA_Init+0x1bc>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d045      	beq.n	80020ec <HAL_DMA_Init+0x174>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a34      	ldr	r2, [pc, #208]	; (8002138 <HAL_DMA_Init+0x1c0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d040      	beq.n	80020ec <HAL_DMA_Init+0x174>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a33      	ldr	r2, [pc, #204]	; (800213c <HAL_DMA_Init+0x1c4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d03b      	beq.n	80020ec <HAL_DMA_Init+0x174>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a31      	ldr	r2, [pc, #196]	; (8002140 <HAL_DMA_Init+0x1c8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d036      	beq.n	80020ec <HAL_DMA_Init+0x174>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a30      	ldr	r2, [pc, #192]	; (8002144 <HAL_DMA_Init+0x1cc>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d031      	beq.n	80020ec <HAL_DMA_Init+0x174>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a2e      	ldr	r2, [pc, #184]	; (8002148 <HAL_DMA_Init+0x1d0>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d02c      	beq.n	80020ec <HAL_DMA_Init+0x174>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a2d      	ldr	r2, [pc, #180]	; (800214c <HAL_DMA_Init+0x1d4>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d027      	beq.n	80020ec <HAL_DMA_Init+0x174>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a2b      	ldr	r2, [pc, #172]	; (8002150 <HAL_DMA_Init+0x1d8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d022      	beq.n	80020ec <HAL_DMA_Init+0x174>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a2a      	ldr	r2, [pc, #168]	; (8002154 <HAL_DMA_Init+0x1dc>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d01d      	beq.n	80020ec <HAL_DMA_Init+0x174>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a28      	ldr	r2, [pc, #160]	; (8002158 <HAL_DMA_Init+0x1e0>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d018      	beq.n	80020ec <HAL_DMA_Init+0x174>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a27      	ldr	r2, [pc, #156]	; (800215c <HAL_DMA_Init+0x1e4>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d013      	beq.n	80020ec <HAL_DMA_Init+0x174>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a25      	ldr	r2, [pc, #148]	; (8002160 <HAL_DMA_Init+0x1e8>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d00e      	beq.n	80020ec <HAL_DMA_Init+0x174>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a24      	ldr	r2, [pc, #144]	; (8002164 <HAL_DMA_Init+0x1ec>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d009      	beq.n	80020ec <HAL_DMA_Init+0x174>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a22      	ldr	r2, [pc, #136]	; (8002168 <HAL_DMA_Init+0x1f0>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d004      	beq.n	80020ec <HAL_DMA_Init+0x174>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a21      	ldr	r2, [pc, #132]	; (800216c <HAL_DMA_Init+0x1f4>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d108      	bne.n	80020fe <HAL_DMA_Init+0x186>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0201 	bic.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	e007      	b.n	800210e <HAL_DMA_Init+0x196>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0201 	bic.w	r2, r2, #1
 800210c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800210e:	e02f      	b.n	8002170 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002110:	f7ff fde6 	bl	8001ce0 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b05      	cmp	r3, #5
 800211c:	d928      	bls.n	8002170 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2220      	movs	r2, #32
 8002122:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2203      	movs	r2, #3
 8002128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e246      	b.n	80025be <HAL_DMA_Init+0x646>
 8002130:	40020010 	.word	0x40020010
 8002134:	40020028 	.word	0x40020028
 8002138:	40020040 	.word	0x40020040
 800213c:	40020058 	.word	0x40020058
 8002140:	40020070 	.word	0x40020070
 8002144:	40020088 	.word	0x40020088
 8002148:	400200a0 	.word	0x400200a0
 800214c:	400200b8 	.word	0x400200b8
 8002150:	40020410 	.word	0x40020410
 8002154:	40020428 	.word	0x40020428
 8002158:	40020440 	.word	0x40020440
 800215c:	40020458 	.word	0x40020458
 8002160:	40020470 	.word	0x40020470
 8002164:	40020488 	.word	0x40020488
 8002168:	400204a0 	.word	0x400204a0
 800216c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1c8      	bne.n	8002110 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4b83      	ldr	r3, [pc, #524]	; (8002398 <HAL_DMA_Init+0x420>)
 800218a:	4013      	ands	r3, r2
 800218c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002196:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d107      	bne.n	80021d4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021cc:	4313      	orrs	r3, r2
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80021d4:	4b71      	ldr	r3, [pc, #452]	; (800239c <HAL_DMA_Init+0x424>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	4b71      	ldr	r3, [pc, #452]	; (80023a0 <HAL_DMA_Init+0x428>)
 80021da:	4013      	ands	r3, r2
 80021dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021e0:	d328      	bcc.n	8002234 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b28      	cmp	r3, #40	; 0x28
 80021e8:	d903      	bls.n	80021f2 <HAL_DMA_Init+0x27a>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b2e      	cmp	r3, #46	; 0x2e
 80021f0:	d917      	bls.n	8002222 <HAL_DMA_Init+0x2aa>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b3e      	cmp	r3, #62	; 0x3e
 80021f8:	d903      	bls.n	8002202 <HAL_DMA_Init+0x28a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b42      	cmp	r3, #66	; 0x42
 8002200:	d90f      	bls.n	8002222 <HAL_DMA_Init+0x2aa>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b46      	cmp	r3, #70	; 0x46
 8002208:	d903      	bls.n	8002212 <HAL_DMA_Init+0x29a>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b48      	cmp	r3, #72	; 0x48
 8002210:	d907      	bls.n	8002222 <HAL_DMA_Init+0x2aa>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b4e      	cmp	r3, #78	; 0x4e
 8002218:	d905      	bls.n	8002226 <HAL_DMA_Init+0x2ae>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b52      	cmp	r3, #82	; 0x52
 8002220:	d801      	bhi.n	8002226 <HAL_DMA_Init+0x2ae>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <HAL_DMA_Init+0x2b0>
 8002226:	2300      	movs	r3, #0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002232:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f023 0307 	bic.w	r3, r3, #7
 800224a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	4313      	orrs	r3, r2
 8002254:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	2b04      	cmp	r3, #4
 800225c:	d117      	bne.n	800228e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	4313      	orrs	r3, r2
 8002266:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00e      	beq.n	800228e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f002 f8ed 	bl	8004450 <DMA_CheckFifoParam>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2240      	movs	r2, #64	; 0x40
 8002280:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e197      	b.n	80025be <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f002 f828 	bl	80042ec <DMA_CalcBaseAndBitshift>
 800229c:	4603      	mov	r3, r0
 800229e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a4:	f003 031f 	and.w	r3, r3, #31
 80022a8:	223f      	movs	r2, #63	; 0x3f
 80022aa:	409a      	lsls	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	e0cd      	b.n	800244e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a3b      	ldr	r2, [pc, #236]	; (80023a4 <HAL_DMA_Init+0x42c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d022      	beq.n	8002302 <HAL_DMA_Init+0x38a>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a39      	ldr	r2, [pc, #228]	; (80023a8 <HAL_DMA_Init+0x430>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d01d      	beq.n	8002302 <HAL_DMA_Init+0x38a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a38      	ldr	r2, [pc, #224]	; (80023ac <HAL_DMA_Init+0x434>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d018      	beq.n	8002302 <HAL_DMA_Init+0x38a>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a36      	ldr	r2, [pc, #216]	; (80023b0 <HAL_DMA_Init+0x438>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d013      	beq.n	8002302 <HAL_DMA_Init+0x38a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a35      	ldr	r2, [pc, #212]	; (80023b4 <HAL_DMA_Init+0x43c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d00e      	beq.n	8002302 <HAL_DMA_Init+0x38a>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a33      	ldr	r2, [pc, #204]	; (80023b8 <HAL_DMA_Init+0x440>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d009      	beq.n	8002302 <HAL_DMA_Init+0x38a>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a32      	ldr	r2, [pc, #200]	; (80023bc <HAL_DMA_Init+0x444>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d004      	beq.n	8002302 <HAL_DMA_Init+0x38a>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a30      	ldr	r2, [pc, #192]	; (80023c0 <HAL_DMA_Init+0x448>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d101      	bne.n	8002306 <HAL_DMA_Init+0x38e>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <HAL_DMA_Init+0x390>
 8002306:	2300      	movs	r3, #0
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 8097 	beq.w	800243c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a24      	ldr	r2, [pc, #144]	; (80023a4 <HAL_DMA_Init+0x42c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d021      	beq.n	800235c <HAL_DMA_Init+0x3e4>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a22      	ldr	r2, [pc, #136]	; (80023a8 <HAL_DMA_Init+0x430>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d01c      	beq.n	800235c <HAL_DMA_Init+0x3e4>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a21      	ldr	r2, [pc, #132]	; (80023ac <HAL_DMA_Init+0x434>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d017      	beq.n	800235c <HAL_DMA_Init+0x3e4>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a1f      	ldr	r2, [pc, #124]	; (80023b0 <HAL_DMA_Init+0x438>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d012      	beq.n	800235c <HAL_DMA_Init+0x3e4>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a1e      	ldr	r2, [pc, #120]	; (80023b4 <HAL_DMA_Init+0x43c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d00d      	beq.n	800235c <HAL_DMA_Init+0x3e4>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a1c      	ldr	r2, [pc, #112]	; (80023b8 <HAL_DMA_Init+0x440>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d008      	beq.n	800235c <HAL_DMA_Init+0x3e4>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a1b      	ldr	r2, [pc, #108]	; (80023bc <HAL_DMA_Init+0x444>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d003      	beq.n	800235c <HAL_DMA_Init+0x3e4>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a19      	ldr	r2, [pc, #100]	; (80023c0 <HAL_DMA_Init+0x448>)
 800235a:	4293      	cmp	r3, r2
 800235c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2202      	movs	r2, #2
 8002362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <HAL_DMA_Init+0x44c>)
 800237a:	4013      	ands	r3, r2
 800237c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2b40      	cmp	r3, #64	; 0x40
 8002384:	d020      	beq.n	80023c8 <HAL_DMA_Init+0x450>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2b80      	cmp	r3, #128	; 0x80
 800238c:	d102      	bne.n	8002394 <HAL_DMA_Init+0x41c>
 800238e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002392:	e01a      	b.n	80023ca <HAL_DMA_Init+0x452>
 8002394:	2300      	movs	r3, #0
 8002396:	e018      	b.n	80023ca <HAL_DMA_Init+0x452>
 8002398:	fe10803f 	.word	0xfe10803f
 800239c:	5c001000 	.word	0x5c001000
 80023a0:	ffff0000 	.word	0xffff0000
 80023a4:	58025408 	.word	0x58025408
 80023a8:	5802541c 	.word	0x5802541c
 80023ac:	58025430 	.word	0x58025430
 80023b0:	58025444 	.word	0x58025444
 80023b4:	58025458 	.word	0x58025458
 80023b8:	5802546c 	.word	0x5802546c
 80023bc:	58025480 	.word	0x58025480
 80023c0:	58025494 	.word	0x58025494
 80023c4:	fffe000f 	.word	0xfffe000f
 80023c8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68d2      	ldr	r2, [r2, #12]
 80023ce:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80023d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80023d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80023e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80023e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80023f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80023f8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	461a      	mov	r2, r3
 800240e:	4b6e      	ldr	r3, [pc, #440]	; (80025c8 <HAL_DMA_Init+0x650>)
 8002410:	4413      	add	r3, r2
 8002412:	4a6e      	ldr	r2, [pc, #440]	; (80025cc <HAL_DMA_Init+0x654>)
 8002414:	fba2 2303 	umull	r2, r3, r2, r3
 8002418:	091b      	lsrs	r3, r3, #4
 800241a:	009a      	lsls	r2, r3, #2
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f001 ff63 	bl	80042ec <DMA_CalcBaseAndBitshift>
 8002426:	4603      	mov	r3, r0
 8002428:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242e:	f003 031f 	and.w	r3, r3, #31
 8002432:	2201      	movs	r2, #1
 8002434:	409a      	lsls	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	e008      	b.n	800244e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2240      	movs	r2, #64	; 0x40
 8002440:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2203      	movs	r2, #3
 8002446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e0b7      	b.n	80025be <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a5f      	ldr	r2, [pc, #380]	; (80025d0 <HAL_DMA_Init+0x658>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d072      	beq.n	800253e <HAL_DMA_Init+0x5c6>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a5d      	ldr	r2, [pc, #372]	; (80025d4 <HAL_DMA_Init+0x65c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d06d      	beq.n	800253e <HAL_DMA_Init+0x5c6>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a5c      	ldr	r2, [pc, #368]	; (80025d8 <HAL_DMA_Init+0x660>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d068      	beq.n	800253e <HAL_DMA_Init+0x5c6>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a5a      	ldr	r2, [pc, #360]	; (80025dc <HAL_DMA_Init+0x664>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d063      	beq.n	800253e <HAL_DMA_Init+0x5c6>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a59      	ldr	r2, [pc, #356]	; (80025e0 <HAL_DMA_Init+0x668>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d05e      	beq.n	800253e <HAL_DMA_Init+0x5c6>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a57      	ldr	r2, [pc, #348]	; (80025e4 <HAL_DMA_Init+0x66c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d059      	beq.n	800253e <HAL_DMA_Init+0x5c6>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a56      	ldr	r2, [pc, #344]	; (80025e8 <HAL_DMA_Init+0x670>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d054      	beq.n	800253e <HAL_DMA_Init+0x5c6>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a54      	ldr	r2, [pc, #336]	; (80025ec <HAL_DMA_Init+0x674>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d04f      	beq.n	800253e <HAL_DMA_Init+0x5c6>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a53      	ldr	r2, [pc, #332]	; (80025f0 <HAL_DMA_Init+0x678>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d04a      	beq.n	800253e <HAL_DMA_Init+0x5c6>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a51      	ldr	r2, [pc, #324]	; (80025f4 <HAL_DMA_Init+0x67c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d045      	beq.n	800253e <HAL_DMA_Init+0x5c6>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a50      	ldr	r2, [pc, #320]	; (80025f8 <HAL_DMA_Init+0x680>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d040      	beq.n	800253e <HAL_DMA_Init+0x5c6>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a4e      	ldr	r2, [pc, #312]	; (80025fc <HAL_DMA_Init+0x684>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d03b      	beq.n	800253e <HAL_DMA_Init+0x5c6>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a4d      	ldr	r2, [pc, #308]	; (8002600 <HAL_DMA_Init+0x688>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d036      	beq.n	800253e <HAL_DMA_Init+0x5c6>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a4b      	ldr	r2, [pc, #300]	; (8002604 <HAL_DMA_Init+0x68c>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d031      	beq.n	800253e <HAL_DMA_Init+0x5c6>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a4a      	ldr	r2, [pc, #296]	; (8002608 <HAL_DMA_Init+0x690>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d02c      	beq.n	800253e <HAL_DMA_Init+0x5c6>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a48      	ldr	r2, [pc, #288]	; (800260c <HAL_DMA_Init+0x694>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d027      	beq.n	800253e <HAL_DMA_Init+0x5c6>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a47      	ldr	r2, [pc, #284]	; (8002610 <HAL_DMA_Init+0x698>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d022      	beq.n	800253e <HAL_DMA_Init+0x5c6>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a45      	ldr	r2, [pc, #276]	; (8002614 <HAL_DMA_Init+0x69c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d01d      	beq.n	800253e <HAL_DMA_Init+0x5c6>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a44      	ldr	r2, [pc, #272]	; (8002618 <HAL_DMA_Init+0x6a0>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d018      	beq.n	800253e <HAL_DMA_Init+0x5c6>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a42      	ldr	r2, [pc, #264]	; (800261c <HAL_DMA_Init+0x6a4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d013      	beq.n	800253e <HAL_DMA_Init+0x5c6>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a41      	ldr	r2, [pc, #260]	; (8002620 <HAL_DMA_Init+0x6a8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d00e      	beq.n	800253e <HAL_DMA_Init+0x5c6>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a3f      	ldr	r2, [pc, #252]	; (8002624 <HAL_DMA_Init+0x6ac>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d009      	beq.n	800253e <HAL_DMA_Init+0x5c6>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a3e      	ldr	r2, [pc, #248]	; (8002628 <HAL_DMA_Init+0x6b0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d004      	beq.n	800253e <HAL_DMA_Init+0x5c6>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a3c      	ldr	r2, [pc, #240]	; (800262c <HAL_DMA_Init+0x6b4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d101      	bne.n	8002542 <HAL_DMA_Init+0x5ca>
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <HAL_DMA_Init+0x5cc>
 8002542:	2300      	movs	r3, #0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d032      	beq.n	80025ae <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f001 fffd 	bl	8004548 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	2b80      	cmp	r3, #128	; 0x80
 8002554:	d102      	bne.n	800255c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002570:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d010      	beq.n	800259c <HAL_DMA_Init+0x624>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b08      	cmp	r3, #8
 8002580:	d80c      	bhi.n	800259c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f002 f87a 	bl	800467c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	e008      	b.n	80025ae <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	a7fdabf8 	.word	0xa7fdabf8
 80025cc:	cccccccd 	.word	0xcccccccd
 80025d0:	40020010 	.word	0x40020010
 80025d4:	40020028 	.word	0x40020028
 80025d8:	40020040 	.word	0x40020040
 80025dc:	40020058 	.word	0x40020058
 80025e0:	40020070 	.word	0x40020070
 80025e4:	40020088 	.word	0x40020088
 80025e8:	400200a0 	.word	0x400200a0
 80025ec:	400200b8 	.word	0x400200b8
 80025f0:	40020410 	.word	0x40020410
 80025f4:	40020428 	.word	0x40020428
 80025f8:	40020440 	.word	0x40020440
 80025fc:	40020458 	.word	0x40020458
 8002600:	40020470 	.word	0x40020470
 8002604:	40020488 	.word	0x40020488
 8002608:	400204a0 	.word	0x400204a0
 800260c:	400204b8 	.word	0x400204b8
 8002610:	58025408 	.word	0x58025408
 8002614:	5802541c 	.word	0x5802541c
 8002618:	58025430 	.word	0x58025430
 800261c:	58025444 	.word	0x58025444
 8002620:	58025458 	.word	0x58025458
 8002624:	5802546c 	.word	0x5802546c
 8002628:	58025480 	.word	0x58025480
 800262c:	58025494 	.word	0x58025494

08002630 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e226      	b.n	8002a9a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002652:	2b01      	cmp	r3, #1
 8002654:	d101      	bne.n	800265a <HAL_DMA_Start_IT+0x2a>
 8002656:	2302      	movs	r3, #2
 8002658:	e21f      	b.n	8002a9a <HAL_DMA_Start_IT+0x46a>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b01      	cmp	r3, #1
 800266c:	f040 820a 	bne.w	8002a84 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2202      	movs	r2, #2
 8002674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a68      	ldr	r2, [pc, #416]	; (8002824 <HAL_DMA_Start_IT+0x1f4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d04a      	beq.n	800271e <HAL_DMA_Start_IT+0xee>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a66      	ldr	r2, [pc, #408]	; (8002828 <HAL_DMA_Start_IT+0x1f8>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d045      	beq.n	800271e <HAL_DMA_Start_IT+0xee>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a65      	ldr	r2, [pc, #404]	; (800282c <HAL_DMA_Start_IT+0x1fc>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d040      	beq.n	800271e <HAL_DMA_Start_IT+0xee>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a63      	ldr	r2, [pc, #396]	; (8002830 <HAL_DMA_Start_IT+0x200>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d03b      	beq.n	800271e <HAL_DMA_Start_IT+0xee>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a62      	ldr	r2, [pc, #392]	; (8002834 <HAL_DMA_Start_IT+0x204>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d036      	beq.n	800271e <HAL_DMA_Start_IT+0xee>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a60      	ldr	r2, [pc, #384]	; (8002838 <HAL_DMA_Start_IT+0x208>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d031      	beq.n	800271e <HAL_DMA_Start_IT+0xee>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a5f      	ldr	r2, [pc, #380]	; (800283c <HAL_DMA_Start_IT+0x20c>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d02c      	beq.n	800271e <HAL_DMA_Start_IT+0xee>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a5d      	ldr	r2, [pc, #372]	; (8002840 <HAL_DMA_Start_IT+0x210>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d027      	beq.n	800271e <HAL_DMA_Start_IT+0xee>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a5c      	ldr	r2, [pc, #368]	; (8002844 <HAL_DMA_Start_IT+0x214>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d022      	beq.n	800271e <HAL_DMA_Start_IT+0xee>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a5a      	ldr	r2, [pc, #360]	; (8002848 <HAL_DMA_Start_IT+0x218>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d01d      	beq.n	800271e <HAL_DMA_Start_IT+0xee>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a59      	ldr	r2, [pc, #356]	; (800284c <HAL_DMA_Start_IT+0x21c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d018      	beq.n	800271e <HAL_DMA_Start_IT+0xee>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a57      	ldr	r2, [pc, #348]	; (8002850 <HAL_DMA_Start_IT+0x220>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d013      	beq.n	800271e <HAL_DMA_Start_IT+0xee>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a56      	ldr	r2, [pc, #344]	; (8002854 <HAL_DMA_Start_IT+0x224>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d00e      	beq.n	800271e <HAL_DMA_Start_IT+0xee>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a54      	ldr	r2, [pc, #336]	; (8002858 <HAL_DMA_Start_IT+0x228>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d009      	beq.n	800271e <HAL_DMA_Start_IT+0xee>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a53      	ldr	r2, [pc, #332]	; (800285c <HAL_DMA_Start_IT+0x22c>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d004      	beq.n	800271e <HAL_DMA_Start_IT+0xee>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a51      	ldr	r2, [pc, #324]	; (8002860 <HAL_DMA_Start_IT+0x230>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d108      	bne.n	8002730 <HAL_DMA_Start_IT+0x100>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0201 	bic.w	r2, r2, #1
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	e007      	b.n	8002740 <HAL_DMA_Start_IT+0x110>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0201 	bic.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	68b9      	ldr	r1, [r7, #8]
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f001 fc24 	bl	8003f94 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a34      	ldr	r2, [pc, #208]	; (8002824 <HAL_DMA_Start_IT+0x1f4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d04a      	beq.n	80027ec <HAL_DMA_Start_IT+0x1bc>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a33      	ldr	r2, [pc, #204]	; (8002828 <HAL_DMA_Start_IT+0x1f8>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d045      	beq.n	80027ec <HAL_DMA_Start_IT+0x1bc>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a31      	ldr	r2, [pc, #196]	; (800282c <HAL_DMA_Start_IT+0x1fc>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d040      	beq.n	80027ec <HAL_DMA_Start_IT+0x1bc>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a30      	ldr	r2, [pc, #192]	; (8002830 <HAL_DMA_Start_IT+0x200>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d03b      	beq.n	80027ec <HAL_DMA_Start_IT+0x1bc>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a2e      	ldr	r2, [pc, #184]	; (8002834 <HAL_DMA_Start_IT+0x204>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d036      	beq.n	80027ec <HAL_DMA_Start_IT+0x1bc>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a2d      	ldr	r2, [pc, #180]	; (8002838 <HAL_DMA_Start_IT+0x208>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d031      	beq.n	80027ec <HAL_DMA_Start_IT+0x1bc>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a2b      	ldr	r2, [pc, #172]	; (800283c <HAL_DMA_Start_IT+0x20c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d02c      	beq.n	80027ec <HAL_DMA_Start_IT+0x1bc>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a2a      	ldr	r2, [pc, #168]	; (8002840 <HAL_DMA_Start_IT+0x210>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d027      	beq.n	80027ec <HAL_DMA_Start_IT+0x1bc>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a28      	ldr	r2, [pc, #160]	; (8002844 <HAL_DMA_Start_IT+0x214>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d022      	beq.n	80027ec <HAL_DMA_Start_IT+0x1bc>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a27      	ldr	r2, [pc, #156]	; (8002848 <HAL_DMA_Start_IT+0x218>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d01d      	beq.n	80027ec <HAL_DMA_Start_IT+0x1bc>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a25      	ldr	r2, [pc, #148]	; (800284c <HAL_DMA_Start_IT+0x21c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d018      	beq.n	80027ec <HAL_DMA_Start_IT+0x1bc>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a24      	ldr	r2, [pc, #144]	; (8002850 <HAL_DMA_Start_IT+0x220>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d013      	beq.n	80027ec <HAL_DMA_Start_IT+0x1bc>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a22      	ldr	r2, [pc, #136]	; (8002854 <HAL_DMA_Start_IT+0x224>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d00e      	beq.n	80027ec <HAL_DMA_Start_IT+0x1bc>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a21      	ldr	r2, [pc, #132]	; (8002858 <HAL_DMA_Start_IT+0x228>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d009      	beq.n	80027ec <HAL_DMA_Start_IT+0x1bc>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a1f      	ldr	r2, [pc, #124]	; (800285c <HAL_DMA_Start_IT+0x22c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d004      	beq.n	80027ec <HAL_DMA_Start_IT+0x1bc>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a1e      	ldr	r2, [pc, #120]	; (8002860 <HAL_DMA_Start_IT+0x230>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d101      	bne.n	80027f0 <HAL_DMA_Start_IT+0x1c0>
 80027ec:	2301      	movs	r3, #1
 80027ee:	e000      	b.n	80027f2 <HAL_DMA_Start_IT+0x1c2>
 80027f0:	2300      	movs	r3, #0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d036      	beq.n	8002864 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f023 021e 	bic.w	r2, r3, #30
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 0216 	orr.w	r2, r2, #22
 8002808:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	2b00      	cmp	r3, #0
 8002810:	d03e      	beq.n	8002890 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0208 	orr.w	r2, r2, #8
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	e035      	b.n	8002890 <HAL_DMA_Start_IT+0x260>
 8002824:	40020010 	.word	0x40020010
 8002828:	40020028 	.word	0x40020028
 800282c:	40020040 	.word	0x40020040
 8002830:	40020058 	.word	0x40020058
 8002834:	40020070 	.word	0x40020070
 8002838:	40020088 	.word	0x40020088
 800283c:	400200a0 	.word	0x400200a0
 8002840:	400200b8 	.word	0x400200b8
 8002844:	40020410 	.word	0x40020410
 8002848:	40020428 	.word	0x40020428
 800284c:	40020440 	.word	0x40020440
 8002850:	40020458 	.word	0x40020458
 8002854:	40020470 	.word	0x40020470
 8002858:	40020488 	.word	0x40020488
 800285c:	400204a0 	.word	0x400204a0
 8002860:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 020e 	bic.w	r2, r3, #14
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 020a 	orr.w	r2, r2, #10
 8002876:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	2b00      	cmp	r3, #0
 800287e:	d007      	beq.n	8002890 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0204 	orr.w	r2, r2, #4
 800288e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a83      	ldr	r2, [pc, #524]	; (8002aa4 <HAL_DMA_Start_IT+0x474>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d072      	beq.n	8002980 <HAL_DMA_Start_IT+0x350>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a82      	ldr	r2, [pc, #520]	; (8002aa8 <HAL_DMA_Start_IT+0x478>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d06d      	beq.n	8002980 <HAL_DMA_Start_IT+0x350>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a80      	ldr	r2, [pc, #512]	; (8002aac <HAL_DMA_Start_IT+0x47c>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d068      	beq.n	8002980 <HAL_DMA_Start_IT+0x350>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a7f      	ldr	r2, [pc, #508]	; (8002ab0 <HAL_DMA_Start_IT+0x480>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d063      	beq.n	8002980 <HAL_DMA_Start_IT+0x350>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a7d      	ldr	r2, [pc, #500]	; (8002ab4 <HAL_DMA_Start_IT+0x484>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d05e      	beq.n	8002980 <HAL_DMA_Start_IT+0x350>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a7c      	ldr	r2, [pc, #496]	; (8002ab8 <HAL_DMA_Start_IT+0x488>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d059      	beq.n	8002980 <HAL_DMA_Start_IT+0x350>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a7a      	ldr	r2, [pc, #488]	; (8002abc <HAL_DMA_Start_IT+0x48c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d054      	beq.n	8002980 <HAL_DMA_Start_IT+0x350>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a79      	ldr	r2, [pc, #484]	; (8002ac0 <HAL_DMA_Start_IT+0x490>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d04f      	beq.n	8002980 <HAL_DMA_Start_IT+0x350>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a77      	ldr	r2, [pc, #476]	; (8002ac4 <HAL_DMA_Start_IT+0x494>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d04a      	beq.n	8002980 <HAL_DMA_Start_IT+0x350>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a76      	ldr	r2, [pc, #472]	; (8002ac8 <HAL_DMA_Start_IT+0x498>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d045      	beq.n	8002980 <HAL_DMA_Start_IT+0x350>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a74      	ldr	r2, [pc, #464]	; (8002acc <HAL_DMA_Start_IT+0x49c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d040      	beq.n	8002980 <HAL_DMA_Start_IT+0x350>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a73      	ldr	r2, [pc, #460]	; (8002ad0 <HAL_DMA_Start_IT+0x4a0>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d03b      	beq.n	8002980 <HAL_DMA_Start_IT+0x350>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a71      	ldr	r2, [pc, #452]	; (8002ad4 <HAL_DMA_Start_IT+0x4a4>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d036      	beq.n	8002980 <HAL_DMA_Start_IT+0x350>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a70      	ldr	r2, [pc, #448]	; (8002ad8 <HAL_DMA_Start_IT+0x4a8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d031      	beq.n	8002980 <HAL_DMA_Start_IT+0x350>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a6e      	ldr	r2, [pc, #440]	; (8002adc <HAL_DMA_Start_IT+0x4ac>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d02c      	beq.n	8002980 <HAL_DMA_Start_IT+0x350>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a6d      	ldr	r2, [pc, #436]	; (8002ae0 <HAL_DMA_Start_IT+0x4b0>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d027      	beq.n	8002980 <HAL_DMA_Start_IT+0x350>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a6b      	ldr	r2, [pc, #428]	; (8002ae4 <HAL_DMA_Start_IT+0x4b4>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d022      	beq.n	8002980 <HAL_DMA_Start_IT+0x350>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a6a      	ldr	r2, [pc, #424]	; (8002ae8 <HAL_DMA_Start_IT+0x4b8>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d01d      	beq.n	8002980 <HAL_DMA_Start_IT+0x350>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a68      	ldr	r2, [pc, #416]	; (8002aec <HAL_DMA_Start_IT+0x4bc>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d018      	beq.n	8002980 <HAL_DMA_Start_IT+0x350>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a67      	ldr	r2, [pc, #412]	; (8002af0 <HAL_DMA_Start_IT+0x4c0>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d013      	beq.n	8002980 <HAL_DMA_Start_IT+0x350>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a65      	ldr	r2, [pc, #404]	; (8002af4 <HAL_DMA_Start_IT+0x4c4>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00e      	beq.n	8002980 <HAL_DMA_Start_IT+0x350>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a64      	ldr	r2, [pc, #400]	; (8002af8 <HAL_DMA_Start_IT+0x4c8>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d009      	beq.n	8002980 <HAL_DMA_Start_IT+0x350>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a62      	ldr	r2, [pc, #392]	; (8002afc <HAL_DMA_Start_IT+0x4cc>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d004      	beq.n	8002980 <HAL_DMA_Start_IT+0x350>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a61      	ldr	r2, [pc, #388]	; (8002b00 <HAL_DMA_Start_IT+0x4d0>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d101      	bne.n	8002984 <HAL_DMA_Start_IT+0x354>
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <HAL_DMA_Start_IT+0x356>
 8002984:	2300      	movs	r3, #0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d01a      	beq.n	80029c0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d007      	beq.n	80029a8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029a6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d007      	beq.n	80029c0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029be:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a37      	ldr	r2, [pc, #220]	; (8002aa4 <HAL_DMA_Start_IT+0x474>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d04a      	beq.n	8002a60 <HAL_DMA_Start_IT+0x430>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a36      	ldr	r2, [pc, #216]	; (8002aa8 <HAL_DMA_Start_IT+0x478>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d045      	beq.n	8002a60 <HAL_DMA_Start_IT+0x430>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a34      	ldr	r2, [pc, #208]	; (8002aac <HAL_DMA_Start_IT+0x47c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d040      	beq.n	8002a60 <HAL_DMA_Start_IT+0x430>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a33      	ldr	r2, [pc, #204]	; (8002ab0 <HAL_DMA_Start_IT+0x480>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d03b      	beq.n	8002a60 <HAL_DMA_Start_IT+0x430>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a31      	ldr	r2, [pc, #196]	; (8002ab4 <HAL_DMA_Start_IT+0x484>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d036      	beq.n	8002a60 <HAL_DMA_Start_IT+0x430>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a30      	ldr	r2, [pc, #192]	; (8002ab8 <HAL_DMA_Start_IT+0x488>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d031      	beq.n	8002a60 <HAL_DMA_Start_IT+0x430>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a2e      	ldr	r2, [pc, #184]	; (8002abc <HAL_DMA_Start_IT+0x48c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d02c      	beq.n	8002a60 <HAL_DMA_Start_IT+0x430>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a2d      	ldr	r2, [pc, #180]	; (8002ac0 <HAL_DMA_Start_IT+0x490>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d027      	beq.n	8002a60 <HAL_DMA_Start_IT+0x430>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a2b      	ldr	r2, [pc, #172]	; (8002ac4 <HAL_DMA_Start_IT+0x494>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d022      	beq.n	8002a60 <HAL_DMA_Start_IT+0x430>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a2a      	ldr	r2, [pc, #168]	; (8002ac8 <HAL_DMA_Start_IT+0x498>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d01d      	beq.n	8002a60 <HAL_DMA_Start_IT+0x430>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a28      	ldr	r2, [pc, #160]	; (8002acc <HAL_DMA_Start_IT+0x49c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d018      	beq.n	8002a60 <HAL_DMA_Start_IT+0x430>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a27      	ldr	r2, [pc, #156]	; (8002ad0 <HAL_DMA_Start_IT+0x4a0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d013      	beq.n	8002a60 <HAL_DMA_Start_IT+0x430>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a25      	ldr	r2, [pc, #148]	; (8002ad4 <HAL_DMA_Start_IT+0x4a4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d00e      	beq.n	8002a60 <HAL_DMA_Start_IT+0x430>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a24      	ldr	r2, [pc, #144]	; (8002ad8 <HAL_DMA_Start_IT+0x4a8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d009      	beq.n	8002a60 <HAL_DMA_Start_IT+0x430>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a22      	ldr	r2, [pc, #136]	; (8002adc <HAL_DMA_Start_IT+0x4ac>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d004      	beq.n	8002a60 <HAL_DMA_Start_IT+0x430>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a21      	ldr	r2, [pc, #132]	; (8002ae0 <HAL_DMA_Start_IT+0x4b0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d108      	bne.n	8002a72 <HAL_DMA_Start_IT+0x442>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0201 	orr.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	e012      	b.n	8002a98 <HAL_DMA_Start_IT+0x468>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f042 0201 	orr.w	r2, r2, #1
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	e009      	b.n	8002a98 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a8a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40020010 	.word	0x40020010
 8002aa8:	40020028 	.word	0x40020028
 8002aac:	40020040 	.word	0x40020040
 8002ab0:	40020058 	.word	0x40020058
 8002ab4:	40020070 	.word	0x40020070
 8002ab8:	40020088 	.word	0x40020088
 8002abc:	400200a0 	.word	0x400200a0
 8002ac0:	400200b8 	.word	0x400200b8
 8002ac4:	40020410 	.word	0x40020410
 8002ac8:	40020428 	.word	0x40020428
 8002acc:	40020440 	.word	0x40020440
 8002ad0:	40020458 	.word	0x40020458
 8002ad4:	40020470 	.word	0x40020470
 8002ad8:	40020488 	.word	0x40020488
 8002adc:	400204a0 	.word	0x400204a0
 8002ae0:	400204b8 	.word	0x400204b8
 8002ae4:	58025408 	.word	0x58025408
 8002ae8:	5802541c 	.word	0x5802541c
 8002aec:	58025430 	.word	0x58025430
 8002af0:	58025444 	.word	0x58025444
 8002af4:	58025458 	.word	0x58025458
 8002af8:	5802546c 	.word	0x5802546c
 8002afc:	58025480 	.word	0x58025480
 8002b00:	58025494 	.word	0x58025494

08002b04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002b0c:	f7ff f8e8 	bl	8001ce0 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e2dc      	b.n	80030d6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d008      	beq.n	8002b3a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2280      	movs	r2, #128	; 0x80
 8002b2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e2cd      	b.n	80030d6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a76      	ldr	r2, [pc, #472]	; (8002d18 <HAL_DMA_Abort+0x214>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d04a      	beq.n	8002bda <HAL_DMA_Abort+0xd6>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a74      	ldr	r2, [pc, #464]	; (8002d1c <HAL_DMA_Abort+0x218>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d045      	beq.n	8002bda <HAL_DMA_Abort+0xd6>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a73      	ldr	r2, [pc, #460]	; (8002d20 <HAL_DMA_Abort+0x21c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d040      	beq.n	8002bda <HAL_DMA_Abort+0xd6>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a71      	ldr	r2, [pc, #452]	; (8002d24 <HAL_DMA_Abort+0x220>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d03b      	beq.n	8002bda <HAL_DMA_Abort+0xd6>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a70      	ldr	r2, [pc, #448]	; (8002d28 <HAL_DMA_Abort+0x224>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d036      	beq.n	8002bda <HAL_DMA_Abort+0xd6>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a6e      	ldr	r2, [pc, #440]	; (8002d2c <HAL_DMA_Abort+0x228>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d031      	beq.n	8002bda <HAL_DMA_Abort+0xd6>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a6d      	ldr	r2, [pc, #436]	; (8002d30 <HAL_DMA_Abort+0x22c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d02c      	beq.n	8002bda <HAL_DMA_Abort+0xd6>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a6b      	ldr	r2, [pc, #428]	; (8002d34 <HAL_DMA_Abort+0x230>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d027      	beq.n	8002bda <HAL_DMA_Abort+0xd6>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a6a      	ldr	r2, [pc, #424]	; (8002d38 <HAL_DMA_Abort+0x234>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d022      	beq.n	8002bda <HAL_DMA_Abort+0xd6>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a68      	ldr	r2, [pc, #416]	; (8002d3c <HAL_DMA_Abort+0x238>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d01d      	beq.n	8002bda <HAL_DMA_Abort+0xd6>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a67      	ldr	r2, [pc, #412]	; (8002d40 <HAL_DMA_Abort+0x23c>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d018      	beq.n	8002bda <HAL_DMA_Abort+0xd6>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a65      	ldr	r2, [pc, #404]	; (8002d44 <HAL_DMA_Abort+0x240>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d013      	beq.n	8002bda <HAL_DMA_Abort+0xd6>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a64      	ldr	r2, [pc, #400]	; (8002d48 <HAL_DMA_Abort+0x244>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d00e      	beq.n	8002bda <HAL_DMA_Abort+0xd6>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a62      	ldr	r2, [pc, #392]	; (8002d4c <HAL_DMA_Abort+0x248>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d009      	beq.n	8002bda <HAL_DMA_Abort+0xd6>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a61      	ldr	r2, [pc, #388]	; (8002d50 <HAL_DMA_Abort+0x24c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d004      	beq.n	8002bda <HAL_DMA_Abort+0xd6>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a5f      	ldr	r2, [pc, #380]	; (8002d54 <HAL_DMA_Abort+0x250>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d101      	bne.n	8002bde <HAL_DMA_Abort+0xda>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <HAL_DMA_Abort+0xdc>
 8002bde:	2300      	movs	r3, #0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d013      	beq.n	8002c0c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 021e 	bic.w	r2, r2, #30
 8002bf2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695a      	ldr	r2, [r3, #20]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c02:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	e00a      	b.n	8002c22 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 020e 	bic.w	r2, r2, #14
 8002c1a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a3c      	ldr	r2, [pc, #240]	; (8002d18 <HAL_DMA_Abort+0x214>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d072      	beq.n	8002d12 <HAL_DMA_Abort+0x20e>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a3a      	ldr	r2, [pc, #232]	; (8002d1c <HAL_DMA_Abort+0x218>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d06d      	beq.n	8002d12 <HAL_DMA_Abort+0x20e>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a39      	ldr	r2, [pc, #228]	; (8002d20 <HAL_DMA_Abort+0x21c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d068      	beq.n	8002d12 <HAL_DMA_Abort+0x20e>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a37      	ldr	r2, [pc, #220]	; (8002d24 <HAL_DMA_Abort+0x220>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d063      	beq.n	8002d12 <HAL_DMA_Abort+0x20e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a36      	ldr	r2, [pc, #216]	; (8002d28 <HAL_DMA_Abort+0x224>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d05e      	beq.n	8002d12 <HAL_DMA_Abort+0x20e>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a34      	ldr	r2, [pc, #208]	; (8002d2c <HAL_DMA_Abort+0x228>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d059      	beq.n	8002d12 <HAL_DMA_Abort+0x20e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a33      	ldr	r2, [pc, #204]	; (8002d30 <HAL_DMA_Abort+0x22c>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d054      	beq.n	8002d12 <HAL_DMA_Abort+0x20e>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a31      	ldr	r2, [pc, #196]	; (8002d34 <HAL_DMA_Abort+0x230>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d04f      	beq.n	8002d12 <HAL_DMA_Abort+0x20e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a30      	ldr	r2, [pc, #192]	; (8002d38 <HAL_DMA_Abort+0x234>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d04a      	beq.n	8002d12 <HAL_DMA_Abort+0x20e>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a2e      	ldr	r2, [pc, #184]	; (8002d3c <HAL_DMA_Abort+0x238>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d045      	beq.n	8002d12 <HAL_DMA_Abort+0x20e>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a2d      	ldr	r2, [pc, #180]	; (8002d40 <HAL_DMA_Abort+0x23c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d040      	beq.n	8002d12 <HAL_DMA_Abort+0x20e>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a2b      	ldr	r2, [pc, #172]	; (8002d44 <HAL_DMA_Abort+0x240>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d03b      	beq.n	8002d12 <HAL_DMA_Abort+0x20e>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a2a      	ldr	r2, [pc, #168]	; (8002d48 <HAL_DMA_Abort+0x244>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d036      	beq.n	8002d12 <HAL_DMA_Abort+0x20e>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a28      	ldr	r2, [pc, #160]	; (8002d4c <HAL_DMA_Abort+0x248>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d031      	beq.n	8002d12 <HAL_DMA_Abort+0x20e>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a27      	ldr	r2, [pc, #156]	; (8002d50 <HAL_DMA_Abort+0x24c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d02c      	beq.n	8002d12 <HAL_DMA_Abort+0x20e>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a25      	ldr	r2, [pc, #148]	; (8002d54 <HAL_DMA_Abort+0x250>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d027      	beq.n	8002d12 <HAL_DMA_Abort+0x20e>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a24      	ldr	r2, [pc, #144]	; (8002d58 <HAL_DMA_Abort+0x254>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d022      	beq.n	8002d12 <HAL_DMA_Abort+0x20e>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a22      	ldr	r2, [pc, #136]	; (8002d5c <HAL_DMA_Abort+0x258>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d01d      	beq.n	8002d12 <HAL_DMA_Abort+0x20e>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a21      	ldr	r2, [pc, #132]	; (8002d60 <HAL_DMA_Abort+0x25c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d018      	beq.n	8002d12 <HAL_DMA_Abort+0x20e>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a1f      	ldr	r2, [pc, #124]	; (8002d64 <HAL_DMA_Abort+0x260>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d013      	beq.n	8002d12 <HAL_DMA_Abort+0x20e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a1e      	ldr	r2, [pc, #120]	; (8002d68 <HAL_DMA_Abort+0x264>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00e      	beq.n	8002d12 <HAL_DMA_Abort+0x20e>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a1c      	ldr	r2, [pc, #112]	; (8002d6c <HAL_DMA_Abort+0x268>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d009      	beq.n	8002d12 <HAL_DMA_Abort+0x20e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a1b      	ldr	r2, [pc, #108]	; (8002d70 <HAL_DMA_Abort+0x26c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d004      	beq.n	8002d12 <HAL_DMA_Abort+0x20e>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a19      	ldr	r2, [pc, #100]	; (8002d74 <HAL_DMA_Abort+0x270>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d132      	bne.n	8002d78 <HAL_DMA_Abort+0x274>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e031      	b.n	8002d7a <HAL_DMA_Abort+0x276>
 8002d16:	bf00      	nop
 8002d18:	40020010 	.word	0x40020010
 8002d1c:	40020028 	.word	0x40020028
 8002d20:	40020040 	.word	0x40020040
 8002d24:	40020058 	.word	0x40020058
 8002d28:	40020070 	.word	0x40020070
 8002d2c:	40020088 	.word	0x40020088
 8002d30:	400200a0 	.word	0x400200a0
 8002d34:	400200b8 	.word	0x400200b8
 8002d38:	40020410 	.word	0x40020410
 8002d3c:	40020428 	.word	0x40020428
 8002d40:	40020440 	.word	0x40020440
 8002d44:	40020458 	.word	0x40020458
 8002d48:	40020470 	.word	0x40020470
 8002d4c:	40020488 	.word	0x40020488
 8002d50:	400204a0 	.word	0x400204a0
 8002d54:	400204b8 	.word	0x400204b8
 8002d58:	58025408 	.word	0x58025408
 8002d5c:	5802541c 	.word	0x5802541c
 8002d60:	58025430 	.word	0x58025430
 8002d64:	58025444 	.word	0x58025444
 8002d68:	58025458 	.word	0x58025458
 8002d6c:	5802546c 	.word	0x5802546c
 8002d70:	58025480 	.word	0x58025480
 8002d74:	58025494 	.word	0x58025494
 8002d78:	2300      	movs	r3, #0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d007      	beq.n	8002d8e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a6d      	ldr	r2, [pc, #436]	; (8002f48 <HAL_DMA_Abort+0x444>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d04a      	beq.n	8002e2e <HAL_DMA_Abort+0x32a>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a6b      	ldr	r2, [pc, #428]	; (8002f4c <HAL_DMA_Abort+0x448>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d045      	beq.n	8002e2e <HAL_DMA_Abort+0x32a>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a6a      	ldr	r2, [pc, #424]	; (8002f50 <HAL_DMA_Abort+0x44c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d040      	beq.n	8002e2e <HAL_DMA_Abort+0x32a>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a68      	ldr	r2, [pc, #416]	; (8002f54 <HAL_DMA_Abort+0x450>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d03b      	beq.n	8002e2e <HAL_DMA_Abort+0x32a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a67      	ldr	r2, [pc, #412]	; (8002f58 <HAL_DMA_Abort+0x454>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d036      	beq.n	8002e2e <HAL_DMA_Abort+0x32a>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a65      	ldr	r2, [pc, #404]	; (8002f5c <HAL_DMA_Abort+0x458>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d031      	beq.n	8002e2e <HAL_DMA_Abort+0x32a>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a64      	ldr	r2, [pc, #400]	; (8002f60 <HAL_DMA_Abort+0x45c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d02c      	beq.n	8002e2e <HAL_DMA_Abort+0x32a>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a62      	ldr	r2, [pc, #392]	; (8002f64 <HAL_DMA_Abort+0x460>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d027      	beq.n	8002e2e <HAL_DMA_Abort+0x32a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a61      	ldr	r2, [pc, #388]	; (8002f68 <HAL_DMA_Abort+0x464>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d022      	beq.n	8002e2e <HAL_DMA_Abort+0x32a>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a5f      	ldr	r2, [pc, #380]	; (8002f6c <HAL_DMA_Abort+0x468>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d01d      	beq.n	8002e2e <HAL_DMA_Abort+0x32a>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a5e      	ldr	r2, [pc, #376]	; (8002f70 <HAL_DMA_Abort+0x46c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d018      	beq.n	8002e2e <HAL_DMA_Abort+0x32a>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a5c      	ldr	r2, [pc, #368]	; (8002f74 <HAL_DMA_Abort+0x470>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d013      	beq.n	8002e2e <HAL_DMA_Abort+0x32a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a5b      	ldr	r2, [pc, #364]	; (8002f78 <HAL_DMA_Abort+0x474>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d00e      	beq.n	8002e2e <HAL_DMA_Abort+0x32a>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a59      	ldr	r2, [pc, #356]	; (8002f7c <HAL_DMA_Abort+0x478>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d009      	beq.n	8002e2e <HAL_DMA_Abort+0x32a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a58      	ldr	r2, [pc, #352]	; (8002f80 <HAL_DMA_Abort+0x47c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d004      	beq.n	8002e2e <HAL_DMA_Abort+0x32a>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a56      	ldr	r2, [pc, #344]	; (8002f84 <HAL_DMA_Abort+0x480>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d108      	bne.n	8002e40 <HAL_DMA_Abort+0x33c>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0201 	bic.w	r2, r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	e007      	b.n	8002e50 <HAL_DMA_Abort+0x34c>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0201 	bic.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002e50:	e013      	b.n	8002e7a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e52:	f7fe ff45 	bl	8001ce0 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b05      	cmp	r3, #5
 8002e5e:	d90c      	bls.n	8002e7a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2220      	movs	r2, #32
 8002e64:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2203      	movs	r2, #3
 8002e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e12d      	b.n	80030d6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1e5      	bne.n	8002e52 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a2f      	ldr	r2, [pc, #188]	; (8002f48 <HAL_DMA_Abort+0x444>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d04a      	beq.n	8002f26 <HAL_DMA_Abort+0x422>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a2d      	ldr	r2, [pc, #180]	; (8002f4c <HAL_DMA_Abort+0x448>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d045      	beq.n	8002f26 <HAL_DMA_Abort+0x422>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a2c      	ldr	r2, [pc, #176]	; (8002f50 <HAL_DMA_Abort+0x44c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d040      	beq.n	8002f26 <HAL_DMA_Abort+0x422>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a2a      	ldr	r2, [pc, #168]	; (8002f54 <HAL_DMA_Abort+0x450>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d03b      	beq.n	8002f26 <HAL_DMA_Abort+0x422>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a29      	ldr	r2, [pc, #164]	; (8002f58 <HAL_DMA_Abort+0x454>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d036      	beq.n	8002f26 <HAL_DMA_Abort+0x422>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a27      	ldr	r2, [pc, #156]	; (8002f5c <HAL_DMA_Abort+0x458>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d031      	beq.n	8002f26 <HAL_DMA_Abort+0x422>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a26      	ldr	r2, [pc, #152]	; (8002f60 <HAL_DMA_Abort+0x45c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d02c      	beq.n	8002f26 <HAL_DMA_Abort+0x422>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a24      	ldr	r2, [pc, #144]	; (8002f64 <HAL_DMA_Abort+0x460>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d027      	beq.n	8002f26 <HAL_DMA_Abort+0x422>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a23      	ldr	r2, [pc, #140]	; (8002f68 <HAL_DMA_Abort+0x464>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d022      	beq.n	8002f26 <HAL_DMA_Abort+0x422>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a21      	ldr	r2, [pc, #132]	; (8002f6c <HAL_DMA_Abort+0x468>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d01d      	beq.n	8002f26 <HAL_DMA_Abort+0x422>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a20      	ldr	r2, [pc, #128]	; (8002f70 <HAL_DMA_Abort+0x46c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d018      	beq.n	8002f26 <HAL_DMA_Abort+0x422>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a1e      	ldr	r2, [pc, #120]	; (8002f74 <HAL_DMA_Abort+0x470>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d013      	beq.n	8002f26 <HAL_DMA_Abort+0x422>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a1d      	ldr	r2, [pc, #116]	; (8002f78 <HAL_DMA_Abort+0x474>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d00e      	beq.n	8002f26 <HAL_DMA_Abort+0x422>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a1b      	ldr	r2, [pc, #108]	; (8002f7c <HAL_DMA_Abort+0x478>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d009      	beq.n	8002f26 <HAL_DMA_Abort+0x422>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a1a      	ldr	r2, [pc, #104]	; (8002f80 <HAL_DMA_Abort+0x47c>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d004      	beq.n	8002f26 <HAL_DMA_Abort+0x422>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a18      	ldr	r2, [pc, #96]	; (8002f84 <HAL_DMA_Abort+0x480>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d101      	bne.n	8002f2a <HAL_DMA_Abort+0x426>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <HAL_DMA_Abort+0x428>
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d02b      	beq.n	8002f88 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f34:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	223f      	movs	r2, #63	; 0x3f
 8002f40:	409a      	lsls	r2, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	609a      	str	r2, [r3, #8]
 8002f46:	e02a      	b.n	8002f9e <HAL_DMA_Abort+0x49a>
 8002f48:	40020010 	.word	0x40020010
 8002f4c:	40020028 	.word	0x40020028
 8002f50:	40020040 	.word	0x40020040
 8002f54:	40020058 	.word	0x40020058
 8002f58:	40020070 	.word	0x40020070
 8002f5c:	40020088 	.word	0x40020088
 8002f60:	400200a0 	.word	0x400200a0
 8002f64:	400200b8 	.word	0x400200b8
 8002f68:	40020410 	.word	0x40020410
 8002f6c:	40020428 	.word	0x40020428
 8002f70:	40020440 	.word	0x40020440
 8002f74:	40020458 	.word	0x40020458
 8002f78:	40020470 	.word	0x40020470
 8002f7c:	40020488 	.word	0x40020488
 8002f80:	400204a0 	.word	0x400204a0
 8002f84:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f92:	f003 031f 	and.w	r3, r3, #31
 8002f96:	2201      	movs	r2, #1
 8002f98:	409a      	lsls	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a4f      	ldr	r2, [pc, #316]	; (80030e0 <HAL_DMA_Abort+0x5dc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d072      	beq.n	800308e <HAL_DMA_Abort+0x58a>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a4d      	ldr	r2, [pc, #308]	; (80030e4 <HAL_DMA_Abort+0x5e0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d06d      	beq.n	800308e <HAL_DMA_Abort+0x58a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a4c      	ldr	r2, [pc, #304]	; (80030e8 <HAL_DMA_Abort+0x5e4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d068      	beq.n	800308e <HAL_DMA_Abort+0x58a>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a4a      	ldr	r2, [pc, #296]	; (80030ec <HAL_DMA_Abort+0x5e8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d063      	beq.n	800308e <HAL_DMA_Abort+0x58a>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a49      	ldr	r2, [pc, #292]	; (80030f0 <HAL_DMA_Abort+0x5ec>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d05e      	beq.n	800308e <HAL_DMA_Abort+0x58a>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a47      	ldr	r2, [pc, #284]	; (80030f4 <HAL_DMA_Abort+0x5f0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d059      	beq.n	800308e <HAL_DMA_Abort+0x58a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a46      	ldr	r2, [pc, #280]	; (80030f8 <HAL_DMA_Abort+0x5f4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d054      	beq.n	800308e <HAL_DMA_Abort+0x58a>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a44      	ldr	r2, [pc, #272]	; (80030fc <HAL_DMA_Abort+0x5f8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d04f      	beq.n	800308e <HAL_DMA_Abort+0x58a>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a43      	ldr	r2, [pc, #268]	; (8003100 <HAL_DMA_Abort+0x5fc>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d04a      	beq.n	800308e <HAL_DMA_Abort+0x58a>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a41      	ldr	r2, [pc, #260]	; (8003104 <HAL_DMA_Abort+0x600>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d045      	beq.n	800308e <HAL_DMA_Abort+0x58a>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a40      	ldr	r2, [pc, #256]	; (8003108 <HAL_DMA_Abort+0x604>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d040      	beq.n	800308e <HAL_DMA_Abort+0x58a>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a3e      	ldr	r2, [pc, #248]	; (800310c <HAL_DMA_Abort+0x608>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d03b      	beq.n	800308e <HAL_DMA_Abort+0x58a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a3d      	ldr	r2, [pc, #244]	; (8003110 <HAL_DMA_Abort+0x60c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d036      	beq.n	800308e <HAL_DMA_Abort+0x58a>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a3b      	ldr	r2, [pc, #236]	; (8003114 <HAL_DMA_Abort+0x610>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d031      	beq.n	800308e <HAL_DMA_Abort+0x58a>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a3a      	ldr	r2, [pc, #232]	; (8003118 <HAL_DMA_Abort+0x614>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d02c      	beq.n	800308e <HAL_DMA_Abort+0x58a>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a38      	ldr	r2, [pc, #224]	; (800311c <HAL_DMA_Abort+0x618>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d027      	beq.n	800308e <HAL_DMA_Abort+0x58a>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a37      	ldr	r2, [pc, #220]	; (8003120 <HAL_DMA_Abort+0x61c>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d022      	beq.n	800308e <HAL_DMA_Abort+0x58a>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a35      	ldr	r2, [pc, #212]	; (8003124 <HAL_DMA_Abort+0x620>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d01d      	beq.n	800308e <HAL_DMA_Abort+0x58a>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a34      	ldr	r2, [pc, #208]	; (8003128 <HAL_DMA_Abort+0x624>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d018      	beq.n	800308e <HAL_DMA_Abort+0x58a>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a32      	ldr	r2, [pc, #200]	; (800312c <HAL_DMA_Abort+0x628>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d013      	beq.n	800308e <HAL_DMA_Abort+0x58a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a31      	ldr	r2, [pc, #196]	; (8003130 <HAL_DMA_Abort+0x62c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d00e      	beq.n	800308e <HAL_DMA_Abort+0x58a>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a2f      	ldr	r2, [pc, #188]	; (8003134 <HAL_DMA_Abort+0x630>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d009      	beq.n	800308e <HAL_DMA_Abort+0x58a>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a2e      	ldr	r2, [pc, #184]	; (8003138 <HAL_DMA_Abort+0x634>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d004      	beq.n	800308e <HAL_DMA_Abort+0x58a>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a2c      	ldr	r2, [pc, #176]	; (800313c <HAL_DMA_Abort+0x638>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d101      	bne.n	8003092 <HAL_DMA_Abort+0x58e>
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <HAL_DMA_Abort+0x590>
 8003092:	2300      	movs	r3, #0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d015      	beq.n	80030c4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80030a0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00c      	beq.n	80030c4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030b8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80030c2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40020010 	.word	0x40020010
 80030e4:	40020028 	.word	0x40020028
 80030e8:	40020040 	.word	0x40020040
 80030ec:	40020058 	.word	0x40020058
 80030f0:	40020070 	.word	0x40020070
 80030f4:	40020088 	.word	0x40020088
 80030f8:	400200a0 	.word	0x400200a0
 80030fc:	400200b8 	.word	0x400200b8
 8003100:	40020410 	.word	0x40020410
 8003104:	40020428 	.word	0x40020428
 8003108:	40020440 	.word	0x40020440
 800310c:	40020458 	.word	0x40020458
 8003110:	40020470 	.word	0x40020470
 8003114:	40020488 	.word	0x40020488
 8003118:	400204a0 	.word	0x400204a0
 800311c:	400204b8 	.word	0x400204b8
 8003120:	58025408 	.word	0x58025408
 8003124:	5802541c 	.word	0x5802541c
 8003128:	58025430 	.word	0x58025430
 800312c:	58025444 	.word	0x58025444
 8003130:	58025458 	.word	0x58025458
 8003134:	5802546c 	.word	0x5802546c
 8003138:	58025480 	.word	0x58025480
 800313c:	58025494 	.word	0x58025494

08003140 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08a      	sub	sp, #40	; 0x28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003148:	2300      	movs	r3, #0
 800314a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800314c:	4b67      	ldr	r3, [pc, #412]	; (80032ec <HAL_DMA_IRQHandler+0x1ac>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a67      	ldr	r2, [pc, #412]	; (80032f0 <HAL_DMA_IRQHandler+0x1b0>)
 8003152:	fba2 2303 	umull	r2, r3, r2, r3
 8003156:	0a9b      	lsrs	r3, r3, #10
 8003158:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003164:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a5f      	ldr	r2, [pc, #380]	; (80032f4 <HAL_DMA_IRQHandler+0x1b4>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d04a      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a5d      	ldr	r2, [pc, #372]	; (80032f8 <HAL_DMA_IRQHandler+0x1b8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d045      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a5c      	ldr	r2, [pc, #368]	; (80032fc <HAL_DMA_IRQHandler+0x1bc>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d040      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a5a      	ldr	r2, [pc, #360]	; (8003300 <HAL_DMA_IRQHandler+0x1c0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d03b      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a59      	ldr	r2, [pc, #356]	; (8003304 <HAL_DMA_IRQHandler+0x1c4>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d036      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a57      	ldr	r2, [pc, #348]	; (8003308 <HAL_DMA_IRQHandler+0x1c8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d031      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a56      	ldr	r2, [pc, #344]	; (800330c <HAL_DMA_IRQHandler+0x1cc>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d02c      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a54      	ldr	r2, [pc, #336]	; (8003310 <HAL_DMA_IRQHandler+0x1d0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d027      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a53      	ldr	r2, [pc, #332]	; (8003314 <HAL_DMA_IRQHandler+0x1d4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d022      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a51      	ldr	r2, [pc, #324]	; (8003318 <HAL_DMA_IRQHandler+0x1d8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d01d      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a50      	ldr	r2, [pc, #320]	; (800331c <HAL_DMA_IRQHandler+0x1dc>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d018      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a4e      	ldr	r2, [pc, #312]	; (8003320 <HAL_DMA_IRQHandler+0x1e0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d013      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a4d      	ldr	r2, [pc, #308]	; (8003324 <HAL_DMA_IRQHandler+0x1e4>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d00e      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a4b      	ldr	r2, [pc, #300]	; (8003328 <HAL_DMA_IRQHandler+0x1e8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d009      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a4a      	ldr	r2, [pc, #296]	; (800332c <HAL_DMA_IRQHandler+0x1ec>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d004      	beq.n	8003212 <HAL_DMA_IRQHandler+0xd2>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a48      	ldr	r2, [pc, #288]	; (8003330 <HAL_DMA_IRQHandler+0x1f0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d101      	bne.n	8003216 <HAL_DMA_IRQHandler+0xd6>
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <HAL_DMA_IRQHandler+0xd8>
 8003216:	2300      	movs	r3, #0
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 842b 	beq.w	8003a74 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003222:	f003 031f 	and.w	r3, r3, #31
 8003226:	2208      	movs	r2, #8
 8003228:	409a      	lsls	r2, r3
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	4013      	ands	r3, r2
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 80a2 	beq.w	8003378 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a2e      	ldr	r2, [pc, #184]	; (80032f4 <HAL_DMA_IRQHandler+0x1b4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d04a      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a2d      	ldr	r2, [pc, #180]	; (80032f8 <HAL_DMA_IRQHandler+0x1b8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d045      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a2b      	ldr	r2, [pc, #172]	; (80032fc <HAL_DMA_IRQHandler+0x1bc>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d040      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a2a      	ldr	r2, [pc, #168]	; (8003300 <HAL_DMA_IRQHandler+0x1c0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d03b      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a28      	ldr	r2, [pc, #160]	; (8003304 <HAL_DMA_IRQHandler+0x1c4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d036      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a27      	ldr	r2, [pc, #156]	; (8003308 <HAL_DMA_IRQHandler+0x1c8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d031      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a25      	ldr	r2, [pc, #148]	; (800330c <HAL_DMA_IRQHandler+0x1cc>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d02c      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a24      	ldr	r2, [pc, #144]	; (8003310 <HAL_DMA_IRQHandler+0x1d0>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d027      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a22      	ldr	r2, [pc, #136]	; (8003314 <HAL_DMA_IRQHandler+0x1d4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d022      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a21      	ldr	r2, [pc, #132]	; (8003318 <HAL_DMA_IRQHandler+0x1d8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d01d      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a1f      	ldr	r2, [pc, #124]	; (800331c <HAL_DMA_IRQHandler+0x1dc>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d018      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a1e      	ldr	r2, [pc, #120]	; (8003320 <HAL_DMA_IRQHandler+0x1e0>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d013      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a1c      	ldr	r2, [pc, #112]	; (8003324 <HAL_DMA_IRQHandler+0x1e4>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00e      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a1b      	ldr	r2, [pc, #108]	; (8003328 <HAL_DMA_IRQHandler+0x1e8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d009      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a19      	ldr	r2, [pc, #100]	; (800332c <HAL_DMA_IRQHandler+0x1ec>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d004      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x194>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a18      	ldr	r2, [pc, #96]	; (8003330 <HAL_DMA_IRQHandler+0x1f0>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d12f      	bne.n	8003334 <HAL_DMA_IRQHandler+0x1f4>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0304 	and.w	r3, r3, #4
 80032de:	2b00      	cmp	r3, #0
 80032e0:	bf14      	ite	ne
 80032e2:	2301      	movne	r3, #1
 80032e4:	2300      	moveq	r3, #0
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	e02e      	b.n	8003348 <HAL_DMA_IRQHandler+0x208>
 80032ea:	bf00      	nop
 80032ec:	24000008 	.word	0x24000008
 80032f0:	1b4e81b5 	.word	0x1b4e81b5
 80032f4:	40020010 	.word	0x40020010
 80032f8:	40020028 	.word	0x40020028
 80032fc:	40020040 	.word	0x40020040
 8003300:	40020058 	.word	0x40020058
 8003304:	40020070 	.word	0x40020070
 8003308:	40020088 	.word	0x40020088
 800330c:	400200a0 	.word	0x400200a0
 8003310:	400200b8 	.word	0x400200b8
 8003314:	40020410 	.word	0x40020410
 8003318:	40020428 	.word	0x40020428
 800331c:	40020440 	.word	0x40020440
 8003320:	40020458 	.word	0x40020458
 8003324:	40020470 	.word	0x40020470
 8003328:	40020488 	.word	0x40020488
 800332c:	400204a0 	.word	0x400204a0
 8003330:	400204b8 	.word	0x400204b8
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	bf14      	ite	ne
 8003342:	2301      	movne	r3, #1
 8003344:	2300      	moveq	r3, #0
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d015      	beq.n	8003378 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0204 	bic.w	r2, r2, #4
 800335a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	2208      	movs	r2, #8
 8003366:	409a      	lsls	r2, r3
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003370:	f043 0201 	orr.w	r2, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	fa22 f303 	lsr.w	r3, r2, r3
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d06e      	beq.n	800346c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a69      	ldr	r2, [pc, #420]	; (8003538 <HAL_DMA_IRQHandler+0x3f8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d04a      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a67      	ldr	r2, [pc, #412]	; (800353c <HAL_DMA_IRQHandler+0x3fc>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d045      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a66      	ldr	r2, [pc, #408]	; (8003540 <HAL_DMA_IRQHandler+0x400>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d040      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a64      	ldr	r2, [pc, #400]	; (8003544 <HAL_DMA_IRQHandler+0x404>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d03b      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a63      	ldr	r2, [pc, #396]	; (8003548 <HAL_DMA_IRQHandler+0x408>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d036      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a61      	ldr	r2, [pc, #388]	; (800354c <HAL_DMA_IRQHandler+0x40c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d031      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a60      	ldr	r2, [pc, #384]	; (8003550 <HAL_DMA_IRQHandler+0x410>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d02c      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a5e      	ldr	r2, [pc, #376]	; (8003554 <HAL_DMA_IRQHandler+0x414>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d027      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a5d      	ldr	r2, [pc, #372]	; (8003558 <HAL_DMA_IRQHandler+0x418>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d022      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a5b      	ldr	r2, [pc, #364]	; (800355c <HAL_DMA_IRQHandler+0x41c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d01d      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a5a      	ldr	r2, [pc, #360]	; (8003560 <HAL_DMA_IRQHandler+0x420>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d018      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a58      	ldr	r2, [pc, #352]	; (8003564 <HAL_DMA_IRQHandler+0x424>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d013      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a57      	ldr	r2, [pc, #348]	; (8003568 <HAL_DMA_IRQHandler+0x428>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d00e      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a55      	ldr	r2, [pc, #340]	; (800356c <HAL_DMA_IRQHandler+0x42c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d009      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a54      	ldr	r2, [pc, #336]	; (8003570 <HAL_DMA_IRQHandler+0x430>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d004      	beq.n	800342e <HAL_DMA_IRQHandler+0x2ee>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a52      	ldr	r2, [pc, #328]	; (8003574 <HAL_DMA_IRQHandler+0x434>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d10a      	bne.n	8003444 <HAL_DMA_IRQHandler+0x304>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003438:	2b00      	cmp	r3, #0
 800343a:	bf14      	ite	ne
 800343c:	2301      	movne	r3, #1
 800343e:	2300      	moveq	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	e003      	b.n	800344c <HAL_DMA_IRQHandler+0x30c>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2300      	movs	r3, #0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00d      	beq.n	800346c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003454:	f003 031f 	and.w	r3, r3, #31
 8003458:	2201      	movs	r2, #1
 800345a:	409a      	lsls	r2, r3
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003464:	f043 0202 	orr.w	r2, r3, #2
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	2204      	movs	r2, #4
 8003476:	409a      	lsls	r2, r3
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	4013      	ands	r3, r2
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 808f 	beq.w	80035a0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a2c      	ldr	r2, [pc, #176]	; (8003538 <HAL_DMA_IRQHandler+0x3f8>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d04a      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a2a      	ldr	r2, [pc, #168]	; (800353c <HAL_DMA_IRQHandler+0x3fc>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d045      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a29      	ldr	r2, [pc, #164]	; (8003540 <HAL_DMA_IRQHandler+0x400>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d040      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a27      	ldr	r2, [pc, #156]	; (8003544 <HAL_DMA_IRQHandler+0x404>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d03b      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a26      	ldr	r2, [pc, #152]	; (8003548 <HAL_DMA_IRQHandler+0x408>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d036      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a24      	ldr	r2, [pc, #144]	; (800354c <HAL_DMA_IRQHandler+0x40c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d031      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a23      	ldr	r2, [pc, #140]	; (8003550 <HAL_DMA_IRQHandler+0x410>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d02c      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a21      	ldr	r2, [pc, #132]	; (8003554 <HAL_DMA_IRQHandler+0x414>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d027      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a20      	ldr	r2, [pc, #128]	; (8003558 <HAL_DMA_IRQHandler+0x418>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d022      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a1e      	ldr	r2, [pc, #120]	; (800355c <HAL_DMA_IRQHandler+0x41c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d01d      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a1d      	ldr	r2, [pc, #116]	; (8003560 <HAL_DMA_IRQHandler+0x420>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d018      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a1b      	ldr	r2, [pc, #108]	; (8003564 <HAL_DMA_IRQHandler+0x424>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d013      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a1a      	ldr	r2, [pc, #104]	; (8003568 <HAL_DMA_IRQHandler+0x428>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d00e      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a18      	ldr	r2, [pc, #96]	; (800356c <HAL_DMA_IRQHandler+0x42c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d009      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a17      	ldr	r2, [pc, #92]	; (8003570 <HAL_DMA_IRQHandler+0x430>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d004      	beq.n	8003522 <HAL_DMA_IRQHandler+0x3e2>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a15      	ldr	r2, [pc, #84]	; (8003574 <HAL_DMA_IRQHandler+0x434>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d12a      	bne.n	8003578 <HAL_DMA_IRQHandler+0x438>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	bf14      	ite	ne
 8003530:	2301      	movne	r3, #1
 8003532:	2300      	moveq	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	e023      	b.n	8003580 <HAL_DMA_IRQHandler+0x440>
 8003538:	40020010 	.word	0x40020010
 800353c:	40020028 	.word	0x40020028
 8003540:	40020040 	.word	0x40020040
 8003544:	40020058 	.word	0x40020058
 8003548:	40020070 	.word	0x40020070
 800354c:	40020088 	.word	0x40020088
 8003550:	400200a0 	.word	0x400200a0
 8003554:	400200b8 	.word	0x400200b8
 8003558:	40020410 	.word	0x40020410
 800355c:	40020428 	.word	0x40020428
 8003560:	40020440 	.word	0x40020440
 8003564:	40020458 	.word	0x40020458
 8003568:	40020470 	.word	0x40020470
 800356c:	40020488 	.word	0x40020488
 8003570:	400204a0 	.word	0x400204a0
 8003574:	400204b8 	.word	0x400204b8
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2300      	movs	r3, #0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00d      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003588:	f003 031f 	and.w	r3, r3, #31
 800358c:	2204      	movs	r2, #4
 800358e:	409a      	lsls	r2, r3
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003598:	f043 0204 	orr.w	r2, r3, #4
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a4:	f003 031f 	and.w	r3, r3, #31
 80035a8:	2210      	movs	r2, #16
 80035aa:	409a      	lsls	r2, r3
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 80a6 	beq.w	8003702 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a85      	ldr	r2, [pc, #532]	; (80037d0 <HAL_DMA_IRQHandler+0x690>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d04a      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a83      	ldr	r2, [pc, #524]	; (80037d4 <HAL_DMA_IRQHandler+0x694>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d045      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a82      	ldr	r2, [pc, #520]	; (80037d8 <HAL_DMA_IRQHandler+0x698>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d040      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a80      	ldr	r2, [pc, #512]	; (80037dc <HAL_DMA_IRQHandler+0x69c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d03b      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a7f      	ldr	r2, [pc, #508]	; (80037e0 <HAL_DMA_IRQHandler+0x6a0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d036      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a7d      	ldr	r2, [pc, #500]	; (80037e4 <HAL_DMA_IRQHandler+0x6a4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d031      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a7c      	ldr	r2, [pc, #496]	; (80037e8 <HAL_DMA_IRQHandler+0x6a8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d02c      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a7a      	ldr	r2, [pc, #488]	; (80037ec <HAL_DMA_IRQHandler+0x6ac>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d027      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a79      	ldr	r2, [pc, #484]	; (80037f0 <HAL_DMA_IRQHandler+0x6b0>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d022      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a77      	ldr	r2, [pc, #476]	; (80037f4 <HAL_DMA_IRQHandler+0x6b4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d01d      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a76      	ldr	r2, [pc, #472]	; (80037f8 <HAL_DMA_IRQHandler+0x6b8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d018      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a74      	ldr	r2, [pc, #464]	; (80037fc <HAL_DMA_IRQHandler+0x6bc>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d013      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a73      	ldr	r2, [pc, #460]	; (8003800 <HAL_DMA_IRQHandler+0x6c0>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d00e      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a71      	ldr	r2, [pc, #452]	; (8003804 <HAL_DMA_IRQHandler+0x6c4>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d009      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a70      	ldr	r2, [pc, #448]	; (8003808 <HAL_DMA_IRQHandler+0x6c8>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d004      	beq.n	8003656 <HAL_DMA_IRQHandler+0x516>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a6e      	ldr	r2, [pc, #440]	; (800380c <HAL_DMA_IRQHandler+0x6cc>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d10a      	bne.n	800366c <HAL_DMA_IRQHandler+0x52c>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	bf14      	ite	ne
 8003664:	2301      	movne	r3, #1
 8003666:	2300      	moveq	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	e009      	b.n	8003680 <HAL_DMA_IRQHandler+0x540>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b00      	cmp	r3, #0
 8003678:	bf14      	ite	ne
 800367a:	2301      	movne	r3, #1
 800367c:	2300      	moveq	r3, #0
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d03e      	beq.n	8003702 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003688:	f003 031f 	and.w	r3, r3, #31
 800368c:	2210      	movs	r2, #16
 800368e:	409a      	lsls	r2, r3
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d018      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d108      	bne.n	80036c2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d024      	beq.n	8003702 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	4798      	blx	r3
 80036c0:	e01f      	b.n	8003702 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d01b      	beq.n	8003702 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	4798      	blx	r3
 80036d2:	e016      	b.n	8003702 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d107      	bne.n	80036f2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0208 	bic.w	r2, r2, #8
 80036f0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003706:	f003 031f 	and.w	r3, r3, #31
 800370a:	2220      	movs	r2, #32
 800370c:	409a      	lsls	r2, r3
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	4013      	ands	r3, r2
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 8110 	beq.w	8003938 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a2c      	ldr	r2, [pc, #176]	; (80037d0 <HAL_DMA_IRQHandler+0x690>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d04a      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a2b      	ldr	r2, [pc, #172]	; (80037d4 <HAL_DMA_IRQHandler+0x694>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d045      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a29      	ldr	r2, [pc, #164]	; (80037d8 <HAL_DMA_IRQHandler+0x698>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d040      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a28      	ldr	r2, [pc, #160]	; (80037dc <HAL_DMA_IRQHandler+0x69c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d03b      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a26      	ldr	r2, [pc, #152]	; (80037e0 <HAL_DMA_IRQHandler+0x6a0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d036      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a25      	ldr	r2, [pc, #148]	; (80037e4 <HAL_DMA_IRQHandler+0x6a4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d031      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a23      	ldr	r2, [pc, #140]	; (80037e8 <HAL_DMA_IRQHandler+0x6a8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d02c      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a22      	ldr	r2, [pc, #136]	; (80037ec <HAL_DMA_IRQHandler+0x6ac>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d027      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a20      	ldr	r2, [pc, #128]	; (80037f0 <HAL_DMA_IRQHandler+0x6b0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d022      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a1f      	ldr	r2, [pc, #124]	; (80037f4 <HAL_DMA_IRQHandler+0x6b4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d01d      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a1d      	ldr	r2, [pc, #116]	; (80037f8 <HAL_DMA_IRQHandler+0x6b8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d018      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a1c      	ldr	r2, [pc, #112]	; (80037fc <HAL_DMA_IRQHandler+0x6bc>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d013      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a1a      	ldr	r2, [pc, #104]	; (8003800 <HAL_DMA_IRQHandler+0x6c0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00e      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a19      	ldr	r2, [pc, #100]	; (8003804 <HAL_DMA_IRQHandler+0x6c4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d009      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a17      	ldr	r2, [pc, #92]	; (8003808 <HAL_DMA_IRQHandler+0x6c8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d004      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x678>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a16      	ldr	r2, [pc, #88]	; (800380c <HAL_DMA_IRQHandler+0x6cc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d12b      	bne.n	8003810 <HAL_DMA_IRQHandler+0x6d0>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0310 	and.w	r3, r3, #16
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	bf14      	ite	ne
 80037c6:	2301      	movne	r3, #1
 80037c8:	2300      	moveq	r3, #0
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	e02a      	b.n	8003824 <HAL_DMA_IRQHandler+0x6e4>
 80037ce:	bf00      	nop
 80037d0:	40020010 	.word	0x40020010
 80037d4:	40020028 	.word	0x40020028
 80037d8:	40020040 	.word	0x40020040
 80037dc:	40020058 	.word	0x40020058
 80037e0:	40020070 	.word	0x40020070
 80037e4:	40020088 	.word	0x40020088
 80037e8:	400200a0 	.word	0x400200a0
 80037ec:	400200b8 	.word	0x400200b8
 80037f0:	40020410 	.word	0x40020410
 80037f4:	40020428 	.word	0x40020428
 80037f8:	40020440 	.word	0x40020440
 80037fc:	40020458 	.word	0x40020458
 8003800:	40020470 	.word	0x40020470
 8003804:	40020488 	.word	0x40020488
 8003808:	400204a0 	.word	0x400204a0
 800380c:	400204b8 	.word	0x400204b8
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	bf14      	ite	ne
 800381e:	2301      	movne	r3, #1
 8003820:	2300      	moveq	r3, #0
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 8087 	beq.w	8003938 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382e:	f003 031f 	and.w	r3, r3, #31
 8003832:	2220      	movs	r2, #32
 8003834:	409a      	lsls	r2, r3
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b04      	cmp	r3, #4
 8003844:	d139      	bne.n	80038ba <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0216 	bic.w	r2, r2, #22
 8003854:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695a      	ldr	r2, [r3, #20]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003864:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	2b00      	cmp	r3, #0
 800386c:	d103      	bne.n	8003876 <HAL_DMA_IRQHandler+0x736>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003872:	2b00      	cmp	r3, #0
 8003874:	d007      	beq.n	8003886 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0208 	bic.w	r2, r2, #8
 8003884:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388a:	f003 031f 	and.w	r3, r3, #31
 800388e:	223f      	movs	r2, #63	; 0x3f
 8003890:	409a      	lsls	r2, r3
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 834a 	beq.w	8003f44 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	4798      	blx	r3
          }
          return;
 80038b8:	e344      	b.n	8003f44 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d018      	beq.n	80038fa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d108      	bne.n	80038e8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d02c      	beq.n	8003938 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	4798      	blx	r3
 80038e6:	e027      	b.n	8003938 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d023      	beq.n	8003938 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	4798      	blx	r3
 80038f8:	e01e      	b.n	8003938 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10f      	bne.n	8003928 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0210 	bic.w	r2, r2, #16
 8003916:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 8306 	beq.w	8003f4e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 8088 	beq.w	8003a60 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2204      	movs	r2, #4
 8003954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a7a      	ldr	r2, [pc, #488]	; (8003b48 <HAL_DMA_IRQHandler+0xa08>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d04a      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a79      	ldr	r2, [pc, #484]	; (8003b4c <HAL_DMA_IRQHandler+0xa0c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d045      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a77      	ldr	r2, [pc, #476]	; (8003b50 <HAL_DMA_IRQHandler+0xa10>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d040      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a76      	ldr	r2, [pc, #472]	; (8003b54 <HAL_DMA_IRQHandler+0xa14>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d03b      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a74      	ldr	r2, [pc, #464]	; (8003b58 <HAL_DMA_IRQHandler+0xa18>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d036      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a73      	ldr	r2, [pc, #460]	; (8003b5c <HAL_DMA_IRQHandler+0xa1c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d031      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a71      	ldr	r2, [pc, #452]	; (8003b60 <HAL_DMA_IRQHandler+0xa20>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d02c      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a70      	ldr	r2, [pc, #448]	; (8003b64 <HAL_DMA_IRQHandler+0xa24>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d027      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a6e      	ldr	r2, [pc, #440]	; (8003b68 <HAL_DMA_IRQHandler+0xa28>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d022      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a6d      	ldr	r2, [pc, #436]	; (8003b6c <HAL_DMA_IRQHandler+0xa2c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d01d      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a6b      	ldr	r2, [pc, #428]	; (8003b70 <HAL_DMA_IRQHandler+0xa30>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d018      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a6a      	ldr	r2, [pc, #424]	; (8003b74 <HAL_DMA_IRQHandler+0xa34>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d013      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a68      	ldr	r2, [pc, #416]	; (8003b78 <HAL_DMA_IRQHandler+0xa38>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d00e      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a67      	ldr	r2, [pc, #412]	; (8003b7c <HAL_DMA_IRQHandler+0xa3c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d009      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a65      	ldr	r2, [pc, #404]	; (8003b80 <HAL_DMA_IRQHandler+0xa40>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d004      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x8b8>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a64      	ldr	r2, [pc, #400]	; (8003b84 <HAL_DMA_IRQHandler+0xa44>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d108      	bne.n	8003a0a <HAL_DMA_IRQHandler+0x8ca>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0201 	bic.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	e007      	b.n	8003a1a <HAL_DMA_IRQHandler+0x8da>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0201 	bic.w	r2, r2, #1
 8003a18:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d307      	bcc.n	8003a36 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1f2      	bne.n	8003a1a <HAL_DMA_IRQHandler+0x8da>
 8003a34:	e000      	b.n	8003a38 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003a36:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d004      	beq.n	8003a50 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2203      	movs	r2, #3
 8003a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003a4e:	e003      	b.n	8003a58 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 8272 	beq.w	8003f4e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	4798      	blx	r3
 8003a72:	e26c      	b.n	8003f4e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a43      	ldr	r2, [pc, #268]	; (8003b88 <HAL_DMA_IRQHandler+0xa48>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d022      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x984>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a42      	ldr	r2, [pc, #264]	; (8003b8c <HAL_DMA_IRQHandler+0xa4c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d01d      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x984>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a40      	ldr	r2, [pc, #256]	; (8003b90 <HAL_DMA_IRQHandler+0xa50>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d018      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x984>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a3f      	ldr	r2, [pc, #252]	; (8003b94 <HAL_DMA_IRQHandler+0xa54>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d013      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x984>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a3d      	ldr	r2, [pc, #244]	; (8003b98 <HAL_DMA_IRQHandler+0xa58>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00e      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x984>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a3c      	ldr	r2, [pc, #240]	; (8003b9c <HAL_DMA_IRQHandler+0xa5c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d009      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x984>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a3a      	ldr	r2, [pc, #232]	; (8003ba0 <HAL_DMA_IRQHandler+0xa60>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d004      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x984>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a39      	ldr	r2, [pc, #228]	; (8003ba4 <HAL_DMA_IRQHandler+0xa64>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d101      	bne.n	8003ac8 <HAL_DMA_IRQHandler+0x988>
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e000      	b.n	8003aca <HAL_DMA_IRQHandler+0x98a>
 8003ac8:	2300      	movs	r3, #0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 823f 	beq.w	8003f4e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003adc:	f003 031f 	and.w	r3, r3, #31
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	409a      	lsls	r2, r3
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 80cd 	beq.w	8003c88 <HAL_DMA_IRQHandler+0xb48>
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 80c7 	beq.w	8003c88 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afe:	f003 031f 	and.w	r3, r3, #31
 8003b02:	2204      	movs	r2, #4
 8003b04:	409a      	lsls	r2, r3
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d049      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d109      	bne.n	8003b32 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 8210 	beq.w	8003f48 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b30:	e20a      	b.n	8003f48 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 8206 	beq.w	8003f48 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b44:	e200      	b.n	8003f48 <HAL_DMA_IRQHandler+0xe08>
 8003b46:	bf00      	nop
 8003b48:	40020010 	.word	0x40020010
 8003b4c:	40020028 	.word	0x40020028
 8003b50:	40020040 	.word	0x40020040
 8003b54:	40020058 	.word	0x40020058
 8003b58:	40020070 	.word	0x40020070
 8003b5c:	40020088 	.word	0x40020088
 8003b60:	400200a0 	.word	0x400200a0
 8003b64:	400200b8 	.word	0x400200b8
 8003b68:	40020410 	.word	0x40020410
 8003b6c:	40020428 	.word	0x40020428
 8003b70:	40020440 	.word	0x40020440
 8003b74:	40020458 	.word	0x40020458
 8003b78:	40020470 	.word	0x40020470
 8003b7c:	40020488 	.word	0x40020488
 8003b80:	400204a0 	.word	0x400204a0
 8003b84:	400204b8 	.word	0x400204b8
 8003b88:	58025408 	.word	0x58025408
 8003b8c:	5802541c 	.word	0x5802541c
 8003b90:	58025430 	.word	0x58025430
 8003b94:	58025444 	.word	0x58025444
 8003b98:	58025458 	.word	0x58025458
 8003b9c:	5802546c 	.word	0x5802546c
 8003ba0:	58025480 	.word	0x58025480
 8003ba4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d160      	bne.n	8003c74 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a7f      	ldr	r2, [pc, #508]	; (8003db4 <HAL_DMA_IRQHandler+0xc74>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d04a      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a7d      	ldr	r2, [pc, #500]	; (8003db8 <HAL_DMA_IRQHandler+0xc78>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d045      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a7c      	ldr	r2, [pc, #496]	; (8003dbc <HAL_DMA_IRQHandler+0xc7c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d040      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a7a      	ldr	r2, [pc, #488]	; (8003dc0 <HAL_DMA_IRQHandler+0xc80>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d03b      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a79      	ldr	r2, [pc, #484]	; (8003dc4 <HAL_DMA_IRQHandler+0xc84>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d036      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a77      	ldr	r2, [pc, #476]	; (8003dc8 <HAL_DMA_IRQHandler+0xc88>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d031      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a76      	ldr	r2, [pc, #472]	; (8003dcc <HAL_DMA_IRQHandler+0xc8c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d02c      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a74      	ldr	r2, [pc, #464]	; (8003dd0 <HAL_DMA_IRQHandler+0xc90>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d027      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a73      	ldr	r2, [pc, #460]	; (8003dd4 <HAL_DMA_IRQHandler+0xc94>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d022      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a71      	ldr	r2, [pc, #452]	; (8003dd8 <HAL_DMA_IRQHandler+0xc98>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d01d      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a70      	ldr	r2, [pc, #448]	; (8003ddc <HAL_DMA_IRQHandler+0xc9c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d018      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a6e      	ldr	r2, [pc, #440]	; (8003de0 <HAL_DMA_IRQHandler+0xca0>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a6d      	ldr	r2, [pc, #436]	; (8003de4 <HAL_DMA_IRQHandler+0xca4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d00e      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a6b      	ldr	r2, [pc, #428]	; (8003de8 <HAL_DMA_IRQHandler+0xca8>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d009      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a6a      	ldr	r2, [pc, #424]	; (8003dec <HAL_DMA_IRQHandler+0xcac>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d004      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xb12>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a68      	ldr	r2, [pc, #416]	; (8003df0 <HAL_DMA_IRQHandler+0xcb0>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d108      	bne.n	8003c64 <HAL_DMA_IRQHandler+0xb24>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0208 	bic.w	r2, r2, #8
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	e007      	b.n	8003c74 <HAL_DMA_IRQHandler+0xb34>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0204 	bic.w	r2, r2, #4
 8003c72:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 8165 	beq.w	8003f48 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c86:	e15f      	b.n	8003f48 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8c:	f003 031f 	and.w	r3, r3, #31
 8003c90:	2202      	movs	r2, #2
 8003c92:	409a      	lsls	r2, r3
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	4013      	ands	r3, r2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 80c5 	beq.w	8003e28 <HAL_DMA_IRQHandler+0xce8>
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 80bf 	beq.w	8003e28 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cae:	f003 031f 	and.w	r3, r3, #31
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	409a      	lsls	r2, r3
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d018      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d109      	bne.n	8003ce2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 813a 	beq.w	8003f4c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ce0:	e134      	b.n	8003f4c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 8130 	beq.w	8003f4c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cf4:	e12a      	b.n	8003f4c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f003 0320 	and.w	r3, r3, #32
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f040 8089 	bne.w	8003e14 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a2b      	ldr	r2, [pc, #172]	; (8003db4 <HAL_DMA_IRQHandler+0xc74>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d04a      	beq.n	8003da2 <HAL_DMA_IRQHandler+0xc62>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a29      	ldr	r2, [pc, #164]	; (8003db8 <HAL_DMA_IRQHandler+0xc78>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d045      	beq.n	8003da2 <HAL_DMA_IRQHandler+0xc62>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a28      	ldr	r2, [pc, #160]	; (8003dbc <HAL_DMA_IRQHandler+0xc7c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d040      	beq.n	8003da2 <HAL_DMA_IRQHandler+0xc62>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a26      	ldr	r2, [pc, #152]	; (8003dc0 <HAL_DMA_IRQHandler+0xc80>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d03b      	beq.n	8003da2 <HAL_DMA_IRQHandler+0xc62>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a25      	ldr	r2, [pc, #148]	; (8003dc4 <HAL_DMA_IRQHandler+0xc84>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d036      	beq.n	8003da2 <HAL_DMA_IRQHandler+0xc62>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a23      	ldr	r2, [pc, #140]	; (8003dc8 <HAL_DMA_IRQHandler+0xc88>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d031      	beq.n	8003da2 <HAL_DMA_IRQHandler+0xc62>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a22      	ldr	r2, [pc, #136]	; (8003dcc <HAL_DMA_IRQHandler+0xc8c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d02c      	beq.n	8003da2 <HAL_DMA_IRQHandler+0xc62>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a20      	ldr	r2, [pc, #128]	; (8003dd0 <HAL_DMA_IRQHandler+0xc90>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d027      	beq.n	8003da2 <HAL_DMA_IRQHandler+0xc62>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a1f      	ldr	r2, [pc, #124]	; (8003dd4 <HAL_DMA_IRQHandler+0xc94>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d022      	beq.n	8003da2 <HAL_DMA_IRQHandler+0xc62>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a1d      	ldr	r2, [pc, #116]	; (8003dd8 <HAL_DMA_IRQHandler+0xc98>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d01d      	beq.n	8003da2 <HAL_DMA_IRQHandler+0xc62>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1c      	ldr	r2, [pc, #112]	; (8003ddc <HAL_DMA_IRQHandler+0xc9c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d018      	beq.n	8003da2 <HAL_DMA_IRQHandler+0xc62>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a1a      	ldr	r2, [pc, #104]	; (8003de0 <HAL_DMA_IRQHandler+0xca0>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d013      	beq.n	8003da2 <HAL_DMA_IRQHandler+0xc62>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a19      	ldr	r2, [pc, #100]	; (8003de4 <HAL_DMA_IRQHandler+0xca4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00e      	beq.n	8003da2 <HAL_DMA_IRQHandler+0xc62>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a17      	ldr	r2, [pc, #92]	; (8003de8 <HAL_DMA_IRQHandler+0xca8>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d009      	beq.n	8003da2 <HAL_DMA_IRQHandler+0xc62>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a16      	ldr	r2, [pc, #88]	; (8003dec <HAL_DMA_IRQHandler+0xcac>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d004      	beq.n	8003da2 <HAL_DMA_IRQHandler+0xc62>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a14      	ldr	r2, [pc, #80]	; (8003df0 <HAL_DMA_IRQHandler+0xcb0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d128      	bne.n	8003df4 <HAL_DMA_IRQHandler+0xcb4>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0214 	bic.w	r2, r2, #20
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	e027      	b.n	8003e04 <HAL_DMA_IRQHandler+0xcc4>
 8003db4:	40020010 	.word	0x40020010
 8003db8:	40020028 	.word	0x40020028
 8003dbc:	40020040 	.word	0x40020040
 8003dc0:	40020058 	.word	0x40020058
 8003dc4:	40020070 	.word	0x40020070
 8003dc8:	40020088 	.word	0x40020088
 8003dcc:	400200a0 	.word	0x400200a0
 8003dd0:	400200b8 	.word	0x400200b8
 8003dd4:	40020410 	.word	0x40020410
 8003dd8:	40020428 	.word	0x40020428
 8003ddc:	40020440 	.word	0x40020440
 8003de0:	40020458 	.word	0x40020458
 8003de4:	40020470 	.word	0x40020470
 8003de8:	40020488 	.word	0x40020488
 8003dec:	400204a0 	.word	0x400204a0
 8003df0:	400204b8 	.word	0x400204b8
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 020a 	bic.w	r2, r2, #10
 8003e02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 8097 	beq.w	8003f4c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e26:	e091      	b.n	8003f4c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2c:	f003 031f 	and.w	r3, r3, #31
 8003e30:	2208      	movs	r2, #8
 8003e32:	409a      	lsls	r2, r3
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	4013      	ands	r3, r2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 8088 	beq.w	8003f4e <HAL_DMA_IRQHandler+0xe0e>
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 8082 	beq.w	8003f4e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a41      	ldr	r2, [pc, #260]	; (8003f54 <HAL_DMA_IRQHandler+0xe14>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d04a      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a3f      	ldr	r2, [pc, #252]	; (8003f58 <HAL_DMA_IRQHandler+0xe18>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d045      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a3e      	ldr	r2, [pc, #248]	; (8003f5c <HAL_DMA_IRQHandler+0xe1c>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d040      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a3c      	ldr	r2, [pc, #240]	; (8003f60 <HAL_DMA_IRQHandler+0xe20>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d03b      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a3b      	ldr	r2, [pc, #236]	; (8003f64 <HAL_DMA_IRQHandler+0xe24>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d036      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a39      	ldr	r2, [pc, #228]	; (8003f68 <HAL_DMA_IRQHandler+0xe28>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d031      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a38      	ldr	r2, [pc, #224]	; (8003f6c <HAL_DMA_IRQHandler+0xe2c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d02c      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a36      	ldr	r2, [pc, #216]	; (8003f70 <HAL_DMA_IRQHandler+0xe30>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d027      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a35      	ldr	r2, [pc, #212]	; (8003f74 <HAL_DMA_IRQHandler+0xe34>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d022      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a33      	ldr	r2, [pc, #204]	; (8003f78 <HAL_DMA_IRQHandler+0xe38>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d01d      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a32      	ldr	r2, [pc, #200]	; (8003f7c <HAL_DMA_IRQHandler+0xe3c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d018      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a30      	ldr	r2, [pc, #192]	; (8003f80 <HAL_DMA_IRQHandler+0xe40>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d013      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a2f      	ldr	r2, [pc, #188]	; (8003f84 <HAL_DMA_IRQHandler+0xe44>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d00e      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a2d      	ldr	r2, [pc, #180]	; (8003f88 <HAL_DMA_IRQHandler+0xe48>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d009      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a2c      	ldr	r2, [pc, #176]	; (8003f8c <HAL_DMA_IRQHandler+0xe4c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d004      	beq.n	8003eea <HAL_DMA_IRQHandler+0xdaa>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a2a      	ldr	r2, [pc, #168]	; (8003f90 <HAL_DMA_IRQHandler+0xe50>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d108      	bne.n	8003efc <HAL_DMA_IRQHandler+0xdbc>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 021c 	bic.w	r2, r2, #28
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	e007      	b.n	8003f0c <HAL_DMA_IRQHandler+0xdcc>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 020e 	bic.w	r2, r2, #14
 8003f0a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f10:	f003 031f 	and.w	r3, r3, #31
 8003f14:	2201      	movs	r2, #1
 8003f16:	409a      	lsls	r2, r3
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d009      	beq.n	8003f4e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	4798      	blx	r3
 8003f42:	e004      	b.n	8003f4e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003f44:	bf00      	nop
 8003f46:	e002      	b.n	8003f4e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f48:	bf00      	nop
 8003f4a:	e000      	b.n	8003f4e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f4c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003f4e:	3728      	adds	r7, #40	; 0x28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40020010 	.word	0x40020010
 8003f58:	40020028 	.word	0x40020028
 8003f5c:	40020040 	.word	0x40020040
 8003f60:	40020058 	.word	0x40020058
 8003f64:	40020070 	.word	0x40020070
 8003f68:	40020088 	.word	0x40020088
 8003f6c:	400200a0 	.word	0x400200a0
 8003f70:	400200b8 	.word	0x400200b8
 8003f74:	40020410 	.word	0x40020410
 8003f78:	40020428 	.word	0x40020428
 8003f7c:	40020440 	.word	0x40020440
 8003f80:	40020458 	.word	0x40020458
 8003f84:	40020470 	.word	0x40020470
 8003f88:	40020488 	.word	0x40020488
 8003f8c:	400204a0 	.word	0x400204a0
 8003f90:	400204b8 	.word	0x400204b8

08003f94 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
 8003fa0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fac:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a7f      	ldr	r2, [pc, #508]	; (80041b0 <DMA_SetConfig+0x21c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d072      	beq.n	800409e <DMA_SetConfig+0x10a>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a7d      	ldr	r2, [pc, #500]	; (80041b4 <DMA_SetConfig+0x220>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d06d      	beq.n	800409e <DMA_SetConfig+0x10a>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a7c      	ldr	r2, [pc, #496]	; (80041b8 <DMA_SetConfig+0x224>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d068      	beq.n	800409e <DMA_SetConfig+0x10a>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a7a      	ldr	r2, [pc, #488]	; (80041bc <DMA_SetConfig+0x228>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d063      	beq.n	800409e <DMA_SetConfig+0x10a>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a79      	ldr	r2, [pc, #484]	; (80041c0 <DMA_SetConfig+0x22c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d05e      	beq.n	800409e <DMA_SetConfig+0x10a>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a77      	ldr	r2, [pc, #476]	; (80041c4 <DMA_SetConfig+0x230>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d059      	beq.n	800409e <DMA_SetConfig+0x10a>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a76      	ldr	r2, [pc, #472]	; (80041c8 <DMA_SetConfig+0x234>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d054      	beq.n	800409e <DMA_SetConfig+0x10a>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a74      	ldr	r2, [pc, #464]	; (80041cc <DMA_SetConfig+0x238>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d04f      	beq.n	800409e <DMA_SetConfig+0x10a>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a73      	ldr	r2, [pc, #460]	; (80041d0 <DMA_SetConfig+0x23c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d04a      	beq.n	800409e <DMA_SetConfig+0x10a>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a71      	ldr	r2, [pc, #452]	; (80041d4 <DMA_SetConfig+0x240>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d045      	beq.n	800409e <DMA_SetConfig+0x10a>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a70      	ldr	r2, [pc, #448]	; (80041d8 <DMA_SetConfig+0x244>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d040      	beq.n	800409e <DMA_SetConfig+0x10a>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a6e      	ldr	r2, [pc, #440]	; (80041dc <DMA_SetConfig+0x248>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d03b      	beq.n	800409e <DMA_SetConfig+0x10a>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a6d      	ldr	r2, [pc, #436]	; (80041e0 <DMA_SetConfig+0x24c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d036      	beq.n	800409e <DMA_SetConfig+0x10a>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a6b      	ldr	r2, [pc, #428]	; (80041e4 <DMA_SetConfig+0x250>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d031      	beq.n	800409e <DMA_SetConfig+0x10a>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a6a      	ldr	r2, [pc, #424]	; (80041e8 <DMA_SetConfig+0x254>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d02c      	beq.n	800409e <DMA_SetConfig+0x10a>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a68      	ldr	r2, [pc, #416]	; (80041ec <DMA_SetConfig+0x258>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d027      	beq.n	800409e <DMA_SetConfig+0x10a>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a67      	ldr	r2, [pc, #412]	; (80041f0 <DMA_SetConfig+0x25c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d022      	beq.n	800409e <DMA_SetConfig+0x10a>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a65      	ldr	r2, [pc, #404]	; (80041f4 <DMA_SetConfig+0x260>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d01d      	beq.n	800409e <DMA_SetConfig+0x10a>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a64      	ldr	r2, [pc, #400]	; (80041f8 <DMA_SetConfig+0x264>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d018      	beq.n	800409e <DMA_SetConfig+0x10a>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a62      	ldr	r2, [pc, #392]	; (80041fc <DMA_SetConfig+0x268>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d013      	beq.n	800409e <DMA_SetConfig+0x10a>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a61      	ldr	r2, [pc, #388]	; (8004200 <DMA_SetConfig+0x26c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00e      	beq.n	800409e <DMA_SetConfig+0x10a>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a5f      	ldr	r2, [pc, #380]	; (8004204 <DMA_SetConfig+0x270>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d009      	beq.n	800409e <DMA_SetConfig+0x10a>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a5e      	ldr	r2, [pc, #376]	; (8004208 <DMA_SetConfig+0x274>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d004      	beq.n	800409e <DMA_SetConfig+0x10a>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a5c      	ldr	r2, [pc, #368]	; (800420c <DMA_SetConfig+0x278>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d101      	bne.n	80040a2 <DMA_SetConfig+0x10e>
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <DMA_SetConfig+0x110>
 80040a2:	2300      	movs	r3, #0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00d      	beq.n	80040c4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80040b0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d004      	beq.n	80040c4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80040c2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a39      	ldr	r2, [pc, #228]	; (80041b0 <DMA_SetConfig+0x21c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d04a      	beq.n	8004164 <DMA_SetConfig+0x1d0>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a38      	ldr	r2, [pc, #224]	; (80041b4 <DMA_SetConfig+0x220>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d045      	beq.n	8004164 <DMA_SetConfig+0x1d0>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a36      	ldr	r2, [pc, #216]	; (80041b8 <DMA_SetConfig+0x224>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d040      	beq.n	8004164 <DMA_SetConfig+0x1d0>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a35      	ldr	r2, [pc, #212]	; (80041bc <DMA_SetConfig+0x228>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d03b      	beq.n	8004164 <DMA_SetConfig+0x1d0>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a33      	ldr	r2, [pc, #204]	; (80041c0 <DMA_SetConfig+0x22c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d036      	beq.n	8004164 <DMA_SetConfig+0x1d0>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a32      	ldr	r2, [pc, #200]	; (80041c4 <DMA_SetConfig+0x230>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d031      	beq.n	8004164 <DMA_SetConfig+0x1d0>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a30      	ldr	r2, [pc, #192]	; (80041c8 <DMA_SetConfig+0x234>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d02c      	beq.n	8004164 <DMA_SetConfig+0x1d0>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a2f      	ldr	r2, [pc, #188]	; (80041cc <DMA_SetConfig+0x238>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d027      	beq.n	8004164 <DMA_SetConfig+0x1d0>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a2d      	ldr	r2, [pc, #180]	; (80041d0 <DMA_SetConfig+0x23c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d022      	beq.n	8004164 <DMA_SetConfig+0x1d0>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a2c      	ldr	r2, [pc, #176]	; (80041d4 <DMA_SetConfig+0x240>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d01d      	beq.n	8004164 <DMA_SetConfig+0x1d0>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a2a      	ldr	r2, [pc, #168]	; (80041d8 <DMA_SetConfig+0x244>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d018      	beq.n	8004164 <DMA_SetConfig+0x1d0>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a29      	ldr	r2, [pc, #164]	; (80041dc <DMA_SetConfig+0x248>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d013      	beq.n	8004164 <DMA_SetConfig+0x1d0>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a27      	ldr	r2, [pc, #156]	; (80041e0 <DMA_SetConfig+0x24c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00e      	beq.n	8004164 <DMA_SetConfig+0x1d0>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a26      	ldr	r2, [pc, #152]	; (80041e4 <DMA_SetConfig+0x250>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d009      	beq.n	8004164 <DMA_SetConfig+0x1d0>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a24      	ldr	r2, [pc, #144]	; (80041e8 <DMA_SetConfig+0x254>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d004      	beq.n	8004164 <DMA_SetConfig+0x1d0>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a23      	ldr	r2, [pc, #140]	; (80041ec <DMA_SetConfig+0x258>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d101      	bne.n	8004168 <DMA_SetConfig+0x1d4>
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <DMA_SetConfig+0x1d6>
 8004168:	2300      	movs	r3, #0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d059      	beq.n	8004222 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004172:	f003 031f 	and.w	r3, r3, #31
 8004176:	223f      	movs	r2, #63	; 0x3f
 8004178:	409a      	lsls	r2, r3
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800418c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	2b40      	cmp	r3, #64	; 0x40
 800419c:	d138      	bne.n	8004210 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80041ae:	e086      	b.n	80042be <DMA_SetConfig+0x32a>
 80041b0:	40020010 	.word	0x40020010
 80041b4:	40020028 	.word	0x40020028
 80041b8:	40020040 	.word	0x40020040
 80041bc:	40020058 	.word	0x40020058
 80041c0:	40020070 	.word	0x40020070
 80041c4:	40020088 	.word	0x40020088
 80041c8:	400200a0 	.word	0x400200a0
 80041cc:	400200b8 	.word	0x400200b8
 80041d0:	40020410 	.word	0x40020410
 80041d4:	40020428 	.word	0x40020428
 80041d8:	40020440 	.word	0x40020440
 80041dc:	40020458 	.word	0x40020458
 80041e0:	40020470 	.word	0x40020470
 80041e4:	40020488 	.word	0x40020488
 80041e8:	400204a0 	.word	0x400204a0
 80041ec:	400204b8 	.word	0x400204b8
 80041f0:	58025408 	.word	0x58025408
 80041f4:	5802541c 	.word	0x5802541c
 80041f8:	58025430 	.word	0x58025430
 80041fc:	58025444 	.word	0x58025444
 8004200:	58025458 	.word	0x58025458
 8004204:	5802546c 	.word	0x5802546c
 8004208:	58025480 	.word	0x58025480
 800420c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	60da      	str	r2, [r3, #12]
}
 8004220:	e04d      	b.n	80042be <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a29      	ldr	r2, [pc, #164]	; (80042cc <DMA_SetConfig+0x338>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d022      	beq.n	8004272 <DMA_SetConfig+0x2de>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a27      	ldr	r2, [pc, #156]	; (80042d0 <DMA_SetConfig+0x33c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d01d      	beq.n	8004272 <DMA_SetConfig+0x2de>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a26      	ldr	r2, [pc, #152]	; (80042d4 <DMA_SetConfig+0x340>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d018      	beq.n	8004272 <DMA_SetConfig+0x2de>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a24      	ldr	r2, [pc, #144]	; (80042d8 <DMA_SetConfig+0x344>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d013      	beq.n	8004272 <DMA_SetConfig+0x2de>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a23      	ldr	r2, [pc, #140]	; (80042dc <DMA_SetConfig+0x348>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d00e      	beq.n	8004272 <DMA_SetConfig+0x2de>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a21      	ldr	r2, [pc, #132]	; (80042e0 <DMA_SetConfig+0x34c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d009      	beq.n	8004272 <DMA_SetConfig+0x2de>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a20      	ldr	r2, [pc, #128]	; (80042e4 <DMA_SetConfig+0x350>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d004      	beq.n	8004272 <DMA_SetConfig+0x2de>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a1e      	ldr	r2, [pc, #120]	; (80042e8 <DMA_SetConfig+0x354>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d101      	bne.n	8004276 <DMA_SetConfig+0x2e2>
 8004272:	2301      	movs	r3, #1
 8004274:	e000      	b.n	8004278 <DMA_SetConfig+0x2e4>
 8004276:	2300      	movs	r3, #0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d020      	beq.n	80042be <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004280:	f003 031f 	and.w	r3, r3, #31
 8004284:	2201      	movs	r2, #1
 8004286:	409a      	lsls	r2, r3
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2b40      	cmp	r3, #64	; 0x40
 800429a:	d108      	bne.n	80042ae <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	60da      	str	r2, [r3, #12]
}
 80042ac:	e007      	b.n	80042be <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	60da      	str	r2, [r3, #12]
}
 80042be:	bf00      	nop
 80042c0:	371c      	adds	r7, #28
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	58025408 	.word	0x58025408
 80042d0:	5802541c 	.word	0x5802541c
 80042d4:	58025430 	.word	0x58025430
 80042d8:	58025444 	.word	0x58025444
 80042dc:	58025458 	.word	0x58025458
 80042e0:	5802546c 	.word	0x5802546c
 80042e4:	58025480 	.word	0x58025480
 80042e8:	58025494 	.word	0x58025494

080042ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a42      	ldr	r2, [pc, #264]	; (8004404 <DMA_CalcBaseAndBitshift+0x118>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d04a      	beq.n	8004394 <DMA_CalcBaseAndBitshift+0xa8>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a41      	ldr	r2, [pc, #260]	; (8004408 <DMA_CalcBaseAndBitshift+0x11c>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d045      	beq.n	8004394 <DMA_CalcBaseAndBitshift+0xa8>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a3f      	ldr	r2, [pc, #252]	; (800440c <DMA_CalcBaseAndBitshift+0x120>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d040      	beq.n	8004394 <DMA_CalcBaseAndBitshift+0xa8>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a3e      	ldr	r2, [pc, #248]	; (8004410 <DMA_CalcBaseAndBitshift+0x124>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d03b      	beq.n	8004394 <DMA_CalcBaseAndBitshift+0xa8>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a3c      	ldr	r2, [pc, #240]	; (8004414 <DMA_CalcBaseAndBitshift+0x128>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d036      	beq.n	8004394 <DMA_CalcBaseAndBitshift+0xa8>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a3b      	ldr	r2, [pc, #236]	; (8004418 <DMA_CalcBaseAndBitshift+0x12c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d031      	beq.n	8004394 <DMA_CalcBaseAndBitshift+0xa8>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a39      	ldr	r2, [pc, #228]	; (800441c <DMA_CalcBaseAndBitshift+0x130>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d02c      	beq.n	8004394 <DMA_CalcBaseAndBitshift+0xa8>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a38      	ldr	r2, [pc, #224]	; (8004420 <DMA_CalcBaseAndBitshift+0x134>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d027      	beq.n	8004394 <DMA_CalcBaseAndBitshift+0xa8>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a36      	ldr	r2, [pc, #216]	; (8004424 <DMA_CalcBaseAndBitshift+0x138>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d022      	beq.n	8004394 <DMA_CalcBaseAndBitshift+0xa8>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a35      	ldr	r2, [pc, #212]	; (8004428 <DMA_CalcBaseAndBitshift+0x13c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d01d      	beq.n	8004394 <DMA_CalcBaseAndBitshift+0xa8>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a33      	ldr	r2, [pc, #204]	; (800442c <DMA_CalcBaseAndBitshift+0x140>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d018      	beq.n	8004394 <DMA_CalcBaseAndBitshift+0xa8>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a32      	ldr	r2, [pc, #200]	; (8004430 <DMA_CalcBaseAndBitshift+0x144>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d013      	beq.n	8004394 <DMA_CalcBaseAndBitshift+0xa8>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a30      	ldr	r2, [pc, #192]	; (8004434 <DMA_CalcBaseAndBitshift+0x148>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00e      	beq.n	8004394 <DMA_CalcBaseAndBitshift+0xa8>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a2f      	ldr	r2, [pc, #188]	; (8004438 <DMA_CalcBaseAndBitshift+0x14c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d009      	beq.n	8004394 <DMA_CalcBaseAndBitshift+0xa8>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a2d      	ldr	r2, [pc, #180]	; (800443c <DMA_CalcBaseAndBitshift+0x150>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d004      	beq.n	8004394 <DMA_CalcBaseAndBitshift+0xa8>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a2c      	ldr	r2, [pc, #176]	; (8004440 <DMA_CalcBaseAndBitshift+0x154>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d101      	bne.n	8004398 <DMA_CalcBaseAndBitshift+0xac>
 8004394:	2301      	movs	r3, #1
 8004396:	e000      	b.n	800439a <DMA_CalcBaseAndBitshift+0xae>
 8004398:	2300      	movs	r3, #0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d024      	beq.n	80043e8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	3b10      	subs	r3, #16
 80043a6:	4a27      	ldr	r2, [pc, #156]	; (8004444 <DMA_CalcBaseAndBitshift+0x158>)
 80043a8:	fba2 2303 	umull	r2, r3, r2, r3
 80043ac:	091b      	lsrs	r3, r3, #4
 80043ae:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	4a24      	ldr	r2, [pc, #144]	; (8004448 <DMA_CalcBaseAndBitshift+0x15c>)
 80043b8:	5cd3      	ldrb	r3, [r2, r3]
 80043ba:	461a      	mov	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2b03      	cmp	r3, #3
 80043c4:	d908      	bls.n	80043d8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	4b1f      	ldr	r3, [pc, #124]	; (800444c <DMA_CalcBaseAndBitshift+0x160>)
 80043ce:	4013      	ands	r3, r2
 80043d0:	1d1a      	adds	r2, r3, #4
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	659a      	str	r2, [r3, #88]	; 0x58
 80043d6:	e00d      	b.n	80043f4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	461a      	mov	r2, r3
 80043de:	4b1b      	ldr	r3, [pc, #108]	; (800444c <DMA_CalcBaseAndBitshift+0x160>)
 80043e0:	4013      	ands	r3, r2
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6593      	str	r3, [r2, #88]	; 0x58
 80043e6:	e005      	b.n	80043f4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	40020010 	.word	0x40020010
 8004408:	40020028 	.word	0x40020028
 800440c:	40020040 	.word	0x40020040
 8004410:	40020058 	.word	0x40020058
 8004414:	40020070 	.word	0x40020070
 8004418:	40020088 	.word	0x40020088
 800441c:	400200a0 	.word	0x400200a0
 8004420:	400200b8 	.word	0x400200b8
 8004424:	40020410 	.word	0x40020410
 8004428:	40020428 	.word	0x40020428
 800442c:	40020440 	.word	0x40020440
 8004430:	40020458 	.word	0x40020458
 8004434:	40020470 	.word	0x40020470
 8004438:	40020488 	.word	0x40020488
 800443c:	400204a0 	.word	0x400204a0
 8004440:	400204b8 	.word	0x400204b8
 8004444:	aaaaaaab 	.word	0xaaaaaaab
 8004448:	08010850 	.word	0x08010850
 800444c:	fffffc00 	.word	0xfffffc00

08004450 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004458:	2300      	movs	r3, #0
 800445a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d120      	bne.n	80044a6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004468:	2b03      	cmp	r3, #3
 800446a:	d858      	bhi.n	800451e <DMA_CheckFifoParam+0xce>
 800446c:	a201      	add	r2, pc, #4	; (adr r2, 8004474 <DMA_CheckFifoParam+0x24>)
 800446e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004472:	bf00      	nop
 8004474:	08004485 	.word	0x08004485
 8004478:	08004497 	.word	0x08004497
 800447c:	08004485 	.word	0x08004485
 8004480:	0800451f 	.word	0x0800451f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d048      	beq.n	8004522 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004494:	e045      	b.n	8004522 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800449e:	d142      	bne.n	8004526 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044a4:	e03f      	b.n	8004526 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ae:	d123      	bne.n	80044f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b4:	2b03      	cmp	r3, #3
 80044b6:	d838      	bhi.n	800452a <DMA_CheckFifoParam+0xda>
 80044b8:	a201      	add	r2, pc, #4	; (adr r2, 80044c0 <DMA_CheckFifoParam+0x70>)
 80044ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044be:	bf00      	nop
 80044c0:	080044d1 	.word	0x080044d1
 80044c4:	080044d7 	.word	0x080044d7
 80044c8:	080044d1 	.word	0x080044d1
 80044cc:	080044e9 	.word	0x080044e9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	73fb      	strb	r3, [r7, #15]
        break;
 80044d4:	e030      	b.n	8004538 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d025      	beq.n	800452e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044e6:	e022      	b.n	800452e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044f0:	d11f      	bne.n	8004532 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044f6:	e01c      	b.n	8004532 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d902      	bls.n	8004506 <DMA_CheckFifoParam+0xb6>
 8004500:	2b03      	cmp	r3, #3
 8004502:	d003      	beq.n	800450c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004504:	e018      	b.n	8004538 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	73fb      	strb	r3, [r7, #15]
        break;
 800450a:	e015      	b.n	8004538 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00e      	beq.n	8004536 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	73fb      	strb	r3, [r7, #15]
    break;
 800451c:	e00b      	b.n	8004536 <DMA_CheckFifoParam+0xe6>
        break;
 800451e:	bf00      	nop
 8004520:	e00a      	b.n	8004538 <DMA_CheckFifoParam+0xe8>
        break;
 8004522:	bf00      	nop
 8004524:	e008      	b.n	8004538 <DMA_CheckFifoParam+0xe8>
        break;
 8004526:	bf00      	nop
 8004528:	e006      	b.n	8004538 <DMA_CheckFifoParam+0xe8>
        break;
 800452a:	bf00      	nop
 800452c:	e004      	b.n	8004538 <DMA_CheckFifoParam+0xe8>
        break;
 800452e:	bf00      	nop
 8004530:	e002      	b.n	8004538 <DMA_CheckFifoParam+0xe8>
        break;
 8004532:	bf00      	nop
 8004534:	e000      	b.n	8004538 <DMA_CheckFifoParam+0xe8>
    break;
 8004536:	bf00      	nop
    }
  }

  return status;
 8004538:	7bfb      	ldrb	r3, [r7, #15]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop

08004548 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a38      	ldr	r2, [pc, #224]	; (800463c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d022      	beq.n	80045a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a36      	ldr	r2, [pc, #216]	; (8004640 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d01d      	beq.n	80045a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a35      	ldr	r2, [pc, #212]	; (8004644 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d018      	beq.n	80045a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a33      	ldr	r2, [pc, #204]	; (8004648 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d013      	beq.n	80045a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a32      	ldr	r2, [pc, #200]	; (800464c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d00e      	beq.n	80045a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a30      	ldr	r2, [pc, #192]	; (8004650 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d009      	beq.n	80045a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a2f      	ldr	r2, [pc, #188]	; (8004654 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d004      	beq.n	80045a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a2d      	ldr	r2, [pc, #180]	; (8004658 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d101      	bne.n	80045aa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80045a6:	2301      	movs	r3, #1
 80045a8:	e000      	b.n	80045ac <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80045aa:	2300      	movs	r3, #0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d01a      	beq.n	80045e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	3b08      	subs	r3, #8
 80045b8:	4a28      	ldr	r2, [pc, #160]	; (800465c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80045ba:	fba2 2303 	umull	r2, r3, r2, r3
 80045be:	091b      	lsrs	r3, r3, #4
 80045c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	4b26      	ldr	r3, [pc, #152]	; (8004660 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80045c6:	4413      	add	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	461a      	mov	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a24      	ldr	r2, [pc, #144]	; (8004664 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80045d4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f003 031f 	and.w	r3, r3, #31
 80045dc:	2201      	movs	r2, #1
 80045de:	409a      	lsls	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80045e4:	e024      	b.n	8004630 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	3b10      	subs	r3, #16
 80045ee:	4a1e      	ldr	r2, [pc, #120]	; (8004668 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80045f0:	fba2 2303 	umull	r2, r3, r2, r3
 80045f4:	091b      	lsrs	r3, r3, #4
 80045f6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	4a1c      	ldr	r2, [pc, #112]	; (800466c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d806      	bhi.n	800460e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4a1b      	ldr	r2, [pc, #108]	; (8004670 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d902      	bls.n	800460e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	3308      	adds	r3, #8
 800460c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	4b18      	ldr	r3, [pc, #96]	; (8004674 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004612:	4413      	add	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	461a      	mov	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a16      	ldr	r2, [pc, #88]	; (8004678 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004620:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f003 031f 	and.w	r3, r3, #31
 8004628:	2201      	movs	r2, #1
 800462a:	409a      	lsls	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004630:	bf00      	nop
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	58025408 	.word	0x58025408
 8004640:	5802541c 	.word	0x5802541c
 8004644:	58025430 	.word	0x58025430
 8004648:	58025444 	.word	0x58025444
 800464c:	58025458 	.word	0x58025458
 8004650:	5802546c 	.word	0x5802546c
 8004654:	58025480 	.word	0x58025480
 8004658:	58025494 	.word	0x58025494
 800465c:	cccccccd 	.word	0xcccccccd
 8004660:	16009600 	.word	0x16009600
 8004664:	58025880 	.word	0x58025880
 8004668:	aaaaaaab 	.word	0xaaaaaaab
 800466c:	400204b8 	.word	0x400204b8
 8004670:	4002040f 	.word	0x4002040f
 8004674:	10008200 	.word	0x10008200
 8004678:	40020880 	.word	0x40020880

0800467c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	b2db      	uxtb	r3, r3
 800468a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d04a      	beq.n	8004728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2b08      	cmp	r3, #8
 8004696:	d847      	bhi.n	8004728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a25      	ldr	r2, [pc, #148]	; (8004734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d022      	beq.n	80046e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a24      	ldr	r2, [pc, #144]	; (8004738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d01d      	beq.n	80046e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a22      	ldr	r2, [pc, #136]	; (800473c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d018      	beq.n	80046e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a21      	ldr	r2, [pc, #132]	; (8004740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d013      	beq.n	80046e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a1f      	ldr	r2, [pc, #124]	; (8004744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d00e      	beq.n	80046e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a1e      	ldr	r2, [pc, #120]	; (8004748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d009      	beq.n	80046e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a1c      	ldr	r2, [pc, #112]	; (800474c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d004      	beq.n	80046e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a1b      	ldr	r2, [pc, #108]	; (8004750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d101      	bne.n	80046ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80046e8:	2301      	movs	r3, #1
 80046ea:	e000      	b.n	80046ee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80046ec:	2300      	movs	r3, #0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	4b17      	ldr	r3, [pc, #92]	; (8004754 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	461a      	mov	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a15      	ldr	r2, [pc, #84]	; (8004758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004704:	671a      	str	r2, [r3, #112]	; 0x70
 8004706:	e009      	b.n	800471c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	4b14      	ldr	r3, [pc, #80]	; (800475c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800470c:	4413      	add	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	461a      	mov	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a11      	ldr	r2, [pc, #68]	; (8004760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800471a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	3b01      	subs	r3, #1
 8004720:	2201      	movs	r2, #1
 8004722:	409a      	lsls	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004728:	bf00      	nop
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	58025408 	.word	0x58025408
 8004738:	5802541c 	.word	0x5802541c
 800473c:	58025430 	.word	0x58025430
 8004740:	58025444 	.word	0x58025444
 8004744:	58025458 	.word	0x58025458
 8004748:	5802546c 	.word	0x5802546c
 800474c:	58025480 	.word	0x58025480
 8004750:	58025494 	.word	0x58025494
 8004754:	1600963f 	.word	0x1600963f
 8004758:	58025940 	.word	0x58025940
 800475c:	1000823f 	.word	0x1000823f
 8004760:	40020940 	.word	0x40020940

08004764 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004764:	b480      	push	{r7}
 8004766:	b089      	sub	sp, #36	; 0x24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800476e:	2300      	movs	r3, #0
 8004770:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004772:	4b89      	ldr	r3, [pc, #548]	; (8004998 <HAL_GPIO_Init+0x234>)
 8004774:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004776:	e194      	b.n	8004aa2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	2101      	movs	r1, #1
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	fa01 f303 	lsl.w	r3, r1, r3
 8004784:	4013      	ands	r3, r2
 8004786:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 8186 	beq.w	8004a9c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f003 0303 	and.w	r3, r3, #3
 8004798:	2b01      	cmp	r3, #1
 800479a:	d005      	beq.n	80047a8 <HAL_GPIO_Init+0x44>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f003 0303 	and.w	r3, r3, #3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d130      	bne.n	800480a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	2203      	movs	r2, #3
 80047b4:	fa02 f303 	lsl.w	r3, r2, r3
 80047b8:	43db      	mvns	r3, r3
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	4013      	ands	r3, r2
 80047be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	68da      	ldr	r2, [r3, #12]
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	fa02 f303 	lsl.w	r3, r2, r3
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047de:	2201      	movs	r2, #1
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	fa02 f303 	lsl.w	r3, r2, r3
 80047e6:	43db      	mvns	r3, r3
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	4013      	ands	r3, r2
 80047ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	091b      	lsrs	r3, r3, #4
 80047f4:	f003 0201 	and.w	r2, r3, #1
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	4313      	orrs	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	2b03      	cmp	r3, #3
 8004814:	d017      	beq.n	8004846 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	2203      	movs	r2, #3
 8004822:	fa02 f303 	lsl.w	r3, r2, r3
 8004826:	43db      	mvns	r3, r3
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	4013      	ands	r3, r2
 800482c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	689a      	ldr	r2, [r3, #8]
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4313      	orrs	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d123      	bne.n	800489a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	08da      	lsrs	r2, r3, #3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	3208      	adds	r2, #8
 800485a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800485e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	220f      	movs	r2, #15
 800486a:	fa02 f303 	lsl.w	r3, r2, r3
 800486e:	43db      	mvns	r3, r3
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	4013      	ands	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	691a      	ldr	r2, [r3, #16]
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	4313      	orrs	r3, r2
 800488a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	08da      	lsrs	r2, r3, #3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	3208      	adds	r2, #8
 8004894:	69b9      	ldr	r1, [r7, #24]
 8004896:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	2203      	movs	r2, #3
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	43db      	mvns	r3, r3
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	4013      	ands	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f003 0203 	and.w	r2, r3, #3
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 80e0 	beq.w	8004a9c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048dc:	4b2f      	ldr	r3, [pc, #188]	; (800499c <HAL_GPIO_Init+0x238>)
 80048de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048e2:	4a2e      	ldr	r2, [pc, #184]	; (800499c <HAL_GPIO_Init+0x238>)
 80048e4:	f043 0302 	orr.w	r3, r3, #2
 80048e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80048ec:	4b2b      	ldr	r3, [pc, #172]	; (800499c <HAL_GPIO_Init+0x238>)
 80048ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048fa:	4a29      	ldr	r2, [pc, #164]	; (80049a0 <HAL_GPIO_Init+0x23c>)
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	089b      	lsrs	r3, r3, #2
 8004900:	3302      	adds	r3, #2
 8004902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	f003 0303 	and.w	r3, r3, #3
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	220f      	movs	r2, #15
 8004912:	fa02 f303 	lsl.w	r3, r2, r3
 8004916:	43db      	mvns	r3, r3
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	4013      	ands	r3, r2
 800491c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a20      	ldr	r2, [pc, #128]	; (80049a4 <HAL_GPIO_Init+0x240>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d052      	beq.n	80049cc <HAL_GPIO_Init+0x268>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a1f      	ldr	r2, [pc, #124]	; (80049a8 <HAL_GPIO_Init+0x244>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d031      	beq.n	8004992 <HAL_GPIO_Init+0x22e>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a1e      	ldr	r2, [pc, #120]	; (80049ac <HAL_GPIO_Init+0x248>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d02b      	beq.n	800498e <HAL_GPIO_Init+0x22a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a1d      	ldr	r2, [pc, #116]	; (80049b0 <HAL_GPIO_Init+0x24c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d025      	beq.n	800498a <HAL_GPIO_Init+0x226>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a1c      	ldr	r2, [pc, #112]	; (80049b4 <HAL_GPIO_Init+0x250>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d01f      	beq.n	8004986 <HAL_GPIO_Init+0x222>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a1b      	ldr	r2, [pc, #108]	; (80049b8 <HAL_GPIO_Init+0x254>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d019      	beq.n	8004982 <HAL_GPIO_Init+0x21e>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a1a      	ldr	r2, [pc, #104]	; (80049bc <HAL_GPIO_Init+0x258>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d013      	beq.n	800497e <HAL_GPIO_Init+0x21a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a19      	ldr	r2, [pc, #100]	; (80049c0 <HAL_GPIO_Init+0x25c>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00d      	beq.n	800497a <HAL_GPIO_Init+0x216>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a18      	ldr	r2, [pc, #96]	; (80049c4 <HAL_GPIO_Init+0x260>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d007      	beq.n	8004976 <HAL_GPIO_Init+0x212>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a17      	ldr	r2, [pc, #92]	; (80049c8 <HAL_GPIO_Init+0x264>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d101      	bne.n	8004972 <HAL_GPIO_Init+0x20e>
 800496e:	2309      	movs	r3, #9
 8004970:	e02d      	b.n	80049ce <HAL_GPIO_Init+0x26a>
 8004972:	230a      	movs	r3, #10
 8004974:	e02b      	b.n	80049ce <HAL_GPIO_Init+0x26a>
 8004976:	2308      	movs	r3, #8
 8004978:	e029      	b.n	80049ce <HAL_GPIO_Init+0x26a>
 800497a:	2307      	movs	r3, #7
 800497c:	e027      	b.n	80049ce <HAL_GPIO_Init+0x26a>
 800497e:	2306      	movs	r3, #6
 8004980:	e025      	b.n	80049ce <HAL_GPIO_Init+0x26a>
 8004982:	2305      	movs	r3, #5
 8004984:	e023      	b.n	80049ce <HAL_GPIO_Init+0x26a>
 8004986:	2304      	movs	r3, #4
 8004988:	e021      	b.n	80049ce <HAL_GPIO_Init+0x26a>
 800498a:	2303      	movs	r3, #3
 800498c:	e01f      	b.n	80049ce <HAL_GPIO_Init+0x26a>
 800498e:	2302      	movs	r3, #2
 8004990:	e01d      	b.n	80049ce <HAL_GPIO_Init+0x26a>
 8004992:	2301      	movs	r3, #1
 8004994:	e01b      	b.n	80049ce <HAL_GPIO_Init+0x26a>
 8004996:	bf00      	nop
 8004998:	58000080 	.word	0x58000080
 800499c:	58024400 	.word	0x58024400
 80049a0:	58000400 	.word	0x58000400
 80049a4:	58020000 	.word	0x58020000
 80049a8:	58020400 	.word	0x58020400
 80049ac:	58020800 	.word	0x58020800
 80049b0:	58020c00 	.word	0x58020c00
 80049b4:	58021000 	.word	0x58021000
 80049b8:	58021400 	.word	0x58021400
 80049bc:	58021800 	.word	0x58021800
 80049c0:	58021c00 	.word	0x58021c00
 80049c4:	58022000 	.word	0x58022000
 80049c8:	58022400 	.word	0x58022400
 80049cc:	2300      	movs	r3, #0
 80049ce:	69fa      	ldr	r2, [r7, #28]
 80049d0:	f002 0203 	and.w	r2, r2, #3
 80049d4:	0092      	lsls	r2, r2, #2
 80049d6:	4093      	lsls	r3, r2
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	4313      	orrs	r3, r2
 80049dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049de:	4938      	ldr	r1, [pc, #224]	; (8004ac0 <HAL_GPIO_Init+0x35c>)
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	089b      	lsrs	r3, r3, #2
 80049e4:	3302      	adds	r3, #2
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	43db      	mvns	r3, r3
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	4013      	ands	r3, r2
 80049fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004a12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	43db      	mvns	r3, r3
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	43db      	mvns	r3, r3
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	4013      	ands	r3, r2
 8004a56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	43db      	mvns	r3, r3
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f47f ae63 	bne.w	8004778 <HAL_GPIO_Init+0x14>
  }
}
 8004ab2:	bf00      	nop
 8004ab4:	bf00      	nop
 8004ab6:	3724      	adds	r7, #36	; 0x24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	58000400 	.word	0x58000400

08004ac4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	460b      	mov	r3, r1
 8004ace:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	887b      	ldrh	r3, [r7, #2]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004adc:	2301      	movs	r3, #1
 8004ade:	73fb      	strb	r3, [r7, #15]
 8004ae0:	e001      	b.n	8004ae6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	460b      	mov	r3, r1
 8004afe:	807b      	strh	r3, [r7, #2]
 8004b00:	4613      	mov	r3, r2
 8004b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b04:	787b      	ldrb	r3, [r7, #1]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b0a:	887a      	ldrh	r2, [r7, #2]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004b10:	e003      	b.n	8004b1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004b12:	887b      	ldrh	r3, [r7, #2]
 8004b14:	041a      	lsls	r2, r3, #16
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	619a      	str	r2, [r3, #24]
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
	...

08004b28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e07f      	b.n	8004c3a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d106      	bne.n	8004b54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7fc fc2a 	bl	80013a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2224      	movs	r2, #36	; 0x24
 8004b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0201 	bic.w	r2, r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d107      	bne.n	8004ba2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689a      	ldr	r2, [r3, #8]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b9e:	609a      	str	r2, [r3, #8]
 8004ba0:	e006      	b.n	8004bb0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004bae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d104      	bne.n	8004bc2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	6859      	ldr	r1, [r3, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	4b1d      	ldr	r3, [pc, #116]	; (8004c44 <HAL_I2C_Init+0x11c>)
 8004bce:	430b      	orrs	r3, r1
 8004bd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68da      	ldr	r2, [r3, #12]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004be0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691a      	ldr	r2, [r3, #16]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	69d9      	ldr	r1, [r3, #28]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a1a      	ldr	r2, [r3, #32]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0201 	orr.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2220      	movs	r2, #32
 8004c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	02008000 	.word	0x02008000

08004c48 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b088      	sub	sp, #32
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	607a      	str	r2, [r7, #4]
 8004c52:	461a      	mov	r2, r3
 8004c54:	460b      	mov	r3, r1
 8004c56:	817b      	strh	r3, [r7, #10]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b20      	cmp	r3, #32
 8004c66:	f040 80da 	bne.w	8004e1e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d101      	bne.n	8004c78 <HAL_I2C_Master_Transmit+0x30>
 8004c74:	2302      	movs	r3, #2
 8004c76:	e0d3      	b.n	8004e20 <HAL_I2C_Master_Transmit+0x1d8>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c80:	f7fd f82e 	bl	8001ce0 <HAL_GetTick>
 8004c84:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	2319      	movs	r3, #25
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f000 fbc6 	bl	8005424 <I2C_WaitOnFlagUntilTimeout>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e0be      	b.n	8004e20 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2221      	movs	r2, #33	; 0x21
 8004ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2210      	movs	r2, #16
 8004cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	893a      	ldrh	r2, [r7, #8]
 8004cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2bff      	cmp	r3, #255	; 0xff
 8004cd2:	d90e      	bls.n	8004cf2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	22ff      	movs	r2, #255	; 0xff
 8004cd8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	8979      	ldrh	r1, [r7, #10]
 8004ce2:	4b51      	ldr	r3, [pc, #324]	; (8004e28 <HAL_I2C_Master_Transmit+0x1e0>)
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 fd54 	bl	8005798 <I2C_TransferConfig>
 8004cf0:	e06c      	b.n	8004dcc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	8979      	ldrh	r1, [r7, #10]
 8004d04:	4b48      	ldr	r3, [pc, #288]	; (8004e28 <HAL_I2C_Master_Transmit+0x1e0>)
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f000 fd43 	bl	8005798 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004d12:	e05b      	b.n	8004dcc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	6a39      	ldr	r1, [r7, #32]
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 fbd2 	bl	80054c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e07b      	b.n	8004e20 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	781a      	ldrb	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	3b01      	subs	r3, #1
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d50:	3b01      	subs	r3, #1
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d034      	beq.n	8004dcc <HAL_I2C_Master_Transmit+0x184>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d130      	bne.n	8004dcc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	6a3b      	ldr	r3, [r7, #32]
 8004d70:	2200      	movs	r2, #0
 8004d72:	2180      	movs	r1, #128	; 0x80
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 fb55 	bl	8005424 <I2C_WaitOnFlagUntilTimeout>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e04d      	b.n	8004e20 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	2bff      	cmp	r3, #255	; 0xff
 8004d8c:	d90e      	bls.n	8004dac <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	22ff      	movs	r2, #255	; 0xff
 8004d92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	8979      	ldrh	r1, [r7, #10]
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f000 fcf7 	bl	8005798 <I2C_TransferConfig>
 8004daa:	e00f      	b.n	8004dcc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	8979      	ldrh	r1, [r7, #10]
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 fce6 	bl	8005798 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d19e      	bne.n	8004d14 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	6a39      	ldr	r1, [r7, #32]
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 fbb8 	bl	8005550 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e01a      	b.n	8004e20 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2220      	movs	r2, #32
 8004df0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6859      	ldr	r1, [r3, #4]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <HAL_I2C_Master_Transmit+0x1e4>)
 8004dfe:	400b      	ands	r3, r1
 8004e00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2220      	movs	r2, #32
 8004e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	e000      	b.n	8004e20 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004e1e:	2302      	movs	r3, #2
  }
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	80002000 	.word	0x80002000
 8004e2c:	fe00e800 	.word	0xfe00e800

08004e30 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b088      	sub	sp, #32
 8004e34:	af02      	add	r7, sp, #8
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	4608      	mov	r0, r1
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	4603      	mov	r3, r0
 8004e40:	817b      	strh	r3, [r7, #10]
 8004e42:	460b      	mov	r3, r1
 8004e44:	813b      	strh	r3, [r7, #8]
 8004e46:	4613      	mov	r3, r2
 8004e48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b20      	cmp	r3, #32
 8004e54:	f040 80f9 	bne.w	800504a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d002      	beq.n	8004e64 <HAL_I2C_Mem_Write+0x34>
 8004e5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d105      	bne.n	8004e70 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e6a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e0ed      	b.n	800504c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d101      	bne.n	8004e7e <HAL_I2C_Mem_Write+0x4e>
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	e0e6      	b.n	800504c <HAL_I2C_Mem_Write+0x21c>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e86:	f7fc ff2b 	bl	8001ce0 <HAL_GetTick>
 8004e8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	2319      	movs	r3, #25
 8004e92:	2201      	movs	r2, #1
 8004e94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 fac3 	bl	8005424 <I2C_WaitOnFlagUntilTimeout>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e0d1      	b.n	800504c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2221      	movs	r2, #33	; 0x21
 8004eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2240      	movs	r2, #64	; 0x40
 8004eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a3a      	ldr	r2, [r7, #32]
 8004ec2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ed0:	88f8      	ldrh	r0, [r7, #6]
 8004ed2:	893a      	ldrh	r2, [r7, #8]
 8004ed4:	8979      	ldrh	r1, [r7, #10]
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	9301      	str	r3, [sp, #4]
 8004eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	4603      	mov	r3, r0
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 f9d3 	bl	800528c <I2C_RequestMemoryWrite>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d005      	beq.n	8004ef8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e0a9      	b.n	800504c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	2bff      	cmp	r3, #255	; 0xff
 8004f00:	d90e      	bls.n	8004f20 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	22ff      	movs	r2, #255	; 0xff
 8004f06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	8979      	ldrh	r1, [r7, #10]
 8004f10:	2300      	movs	r3, #0
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 fc3d 	bl	8005798 <I2C_TransferConfig>
 8004f1e:	e00f      	b.n	8004f40 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	8979      	ldrh	r1, [r7, #10]
 8004f32:	2300      	movs	r3, #0
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f000 fc2c 	bl	8005798 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 fabc 	bl	80054c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e07b      	b.n	800504c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	781a      	ldrb	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	3b01      	subs	r3, #1
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d034      	beq.n	8004ff8 <HAL_I2C_Mem_Write+0x1c8>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d130      	bne.n	8004ff8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	2180      	movs	r1, #128	; 0x80
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 fa3f 	bl	8005424 <I2C_WaitOnFlagUntilTimeout>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e04d      	b.n	800504c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	2bff      	cmp	r3, #255	; 0xff
 8004fb8:	d90e      	bls.n	8004fd8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	22ff      	movs	r2, #255	; 0xff
 8004fbe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	8979      	ldrh	r1, [r7, #10]
 8004fc8:	2300      	movs	r3, #0
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 fbe1 	bl	8005798 <I2C_TransferConfig>
 8004fd6:	e00f      	b.n	8004ff8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	8979      	ldrh	r1, [r7, #10]
 8004fea:	2300      	movs	r3, #0
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 fbd0 	bl	8005798 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d19e      	bne.n	8004f40 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 faa2 	bl	8005550 <I2C_WaitOnSTOPFlagUntilTimeout>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e01a      	b.n	800504c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2220      	movs	r2, #32
 800501c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6859      	ldr	r1, [r3, #4]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	4b0a      	ldr	r3, [pc, #40]	; (8005054 <HAL_I2C_Mem_Write+0x224>)
 800502a:	400b      	ands	r3, r1
 800502c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2220      	movs	r2, #32
 8005032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	e000      	b.n	800504c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800504a:	2302      	movs	r3, #2
  }
}
 800504c:	4618      	mov	r0, r3
 800504e:	3718      	adds	r7, #24
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	fe00e800 	.word	0xfe00e800

08005058 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b088      	sub	sp, #32
 800505c:	af02      	add	r7, sp, #8
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	4608      	mov	r0, r1
 8005062:	4611      	mov	r1, r2
 8005064:	461a      	mov	r2, r3
 8005066:	4603      	mov	r3, r0
 8005068:	817b      	strh	r3, [r7, #10]
 800506a:	460b      	mov	r3, r1
 800506c:	813b      	strh	r3, [r7, #8]
 800506e:	4613      	mov	r3, r2
 8005070:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b20      	cmp	r3, #32
 800507c:	f040 80fd 	bne.w	800527a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <HAL_I2C_Mem_Read+0x34>
 8005086:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005088:	2b00      	cmp	r3, #0
 800508a:	d105      	bne.n	8005098 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005092:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e0f1      	b.n	800527c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d101      	bne.n	80050a6 <HAL_I2C_Mem_Read+0x4e>
 80050a2:	2302      	movs	r3, #2
 80050a4:	e0ea      	b.n	800527c <HAL_I2C_Mem_Read+0x224>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80050ae:	f7fc fe17 	bl	8001ce0 <HAL_GetTick>
 80050b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	2319      	movs	r3, #25
 80050ba:	2201      	movs	r2, #1
 80050bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f000 f9af 	bl	8005424 <I2C_WaitOnFlagUntilTimeout>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d001      	beq.n	80050d0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e0d5      	b.n	800527c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2222      	movs	r2, #34	; 0x22
 80050d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2240      	movs	r2, #64	; 0x40
 80050dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6a3a      	ldr	r2, [r7, #32]
 80050ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80050f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050f8:	88f8      	ldrh	r0, [r7, #6]
 80050fa:	893a      	ldrh	r2, [r7, #8]
 80050fc:	8979      	ldrh	r1, [r7, #10]
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	9301      	str	r3, [sp, #4]
 8005102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	4603      	mov	r3, r0
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 f913 	bl	8005334 <I2C_RequestMemoryRead>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d005      	beq.n	8005120 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e0ad      	b.n	800527c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005124:	b29b      	uxth	r3, r3
 8005126:	2bff      	cmp	r3, #255	; 0xff
 8005128:	d90e      	bls.n	8005148 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	22ff      	movs	r2, #255	; 0xff
 800512e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005134:	b2da      	uxtb	r2, r3
 8005136:	8979      	ldrh	r1, [r7, #10]
 8005138:	4b52      	ldr	r3, [pc, #328]	; (8005284 <HAL_I2C_Mem_Read+0x22c>)
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 fb29 	bl	8005798 <I2C_TransferConfig>
 8005146:	e00f      	b.n	8005168 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514c:	b29a      	uxth	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005156:	b2da      	uxtb	r2, r3
 8005158:	8979      	ldrh	r1, [r7, #10]
 800515a:	4b4a      	ldr	r3, [pc, #296]	; (8005284 <HAL_I2C_Mem_Read+0x22c>)
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 fb18 	bl	8005798 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516e:	2200      	movs	r2, #0
 8005170:	2104      	movs	r1, #4
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 f956 	bl	8005424 <I2C_WaitOnFlagUntilTimeout>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e07c      	b.n	800527c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	b2d2      	uxtb	r2, r2
 800518e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800519e:	3b01      	subs	r3, #1
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	3b01      	subs	r3, #1
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d034      	beq.n	8005228 <HAL_I2C_Mem_Read+0x1d0>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d130      	bne.n	8005228 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051cc:	2200      	movs	r2, #0
 80051ce:	2180      	movs	r1, #128	; 0x80
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 f927 	bl	8005424 <I2C_WaitOnFlagUntilTimeout>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e04d      	b.n	800527c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	2bff      	cmp	r3, #255	; 0xff
 80051e8:	d90e      	bls.n	8005208 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	22ff      	movs	r2, #255	; 0xff
 80051ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	8979      	ldrh	r1, [r7, #10]
 80051f8:	2300      	movs	r3, #0
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 fac9 	bl	8005798 <I2C_TransferConfig>
 8005206:	e00f      	b.n	8005228 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520c:	b29a      	uxth	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005216:	b2da      	uxtb	r2, r3
 8005218:	8979      	ldrh	r1, [r7, #10]
 800521a:	2300      	movs	r3, #0
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 fab8 	bl	8005798 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522c:	b29b      	uxth	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d19a      	bne.n	8005168 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 f98a 	bl	8005550 <I2C_WaitOnSTOPFlagUntilTimeout>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e01a      	b.n	800527c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2220      	movs	r2, #32
 800524c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6859      	ldr	r1, [r3, #4]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	4b0b      	ldr	r3, [pc, #44]	; (8005288 <HAL_I2C_Mem_Read+0x230>)
 800525a:	400b      	ands	r3, r1
 800525c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2220      	movs	r2, #32
 8005262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	e000      	b.n	800527c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800527a:	2302      	movs	r3, #2
  }
}
 800527c:	4618      	mov	r0, r3
 800527e:	3718      	adds	r7, #24
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	80002400 	.word	0x80002400
 8005288:	fe00e800 	.word	0xfe00e800

0800528c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af02      	add	r7, sp, #8
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	4608      	mov	r0, r1
 8005296:	4611      	mov	r1, r2
 8005298:	461a      	mov	r2, r3
 800529a:	4603      	mov	r3, r0
 800529c:	817b      	strh	r3, [r7, #10]
 800529e:	460b      	mov	r3, r1
 80052a0:	813b      	strh	r3, [r7, #8]
 80052a2:	4613      	mov	r3, r2
 80052a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80052a6:	88fb      	ldrh	r3, [r7, #6]
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	8979      	ldrh	r1, [r7, #10]
 80052ac:	4b20      	ldr	r3, [pc, #128]	; (8005330 <I2C_RequestMemoryWrite+0xa4>)
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f000 fa6f 	bl	8005798 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ba:	69fa      	ldr	r2, [r7, #28]
 80052bc:	69b9      	ldr	r1, [r7, #24]
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 f8ff 	bl	80054c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e02c      	b.n	8005328 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052ce:	88fb      	ldrh	r3, [r7, #6]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d105      	bne.n	80052e0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052d4:	893b      	ldrh	r3, [r7, #8]
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	629a      	str	r2, [r3, #40]	; 0x28
 80052de:	e015      	b.n	800530c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80052e0:	893b      	ldrh	r3, [r7, #8]
 80052e2:	0a1b      	lsrs	r3, r3, #8
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ee:	69fa      	ldr	r2, [r7, #28]
 80052f0:	69b9      	ldr	r1, [r7, #24]
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 f8e5 	bl	80054c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e012      	b.n	8005328 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005302:	893b      	ldrh	r3, [r7, #8]
 8005304:	b2da      	uxtb	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	2200      	movs	r2, #0
 8005314:	2180      	movs	r1, #128	; 0x80
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 f884 	bl	8005424 <I2C_WaitOnFlagUntilTimeout>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e000      	b.n	8005328 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	80002000 	.word	0x80002000

08005334 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af02      	add	r7, sp, #8
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	4608      	mov	r0, r1
 800533e:	4611      	mov	r1, r2
 8005340:	461a      	mov	r2, r3
 8005342:	4603      	mov	r3, r0
 8005344:	817b      	strh	r3, [r7, #10]
 8005346:	460b      	mov	r3, r1
 8005348:	813b      	strh	r3, [r7, #8]
 800534a:	4613      	mov	r3, r2
 800534c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800534e:	88fb      	ldrh	r3, [r7, #6]
 8005350:	b2da      	uxtb	r2, r3
 8005352:	8979      	ldrh	r1, [r7, #10]
 8005354:	4b20      	ldr	r3, [pc, #128]	; (80053d8 <I2C_RequestMemoryRead+0xa4>)
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	2300      	movs	r3, #0
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 fa1c 	bl	8005798 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005360:	69fa      	ldr	r2, [r7, #28]
 8005362:	69b9      	ldr	r1, [r7, #24]
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f000 f8ac 	bl	80054c2 <I2C_WaitOnTXISFlagUntilTimeout>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d001      	beq.n	8005374 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e02c      	b.n	80053ce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005374:	88fb      	ldrh	r3, [r7, #6]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d105      	bne.n	8005386 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800537a:	893b      	ldrh	r3, [r7, #8]
 800537c:	b2da      	uxtb	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	629a      	str	r2, [r3, #40]	; 0x28
 8005384:	e015      	b.n	80053b2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005386:	893b      	ldrh	r3, [r7, #8]
 8005388:	0a1b      	lsrs	r3, r3, #8
 800538a:	b29b      	uxth	r3, r3
 800538c:	b2da      	uxtb	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005394:	69fa      	ldr	r2, [r7, #28]
 8005396:	69b9      	ldr	r1, [r7, #24]
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 f892 	bl	80054c2 <I2C_WaitOnTXISFlagUntilTimeout>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e012      	b.n	80053ce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053a8:	893b      	ldrh	r3, [r7, #8]
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	2200      	movs	r2, #0
 80053ba:	2140      	movs	r1, #64	; 0x40
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 f831 	bl	8005424 <I2C_WaitOnFlagUntilTimeout>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e000      	b.n	80053ce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	80002000 	.word	0x80002000

080053dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d103      	bne.n	80053fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2200      	movs	r2, #0
 80053f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	2b01      	cmp	r3, #1
 8005406:	d007      	beq.n	8005418 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699a      	ldr	r2, [r3, #24]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0201 	orr.w	r2, r2, #1
 8005416:	619a      	str	r2, [r3, #24]
  }
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	603b      	str	r3, [r7, #0]
 8005430:	4613      	mov	r3, r2
 8005432:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005434:	e031      	b.n	800549a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800543c:	d02d      	beq.n	800549a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800543e:	f7fc fc4f 	bl	8001ce0 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d302      	bcc.n	8005454 <I2C_WaitOnFlagUntilTimeout+0x30>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d122      	bne.n	800549a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699a      	ldr	r2, [r3, #24]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	4013      	ands	r3, r2
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	429a      	cmp	r2, r3
 8005462:	bf0c      	ite	eq
 8005464:	2301      	moveq	r3, #1
 8005466:	2300      	movne	r3, #0
 8005468:	b2db      	uxtb	r3, r3
 800546a:	461a      	mov	r2, r3
 800546c:	79fb      	ldrb	r3, [r7, #7]
 800546e:	429a      	cmp	r2, r3
 8005470:	d113      	bne.n	800549a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005476:	f043 0220 	orr.w	r2, r3, #32
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2220      	movs	r2, #32
 8005482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e00f      	b.n	80054ba <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	699a      	ldr	r2, [r3, #24]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4013      	ands	r3, r2
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	bf0c      	ite	eq
 80054aa:	2301      	moveq	r3, #1
 80054ac:	2300      	movne	r3, #0
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	461a      	mov	r2, r3
 80054b2:	79fb      	ldrb	r3, [r7, #7]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d0be      	beq.n	8005436 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b084      	sub	sp, #16
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	60f8      	str	r0, [r7, #12]
 80054ca:	60b9      	str	r1, [r7, #8]
 80054cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054ce:	e033      	b.n	8005538 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	68b9      	ldr	r1, [r7, #8]
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 f87f 	bl	80055d8 <I2C_IsErrorOccurred>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e031      	b.n	8005548 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054ea:	d025      	beq.n	8005538 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ec:	f7fc fbf8 	bl	8001ce0 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d302      	bcc.n	8005502 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d11a      	bne.n	8005538 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b02      	cmp	r3, #2
 800550e:	d013      	beq.n	8005538 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005514:	f043 0220 	orr.w	r2, r3, #32
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2220      	movs	r2, #32
 8005520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e007      	b.n	8005548 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b02      	cmp	r3, #2
 8005544:	d1c4      	bne.n	80054d0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800555c:	e02f      	b.n	80055be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	68b9      	ldr	r1, [r7, #8]
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f000 f838 	bl	80055d8 <I2C_IsErrorOccurred>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e02d      	b.n	80055ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005572:	f7fc fbb5 	bl	8001ce0 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	429a      	cmp	r2, r3
 8005580:	d302      	bcc.n	8005588 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d11a      	bne.n	80055be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	f003 0320 	and.w	r3, r3, #32
 8005592:	2b20      	cmp	r3, #32
 8005594:	d013      	beq.n	80055be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800559a:	f043 0220 	orr.w	r2, r3, #32
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e007      	b.n	80055ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	2b20      	cmp	r3, #32
 80055ca:	d1c8      	bne.n	800555e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
	...

080055d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b08a      	sub	sp, #40	; 0x28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055e4:	2300      	movs	r3, #0
 80055e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80055f2:	2300      	movs	r3, #0
 80055f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	f003 0310 	and.w	r3, r3, #16
 8005600:	2b00      	cmp	r3, #0
 8005602:	d068      	beq.n	80056d6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2210      	movs	r2, #16
 800560a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800560c:	e049      	b.n	80056a2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005614:	d045      	beq.n	80056a2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005616:	f7fc fb63 	bl	8001ce0 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	429a      	cmp	r2, r3
 8005624:	d302      	bcc.n	800562c <I2C_IsErrorOccurred+0x54>
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d13a      	bne.n	80056a2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005636:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800563e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800564a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800564e:	d121      	bne.n	8005694 <I2C_IsErrorOccurred+0xbc>
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005656:	d01d      	beq.n	8005694 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005658:	7cfb      	ldrb	r3, [r7, #19]
 800565a:	2b20      	cmp	r3, #32
 800565c:	d01a      	beq.n	8005694 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800566c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800566e:	f7fc fb37 	bl	8001ce0 <HAL_GetTick>
 8005672:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005674:	e00e      	b.n	8005694 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005676:	f7fc fb33 	bl	8001ce0 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	2b19      	cmp	r3, #25
 8005682:	d907      	bls.n	8005694 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	f043 0320 	orr.w	r3, r3, #32
 800568a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005692:	e006      	b.n	80056a2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	f003 0320 	and.w	r3, r3, #32
 800569e:	2b20      	cmp	r3, #32
 80056a0:	d1e9      	bne.n	8005676 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	f003 0320 	and.w	r3, r3, #32
 80056ac:	2b20      	cmp	r3, #32
 80056ae:	d003      	beq.n	80056b8 <I2C_IsErrorOccurred+0xe0>
 80056b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0aa      	beq.n	800560e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80056b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d103      	bne.n	80056c8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2220      	movs	r2, #32
 80056c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	f043 0304 	orr.w	r3, r3, #4
 80056ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00b      	beq.n	8005700 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	f043 0301 	orr.w	r3, r3, #1
 80056ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00b      	beq.n	8005722 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	f043 0308 	orr.w	r3, r3, #8
 8005710:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800571a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00b      	beq.n	8005744 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	f043 0302 	orr.w	r3, r3, #2
 8005732:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800573c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005748:	2b00      	cmp	r3, #0
 800574a:	d01c      	beq.n	8005786 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f7ff fe45 	bl	80053dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6859      	ldr	r1, [r3, #4]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	4b0d      	ldr	r3, [pc, #52]	; (8005794 <I2C_IsErrorOccurred+0x1bc>)
 800575e:	400b      	ands	r3, r1
 8005760:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	431a      	orrs	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2220      	movs	r2, #32
 8005772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005786:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800578a:	4618      	mov	r0, r3
 800578c:	3728      	adds	r7, #40	; 0x28
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	fe00e800 	.word	0xfe00e800

08005798 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005798:	b480      	push	{r7}
 800579a:	b087      	sub	sp, #28
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	607b      	str	r3, [r7, #4]
 80057a2:	460b      	mov	r3, r1
 80057a4:	817b      	strh	r3, [r7, #10]
 80057a6:	4613      	mov	r3, r2
 80057a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057aa:	897b      	ldrh	r3, [r7, #10]
 80057ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057b0:	7a7b      	ldrb	r3, [r7, #9]
 80057b2:	041b      	lsls	r3, r3, #16
 80057b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	0d5b      	lsrs	r3, r3, #21
 80057d2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80057d6:	4b08      	ldr	r3, [pc, #32]	; (80057f8 <I2C_TransferConfig+0x60>)
 80057d8:	430b      	orrs	r3, r1
 80057da:	43db      	mvns	r3, r3
 80057dc:	ea02 0103 	and.w	r1, r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80057ea:	bf00      	nop
 80057ec:	371c      	adds	r7, #28
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	03ff63ff 	.word	0x03ff63ff

080057fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b20      	cmp	r3, #32
 8005810:	d138      	bne.n	8005884 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005818:	2b01      	cmp	r3, #1
 800581a:	d101      	bne.n	8005820 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800581c:	2302      	movs	r3, #2
 800581e:	e032      	b.n	8005886 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2224      	movs	r2, #36	; 0x24
 800582c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 0201 	bic.w	r2, r2, #1
 800583e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800584e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6819      	ldr	r1, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	430a      	orrs	r2, r1
 800585e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0201 	orr.w	r2, r2, #1
 800586e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2220      	movs	r2, #32
 8005874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005880:	2300      	movs	r3, #0
 8005882:	e000      	b.n	8005886 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005884:	2302      	movs	r3, #2
  }
}
 8005886:	4618      	mov	r0, r3
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005892:	b480      	push	{r7}
 8005894:	b085      	sub	sp, #20
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
 800589a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	d139      	bne.n	800591c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d101      	bne.n	80058b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80058b2:	2302      	movs	r3, #2
 80058b4:	e033      	b.n	800591e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2224      	movs	r2, #36	; 0x24
 80058c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 0201 	bic.w	r2, r2, #1
 80058d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80058e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	021b      	lsls	r3, r3, #8
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0201 	orr.w	r2, r2, #1
 8005906:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2220      	movs	r2, #32
 800590c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005918:	2300      	movs	r3, #0
 800591a:	e000      	b.n	800591e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800591c:	2302      	movs	r3, #2
  }
}
 800591e:	4618      	mov	r0, r3
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
	...

0800592c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b088      	sub	sp, #32
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e10d      	b.n	8005b5a <HAL_I2S_Init+0x22e>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d106      	bne.n	8005958 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7fb fd90 	bl	8001478 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b01      	cmp	r3, #1
 800596c:	d107      	bne.n	800597e <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 0201 	bic.w	r2, r2, #1
 800597c:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2200      	movs	r2, #0
 8005984:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2b04      	cmp	r3, #4
 800598c:	d008      	beq.n	80059a0 <HAL_I2S_Init+0x74>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2b06      	cmp	r3, #6
 8005994:	d004      	beq.n	80059a0 <HAL_I2S_Init+0x74>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	2b0a      	cmp	r3, #10
 800599c:	f040 8087 	bne.w	8005aae <HAL_I2S_Init+0x182>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d05a      	beq.n	8005a5e <HAL_I2S_Init+0x132>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d002      	beq.n	80059b6 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 80059b0:	2302      	movs	r3, #2
 80059b2:	617b      	str	r3, [r7, #20]
 80059b4:	e001      	b.n	80059ba <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 80059b6:	2301      	movs	r3, #1
 80059b8:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	2b30      	cmp	r3, #48	; 0x30
 80059c0:	d003      	beq.n	80059ca <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80059c6:	2bb0      	cmp	r3, #176	; 0xb0
 80059c8:	d102      	bne.n	80059d0 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 80059ca:	2301      	movs	r3, #1
 80059cc:	60fb      	str	r3, [r7, #12]
 80059ce:	e001      	b.n	80059d4 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 80059d0:	2300      	movs	r3, #0
 80059d2:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 80059d4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80059d8:	f04f 0100 	mov.w	r1, #0
 80059dc:	f002 feb6 	bl	800874c <HAL_RCCEx_GetPeriphCLKFreq>
 80059e0:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059ea:	d113      	bne.n	8005a14 <HAL_I2S_Init+0xe8>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80059ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	fa22 f303 	lsr.w	r3, r2, r3
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80059fc:	4613      	mov	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	005b      	lsls	r3, r3, #1
 8005a04:	461a      	mov	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0e:	3305      	adds	r3, #5
 8005a10:	613b      	str	r3, [r7, #16]
 8005a12:	e014      	b.n	8005a3e <HAL_I2S_Init+0x112>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8005a14:	2220      	movs	r2, #32
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	fa22 f303 	lsr.w	r3, r2, r3
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	fb02 f303 	mul.w	r3, r2, r3
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a28:	4613      	mov	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	461a      	mov	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3a:	3305      	adds	r3, #5
 8005a3c:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	4a48      	ldr	r2, [pc, #288]	; (8005b64 <HAL_I2S_Init+0x238>)
 8005a42:	fba2 2303 	umull	r2, r3, r2, r3
 8005a46:	08db      	lsrs	r3, r3, #3
 8005a48:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	085b      	lsrs	r3, r3, #1
 8005a5a:	61fb      	str	r3, [r7, #28]
 8005a5c:	e003      	b.n	8005a66 <HAL_I2S_Init+0x13a>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8005a5e:	2302      	movs	r3, #2
 8005a60:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8005a62:	2300      	movs	r3, #0
 8005a64:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d102      	bne.n	8005a72 <HAL_I2S_Init+0x146>
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d002      	beq.n	8005a78 <HAL_I2S_Init+0x14c>
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	2bff      	cmp	r3, #255	; 0xff
 8005a76:	d907      	bls.n	8005a88 <HAL_I2S_Init+0x15c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a7c:	f043 0210 	orr.w	r2, r3, #16
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e068      	b.n	8005b5a <HAL_I2S_Init+0x22e>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <HAL_I2S_Init+0x166>
    {
      i2sodd = 1UL;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a98:	4b33      	ldr	r3, [pc, #204]	; (8005b68 <HAL_I2S_Init+0x23c>)
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	69fa      	ldr	r2, [r7, #28]
 8005a9e:	0411      	lsls	r1, r2, #16
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	0612      	lsls	r2, r2, #24
 8005aa4:	4311      	orrs	r1, r2
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6812      	ldr	r2, [r2, #0]
 8005aaa:	430b      	orrs	r3, r1
 8005aac:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ab4:	4b2d      	ldr	r3, [pc, #180]	; (8005b6c <HAL_I2S_Init+0x240>)
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6851      	ldr	r1, [r2, #4]
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	6892      	ldr	r2, [r2, #8]
 8005ac0:	4311      	orrs	r1, r2
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	68d2      	ldr	r2, [r2, #12]
 8005ac6:	4311      	orrs	r1, r2
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	6992      	ldr	r2, [r2, #24]
 8005acc:	4311      	orrs	r1, r2
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	6a12      	ldr	r2, [r2, #32]
 8005ad2:	4311      	orrs	r1, r2
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ad8:	4311      	orrs	r1, r2
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6912      	ldr	r2, [r2, #16]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 0201 	orr.w	r2, r2, #1
 8005aea:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f640 72f8 	movw	r2, #4088	; 0xff8
 8005af4:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005b04:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	69da      	ldr	r2, [r3, #28]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	2b04      	cmp	r3, #4
 8005b22:	d007      	beq.n	8005b34 <HAL_I2S_Init+0x208>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	2b06      	cmp	r3, #6
 8005b2a:	d003      	beq.n	8005b34 <HAL_I2S_Init+0x208>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	2b0a      	cmp	r3, #10
 8005b32:	d10a      	bne.n	8005b4a <HAL_I2S_Init+0x21e>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3720      	adds	r7, #32
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	cccccccd 	.word	0xcccccccd
 8005b68:	fe00ffff 	.word	0xfe00ffff
 8005b6c:	fdff9040 	.word	0xfdff9040

08005b70 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, const uint16_t *pData, uint16_t Size)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	75fb      	strb	r3, [r7, #23]

  if ((pData == NULL) || (Size == 0UL))
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d002      	beq.n	8005b8e <HAL_I2S_Transmit_DMA+0x1e>
 8005b88:	88fb      	ldrh	r3, [r7, #6]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <HAL_I2S_Transmit_DMA+0x22>
  {
    return  HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e086      	b.n	8005ca0 <HAL_I2S_Transmit_DMA+0x130>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d001      	beq.n	8005ba2 <HAL_I2S_Transmit_DMA+0x32>
  {
    return HAL_BUSY;
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	e07e      	b.n	8005ca0 <HAL_I2S_Transmit_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d101      	bne.n	8005bb2 <HAL_I2S_Transmit_DMA+0x42>
 8005bae:	2302      	movs	r3, #2
 8005bb0:	e076      	b.n	8005ca0 <HAL_I2S_Transmit_DMA+0x130>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_TX;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2203      	movs	r2, #3
 8005bbe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->pTxBuffPtr  = (const uint16_t *)pData;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->TxXferSize  = Size;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	88fa      	ldrh	r2, [r7, #6]
 8005bd2:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = Size;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	88fa      	ldrh	r2, [r7, #6]
 8005bd8:	865a      	strh	r2, [r3, #50]	; 0x32

  /* Init field not used in handle to zero */
  hi2s->pRxBuffPtr  = NULL;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	635a      	str	r2, [r3, #52]	; 0x34
  hi2s->RxXferSize  = (uint16_t)0UL;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = (uint16_t)0UL;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf0:	4a2d      	ldr	r2, [pc, #180]	; (8005ca8 <HAL_I2S_Transmit_DMA+0x138>)
 8005bf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf8:	4a2c      	ldr	r2, [pc, #176]	; (8005cac <HAL_I2S_Transmit_DMA+0x13c>)
 8005bfa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c00:	4a2b      	ldr	r2, [pc, #172]	; (8005cb0 <HAL_I2S_Transmit_DMA+0x140>)
 8005c02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3320      	adds	r3, #32
 8005c14:	461a      	mov	r2, r3
                                 hi2s->TxXferCount))
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c1a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->TXDR,
 8005c1c:	f7fc fd08 	bl	8002630 <HAL_DMA_Start_IT>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d011      	beq.n	8005c4a <HAL_I2S_Transmit_DMA+0xda>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c2a:	f043 0208 	orr.w	r2, r3, #8
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    __HAL_UNLOCK(hi2s);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    errorcode = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8005c46:	7dfb      	ldrb	r3, [r7, #23]
 8005c48:	e02a      	b.n	8005ca0 <HAL_I2S_Transmit_DMA+0x130>
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d107      	bne.n	8005c68 <HAL_I2S_Transmit_DMA+0xf8>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689a      	ldr	r2, [r3, #8]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c66:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d107      	bne.n	8005c86 <HAL_I2S_Transmit_DMA+0x116>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f042 0201 	orr.w	r2, r2, #1
 8005c84:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c94:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return errorcode;
 8005c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3718      	adds	r7, #24
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	08005da9 	.word	0x08005da9
 8005cac:	08005d67 	.word	0x08005d67
 8005cb0:	08005dc5 	.word	0x08005dc5

08005cb4 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  /* Disable the I2S Tx/Rx DMA requests */
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689a      	ldr	r2, [r3, #8]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cce:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689a      	ldr	r2, [r3, #8]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005cde:	609a      	str	r2, [r3, #8]

  /* Abort the I2S DMA tx Stream/Channel */
  if (hi2s->hdmatx != NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00f      	beq.n	8005d08 <HAL_I2S_DMAStop+0x54>
  {
    /* Disable the I2S DMA tx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7fc ff09 	bl	8002b04 <HAL_DMA_Abort>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d007      	beq.n	8005d08 <HAL_I2S_DMAStop+0x54>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cfc:	f043 0208 	orr.w	r2, r3, #8
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	651a      	str	r2, [r3, #80]	; 0x50
      errorcode = HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Abort the I2S DMA rx Stream/Channel */
  if (hi2s->hdmarx != NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00f      	beq.n	8005d30 <HAL_I2S_DMAStop+0x7c>
  {
    /* Disable the I2S DMA rx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7fc fef5 	bl	8002b04 <HAL_DMA_Abort>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d007      	beq.n	8005d30 <HAL_I2S_DMAStop+0x7c>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d24:	f043 0208 	orr.w	r2, r3, #8
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	651a      	str	r2, [r3, #80]	; 0x50
      errorcode = HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable I2S peripheral */
  __HAL_I2S_DISABLE(hi2s);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0201 	bic.w	r2, r2, #1
 8005d3e:	601a      	str	r2, [r3, #0]

  hi2s->State = HAL_I2S_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return errorcode;
 8005d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005d5a:	bf00      	nop
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b084      	sub	sp, #16
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d72:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	69db      	ldr	r3, [r3, #28]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10e      	bne.n	8005d9a <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689a      	ldr	r2, [r3, #8]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d8a:	609a      	str	r2, [r3, #8]

    hi2s->TxXferCount = (uint16_t) 0UL;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f7fb fad4 	bl	8001348 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005da0:	bf00      	nop
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f7fb fab6 	bl	8001328 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005dbc:	bf00      	nop
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd0:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689a      	ldr	r2, [r3, #8]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005de0:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	865a      	strh	r2, [r3, #50]	; 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	875a      	strh	r2, [r3, #58]	; 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dfa:	f043 0208 	orr.w	r2, r3, #8
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	651a      	str	r2, [r3, #80]	; 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f7ff ffa5 	bl	8005d52 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005e08:	bf00      	nop
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e18:	f7fb ff62 	bl	8001ce0 <HAL_GetTick>
 8005e1c:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e03b      	b.n	8005ea0 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2202      	movs	r2, #2
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68da      	ldr	r2, [r3, #12]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 0201 	bic.w	r2, r2, #1
 8005e46:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8005e48:	e00f      	b.n	8005e6a <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8005e4a:	f7fb ff49 	bl	8001ce0 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	2b05      	cmp	r3, #5
 8005e56:	d908      	bls.n	8005e6a <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2240      	movs	r2, #64	; 0x40
 8005e5c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2203      	movs	r2, #3
 8005e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e01a      	b.n	8005ea0 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1e8      	bne.n	8005e4a <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f9bb 	bl	80061f4 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e03e      	b.n	8005f40 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <HAL_MDMA_ConfigPostRequestMask+0x28>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e037      	b.n	8005f40 <HAL_MDMA_ConfigPostRequestMask+0x98>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d126      	bne.n	8005f32 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d11c      	bne.n	8005f2c <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d108      	bne.n	8005f1a <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	691a      	ldr	r2, [r3, #16]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005f16:	611a      	str	r2, [r3, #16]
 8005f18:	e00d      	b.n	8005f36 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	691a      	ldr	r2, [r3, #16]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005f28:	611a      	str	r2, [r3, #16]
 8005f2a:	e004      	b.n	8005f36 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	75fb      	strb	r3, [r7, #23]
 8005f30:	e001      	b.n	8005f36 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	371c      	adds	r7, #28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8005f54:	2300      	movs	r3, #0
 8005f56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f58:	4b91      	ldr	r3, [pc, #580]	; (80061a0 <HAL_MDMA_IRQHandler+0x254>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a91      	ldr	r2, [pc, #580]	; (80061a4 <HAL_MDMA_IRQHandler+0x258>)
 8005f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f62:	0a9b      	lsrs	r3, r3, #10
 8005f64:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	4b8e      	ldr	r3, [pc, #568]	; (80061a8 <HAL_MDMA_IRQHandler+0x25c>)
 8005f6e:	4413      	add	r3, r2
 8005f70:	099b      	lsrs	r3, r3, #6
 8005f72:	f003 031f 	and.w	r3, r3, #31
 8005f76:	2201      	movs	r2, #1
 8005f78:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7c:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8005f7e:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	4013      	ands	r3, r2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f000 812d 	beq.w	80061e8 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d054      	beq.n	8006046 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d04d      	beq.n	8006046 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0202 	bic.w	r2, r2, #2
 8005fb8:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d106      	bne.n	8005fda <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fd0:	f043 0201 	orr.w	r2, r3, #1
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	669a      	str	r2, [r3, #104]	; 0x68
 8005fd8:	e005      	b.n	8005fe6 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fde:	f043 0202 	orr.w	r2, r3, #2
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d005      	beq.n	8005ffc <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ff4:	f043 0204 	orr.w	r2, r3, #4
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006002:	2b00      	cmp	r3, #0
 8006004:	d005      	beq.n	8006012 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800600a:	f043 0208 	orr.w	r2, r3, #8
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006018:	2b00      	cmp	r3, #0
 800601a:	d005      	beq.n	8006028 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006020:	f043 0210 	orr.w	r2, r3, #16
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800602e:	2b00      	cmp	r3, #0
 8006030:	d005      	beq.n	800603e <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006036:	f043 0220 	orr.w	r2, r3, #32
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2201      	movs	r2, #1
 8006044:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0310 	and.w	r3, r3, #16
 8006050:	2b00      	cmp	r3, #0
 8006052:	d012      	beq.n	800607a <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	f003 0320 	and.w	r3, r3, #32
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00b      	beq.n	800607a <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2210      	movs	r2, #16
 8006068:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0308 	and.w	r3, r3, #8
 8006084:	2b00      	cmp	r3, #0
 8006086:	d012      	beq.n	80060ae <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f003 0310 	and.w	r3, r3, #16
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00b      	beq.n	80060ae <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2208      	movs	r2, #8
 800609c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0304 	and.w	r3, r3, #4
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d012      	beq.n	80060e2 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	f003 0308 	and.w	r3, r3, #8
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00b      	beq.n	80060e2 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2204      	movs	r2, #4
 80060d0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0302 	and.w	r3, r3, #2
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d039      	beq.n	8006164 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	f003 0304 	and.w	r3, r3, #4
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d032      	beq.n	8006164 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68da      	ldr	r2, [r3, #12]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 800610c:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b04      	cmp	r3, #4
 8006118:	d110      	bne.n	800613c <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800612e:	2b00      	cmp	r3, #0
 8006130:	d05c      	beq.n	80061ec <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	4798      	blx	r3
        }
        return;
 800613a:	e057      	b.n	80061ec <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2202      	movs	r2, #2
 8006142:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006168:	2b00      	cmp	r3, #0
 800616a:	d040      	beq.n	80061ee <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2204      	movs	r2, #4
 8006170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68da      	ldr	r2, [r3, #12]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 0201 	bic.w	r2, r2, #1
 8006182:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	3301      	adds	r3, #1
 8006188:	60bb      	str	r3, [r7, #8]
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	429a      	cmp	r2, r3
 800618e:	d30d      	bcc.n	80061ac <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1f2      	bne.n	8006184 <HAL_MDMA_IRQHandler+0x238>
 800619e:	e006      	b.n	80061ae <HAL_MDMA_IRQHandler+0x262>
 80061a0:	24000008 	.word	0x24000008
 80061a4:	1b4e81b5 	.word	0x1b4e81b5
 80061a8:	adffffc0 	.word	0xadffffc0
        break;
 80061ac:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d004      	beq.n	80061ce <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2203      	movs	r2, #3
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80061cc:	e003      	b.n	80061d6 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d007      	beq.n	80061ee <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	4798      	blx	r3
 80061e6:	e002      	b.n	80061ee <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 80061e8:	bf00      	nop
 80061ea:	e000      	b.n	80061ee <HAL_MDMA_IRQHandler+0x2a2>
        return;
 80061ec:	bf00      	nop
    }
  }
}
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	68d9      	ldr	r1, [r3, #12]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	691a      	ldr	r2, [r3, #16]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	430a      	orrs	r2, r1
 800620a:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	695a      	ldr	r2, [r3, #20]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800621a:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8006226:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622c:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8006232:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006238:	3b01      	subs	r3, #1
 800623a:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800623c:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8006248:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800624a:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006254:	d107      	bne.n	8006266 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	691a      	ldr	r2, [r3, #16]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8006264:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2200      	movs	r2, #0
 800626c:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006272:	2b00      	cmp	r3, #0
 8006274:	da11      	bge.n	800629a <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	695a      	ldr	r2, [r3, #20]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006284:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800628a:	425b      	negs	r3, r3
 800628c:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	b292      	uxth	r2, r2
 8006296:	621a      	str	r2, [r3, #32]
 8006298:	e006      	b.n	80062a8 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800629e:	461a      	mov	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	b292      	uxth	r2, r2
 80062a6:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	da15      	bge.n	80062dc <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	695a      	ldr	r2, [r3, #20]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80062be:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c4:	425b      	negs	r3, r3
 80062c6:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6a19      	ldr	r1, [r3, #32]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	041a      	lsls	r2, r3, #16
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	621a      	str	r2, [r3, #32]
 80062da:	e009      	b.n	80062f0 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6a19      	ldr	r1, [r3, #32]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e6:	041a      	lsls	r2, r3, #16
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	430a      	orrs	r2, r1
 80062ee:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062f8:	d006      	beq.n	8006308 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	b2d2      	uxtb	r2, r2
 8006304:	629a      	str	r2, [r3, #40]	; 0x28
 8006306:	e003      	b.n	8006310 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2200      	movs	r2, #0
 800630e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2200      	movs	r2, #0
 8006316:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006318:	bf00      	nop
 800631a:	3714      	adds	r7, #20
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800632c:	4b19      	ldr	r3, [pc, #100]	; (8006394 <HAL_PWREx_ConfigSupply+0x70>)
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	f003 0304 	and.w	r3, r3, #4
 8006334:	2b04      	cmp	r3, #4
 8006336:	d00a      	beq.n	800634e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006338:	4b16      	ldr	r3, [pc, #88]	; (8006394 <HAL_PWREx_ConfigSupply+0x70>)
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	f003 0307 	and.w	r3, r3, #7
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	429a      	cmp	r2, r3
 8006344:	d001      	beq.n	800634a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e01f      	b.n	800638a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	e01d      	b.n	800638a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800634e:	4b11      	ldr	r3, [pc, #68]	; (8006394 <HAL_PWREx_ConfigSupply+0x70>)
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	f023 0207 	bic.w	r2, r3, #7
 8006356:	490f      	ldr	r1, [pc, #60]	; (8006394 <HAL_PWREx_ConfigSupply+0x70>)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4313      	orrs	r3, r2
 800635c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800635e:	f7fb fcbf 	bl	8001ce0 <HAL_GetTick>
 8006362:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006364:	e009      	b.n	800637a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006366:	f7fb fcbb 	bl	8001ce0 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006374:	d901      	bls.n	800637a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e007      	b.n	800638a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800637a:	4b06      	ldr	r3, [pc, #24]	; (8006394 <HAL_PWREx_ConfigSupply+0x70>)
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006386:	d1ee      	bne.n	8006366 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	58024800 	.word	0x58024800

08006398 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b08c      	sub	sp, #48	; 0x30
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d102      	bne.n	80063ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	f000 bc48 	b.w	8006c3c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 8088 	beq.w	80064ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063ba:	4b99      	ldr	r3, [pc, #612]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063c4:	4b96      	ldr	r3, [pc, #600]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 80063c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80063ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063cc:	2b10      	cmp	r3, #16
 80063ce:	d007      	beq.n	80063e0 <HAL_RCC_OscConfig+0x48>
 80063d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d2:	2b18      	cmp	r3, #24
 80063d4:	d111      	bne.n	80063fa <HAL_RCC_OscConfig+0x62>
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	f003 0303 	and.w	r3, r3, #3
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d10c      	bne.n	80063fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063e0:	4b8f      	ldr	r3, [pc, #572]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d06d      	beq.n	80064c8 <HAL_RCC_OscConfig+0x130>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d169      	bne.n	80064c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	f000 bc21 	b.w	8006c3c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006402:	d106      	bne.n	8006412 <HAL_RCC_OscConfig+0x7a>
 8006404:	4b86      	ldr	r3, [pc, #536]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a85      	ldr	r2, [pc, #532]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 800640a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800640e:	6013      	str	r3, [r2, #0]
 8006410:	e02e      	b.n	8006470 <HAL_RCC_OscConfig+0xd8>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10c      	bne.n	8006434 <HAL_RCC_OscConfig+0x9c>
 800641a:	4b81      	ldr	r3, [pc, #516]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a80      	ldr	r2, [pc, #512]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 8006420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006424:	6013      	str	r3, [r2, #0]
 8006426:	4b7e      	ldr	r3, [pc, #504]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a7d      	ldr	r2, [pc, #500]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 800642c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006430:	6013      	str	r3, [r2, #0]
 8006432:	e01d      	b.n	8006470 <HAL_RCC_OscConfig+0xd8>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800643c:	d10c      	bne.n	8006458 <HAL_RCC_OscConfig+0xc0>
 800643e:	4b78      	ldr	r3, [pc, #480]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a77      	ldr	r2, [pc, #476]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 8006444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006448:	6013      	str	r3, [r2, #0]
 800644a:	4b75      	ldr	r3, [pc, #468]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a74      	ldr	r2, [pc, #464]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 8006450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006454:	6013      	str	r3, [r2, #0]
 8006456:	e00b      	b.n	8006470 <HAL_RCC_OscConfig+0xd8>
 8006458:	4b71      	ldr	r3, [pc, #452]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a70      	ldr	r2, [pc, #448]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 800645e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006462:	6013      	str	r3, [r2, #0]
 8006464:	4b6e      	ldr	r3, [pc, #440]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a6d      	ldr	r2, [pc, #436]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 800646a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800646e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d013      	beq.n	80064a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006478:	f7fb fc32 	bl	8001ce0 <HAL_GetTick>
 800647c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800647e:	e008      	b.n	8006492 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006480:	f7fb fc2e 	bl	8001ce0 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b64      	cmp	r3, #100	; 0x64
 800648c:	d901      	bls.n	8006492 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e3d4      	b.n	8006c3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006492:	4b63      	ldr	r3, [pc, #396]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d0f0      	beq.n	8006480 <HAL_RCC_OscConfig+0xe8>
 800649e:	e014      	b.n	80064ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a0:	f7fb fc1e 	bl	8001ce0 <HAL_GetTick>
 80064a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80064a6:	e008      	b.n	80064ba <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064a8:	f7fb fc1a 	bl	8001ce0 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b64      	cmp	r3, #100	; 0x64
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e3c0      	b.n	8006c3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80064ba:	4b59      	ldr	r3, [pc, #356]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1f0      	bne.n	80064a8 <HAL_RCC_OscConfig+0x110>
 80064c6:	e000      	b.n	80064ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 80ca 	beq.w	800666c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064d8:	4b51      	ldr	r3, [pc, #324]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064e0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80064e2:	4b4f      	ldr	r3, [pc, #316]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 80064e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d007      	beq.n	80064fe <HAL_RCC_OscConfig+0x166>
 80064ee:	6a3b      	ldr	r3, [r7, #32]
 80064f0:	2b18      	cmp	r3, #24
 80064f2:	d156      	bne.n	80065a2 <HAL_RCC_OscConfig+0x20a>
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	f003 0303 	and.w	r3, r3, #3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d151      	bne.n	80065a2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064fe:	4b48      	ldr	r3, [pc, #288]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0304 	and.w	r3, r3, #4
 8006506:	2b00      	cmp	r3, #0
 8006508:	d005      	beq.n	8006516 <HAL_RCC_OscConfig+0x17e>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e392      	b.n	8006c3c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006516:	4b42      	ldr	r3, [pc, #264]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f023 0219 	bic.w	r2, r3, #25
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	493f      	ldr	r1, [pc, #252]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 8006524:	4313      	orrs	r3, r2
 8006526:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006528:	f7fb fbda 	bl	8001ce0 <HAL_GetTick>
 800652c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800652e:	e008      	b.n	8006542 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006530:	f7fb fbd6 	bl	8001ce0 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b02      	cmp	r3, #2
 800653c:	d901      	bls.n	8006542 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e37c      	b.n	8006c3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006542:	4b37      	ldr	r3, [pc, #220]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0304 	and.w	r3, r3, #4
 800654a:	2b00      	cmp	r3, #0
 800654c:	d0f0      	beq.n	8006530 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800654e:	f7fb fbf7 	bl	8001d40 <HAL_GetREVID>
 8006552:	4603      	mov	r3, r0
 8006554:	f241 0203 	movw	r2, #4099	; 0x1003
 8006558:	4293      	cmp	r3, r2
 800655a:	d817      	bhi.n	800658c <HAL_RCC_OscConfig+0x1f4>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	2b40      	cmp	r3, #64	; 0x40
 8006562:	d108      	bne.n	8006576 <HAL_RCC_OscConfig+0x1de>
 8006564:	4b2e      	ldr	r3, [pc, #184]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800656c:	4a2c      	ldr	r2, [pc, #176]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 800656e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006572:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006574:	e07a      	b.n	800666c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006576:	4b2a      	ldr	r3, [pc, #168]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	031b      	lsls	r3, r3, #12
 8006584:	4926      	ldr	r1, [pc, #152]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 8006586:	4313      	orrs	r3, r2
 8006588:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800658a:	e06f      	b.n	800666c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800658c:	4b24      	ldr	r3, [pc, #144]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	061b      	lsls	r3, r3, #24
 800659a:	4921      	ldr	r1, [pc, #132]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 800659c:	4313      	orrs	r3, r2
 800659e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065a0:	e064      	b.n	800666c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d047      	beq.n	800663a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80065aa:	4b1d      	ldr	r3, [pc, #116]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f023 0219 	bic.w	r2, r3, #25
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	491a      	ldr	r1, [pc, #104]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065bc:	f7fb fb90 	bl	8001ce0 <HAL_GetTick>
 80065c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065c2:	e008      	b.n	80065d6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065c4:	f7fb fb8c 	bl	8001ce0 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e332      	b.n	8006c3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065d6:	4b12      	ldr	r3, [pc, #72]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0304 	and.w	r3, r3, #4
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d0f0      	beq.n	80065c4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065e2:	f7fb fbad 	bl	8001d40 <HAL_GetREVID>
 80065e6:	4603      	mov	r3, r0
 80065e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d819      	bhi.n	8006624 <HAL_RCC_OscConfig+0x28c>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	2b40      	cmp	r3, #64	; 0x40
 80065f6:	d108      	bne.n	800660a <HAL_RCC_OscConfig+0x272>
 80065f8:	4b09      	ldr	r3, [pc, #36]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006600:	4a07      	ldr	r2, [pc, #28]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 8006602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006606:	6053      	str	r3, [r2, #4]
 8006608:	e030      	b.n	800666c <HAL_RCC_OscConfig+0x2d4>
 800660a:	4b05      	ldr	r3, [pc, #20]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	031b      	lsls	r3, r3, #12
 8006618:	4901      	ldr	r1, [pc, #4]	; (8006620 <HAL_RCC_OscConfig+0x288>)
 800661a:	4313      	orrs	r3, r2
 800661c:	604b      	str	r3, [r1, #4]
 800661e:	e025      	b.n	800666c <HAL_RCC_OscConfig+0x2d4>
 8006620:	58024400 	.word	0x58024400
 8006624:	4b9a      	ldr	r3, [pc, #616]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	061b      	lsls	r3, r3, #24
 8006632:	4997      	ldr	r1, [pc, #604]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 8006634:	4313      	orrs	r3, r2
 8006636:	604b      	str	r3, [r1, #4]
 8006638:	e018      	b.n	800666c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800663a:	4b95      	ldr	r3, [pc, #596]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a94      	ldr	r2, [pc, #592]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 8006640:	f023 0301 	bic.w	r3, r3, #1
 8006644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006646:	f7fb fb4b 	bl	8001ce0 <HAL_GetTick>
 800664a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800664c:	e008      	b.n	8006660 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800664e:	f7fb fb47 	bl	8001ce0 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	2b02      	cmp	r3, #2
 800665a:	d901      	bls.n	8006660 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e2ed      	b.n	8006c3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006660:	4b8b      	ldr	r3, [pc, #556]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1f0      	bne.n	800664e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0310 	and.w	r3, r3, #16
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 80a9 	beq.w	80067cc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800667a:	4b85      	ldr	r3, [pc, #532]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006682:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006684:	4b82      	ldr	r3, [pc, #520]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 8006686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006688:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	2b08      	cmp	r3, #8
 800668e:	d007      	beq.n	80066a0 <HAL_RCC_OscConfig+0x308>
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	2b18      	cmp	r3, #24
 8006694:	d13a      	bne.n	800670c <HAL_RCC_OscConfig+0x374>
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f003 0303 	and.w	r3, r3, #3
 800669c:	2b01      	cmp	r3, #1
 800669e:	d135      	bne.n	800670c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066a0:	4b7b      	ldr	r3, [pc, #492]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d005      	beq.n	80066b8 <HAL_RCC_OscConfig+0x320>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	69db      	ldr	r3, [r3, #28]
 80066b0:	2b80      	cmp	r3, #128	; 0x80
 80066b2:	d001      	beq.n	80066b8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e2c1      	b.n	8006c3c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066b8:	f7fb fb42 	bl	8001d40 <HAL_GetREVID>
 80066bc:	4603      	mov	r3, r0
 80066be:	f241 0203 	movw	r2, #4099	; 0x1003
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d817      	bhi.n	80066f6 <HAL_RCC_OscConfig+0x35e>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	2b20      	cmp	r3, #32
 80066cc:	d108      	bne.n	80066e0 <HAL_RCC_OscConfig+0x348>
 80066ce:	4b70      	ldr	r3, [pc, #448]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80066d6:	4a6e      	ldr	r2, [pc, #440]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 80066d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066dc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066de:	e075      	b.n	80067cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066e0:	4b6b      	ldr	r3, [pc, #428]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a1b      	ldr	r3, [r3, #32]
 80066ec:	069b      	lsls	r3, r3, #26
 80066ee:	4968      	ldr	r1, [pc, #416]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 80066f0:	4313      	orrs	r3, r2
 80066f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066f4:	e06a      	b.n	80067cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066f6:	4b66      	ldr	r3, [pc, #408]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	061b      	lsls	r3, r3, #24
 8006704:	4962      	ldr	r1, [pc, #392]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 8006706:	4313      	orrs	r3, r2
 8006708:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800670a:	e05f      	b.n	80067cc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	69db      	ldr	r3, [r3, #28]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d042      	beq.n	800679a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006714:	4b5e      	ldr	r3, [pc, #376]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a5d      	ldr	r2, [pc, #372]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 800671a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800671e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006720:	f7fb fade 	bl	8001ce0 <HAL_GetTick>
 8006724:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006726:	e008      	b.n	800673a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006728:	f7fb fada 	bl	8001ce0 <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	2b02      	cmp	r3, #2
 8006734:	d901      	bls.n	800673a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e280      	b.n	8006c3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800673a:	4b55      	ldr	r3, [pc, #340]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006742:	2b00      	cmp	r3, #0
 8006744:	d0f0      	beq.n	8006728 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006746:	f7fb fafb 	bl	8001d40 <HAL_GetREVID>
 800674a:	4603      	mov	r3, r0
 800674c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006750:	4293      	cmp	r3, r2
 8006752:	d817      	bhi.n	8006784 <HAL_RCC_OscConfig+0x3ec>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	2b20      	cmp	r3, #32
 800675a:	d108      	bne.n	800676e <HAL_RCC_OscConfig+0x3d6>
 800675c:	4b4c      	ldr	r3, [pc, #304]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006764:	4a4a      	ldr	r2, [pc, #296]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 8006766:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800676a:	6053      	str	r3, [r2, #4]
 800676c:	e02e      	b.n	80067cc <HAL_RCC_OscConfig+0x434>
 800676e:	4b48      	ldr	r3, [pc, #288]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	069b      	lsls	r3, r3, #26
 800677c:	4944      	ldr	r1, [pc, #272]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 800677e:	4313      	orrs	r3, r2
 8006780:	604b      	str	r3, [r1, #4]
 8006782:	e023      	b.n	80067cc <HAL_RCC_OscConfig+0x434>
 8006784:	4b42      	ldr	r3, [pc, #264]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	061b      	lsls	r3, r3, #24
 8006792:	493f      	ldr	r1, [pc, #252]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 8006794:	4313      	orrs	r3, r2
 8006796:	60cb      	str	r3, [r1, #12]
 8006798:	e018      	b.n	80067cc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800679a:	4b3d      	ldr	r3, [pc, #244]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a3c      	ldr	r2, [pc, #240]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 80067a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a6:	f7fb fa9b 	bl	8001ce0 <HAL_GetTick>
 80067aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80067ac:	e008      	b.n	80067c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80067ae:	f7fb fa97 	bl	8001ce0 <HAL_GetTick>
 80067b2:	4602      	mov	r2, r0
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d901      	bls.n	80067c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e23d      	b.n	8006c3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80067c0:	4b33      	ldr	r3, [pc, #204]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1f0      	bne.n	80067ae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0308 	and.w	r3, r3, #8
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d036      	beq.n	8006846 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d019      	beq.n	8006814 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067e0:	4b2b      	ldr	r3, [pc, #172]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 80067e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067e4:	4a2a      	ldr	r2, [pc, #168]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 80067e6:	f043 0301 	orr.w	r3, r3, #1
 80067ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ec:	f7fb fa78 	bl	8001ce0 <HAL_GetTick>
 80067f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80067f2:	e008      	b.n	8006806 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067f4:	f7fb fa74 	bl	8001ce0 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d901      	bls.n	8006806 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e21a      	b.n	8006c3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006806:	4b22      	ldr	r3, [pc, #136]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 8006808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d0f0      	beq.n	80067f4 <HAL_RCC_OscConfig+0x45c>
 8006812:	e018      	b.n	8006846 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006814:	4b1e      	ldr	r3, [pc, #120]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 8006816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006818:	4a1d      	ldr	r2, [pc, #116]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 800681a:	f023 0301 	bic.w	r3, r3, #1
 800681e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006820:	f7fb fa5e 	bl	8001ce0 <HAL_GetTick>
 8006824:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006826:	e008      	b.n	800683a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006828:	f7fb fa5a 	bl	8001ce0 <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	2b02      	cmp	r3, #2
 8006834:	d901      	bls.n	800683a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e200      	b.n	8006c3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800683a:	4b15      	ldr	r3, [pc, #84]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 800683c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1f0      	bne.n	8006828 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0320 	and.w	r3, r3, #32
 800684e:	2b00      	cmp	r3, #0
 8006850:	d039      	beq.n	80068c6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d01c      	beq.n	8006894 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800685a:	4b0d      	ldr	r3, [pc, #52]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a0c      	ldr	r2, [pc, #48]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 8006860:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006864:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006866:	f7fb fa3b 	bl	8001ce0 <HAL_GetTick>
 800686a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800686c:	e008      	b.n	8006880 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800686e:	f7fb fa37 	bl	8001ce0 <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	2b02      	cmp	r3, #2
 800687a:	d901      	bls.n	8006880 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e1dd      	b.n	8006c3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006880:	4b03      	ldr	r3, [pc, #12]	; (8006890 <HAL_RCC_OscConfig+0x4f8>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006888:	2b00      	cmp	r3, #0
 800688a:	d0f0      	beq.n	800686e <HAL_RCC_OscConfig+0x4d6>
 800688c:	e01b      	b.n	80068c6 <HAL_RCC_OscConfig+0x52e>
 800688e:	bf00      	nop
 8006890:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006894:	4b9b      	ldr	r3, [pc, #620]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a9a      	ldr	r2, [pc, #616]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 800689a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800689e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068a0:	f7fb fa1e 	bl	8001ce0 <HAL_GetTick>
 80068a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068a6:	e008      	b.n	80068ba <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068a8:	f7fb fa1a 	bl	8001ce0 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d901      	bls.n	80068ba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e1c0      	b.n	8006c3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068ba:	4b92      	ldr	r3, [pc, #584]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1f0      	bne.n	80068a8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0304 	and.w	r3, r3, #4
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f000 8081 	beq.w	80069d6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80068d4:	4b8c      	ldr	r3, [pc, #560]	; (8006b08 <HAL_RCC_OscConfig+0x770>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a8b      	ldr	r2, [pc, #556]	; (8006b08 <HAL_RCC_OscConfig+0x770>)
 80068da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068e0:	f7fb f9fe 	bl	8001ce0 <HAL_GetTick>
 80068e4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068e6:	e008      	b.n	80068fa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068e8:	f7fb f9fa 	bl	8001ce0 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	2b64      	cmp	r3, #100	; 0x64
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e1a0      	b.n	8006c3c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068fa:	4b83      	ldr	r3, [pc, #524]	; (8006b08 <HAL_RCC_OscConfig+0x770>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0f0      	beq.n	80068e8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d106      	bne.n	800691c <HAL_RCC_OscConfig+0x584>
 800690e:	4b7d      	ldr	r3, [pc, #500]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006912:	4a7c      	ldr	r2, [pc, #496]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006914:	f043 0301 	orr.w	r3, r3, #1
 8006918:	6713      	str	r3, [r2, #112]	; 0x70
 800691a:	e02d      	b.n	8006978 <HAL_RCC_OscConfig+0x5e0>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10c      	bne.n	800693e <HAL_RCC_OscConfig+0x5a6>
 8006924:	4b77      	ldr	r3, [pc, #476]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006928:	4a76      	ldr	r2, [pc, #472]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 800692a:	f023 0301 	bic.w	r3, r3, #1
 800692e:	6713      	str	r3, [r2, #112]	; 0x70
 8006930:	4b74      	ldr	r3, [pc, #464]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006934:	4a73      	ldr	r2, [pc, #460]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006936:	f023 0304 	bic.w	r3, r3, #4
 800693a:	6713      	str	r3, [r2, #112]	; 0x70
 800693c:	e01c      	b.n	8006978 <HAL_RCC_OscConfig+0x5e0>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	2b05      	cmp	r3, #5
 8006944:	d10c      	bne.n	8006960 <HAL_RCC_OscConfig+0x5c8>
 8006946:	4b6f      	ldr	r3, [pc, #444]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800694a:	4a6e      	ldr	r2, [pc, #440]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 800694c:	f043 0304 	orr.w	r3, r3, #4
 8006950:	6713      	str	r3, [r2, #112]	; 0x70
 8006952:	4b6c      	ldr	r3, [pc, #432]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006956:	4a6b      	ldr	r2, [pc, #428]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006958:	f043 0301 	orr.w	r3, r3, #1
 800695c:	6713      	str	r3, [r2, #112]	; 0x70
 800695e:	e00b      	b.n	8006978 <HAL_RCC_OscConfig+0x5e0>
 8006960:	4b68      	ldr	r3, [pc, #416]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006964:	4a67      	ldr	r2, [pc, #412]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006966:	f023 0301 	bic.w	r3, r3, #1
 800696a:	6713      	str	r3, [r2, #112]	; 0x70
 800696c:	4b65      	ldr	r3, [pc, #404]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 800696e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006970:	4a64      	ldr	r2, [pc, #400]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006972:	f023 0304 	bic.w	r3, r3, #4
 8006976:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d015      	beq.n	80069ac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006980:	f7fb f9ae 	bl	8001ce0 <HAL_GetTick>
 8006984:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006986:	e00a      	b.n	800699e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006988:	f7fb f9aa 	bl	8001ce0 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	f241 3288 	movw	r2, #5000	; 0x1388
 8006996:	4293      	cmp	r3, r2
 8006998:	d901      	bls.n	800699e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e14e      	b.n	8006c3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800699e:	4b59      	ldr	r3, [pc, #356]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 80069a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d0ee      	beq.n	8006988 <HAL_RCC_OscConfig+0x5f0>
 80069aa:	e014      	b.n	80069d6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069ac:	f7fb f998 	bl	8001ce0 <HAL_GetTick>
 80069b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069b2:	e00a      	b.n	80069ca <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069b4:	f7fb f994 	bl	8001ce0 <HAL_GetTick>
 80069b8:	4602      	mov	r2, r0
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	f241 3288 	movw	r2, #5000	; 0x1388
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d901      	bls.n	80069ca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e138      	b.n	8006c3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069ca:	4b4e      	ldr	r3, [pc, #312]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 80069cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1ee      	bne.n	80069b4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 812d 	beq.w	8006c3a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80069e0:	4b48      	ldr	r3, [pc, #288]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069e8:	2b18      	cmp	r3, #24
 80069ea:	f000 80bd 	beq.w	8006b68 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	f040 809e 	bne.w	8006b34 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069f8:	4b42      	ldr	r3, [pc, #264]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a41      	ldr	r2, [pc, #260]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 80069fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a04:	f7fb f96c 	bl	8001ce0 <HAL_GetTick>
 8006a08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a0a:	e008      	b.n	8006a1e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a0c:	f7fb f968 	bl	8001ce0 <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e10e      	b.n	8006c3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a1e:	4b39      	ldr	r3, [pc, #228]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1f0      	bne.n	8006a0c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a2a:	4b36      	ldr	r3, [pc, #216]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006a2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a2e:	4b37      	ldr	r3, [pc, #220]	; (8006b0c <HAL_RCC_OscConfig+0x774>)
 8006a30:	4013      	ands	r3, r2
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006a3a:	0112      	lsls	r2, r2, #4
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	4931      	ldr	r1, [pc, #196]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	628b      	str	r3, [r1, #40]	; 0x28
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a52:	3b01      	subs	r3, #1
 8006a54:	025b      	lsls	r3, r3, #9
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	041b      	lsls	r3, r3, #16
 8006a62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006a66:	431a      	orrs	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	061b      	lsls	r3, r3, #24
 8006a70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a74:	4923      	ldr	r1, [pc, #140]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006a7a:	4b22      	ldr	r3, [pc, #136]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7e:	4a21      	ldr	r2, [pc, #132]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006a80:	f023 0301 	bic.w	r3, r3, #1
 8006a84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a86:	4b1f      	ldr	r3, [pc, #124]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006a88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a8a:	4b21      	ldr	r3, [pc, #132]	; (8006b10 <HAL_RCC_OscConfig+0x778>)
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006a92:	00d2      	lsls	r2, r2, #3
 8006a94:	491b      	ldr	r1, [pc, #108]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006a9a:	4b1a      	ldr	r3, [pc, #104]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9e:	f023 020c 	bic.w	r2, r3, #12
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa6:	4917      	ldr	r1, [pc, #92]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006aac:	4b15      	ldr	r3, [pc, #84]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab0:	f023 0202 	bic.w	r2, r3, #2
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab8:	4912      	ldr	r1, [pc, #72]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006abe:	4b11      	ldr	r3, [pc, #68]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac2:	4a10      	ldr	r2, [pc, #64]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ac8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aca:	4b0e      	ldr	r3, [pc, #56]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ace:	4a0d      	ldr	r2, [pc, #52]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ad4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006ad6:	4b0b      	ldr	r3, [pc, #44]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ada:	4a0a      	ldr	r2, [pc, #40]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ae0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006ae2:	4b08      	ldr	r3, [pc, #32]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae6:	4a07      	ldr	r2, [pc, #28]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006ae8:	f043 0301 	orr.w	r3, r3, #1
 8006aec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006aee:	4b05      	ldr	r3, [pc, #20]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a04      	ldr	r2, [pc, #16]	; (8006b04 <HAL_RCC_OscConfig+0x76c>)
 8006af4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006afa:	f7fb f8f1 	bl	8001ce0 <HAL_GetTick>
 8006afe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b00:	e011      	b.n	8006b26 <HAL_RCC_OscConfig+0x78e>
 8006b02:	bf00      	nop
 8006b04:	58024400 	.word	0x58024400
 8006b08:	58024800 	.word	0x58024800
 8006b0c:	fffffc0c 	.word	0xfffffc0c
 8006b10:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b14:	f7fb f8e4 	bl	8001ce0 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e08a      	b.n	8006c3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b26:	4b47      	ldr	r3, [pc, #284]	; (8006c44 <HAL_RCC_OscConfig+0x8ac>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d0f0      	beq.n	8006b14 <HAL_RCC_OscConfig+0x77c>
 8006b32:	e082      	b.n	8006c3a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b34:	4b43      	ldr	r3, [pc, #268]	; (8006c44 <HAL_RCC_OscConfig+0x8ac>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a42      	ldr	r2, [pc, #264]	; (8006c44 <HAL_RCC_OscConfig+0x8ac>)
 8006b3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b40:	f7fb f8ce 	bl	8001ce0 <HAL_GetTick>
 8006b44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b46:	e008      	b.n	8006b5a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b48:	f7fb f8ca 	bl	8001ce0 <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d901      	bls.n	8006b5a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e070      	b.n	8006c3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b5a:	4b3a      	ldr	r3, [pc, #232]	; (8006c44 <HAL_RCC_OscConfig+0x8ac>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1f0      	bne.n	8006b48 <HAL_RCC_OscConfig+0x7b0>
 8006b66:	e068      	b.n	8006c3a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006b68:	4b36      	ldr	r3, [pc, #216]	; (8006c44 <HAL_RCC_OscConfig+0x8ac>)
 8006b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006b6e:	4b35      	ldr	r3, [pc, #212]	; (8006c44 <HAL_RCC_OscConfig+0x8ac>)
 8006b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b72:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d031      	beq.n	8006be0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	f003 0203 	and.w	r2, r3, #3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d12a      	bne.n	8006be0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	091b      	lsrs	r3, r3, #4
 8006b8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d122      	bne.n	8006be0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d11a      	bne.n	8006be0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	0a5b      	lsrs	r3, r3, #9
 8006bae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d111      	bne.n	8006be0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	0c1b      	lsrs	r3, r3, #16
 8006bc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d108      	bne.n	8006be0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	0e1b      	lsrs	r3, r3, #24
 8006bd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bda:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d001      	beq.n	8006be4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e02b      	b.n	8006c3c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006be4:	4b17      	ldr	r3, [pc, #92]	; (8006c44 <HAL_RCC_OscConfig+0x8ac>)
 8006be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be8:	08db      	lsrs	r3, r3, #3
 8006bea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d01f      	beq.n	8006c3a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006bfa:	4b12      	ldr	r3, [pc, #72]	; (8006c44 <HAL_RCC_OscConfig+0x8ac>)
 8006bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfe:	4a11      	ldr	r2, [pc, #68]	; (8006c44 <HAL_RCC_OscConfig+0x8ac>)
 8006c00:	f023 0301 	bic.w	r3, r3, #1
 8006c04:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c06:	f7fb f86b 	bl	8001ce0 <HAL_GetTick>
 8006c0a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006c0c:	bf00      	nop
 8006c0e:	f7fb f867 	bl	8001ce0 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d0f9      	beq.n	8006c0e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006c1a:	4b0a      	ldr	r3, [pc, #40]	; (8006c44 <HAL_RCC_OscConfig+0x8ac>)
 8006c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c1e:	4b0a      	ldr	r3, [pc, #40]	; (8006c48 <HAL_RCC_OscConfig+0x8b0>)
 8006c20:	4013      	ands	r3, r2
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006c26:	00d2      	lsls	r2, r2, #3
 8006c28:	4906      	ldr	r1, [pc, #24]	; (8006c44 <HAL_RCC_OscConfig+0x8ac>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006c2e:	4b05      	ldr	r3, [pc, #20]	; (8006c44 <HAL_RCC_OscConfig+0x8ac>)
 8006c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c32:	4a04      	ldr	r2, [pc, #16]	; (8006c44 <HAL_RCC_OscConfig+0x8ac>)
 8006c34:	f043 0301 	orr.w	r3, r3, #1
 8006c38:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3730      	adds	r7, #48	; 0x30
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	58024400 	.word	0x58024400
 8006c48:	ffff0007 	.word	0xffff0007

08006c4c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e19c      	b.n	8006f9a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c60:	4b8a      	ldr	r3, [pc, #552]	; (8006e8c <HAL_RCC_ClockConfig+0x240>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 030f 	and.w	r3, r3, #15
 8006c68:	683a      	ldr	r2, [r7, #0]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d910      	bls.n	8006c90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c6e:	4b87      	ldr	r3, [pc, #540]	; (8006e8c <HAL_RCC_ClockConfig+0x240>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f023 020f 	bic.w	r2, r3, #15
 8006c76:	4985      	ldr	r1, [pc, #532]	; (8006e8c <HAL_RCC_ClockConfig+0x240>)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c7e:	4b83      	ldr	r3, [pc, #524]	; (8006e8c <HAL_RCC_ClockConfig+0x240>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 030f 	and.w	r3, r3, #15
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d001      	beq.n	8006c90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e184      	b.n	8006f9a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0304 	and.w	r3, r3, #4
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d010      	beq.n	8006cbe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	691a      	ldr	r2, [r3, #16]
 8006ca0:	4b7b      	ldr	r3, [pc, #492]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d908      	bls.n	8006cbe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006cac:	4b78      	ldr	r3, [pc, #480]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	4975      	ldr	r1, [pc, #468]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0308 	and.w	r3, r3, #8
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d010      	beq.n	8006cec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	695a      	ldr	r2, [r3, #20]
 8006cce:	4b70      	ldr	r3, [pc, #448]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d908      	bls.n	8006cec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006cda:	4b6d      	ldr	r3, [pc, #436]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	496a      	ldr	r1, [pc, #424]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0310 	and.w	r3, r3, #16
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d010      	beq.n	8006d1a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	699a      	ldr	r2, [r3, #24]
 8006cfc:	4b64      	ldr	r3, [pc, #400]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006cfe:	69db      	ldr	r3, [r3, #28]
 8006d00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d908      	bls.n	8006d1a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d08:	4b61      	ldr	r3, [pc, #388]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006d0a:	69db      	ldr	r3, [r3, #28]
 8006d0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	699b      	ldr	r3, [r3, #24]
 8006d14:	495e      	ldr	r1, [pc, #376]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0320 	and.w	r3, r3, #32
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d010      	beq.n	8006d48 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	69da      	ldr	r2, [r3, #28]
 8006d2a:	4b59      	ldr	r3, [pc, #356]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d908      	bls.n	8006d48 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006d36:	4b56      	ldr	r3, [pc, #344]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	4953      	ldr	r1, [pc, #332]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0302 	and.w	r3, r3, #2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d010      	beq.n	8006d76 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	68da      	ldr	r2, [r3, #12]
 8006d58:	4b4d      	ldr	r3, [pc, #308]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	f003 030f 	and.w	r3, r3, #15
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d908      	bls.n	8006d76 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d64:	4b4a      	ldr	r3, [pc, #296]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	f023 020f 	bic.w	r2, r3, #15
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	4947      	ldr	r1, [pc, #284]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d055      	beq.n	8006e2e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006d82:	4b43      	ldr	r3, [pc, #268]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	4940      	ldr	r1, [pc, #256]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006d90:	4313      	orrs	r3, r2
 8006d92:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d107      	bne.n	8006dac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d9c:	4b3c      	ldr	r3, [pc, #240]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d121      	bne.n	8006dec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e0f6      	b.n	8006f9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	2b03      	cmp	r3, #3
 8006db2:	d107      	bne.n	8006dc4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006db4:	4b36      	ldr	r3, [pc, #216]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d115      	bne.n	8006dec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e0ea      	b.n	8006f9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d107      	bne.n	8006ddc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006dcc:	4b30      	ldr	r3, [pc, #192]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d109      	bne.n	8006dec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e0de      	b.n	8006f9a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ddc:	4b2c      	ldr	r3, [pc, #176]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0304 	and.w	r3, r3, #4
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d101      	bne.n	8006dec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e0d6      	b.n	8006f9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006dec:	4b28      	ldr	r3, [pc, #160]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	f023 0207 	bic.w	r2, r3, #7
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	4925      	ldr	r1, [pc, #148]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dfe:	f7fa ff6f 	bl	8001ce0 <HAL_GetTick>
 8006e02:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e04:	e00a      	b.n	8006e1c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e06:	f7fa ff6b 	bl	8001ce0 <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d901      	bls.n	8006e1c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e0be      	b.n	8006f9a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e1c:	4b1c      	ldr	r3, [pc, #112]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	00db      	lsls	r3, r3, #3
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d1eb      	bne.n	8006e06 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d010      	beq.n	8006e5c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68da      	ldr	r2, [r3, #12]
 8006e3e:	4b14      	ldr	r3, [pc, #80]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	f003 030f 	and.w	r3, r3, #15
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d208      	bcs.n	8006e5c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e4a:	4b11      	ldr	r3, [pc, #68]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	f023 020f 	bic.w	r2, r3, #15
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	490e      	ldr	r1, [pc, #56]	; (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e5c:	4b0b      	ldr	r3, [pc, #44]	; (8006e8c <HAL_RCC_ClockConfig+0x240>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 030f 	and.w	r3, r3, #15
 8006e64:	683a      	ldr	r2, [r7, #0]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d214      	bcs.n	8006e94 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e6a:	4b08      	ldr	r3, [pc, #32]	; (8006e8c <HAL_RCC_ClockConfig+0x240>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f023 020f 	bic.w	r2, r3, #15
 8006e72:	4906      	ldr	r1, [pc, #24]	; (8006e8c <HAL_RCC_ClockConfig+0x240>)
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e7a:	4b04      	ldr	r3, [pc, #16]	; (8006e8c <HAL_RCC_ClockConfig+0x240>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 030f 	and.w	r3, r3, #15
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d005      	beq.n	8006e94 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e086      	b.n	8006f9a <HAL_RCC_ClockConfig+0x34e>
 8006e8c:	52002000 	.word	0x52002000
 8006e90:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0304 	and.w	r3, r3, #4
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d010      	beq.n	8006ec2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	691a      	ldr	r2, [r3, #16]
 8006ea4:	4b3f      	ldr	r3, [pc, #252]	; (8006fa4 <HAL_RCC_ClockConfig+0x358>)
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d208      	bcs.n	8006ec2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006eb0:	4b3c      	ldr	r3, [pc, #240]	; (8006fa4 <HAL_RCC_ClockConfig+0x358>)
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	4939      	ldr	r1, [pc, #228]	; (8006fa4 <HAL_RCC_ClockConfig+0x358>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0308 	and.w	r3, r3, #8
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d010      	beq.n	8006ef0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	695a      	ldr	r2, [r3, #20]
 8006ed2:	4b34      	ldr	r3, [pc, #208]	; (8006fa4 <HAL_RCC_ClockConfig+0x358>)
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d208      	bcs.n	8006ef0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006ede:	4b31      	ldr	r3, [pc, #196]	; (8006fa4 <HAL_RCC_ClockConfig+0x358>)
 8006ee0:	69db      	ldr	r3, [r3, #28]
 8006ee2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	492e      	ldr	r1, [pc, #184]	; (8006fa4 <HAL_RCC_ClockConfig+0x358>)
 8006eec:	4313      	orrs	r3, r2
 8006eee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0310 	and.w	r3, r3, #16
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d010      	beq.n	8006f1e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	699a      	ldr	r2, [r3, #24]
 8006f00:	4b28      	ldr	r3, [pc, #160]	; (8006fa4 <HAL_RCC_ClockConfig+0x358>)
 8006f02:	69db      	ldr	r3, [r3, #28]
 8006f04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d208      	bcs.n	8006f1e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006f0c:	4b25      	ldr	r3, [pc, #148]	; (8006fa4 <HAL_RCC_ClockConfig+0x358>)
 8006f0e:	69db      	ldr	r3, [r3, #28]
 8006f10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	4922      	ldr	r1, [pc, #136]	; (8006fa4 <HAL_RCC_ClockConfig+0x358>)
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0320 	and.w	r3, r3, #32
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d010      	beq.n	8006f4c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	69da      	ldr	r2, [r3, #28]
 8006f2e:	4b1d      	ldr	r3, [pc, #116]	; (8006fa4 <HAL_RCC_ClockConfig+0x358>)
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d208      	bcs.n	8006f4c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006f3a:	4b1a      	ldr	r3, [pc, #104]	; (8006fa4 <HAL_RCC_ClockConfig+0x358>)
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	4917      	ldr	r1, [pc, #92]	; (8006fa4 <HAL_RCC_ClockConfig+0x358>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f4c:	f000 f834 	bl	8006fb8 <HAL_RCC_GetSysClockFreq>
 8006f50:	4602      	mov	r2, r0
 8006f52:	4b14      	ldr	r3, [pc, #80]	; (8006fa4 <HAL_RCC_ClockConfig+0x358>)
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	0a1b      	lsrs	r3, r3, #8
 8006f58:	f003 030f 	and.w	r3, r3, #15
 8006f5c:	4912      	ldr	r1, [pc, #72]	; (8006fa8 <HAL_RCC_ClockConfig+0x35c>)
 8006f5e:	5ccb      	ldrb	r3, [r1, r3]
 8006f60:	f003 031f 	and.w	r3, r3, #31
 8006f64:	fa22 f303 	lsr.w	r3, r2, r3
 8006f68:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f6a:	4b0e      	ldr	r3, [pc, #56]	; (8006fa4 <HAL_RCC_ClockConfig+0x358>)
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	f003 030f 	and.w	r3, r3, #15
 8006f72:	4a0d      	ldr	r2, [pc, #52]	; (8006fa8 <HAL_RCC_ClockConfig+0x35c>)
 8006f74:	5cd3      	ldrb	r3, [r2, r3]
 8006f76:	f003 031f 	and.w	r3, r3, #31
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f80:	4a0a      	ldr	r2, [pc, #40]	; (8006fac <HAL_RCC_ClockConfig+0x360>)
 8006f82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f84:	4a0a      	ldr	r2, [pc, #40]	; (8006fb0 <HAL_RCC_ClockConfig+0x364>)
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006f8a:	4b0a      	ldr	r3, [pc, #40]	; (8006fb4 <HAL_RCC_ClockConfig+0x368>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7fa fe5c 	bl	8001c4c <HAL_InitTick>
 8006f94:	4603      	mov	r3, r0
 8006f96:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3718      	adds	r7, #24
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	58024400 	.word	0x58024400
 8006fa8:	08010840 	.word	0x08010840
 8006fac:	2400000c 	.word	0x2400000c
 8006fb0:	24000008 	.word	0x24000008
 8006fb4:	24000010 	.word	0x24000010

08006fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b089      	sub	sp, #36	; 0x24
 8006fbc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fbe:	4bb3      	ldr	r3, [pc, #716]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fc6:	2b18      	cmp	r3, #24
 8006fc8:	f200 8155 	bhi.w	8007276 <HAL_RCC_GetSysClockFreq+0x2be>
 8006fcc:	a201      	add	r2, pc, #4	; (adr r2, 8006fd4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd2:	bf00      	nop
 8006fd4:	08007039 	.word	0x08007039
 8006fd8:	08007277 	.word	0x08007277
 8006fdc:	08007277 	.word	0x08007277
 8006fe0:	08007277 	.word	0x08007277
 8006fe4:	08007277 	.word	0x08007277
 8006fe8:	08007277 	.word	0x08007277
 8006fec:	08007277 	.word	0x08007277
 8006ff0:	08007277 	.word	0x08007277
 8006ff4:	0800705f 	.word	0x0800705f
 8006ff8:	08007277 	.word	0x08007277
 8006ffc:	08007277 	.word	0x08007277
 8007000:	08007277 	.word	0x08007277
 8007004:	08007277 	.word	0x08007277
 8007008:	08007277 	.word	0x08007277
 800700c:	08007277 	.word	0x08007277
 8007010:	08007277 	.word	0x08007277
 8007014:	08007065 	.word	0x08007065
 8007018:	08007277 	.word	0x08007277
 800701c:	08007277 	.word	0x08007277
 8007020:	08007277 	.word	0x08007277
 8007024:	08007277 	.word	0x08007277
 8007028:	08007277 	.word	0x08007277
 800702c:	08007277 	.word	0x08007277
 8007030:	08007277 	.word	0x08007277
 8007034:	0800706b 	.word	0x0800706b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007038:	4b94      	ldr	r3, [pc, #592]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0320 	and.w	r3, r3, #32
 8007040:	2b00      	cmp	r3, #0
 8007042:	d009      	beq.n	8007058 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007044:	4b91      	ldr	r3, [pc, #580]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	08db      	lsrs	r3, r3, #3
 800704a:	f003 0303 	and.w	r3, r3, #3
 800704e:	4a90      	ldr	r2, [pc, #576]	; (8007290 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007050:	fa22 f303 	lsr.w	r3, r2, r3
 8007054:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007056:	e111      	b.n	800727c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007058:	4b8d      	ldr	r3, [pc, #564]	; (8007290 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800705a:	61bb      	str	r3, [r7, #24]
      break;
 800705c:	e10e      	b.n	800727c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800705e:	4b8d      	ldr	r3, [pc, #564]	; (8007294 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007060:	61bb      	str	r3, [r7, #24]
      break;
 8007062:	e10b      	b.n	800727c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007064:	4b8c      	ldr	r3, [pc, #560]	; (8007298 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007066:	61bb      	str	r3, [r7, #24]
      break;
 8007068:	e108      	b.n	800727c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800706a:	4b88      	ldr	r3, [pc, #544]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800706c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706e:	f003 0303 	and.w	r3, r3, #3
 8007072:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007074:	4b85      	ldr	r3, [pc, #532]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007078:	091b      	lsrs	r3, r3, #4
 800707a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800707e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007080:	4b82      	ldr	r3, [pc, #520]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800708a:	4b80      	ldr	r3, [pc, #512]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800708c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800708e:	08db      	lsrs	r3, r3, #3
 8007090:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	fb02 f303 	mul.w	r3, r2, r3
 800709a:	ee07 3a90 	vmov	s15, r3
 800709e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070a2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 80e1 	beq.w	8007270 <HAL_RCC_GetSysClockFreq+0x2b8>
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	f000 8083 	beq.w	80071bc <HAL_RCC_GetSysClockFreq+0x204>
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	f200 80a1 	bhi.w	8007200 <HAL_RCC_GetSysClockFreq+0x248>
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d003      	beq.n	80070cc <HAL_RCC_GetSysClockFreq+0x114>
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d056      	beq.n	8007178 <HAL_RCC_GetSysClockFreq+0x1c0>
 80070ca:	e099      	b.n	8007200 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070cc:	4b6f      	ldr	r3, [pc, #444]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0320 	and.w	r3, r3, #32
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d02d      	beq.n	8007134 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070d8:	4b6c      	ldr	r3, [pc, #432]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	08db      	lsrs	r3, r3, #3
 80070de:	f003 0303 	and.w	r3, r3, #3
 80070e2:	4a6b      	ldr	r2, [pc, #428]	; (8007290 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070e4:	fa22 f303 	lsr.w	r3, r2, r3
 80070e8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	ee07 3a90 	vmov	s15, r3
 80070f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	ee07 3a90 	vmov	s15, r3
 80070fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007102:	4b62      	ldr	r3, [pc, #392]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800710a:	ee07 3a90 	vmov	s15, r3
 800710e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007112:	ed97 6a02 	vldr	s12, [r7, #8]
 8007116:	eddf 5a61 	vldr	s11, [pc, #388]	; 800729c <HAL_RCC_GetSysClockFreq+0x2e4>
 800711a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800711e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800712a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800712e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007132:	e087      	b.n	8007244 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	ee07 3a90 	vmov	s15, r3
 800713a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80072a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007146:	4b51      	ldr	r3, [pc, #324]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800714e:	ee07 3a90 	vmov	s15, r3
 8007152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007156:	ed97 6a02 	vldr	s12, [r7, #8]
 800715a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800729c <HAL_RCC_GetSysClockFreq+0x2e4>
 800715e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800716a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800716e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007172:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007176:	e065      	b.n	8007244 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	ee07 3a90 	vmov	s15, r3
 800717e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007182:	eddf 6a48 	vldr	s13, [pc, #288]	; 80072a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800718a:	4b40      	ldr	r3, [pc, #256]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800718c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007192:	ee07 3a90 	vmov	s15, r3
 8007196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800719a:	ed97 6a02 	vldr	s12, [r7, #8]
 800719e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800729c <HAL_RCC_GetSysClockFreq+0x2e4>
 80071a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071ba:	e043      	b.n	8007244 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	ee07 3a90 	vmov	s15, r3
 80071c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80072a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80071ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ce:	4b2f      	ldr	r3, [pc, #188]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071de:	ed97 6a02 	vldr	s12, [r7, #8]
 80071e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800729c <HAL_RCC_GetSysClockFreq+0x2e4>
 80071e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071fe:	e021      	b.n	8007244 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	ee07 3a90 	vmov	s15, r3
 8007206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80072a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800720e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007212:	4b1e      	ldr	r3, [pc, #120]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800721a:	ee07 3a90 	vmov	s15, r3
 800721e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007222:	ed97 6a02 	vldr	s12, [r7, #8]
 8007226:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800729c <HAL_RCC_GetSysClockFreq+0x2e4>
 800722a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800722e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800723a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800723e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007242:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007244:	4b11      	ldr	r3, [pc, #68]	; (800728c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007248:	0a5b      	lsrs	r3, r3, #9
 800724a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800724e:	3301      	adds	r3, #1
 8007250:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	ee07 3a90 	vmov	s15, r3
 8007258:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800725c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007268:	ee17 3a90 	vmov	r3, s15
 800726c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800726e:	e005      	b.n	800727c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007270:	2300      	movs	r3, #0
 8007272:	61bb      	str	r3, [r7, #24]
      break;
 8007274:	e002      	b.n	800727c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007276:	4b07      	ldr	r3, [pc, #28]	; (8007294 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007278:	61bb      	str	r3, [r7, #24]
      break;
 800727a:	bf00      	nop
  }

  return sysclockfreq;
 800727c:	69bb      	ldr	r3, [r7, #24]
}
 800727e:	4618      	mov	r0, r3
 8007280:	3724      	adds	r7, #36	; 0x24
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	58024400 	.word	0x58024400
 8007290:	03d09000 	.word	0x03d09000
 8007294:	003d0900 	.word	0x003d0900
 8007298:	00bb8000 	.word	0x00bb8000
 800729c:	46000000 	.word	0x46000000
 80072a0:	4c742400 	.word	0x4c742400
 80072a4:	4a742400 	.word	0x4a742400
 80072a8:	4b3b8000 	.word	0x4b3b8000

080072ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80072b2:	f7ff fe81 	bl	8006fb8 <HAL_RCC_GetSysClockFreq>
 80072b6:	4602      	mov	r2, r0
 80072b8:	4b10      	ldr	r3, [pc, #64]	; (80072fc <HAL_RCC_GetHCLKFreq+0x50>)
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	0a1b      	lsrs	r3, r3, #8
 80072be:	f003 030f 	and.w	r3, r3, #15
 80072c2:	490f      	ldr	r1, [pc, #60]	; (8007300 <HAL_RCC_GetHCLKFreq+0x54>)
 80072c4:	5ccb      	ldrb	r3, [r1, r3]
 80072c6:	f003 031f 	and.w	r3, r3, #31
 80072ca:	fa22 f303 	lsr.w	r3, r2, r3
 80072ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80072d0:	4b0a      	ldr	r3, [pc, #40]	; (80072fc <HAL_RCC_GetHCLKFreq+0x50>)
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	f003 030f 	and.w	r3, r3, #15
 80072d8:	4a09      	ldr	r2, [pc, #36]	; (8007300 <HAL_RCC_GetHCLKFreq+0x54>)
 80072da:	5cd3      	ldrb	r3, [r2, r3]
 80072dc:	f003 031f 	and.w	r3, r3, #31
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	fa22 f303 	lsr.w	r3, r2, r3
 80072e6:	4a07      	ldr	r2, [pc, #28]	; (8007304 <HAL_RCC_GetHCLKFreq+0x58>)
 80072e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072ea:	4a07      	ldr	r2, [pc, #28]	; (8007308 <HAL_RCC_GetHCLKFreq+0x5c>)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80072f0:	4b04      	ldr	r3, [pc, #16]	; (8007304 <HAL_RCC_GetHCLKFreq+0x58>)
 80072f2:	681b      	ldr	r3, [r3, #0]
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	58024400 	.word	0x58024400
 8007300:	08010840 	.word	0x08010840
 8007304:	2400000c 	.word	0x2400000c
 8007308:	24000008 	.word	0x24000008

0800730c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007310:	f7ff ffcc 	bl	80072ac <HAL_RCC_GetHCLKFreq>
 8007314:	4602      	mov	r2, r0
 8007316:	4b06      	ldr	r3, [pc, #24]	; (8007330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007318:	69db      	ldr	r3, [r3, #28]
 800731a:	091b      	lsrs	r3, r3, #4
 800731c:	f003 0307 	and.w	r3, r3, #7
 8007320:	4904      	ldr	r1, [pc, #16]	; (8007334 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007322:	5ccb      	ldrb	r3, [r1, r3]
 8007324:	f003 031f 	and.w	r3, r3, #31
 8007328:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800732c:	4618      	mov	r0, r3
 800732e:	bd80      	pop	{r7, pc}
 8007330:	58024400 	.word	0x58024400
 8007334:	08010840 	.word	0x08010840

08007338 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800733c:	b0ca      	sub	sp, #296	; 0x128
 800733e:	af00      	add	r7, sp, #0
 8007340:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007344:	2300      	movs	r3, #0
 8007346:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800734a:	2300      	movs	r3, #0
 800734c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007358:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800735c:	2500      	movs	r5, #0
 800735e:	ea54 0305 	orrs.w	r3, r4, r5
 8007362:	d049      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007368:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800736a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800736e:	d02f      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007370:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007374:	d828      	bhi.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007376:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800737a:	d01a      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800737c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007380:	d822      	bhi.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007382:	2b00      	cmp	r3, #0
 8007384:	d003      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800738a:	d007      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800738c:	e01c      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800738e:	4bb8      	ldr	r3, [pc, #736]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007392:	4ab7      	ldr	r2, [pc, #732]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007398:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800739a:	e01a      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800739c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073a0:	3308      	adds	r3, #8
 80073a2:	2102      	movs	r1, #2
 80073a4:	4618      	mov	r0, r3
 80073a6:	f002 fb5b 	bl	8009a60 <RCCEx_PLL2_Config>
 80073aa:	4603      	mov	r3, r0
 80073ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80073b0:	e00f      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073b6:	3328      	adds	r3, #40	; 0x28
 80073b8:	2102      	movs	r1, #2
 80073ba:	4618      	mov	r0, r3
 80073bc:	f002 fc02 	bl	8009bc4 <RCCEx_PLL3_Config>
 80073c0:	4603      	mov	r3, r0
 80073c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80073c6:	e004      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80073ce:	e000      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80073d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10a      	bne.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80073da:	4ba5      	ldr	r3, [pc, #660]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073de:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80073e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073e8:	4aa1      	ldr	r2, [pc, #644]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073ea:	430b      	orrs	r3, r1
 80073ec:	6513      	str	r3, [r2, #80]	; 0x50
 80073ee:	e003      	b.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80073f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007400:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007404:	f04f 0900 	mov.w	r9, #0
 8007408:	ea58 0309 	orrs.w	r3, r8, r9
 800740c:	d047      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800740e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007414:	2b04      	cmp	r3, #4
 8007416:	d82a      	bhi.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007418:	a201      	add	r2, pc, #4	; (adr r2, 8007420 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800741a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741e:	bf00      	nop
 8007420:	08007435 	.word	0x08007435
 8007424:	08007443 	.word	0x08007443
 8007428:	08007459 	.word	0x08007459
 800742c:	08007477 	.word	0x08007477
 8007430:	08007477 	.word	0x08007477
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007434:	4b8e      	ldr	r3, [pc, #568]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007438:	4a8d      	ldr	r2, [pc, #564]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800743a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800743e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007440:	e01a      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007446:	3308      	adds	r3, #8
 8007448:	2100      	movs	r1, #0
 800744a:	4618      	mov	r0, r3
 800744c:	f002 fb08 	bl	8009a60 <RCCEx_PLL2_Config>
 8007450:	4603      	mov	r3, r0
 8007452:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007456:	e00f      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800745c:	3328      	adds	r3, #40	; 0x28
 800745e:	2100      	movs	r1, #0
 8007460:	4618      	mov	r0, r3
 8007462:	f002 fbaf 	bl	8009bc4 <RCCEx_PLL3_Config>
 8007466:	4603      	mov	r3, r0
 8007468:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800746c:	e004      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007474:	e000      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007476:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007478:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10a      	bne.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007480:	4b7b      	ldr	r3, [pc, #492]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007484:	f023 0107 	bic.w	r1, r3, #7
 8007488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800748c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800748e:	4a78      	ldr	r2, [pc, #480]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007490:	430b      	orrs	r3, r1
 8007492:	6513      	str	r3, [r2, #80]	; 0x50
 8007494:	e003      	b.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007496:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800749a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800749e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80074aa:	f04f 0b00 	mov.w	fp, #0
 80074ae:	ea5a 030b 	orrs.w	r3, sl, fp
 80074b2:	d04c      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80074b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074be:	d030      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80074c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074c4:	d829      	bhi.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80074c6:	2bc0      	cmp	r3, #192	; 0xc0
 80074c8:	d02d      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80074ca:	2bc0      	cmp	r3, #192	; 0xc0
 80074cc:	d825      	bhi.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80074ce:	2b80      	cmp	r3, #128	; 0x80
 80074d0:	d018      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80074d2:	2b80      	cmp	r3, #128	; 0x80
 80074d4:	d821      	bhi.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d002      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80074da:	2b40      	cmp	r3, #64	; 0x40
 80074dc:	d007      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80074de:	e01c      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074e0:	4b63      	ldr	r3, [pc, #396]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e4:	4a62      	ldr	r2, [pc, #392]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80074ec:	e01c      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074f2:	3308      	adds	r3, #8
 80074f4:	2100      	movs	r1, #0
 80074f6:	4618      	mov	r0, r3
 80074f8:	f002 fab2 	bl	8009a60 <RCCEx_PLL2_Config>
 80074fc:	4603      	mov	r3, r0
 80074fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007502:	e011      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007508:	3328      	adds	r3, #40	; 0x28
 800750a:	2100      	movs	r1, #0
 800750c:	4618      	mov	r0, r3
 800750e:	f002 fb59 	bl	8009bc4 <RCCEx_PLL3_Config>
 8007512:	4603      	mov	r3, r0
 8007514:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007518:	e006      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007520:	e002      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007522:	bf00      	nop
 8007524:	e000      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007526:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007528:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800752c:	2b00      	cmp	r3, #0
 800752e:	d10a      	bne.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007530:	4b4f      	ldr	r3, [pc, #316]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007534:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800753c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800753e:	4a4c      	ldr	r2, [pc, #304]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007540:	430b      	orrs	r3, r1
 8007542:	6513      	str	r3, [r2, #80]	; 0x50
 8007544:	e003      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007546:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800754a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800754e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007556:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800755a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800755e:	2300      	movs	r3, #0
 8007560:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007564:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007568:	460b      	mov	r3, r1
 800756a:	4313      	orrs	r3, r2
 800756c:	d053      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800756e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007572:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007576:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800757a:	d035      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800757c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007580:	d82e      	bhi.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007582:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007586:	d031      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007588:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800758c:	d828      	bhi.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800758e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007592:	d01a      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007594:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007598:	d822      	bhi.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800759a:	2b00      	cmp	r3, #0
 800759c:	d003      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800759e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075a2:	d007      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80075a4:	e01c      	b.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075a6:	4b32      	ldr	r3, [pc, #200]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075aa:	4a31      	ldr	r2, [pc, #196]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075b2:	e01c      	b.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075b8:	3308      	adds	r3, #8
 80075ba:	2100      	movs	r1, #0
 80075bc:	4618      	mov	r0, r3
 80075be:	f002 fa4f 	bl	8009a60 <RCCEx_PLL2_Config>
 80075c2:	4603      	mov	r3, r0
 80075c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80075c8:	e011      	b.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ce:	3328      	adds	r3, #40	; 0x28
 80075d0:	2100      	movs	r1, #0
 80075d2:	4618      	mov	r0, r3
 80075d4:	f002 faf6 	bl	8009bc4 <RCCEx_PLL3_Config>
 80075d8:	4603      	mov	r3, r0
 80075da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075de:	e006      	b.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80075e6:	e002      	b.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80075e8:	bf00      	nop
 80075ea:	e000      	b.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80075ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10b      	bne.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80075f6:	4b1e      	ldr	r3, [pc, #120]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075fa:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80075fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007602:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007606:	4a1a      	ldr	r2, [pc, #104]	; (8007670 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007608:	430b      	orrs	r3, r1
 800760a:	6593      	str	r3, [r2, #88]	; 0x58
 800760c:	e003      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800760e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007612:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800761a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007622:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007626:	2300      	movs	r3, #0
 8007628:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800762c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007630:	460b      	mov	r3, r1
 8007632:	4313      	orrs	r3, r2
 8007634:	d056      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800763a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800763e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007642:	d038      	beq.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007644:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007648:	d831      	bhi.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800764a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800764e:	d034      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007650:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007654:	d82b      	bhi.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007656:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800765a:	d01d      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800765c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007660:	d825      	bhi.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007662:	2b00      	cmp	r3, #0
 8007664:	d006      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007666:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800766a:	d00a      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800766c:	e01f      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800766e:	bf00      	nop
 8007670:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007674:	4ba2      	ldr	r3, [pc, #648]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007678:	4aa1      	ldr	r2, [pc, #644]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800767a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800767e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007680:	e01c      	b.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007686:	3308      	adds	r3, #8
 8007688:	2100      	movs	r1, #0
 800768a:	4618      	mov	r0, r3
 800768c:	f002 f9e8 	bl	8009a60 <RCCEx_PLL2_Config>
 8007690:	4603      	mov	r3, r0
 8007692:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007696:	e011      	b.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800769c:	3328      	adds	r3, #40	; 0x28
 800769e:	2100      	movs	r1, #0
 80076a0:	4618      	mov	r0, r3
 80076a2:	f002 fa8f 	bl	8009bc4 <RCCEx_PLL3_Config>
 80076a6:	4603      	mov	r3, r0
 80076a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80076ac:	e006      	b.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80076b4:	e002      	b.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80076b6:	bf00      	nop
 80076b8:	e000      	b.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80076ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10b      	bne.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80076c4:	4b8e      	ldr	r3, [pc, #568]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076c8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80076cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80076d4:	4a8a      	ldr	r2, [pc, #552]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076d6:	430b      	orrs	r3, r1
 80076d8:	6593      	str	r3, [r2, #88]	; 0x58
 80076da:	e003      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80076e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ec:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80076f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80076f4:	2300      	movs	r3, #0
 80076f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80076fa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80076fe:	460b      	mov	r3, r1
 8007700:	4313      	orrs	r3, r2
 8007702:	d03a      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800770a:	2b30      	cmp	r3, #48	; 0x30
 800770c:	d01f      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800770e:	2b30      	cmp	r3, #48	; 0x30
 8007710:	d819      	bhi.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007712:	2b20      	cmp	r3, #32
 8007714:	d00c      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007716:	2b20      	cmp	r3, #32
 8007718:	d815      	bhi.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800771a:	2b00      	cmp	r3, #0
 800771c:	d019      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800771e:	2b10      	cmp	r3, #16
 8007720:	d111      	bne.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007722:	4b77      	ldr	r3, [pc, #476]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007726:	4a76      	ldr	r2, [pc, #472]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800772c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800772e:	e011      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007734:	3308      	adds	r3, #8
 8007736:	2102      	movs	r1, #2
 8007738:	4618      	mov	r0, r3
 800773a:	f002 f991 	bl	8009a60 <RCCEx_PLL2_Config>
 800773e:	4603      	mov	r3, r0
 8007740:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007744:	e006      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800774c:	e002      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800774e:	bf00      	nop
 8007750:	e000      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007752:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007754:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10a      	bne.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800775c:	4b68      	ldr	r3, [pc, #416]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800775e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007760:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800776a:	4a65      	ldr	r2, [pc, #404]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800776c:	430b      	orrs	r3, r1
 800776e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007770:	e003      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007772:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007776:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800777a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800777e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007782:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007786:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800778a:	2300      	movs	r3, #0
 800778c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007790:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007794:	460b      	mov	r3, r1
 8007796:	4313      	orrs	r3, r2
 8007798:	d051      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800779a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800779e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077a4:	d035      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80077a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077aa:	d82e      	bhi.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80077ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077b0:	d031      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80077b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077b6:	d828      	bhi.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80077b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077bc:	d01a      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80077be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077c2:	d822      	bhi.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d003      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80077c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077cc:	d007      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80077ce:	e01c      	b.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077d0:	4b4b      	ldr	r3, [pc, #300]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d4:	4a4a      	ldr	r2, [pc, #296]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077dc:	e01c      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077e2:	3308      	adds	r3, #8
 80077e4:	2100      	movs	r1, #0
 80077e6:	4618      	mov	r0, r3
 80077e8:	f002 f93a 	bl	8009a60 <RCCEx_PLL2_Config>
 80077ec:	4603      	mov	r3, r0
 80077ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077f2:	e011      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077f8:	3328      	adds	r3, #40	; 0x28
 80077fa:	2100      	movs	r1, #0
 80077fc:	4618      	mov	r0, r3
 80077fe:	f002 f9e1 	bl	8009bc4 <RCCEx_PLL3_Config>
 8007802:	4603      	mov	r3, r0
 8007804:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007808:	e006      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007810:	e002      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007812:	bf00      	nop
 8007814:	e000      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007816:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007818:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800781c:	2b00      	cmp	r3, #0
 800781e:	d10a      	bne.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007820:	4b37      	ldr	r3, [pc, #220]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007824:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800782c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800782e:	4a34      	ldr	r2, [pc, #208]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007830:	430b      	orrs	r3, r1
 8007832:	6513      	str	r3, [r2, #80]	; 0x50
 8007834:	e003      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007836:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800783a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800783e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007846:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800784a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800784e:	2300      	movs	r3, #0
 8007850:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007854:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007858:	460b      	mov	r3, r1
 800785a:	4313      	orrs	r3, r2
 800785c:	d056      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800785e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007868:	d033      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800786a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800786e:	d82c      	bhi.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007870:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007874:	d02f      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007876:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800787a:	d826      	bhi.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 800787c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007880:	d02b      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007882:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007886:	d820      	bhi.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007888:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800788c:	d012      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800788e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007892:	d81a      	bhi.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007894:	2b00      	cmp	r3, #0
 8007896:	d022      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800789c:	d115      	bne.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800789e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078a2:	3308      	adds	r3, #8
 80078a4:	2101      	movs	r1, #1
 80078a6:	4618      	mov	r0, r3
 80078a8:	f002 f8da 	bl	8009a60 <RCCEx_PLL2_Config>
 80078ac:	4603      	mov	r3, r0
 80078ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80078b2:	e015      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078b8:	3328      	adds	r3, #40	; 0x28
 80078ba:	2101      	movs	r1, #1
 80078bc:	4618      	mov	r0, r3
 80078be:	f002 f981 	bl	8009bc4 <RCCEx_PLL3_Config>
 80078c2:	4603      	mov	r3, r0
 80078c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80078c8:	e00a      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80078d0:	e006      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078d2:	bf00      	nop
 80078d4:	e004      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078d6:	bf00      	nop
 80078d8:	e002      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078da:	bf00      	nop
 80078dc:	e000      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10d      	bne.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80078e8:	4b05      	ldr	r3, [pc, #20]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ec:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80078f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078f6:	4a02      	ldr	r2, [pc, #8]	; (8007900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078f8:	430b      	orrs	r3, r1
 80078fa:	6513      	str	r3, [r2, #80]	; 0x50
 80078fc:	e006      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80078fe:	bf00      	nop
 8007900:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007904:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007908:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800790c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007914:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007918:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800791c:	2300      	movs	r3, #0
 800791e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007922:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007926:	460b      	mov	r3, r1
 8007928:	4313      	orrs	r3, r2
 800792a:	d055      	beq.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800792c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007930:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007934:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007938:	d033      	beq.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800793a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800793e:	d82c      	bhi.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007944:	d02f      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800794a:	d826      	bhi.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800794c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007950:	d02b      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007952:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007956:	d820      	bhi.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800795c:	d012      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800795e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007962:	d81a      	bhi.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007964:	2b00      	cmp	r3, #0
 8007966:	d022      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007968:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800796c:	d115      	bne.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800796e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007972:	3308      	adds	r3, #8
 8007974:	2101      	movs	r1, #1
 8007976:	4618      	mov	r0, r3
 8007978:	f002 f872 	bl	8009a60 <RCCEx_PLL2_Config>
 800797c:	4603      	mov	r3, r0
 800797e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007982:	e015      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007988:	3328      	adds	r3, #40	; 0x28
 800798a:	2101      	movs	r1, #1
 800798c:	4618      	mov	r0, r3
 800798e:	f002 f919 	bl	8009bc4 <RCCEx_PLL3_Config>
 8007992:	4603      	mov	r3, r0
 8007994:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007998:	e00a      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80079a0:	e006      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80079a2:	bf00      	nop
 80079a4:	e004      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80079a6:	bf00      	nop
 80079a8:	e002      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80079aa:	bf00      	nop
 80079ac:	e000      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80079ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10b      	bne.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80079b8:	4ba3      	ldr	r3, [pc, #652]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079bc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80079c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079c8:	4a9f      	ldr	r2, [pc, #636]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079ca:	430b      	orrs	r3, r1
 80079cc:	6593      	str	r3, [r2, #88]	; 0x58
 80079ce:	e003      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80079d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80079e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80079e8:	2300      	movs	r3, #0
 80079ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80079ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80079f2:	460b      	mov	r3, r1
 80079f4:	4313      	orrs	r3, r2
 80079f6:	d037      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80079f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a02:	d00e      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007a04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a08:	d816      	bhi.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d018      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007a0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a12:	d111      	bne.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a14:	4b8c      	ldr	r3, [pc, #560]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a18:	4a8b      	ldr	r2, [pc, #556]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007a20:	e00f      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a26:	3308      	adds	r3, #8
 8007a28:	2101      	movs	r1, #1
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f002 f818 	bl	8009a60 <RCCEx_PLL2_Config>
 8007a30:	4603      	mov	r3, r0
 8007a32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007a36:	e004      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a3e:	e000      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10a      	bne.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a4a:	4b7f      	ldr	r3, [pc, #508]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a4e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a58:	4a7b      	ldr	r2, [pc, #492]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a5a:	430b      	orrs	r3, r1
 8007a5c:	6513      	str	r3, [r2, #80]	; 0x50
 8007a5e:	e003      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a70:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007a74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a78:	2300      	movs	r3, #0
 8007a7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007a7e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007a82:	460b      	mov	r3, r1
 8007a84:	4313      	orrs	r3, r2
 8007a86:	d039      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	d81c      	bhi.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007a92:	a201      	add	r2, pc, #4	; (adr r2, 8007a98 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a98:	08007ad5 	.word	0x08007ad5
 8007a9c:	08007aa9 	.word	0x08007aa9
 8007aa0:	08007ab7 	.word	0x08007ab7
 8007aa4:	08007ad5 	.word	0x08007ad5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007aa8:	4b67      	ldr	r3, [pc, #412]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aac:	4a66      	ldr	r2, [pc, #408]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ab2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007ab4:	e00f      	b.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aba:	3308      	adds	r3, #8
 8007abc:	2102      	movs	r1, #2
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f001 ffce 	bl	8009a60 <RCCEx_PLL2_Config>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007aca:	e004      	b.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ad2:	e000      	b.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007ad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d10a      	bne.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007ade:	4b5a      	ldr	r3, [pc, #360]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ae2:	f023 0103 	bic.w	r1, r3, #3
 8007ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aec:	4a56      	ldr	r2, [pc, #344]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007aee:	430b      	orrs	r3, r1
 8007af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007af2:	e003      	b.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007af8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b04:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007b08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b12:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007b16:	460b      	mov	r3, r1
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	f000 809f 	beq.w	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b1e:	4b4b      	ldr	r3, [pc, #300]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a4a      	ldr	r2, [pc, #296]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b2a:	f7fa f8d9 	bl	8001ce0 <HAL_GetTick>
 8007b2e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b32:	e00b      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b34:	f7fa f8d4 	bl	8001ce0 <HAL_GetTick>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	2b64      	cmp	r3, #100	; 0x64
 8007b42:	d903      	bls.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007b44:	2303      	movs	r3, #3
 8007b46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b4a:	e005      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b4c:	4b3f      	ldr	r3, [pc, #252]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d0ed      	beq.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007b58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d179      	bne.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007b60:	4b39      	ldr	r3, [pc, #228]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b6c:	4053      	eors	r3, r2
 8007b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d015      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b76:	4b34      	ldr	r3, [pc, #208]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b82:	4b31      	ldr	r3, [pc, #196]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b86:	4a30      	ldr	r2, [pc, #192]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b8c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b8e:	4b2e      	ldr	r3, [pc, #184]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b92:	4a2d      	ldr	r2, [pc, #180]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b98:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007b9a:	4a2b      	ldr	r2, [pc, #172]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007ba0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ba6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bae:	d118      	bne.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bb0:	f7fa f896 	bl	8001ce0 <HAL_GetTick>
 8007bb4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007bb8:	e00d      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bba:	f7fa f891 	bl	8001ce0 <HAL_GetTick>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007bc4:	1ad2      	subs	r2, r2, r3
 8007bc6:	f241 3388 	movw	r3, #5000	; 0x1388
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d903      	bls.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007bd4:	e005      	b.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007bd6:	4b1c      	ldr	r3, [pc, #112]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bda:	f003 0302 	and.w	r3, r3, #2
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d0eb      	beq.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007be2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d129      	bne.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bfa:	d10e      	bne.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007bfc:	4b12      	ldr	r3, [pc, #72]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007c0c:	091a      	lsrs	r2, r3, #4
 8007c0e:	4b10      	ldr	r3, [pc, #64]	; (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007c10:	4013      	ands	r3, r2
 8007c12:	4a0d      	ldr	r2, [pc, #52]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c14:	430b      	orrs	r3, r1
 8007c16:	6113      	str	r3, [r2, #16]
 8007c18:	e005      	b.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007c1a:	4b0b      	ldr	r3, [pc, #44]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	4a0a      	ldr	r2, [pc, #40]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c20:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007c24:	6113      	str	r3, [r2, #16]
 8007c26:	4b08      	ldr	r3, [pc, #32]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c28:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c36:	4a04      	ldr	r2, [pc, #16]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c38:	430b      	orrs	r3, r1
 8007c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8007c3c:	e00e      	b.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007c46:	e009      	b.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007c48:	58024400 	.word	0x58024400
 8007c4c:	58024800 	.word	0x58024800
 8007c50:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c64:	f002 0301 	and.w	r3, r2, #1
 8007c68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c72:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007c76:	460b      	mov	r3, r1
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	f000 8089 	beq.w	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c84:	2b28      	cmp	r3, #40	; 0x28
 8007c86:	d86b      	bhi.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007c88:	a201      	add	r2, pc, #4	; (adr r2, 8007c90 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c8e:	bf00      	nop
 8007c90:	08007d69 	.word	0x08007d69
 8007c94:	08007d61 	.word	0x08007d61
 8007c98:	08007d61 	.word	0x08007d61
 8007c9c:	08007d61 	.word	0x08007d61
 8007ca0:	08007d61 	.word	0x08007d61
 8007ca4:	08007d61 	.word	0x08007d61
 8007ca8:	08007d61 	.word	0x08007d61
 8007cac:	08007d61 	.word	0x08007d61
 8007cb0:	08007d35 	.word	0x08007d35
 8007cb4:	08007d61 	.word	0x08007d61
 8007cb8:	08007d61 	.word	0x08007d61
 8007cbc:	08007d61 	.word	0x08007d61
 8007cc0:	08007d61 	.word	0x08007d61
 8007cc4:	08007d61 	.word	0x08007d61
 8007cc8:	08007d61 	.word	0x08007d61
 8007ccc:	08007d61 	.word	0x08007d61
 8007cd0:	08007d4b 	.word	0x08007d4b
 8007cd4:	08007d61 	.word	0x08007d61
 8007cd8:	08007d61 	.word	0x08007d61
 8007cdc:	08007d61 	.word	0x08007d61
 8007ce0:	08007d61 	.word	0x08007d61
 8007ce4:	08007d61 	.word	0x08007d61
 8007ce8:	08007d61 	.word	0x08007d61
 8007cec:	08007d61 	.word	0x08007d61
 8007cf0:	08007d69 	.word	0x08007d69
 8007cf4:	08007d61 	.word	0x08007d61
 8007cf8:	08007d61 	.word	0x08007d61
 8007cfc:	08007d61 	.word	0x08007d61
 8007d00:	08007d61 	.word	0x08007d61
 8007d04:	08007d61 	.word	0x08007d61
 8007d08:	08007d61 	.word	0x08007d61
 8007d0c:	08007d61 	.word	0x08007d61
 8007d10:	08007d69 	.word	0x08007d69
 8007d14:	08007d61 	.word	0x08007d61
 8007d18:	08007d61 	.word	0x08007d61
 8007d1c:	08007d61 	.word	0x08007d61
 8007d20:	08007d61 	.word	0x08007d61
 8007d24:	08007d61 	.word	0x08007d61
 8007d28:	08007d61 	.word	0x08007d61
 8007d2c:	08007d61 	.word	0x08007d61
 8007d30:	08007d69 	.word	0x08007d69
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d38:	3308      	adds	r3, #8
 8007d3a:	2101      	movs	r1, #1
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f001 fe8f 	bl	8009a60 <RCCEx_PLL2_Config>
 8007d42:	4603      	mov	r3, r0
 8007d44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007d48:	e00f      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d4e:	3328      	adds	r3, #40	; 0x28
 8007d50:	2101      	movs	r1, #1
 8007d52:	4618      	mov	r0, r3
 8007d54:	f001 ff36 	bl	8009bc4 <RCCEx_PLL3_Config>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007d5e:	e004      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d66:	e000      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007d68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10a      	bne.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007d72:	4bbf      	ldr	r3, [pc, #764]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d76:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d80:	4abb      	ldr	r2, [pc, #748]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d82:	430b      	orrs	r3, r1
 8007d84:	6553      	str	r3, [r2, #84]	; 0x54
 8007d86:	e003      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d98:	f002 0302 	and.w	r3, r2, #2
 8007d9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007da0:	2300      	movs	r3, #0
 8007da2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007da6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007daa:	460b      	mov	r3, r1
 8007dac:	4313      	orrs	r3, r2
 8007dae:	d041      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007db4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007db6:	2b05      	cmp	r3, #5
 8007db8:	d824      	bhi.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007dba:	a201      	add	r2, pc, #4	; (adr r2, 8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc0:	08007e0d 	.word	0x08007e0d
 8007dc4:	08007dd9 	.word	0x08007dd9
 8007dc8:	08007def 	.word	0x08007def
 8007dcc:	08007e0d 	.word	0x08007e0d
 8007dd0:	08007e0d 	.word	0x08007e0d
 8007dd4:	08007e0d 	.word	0x08007e0d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ddc:	3308      	adds	r3, #8
 8007dde:	2101      	movs	r1, #1
 8007de0:	4618      	mov	r0, r3
 8007de2:	f001 fe3d 	bl	8009a60 <RCCEx_PLL2_Config>
 8007de6:	4603      	mov	r3, r0
 8007de8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007dec:	e00f      	b.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007df2:	3328      	adds	r3, #40	; 0x28
 8007df4:	2101      	movs	r1, #1
 8007df6:	4618      	mov	r0, r3
 8007df8:	f001 fee4 	bl	8009bc4 <RCCEx_PLL3_Config>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007e02:	e004      	b.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e0a:	e000      	b.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10a      	bne.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007e16:	4b96      	ldr	r3, [pc, #600]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e1a:	f023 0107 	bic.w	r1, r3, #7
 8007e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e24:	4a92      	ldr	r2, [pc, #584]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e26:	430b      	orrs	r3, r1
 8007e28:	6553      	str	r3, [r2, #84]	; 0x54
 8007e2a:	e003      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3c:	f002 0304 	and.w	r3, r2, #4
 8007e40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e44:	2300      	movs	r3, #0
 8007e46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e4a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007e4e:	460b      	mov	r3, r1
 8007e50:	4313      	orrs	r3, r2
 8007e52:	d044      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e5c:	2b05      	cmp	r3, #5
 8007e5e:	d825      	bhi.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007e60:	a201      	add	r2, pc, #4	; (adr r2, 8007e68 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e66:	bf00      	nop
 8007e68:	08007eb5 	.word	0x08007eb5
 8007e6c:	08007e81 	.word	0x08007e81
 8007e70:	08007e97 	.word	0x08007e97
 8007e74:	08007eb5 	.word	0x08007eb5
 8007e78:	08007eb5 	.word	0x08007eb5
 8007e7c:	08007eb5 	.word	0x08007eb5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e84:	3308      	adds	r3, #8
 8007e86:	2101      	movs	r1, #1
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f001 fde9 	bl	8009a60 <RCCEx_PLL2_Config>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e94:	e00f      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e9a:	3328      	adds	r3, #40	; 0x28
 8007e9c:	2101      	movs	r1, #1
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f001 fe90 	bl	8009bc4 <RCCEx_PLL3_Config>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007eaa:	e004      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007eb2:	e000      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10b      	bne.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ebe:	4b6c      	ldr	r3, [pc, #432]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ec2:	f023 0107 	bic.w	r1, r3, #7
 8007ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ece:	4a68      	ldr	r2, [pc, #416]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ed0:	430b      	orrs	r3, r1
 8007ed2:	6593      	str	r3, [r2, #88]	; 0x58
 8007ed4:	e003      	b.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ed6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007eda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee6:	f002 0320 	and.w	r3, r2, #32
 8007eea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ef4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007ef8:	460b      	mov	r3, r1
 8007efa:	4313      	orrs	r3, r2
 8007efc:	d055      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f0a:	d033      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f10:	d82c      	bhi.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f16:	d02f      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f1c:	d826      	bhi.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f22:	d02b      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007f24:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f28:	d820      	bhi.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f2e:	d012      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007f30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f34:	d81a      	bhi.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d022      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007f3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f3e:	d115      	bne.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f44:	3308      	adds	r3, #8
 8007f46:	2100      	movs	r1, #0
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f001 fd89 	bl	8009a60 <RCCEx_PLL2_Config>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007f54:	e015      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f5a:	3328      	adds	r3, #40	; 0x28
 8007f5c:	2102      	movs	r1, #2
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f001 fe30 	bl	8009bc4 <RCCEx_PLL3_Config>
 8007f64:	4603      	mov	r3, r0
 8007f66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007f6a:	e00a      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f72:	e006      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f74:	bf00      	nop
 8007f76:	e004      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f78:	bf00      	nop
 8007f7a:	e002      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f7c:	bf00      	nop
 8007f7e:	e000      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d10b      	bne.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f8a:	4b39      	ldr	r3, [pc, #228]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f8e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f9a:	4a35      	ldr	r2, [pc, #212]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f9c:	430b      	orrs	r3, r1
 8007f9e:	6553      	str	r3, [r2, #84]	; 0x54
 8007fa0:	e003      	b.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fa6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007fb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007fba:	2300      	movs	r3, #0
 8007fbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007fc0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	d058      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007fd2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007fd6:	d033      	beq.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007fd8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007fdc:	d82c      	bhi.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fe2:	d02f      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fe8:	d826      	bhi.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007fea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fee:	d02b      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007ff0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ff4:	d820      	bhi.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007ff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ffa:	d012      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007ffc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008000:	d81a      	bhi.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008002:	2b00      	cmp	r3, #0
 8008004:	d022      	beq.n	800804c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800800a:	d115      	bne.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800800c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008010:	3308      	adds	r3, #8
 8008012:	2100      	movs	r1, #0
 8008014:	4618      	mov	r0, r3
 8008016:	f001 fd23 	bl	8009a60 <RCCEx_PLL2_Config>
 800801a:	4603      	mov	r3, r0
 800801c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008020:	e015      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008026:	3328      	adds	r3, #40	; 0x28
 8008028:	2102      	movs	r1, #2
 800802a:	4618      	mov	r0, r3
 800802c:	f001 fdca 	bl	8009bc4 <RCCEx_PLL3_Config>
 8008030:	4603      	mov	r3, r0
 8008032:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008036:	e00a      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800803e:	e006      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008040:	bf00      	nop
 8008042:	e004      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008044:	bf00      	nop
 8008046:	e002      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008048:	bf00      	nop
 800804a:	e000      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800804c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800804e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10e      	bne.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008056:	4b06      	ldr	r3, [pc, #24]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800805a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800805e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008062:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008066:	4a02      	ldr	r2, [pc, #8]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008068:	430b      	orrs	r3, r1
 800806a:	6593      	str	r3, [r2, #88]	; 0x58
 800806c:	e006      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800806e:	bf00      	nop
 8008070:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008074:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008078:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800807c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008084:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008088:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800808c:	2300      	movs	r3, #0
 800808e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008092:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008096:	460b      	mov	r3, r1
 8008098:	4313      	orrs	r3, r2
 800809a:	d055      	beq.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800809c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80080a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80080a8:	d033      	beq.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80080aa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80080ae:	d82c      	bhi.n	800810a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80080b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080b4:	d02f      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80080b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080ba:	d826      	bhi.n	800810a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80080bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80080c0:	d02b      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80080c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80080c6:	d820      	bhi.n	800810a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80080c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080cc:	d012      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80080ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080d2:	d81a      	bhi.n	800810a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d022      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80080d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080dc:	d115      	bne.n	800810a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080e2:	3308      	adds	r3, #8
 80080e4:	2100      	movs	r1, #0
 80080e6:	4618      	mov	r0, r3
 80080e8:	f001 fcba 	bl	8009a60 <RCCEx_PLL2_Config>
 80080ec:	4603      	mov	r3, r0
 80080ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80080f2:	e015      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080f8:	3328      	adds	r3, #40	; 0x28
 80080fa:	2102      	movs	r1, #2
 80080fc:	4618      	mov	r0, r3
 80080fe:	f001 fd61 	bl	8009bc4 <RCCEx_PLL3_Config>
 8008102:	4603      	mov	r3, r0
 8008104:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008108:	e00a      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008110:	e006      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008112:	bf00      	nop
 8008114:	e004      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008116:	bf00      	nop
 8008118:	e002      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800811a:	bf00      	nop
 800811c:	e000      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800811e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008120:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10b      	bne.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008128:	4ba1      	ldr	r3, [pc, #644]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800812a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800812c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008134:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008138:	4a9d      	ldr	r2, [pc, #628]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800813a:	430b      	orrs	r3, r1
 800813c:	6593      	str	r3, [r2, #88]	; 0x58
 800813e:	e003      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008140:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008144:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800814c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008150:	f002 0308 	and.w	r3, r2, #8
 8008154:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008158:	2300      	movs	r3, #0
 800815a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800815e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008162:	460b      	mov	r3, r1
 8008164:	4313      	orrs	r3, r2
 8008166:	d01e      	beq.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800816c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008174:	d10c      	bne.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800817a:	3328      	adds	r3, #40	; 0x28
 800817c:	2102      	movs	r1, #2
 800817e:	4618      	mov	r0, r3
 8008180:	f001 fd20 	bl	8009bc4 <RCCEx_PLL3_Config>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d002      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008190:	4b87      	ldr	r3, [pc, #540]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008194:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800819c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081a0:	4a83      	ldr	r2, [pc, #524]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081a2:	430b      	orrs	r3, r1
 80081a4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80081a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ae:	f002 0310 	and.w	r3, r2, #16
 80081b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80081b6:	2300      	movs	r3, #0
 80081b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80081bc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80081c0:	460b      	mov	r3, r1
 80081c2:	4313      	orrs	r3, r2
 80081c4:	d01e      	beq.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80081c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80081ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081d2:	d10c      	bne.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80081d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081d8:	3328      	adds	r3, #40	; 0x28
 80081da:	2102      	movs	r1, #2
 80081dc:	4618      	mov	r0, r3
 80081de:	f001 fcf1 	bl	8009bc4 <RCCEx_PLL3_Config>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d002      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80081ee:	4b70      	ldr	r3, [pc, #448]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80081f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80081fe:	4a6c      	ldr	r2, [pc, #432]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008200:	430b      	orrs	r3, r1
 8008202:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008210:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008214:	2300      	movs	r3, #0
 8008216:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800821a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800821e:	460b      	mov	r3, r1
 8008220:	4313      	orrs	r3, r2
 8008222:	d03e      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008228:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800822c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008230:	d022      	beq.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008232:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008236:	d81b      	bhi.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800823c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008240:	d00b      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008242:	e015      	b.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008248:	3308      	adds	r3, #8
 800824a:	2100      	movs	r1, #0
 800824c:	4618      	mov	r0, r3
 800824e:	f001 fc07 	bl	8009a60 <RCCEx_PLL2_Config>
 8008252:	4603      	mov	r3, r0
 8008254:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008258:	e00f      	b.n	800827a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800825a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800825e:	3328      	adds	r3, #40	; 0x28
 8008260:	2102      	movs	r1, #2
 8008262:	4618      	mov	r0, r3
 8008264:	f001 fcae 	bl	8009bc4 <RCCEx_PLL3_Config>
 8008268:	4603      	mov	r3, r0
 800826a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800826e:	e004      	b.n	800827a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008276:	e000      	b.n	800827a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800827a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800827e:	2b00      	cmp	r3, #0
 8008280:	d10b      	bne.n	800829a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008282:	4b4b      	ldr	r3, [pc, #300]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008286:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800828a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800828e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008292:	4a47      	ldr	r2, [pc, #284]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008294:	430b      	orrs	r3, r1
 8008296:	6593      	str	r3, [r2, #88]	; 0x58
 8008298:	e003      	b.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800829a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800829e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80082a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082aa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80082ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80082b0:	2300      	movs	r3, #0
 80082b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80082b4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80082b8:	460b      	mov	r3, r1
 80082ba:	4313      	orrs	r3, r2
 80082bc:	d03b      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80082be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80082ca:	d01f      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80082cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80082d0:	d818      	bhi.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80082d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082d6:	d003      	beq.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80082d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082dc:	d007      	beq.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80082de:	e011      	b.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082e0:	4b33      	ldr	r3, [pc, #204]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e4:	4a32      	ldr	r2, [pc, #200]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80082ec:	e00f      	b.n	800830e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082f2:	3328      	adds	r3, #40	; 0x28
 80082f4:	2101      	movs	r1, #1
 80082f6:	4618      	mov	r0, r3
 80082f8:	f001 fc64 	bl	8009bc4 <RCCEx_PLL3_Config>
 80082fc:	4603      	mov	r3, r0
 80082fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008302:	e004      	b.n	800830e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800830a:	e000      	b.n	800830e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800830c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800830e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008312:	2b00      	cmp	r3, #0
 8008314:	d10b      	bne.n	800832e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008316:	4b26      	ldr	r3, [pc, #152]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800831a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800831e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008326:	4a22      	ldr	r2, [pc, #136]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008328:	430b      	orrs	r3, r1
 800832a:	6553      	str	r3, [r2, #84]	; 0x54
 800832c:	e003      	b.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800832e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008332:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800833a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008342:	673b      	str	r3, [r7, #112]	; 0x70
 8008344:	2300      	movs	r3, #0
 8008346:	677b      	str	r3, [r7, #116]	; 0x74
 8008348:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800834c:	460b      	mov	r3, r1
 800834e:	4313      	orrs	r3, r2
 8008350:	d034      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008358:	2b00      	cmp	r3, #0
 800835a:	d003      	beq.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800835c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008360:	d007      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008362:	e011      	b.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008364:	4b12      	ldr	r3, [pc, #72]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008368:	4a11      	ldr	r2, [pc, #68]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800836a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800836e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008370:	e00e      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008376:	3308      	adds	r3, #8
 8008378:	2102      	movs	r1, #2
 800837a:	4618      	mov	r0, r3
 800837c:	f001 fb70 	bl	8009a60 <RCCEx_PLL2_Config>
 8008380:	4603      	mov	r3, r0
 8008382:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008386:	e003      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800838e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008390:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10d      	bne.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008398:	4b05      	ldr	r3, [pc, #20]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800839a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800839c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80083a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083a6:	4a02      	ldr	r2, [pc, #8]	; (80083b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083a8:	430b      	orrs	r3, r1
 80083aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80083ac:	e006      	b.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80083ae:	bf00      	nop
 80083b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80083bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80083c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80083ca:	2300      	movs	r3, #0
 80083cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083ce:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80083d2:	460b      	mov	r3, r1
 80083d4:	4313      	orrs	r3, r2
 80083d6:	d00c      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80083d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083dc:	3328      	adds	r3, #40	; 0x28
 80083de:	2102      	movs	r1, #2
 80083e0:	4618      	mov	r0, r3
 80083e2:	f001 fbef 	bl	8009bc4 <RCCEx_PLL3_Config>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d002      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80083f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80083fe:	663b      	str	r3, [r7, #96]	; 0x60
 8008400:	2300      	movs	r3, #0
 8008402:	667b      	str	r3, [r7, #100]	; 0x64
 8008404:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008408:	460b      	mov	r3, r1
 800840a:	4313      	orrs	r3, r2
 800840c:	d038      	beq.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800840e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008416:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800841a:	d018      	beq.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800841c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008420:	d811      	bhi.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008426:	d014      	beq.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800842c:	d80b      	bhi.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800842e:	2b00      	cmp	r3, #0
 8008430:	d011      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008436:	d106      	bne.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008438:	4bc3      	ldr	r3, [pc, #780]	; (8008748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800843a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843c:	4ac2      	ldr	r2, [pc, #776]	; (8008748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800843e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008442:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008444:	e008      	b.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800844c:	e004      	b.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800844e:	bf00      	nop
 8008450:	e002      	b.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008452:	bf00      	nop
 8008454:	e000      	b.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008456:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008458:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800845c:	2b00      	cmp	r3, #0
 800845e:	d10b      	bne.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008460:	4bb9      	ldr	r3, [pc, #740]	; (8008748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008464:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800846c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008470:	4ab5      	ldr	r2, [pc, #724]	; (8008748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008472:	430b      	orrs	r3, r1
 8008474:	6553      	str	r3, [r2, #84]	; 0x54
 8008476:	e003      	b.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008478:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800847c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008488:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800848c:	65bb      	str	r3, [r7, #88]	; 0x58
 800848e:	2300      	movs	r3, #0
 8008490:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008492:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008496:	460b      	mov	r3, r1
 8008498:	4313      	orrs	r3, r2
 800849a:	d009      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800849c:	4baa      	ldr	r3, [pc, #680]	; (8008748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800849e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80084a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084aa:	4aa7      	ldr	r2, [pc, #668]	; (8008748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084ac:	430b      	orrs	r3, r1
 80084ae:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80084b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80084bc:	653b      	str	r3, [r7, #80]	; 0x50
 80084be:	2300      	movs	r3, #0
 80084c0:	657b      	str	r3, [r7, #84]	; 0x54
 80084c2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80084c6:	460b      	mov	r3, r1
 80084c8:	4313      	orrs	r3, r2
 80084ca:	d00a      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80084cc:	4b9e      	ldr	r3, [pc, #632]	; (8008748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80084d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80084dc:	4a9a      	ldr	r2, [pc, #616]	; (8008748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084de:	430b      	orrs	r3, r1
 80084e0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80084e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ea:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80084ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80084f0:	2300      	movs	r3, #0
 80084f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084f4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80084f8:	460b      	mov	r3, r1
 80084fa:	4313      	orrs	r3, r2
 80084fc:	d009      	beq.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80084fe:	4b92      	ldr	r3, [pc, #584]	; (8008748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008502:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800850a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800850c:	4a8e      	ldr	r2, [pc, #568]	; (8008748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800850e:	430b      	orrs	r3, r1
 8008510:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800851e:	643b      	str	r3, [r7, #64]	; 0x40
 8008520:	2300      	movs	r3, #0
 8008522:	647b      	str	r3, [r7, #68]	; 0x44
 8008524:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008528:	460b      	mov	r3, r1
 800852a:	4313      	orrs	r3, r2
 800852c:	d00e      	beq.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800852e:	4b86      	ldr	r3, [pc, #536]	; (8008748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	4a85      	ldr	r2, [pc, #532]	; (8008748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008534:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008538:	6113      	str	r3, [r2, #16]
 800853a:	4b83      	ldr	r3, [pc, #524]	; (8008748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800853c:	6919      	ldr	r1, [r3, #16]
 800853e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008542:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008546:	4a80      	ldr	r2, [pc, #512]	; (8008748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008548:	430b      	orrs	r3, r1
 800854a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800854c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008554:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008558:	63bb      	str	r3, [r7, #56]	; 0x38
 800855a:	2300      	movs	r3, #0
 800855c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800855e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008562:	460b      	mov	r3, r1
 8008564:	4313      	orrs	r3, r2
 8008566:	d009      	beq.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008568:	4b77      	ldr	r3, [pc, #476]	; (8008748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800856a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800856c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008576:	4a74      	ldr	r2, [pc, #464]	; (8008748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008578:	430b      	orrs	r3, r1
 800857a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800857c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008584:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008588:	633b      	str	r3, [r7, #48]	; 0x30
 800858a:	2300      	movs	r3, #0
 800858c:	637b      	str	r3, [r7, #52]	; 0x34
 800858e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008592:	460b      	mov	r3, r1
 8008594:	4313      	orrs	r3, r2
 8008596:	d00a      	beq.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008598:	4b6b      	ldr	r3, [pc, #428]	; (8008748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800859a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800859c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80085a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085a8:	4a67      	ldr	r2, [pc, #412]	; (8008748 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085aa:	430b      	orrs	r3, r1
 80085ac:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80085ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b6:	2100      	movs	r1, #0
 80085b8:	62b9      	str	r1, [r7, #40]	; 0x28
 80085ba:	f003 0301 	and.w	r3, r3, #1
 80085be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085c0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80085c4:	460b      	mov	r3, r1
 80085c6:	4313      	orrs	r3, r2
 80085c8:	d011      	beq.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ce:	3308      	adds	r3, #8
 80085d0:	2100      	movs	r1, #0
 80085d2:	4618      	mov	r0, r3
 80085d4:	f001 fa44 	bl	8009a60 <RCCEx_PLL2_Config>
 80085d8:	4603      	mov	r3, r0
 80085da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80085de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d003      	beq.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80085ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f6:	2100      	movs	r1, #0
 80085f8:	6239      	str	r1, [r7, #32]
 80085fa:	f003 0302 	and.w	r3, r3, #2
 80085fe:	627b      	str	r3, [r7, #36]	; 0x24
 8008600:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008604:	460b      	mov	r3, r1
 8008606:	4313      	orrs	r3, r2
 8008608:	d011      	beq.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800860a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800860e:	3308      	adds	r3, #8
 8008610:	2101      	movs	r1, #1
 8008612:	4618      	mov	r0, r3
 8008614:	f001 fa24 	bl	8009a60 <RCCEx_PLL2_Config>
 8008618:	4603      	mov	r3, r0
 800861a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800861e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008622:	2b00      	cmp	r3, #0
 8008624:	d003      	beq.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008626:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800862a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800862e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008636:	2100      	movs	r1, #0
 8008638:	61b9      	str	r1, [r7, #24]
 800863a:	f003 0304 	and.w	r3, r3, #4
 800863e:	61fb      	str	r3, [r7, #28]
 8008640:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008644:	460b      	mov	r3, r1
 8008646:	4313      	orrs	r3, r2
 8008648:	d011      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800864a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800864e:	3308      	adds	r3, #8
 8008650:	2102      	movs	r1, #2
 8008652:	4618      	mov	r0, r3
 8008654:	f001 fa04 	bl	8009a60 <RCCEx_PLL2_Config>
 8008658:	4603      	mov	r3, r0
 800865a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800865e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008662:	2b00      	cmp	r3, #0
 8008664:	d003      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008666:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800866a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800866e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008676:	2100      	movs	r1, #0
 8008678:	6139      	str	r1, [r7, #16]
 800867a:	f003 0308 	and.w	r3, r3, #8
 800867e:	617b      	str	r3, [r7, #20]
 8008680:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008684:	460b      	mov	r3, r1
 8008686:	4313      	orrs	r3, r2
 8008688:	d011      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800868a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800868e:	3328      	adds	r3, #40	; 0x28
 8008690:	2100      	movs	r1, #0
 8008692:	4618      	mov	r0, r3
 8008694:	f001 fa96 	bl	8009bc4 <RCCEx_PLL3_Config>
 8008698:	4603      	mov	r3, r0
 800869a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800869e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d003      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80086ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b6:	2100      	movs	r1, #0
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	f003 0310 	and.w	r3, r3, #16
 80086be:	60fb      	str	r3, [r7, #12]
 80086c0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80086c4:	460b      	mov	r3, r1
 80086c6:	4313      	orrs	r3, r2
 80086c8:	d011      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086ce:	3328      	adds	r3, #40	; 0x28
 80086d0:	2101      	movs	r1, #1
 80086d2:	4618      	mov	r0, r3
 80086d4:	f001 fa76 	bl	8009bc4 <RCCEx_PLL3_Config>
 80086d8:	4603      	mov	r3, r0
 80086da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80086de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d003      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80086ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f6:	2100      	movs	r1, #0
 80086f8:	6039      	str	r1, [r7, #0]
 80086fa:	f003 0320 	and.w	r3, r3, #32
 80086fe:	607b      	str	r3, [r7, #4]
 8008700:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008704:	460b      	mov	r3, r1
 8008706:	4313      	orrs	r3, r2
 8008708:	d011      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800870a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800870e:	3328      	adds	r3, #40	; 0x28
 8008710:	2102      	movs	r1, #2
 8008712:	4618      	mov	r0, r3
 8008714:	f001 fa56 	bl	8009bc4 <RCCEx_PLL3_Config>
 8008718:	4603      	mov	r3, r0
 800871a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800871e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008722:	2b00      	cmp	r3, #0
 8008724:	d003      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008726:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800872a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800872e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8008732:	2b00      	cmp	r3, #0
 8008734:	d101      	bne.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008736:	2300      	movs	r3, #0
 8008738:	e000      	b.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
}
 800873c:	4618      	mov	r0, r3
 800873e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008742:	46bd      	mov	sp, r7
 8008744:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008748:	58024400 	.word	0x58024400

0800874c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b090      	sub	sp, #64	; 0x40
 8008750:	af00      	add	r7, sp, #0
 8008752:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008756:	e9d7 2300 	ldrd	r2, r3, [r7]
 800875a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800875e:	430b      	orrs	r3, r1
 8008760:	f040 8094 	bne.w	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008764:	4b9e      	ldr	r3, [pc, #632]	; (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008768:	f003 0307 	and.w	r3, r3, #7
 800876c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800876e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008770:	2b04      	cmp	r3, #4
 8008772:	f200 8087 	bhi.w	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008776:	a201      	add	r2, pc, #4	; (adr r2, 800877c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877c:	08008791 	.word	0x08008791
 8008780:	080087b9 	.word	0x080087b9
 8008784:	080087e1 	.word	0x080087e1
 8008788:	0800887d 	.word	0x0800887d
 800878c:	08008809 	.word	0x08008809
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008790:	4b93      	ldr	r3, [pc, #588]	; (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008798:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800879c:	d108      	bne.n	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800879e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087a2:	4618      	mov	r0, r3
 80087a4:	f001 f80a 	bl	80097bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087ac:	f000 bd3f 	b.w	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 80087b0:	2300      	movs	r3, #0
 80087b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087b4:	f000 bd3b 	b.w	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087b8:	4b89      	ldr	r3, [pc, #548]	; (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087c4:	d108      	bne.n	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087c6:	f107 0318 	add.w	r3, r7, #24
 80087ca:	4618      	mov	r0, r3
 80087cc:	f000 fd4e 	bl	800926c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087d4:	f000 bd2b 	b.w	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 80087d8:	2300      	movs	r3, #0
 80087da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087dc:	f000 bd27 	b.w	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087e0:	4b7f      	ldr	r3, [pc, #508]	; (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087ec:	d108      	bne.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087ee:	f107 030c 	add.w	r3, r7, #12
 80087f2:	4618      	mov	r0, r3
 80087f4:	f000 fe8e 	bl	8009514 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087fc:	f000 bd17 	b.w	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008800:	2300      	movs	r3, #0
 8008802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008804:	f000 bd13 	b.w	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008808:	4b75      	ldr	r3, [pc, #468]	; (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800880a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800880c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008810:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008812:	4b73      	ldr	r3, [pc, #460]	; (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 0304 	and.w	r3, r3, #4
 800881a:	2b04      	cmp	r3, #4
 800881c:	d10c      	bne.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800881e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008820:	2b00      	cmp	r3, #0
 8008822:	d109      	bne.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008824:	4b6e      	ldr	r3, [pc, #440]	; (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	08db      	lsrs	r3, r3, #3
 800882a:	f003 0303 	and.w	r3, r3, #3
 800882e:	4a6d      	ldr	r2, [pc, #436]	; (80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008830:	fa22 f303 	lsr.w	r3, r2, r3
 8008834:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008836:	e01f      	b.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008838:	4b69      	ldr	r3, [pc, #420]	; (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008844:	d106      	bne.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008848:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800884c:	d102      	bne.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800884e:	4b66      	ldr	r3, [pc, #408]	; (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008850:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008852:	e011      	b.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008854:	4b62      	ldr	r3, [pc, #392]	; (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800885c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008860:	d106      	bne.n	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008868:	d102      	bne.n	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800886a:	4b60      	ldr	r3, [pc, #384]	; (80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800886c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800886e:	e003      	b.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008870:	2300      	movs	r3, #0
 8008872:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008874:	f000 bcdb 	b.w	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8008878:	f000 bcd9 	b.w	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800887c:	4b5b      	ldr	r3, [pc, #364]	; (80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800887e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008880:	f000 bcd5 	b.w	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      default :
      {
        frequency = 0;
 8008884:	2300      	movs	r3, #0
 8008886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008888:	f000 bcd1 	b.w	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800888c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008890:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008894:	430b      	orrs	r3, r1
 8008896:	f040 80ab 	bne.w	80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800889a:	4b51      	ldr	r3, [pc, #324]	; (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800889c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800889e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80088a2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80088a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088aa:	d056      	beq.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80088ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088b2:	f200 8090 	bhi.w	80089d6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80088b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b8:	2bc0      	cmp	r3, #192	; 0xc0
 80088ba:	f000 8088 	beq.w	80089ce <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80088be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c0:	2bc0      	cmp	r3, #192	; 0xc0
 80088c2:	f200 8088 	bhi.w	80089d6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80088c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c8:	2b80      	cmp	r3, #128	; 0x80
 80088ca:	d032      	beq.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80088cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ce:	2b80      	cmp	r3, #128	; 0x80
 80088d0:	f200 8081 	bhi.w	80089d6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80088d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d003      	beq.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80088da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088dc:	2b40      	cmp	r3, #64	; 0x40
 80088de:	d014      	beq.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80088e0:	e079      	b.n	80089d6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088e2:	4b3f      	ldr	r3, [pc, #252]	; (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088ee:	d108      	bne.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088f4:	4618      	mov	r0, r3
 80088f6:	f000 ff61 	bl	80097bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088fe:	f000 bc96 	b.w	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008902:	2300      	movs	r3, #0
 8008904:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008906:	f000 bc92 	b.w	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800890a:	4b35      	ldr	r3, [pc, #212]	; (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008912:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008916:	d108      	bne.n	800892a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008918:	f107 0318 	add.w	r3, r7, #24
 800891c:	4618      	mov	r0, r3
 800891e:	f000 fca5 	bl	800926c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008926:	f000 bc82 	b.w	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 800892a:	2300      	movs	r3, #0
 800892c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800892e:	f000 bc7e 	b.w	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008932:	4b2b      	ldr	r3, [pc, #172]	; (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800893a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800893e:	d108      	bne.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008940:	f107 030c 	add.w	r3, r7, #12
 8008944:	4618      	mov	r0, r3
 8008946:	f000 fde5 	bl	8009514 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800894e:	f000 bc6e 	b.w	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008952:	2300      	movs	r3, #0
 8008954:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008956:	f000 bc6a 	b.w	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800895a:	4b21      	ldr	r3, [pc, #132]	; (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800895c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800895e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008962:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008964:	4b1e      	ldr	r3, [pc, #120]	; (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 0304 	and.w	r3, r3, #4
 800896c:	2b04      	cmp	r3, #4
 800896e:	d10c      	bne.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008972:	2b00      	cmp	r3, #0
 8008974:	d109      	bne.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008976:	4b1a      	ldr	r3, [pc, #104]	; (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	08db      	lsrs	r3, r3, #3
 800897c:	f003 0303 	and.w	r3, r3, #3
 8008980:	4a18      	ldr	r2, [pc, #96]	; (80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008982:	fa22 f303 	lsr.w	r3, r2, r3
 8008986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008988:	e01f      	b.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800898a:	4b15      	ldr	r3, [pc, #84]	; (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008996:	d106      	bne.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800899a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800899e:	d102      	bne.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80089a0:	4b11      	ldr	r3, [pc, #68]	; (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80089a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089a4:	e011      	b.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089a6:	4b0e      	ldr	r3, [pc, #56]	; (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089b2:	d106      	bne.n	80089c2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80089b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089ba:	d102      	bne.n	80089c2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80089bc:	4b0b      	ldr	r3, [pc, #44]	; (80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80089be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089c0:	e003      	b.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80089c2:	2300      	movs	r3, #0
 80089c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80089c6:	f000 bc32 	b.w	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 80089ca:	f000 bc30 	b.w	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80089ce:	4b07      	ldr	r3, [pc, #28]	; (80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80089d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089d2:	f000 bc2c 	b.w	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      default :
      {
        frequency = 0;
 80089d6:	2300      	movs	r3, #0
 80089d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089da:	f000 bc28 	b.w	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 80089de:	bf00      	nop
 80089e0:	58024400 	.word	0x58024400
 80089e4:	03d09000 	.word	0x03d09000
 80089e8:	003d0900 	.word	0x003d0900
 80089ec:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80089f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089f4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80089f8:	430b      	orrs	r3, r1
 80089fa:	f040 809c 	bne.w	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80089fe:	4b9e      	ldr	r3, [pc, #632]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a02:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008a06:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a0e:	d054      	beq.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 8008a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a16:	f200 808b 	bhi.w	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
 8008a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a20:	f000 8083 	beq.w	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
 8008a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a26:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a2a:	f200 8081 	bhi.w	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a34:	d02f      	beq.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8008a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a3c:	d878      	bhi.n	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
 8008a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d004      	beq.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8008a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a4a:	d012      	beq.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8008a4c:	e070      	b.n	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a4e:	4b8a      	ldr	r3, [pc, #552]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a5a:	d107      	bne.n	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a60:	4618      	mov	r0, r3
 8008a62:	f000 feab 	bl	80097bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a6a:	e3e0      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a70:	e3dd      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a72:	4b81      	ldr	r3, [pc, #516]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a7e:	d107      	bne.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a80:	f107 0318 	add.w	r3, r7, #24
 8008a84:	4618      	mov	r0, r3
 8008a86:	f000 fbf1 	bl	800926c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a8e:	e3ce      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008a90:	2300      	movs	r3, #0
 8008a92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a94:	e3cb      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a96:	4b78      	ldr	r3, [pc, #480]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008aa2:	d107      	bne.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008aa4:	f107 030c 	add.w	r3, r7, #12
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f000 fd33 	bl	8009514 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ab2:	e3bc      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ab8:	e3b9      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008aba:	4b6f      	ldr	r3, [pc, #444]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008abe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ac2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ac4:	4b6c      	ldr	r3, [pc, #432]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 0304 	and.w	r3, r3, #4
 8008acc:	2b04      	cmp	r3, #4
 8008ace:	d10c      	bne.n	8008aea <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8008ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d109      	bne.n	8008aea <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ad6:	4b68      	ldr	r3, [pc, #416]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	08db      	lsrs	r3, r3, #3
 8008adc:	f003 0303 	and.w	r3, r3, #3
 8008ae0:	4a66      	ldr	r2, [pc, #408]	; (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ae8:	e01e      	b.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008aea:	4b63      	ldr	r3, [pc, #396]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008af6:	d106      	bne.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8008af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008afa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008afe:	d102      	bne.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008b00:	4b5f      	ldr	r3, [pc, #380]	; (8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b04:	e010      	b.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b06:	4b5c      	ldr	r3, [pc, #368]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b12:	d106      	bne.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8008b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b1a:	d102      	bne.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b1c:	4b59      	ldr	r3, [pc, #356]	; (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b20:	e002      	b.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b22:	2300      	movs	r3, #0
 8008b24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008b26:	e382      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8008b28:	e381      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b2a:	4b56      	ldr	r3, [pc, #344]	; (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b2e:	e37e      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      default :
      {
        frequency = 0;
 8008b30:	2300      	movs	r3, #0
 8008b32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b34:	e37b      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008b36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b3a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008b3e:	430b      	orrs	r3, r1
 8008b40:	f040 80a5 	bne.w	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x542>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008b44:	4b4c      	ldr	r3, [pc, #304]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b48:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008b4c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b54:	d055      	beq.n	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 8008b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b5c:	f200 8094 	bhi.w	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
 8008b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b66:	f000 8084 	beq.w	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x526>
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b70:	f200 808a 	bhi.w	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
 8008b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b7a:	d030      	beq.n	8008bde <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8008b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b82:	f200 8081 	bhi.w	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
 8008b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d004      	beq.n	8008b96 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
 8008b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b92:	d012      	beq.n	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 8008b94:	e078      	b.n	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b96:	4b38      	ldr	r3, [pc, #224]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ba2:	d107      	bne.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f000 fe07 	bl	80097bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bb2:	e33c      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bb8:	e339      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bba:	4b2f      	ldr	r3, [pc, #188]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bc6:	d107      	bne.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bc8:	f107 0318 	add.w	r3, r7, #24
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f000 fb4d 	bl	800926c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bd6:	e32a      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bdc:	e327      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bde:	4b26      	ldr	r3, [pc, #152]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008be6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bea:	d107      	bne.n	8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bec:	f107 030c 	add.w	r3, r7, #12
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f000 fc8f 	bl	8009514 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bfa:	e318      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c00:	e315      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c02:	4b1d      	ldr	r3, [pc, #116]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c0a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c0c:	4b1a      	ldr	r3, [pc, #104]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 0304 	and.w	r3, r3, #4
 8008c14:	2b04      	cmp	r3, #4
 8008c16:	d10c      	bne.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8008c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d109      	bne.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c1e:	4b16      	ldr	r3, [pc, #88]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	08db      	lsrs	r3, r3, #3
 8008c24:	f003 0303 	and.w	r3, r3, #3
 8008c28:	4a14      	ldr	r2, [pc, #80]	; (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c30:	e01e      	b.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c32:	4b11      	ldr	r3, [pc, #68]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c3e:	d106      	bne.n	8008c4e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8008c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c46:	d102      	bne.n	8008c4e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c48:	4b0d      	ldr	r3, [pc, #52]	; (8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c4c:	e010      	b.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c4e:	4b0a      	ldr	r3, [pc, #40]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c5a:	d106      	bne.n	8008c6a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c62:	d102      	bne.n	8008c6a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c64:	4b07      	ldr	r3, [pc, #28]	; (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c68:	e002      	b.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008c6e:	e2de      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8008c70:	e2dd      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c72:	4b04      	ldr	r3, [pc, #16]	; (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008c74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c76:	e2da      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8008c78:	58024400 	.word	0x58024400
 8008c7c:	03d09000 	.word	0x03d09000
 8008c80:	003d0900 	.word	0x003d0900
 8008c84:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c8c:	e2cf      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008c8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c92:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8008c96:	430b      	orrs	r3, r1
 8008c98:	f040 809c 	bne.w	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008c9c:	4b93      	ldr	r3, [pc, #588]	; (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ca0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008ca4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cac:	d054      	beq.n	8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8008cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cb4:	f200 808b 	bhi.w	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8008cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008cbe:	f000 8083 	beq.w	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008cc8:	f200 8081 	bhi.w	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cd2:	d02f      	beq.n	8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8008cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cda:	d878      	bhi.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8008cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d004      	beq.n	8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8008ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ce8:	d012      	beq.n	8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8008cea:	e070      	b.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cec:	4b7f      	ldr	r3, [pc, #508]	; (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cf8:	d107      	bne.n	8008d0a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f000 fd5c 	bl	80097bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d08:	e291      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d0e:	e28e      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d10:	4b76      	ldr	r3, [pc, #472]	; (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d1c:	d107      	bne.n	8008d2e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d1e:	f107 0318 	add.w	r3, r7, #24
 8008d22:	4618      	mov	r0, r3
 8008d24:	f000 faa2 	bl	800926c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d28:	69bb      	ldr	r3, [r7, #24]
 8008d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d2c:	e27f      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d32:	e27c      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d34:	4b6d      	ldr	r3, [pc, #436]	; (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d40:	d107      	bne.n	8008d52 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d42:	f107 030c 	add.w	r3, r7, #12
 8008d46:	4618      	mov	r0, r3
 8008d48:	f000 fbe4 	bl	8009514 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d50:	e26d      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008d52:	2300      	movs	r3, #0
 8008d54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d56:	e26a      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d58:	4b64      	ldr	r3, [pc, #400]	; (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d60:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d62:	4b62      	ldr	r3, [pc, #392]	; (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 0304 	and.w	r3, r3, #4
 8008d6a:	2b04      	cmp	r3, #4
 8008d6c:	d10c      	bne.n	8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8008d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d109      	bne.n	8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d74:	4b5d      	ldr	r3, [pc, #372]	; (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	08db      	lsrs	r3, r3, #3
 8008d7a:	f003 0303 	and.w	r3, r3, #3
 8008d7e:	4a5c      	ldr	r2, [pc, #368]	; (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8008d80:	fa22 f303 	lsr.w	r3, r2, r3
 8008d84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d86:	e01e      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d88:	4b58      	ldr	r3, [pc, #352]	; (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d94:	d106      	bne.n	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8008d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d9c:	d102      	bne.n	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d9e:	4b55      	ldr	r3, [pc, #340]	; (8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008da0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008da2:	e010      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008da4:	4b51      	ldr	r3, [pc, #324]	; (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008db0:	d106      	bne.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
 8008db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008db8:	d102      	bne.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008dba:	4b4f      	ldr	r3, [pc, #316]	; (8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dbe:	e002      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008dc4:	e233      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8008dc6:	e232      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008dc8:	4b4b      	ldr	r3, [pc, #300]	; (8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008dca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dcc:	e22f      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      default :
      {
        frequency = 0;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dd2:	e22c      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008dd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dd8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008ddc:	430b      	orrs	r3, r1
 8008dde:	f040 808d 	bne.w	8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008de2:	4b42      	ldr	r3, [pc, #264]	; (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008de6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008dea:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008df2:	d06b      	beq.n	8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x780>
 8008df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008dfa:	d874      	bhi.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e02:	d056      	beq.n	8008eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
 8008e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e0a:	d86c      	bhi.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e12:	d03b      	beq.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x740>
 8008e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e1a:	d864      	bhi.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e22:	d021      	beq.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8008e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e2a:	d85c      	bhi.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d004      	beq.n	8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
 8008e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e38:	d004      	beq.n	8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008e3a:	e054      	b.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008e3c:	f7fe fa66 	bl	800730c <HAL_RCC_GetPCLK1Freq>
 8008e40:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e42:	e1f4      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e44:	4b29      	ldr	r3, [pc, #164]	; (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e50:	d107      	bne.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e52:	f107 0318 	add.w	r3, r7, #24
 8008e56:	4618      	mov	r0, r3
 8008e58:	f000 fa08 	bl	800926c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e60:	e1e5      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008e62:	2300      	movs	r3, #0
 8008e64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e66:	e1e2      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e68:	4b20      	ldr	r3, [pc, #128]	; (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e74:	d107      	bne.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e76:	f107 030c 	add.w	r3, r7, #12
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f000 fb4a 	bl	8009514 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e84:	e1d3      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008e86:	2300      	movs	r3, #0
 8008e88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e8a:	e1d0      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e8c:	4b17      	ldr	r3, [pc, #92]	; (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f003 0304 	and.w	r3, r3, #4
 8008e94:	2b04      	cmp	r3, #4
 8008e96:	d109      	bne.n	8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x760>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e98:	4b14      	ldr	r3, [pc, #80]	; (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	08db      	lsrs	r3, r3, #3
 8008e9e:	f003 0303 	and.w	r3, r3, #3
 8008ea2:	4a13      	ldr	r2, [pc, #76]	; (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8008ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eaa:	e1c0      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008eac:	2300      	movs	r3, #0
 8008eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eb0:	e1bd      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008eb2:	4b0e      	ldr	r3, [pc, #56]	; (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ebe:	d102      	bne.n	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
        {
          frequency = CSI_VALUE;
 8008ec0:	4b0c      	ldr	r3, [pc, #48]	; (8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ec4:	e1b3      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eca:	e1b0      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008ecc:	4b07      	ldr	r3, [pc, #28]	; (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ed4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ed8:	d102      	bne.n	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HSE_VALUE;
 8008eda:	4b07      	ldr	r3, [pc, #28]	; (8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008edc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ede:	e1a6      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ee4:	e1a3      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      default :
      {
        frequency = 0;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eea:	e1a0      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8008eec:	58024400 	.word	0x58024400
 8008ef0:	03d09000 	.word	0x03d09000
 8008ef4:	003d0900 	.word	0x003d0900
 8008ef8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008efc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f00:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008f04:	430b      	orrs	r3, r1
 8008f06:	d173      	bne.n	8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008f08:	4b9c      	ldr	r3, [pc, #624]	; (800917c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008f10:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f18:	d02f      	beq.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
 8008f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f20:	d863      	bhi.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8008f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d004      	beq.n	8008f32 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8008f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f2e:	d012      	beq.n	8008f56 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8008f30:	e05b      	b.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f32:	4b92      	ldr	r3, [pc, #584]	; (800917c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f3e:	d107      	bne.n	8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f40:	f107 0318 	add.w	r3, r7, #24
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 f991 	bl	800926c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f4e:	e16e      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008f50:	2300      	movs	r3, #0
 8008f52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f54:	e16b      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f56:	4b89      	ldr	r3, [pc, #548]	; (800917c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f62:	d107      	bne.n	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f64:	f107 030c 	add.w	r3, r7, #12
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f000 fad3 	bl	8009514 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f72:	e15c      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8008f74:	2300      	movs	r3, #0
 8008f76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f78:	e159      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f7a:	4b80      	ldr	r3, [pc, #512]	; (800917c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f82:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f84:	4b7d      	ldr	r3, [pc, #500]	; (800917c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 0304 	and.w	r3, r3, #4
 8008f8c:	2b04      	cmp	r3, #4
 8008f8e:	d10c      	bne.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8008f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d109      	bne.n	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f96:	4b79      	ldr	r3, [pc, #484]	; (800917c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	08db      	lsrs	r3, r3, #3
 8008f9c:	f003 0303 	and.w	r3, r3, #3
 8008fa0:	4a77      	ldr	r2, [pc, #476]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>)
 8008fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8008fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fa8:	e01e      	b.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008faa:	4b74      	ldr	r3, [pc, #464]	; (800917c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fb6:	d106      	bne.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
 8008fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fbe:	d102      	bne.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008fc0:	4b70      	ldr	r3, [pc, #448]	; (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>)
 8008fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fc4:	e010      	b.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fc6:	4b6d      	ldr	r3, [pc, #436]	; (800917c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fd2:	d106      	bne.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
 8008fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fda:	d102      	bne.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008fdc:	4b6a      	ldr	r3, [pc, #424]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fe0:	e002      	b.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008fe6:	e122      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8008fe8:	e121      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      default :
      {
        frequency = 0;
 8008fea:	2300      	movs	r3, #0
 8008fec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fee:	e11e      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ff4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008ff8:	430b      	orrs	r3, r1
 8008ffa:	d133      	bne.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008ffc:	4b5f      	ldr	r3, [pc, #380]	; (800917c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8008ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009004:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009008:	2b00      	cmp	r3, #0
 800900a:	d004      	beq.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800900c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009012:	d012      	beq.n	800903a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
 8009014:	e023      	b.n	800905e <HAL_RCCEx_GetPeriphCLKFreq+0x912>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009016:	4b59      	ldr	r3, [pc, #356]	; (800917c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800901e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009022:	d107      	bne.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009028:	4618      	mov	r0, r3
 800902a:	f000 fbc7 	bl	80097bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800902e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009030:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009032:	e0fc      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8009034:	2300      	movs	r3, #0
 8009036:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009038:	e0f9      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800903a:	4b50      	ldr	r3, [pc, #320]	; (800917c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009042:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009046:	d107      	bne.n	8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009048:	f107 0318 	add.w	r3, r7, #24
 800904c:	4618      	mov	r0, r3
 800904e:	f000 f90d 	bl	800926c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009052:	6a3b      	ldr	r3, [r7, #32]
 8009054:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009056:	e0ea      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8009058:	2300      	movs	r3, #0
 800905a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800905c:	e0e7      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }

      default :
      {
        frequency = 0;
 800905e:	2300      	movs	r3, #0
 8009060:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009062:	e0e4      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009064:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009068:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800906c:	430b      	orrs	r3, r1
 800906e:	f040 808d 	bne.w	800918c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009072:	4b42      	ldr	r3, [pc, #264]	; (800917c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8009074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009076:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800907a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800907c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009082:	d06b      	beq.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0xa10>
 8009084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009086:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800908a:	d874      	bhi.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800908c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009092:	d056      	beq.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8009094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800909a:	d86c      	bhi.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800909c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090a2:	d03b      	beq.n	800911c <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 80090a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090aa:	d864      	bhi.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 80090ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090b2:	d021      	beq.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 80090b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090ba:	d85c      	bhi.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 80090bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d004      	beq.n	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80090c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090c8:	d004      	beq.n	80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80090ca:	e054      	b.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80090cc:	f000 f8b8 	bl	8009240 <HAL_RCCEx_GetD3PCLK1Freq>
 80090d0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80090d2:	e0ac      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090d4:	4b29      	ldr	r3, [pc, #164]	; (800917c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090e0:	d107      	bne.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090e2:	f107 0318 	add.w	r3, r7, #24
 80090e6:	4618      	mov	r0, r3
 80090e8:	f000 f8c0 	bl	800926c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80090ec:	69fb      	ldr	r3, [r7, #28]
 80090ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090f0:	e09d      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 80090f2:	2300      	movs	r3, #0
 80090f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090f6:	e09a      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090f8:	4b20      	ldr	r3, [pc, #128]	; (800917c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009100:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009104:	d107      	bne.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x9ca>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009106:	f107 030c 	add.w	r3, r7, #12
 800910a:	4618      	mov	r0, r3
 800910c:	f000 fa02 	bl	8009514 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009114:	e08b      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8009116:	2300      	movs	r3, #0
 8009118:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800911a:	e088      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800911c:	4b17      	ldr	r3, [pc, #92]	; (800917c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 0304 	and.w	r3, r3, #4
 8009124:	2b04      	cmp	r3, #4
 8009126:	d109      	bne.n	800913c <HAL_RCCEx_GetPeriphCLKFreq+0x9f0>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009128:	4b14      	ldr	r3, [pc, #80]	; (800917c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	08db      	lsrs	r3, r3, #3
 800912e:	f003 0303 	and.w	r3, r3, #3
 8009132:	4a13      	ldr	r2, [pc, #76]	; (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>)
 8009134:	fa22 f303 	lsr.w	r3, r2, r3
 8009138:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800913a:	e078      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 800913c:	2300      	movs	r3, #0
 800913e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009140:	e075      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009142:	4b0e      	ldr	r3, [pc, #56]	; (800917c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800914a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800914e:	d102      	bne.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
        {
          frequency = CSI_VALUE;
 8009150:	4b0c      	ldr	r3, [pc, #48]	; (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>)
 8009152:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009154:	e06b      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8009156:	2300      	movs	r3, #0
 8009158:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800915a:	e068      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800915c:	4b07      	ldr	r3, [pc, #28]	; (800917c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009164:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009168:	d102      	bne.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
        {
          frequency = HSE_VALUE;
 800916a:	4b07      	ldr	r3, [pc, #28]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800916c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800916e:	e05e      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 8009170:	2300      	movs	r3, #0
 8009172:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009174:	e05b      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009176:	2300      	movs	r3, #0
 8009178:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800917a:	e058      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 800917c:	58024400 	.word	0x58024400
 8009180:	03d09000 	.word	0x03d09000
 8009184:	003d0900 	.word	0x003d0900
 8009188:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800918c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009190:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8009194:	430b      	orrs	r3, r1
 8009196:	d148      	bne.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009198:	4b27      	ldr	r3, [pc, #156]	; (8009238 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 800919a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800919c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80091a0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80091a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091a8:	d02a      	beq.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 80091aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091b0:	d838      	bhi.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
 80091b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d004      	beq.n	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 80091b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091be:	d00d      	beq.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0xa90>
 80091c0:	e030      	b.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80091c2:	4b1d      	ldr	r3, [pc, #116]	; (8009238 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091ce:	d102      	bne.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
        {
          frequency = HSE_VALUE;
 80091d0:	4b1a      	ldr	r3, [pc, #104]	; (800923c <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80091d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091d4:	e02b      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 80091d6:	2300      	movs	r3, #0
 80091d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091da:	e028      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091dc:	4b16      	ldr	r3, [pc, #88]	; (8009238 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091e8:	d107      	bne.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091ee:	4618      	mov	r0, r3
 80091f0:	f000 fae4 	bl	80097bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091f8:	e019      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 80091fa:	2300      	movs	r3, #0
 80091fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091fe:	e016      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009200:	4b0d      	ldr	r3, [pc, #52]	; (8009238 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009208:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800920c:	d107      	bne.n	800921e <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800920e:	f107 0318 	add.w	r3, r7, #24
 8009212:	4618      	mov	r0, r3
 8009214:	f000 f82a 	bl	800926c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800921c:	e007      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
          frequency = 0;
 800921e:	2300      	movs	r3, #0
 8009220:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009222:	e004      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
      default :
      {
        frequency = 0;
 8009224:	2300      	movs	r3, #0
 8009226:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009228:	e001      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
      }
    }
  }
  else
  {
    frequency = 0;
 800922a:	2300      	movs	r3, #0
 800922c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800922e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009230:	4618      	mov	r0, r3
 8009232:	3740      	adds	r7, #64	; 0x40
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	58024400 	.word	0x58024400
 800923c:	00bb8000 	.word	0x00bb8000

08009240 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009244:	f7fe f832 	bl	80072ac <HAL_RCC_GetHCLKFreq>
 8009248:	4602      	mov	r2, r0
 800924a:	4b06      	ldr	r3, [pc, #24]	; (8009264 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800924c:	6a1b      	ldr	r3, [r3, #32]
 800924e:	091b      	lsrs	r3, r3, #4
 8009250:	f003 0307 	and.w	r3, r3, #7
 8009254:	4904      	ldr	r1, [pc, #16]	; (8009268 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009256:	5ccb      	ldrb	r3, [r1, r3]
 8009258:	f003 031f 	and.w	r3, r3, #31
 800925c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009260:	4618      	mov	r0, r3
 8009262:	bd80      	pop	{r7, pc}
 8009264:	58024400 	.word	0x58024400
 8009268:	08010840 	.word	0x08010840

0800926c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800926c:	b480      	push	{r7}
 800926e:	b089      	sub	sp, #36	; 0x24
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009274:	4ba1      	ldr	r3, [pc, #644]	; (80094fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009278:	f003 0303 	and.w	r3, r3, #3
 800927c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800927e:	4b9f      	ldr	r3, [pc, #636]	; (80094fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009282:	0b1b      	lsrs	r3, r3, #12
 8009284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009288:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800928a:	4b9c      	ldr	r3, [pc, #624]	; (80094fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800928c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928e:	091b      	lsrs	r3, r3, #4
 8009290:	f003 0301 	and.w	r3, r3, #1
 8009294:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009296:	4b99      	ldr	r3, [pc, #612]	; (80094fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800929a:	08db      	lsrs	r3, r3, #3
 800929c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092a0:	693a      	ldr	r2, [r7, #16]
 80092a2:	fb02 f303 	mul.w	r3, r2, r3
 80092a6:	ee07 3a90 	vmov	s15, r3
 80092aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f000 8111 	beq.w	80094dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	2b02      	cmp	r3, #2
 80092be:	f000 8083 	beq.w	80093c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	f200 80a1 	bhi.w	800940c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d003      	beq.n	80092d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80092d0:	69bb      	ldr	r3, [r7, #24]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d056      	beq.n	8009384 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80092d6:	e099      	b.n	800940c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092d8:	4b88      	ldr	r3, [pc, #544]	; (80094fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f003 0320 	and.w	r3, r3, #32
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d02d      	beq.n	8009340 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092e4:	4b85      	ldr	r3, [pc, #532]	; (80094fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	08db      	lsrs	r3, r3, #3
 80092ea:	f003 0303 	and.w	r3, r3, #3
 80092ee:	4a84      	ldr	r2, [pc, #528]	; (8009500 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80092f0:	fa22 f303 	lsr.w	r3, r2, r3
 80092f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	ee07 3a90 	vmov	s15, r3
 80092fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	ee07 3a90 	vmov	s15, r3
 8009306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800930a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800930e:	4b7b      	ldr	r3, [pc, #492]	; (80094fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009316:	ee07 3a90 	vmov	s15, r3
 800931a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800931e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009322:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009504 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800932a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800932e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800933a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800933e:	e087      	b.n	8009450 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	ee07 3a90 	vmov	s15, r3
 8009346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800934a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009508 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800934e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009352:	4b6a      	ldr	r3, [pc, #424]	; (80094fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800935a:	ee07 3a90 	vmov	s15, r3
 800935e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009362:	ed97 6a03 	vldr	s12, [r7, #12]
 8009366:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009504 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800936a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800936e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800937a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800937e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009382:	e065      	b.n	8009450 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	ee07 3a90 	vmov	s15, r3
 800938a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800938e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800950c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009396:	4b59      	ldr	r3, [pc, #356]	; (80094fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800939a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800939e:	ee07 3a90 	vmov	s15, r3
 80093a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80093aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009504 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093c6:	e043      	b.n	8009450 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	ee07 3a90 	vmov	s15, r3
 80093ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009510 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80093d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093da:	4b48      	ldr	r3, [pc, #288]	; (80094fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093e2:	ee07 3a90 	vmov	s15, r3
 80093e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80093ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009504 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800940a:	e021      	b.n	8009450 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	ee07 3a90 	vmov	s15, r3
 8009412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009416:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800950c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800941a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800941e:	4b37      	ldr	r3, [pc, #220]	; (80094fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009426:	ee07 3a90 	vmov	s15, r3
 800942a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800942e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009432:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009504 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800943a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800943e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800944a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800944e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009450:	4b2a      	ldr	r3, [pc, #168]	; (80094fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009454:	0a5b      	lsrs	r3, r3, #9
 8009456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800945a:	ee07 3a90 	vmov	s15, r3
 800945e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009462:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009466:	ee37 7a87 	vadd.f32	s14, s15, s14
 800946a:	edd7 6a07 	vldr	s13, [r7, #28]
 800946e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009476:	ee17 2a90 	vmov	r2, s15
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800947e:	4b1f      	ldr	r3, [pc, #124]	; (80094fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009482:	0c1b      	lsrs	r3, r3, #16
 8009484:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009488:	ee07 3a90 	vmov	s15, r3
 800948c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009490:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009494:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009498:	edd7 6a07 	vldr	s13, [r7, #28]
 800949c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094a4:	ee17 2a90 	vmov	r2, s15
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80094ac:	4b13      	ldr	r3, [pc, #76]	; (80094fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b0:	0e1b      	lsrs	r3, r3, #24
 80094b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094b6:	ee07 3a90 	vmov	s15, r3
 80094ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80094ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094d2:	ee17 2a90 	vmov	r2, s15
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80094da:	e008      	b.n	80094ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	609a      	str	r2, [r3, #8]
}
 80094ee:	bf00      	nop
 80094f0:	3724      	adds	r7, #36	; 0x24
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	58024400 	.word	0x58024400
 8009500:	03d09000 	.word	0x03d09000
 8009504:	46000000 	.word	0x46000000
 8009508:	4c742400 	.word	0x4c742400
 800950c:	4a742400 	.word	0x4a742400
 8009510:	4b3b8000 	.word	0x4b3b8000

08009514 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009514:	b480      	push	{r7}
 8009516:	b089      	sub	sp, #36	; 0x24
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800951c:	4ba1      	ldr	r3, [pc, #644]	; (80097a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800951e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009520:	f003 0303 	and.w	r3, r3, #3
 8009524:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009526:	4b9f      	ldr	r3, [pc, #636]	; (80097a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800952a:	0d1b      	lsrs	r3, r3, #20
 800952c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009530:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009532:	4b9c      	ldr	r3, [pc, #624]	; (80097a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009536:	0a1b      	lsrs	r3, r3, #8
 8009538:	f003 0301 	and.w	r3, r3, #1
 800953c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800953e:	4b99      	ldr	r3, [pc, #612]	; (80097a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009542:	08db      	lsrs	r3, r3, #3
 8009544:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009548:	693a      	ldr	r2, [r7, #16]
 800954a:	fb02 f303 	mul.w	r3, r2, r3
 800954e:	ee07 3a90 	vmov	s15, r3
 8009552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009556:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	2b00      	cmp	r3, #0
 800955e:	f000 8111 	beq.w	8009784 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	2b02      	cmp	r3, #2
 8009566:	f000 8083 	beq.w	8009670 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	2b02      	cmp	r3, #2
 800956e:	f200 80a1 	bhi.w	80096b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d003      	beq.n	8009580 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	2b01      	cmp	r3, #1
 800957c:	d056      	beq.n	800962c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800957e:	e099      	b.n	80096b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009580:	4b88      	ldr	r3, [pc, #544]	; (80097a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f003 0320 	and.w	r3, r3, #32
 8009588:	2b00      	cmp	r3, #0
 800958a:	d02d      	beq.n	80095e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800958c:	4b85      	ldr	r3, [pc, #532]	; (80097a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	08db      	lsrs	r3, r3, #3
 8009592:	f003 0303 	and.w	r3, r3, #3
 8009596:	4a84      	ldr	r2, [pc, #528]	; (80097a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009598:	fa22 f303 	lsr.w	r3, r2, r3
 800959c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	ee07 3a90 	vmov	s15, r3
 80095a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	ee07 3a90 	vmov	s15, r3
 80095ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095b6:	4b7b      	ldr	r3, [pc, #492]	; (80097a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095be:	ee07 3a90 	vmov	s15, r3
 80095c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80095ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 80097ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80095e6:	e087      	b.n	80096f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	ee07 3a90 	vmov	s15, r3
 80095ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80097b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80095f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095fa:	4b6a      	ldr	r3, [pc, #424]	; (80097a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009602:	ee07 3a90 	vmov	s15, r3
 8009606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800960a:	ed97 6a03 	vldr	s12, [r7, #12]
 800960e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80097ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800961a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800961e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009626:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800962a:	e065      	b.n	80096f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	ee07 3a90 	vmov	s15, r3
 8009632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009636:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80097b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800963a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800963e:	4b59      	ldr	r3, [pc, #356]	; (80097a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009646:	ee07 3a90 	vmov	s15, r3
 800964a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800964e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009652:	eddf 5a56 	vldr	s11, [pc, #344]	; 80097ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800965a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800965e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800966a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800966e:	e043      	b.n	80096f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	ee07 3a90 	vmov	s15, r3
 8009676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800967a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80097b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800967e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009682:	4b48      	ldr	r3, [pc, #288]	; (80097a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800968a:	ee07 3a90 	vmov	s15, r3
 800968e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009692:	ed97 6a03 	vldr	s12, [r7, #12]
 8009696:	eddf 5a45 	vldr	s11, [pc, #276]	; 80097ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800969a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800969e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096b2:	e021      	b.n	80096f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	ee07 3a90 	vmov	s15, r3
 80096ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80097b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80096c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096c6:	4b37      	ldr	r3, [pc, #220]	; (80097a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ce:	ee07 3a90 	vmov	s15, r3
 80096d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80096da:	eddf 5a34 	vldr	s11, [pc, #208]	; 80097ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80096f8:	4b2a      	ldr	r3, [pc, #168]	; (80097a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fc:	0a5b      	lsrs	r3, r3, #9
 80096fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009702:	ee07 3a90 	vmov	s15, r3
 8009706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800970a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800970e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009712:	edd7 6a07 	vldr	s13, [r7, #28]
 8009716:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800971a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800971e:	ee17 2a90 	vmov	r2, s15
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009726:	4b1f      	ldr	r3, [pc, #124]	; (80097a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800972a:	0c1b      	lsrs	r3, r3, #16
 800972c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009730:	ee07 3a90 	vmov	s15, r3
 8009734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009738:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800973c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009740:	edd7 6a07 	vldr	s13, [r7, #28]
 8009744:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800974c:	ee17 2a90 	vmov	r2, s15
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009754:	4b13      	ldr	r3, [pc, #76]	; (80097a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009758:	0e1b      	lsrs	r3, r3, #24
 800975a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800975e:	ee07 3a90 	vmov	s15, r3
 8009762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009766:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800976a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800976e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009772:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009776:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800977a:	ee17 2a90 	vmov	r2, s15
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009782:	e008      	b.n	8009796 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	609a      	str	r2, [r3, #8]
}
 8009796:	bf00      	nop
 8009798:	3724      	adds	r7, #36	; 0x24
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	58024400 	.word	0x58024400
 80097a8:	03d09000 	.word	0x03d09000
 80097ac:	46000000 	.word	0x46000000
 80097b0:	4c742400 	.word	0x4c742400
 80097b4:	4a742400 	.word	0x4a742400
 80097b8:	4b3b8000 	.word	0x4b3b8000

080097bc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80097bc:	b480      	push	{r7}
 80097be:	b089      	sub	sp, #36	; 0x24
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097c4:	4ba0      	ldr	r3, [pc, #640]	; (8009a48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c8:	f003 0303 	and.w	r3, r3, #3
 80097cc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80097ce:	4b9e      	ldr	r3, [pc, #632]	; (8009a48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d2:	091b      	lsrs	r3, r3, #4
 80097d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097d8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80097da:	4b9b      	ldr	r3, [pc, #620]	; (8009a48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097de:	f003 0301 	and.w	r3, r3, #1
 80097e2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80097e4:	4b98      	ldr	r3, [pc, #608]	; (8009a48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097e8:	08db      	lsrs	r3, r3, #3
 80097ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097ee:	693a      	ldr	r2, [r7, #16]
 80097f0:	fb02 f303 	mul.w	r3, r2, r3
 80097f4:	ee07 3a90 	vmov	s15, r3
 80097f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097fc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	2b00      	cmp	r3, #0
 8009804:	f000 8111 	beq.w	8009a2a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	2b02      	cmp	r3, #2
 800980c:	f000 8083 	beq.w	8009916 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	2b02      	cmp	r3, #2
 8009814:	f200 80a1 	bhi.w	800995a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009818:	69bb      	ldr	r3, [r7, #24]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d003      	beq.n	8009826 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d056      	beq.n	80098d2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009824:	e099      	b.n	800995a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009826:	4b88      	ldr	r3, [pc, #544]	; (8009a48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f003 0320 	and.w	r3, r3, #32
 800982e:	2b00      	cmp	r3, #0
 8009830:	d02d      	beq.n	800988e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009832:	4b85      	ldr	r3, [pc, #532]	; (8009a48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	08db      	lsrs	r3, r3, #3
 8009838:	f003 0303 	and.w	r3, r3, #3
 800983c:	4a83      	ldr	r2, [pc, #524]	; (8009a4c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800983e:	fa22 f303 	lsr.w	r3, r2, r3
 8009842:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	ee07 3a90 	vmov	s15, r3
 800984a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	ee07 3a90 	vmov	s15, r3
 8009854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009858:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800985c:	4b7a      	ldr	r3, [pc, #488]	; (8009a48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800985e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009864:	ee07 3a90 	vmov	s15, r3
 8009868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800986c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009870:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009a50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009874:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009878:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800987c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009880:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009888:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800988c:	e087      	b.n	800999e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	ee07 3a90 	vmov	s15, r3
 8009894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009898:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009a54 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800989c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098a0:	4b69      	ldr	r3, [pc, #420]	; (8009a48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098a8:	ee07 3a90 	vmov	s15, r3
 80098ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80098b4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009a50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098d0:	e065      	b.n	800999e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	ee07 3a90 	vmov	s15, r3
 80098d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098dc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009a58 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80098e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098e4:	4b58      	ldr	r3, [pc, #352]	; (8009a48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ec:	ee07 3a90 	vmov	s15, r3
 80098f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80098f8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009a50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009900:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009904:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009908:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800990c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009910:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009914:	e043      	b.n	800999e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	ee07 3a90 	vmov	s15, r3
 800991c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009920:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009a5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009924:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009928:	4b47      	ldr	r3, [pc, #284]	; (8009a48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800992a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800992c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009930:	ee07 3a90 	vmov	s15, r3
 8009934:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009938:	ed97 6a03 	vldr	s12, [r7, #12]
 800993c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009a50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009940:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009944:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009948:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800994c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009954:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009958:	e021      	b.n	800999e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	ee07 3a90 	vmov	s15, r3
 8009960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009964:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009a54 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009968:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800996c:	4b36      	ldr	r3, [pc, #216]	; (8009a48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800996e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009974:	ee07 3a90 	vmov	s15, r3
 8009978:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800997c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009980:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009a50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009984:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009988:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800998c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009990:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009998:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800999c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800999e:	4b2a      	ldr	r3, [pc, #168]	; (8009a48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099a2:	0a5b      	lsrs	r3, r3, #9
 80099a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099a8:	ee07 3a90 	vmov	s15, r3
 80099ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80099bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099c4:	ee17 2a90 	vmov	r2, s15
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80099cc:	4b1e      	ldr	r3, [pc, #120]	; (8009a48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099d0:	0c1b      	lsrs	r3, r3, #16
 80099d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099d6:	ee07 3a90 	vmov	s15, r3
 80099da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80099ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099f2:	ee17 2a90 	vmov	r2, s15
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80099fa:	4b13      	ldr	r3, [pc, #76]	; (8009a48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099fe:	0e1b      	lsrs	r3, r3, #24
 8009a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a04:	ee07 3a90 	vmov	s15, r3
 8009a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a14:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a20:	ee17 2a90 	vmov	r2, s15
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009a28:	e008      	b.n	8009a3c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	609a      	str	r2, [r3, #8]
}
 8009a3c:	bf00      	nop
 8009a3e:	3724      	adds	r7, #36	; 0x24
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr
 8009a48:	58024400 	.word	0x58024400
 8009a4c:	03d09000 	.word	0x03d09000
 8009a50:	46000000 	.word	0x46000000
 8009a54:	4c742400 	.word	0x4c742400
 8009a58:	4a742400 	.word	0x4a742400
 8009a5c:	4b3b8000 	.word	0x4b3b8000

08009a60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a6e:	4b53      	ldr	r3, [pc, #332]	; (8009bbc <RCCEx_PLL2_Config+0x15c>)
 8009a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a72:	f003 0303 	and.w	r3, r3, #3
 8009a76:	2b03      	cmp	r3, #3
 8009a78:	d101      	bne.n	8009a7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e099      	b.n	8009bb2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009a7e:	4b4f      	ldr	r3, [pc, #316]	; (8009bbc <RCCEx_PLL2_Config+0x15c>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a4e      	ldr	r2, [pc, #312]	; (8009bbc <RCCEx_PLL2_Config+0x15c>)
 8009a84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009a88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a8a:	f7f8 f929 	bl	8001ce0 <HAL_GetTick>
 8009a8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a90:	e008      	b.n	8009aa4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009a92:	f7f8 f925 	bl	8001ce0 <HAL_GetTick>
 8009a96:	4602      	mov	r2, r0
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	1ad3      	subs	r3, r2, r3
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	d901      	bls.n	8009aa4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009aa0:	2303      	movs	r3, #3
 8009aa2:	e086      	b.n	8009bb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009aa4:	4b45      	ldr	r3, [pc, #276]	; (8009bbc <RCCEx_PLL2_Config+0x15c>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d1f0      	bne.n	8009a92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009ab0:	4b42      	ldr	r3, [pc, #264]	; (8009bbc <RCCEx_PLL2_Config+0x15c>)
 8009ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ab4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	031b      	lsls	r3, r3, #12
 8009abe:	493f      	ldr	r1, [pc, #252]	; (8009bbc <RCCEx_PLL2_Config+0x15c>)
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	628b      	str	r3, [r1, #40]	; 0x28
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	3b01      	subs	r3, #1
 8009aca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	025b      	lsls	r3, r3, #9
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	431a      	orrs	r2, r3
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	3b01      	subs	r3, #1
 8009ae0:	041b      	lsls	r3, r3, #16
 8009ae2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009ae6:	431a      	orrs	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	3b01      	subs	r3, #1
 8009aee:	061b      	lsls	r3, r3, #24
 8009af0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009af4:	4931      	ldr	r1, [pc, #196]	; (8009bbc <RCCEx_PLL2_Config+0x15c>)
 8009af6:	4313      	orrs	r3, r2
 8009af8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009afa:	4b30      	ldr	r3, [pc, #192]	; (8009bbc <RCCEx_PLL2_Config+0x15c>)
 8009afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009afe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	695b      	ldr	r3, [r3, #20]
 8009b06:	492d      	ldr	r1, [pc, #180]	; (8009bbc <RCCEx_PLL2_Config+0x15c>)
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009b0c:	4b2b      	ldr	r3, [pc, #172]	; (8009bbc <RCCEx_PLL2_Config+0x15c>)
 8009b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b10:	f023 0220 	bic.w	r2, r3, #32
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	699b      	ldr	r3, [r3, #24]
 8009b18:	4928      	ldr	r1, [pc, #160]	; (8009bbc <RCCEx_PLL2_Config+0x15c>)
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009b1e:	4b27      	ldr	r3, [pc, #156]	; (8009bbc <RCCEx_PLL2_Config+0x15c>)
 8009b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b22:	4a26      	ldr	r2, [pc, #152]	; (8009bbc <RCCEx_PLL2_Config+0x15c>)
 8009b24:	f023 0310 	bic.w	r3, r3, #16
 8009b28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009b2a:	4b24      	ldr	r3, [pc, #144]	; (8009bbc <RCCEx_PLL2_Config+0x15c>)
 8009b2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b2e:	4b24      	ldr	r3, [pc, #144]	; (8009bc0 <RCCEx_PLL2_Config+0x160>)
 8009b30:	4013      	ands	r3, r2
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	69d2      	ldr	r2, [r2, #28]
 8009b36:	00d2      	lsls	r2, r2, #3
 8009b38:	4920      	ldr	r1, [pc, #128]	; (8009bbc <RCCEx_PLL2_Config+0x15c>)
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009b3e:	4b1f      	ldr	r3, [pc, #124]	; (8009bbc <RCCEx_PLL2_Config+0x15c>)
 8009b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b42:	4a1e      	ldr	r2, [pc, #120]	; (8009bbc <RCCEx_PLL2_Config+0x15c>)
 8009b44:	f043 0310 	orr.w	r3, r3, #16
 8009b48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d106      	bne.n	8009b5e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009b50:	4b1a      	ldr	r3, [pc, #104]	; (8009bbc <RCCEx_PLL2_Config+0x15c>)
 8009b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b54:	4a19      	ldr	r2, [pc, #100]	; (8009bbc <RCCEx_PLL2_Config+0x15c>)
 8009b56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b5c:	e00f      	b.n	8009b7e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d106      	bne.n	8009b72 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009b64:	4b15      	ldr	r3, [pc, #84]	; (8009bbc <RCCEx_PLL2_Config+0x15c>)
 8009b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b68:	4a14      	ldr	r2, [pc, #80]	; (8009bbc <RCCEx_PLL2_Config+0x15c>)
 8009b6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b70:	e005      	b.n	8009b7e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009b72:	4b12      	ldr	r3, [pc, #72]	; (8009bbc <RCCEx_PLL2_Config+0x15c>)
 8009b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b76:	4a11      	ldr	r2, [pc, #68]	; (8009bbc <RCCEx_PLL2_Config+0x15c>)
 8009b78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009b7e:	4b0f      	ldr	r3, [pc, #60]	; (8009bbc <RCCEx_PLL2_Config+0x15c>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a0e      	ldr	r2, [pc, #56]	; (8009bbc <RCCEx_PLL2_Config+0x15c>)
 8009b84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009b88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b8a:	f7f8 f8a9 	bl	8001ce0 <HAL_GetTick>
 8009b8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b90:	e008      	b.n	8009ba4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009b92:	f7f8 f8a5 	bl	8001ce0 <HAL_GetTick>
 8009b96:	4602      	mov	r2, r0
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	1ad3      	subs	r3, r2, r3
 8009b9c:	2b02      	cmp	r3, #2
 8009b9e:	d901      	bls.n	8009ba4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ba0:	2303      	movs	r3, #3
 8009ba2:	e006      	b.n	8009bb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ba4:	4b05      	ldr	r3, [pc, #20]	; (8009bbc <RCCEx_PLL2_Config+0x15c>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d0f0      	beq.n	8009b92 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	58024400 	.word	0x58024400
 8009bc0:	ffff0007 	.word	0xffff0007

08009bc4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009bd2:	4b53      	ldr	r3, [pc, #332]	; (8009d20 <RCCEx_PLL3_Config+0x15c>)
 8009bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd6:	f003 0303 	and.w	r3, r3, #3
 8009bda:	2b03      	cmp	r3, #3
 8009bdc:	d101      	bne.n	8009be2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	e099      	b.n	8009d16 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009be2:	4b4f      	ldr	r3, [pc, #316]	; (8009d20 <RCCEx_PLL3_Config+0x15c>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a4e      	ldr	r2, [pc, #312]	; (8009d20 <RCCEx_PLL3_Config+0x15c>)
 8009be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bee:	f7f8 f877 	bl	8001ce0 <HAL_GetTick>
 8009bf2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009bf4:	e008      	b.n	8009c08 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009bf6:	f7f8 f873 	bl	8001ce0 <HAL_GetTick>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	1ad3      	subs	r3, r2, r3
 8009c00:	2b02      	cmp	r3, #2
 8009c02:	d901      	bls.n	8009c08 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009c04:	2303      	movs	r3, #3
 8009c06:	e086      	b.n	8009d16 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009c08:	4b45      	ldr	r3, [pc, #276]	; (8009d20 <RCCEx_PLL3_Config+0x15c>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d1f0      	bne.n	8009bf6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009c14:	4b42      	ldr	r3, [pc, #264]	; (8009d20 <RCCEx_PLL3_Config+0x15c>)
 8009c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c18:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	051b      	lsls	r3, r3, #20
 8009c22:	493f      	ldr	r1, [pc, #252]	; (8009d20 <RCCEx_PLL3_Config+0x15c>)
 8009c24:	4313      	orrs	r3, r2
 8009c26:	628b      	str	r3, [r1, #40]	; 0x28
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	3b01      	subs	r3, #1
 8009c2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	3b01      	subs	r3, #1
 8009c38:	025b      	lsls	r3, r3, #9
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	431a      	orrs	r2, r3
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	3b01      	subs	r3, #1
 8009c44:	041b      	lsls	r3, r3, #16
 8009c46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009c4a:	431a      	orrs	r2, r3
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	3b01      	subs	r3, #1
 8009c52:	061b      	lsls	r3, r3, #24
 8009c54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009c58:	4931      	ldr	r1, [pc, #196]	; (8009d20 <RCCEx_PLL3_Config+0x15c>)
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009c5e:	4b30      	ldr	r3, [pc, #192]	; (8009d20 <RCCEx_PLL3_Config+0x15c>)
 8009c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	695b      	ldr	r3, [r3, #20]
 8009c6a:	492d      	ldr	r1, [pc, #180]	; (8009d20 <RCCEx_PLL3_Config+0x15c>)
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009c70:	4b2b      	ldr	r3, [pc, #172]	; (8009d20 <RCCEx_PLL3_Config+0x15c>)
 8009c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c74:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	699b      	ldr	r3, [r3, #24]
 8009c7c:	4928      	ldr	r1, [pc, #160]	; (8009d20 <RCCEx_PLL3_Config+0x15c>)
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009c82:	4b27      	ldr	r3, [pc, #156]	; (8009d20 <RCCEx_PLL3_Config+0x15c>)
 8009c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c86:	4a26      	ldr	r2, [pc, #152]	; (8009d20 <RCCEx_PLL3_Config+0x15c>)
 8009c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009c8e:	4b24      	ldr	r3, [pc, #144]	; (8009d20 <RCCEx_PLL3_Config+0x15c>)
 8009c90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c92:	4b24      	ldr	r3, [pc, #144]	; (8009d24 <RCCEx_PLL3_Config+0x160>)
 8009c94:	4013      	ands	r3, r2
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	69d2      	ldr	r2, [r2, #28]
 8009c9a:	00d2      	lsls	r2, r2, #3
 8009c9c:	4920      	ldr	r1, [pc, #128]	; (8009d20 <RCCEx_PLL3_Config+0x15c>)
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009ca2:	4b1f      	ldr	r3, [pc, #124]	; (8009d20 <RCCEx_PLL3_Config+0x15c>)
 8009ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca6:	4a1e      	ldr	r2, [pc, #120]	; (8009d20 <RCCEx_PLL3_Config+0x15c>)
 8009ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d106      	bne.n	8009cc2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009cb4:	4b1a      	ldr	r3, [pc, #104]	; (8009d20 <RCCEx_PLL3_Config+0x15c>)
 8009cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb8:	4a19      	ldr	r2, [pc, #100]	; (8009d20 <RCCEx_PLL3_Config+0x15c>)
 8009cba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009cbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009cc0:	e00f      	b.n	8009ce2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d106      	bne.n	8009cd6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009cc8:	4b15      	ldr	r3, [pc, #84]	; (8009d20 <RCCEx_PLL3_Config+0x15c>)
 8009cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ccc:	4a14      	ldr	r2, [pc, #80]	; (8009d20 <RCCEx_PLL3_Config+0x15c>)
 8009cce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009cd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009cd4:	e005      	b.n	8009ce2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009cd6:	4b12      	ldr	r3, [pc, #72]	; (8009d20 <RCCEx_PLL3_Config+0x15c>)
 8009cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cda:	4a11      	ldr	r2, [pc, #68]	; (8009d20 <RCCEx_PLL3_Config+0x15c>)
 8009cdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ce0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009ce2:	4b0f      	ldr	r3, [pc, #60]	; (8009d20 <RCCEx_PLL3_Config+0x15c>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a0e      	ldr	r2, [pc, #56]	; (8009d20 <RCCEx_PLL3_Config+0x15c>)
 8009ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cee:	f7f7 fff7 	bl	8001ce0 <HAL_GetTick>
 8009cf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009cf4:	e008      	b.n	8009d08 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009cf6:	f7f7 fff3 	bl	8001ce0 <HAL_GetTick>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	1ad3      	subs	r3, r2, r3
 8009d00:	2b02      	cmp	r3, #2
 8009d02:	d901      	bls.n	8009d08 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009d04:	2303      	movs	r3, #3
 8009d06:	e006      	b.n	8009d16 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009d08:	4b05      	ldr	r3, [pc, #20]	; (8009d20 <RCCEx_PLL3_Config+0x15c>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d0f0      	beq.n	8009cf6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	58024400 	.word	0x58024400
 8009d24:	ffff0007 	.word	0xffff0007

08009d28 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b08a      	sub	sp, #40	; 0x28
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d101      	bne.n	8009d3a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	e075      	b.n	8009e26 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d105      	bne.n	8009d52 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f7f7 fcb5 	bl	80016bc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2204      	movs	r2, #4
 8009d56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 f868 	bl	8009e30 <HAL_SD_InitCard>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d001      	beq.n	8009d6a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	e05d      	b.n	8009e26 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009d6a:	f107 0308 	add.w	r3, r7, #8
 8009d6e:	4619      	mov	r1, r3
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 fdaf 	bl	800a8d4 <HAL_SD_GetCardStatus>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d001      	beq.n	8009d80 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e052      	b.n	8009e26 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009d80:	7e3b      	ldrb	r3, [r7, #24]
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009d86:	7e7b      	ldrb	r3, [r7, #25]
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d10a      	bne.n	8009daa <HAL_SD_Init+0x82>
 8009d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d102      	bne.n	8009da0 <HAL_SD_Init+0x78>
 8009d9a:	6a3b      	ldr	r3, [r7, #32]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d004      	beq.n	8009daa <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009da6:	659a      	str	r2, [r3, #88]	; 0x58
 8009da8:	e00b      	b.n	8009dc2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d104      	bne.n	8009dbc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009db8:	659a      	str	r2, [r3, #88]	; 0x58
 8009dba:	e002      	b.n	8009dc2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 fe6d 	bl	800aaa8 <HAL_SD_ConfigWideBusOperation>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d001      	beq.n	8009dd8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	e026      	b.n	8009e26 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009dd8:	f7f7 ff82 	bl	8001ce0 <HAL_GetTick>
 8009ddc:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009dde:	e011      	b.n	8009e04 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009de0:	f7f7 ff7e 	bl	8001ce0 <HAL_GetTick>
 8009de4:	4602      	mov	r2, r0
 8009de6:	69fb      	ldr	r3, [r7, #28]
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dee:	d109      	bne.n	8009e04 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009df6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8009e00:	2303      	movs	r3, #3
 8009e02:	e010      	b.n	8009e26 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 ff61 	bl	800accc <HAL_SD_GetCardState>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b04      	cmp	r3, #4
 8009e0e:	d1e7      	bne.n	8009de0 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8009e24:	2300      	movs	r3, #0
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3728      	adds	r7, #40	; 0x28
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
	...

08009e30 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009e30:	b590      	push	{r4, r7, lr}
 8009e32:	b08d      	sub	sp, #52	; 0x34
 8009e34:	af02      	add	r7, sp, #8
 8009e36:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009e40:	2300      	movs	r3, #0
 8009e42:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009e44:	2300      	movs	r3, #0
 8009e46:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009e48:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009e4c:	f04f 0100 	mov.w	r1, #0
 8009e50:	f7fe fc7c 	bl	800874c <HAL_RCCEx_GetPeriphCLKFreq>
 8009e54:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8009e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d109      	bne.n	8009e70 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009e6a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e070      	b.n	8009f52 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e72:	0a1b      	lsrs	r3, r3, #8
 8009e74:	4a39      	ldr	r2, [pc, #228]	; (8009f5c <HAL_SD_InitCard+0x12c>)
 8009e76:	fba2 2303 	umull	r2, r3, r2, r3
 8009e7a:	091b      	lsrs	r3, r3, #4
 8009e7c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681c      	ldr	r4, [r3, #0]
 8009e82:	466a      	mov	r2, sp
 8009e84:	f107 0318 	add.w	r3, r7, #24
 8009e88:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009e8c:	e882 0003 	stmia.w	r2, {r0, r1}
 8009e90:	f107 030c 	add.w	r3, r7, #12
 8009e94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e96:	4620      	mov	r0, r4
 8009e98:	f001 fd46 	bl	800b928 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f001 fd89 	bl	800b9b8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8009ea6:	69fb      	ldr	r3, [r7, #28]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d005      	beq.n	8009eb8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	005b      	lsls	r3, r3, #1
 8009eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eb6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8009eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d007      	beq.n	8009ece <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8009ebe:	4a28      	ldr	r2, [pc, #160]	; (8009f60 <HAL_SD_InitCard+0x130>)
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f7f7 ff15 	bl	8001cf8 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 ffea 	bl	800aea8 <SD_PowerON>
 8009ed4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ed6:	6a3b      	ldr	r3, [r7, #32]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d00b      	beq.n	8009ef4 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ee8:	6a3b      	ldr	r3, [r7, #32]
 8009eea:	431a      	orrs	r2, r3
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e02e      	b.n	8009f52 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 ff09 	bl	800ad0c <SD_InitCard>
 8009efa:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009efc:	6a3b      	ldr	r3, [r7, #32]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d00b      	beq.n	8009f1a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2201      	movs	r2, #1
 8009f06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f0e:	6a3b      	ldr	r3, [r7, #32]
 8009f10:	431a      	orrs	r2, r3
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009f16:	2301      	movs	r3, #1
 8009f18:	e01b      	b.n	8009f52 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009f22:	4618      	mov	r0, r3
 8009f24:	f001 fdde 	bl	800bae4 <SDMMC_CmdBlockLength>
 8009f28:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f2a:	6a3b      	ldr	r3, [r7, #32]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00f      	beq.n	8009f50 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4a0b      	ldr	r2, [pc, #44]	; (8009f64 <HAL_SD_InitCard+0x134>)
 8009f36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f3c:	6a3b      	ldr	r3, [r7, #32]
 8009f3e:	431a      	orrs	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2201      	movs	r2, #1
 8009f48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	e000      	b.n	8009f52 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	372c      	adds	r7, #44	; 0x2c
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd90      	pop	{r4, r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	014f8b59 	.word	0x014f8b59
 8009f60:	00012110 	.word	0x00012110
 8009f64:	1fe00fff 	.word	0x1fe00fff

08009f68 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b08c      	sub	sp, #48	; 0x30
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	607a      	str	r2, [r7, #4]
 8009f74:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d107      	bne.n	8009f90 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f84:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	e08d      	b.n	800a0ac <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	f040 8086 	bne.w	800a0aa <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009fa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	441a      	add	r2, r3
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d907      	bls.n	8009fc2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fb6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e074      	b.n	800a0ac <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2203      	movs	r2, #3
 8009fc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	68ba      	ldr	r2, [r7, #8]
 8009fd6:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	025a      	lsls	r2, r3, #9
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d002      	beq.n	8009fee <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8009fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fea:	025b      	lsls	r3, r3, #9
 8009fec:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ff2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	025b      	lsls	r3, r3, #9
 8009ff8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009ffa:	2390      	movs	r3, #144	; 0x90
 8009ffc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009ffe:	2302      	movs	r3, #2
 800a000:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a002:	2300      	movs	r3, #0
 800a004:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a006:	2300      	movs	r3, #0
 800a008:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f107 0210 	add.w	r2, r7, #16
 800a012:	4611      	mov	r1, r2
 800a014:	4618      	mov	r0, r3
 800a016:	f001 fd39 	bl	800ba8c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	68da      	ldr	r2, [r3, #12]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a028:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	68ba      	ldr	r2, [r7, #8]
 800a030:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2201      	movs	r2, #1
 800a038:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d90a      	bls.n	800a056 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2282      	movs	r2, #130	; 0x82
 800a044:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a04c:	4618      	mov	r0, r3
 800a04e:	f001 fd8f 	bl	800bb70 <SDMMC_CmdReadMultiBlock>
 800a052:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a054:	e009      	b.n	800a06a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2281      	movs	r2, #129	; 0x81
 800a05a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a062:	4618      	mov	r0, r3
 800a064:	f001 fd61 	bl	800bb2a <SDMMC_CmdReadSingleBlock>
 800a068:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d012      	beq.n	800a096 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a0f      	ldr	r2, [pc, #60]	; (800a0b4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800a076:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a07e:	431a      	orrs	r2, r3
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2201      	movs	r2, #1
 800a088:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2200      	movs	r2, #0
 800a090:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a092:	2301      	movs	r3, #1
 800a094:	e00a      	b.n	800a0ac <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a0a4:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	e000      	b.n	800a0ac <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a0aa:	2302      	movs	r3, #2
  }
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3730      	adds	r7, #48	; 0x30
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	1fe00fff 	.word	0x1fe00fff

0800a0b8 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b08c      	sub	sp, #48	; 0x30
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	607a      	str	r2, [r7, #4]
 800a0c4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d107      	bne.n	800a0e0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	e08d      	b.n	800a1fc <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	f040 8086 	bne.w	800a1fa <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a0f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	441a      	add	r2, r3
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d907      	bls.n	800a112 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a106:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	e074      	b.n	800a1fc <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2203      	movs	r2, #3
 800a116:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2200      	movs	r2, #0
 800a120:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	68ba      	ldr	r2, [r7, #8]
 800a126:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	025a      	lsls	r2, r3, #9
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a134:	2b01      	cmp	r3, #1
 800a136:	d002      	beq.n	800a13e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800a138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a13a:	025b      	lsls	r3, r3, #9
 800a13c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a13e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a142:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	025b      	lsls	r3, r3, #9
 800a148:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a14a:	2390      	movs	r3, #144	; 0x90
 800a14c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a14e:	2300      	movs	r3, #0
 800a150:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a152:	2300      	movs	r3, #0
 800a154:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a156:	2300      	movs	r3, #0
 800a158:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f107 0210 	add.w	r2, r7, #16
 800a162:	4611      	mov	r1, r2
 800a164:	4618      	mov	r0, r3
 800a166:	f001 fc91 	bl	800ba8c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	68da      	ldr	r2, [r3, #12]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a178:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	68ba      	ldr	r2, [r7, #8]
 800a180:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2201      	movs	r2, #1
 800a188:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d90a      	bls.n	800a1a6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	22a0      	movs	r2, #160	; 0xa0
 800a194:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a19c:	4618      	mov	r0, r3
 800a19e:	f001 fd2d 	bl	800bbfc <SDMMC_CmdWriteMultiBlock>
 800a1a2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a1a4:	e009      	b.n	800a1ba <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2290      	movs	r2, #144	; 0x90
 800a1aa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f001 fcff 	bl	800bbb6 <SDMMC_CmdWriteSingleBlock>
 800a1b8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d012      	beq.n	800a1e6 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a0f      	ldr	r2, [pc, #60]	; (800a204 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800a1c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ce:	431a      	orrs	r2, r3
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	e00a      	b.n	800a1fc <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800a1f4:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	e000      	b.n	800a1fc <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a1fa:	2302      	movs	r3, #2
  }
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3730      	adds	r7, #48	; 0x30
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}
 800a204:	1fe00fff 	.word	0x1fe00fff

0800a208 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a214:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a21c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a220:	2b00      	cmp	r3, #0
 800a222:	d008      	beq.n	800a236 <HAL_SD_IRQHandler+0x2e>
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f003 0308 	and.w	r3, r3, #8
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d003      	beq.n	800a236 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f001 f926 	bl	800b480 <SD_Read_IT>
 800a234:	e19a      	b.n	800a56c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a23c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a240:	2b00      	cmp	r3, #0
 800a242:	f000 80ac 	beq.w	800a39e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a24e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	4b59      	ldr	r3, [pc, #356]	; (800a3c0 <HAL_SD_IRQHandler+0x1b8>)
 800a25c:	400b      	ands	r3, r1
 800a25e:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a26e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	68da      	ldr	r2, [r3, #12]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a27e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f003 0308 	and.w	r3, r3, #8
 800a286:	2b00      	cmp	r3, #0
 800a288:	d038      	beq.n	800a2fc <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f003 0302 	and.w	r3, r3, #2
 800a290:	2b00      	cmp	r3, #0
 800a292:	d104      	bne.n	800a29e <HAL_SD_IRQHandler+0x96>
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f003 0320 	and.w	r3, r3, #32
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d011      	beq.n	800a2c2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f001 fcce 	bl	800bc44 <SDMMC_CmdStopTransfer>
 800a2a8:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d008      	beq.n	800a2c2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	431a      	orrs	r2, r3
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 f95b 	bl	800a578 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a3f      	ldr	r2, [pc, #252]	; (800a3c4 <HAL_SD_IRQHandler+0x1bc>)
 800a2c8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f003 0301 	and.w	r3, r3, #1
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d104      	bne.n	800a2ec <HAL_SD_IRQHandler+0xe4>
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f003 0302 	and.w	r3, r3, #2
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d003      	beq.n	800a2f4 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f002 f981 	bl	800c5f4 <HAL_SD_RxCpltCallback>
 800a2f2:	e13b      	b.n	800a56c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f002 f973 	bl	800c5e0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a2fa:	e137      	b.n	800a56c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a302:	2b00      	cmp	r3, #0
 800a304:	f000 8132 	beq.w	800a56c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2200      	movs	r2, #0
 800a30e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2200      	movs	r2, #0
 800a316:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	2200      	movs	r2, #0
 800a31e:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f003 0302 	and.w	r3, r3, #2
 800a326:	2b00      	cmp	r3, #0
 800a328:	d104      	bne.n	800a334 <HAL_SD_IRQHandler+0x12c>
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f003 0320 	and.w	r3, r3, #32
 800a330:	2b00      	cmp	r3, #0
 800a332:	d011      	beq.n	800a358 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4618      	mov	r0, r3
 800a33a:	f001 fc83 	bl	800bc44 <SDMMC_CmdStopTransfer>
 800a33e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d008      	beq.n	800a358 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	431a      	orrs	r2, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 f910 	bl	800a578 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2201      	movs	r2, #1
 800a35c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f003 0310 	and.w	r3, r3, #16
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d104      	bne.n	800a37a <HAL_SD_IRQHandler+0x172>
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f003 0320 	and.w	r3, r3, #32
 800a376:	2b00      	cmp	r3, #0
 800a378:	d002      	beq.n	800a380 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f002 f930 	bl	800c5e0 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f003 0301 	and.w	r3, r3, #1
 800a386:	2b00      	cmp	r3, #0
 800a388:	d105      	bne.n	800a396 <HAL_SD_IRQHandler+0x18e>
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f003 0302 	and.w	r3, r3, #2
 800a390:	2b00      	cmp	r3, #0
 800a392:	f000 80eb 	beq.w	800a56c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f002 f92c 	bl	800c5f4 <HAL_SD_RxCpltCallback>
}
 800a39c:	e0e6      	b.n	800a56c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d00d      	beq.n	800a3c8 <HAL_SD_IRQHandler+0x1c0>
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f003 0308 	and.w	r3, r3, #8
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d008      	beq.n	800a3c8 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f001 f8a8 	bl	800b50c <SD_Write_IT>
 800a3bc:	e0d6      	b.n	800a56c <HAL_SD_IRQHandler+0x364>
 800a3be:	bf00      	nop
 800a3c0:	ffff3ec5 	.word	0xffff3ec5
 800a3c4:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ce:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	f000 809d 	beq.w	800a512 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3de:	f003 0302 	and.w	r3, r3, #2
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d005      	beq.n	800a3f2 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ea:	f043 0202 	orr.w	r2, r3, #2
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3f8:	f003 0308 	and.w	r3, r3, #8
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d005      	beq.n	800a40c <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a404:	f043 0208 	orr.w	r2, r3, #8
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a412:	f003 0320 	and.w	r3, r3, #32
 800a416:	2b00      	cmp	r3, #0
 800a418:	d005      	beq.n	800a426 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a41e:	f043 0220 	orr.w	r2, r3, #32
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a42c:	f003 0310 	and.w	r3, r3, #16
 800a430:	2b00      	cmp	r3, #0
 800a432:	d005      	beq.n	800a440 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a438:	f043 0210 	orr.w	r2, r3, #16
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4a4b      	ldr	r2, [pc, #300]	; (800a574 <HAL_SD_IRQHandler+0x36c>)
 800a446:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a456:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68da      	ldr	r2, [r3, #12]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a466:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a476:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	68da      	ldr	r2, [r3, #12]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a486:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4618      	mov	r0, r3
 800a48e:	f001 fbd9 	bl	800bc44 <SDMMC_CmdStopTransfer>
 800a492:	4602      	mov	r2, r0
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a498:	431a      	orrs	r2, r3
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	68da      	ldr	r2, [r3, #12]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a4ac:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a4b6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f003 0308 	and.w	r3, r3, #8
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d00a      	beq.n	800a4d8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 f851 	bl	800a578 <HAL_SD_ErrorCallback>
}
 800a4d6:	e049      	b.n	800a56c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d044      	beq.n	800a56c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d040      	beq.n	800a56c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a4f8:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	2200      	movs	r2, #0
 800a500:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2201      	movs	r2, #1
 800a506:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 f834 	bl	800a578 <HAL_SD_ErrorCallback>
}
 800a510:	e02c      	b.n	800a56c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d025      	beq.n	800a56c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a528:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a530:	f003 0304 	and.w	r3, r3, #4
 800a534:	2b00      	cmp	r3, #0
 800a536:	d10c      	bne.n	800a552 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f003 0320 	and.w	r3, r3, #32
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d003      	beq.n	800a54a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f001 f84a 	bl	800b5dc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800a548:	e010      	b.n	800a56c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f001 f832 	bl	800b5b4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800a550:	e00c      	b.n	800a56c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f003 0320 	and.w	r3, r3, #32
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d003      	beq.n	800a564 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f001 f833 	bl	800b5c8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800a562:	e003      	b.n	800a56c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f001 f81b 	bl	800b5a0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a56a:	e7ff      	b.n	800a56c <HAL_SD_IRQHandler+0x364>
 800a56c:	bf00      	nop
 800a56e:	3710      	adds	r7, #16
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}
 800a574:	18000f3a 	.word	0x18000f3a

0800a578 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a580:	bf00      	nop
 800a582:	370c      	adds	r7, #12
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a59a:	0f9b      	lsrs	r3, r3, #30
 800a59c:	b2da      	uxtb	r2, r3
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5a6:	0e9b      	lsrs	r3, r3, #26
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	f003 030f 	and.w	r3, r3, #15
 800a5ae:	b2da      	uxtb	r2, r3
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5b8:	0e1b      	lsrs	r3, r3, #24
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	f003 0303 	and.w	r3, r3, #3
 800a5c0:	b2da      	uxtb	r2, r3
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5ca:	0c1b      	lsrs	r3, r3, #16
 800a5cc:	b2da      	uxtb	r2, r3
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5d6:	0a1b      	lsrs	r3, r3, #8
 800a5d8:	b2da      	uxtb	r2, r3
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5e2:	b2da      	uxtb	r2, r3
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5ec:	0d1b      	lsrs	r3, r3, #20
 800a5ee:	b29a      	uxth	r2, r3
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5f8:	0c1b      	lsrs	r3, r3, #16
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	f003 030f 	and.w	r3, r3, #15
 800a600:	b2da      	uxtb	r2, r3
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a60a:	0bdb      	lsrs	r3, r3, #15
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	f003 0301 	and.w	r3, r3, #1
 800a612:	b2da      	uxtb	r2, r3
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a61c:	0b9b      	lsrs	r3, r3, #14
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	f003 0301 	and.w	r3, r3, #1
 800a624:	b2da      	uxtb	r2, r3
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a62e:	0b5b      	lsrs	r3, r3, #13
 800a630:	b2db      	uxtb	r3, r3
 800a632:	f003 0301 	and.w	r3, r3, #1
 800a636:	b2da      	uxtb	r2, r3
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a640:	0b1b      	lsrs	r3, r3, #12
 800a642:	b2db      	uxtb	r3, r3
 800a644:	f003 0301 	and.w	r3, r3, #1
 800a648:	b2da      	uxtb	r2, r3
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	2200      	movs	r2, #0
 800a652:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d163      	bne.n	800a724 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a660:	009a      	lsls	r2, r3, #2
 800a662:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a666:	4013      	ands	r3, r2
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800a66c:	0f92      	lsrs	r2, r2, #30
 800a66e:	431a      	orrs	r2, r3
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a678:	0edb      	lsrs	r3, r3, #27
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	f003 0307 	and.w	r3, r3, #7
 800a680:	b2da      	uxtb	r2, r3
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a68a:	0e1b      	lsrs	r3, r3, #24
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	f003 0307 	and.w	r3, r3, #7
 800a692:	b2da      	uxtb	r2, r3
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a69c:	0d5b      	lsrs	r3, r3, #21
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	f003 0307 	and.w	r3, r3, #7
 800a6a4:	b2da      	uxtb	r2, r3
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6ae:	0c9b      	lsrs	r3, r3, #18
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	f003 0307 	and.w	r3, r3, #7
 800a6b6:	b2da      	uxtb	r2, r3
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6c0:	0bdb      	lsrs	r3, r3, #15
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	f003 0307 	and.w	r3, r3, #7
 800a6c8:	b2da      	uxtb	r2, r3
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	691b      	ldr	r3, [r3, #16]
 800a6d2:	1c5a      	adds	r2, r3, #1
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	7e1b      	ldrb	r3, [r3, #24]
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	f003 0307 	and.w	r3, r3, #7
 800a6e2:	3302      	adds	r3, #2
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a6ee:	fb03 f202 	mul.w	r2, r3, r2
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	7a1b      	ldrb	r3, [r3, #8]
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	f003 030f 	and.w	r3, r3, #15
 800a700:	2201      	movs	r2, #1
 800a702:	409a      	lsls	r2, r3
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a710:	0a52      	lsrs	r2, r2, #9
 800a712:	fb03 f202 	mul.w	r2, r3, r2
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a720:	655a      	str	r2, [r3, #84]	; 0x54
 800a722:	e031      	b.n	800a788 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d11d      	bne.n	800a768 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a730:	041b      	lsls	r3, r3, #16
 800a732:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a73a:	0c1b      	lsrs	r3, r3, #16
 800a73c:	431a      	orrs	r2, r3
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	691b      	ldr	r3, [r3, #16]
 800a746:	3301      	adds	r3, #1
 800a748:	029a      	lsls	r2, r3, #10
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a75c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	655a      	str	r2, [r3, #84]	; 0x54
 800a766:	e00f      	b.n	800a788 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a58      	ldr	r2, [pc, #352]	; (800a8d0 <HAL_SD_GetCardCSD+0x344>)
 800a76e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a774:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2201      	movs	r2, #1
 800a780:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	e09d      	b.n	800a8c4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a78c:	0b9b      	lsrs	r3, r3, #14
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	f003 0301 	and.w	r3, r3, #1
 800a794:	b2da      	uxtb	r2, r3
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a79e:	09db      	lsrs	r3, r3, #7
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7a6:	b2da      	uxtb	r2, r3
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7b6:	b2da      	uxtb	r2, r3
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7c0:	0fdb      	lsrs	r3, r3, #31
 800a7c2:	b2da      	uxtb	r2, r3
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7cc:	0f5b      	lsrs	r3, r3, #29
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	f003 0303 	and.w	r3, r3, #3
 800a7d4:	b2da      	uxtb	r2, r3
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7de:	0e9b      	lsrs	r3, r3, #26
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	f003 0307 	and.w	r3, r3, #7
 800a7e6:	b2da      	uxtb	r2, r3
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7f0:	0d9b      	lsrs	r3, r3, #22
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	f003 030f 	and.w	r3, r3, #15
 800a7f8:	b2da      	uxtb	r2, r3
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a802:	0d5b      	lsrs	r3, r3, #21
 800a804:	b2db      	uxtb	r3, r3
 800a806:	f003 0301 	and.w	r3, r3, #1
 800a80a:	b2da      	uxtb	r2, r3
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	2200      	movs	r2, #0
 800a816:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a81e:	0c1b      	lsrs	r3, r3, #16
 800a820:	b2db      	uxtb	r3, r3
 800a822:	f003 0301 	and.w	r3, r3, #1
 800a826:	b2da      	uxtb	r2, r3
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a832:	0bdb      	lsrs	r3, r3, #15
 800a834:	b2db      	uxtb	r3, r3
 800a836:	f003 0301 	and.w	r3, r3, #1
 800a83a:	b2da      	uxtb	r2, r3
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a846:	0b9b      	lsrs	r3, r3, #14
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	f003 0301 	and.w	r3, r3, #1
 800a84e:	b2da      	uxtb	r2, r3
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a85a:	0b5b      	lsrs	r3, r3, #13
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	f003 0301 	and.w	r3, r3, #1
 800a862:	b2da      	uxtb	r2, r3
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a86e:	0b1b      	lsrs	r3, r3, #12
 800a870:	b2db      	uxtb	r3, r3
 800a872:	f003 0301 	and.w	r3, r3, #1
 800a876:	b2da      	uxtb	r2, r3
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a882:	0a9b      	lsrs	r3, r3, #10
 800a884:	b2db      	uxtb	r3, r3
 800a886:	f003 0303 	and.w	r3, r3, #3
 800a88a:	b2da      	uxtb	r2, r3
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a896:	0a1b      	lsrs	r3, r3, #8
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	f003 0303 	and.w	r3, r3, #3
 800a89e:	b2da      	uxtb	r2, r3
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8aa:	085b      	lsrs	r3, r3, #1
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8b2:	b2da      	uxtb	r2, r3
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	2201      	movs	r2, #1
 800a8be:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a8c2:	2300      	movs	r3, #0
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr
 800a8d0:	1fe00fff 	.word	0x1fe00fff

0800a8d4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b094      	sub	sp, #80	; 0x50
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a8ea:	b2db      	uxtb	r3, r3
 800a8ec:	2b03      	cmp	r3, #3
 800a8ee:	d101      	bne.n	800a8f4 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	e0a7      	b.n	800aa44 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a8f4:	f107 0308 	add.w	r3, r7, #8
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 fb62 	bl	800afc4 <SD_SendSDStatus>
 800a900:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a904:	2b00      	cmp	r3, #0
 800a906:	d011      	beq.n	800a92c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a4f      	ldr	r2, [pc, #316]	; (800aa4c <HAL_SD_GetCardStatus+0x178>)
 800a90e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a916:	431a      	orrs	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2201      	movs	r2, #1
 800a920:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800a924:	2301      	movs	r3, #1
 800a926:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a92a:	e070      	b.n	800aa0e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	099b      	lsrs	r3, r3, #6
 800a930:	b2db      	uxtb	r3, r3
 800a932:	f003 0303 	and.w	r3, r3, #3
 800a936:	b2da      	uxtb	r2, r3
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	095b      	lsrs	r3, r3, #5
 800a940:	b2db      	uxtb	r3, r3
 800a942:	f003 0301 	and.w	r3, r3, #1
 800a946:	b2da      	uxtb	r2, r3
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	0a1b      	lsrs	r3, r3, #8
 800a950:	b29b      	uxth	r3, r3
 800a952:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a956:	b29a      	uxth	r2, r3
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	0e1b      	lsrs	r3, r3, #24
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	4313      	orrs	r3, r2
 800a960:	b29a      	uxth	r2, r3
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	061a      	lsls	r2, r3, #24
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	021b      	lsls	r3, r3, #8
 800a96e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a972:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	0a1b      	lsrs	r3, r3, #8
 800a978:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a97c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	0e1b      	lsrs	r3, r3, #24
 800a982:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	b2da      	uxtb	r2, r3
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	0a1b      	lsrs	r3, r3, #8
 800a994:	b2da      	uxtb	r2, r3
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	0d1b      	lsrs	r3, r3, #20
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	f003 030f 	and.w	r3, r3, #15
 800a9a4:	b2da      	uxtb	r2, r3
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	0c1b      	lsrs	r3, r3, #16
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a9b4:	b29a      	uxth	r2, r3
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	0a9b      	lsrs	r3, r3, #10
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9d0:	b2da      	uxtb	r2, r3
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	0a1b      	lsrs	r3, r3, #8
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	f003 0303 	and.w	r3, r3, #3
 800a9e0:	b2da      	uxtb	r2, r3
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	091b      	lsrs	r3, r3, #4
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	f003 030f 	and.w	r3, r3, #15
 800a9f0:	b2da      	uxtb	r2, r3
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	f003 030f 	and.w	r3, r3, #15
 800a9fe:	b2da      	uxtb	r2, r3
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	0e1b      	lsrs	r3, r3, #24
 800aa08:	b2da      	uxtb	r2, r3
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aa16:	4618      	mov	r0, r3
 800aa18:	f001 f864 	bl	800bae4 <SDMMC_CmdBlockLength>
 800aa1c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800aa1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00d      	beq.n	800aa40 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a08      	ldr	r2, [pc, #32]	; (800aa4c <HAL_SD_GetCardStatus+0x178>)
 800aa2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa30:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2201      	movs	r2, #1
 800aa36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800aa40:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3750      	adds	r7, #80	; 0x50
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	1fe00fff 	.word	0x1fe00fff

0800aa50 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800aaa8:	b590      	push	{r4, r7, lr}
 800aaaa:	b08d      	sub	sp, #52	; 0x34
 800aaac:	af02      	add	r7, sp, #8
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800aab2:	2300      	movs	r3, #0
 800aab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2203      	movs	r2, #3
 800aabc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac4:	2b03      	cmp	r3, #3
 800aac6:	d02e      	beq.n	800ab26 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aace:	d106      	bne.n	800aade <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aad4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	635a      	str	r2, [r3, #52]	; 0x34
 800aadc:	e029      	b.n	800ab32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aae4:	d10a      	bne.n	800aafc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 fb64 	bl	800b1b4 <SD_WideBus_Enable>
 800aaec:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aaf2:	6a3b      	ldr	r3, [r7, #32]
 800aaf4:	431a      	orrs	r2, r3
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	635a      	str	r2, [r3, #52]	; 0x34
 800aafa:	e01a      	b.n	800ab32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d10a      	bne.n	800ab18 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 fba1 	bl	800b24a <SD_WideBus_Disable>
 800ab08:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab0e:	6a3b      	ldr	r3, [r7, #32]
 800ab10:	431a      	orrs	r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	635a      	str	r2, [r3, #52]	; 0x34
 800ab16:	e00c      	b.n	800ab32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab1c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	635a      	str	r2, [r3, #52]	; 0x34
 800ab24:	e005      	b.n	800ab32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab2a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d007      	beq.n	800ab4a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a5f      	ldr	r2, [pc, #380]	; (800acbc <HAL_SD_ConfigWideBusOperation+0x214>)
 800ab40:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ab42:	2301      	movs	r3, #1
 800ab44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ab48:	e096      	b.n	800ac78 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ab4a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ab4e:	f04f 0100 	mov.w	r1, #0
 800ab52:	f7fd fdfb 	bl	800874c <HAL_RCCEx_GetPeriphCLKFreq>
 800ab56:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800ab58:	69fb      	ldr	r3, [r7, #28]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	f000 8083 	beq.w	800ac66 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	689b      	ldr	r3, [r3, #8]
 800ab6a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	691b      	ldr	r3, [r3, #16]
 800ab74:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	695a      	ldr	r2, [r3, #20]
 800ab7a:	69fb      	ldr	r3, [r7, #28]
 800ab7c:	4950      	ldr	r1, [pc, #320]	; (800acc0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ab7e:	fba1 1303 	umull	r1, r3, r1, r3
 800ab82:	0e1b      	lsrs	r3, r3, #24
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d303      	bcc.n	800ab90 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	695b      	ldr	r3, [r3, #20]
 800ab8c:	61bb      	str	r3, [r7, #24]
 800ab8e:	e05a      	b.n	800ac46 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab98:	d103      	bne.n	800aba2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	695b      	ldr	r3, [r3, #20]
 800ab9e:	61bb      	str	r3, [r7, #24]
 800aba0:	e051      	b.n	800ac46 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abaa:	d126      	bne.n	800abfa <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	695b      	ldr	r3, [r3, #20]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d10e      	bne.n	800abd2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	4a43      	ldr	r2, [pc, #268]	; (800acc4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d906      	bls.n	800abca <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	4a40      	ldr	r2, [pc, #256]	; (800acc0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800abc0:	fba2 2303 	umull	r2, r3, r2, r3
 800abc4:	0e5b      	lsrs	r3, r3, #25
 800abc6:	61bb      	str	r3, [r7, #24]
 800abc8:	e03d      	b.n	800ac46 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	695b      	ldr	r3, [r3, #20]
 800abce:	61bb      	str	r3, [r7, #24]
 800abd0:	e039      	b.n	800ac46 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	695b      	ldr	r3, [r3, #20]
 800abd6:	005b      	lsls	r3, r3, #1
 800abd8:	69fa      	ldr	r2, [r7, #28]
 800abda:	fbb2 f3f3 	udiv	r3, r2, r3
 800abde:	4a39      	ldr	r2, [pc, #228]	; (800acc4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d906      	bls.n	800abf2 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	4a36      	ldr	r2, [pc, #216]	; (800acc0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800abe8:	fba2 2303 	umull	r2, r3, r2, r3
 800abec:	0e5b      	lsrs	r3, r3, #25
 800abee:	61bb      	str	r3, [r7, #24]
 800abf0:	e029      	b.n	800ac46 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	695b      	ldr	r3, [r3, #20]
 800abf6:	61bb      	str	r3, [r7, #24]
 800abf8:	e025      	b.n	800ac46 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	695b      	ldr	r3, [r3, #20]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d10e      	bne.n	800ac20 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ac02:	69fb      	ldr	r3, [r7, #28]
 800ac04:	4a30      	ldr	r2, [pc, #192]	; (800acc8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d906      	bls.n	800ac18 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ac0a:	69fb      	ldr	r3, [r7, #28]
 800ac0c:	4a2c      	ldr	r2, [pc, #176]	; (800acc0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ac0e:	fba2 2303 	umull	r2, r3, r2, r3
 800ac12:	0e1b      	lsrs	r3, r3, #24
 800ac14:	61bb      	str	r3, [r7, #24]
 800ac16:	e016      	b.n	800ac46 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	695b      	ldr	r3, [r3, #20]
 800ac1c:	61bb      	str	r3, [r7, #24]
 800ac1e:	e012      	b.n	800ac46 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	695b      	ldr	r3, [r3, #20]
 800ac24:	005b      	lsls	r3, r3, #1
 800ac26:	69fa      	ldr	r2, [r7, #28]
 800ac28:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac2c:	4a26      	ldr	r2, [pc, #152]	; (800acc8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d906      	bls.n	800ac40 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ac32:	69fb      	ldr	r3, [r7, #28]
 800ac34:	4a22      	ldr	r2, [pc, #136]	; (800acc0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ac36:	fba2 2303 	umull	r2, r3, r2, r3
 800ac3a:	0e1b      	lsrs	r3, r3, #24
 800ac3c:	61bb      	str	r3, [r7, #24]
 800ac3e:	e002      	b.n	800ac46 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	695b      	ldr	r3, [r3, #20]
 800ac44:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681c      	ldr	r4, [r3, #0]
 800ac4a:	466a      	mov	r2, sp
 800ac4c:	f107 0314 	add.w	r3, r7, #20
 800ac50:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ac54:	e882 0003 	stmia.w	r2, {r0, r1}
 800ac58:	f107 0308 	add.w	r3, r7, #8
 800ac5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ac5e:	4620      	mov	r0, r4
 800ac60:	f000 fe62 	bl	800b928 <SDMMC_Init>
 800ac64:	e008      	b.n	800ac78 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac6a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800ac72:	2301      	movs	r3, #1
 800ac74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ac80:	4618      	mov	r0, r3
 800ac82:	f000 ff2f 	bl	800bae4 <SDMMC_CmdBlockLength>
 800ac86:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ac88:	6a3b      	ldr	r3, [r7, #32]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d00c      	beq.n	800aca8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4a0a      	ldr	r2, [pc, #40]	; (800acbc <HAL_SD_ConfigWideBusOperation+0x214>)
 800ac94:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac9a:	6a3b      	ldr	r3, [r7, #32]
 800ac9c:	431a      	orrs	r2, r3
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800aca2:	2301      	movs	r3, #1
 800aca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2201      	movs	r2, #1
 800acac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800acb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	372c      	adds	r7, #44	; 0x2c
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd90      	pop	{r4, r7, pc}
 800acbc:	1fe00fff 	.word	0x1fe00fff
 800acc0:	55e63b89 	.word	0x55e63b89
 800acc4:	02faf080 	.word	0x02faf080
 800acc8:	017d7840 	.word	0x017d7840

0800accc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b086      	sub	sp, #24
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800acd4:	2300      	movs	r3, #0
 800acd6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800acd8:	f107 030c 	add.w	r3, r7, #12
 800acdc:	4619      	mov	r1, r3
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 fa40 	bl	800b164 <SD_SendStatus>
 800ace4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d005      	beq.n	800acf8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	431a      	orrs	r2, r3
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	0a5b      	lsrs	r3, r3, #9
 800acfc:	f003 030f 	and.w	r3, r3, #15
 800ad00:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ad02:	693b      	ldr	r3, [r7, #16]
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3718      	adds	r7, #24
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b090      	sub	sp, #64	; 0x40
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800ad14:	2300      	movs	r3, #0
 800ad16:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800ad18:	f7f6 ffe2 	bl	8001ce0 <HAL_GetTick>
 800ad1c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4618      	mov	r0, r3
 800ad24:	f000 fe59 	bl	800b9da <SDMMC_GetPowerState>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d102      	bne.n	800ad34 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ad2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ad32:	e0b5      	b.n	800aea0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad38:	2b03      	cmp	r3, #3
 800ad3a:	d02e      	beq.n	800ad9a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4618      	mov	r0, r3
 800ad42:	f001 f8a4 	bl	800be8e <SDMMC_CmdSendCID>
 800ad46:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ad48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d001      	beq.n	800ad52 <SD_InitCard+0x46>
    {
      return errorstate;
 800ad4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad50:	e0a6      	b.n	800aea0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	2100      	movs	r1, #0
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f000 fe84 	bl	800ba66 <SDMMC_GetResponse>
 800ad5e:	4602      	mov	r2, r0
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	2104      	movs	r1, #4
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f000 fe7b 	bl	800ba66 <SDMMC_GetResponse>
 800ad70:	4602      	mov	r2, r0
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2108      	movs	r1, #8
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f000 fe72 	bl	800ba66 <SDMMC_GetResponse>
 800ad82:	4602      	mov	r2, r0
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	210c      	movs	r1, #12
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f000 fe69 	bl	800ba66 <SDMMC_GetResponse>
 800ad94:	4602      	mov	r2, r0
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad9e:	2b03      	cmp	r3, #3
 800ada0:	d01d      	beq.n	800adde <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800ada2:	e019      	b.n	800add8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f107 020a 	add.w	r2, r7, #10
 800adac:	4611      	mov	r1, r2
 800adae:	4618      	mov	r0, r3
 800adb0:	f001 f8ac 	bl	800bf0c <SDMMC_CmdSetRelAdd>
 800adb4:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800adb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d001      	beq.n	800adc0 <SD_InitCard+0xb4>
      {
        return errorstate;
 800adbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adbe:	e06f      	b.n	800aea0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800adc0:	f7f6 ff8e 	bl	8001ce0 <HAL_GetTick>
 800adc4:	4602      	mov	r2, r0
 800adc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adc8:	1ad3      	subs	r3, r2, r3
 800adca:	f241 3287 	movw	r2, #4999	; 0x1387
 800adce:	4293      	cmp	r3, r2
 800add0:	d902      	bls.n	800add8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800add2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800add6:	e063      	b.n	800aea0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800add8:	897b      	ldrh	r3, [r7, #10]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d0e2      	beq.n	800ada4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ade2:	2b03      	cmp	r3, #3
 800ade4:	d036      	beq.n	800ae54 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ade6:	897b      	ldrh	r3, [r7, #10]
 800ade8:	461a      	mov	r2, r3
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adf6:	041b      	lsls	r3, r3, #16
 800adf8:	4619      	mov	r1, r3
 800adfa:	4610      	mov	r0, r2
 800adfc:	f001 f866 	bl	800becc <SDMMC_CmdSendCSD>
 800ae00:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ae02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d001      	beq.n	800ae0c <SD_InitCard+0x100>
    {
      return errorstate;
 800ae08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae0a:	e049      	b.n	800aea0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	2100      	movs	r1, #0
 800ae12:	4618      	mov	r0, r3
 800ae14:	f000 fe27 	bl	800ba66 <SDMMC_GetResponse>
 800ae18:	4602      	mov	r2, r0
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	2104      	movs	r1, #4
 800ae24:	4618      	mov	r0, r3
 800ae26:	f000 fe1e 	bl	800ba66 <SDMMC_GetResponse>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	2108      	movs	r1, #8
 800ae36:	4618      	mov	r0, r3
 800ae38:	f000 fe15 	bl	800ba66 <SDMMC_GetResponse>
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	210c      	movs	r1, #12
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f000 fe0c 	bl	800ba66 <SDMMC_GetResponse>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2104      	movs	r1, #4
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f000 fe03 	bl	800ba66 <SDMMC_GetResponse>
 800ae60:	4603      	mov	r3, r0
 800ae62:	0d1a      	lsrs	r2, r3, #20
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ae68:	f107 030c 	add.w	r3, r7, #12
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f7ff fb8c 	bl	800a58c <HAL_SD_GetCardCSD>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d002      	beq.n	800ae80 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ae7e:	e00f      	b.n	800aea0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae88:	041b      	lsls	r3, r3, #16
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	4610      	mov	r0, r2
 800ae8e:	f000 ff15 	bl	800bcbc <SDMMC_CmdSelDesel>
 800ae92:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800ae94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d001      	beq.n	800ae9e <SD_InitCard+0x192>
  {
    return errorstate;
 800ae9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae9c:	e000      	b.n	800aea0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ae9e:	2300      	movs	r3, #0
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3740      	adds	r7, #64	; 0x40
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b086      	sub	sp, #24
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4618      	mov	r0, r3
 800aec2:	f000 ff1e 	bl	800bd02 <SDMMC_CmdGoIdleState>
 800aec6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d001      	beq.n	800aed2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	e072      	b.n	800afb8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4618      	mov	r0, r3
 800aed8:	f000 ff31 	bl	800bd3e <SDMMC_CmdOperCond>
 800aedc:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aee4:	d10d      	bne.n	800af02 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2200      	movs	r2, #0
 800aeea:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4618      	mov	r0, r3
 800aef2:	f000 ff06 	bl	800bd02 <SDMMC_CmdGoIdleState>
 800aef6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d004      	beq.n	800af08 <SD_PowerON+0x60>
    {
      return errorstate;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	e05a      	b.n	800afb8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2201      	movs	r2, #1
 800af06:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d137      	bne.n	800af80 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	2100      	movs	r1, #0
 800af16:	4618      	mov	r0, r3
 800af18:	f000 ff31 	bl	800bd7e <SDMMC_CmdAppCommand>
 800af1c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d02d      	beq.n	800af80 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800af28:	e046      	b.n	800afb8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	2100      	movs	r1, #0
 800af30:	4618      	mov	r0, r3
 800af32:	f000 ff24 	bl	800bd7e <SDMMC_CmdAppCommand>
 800af36:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d001      	beq.n	800af42 <SD_PowerON+0x9a>
    {
      return errorstate;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	e03a      	b.n	800afb8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	491e      	ldr	r1, [pc, #120]	; (800afc0 <SD_PowerON+0x118>)
 800af48:	4618      	mov	r0, r3
 800af4a:	f000 ff3b 	bl	800bdc4 <SDMMC_CmdAppOperCommand>
 800af4e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d002      	beq.n	800af5c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800af5a:	e02d      	b.n	800afb8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2100      	movs	r1, #0
 800af62:	4618      	mov	r0, r3
 800af64:	f000 fd7f 	bl	800ba66 <SDMMC_GetResponse>
 800af68:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	0fdb      	lsrs	r3, r3, #31
 800af6e:	2b01      	cmp	r3, #1
 800af70:	d101      	bne.n	800af76 <SD_PowerON+0xce>
 800af72:	2301      	movs	r3, #1
 800af74:	e000      	b.n	800af78 <SD_PowerON+0xd0>
 800af76:	2300      	movs	r3, #0
 800af78:	613b      	str	r3, [r7, #16]

    count++;
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	3301      	adds	r3, #1
 800af7e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800af86:	4293      	cmp	r3, r2
 800af88:	d802      	bhi.n	800af90 <SD_PowerON+0xe8>
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d0cc      	beq.n	800af2a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800af96:	4293      	cmp	r3, r2
 800af98:	d902      	bls.n	800afa0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800af9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800af9e:	e00b      	b.n	800afb8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2200      	movs	r2, #0
 800afa4:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800afac:	2b00      	cmp	r3, #0
 800afae:	d002      	beq.n	800afb6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2201      	movs	r2, #1
 800afb4:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800afb6:	2300      	movs	r3, #0
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3718      	adds	r7, #24
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	c1100000 	.word	0xc1100000

0800afc4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b08c      	sub	sp, #48	; 0x30
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800afce:	f7f6 fe87 	bl	8001ce0 <HAL_GetTick>
 800afd2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	2100      	movs	r1, #0
 800afde:	4618      	mov	r0, r3
 800afe0:	f000 fd41 	bl	800ba66 <SDMMC_GetResponse>
 800afe4:	4603      	mov	r3, r0
 800afe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afee:	d102      	bne.n	800aff6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800aff0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aff4:	e0b0      	b.n	800b158 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2140      	movs	r1, #64	; 0x40
 800affc:	4618      	mov	r0, r3
 800affe:	f000 fd71 	bl	800bae4 <SDMMC_CmdBlockLength>
 800b002:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b004:	6a3b      	ldr	r3, [r7, #32]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d005      	beq.n	800b016 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b012:	6a3b      	ldr	r3, [r7, #32]
 800b014:	e0a0      	b.n	800b158 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b01e:	041b      	lsls	r3, r3, #16
 800b020:	4619      	mov	r1, r3
 800b022:	4610      	mov	r0, r2
 800b024:	f000 feab 	bl	800bd7e <SDMMC_CmdAppCommand>
 800b028:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b02a:	6a3b      	ldr	r3, [r7, #32]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d005      	beq.n	800b03c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b038:	6a3b      	ldr	r3, [r7, #32]
 800b03a:	e08d      	b.n	800b158 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b03c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b040:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800b042:	2340      	movs	r3, #64	; 0x40
 800b044:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800b046:	2360      	movs	r3, #96	; 0x60
 800b048:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b04a:	2302      	movs	r3, #2
 800b04c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b04e:	2300      	movs	r3, #0
 800b050:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b052:	2301      	movs	r3, #1
 800b054:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f107 0208 	add.w	r2, r7, #8
 800b05e:	4611      	mov	r1, r2
 800b060:	4618      	mov	r0, r3
 800b062:	f000 fd13 	bl	800ba8c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4618      	mov	r0, r3
 800b06c:	f000 ff93 	bl	800bf96 <SDMMC_CmdStatusRegister>
 800b070:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b072:	6a3b      	ldr	r3, [r7, #32]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d02b      	beq.n	800b0d0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b080:	6a3b      	ldr	r3, [r7, #32]
 800b082:	e069      	b.n	800b158 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b08a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d013      	beq.n	800b0ba <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800b092:	2300      	movs	r3, #0
 800b094:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b096:	e00d      	b.n	800b0b4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4618      	mov	r0, r3
 800b09e:	f000 fc6d 	bl	800b97c <SDMMC_ReadFIFO>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a6:	601a      	str	r2, [r3, #0]
        pData++;
 800b0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0aa:	3304      	adds	r3, #4
 800b0ac:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800b0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0b6:	2b07      	cmp	r3, #7
 800b0b8:	d9ee      	bls.n	800b098 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b0ba:	f7f6 fe11 	bl	8001ce0 <HAL_GetTick>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c2:	1ad3      	subs	r3, r2, r3
 800b0c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0c8:	d102      	bne.n	800b0d0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b0ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b0ce:	e043      	b.n	800b158 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0d6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d0d2      	beq.n	800b084 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0e4:	f003 0308 	and.w	r3, r3, #8
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d001      	beq.n	800b0f0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b0ec:	2308      	movs	r3, #8
 800b0ee:	e033      	b.n	800b158 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0f6:	f003 0302 	and.w	r3, r3, #2
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d001      	beq.n	800b102 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b0fe:	2302      	movs	r3, #2
 800b100:	e02a      	b.n	800b158 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b108:	f003 0320 	and.w	r3, r3, #32
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d017      	beq.n	800b140 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b110:	2320      	movs	r3, #32
 800b112:	e021      	b.n	800b158 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4618      	mov	r0, r3
 800b11a:	f000 fc2f 	bl	800b97c <SDMMC_ReadFIFO>
 800b11e:	4602      	mov	r2, r0
 800b120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b122:	601a      	str	r2, [r3, #0]
    pData++;
 800b124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b126:	3304      	adds	r3, #4
 800b128:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b12a:	f7f6 fdd9 	bl	8001ce0 <HAL_GetTick>
 800b12e:	4602      	mov	r2, r0
 800b130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b132:	1ad3      	subs	r3, r2, r3
 800b134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b138:	d102      	bne.n	800b140 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b13a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b13e:	e00b      	b.n	800b158 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b146:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d1e2      	bne.n	800b114 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	4a03      	ldr	r2, [pc, #12]	; (800b160 <SD_SendSDStatus+0x19c>)
 800b154:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800b156:	2300      	movs	r3, #0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3730      	adds	r7, #48	; 0x30
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	18000f3a 	.word	0x18000f3a

0800b164 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d102      	bne.n	800b17a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b178:	e018      	b.n	800b1ac <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b182:	041b      	lsls	r3, r3, #16
 800b184:	4619      	mov	r1, r3
 800b186:	4610      	mov	r0, r2
 800b188:	f000 fee2 	bl	800bf50 <SDMMC_CmdSendStatus>
 800b18c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d001      	beq.n	800b198 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	e009      	b.n	800b1ac <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	2100      	movs	r1, #0
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f000 fc61 	bl	800ba66 <SDMMC_GetResponse>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b1aa:	2300      	movs	r3, #0
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3710      	adds	r7, #16
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b086      	sub	sp, #24
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b1bc:	2300      	movs	r3, #0
 800b1be:	60fb      	str	r3, [r7, #12]
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f000 fc4b 	bl	800ba66 <SDMMC_GetResponse>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1da:	d102      	bne.n	800b1e2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b1dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b1e0:	e02f      	b.n	800b242 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b1e2:	f107 030c 	add.w	r3, r7, #12
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 f879 	bl	800b2e0 <SD_FindSCR>
 800b1ee:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d001      	beq.n	800b1fa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	e023      	b.n	800b242 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b200:	2b00      	cmp	r3, #0
 800b202:	d01c      	beq.n	800b23e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b20c:	041b      	lsls	r3, r3, #16
 800b20e:	4619      	mov	r1, r3
 800b210:	4610      	mov	r0, r2
 800b212:	f000 fdb4 	bl	800bd7e <SDMMC_CmdAppCommand>
 800b216:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d001      	beq.n	800b222 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	e00f      	b.n	800b242 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	2102      	movs	r1, #2
 800b228:	4618      	mov	r0, r3
 800b22a:	f000 fdeb 	bl	800be04 <SDMMC_CmdBusWidth>
 800b22e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d001      	beq.n	800b23a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	e003      	b.n	800b242 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b23a:	2300      	movs	r3, #0
 800b23c:	e001      	b.n	800b242 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b23e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b242:	4618      	mov	r0, r3
 800b244:	3718      	adds	r7, #24
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}

0800b24a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b24a:	b580      	push	{r7, lr}
 800b24c:	b086      	sub	sp, #24
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b252:	2300      	movs	r3, #0
 800b254:	60fb      	str	r3, [r7, #12]
 800b256:	2300      	movs	r3, #0
 800b258:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	2100      	movs	r1, #0
 800b260:	4618      	mov	r0, r3
 800b262:	f000 fc00 	bl	800ba66 <SDMMC_GetResponse>
 800b266:	4603      	mov	r3, r0
 800b268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b26c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b270:	d102      	bne.n	800b278 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b272:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b276:	e02f      	b.n	800b2d8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b278:	f107 030c 	add.w	r3, r7, #12
 800b27c:	4619      	mov	r1, r3
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 f82e 	bl	800b2e0 <SD_FindSCR>
 800b284:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d001      	beq.n	800b290 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	e023      	b.n	800b2d8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b296:	2b00      	cmp	r3, #0
 800b298:	d01c      	beq.n	800b2d4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681a      	ldr	r2, [r3, #0]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2a2:	041b      	lsls	r3, r3, #16
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	4610      	mov	r0, r2
 800b2a8:	f000 fd69 	bl	800bd7e <SDMMC_CmdAppCommand>
 800b2ac:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d001      	beq.n	800b2b8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	e00f      	b.n	800b2d8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	2100      	movs	r1, #0
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f000 fda0 	bl	800be04 <SDMMC_CmdBusWidth>
 800b2c4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d001      	beq.n	800b2d0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	e003      	b.n	800b2d8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	e001      	b.n	800b2d8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b2d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3718      	adds	r7, #24
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b08e      	sub	sp, #56	; 0x38
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b2ea:	f7f6 fcf9 	bl	8001ce0 <HAL_GetTick>
 800b2ee:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	60bb      	str	r3, [r7, #8]
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	2108      	movs	r1, #8
 800b306:	4618      	mov	r0, r3
 800b308:	f000 fbec 	bl	800bae4 <SDMMC_CmdBlockLength>
 800b30c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b310:	2b00      	cmp	r3, #0
 800b312:	d001      	beq.n	800b318 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b316:	e0ad      	b.n	800b474 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b320:	041b      	lsls	r3, r3, #16
 800b322:	4619      	mov	r1, r3
 800b324:	4610      	mov	r0, r2
 800b326:	f000 fd2a 	bl	800bd7e <SDMMC_CmdAppCommand>
 800b32a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d001      	beq.n	800b336 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b334:	e09e      	b.n	800b474 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b33a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b33c:	2308      	movs	r3, #8
 800b33e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b340:	2330      	movs	r3, #48	; 0x30
 800b342:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b344:	2302      	movs	r3, #2
 800b346:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b348:	2300      	movs	r3, #0
 800b34a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b34c:	2301      	movs	r3, #1
 800b34e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f107 0210 	add.w	r2, r7, #16
 800b358:	4611      	mov	r1, r2
 800b35a:	4618      	mov	r0, r3
 800b35c:	f000 fb96 	bl	800ba8c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4618      	mov	r0, r3
 800b366:	f000 fd70 	bl	800be4a <SDMMC_CmdSendSCR>
 800b36a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d027      	beq.n	800b3c2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b374:	e07e      	b.n	800b474 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b37c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b380:	2b00      	cmp	r3, #0
 800b382:	d113      	bne.n	800b3ac <SD_FindSCR+0xcc>
 800b384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b386:	2b00      	cmp	r3, #0
 800b388:	d110      	bne.n	800b3ac <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4618      	mov	r0, r3
 800b390:	f000 faf4 	bl	800b97c <SDMMC_ReadFIFO>
 800b394:	4603      	mov	r3, r0
 800b396:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4618      	mov	r0, r3
 800b39e:	f000 faed 	bl	800b97c <SDMMC_ReadFIFO>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	60fb      	str	r3, [r7, #12]
      index++;
 800b3a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b3ac:	f7f6 fc98 	bl	8001ce0 <HAL_GetTick>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b4:	1ad3      	subs	r3, r2, r3
 800b3b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3ba:	d102      	bne.n	800b3c2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b3bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3c0:	e058      	b.n	800b474 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b3c8:	f240 532a 	movw	r3, #1322	; 0x52a
 800b3cc:	4013      	ands	r3, r2
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d0d1      	beq.n	800b376 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3d8:	f003 0308 	and.w	r3, r3, #8
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d005      	beq.n	800b3ec <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	2208      	movs	r2, #8
 800b3e6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b3e8:	2308      	movs	r3, #8
 800b3ea:	e043      	b.n	800b474 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3f2:	f003 0302 	and.w	r3, r3, #2
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d005      	beq.n	800b406 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	2202      	movs	r2, #2
 800b400:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b402:	2302      	movs	r3, #2
 800b404:	e036      	b.n	800b474 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b40c:	f003 0320 	and.w	r3, r3, #32
 800b410:	2b00      	cmp	r3, #0
 800b412:	d005      	beq.n	800b420 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2220      	movs	r2, #32
 800b41a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b41c:	2320      	movs	r3, #32
 800b41e:	e029      	b.n	800b474 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4a15      	ldr	r2, [pc, #84]	; (800b47c <SD_FindSCR+0x19c>)
 800b426:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	061a      	lsls	r2, r3, #24
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	021b      	lsls	r3, r3, #8
 800b430:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b434:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	0a1b      	lsrs	r3, r3, #8
 800b43a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b43e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	0e1b      	lsrs	r3, r3, #24
 800b444:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b448:	601a      	str	r2, [r3, #0]
    scr++;
 800b44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b44c:	3304      	adds	r3, #4
 800b44e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	061a      	lsls	r2, r3, #24
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	021b      	lsls	r3, r3, #8
 800b458:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b45c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	0a1b      	lsrs	r3, r3, #8
 800b462:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b466:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	0e1b      	lsrs	r3, r3, #24
 800b46c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b470:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b472:	2300      	movs	r3, #0
}
 800b474:	4618      	mov	r0, r3
 800b476:	3738      	adds	r7, #56	; 0x38
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}
 800b47c:	18000f3a 	.word	0x18000f3a

0800b480 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b086      	sub	sp, #24
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b492:	2b1f      	cmp	r3, #31
 800b494:	d936      	bls.n	800b504 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800b496:	2300      	movs	r3, #0
 800b498:	617b      	str	r3, [r7, #20]
 800b49a:	e027      	b.n	800b4ec <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f000 fa6b 	bl	800b97c <SDMMC_ReadFIFO>
 800b4a6:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	b2da      	uxtb	r2, r3
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	0a1b      	lsrs	r3, r3, #8
 800b4ba:	b2da      	uxtb	r2, r3
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	0c1b      	lsrs	r3, r3, #16
 800b4ca:	b2da      	uxtb	r2, r3
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	0e1b      	lsrs	r3, r3, #24
 800b4da:	b2da      	uxtb	r2, r3
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	617b      	str	r3, [r7, #20]
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	2b07      	cmp	r3, #7
 800b4f0:	d9d4      	bls.n	800b49c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	693a      	ldr	r2, [r7, #16]
 800b4f6:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4fc:	f1a3 0220 	sub.w	r2, r3, #32
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800b504:	bf00      	nop
 800b506:	3718      	adds	r7, #24
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b086      	sub	sp, #24
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	69db      	ldr	r3, [r3, #28]
 800b518:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6a1b      	ldr	r3, [r3, #32]
 800b51e:	2b1f      	cmp	r3, #31
 800b520:	d93a      	bls.n	800b598 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800b522:	2300      	movs	r3, #0
 800b524:	617b      	str	r3, [r7, #20]
 800b526:	e02b      	b.n	800b580 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	3301      	adds	r3, #1
 800b532:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	021a      	lsls	r2, r3, #8
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	4313      	orrs	r3, r2
 800b53e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	3301      	adds	r3, #1
 800b544:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	041a      	lsls	r2, r3, #16
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	4313      	orrs	r3, r2
 800b550:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	3301      	adds	r3, #1
 800b556:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	061a      	lsls	r2, r3, #24
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	4313      	orrs	r3, r2
 800b562:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	3301      	adds	r3, #1
 800b568:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f107 020c 	add.w	r2, r7, #12
 800b572:	4611      	mov	r1, r2
 800b574:	4618      	mov	r0, r3
 800b576:	f000 fa0e 	bl	800b996 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	3301      	adds	r3, #1
 800b57e:	617b      	str	r3, [r7, #20]
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	2b07      	cmp	r3, #7
 800b584:	d9d0      	bls.n	800b528 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	693a      	ldr	r2, [r7, #16]
 800b58a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6a1b      	ldr	r3, [r3, #32]
 800b590:	f1a3 0220 	sub.w	r2, r3, #32
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	621a      	str	r2, [r3, #32]
  }
}
 800b598:	bf00      	nop
 800b59a:	3718      	adds	r7, #24
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b083      	sub	sp, #12
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b5a8:	bf00      	nop
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr

0800b5b4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b5bc:	bf00      	nop
 800b5be:	370c      	adds	r7, #12
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b083      	sub	sp, #12
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b5d0:	bf00      	nop
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b5e4:	bf00      	nop
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b082      	sub	sp, #8
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d101      	bne.n	800b604 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b600:	2301      	movs	r3, #1
 800b602:	e02b      	b.n	800b65c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d106      	bne.n	800b61e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2200      	movs	r2, #0
 800b614:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f7f6 f9a1 	bl	8001960 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2202      	movs	r2, #2
 800b622:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	3304      	adds	r3, #4
 800b62e:	4619      	mov	r1, r3
 800b630:	4610      	mov	r0, r2
 800b632:	f000 f877 	bl	800b724 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6818      	ldr	r0, [r3, #0]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	461a      	mov	r2, r3
 800b640:	6839      	ldr	r1, [r7, #0]
 800b642:	f000 f8cb 	bl	800b7dc <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800b646:	4b07      	ldr	r3, [pc, #28]	; (800b664 <HAL_SDRAM_Init+0x74>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4a06      	ldr	r2, [pc, #24]	; (800b664 <HAL_SDRAM_Init+0x74>)
 800b64c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b650:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2201      	movs	r2, #1
 800b656:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b65a:	2300      	movs	r3, #0
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3708      	adds	r7, #8
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	52004000 	.word	0x52004000

0800b668 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b086      	sub	sp, #24
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b67a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800b67c:	7dfb      	ldrb	r3, [r7, #23]
 800b67e:	2b02      	cmp	r3, #2
 800b680:	d101      	bne.n	800b686 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800b682:	2302      	movs	r3, #2
 800b684:	e021      	b.n	800b6ca <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800b686:	7dfb      	ldrb	r3, [r7, #23]
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d002      	beq.n	800b692 <HAL_SDRAM_SendCommand+0x2a>
 800b68c:	7dfb      	ldrb	r3, [r7, #23]
 800b68e:	2b05      	cmp	r3, #5
 800b690:	d118      	bne.n	800b6c4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2202      	movs	r2, #2
 800b696:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	687a      	ldr	r2, [r7, #4]
 800b6a0:	68b9      	ldr	r1, [r7, #8]
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f000 f904 	bl	800b8b0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	2b02      	cmp	r3, #2
 800b6ae:	d104      	bne.n	800b6ba <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2205      	movs	r2, #5
 800b6b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b6b8:	e006      	b.n	800b6c8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2201      	movs	r2, #1
 800b6be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b6c2:	e001      	b.n	800b6c8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	e000      	b.n	800b6ca <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800b6c8:	2300      	movs	r3, #0
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3718      	adds	r7, #24
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}

0800b6d2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b6d2:	b580      	push	{r7, lr}
 800b6d4:	b082      	sub	sp, #8
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
 800b6da:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b6e2:	b2db      	uxtb	r3, r3
 800b6e4:	2b02      	cmp	r3, #2
 800b6e6:	d101      	bne.n	800b6ec <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800b6e8:	2302      	movs	r3, #2
 800b6ea:	e016      	b.n	800b71a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d10f      	bne.n	800b718 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2202      	movs	r2, #2
 800b6fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	6839      	ldr	r1, [r7, #0]
 800b706:	4618      	mov	r0, r3
 800b708:	f000 f8f6 	bl	800b8f8 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2201      	movs	r2, #1
 800b710:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b714:	2300      	movs	r3, #0
 800b716:	e000      	b.n	800b71a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800b718:	2301      	movs	r3, #1
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3708      	adds	r7, #8
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
	...

0800b724 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d121      	bne.n	800b77a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	4b27      	ldr	r3, [pc, #156]	; (800b7d8 <FMC_SDRAM_Init+0xb4>)
 800b73c:	4013      	ands	r3, r2
 800b73e:	683a      	ldr	r2, [r7, #0]
 800b740:	6851      	ldr	r1, [r2, #4]
 800b742:	683a      	ldr	r2, [r7, #0]
 800b744:	6892      	ldr	r2, [r2, #8]
 800b746:	4311      	orrs	r1, r2
 800b748:	683a      	ldr	r2, [r7, #0]
 800b74a:	68d2      	ldr	r2, [r2, #12]
 800b74c:	4311      	orrs	r1, r2
 800b74e:	683a      	ldr	r2, [r7, #0]
 800b750:	6912      	ldr	r2, [r2, #16]
 800b752:	4311      	orrs	r1, r2
 800b754:	683a      	ldr	r2, [r7, #0]
 800b756:	6952      	ldr	r2, [r2, #20]
 800b758:	4311      	orrs	r1, r2
 800b75a:	683a      	ldr	r2, [r7, #0]
 800b75c:	6992      	ldr	r2, [r2, #24]
 800b75e:	4311      	orrs	r1, r2
 800b760:	683a      	ldr	r2, [r7, #0]
 800b762:	69d2      	ldr	r2, [r2, #28]
 800b764:	4311      	orrs	r1, r2
 800b766:	683a      	ldr	r2, [r7, #0]
 800b768:	6a12      	ldr	r2, [r2, #32]
 800b76a:	4311      	orrs	r1, r2
 800b76c:	683a      	ldr	r2, [r7, #0]
 800b76e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b770:	430a      	orrs	r2, r1
 800b772:	431a      	orrs	r2, r3
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	601a      	str	r2, [r3, #0]
 800b778:	e026      	b.n	800b7c8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	69d9      	ldr	r1, [r3, #28]
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	6a1b      	ldr	r3, [r3, #32]
 800b78a:	4319      	orrs	r1, r3
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b790:	430b      	orrs	r3, r1
 800b792:	431a      	orrs	r2, r3
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	685a      	ldr	r2, [r3, #4]
 800b79c:	4b0e      	ldr	r3, [pc, #56]	; (800b7d8 <FMC_SDRAM_Init+0xb4>)
 800b79e:	4013      	ands	r3, r2
 800b7a0:	683a      	ldr	r2, [r7, #0]
 800b7a2:	6851      	ldr	r1, [r2, #4]
 800b7a4:	683a      	ldr	r2, [r7, #0]
 800b7a6:	6892      	ldr	r2, [r2, #8]
 800b7a8:	4311      	orrs	r1, r2
 800b7aa:	683a      	ldr	r2, [r7, #0]
 800b7ac:	68d2      	ldr	r2, [r2, #12]
 800b7ae:	4311      	orrs	r1, r2
 800b7b0:	683a      	ldr	r2, [r7, #0]
 800b7b2:	6912      	ldr	r2, [r2, #16]
 800b7b4:	4311      	orrs	r1, r2
 800b7b6:	683a      	ldr	r2, [r7, #0]
 800b7b8:	6952      	ldr	r2, [r2, #20]
 800b7ba:	4311      	orrs	r1, r2
 800b7bc:	683a      	ldr	r2, [r7, #0]
 800b7be:	6992      	ldr	r2, [r2, #24]
 800b7c0:	430a      	orrs	r2, r1
 800b7c2:	431a      	orrs	r2, r3
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b7c8:	2300      	movs	r3, #0
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	370c      	adds	r7, #12
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr
 800b7d6:	bf00      	nop
 800b7d8:	ffff8000 	.word	0xffff8000

0800b7dc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b085      	sub	sp, #20
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d128      	bne.n	800b840 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	1e59      	subs	r1, r3, #1
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	3b01      	subs	r3, #1
 800b802:	011b      	lsls	r3, r3, #4
 800b804:	4319      	orrs	r1, r3
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	689b      	ldr	r3, [r3, #8]
 800b80a:	3b01      	subs	r3, #1
 800b80c:	021b      	lsls	r3, r3, #8
 800b80e:	4319      	orrs	r1, r3
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	3b01      	subs	r3, #1
 800b816:	031b      	lsls	r3, r3, #12
 800b818:	4319      	orrs	r1, r3
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	691b      	ldr	r3, [r3, #16]
 800b81e:	3b01      	subs	r3, #1
 800b820:	041b      	lsls	r3, r3, #16
 800b822:	4319      	orrs	r1, r3
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	695b      	ldr	r3, [r3, #20]
 800b828:	3b01      	subs	r3, #1
 800b82a:	051b      	lsls	r3, r3, #20
 800b82c:	4319      	orrs	r1, r3
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	699b      	ldr	r3, [r3, #24]
 800b832:	3b01      	subs	r3, #1
 800b834:	061b      	lsls	r3, r3, #24
 800b836:	430b      	orrs	r3, r1
 800b838:	431a      	orrs	r2, r3
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	609a      	str	r2, [r3, #8]
 800b83e:	e02d      	b.n	800b89c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	689a      	ldr	r2, [r3, #8]
 800b844:	4b19      	ldr	r3, [pc, #100]	; (800b8ac <FMC_SDRAM_Timing_Init+0xd0>)
 800b846:	4013      	ands	r3, r2
 800b848:	68ba      	ldr	r2, [r7, #8]
 800b84a:	68d2      	ldr	r2, [r2, #12]
 800b84c:	3a01      	subs	r2, #1
 800b84e:	0311      	lsls	r1, r2, #12
 800b850:	68ba      	ldr	r2, [r7, #8]
 800b852:	6952      	ldr	r2, [r2, #20]
 800b854:	3a01      	subs	r2, #1
 800b856:	0512      	lsls	r2, r2, #20
 800b858:	430a      	orrs	r2, r1
 800b85a:	431a      	orrs	r2, r3
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	68db      	ldr	r3, [r3, #12]
 800b864:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	1e59      	subs	r1, r3, #1
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	3b01      	subs	r3, #1
 800b874:	011b      	lsls	r3, r3, #4
 800b876:	4319      	orrs	r1, r3
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	3b01      	subs	r3, #1
 800b87e:	021b      	lsls	r3, r3, #8
 800b880:	4319      	orrs	r1, r3
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	691b      	ldr	r3, [r3, #16]
 800b886:	3b01      	subs	r3, #1
 800b888:	041b      	lsls	r3, r3, #16
 800b88a:	4319      	orrs	r1, r3
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	699b      	ldr	r3, [r3, #24]
 800b890:	3b01      	subs	r3, #1
 800b892:	061b      	lsls	r3, r3, #24
 800b894:	430b      	orrs	r3, r1
 800b896:	431a      	orrs	r2, r3
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800b89c:	2300      	movs	r3, #0
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3714      	adds	r7, #20
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr
 800b8aa:	bf00      	nop
 800b8ac:	ff0f0fff 	.word	0xff0f0fff

0800b8b0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b085      	sub	sp, #20
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	60b9      	str	r1, [r7, #8]
 800b8ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	691a      	ldr	r2, [r3, #16]
 800b8c0:	4b0c      	ldr	r3, [pc, #48]	; (800b8f4 <FMC_SDRAM_SendCommand+0x44>)
 800b8c2:	4013      	ands	r3, r2
 800b8c4:	68ba      	ldr	r2, [r7, #8]
 800b8c6:	6811      	ldr	r1, [r2, #0]
 800b8c8:	68ba      	ldr	r2, [r7, #8]
 800b8ca:	6852      	ldr	r2, [r2, #4]
 800b8cc:	4311      	orrs	r1, r2
 800b8ce:	68ba      	ldr	r2, [r7, #8]
 800b8d0:	6892      	ldr	r2, [r2, #8]
 800b8d2:	3a01      	subs	r2, #1
 800b8d4:	0152      	lsls	r2, r2, #5
 800b8d6:	4311      	orrs	r1, r2
 800b8d8:	68ba      	ldr	r2, [r7, #8]
 800b8da:	68d2      	ldr	r2, [r2, #12]
 800b8dc:	0252      	lsls	r2, r2, #9
 800b8de:	430a      	orrs	r2, r1
 800b8e0:	431a      	orrs	r2, r3
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800b8e6:	2300      	movs	r3, #0
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3714      	adds	r7, #20
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr
 800b8f4:	ffc00000 	.word	0xffc00000

0800b8f8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b083      	sub	sp, #12
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	695a      	ldr	r2, [r3, #20]
 800b906:	4b07      	ldr	r3, [pc, #28]	; (800b924 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800b908:	4013      	ands	r3, r2
 800b90a:	683a      	ldr	r2, [r7, #0]
 800b90c:	0052      	lsls	r2, r2, #1
 800b90e:	431a      	orrs	r2, r3
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b914:	2300      	movs	r3, #0
}
 800b916:	4618      	mov	r0, r3
 800b918:	370c      	adds	r7, #12
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr
 800b922:	bf00      	nop
 800b924:	ffffc001 	.word	0xffffc001

0800b928 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b928:	b084      	sub	sp, #16
 800b92a:	b480      	push	{r7}
 800b92c:	b085      	sub	sp, #20
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
 800b932:	f107 001c 	add.w	r0, r7, #28
 800b936:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b93a:	2300      	movs	r3, #0
 800b93c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b93e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b940:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b942:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800b946:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b948:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800b94a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800b94e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b950:	68fa      	ldr	r2, [r7, #12]
 800b952:	4313      	orrs	r3, r2
 800b954:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	685a      	ldr	r2, [r3, #4]
 800b95a:	4b07      	ldr	r3, [pc, #28]	; (800b978 <SDMMC_Init+0x50>)
 800b95c:	4013      	ands	r3, r2
 800b95e:	68fa      	ldr	r2, [r7, #12]
 800b960:	431a      	orrs	r2, r3
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b966:	2300      	movs	r3, #0
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3714      	adds	r7, #20
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	b004      	add	sp, #16
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	ffc02c00 	.word	0xffc02c00

0800b97c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b083      	sub	sp, #12
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	370c      	adds	r7, #12
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr

0800b996 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b996:	b480      	push	{r7}
 800b998:	b083      	sub	sp, #12
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	6078      	str	r0, [r7, #4]
 800b99e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b9aa:	2300      	movs	r3, #0
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	370c      	adds	r7, #12
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b083      	sub	sp, #12
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f043 0203 	orr.w	r2, r3, #3
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b9cc:	2300      	movs	r3, #0
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	370c      	adds	r7, #12
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr

0800b9da <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b9da:	b480      	push	{r7}
 800b9dc:	b083      	sub	sp, #12
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f003 0303 	and.w	r3, r3, #3
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	370c      	adds	r7, #12
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr
	...

0800b9f8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b085      	sub	sp, #20
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ba02:	2300      	movs	r3, #0
 800ba04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	681a      	ldr	r2, [r3, #0]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ba16:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800ba1c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800ba22:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ba24:	68fa      	ldr	r2, [r7, #12]
 800ba26:	4313      	orrs	r3, r2
 800ba28:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	68da      	ldr	r2, [r3, #12]
 800ba2e:	4b06      	ldr	r3, [pc, #24]	; (800ba48 <SDMMC_SendCommand+0x50>)
 800ba30:	4013      	ands	r3, r2
 800ba32:	68fa      	ldr	r2, [r7, #12]
 800ba34:	431a      	orrs	r2, r3
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ba3a:	2300      	movs	r3, #0
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3714      	adds	r7, #20
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr
 800ba48:	fffee0c0 	.word	0xfffee0c0

0800ba4c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b083      	sub	sp, #12
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	691b      	ldr	r3, [r3, #16]
 800ba58:	b2db      	uxtb	r3, r3
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	370c      	adds	r7, #12
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba64:	4770      	bx	lr

0800ba66 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ba66:	b480      	push	{r7}
 800ba68:	b085      	sub	sp, #20
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
 800ba6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	3314      	adds	r3, #20
 800ba74:	461a      	mov	r2, r3
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	4413      	add	r3, r2
 800ba7a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3714      	adds	r7, #20
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr

0800ba8c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b085      	sub	sp, #20
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ba96:	2300      	movs	r3, #0
 800ba98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	685a      	ldr	r2, [r3, #4]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bab2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800bab8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800babe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800bac0:	68fa      	ldr	r2, [r7, #12]
 800bac2:	4313      	orrs	r3, r2
 800bac4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	431a      	orrs	r2, r3
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bad6:	2300      	movs	r3, #0

}
 800bad8:	4618      	mov	r0, r3
 800bada:	3714      	adds	r7, #20
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b088      	sub	sp, #32
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800baf2:	2310      	movs	r3, #16
 800baf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800baf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bafa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bafc:	2300      	movs	r3, #0
 800bafe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb06:	f107 0308 	add.w	r3, r7, #8
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f7ff ff73 	bl	800b9f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bb12:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb16:	2110      	movs	r1, #16
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 fa5f 	bl	800bfdc <SDMMC_GetCmdResp1>
 800bb1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb20:	69fb      	ldr	r3, [r7, #28]
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3720      	adds	r7, #32
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}

0800bb2a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bb2a:	b580      	push	{r7, lr}
 800bb2c:	b088      	sub	sp, #32
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	6078      	str	r0, [r7, #4]
 800bb32:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bb38:	2311      	movs	r3, #17
 800bb3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb42:	2300      	movs	r3, #0
 800bb44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb4c:	f107 0308 	add.w	r3, r7, #8
 800bb50:	4619      	mov	r1, r3
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f7ff ff50 	bl	800b9f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bb58:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb5c:	2111      	movs	r1, #17
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 fa3c 	bl	800bfdc <SDMMC_GetCmdResp1>
 800bb64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb66:	69fb      	ldr	r3, [r7, #28]
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3720      	adds	r7, #32
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b088      	sub	sp, #32
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bb7e:	2312      	movs	r3, #18
 800bb80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb82:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb92:	f107 0308 	add.w	r3, r7, #8
 800bb96:	4619      	mov	r1, r3
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f7ff ff2d 	bl	800b9f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bb9e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bba2:	2112      	movs	r1, #18
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f000 fa19 	bl	800bfdc <SDMMC_GetCmdResp1>
 800bbaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbac:	69fb      	ldr	r3, [r7, #28]
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3720      	adds	r7, #32
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}

0800bbb6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bbb6:	b580      	push	{r7, lr}
 800bbb8:	b088      	sub	sp, #32
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
 800bbbe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bbc4:	2318      	movs	r3, #24
 800bbc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bbc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bbcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbd6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbd8:	f107 0308 	add.w	r3, r7, #8
 800bbdc:	4619      	mov	r1, r3
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f7ff ff0a 	bl	800b9f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bbe4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbe8:	2118      	movs	r1, #24
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 f9f6 	bl	800bfdc <SDMMC_GetCmdResp1>
 800bbf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbf2:	69fb      	ldr	r3, [r7, #28]
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3720      	adds	r7, #32
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b088      	sub	sp, #32
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bc0a:	2319      	movs	r3, #25
 800bc0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc14:	2300      	movs	r3, #0
 800bc16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc1e:	f107 0308 	add.w	r3, r7, #8
 800bc22:	4619      	mov	r1, r3
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f7ff fee7 	bl	800b9f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bc2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc2e:	2119      	movs	r1, #25
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 f9d3 	bl	800bfdc <SDMMC_GetCmdResp1>
 800bc36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc38:	69fb      	ldr	r3, [r7, #28]
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3720      	adds	r7, #32
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
	...

0800bc44 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b088      	sub	sp, #32
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bc50:	230c      	movs	r3, #12
 800bc52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc54:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc62:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	68db      	ldr	r3, [r3, #12]
 800bc74:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc7c:	f107 0308 	add.w	r3, r7, #8
 800bc80:	4619      	mov	r1, r3
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f7ff feb8 	bl	800b9f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bc88:	4a0b      	ldr	r2, [pc, #44]	; (800bcb8 <SDMMC_CmdStopTransfer+0x74>)
 800bc8a:	210c      	movs	r1, #12
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f000 f9a5 	bl	800bfdc <SDMMC_GetCmdResp1>
 800bc92:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	68db      	ldr	r3, [r3, #12]
 800bc98:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bca0:	69fb      	ldr	r3, [r7, #28]
 800bca2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bca6:	d101      	bne.n	800bcac <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800bcac:	69fb      	ldr	r3, [r7, #28]
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3720      	adds	r7, #32
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	05f5e100 	.word	0x05f5e100

0800bcbc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b088      	sub	sp, #32
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bcca:	2307      	movs	r3, #7
 800bccc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bcce:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bcd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bcd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bcdc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bcde:	f107 0308 	add.w	r3, r7, #8
 800bce2:	4619      	mov	r1, r3
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f7ff fe87 	bl	800b9f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bcea:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcee:	2107      	movs	r1, #7
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f000 f973 	bl	800bfdc <SDMMC_GetCmdResp1>
 800bcf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcf8:	69fb      	ldr	r3, [r7, #28]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3720      	adds	r7, #32
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}

0800bd02 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bd02:	b580      	push	{r7, lr}
 800bd04:	b088      	sub	sp, #32
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bd12:	2300      	movs	r3, #0
 800bd14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd16:	2300      	movs	r3, #0
 800bd18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd20:	f107 0308 	add.w	r3, r7, #8
 800bd24:	4619      	mov	r1, r3
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f7ff fe66 	bl	800b9f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f000 fb97 	bl	800c460 <SDMMC_GetCmdError>
 800bd32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd34:	69fb      	ldr	r3, [r7, #28]
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3720      	adds	r7, #32
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}

0800bd3e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800bd3e:	b580      	push	{r7, lr}
 800bd40:	b088      	sub	sp, #32
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bd46:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bd4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bd4c:	2308      	movs	r3, #8
 800bd4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd50:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd56:	2300      	movs	r3, #0
 800bd58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd60:	f107 0308 	add.w	r3, r7, #8
 800bd64:	4619      	mov	r1, r3
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f7ff fe46 	bl	800b9f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f000 fb29 	bl	800c3c4 <SDMMC_GetCmdResp7>
 800bd72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd74:	69fb      	ldr	r3, [r7, #28]
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3720      	adds	r7, #32
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}

0800bd7e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bd7e:	b580      	push	{r7, lr}
 800bd80:	b088      	sub	sp, #32
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
 800bd86:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bd8c:	2337      	movs	r3, #55	; 0x37
 800bd8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd90:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd96:	2300      	movs	r3, #0
 800bd98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bda0:	f107 0308 	add.w	r3, r7, #8
 800bda4:	4619      	mov	r1, r3
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f7ff fe26 	bl	800b9f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800bdac:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdb0:	2137      	movs	r1, #55	; 0x37
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f000 f912 	bl	800bfdc <SDMMC_GetCmdResp1>
 800bdb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdba:	69fb      	ldr	r3, [r7, #28]
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3720      	adds	r7, #32
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b088      	sub	sp, #32
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bdd2:	2329      	movs	r3, #41	; 0x29
 800bdd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bdd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bdda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bddc:	2300      	movs	r3, #0
 800bdde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bde0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bde4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bde6:	f107 0308 	add.w	r3, r7, #8
 800bdea:	4619      	mov	r1, r3
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f7ff fe03 	bl	800b9f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 fa2e 	bl	800c254 <SDMMC_GetCmdResp3>
 800bdf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdfa:	69fb      	ldr	r3, [r7, #28]
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3720      	adds	r7, #32
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b088      	sub	sp, #32
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800be12:	2306      	movs	r3, #6
 800be14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be16:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be1c:	2300      	movs	r3, #0
 800be1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be26:	f107 0308 	add.w	r3, r7, #8
 800be2a:	4619      	mov	r1, r3
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f7ff fde3 	bl	800b9f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800be32:	f241 3288 	movw	r2, #5000	; 0x1388
 800be36:	2106      	movs	r1, #6
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f000 f8cf 	bl	800bfdc <SDMMC_GetCmdResp1>
 800be3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be40:	69fb      	ldr	r3, [r7, #28]
}
 800be42:	4618      	mov	r0, r3
 800be44:	3720      	adds	r7, #32
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800be4a:	b580      	push	{r7, lr}
 800be4c:	b088      	sub	sp, #32
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800be52:	2300      	movs	r3, #0
 800be54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800be56:	2333      	movs	r3, #51	; 0x33
 800be58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be60:	2300      	movs	r3, #0
 800be62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be6a:	f107 0308 	add.w	r3, r7, #8
 800be6e:	4619      	mov	r1, r3
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f7ff fdc1 	bl	800b9f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800be76:	f241 3288 	movw	r2, #5000	; 0x1388
 800be7a:	2133      	movs	r1, #51	; 0x33
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f000 f8ad 	bl	800bfdc <SDMMC_GetCmdResp1>
 800be82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be84:	69fb      	ldr	r3, [r7, #28]
}
 800be86:	4618      	mov	r0, r3
 800be88:	3720      	adds	r7, #32
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}

0800be8e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800be8e:	b580      	push	{r7, lr}
 800be90:	b088      	sub	sp, #32
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800be96:	2300      	movs	r3, #0
 800be98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800be9a:	2302      	movs	r3, #2
 800be9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800be9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800bea2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bea4:	2300      	movs	r3, #0
 800bea6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800beac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800beae:	f107 0308 	add.w	r3, r7, #8
 800beb2:	4619      	mov	r1, r3
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f7ff fd9f 	bl	800b9f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f000 f980 	bl	800c1c0 <SDMMC_GetCmdResp2>
 800bec0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bec2:	69fb      	ldr	r3, [r7, #28]
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3720      	adds	r7, #32
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}

0800becc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b088      	sub	sp, #32
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
 800bed4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800beda:	2309      	movs	r3, #9
 800bedc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bede:	f44f 7340 	mov.w	r3, #768	; 0x300
 800bee2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bee4:	2300      	movs	r3, #0
 800bee6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800beec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800beee:	f107 0308 	add.w	r3, r7, #8
 800bef2:	4619      	mov	r1, r3
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f7ff fd7f 	bl	800b9f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 f960 	bl	800c1c0 <SDMMC_GetCmdResp2>
 800bf00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf02:	69fb      	ldr	r3, [r7, #28]
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3720      	adds	r7, #32
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}

0800bf0c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b088      	sub	sp, #32
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bf16:	2300      	movs	r3, #0
 800bf18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bf1a:	2303      	movs	r3, #3
 800bf1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf24:	2300      	movs	r3, #0
 800bf26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf2e:	f107 0308 	add.w	r3, r7, #8
 800bf32:	4619      	mov	r1, r3
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f7ff fd5f 	bl	800b9f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bf3a:	683a      	ldr	r2, [r7, #0]
 800bf3c:	2103      	movs	r1, #3
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 f9c8 	bl	800c2d4 <SDMMC_GetCmdResp6>
 800bf44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf46:	69fb      	ldr	r3, [r7, #28]
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3720      	adds	r7, #32
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b088      	sub	sp, #32
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bf5e:	230d      	movs	r3, #13
 800bf60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf62:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf72:	f107 0308 	add.w	r3, r7, #8
 800bf76:	4619      	mov	r1, r3
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f7ff fd3d 	bl	800b9f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800bf7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf82:	210d      	movs	r1, #13
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f000 f829 	bl	800bfdc <SDMMC_GetCmdResp1>
 800bf8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf8c:	69fb      	ldr	r3, [r7, #28]
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3720      	adds	r7, #32
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}

0800bf96 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800bf96:	b580      	push	{r7, lr}
 800bf98:	b088      	sub	sp, #32
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800bfa2:	230d      	movs	r3, #13
 800bfa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bfaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfac:	2300      	movs	r3, #0
 800bfae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bfb4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfb6:	f107 0308 	add.w	r3, r7, #8
 800bfba:	4619      	mov	r1, r3
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f7ff fd1b 	bl	800b9f8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800bfc2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfc6:	210d      	movs	r1, #13
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 f807 	bl	800bfdc <SDMMC_GetCmdResp1>
 800bfce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfd0:	69fb      	ldr	r3, [r7, #28]
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3720      	adds	r7, #32
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
	...

0800bfdc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b088      	sub	sp, #32
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	60f8      	str	r0, [r7, #12]
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	607a      	str	r2, [r7, #4]
 800bfe8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bfea:	4b70      	ldr	r3, [pc, #448]	; (800c1ac <SDMMC_GetCmdResp1+0x1d0>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	4a70      	ldr	r2, [pc, #448]	; (800c1b0 <SDMMC_GetCmdResp1+0x1d4>)
 800bff0:	fba2 2303 	umull	r2, r3, r2, r3
 800bff4:	0a5a      	lsrs	r2, r3, #9
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	fb02 f303 	mul.w	r3, r2, r3
 800bffc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bffe:	69fb      	ldr	r3, [r7, #28]
 800c000:	1e5a      	subs	r2, r3, #1
 800c002:	61fa      	str	r2, [r7, #28]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d102      	bne.n	800c00e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c008:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c00c:	e0c9      	b.n	800c1a2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c012:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c014:	69ba      	ldr	r2, [r7, #24]
 800c016:	4b67      	ldr	r3, [pc, #412]	; (800c1b4 <SDMMC_GetCmdResp1+0x1d8>)
 800c018:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d0ef      	beq.n	800bffe <SDMMC_GetCmdResp1+0x22>
 800c01e:	69bb      	ldr	r3, [r7, #24]
 800c020:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c024:	2b00      	cmp	r3, #0
 800c026:	d1ea      	bne.n	800bffe <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c02c:	f003 0304 	and.w	r3, r3, #4
 800c030:	2b00      	cmp	r3, #0
 800c032:	d004      	beq.n	800c03e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2204      	movs	r2, #4
 800c038:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c03a:	2304      	movs	r3, #4
 800c03c:	e0b1      	b.n	800c1a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c042:	f003 0301 	and.w	r3, r3, #1
 800c046:	2b00      	cmp	r3, #0
 800c048:	d004      	beq.n	800c054 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2201      	movs	r2, #1
 800c04e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c050:	2301      	movs	r3, #1
 800c052:	e0a6      	b.n	800c1a2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	4a58      	ldr	r2, [pc, #352]	; (800c1b8 <SDMMC_GetCmdResp1+0x1dc>)
 800c058:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c05a:	68f8      	ldr	r0, [r7, #12]
 800c05c:	f7ff fcf6 	bl	800ba4c <SDMMC_GetCommandResponse>
 800c060:	4603      	mov	r3, r0
 800c062:	461a      	mov	r2, r3
 800c064:	7afb      	ldrb	r3, [r7, #11]
 800c066:	4293      	cmp	r3, r2
 800c068:	d001      	beq.n	800c06e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c06a:	2301      	movs	r3, #1
 800c06c:	e099      	b.n	800c1a2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c06e:	2100      	movs	r1, #0
 800c070:	68f8      	ldr	r0, [r7, #12]
 800c072:	f7ff fcf8 	bl	800ba66 <SDMMC_GetResponse>
 800c076:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c078:	697a      	ldr	r2, [r7, #20]
 800c07a:	4b50      	ldr	r3, [pc, #320]	; (800c1bc <SDMMC_GetCmdResp1+0x1e0>)
 800c07c:	4013      	ands	r3, r2
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d101      	bne.n	800c086 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c082:	2300      	movs	r3, #0
 800c084:	e08d      	b.n	800c1a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	da02      	bge.n	800c092 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c08c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c090:	e087      	b.n	800c1a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d001      	beq.n	800c0a0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c09c:	2340      	movs	r3, #64	; 0x40
 800c09e:	e080      	b.n	800c1a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d001      	beq.n	800c0ae <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c0aa:	2380      	movs	r3, #128	; 0x80
 800c0ac:	e079      	b.n	800c1a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d002      	beq.n	800c0be <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c0b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c0bc:	e071      	b.n	800c1a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c0be:	697b      	ldr	r3, [r7, #20]
 800c0c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d002      	beq.n	800c0ce <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c0c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c0cc:	e069      	b.n	800c1a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d002      	beq.n	800c0de <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c0d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0dc:	e061      	b.n	800c1a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d002      	beq.n	800c0ee <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c0e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c0ec:	e059      	b.n	800c1a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d002      	beq.n	800c0fe <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c0f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c0fc:	e051      	b.n	800c1a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c104:	2b00      	cmp	r3, #0
 800c106:	d002      	beq.n	800c10e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c108:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c10c:	e049      	b.n	800c1a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c114:	2b00      	cmp	r3, #0
 800c116:	d002      	beq.n	800c11e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c118:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c11c:	e041      	b.n	800c1a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c124:	2b00      	cmp	r3, #0
 800c126:	d002      	beq.n	800c12e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c128:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c12c:	e039      	b.n	800c1a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c134:	2b00      	cmp	r3, #0
 800c136:	d002      	beq.n	800c13e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c138:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c13c:	e031      	b.n	800c1a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c144:	2b00      	cmp	r3, #0
 800c146:	d002      	beq.n	800c14e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c148:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c14c:	e029      	b.n	800c1a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c154:	2b00      	cmp	r3, #0
 800c156:	d002      	beq.n	800c15e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c158:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c15c:	e021      	b.n	800c1a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c164:	2b00      	cmp	r3, #0
 800c166:	d002      	beq.n	800c16e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c168:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c16c:	e019      	b.n	800c1a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c174:	2b00      	cmp	r3, #0
 800c176:	d002      	beq.n	800c17e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c178:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c17c:	e011      	b.n	800c1a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c184:	2b00      	cmp	r3, #0
 800c186:	d002      	beq.n	800c18e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c188:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c18c:	e009      	b.n	800c1a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	f003 0308 	and.w	r3, r3, #8
 800c194:	2b00      	cmp	r3, #0
 800c196:	d002      	beq.n	800c19e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c198:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c19c:	e001      	b.n	800c1a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c19e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3720      	adds	r7, #32
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	24000008 	.word	0x24000008
 800c1b0:	10624dd3 	.word	0x10624dd3
 800c1b4:	00200045 	.word	0x00200045
 800c1b8:	002000c5 	.word	0x002000c5
 800c1bc:	fdffe008 	.word	0xfdffe008

0800c1c0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b085      	sub	sp, #20
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c1c8:	4b1f      	ldr	r3, [pc, #124]	; (800c248 <SDMMC_GetCmdResp2+0x88>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4a1f      	ldr	r2, [pc, #124]	; (800c24c <SDMMC_GetCmdResp2+0x8c>)
 800c1ce:	fba2 2303 	umull	r2, r3, r2, r3
 800c1d2:	0a5b      	lsrs	r3, r3, #9
 800c1d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1d8:	fb02 f303 	mul.w	r3, r2, r3
 800c1dc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	1e5a      	subs	r2, r3, #1
 800c1e2:	60fa      	str	r2, [r7, #12]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d102      	bne.n	800c1ee <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c1e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c1ec:	e026      	b.n	800c23c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1f2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d0ef      	beq.n	800c1de <SDMMC_GetCmdResp2+0x1e>
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c204:	2b00      	cmp	r3, #0
 800c206:	d1ea      	bne.n	800c1de <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c20c:	f003 0304 	and.w	r3, r3, #4
 800c210:	2b00      	cmp	r3, #0
 800c212:	d004      	beq.n	800c21e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2204      	movs	r2, #4
 800c218:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c21a:	2304      	movs	r3, #4
 800c21c:	e00e      	b.n	800c23c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c222:	f003 0301 	and.w	r3, r3, #1
 800c226:	2b00      	cmp	r3, #0
 800c228:	d004      	beq.n	800c234 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2201      	movs	r2, #1
 800c22e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c230:	2301      	movs	r3, #1
 800c232:	e003      	b.n	800c23c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	4a06      	ldr	r2, [pc, #24]	; (800c250 <SDMMC_GetCmdResp2+0x90>)
 800c238:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c23a:	2300      	movs	r3, #0
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3714      	adds	r7, #20
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr
 800c248:	24000008 	.word	0x24000008
 800c24c:	10624dd3 	.word	0x10624dd3
 800c250:	002000c5 	.word	0x002000c5

0800c254 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c254:	b480      	push	{r7}
 800c256:	b085      	sub	sp, #20
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c25c:	4b1a      	ldr	r3, [pc, #104]	; (800c2c8 <SDMMC_GetCmdResp3+0x74>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4a1a      	ldr	r2, [pc, #104]	; (800c2cc <SDMMC_GetCmdResp3+0x78>)
 800c262:	fba2 2303 	umull	r2, r3, r2, r3
 800c266:	0a5b      	lsrs	r3, r3, #9
 800c268:	f241 3288 	movw	r2, #5000	; 0x1388
 800c26c:	fb02 f303 	mul.w	r3, r2, r3
 800c270:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	1e5a      	subs	r2, r3, #1
 800c276:	60fa      	str	r2, [r7, #12]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d102      	bne.n	800c282 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c27c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c280:	e01b      	b.n	800c2ba <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c286:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d0ef      	beq.n	800c272 <SDMMC_GetCmdResp3+0x1e>
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d1ea      	bne.n	800c272 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2a0:	f003 0304 	and.w	r3, r3, #4
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d004      	beq.n	800c2b2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2204      	movs	r2, #4
 800c2ac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c2ae:	2304      	movs	r3, #4
 800c2b0:	e003      	b.n	800c2ba <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	4a06      	ldr	r2, [pc, #24]	; (800c2d0 <SDMMC_GetCmdResp3+0x7c>)
 800c2b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c2b8:	2300      	movs	r3, #0
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3714      	adds	r7, #20
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c4:	4770      	bx	lr
 800c2c6:	bf00      	nop
 800c2c8:	24000008 	.word	0x24000008
 800c2cc:	10624dd3 	.word	0x10624dd3
 800c2d0:	002000c5 	.word	0x002000c5

0800c2d4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b088      	sub	sp, #32
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	60f8      	str	r0, [r7, #12]
 800c2dc:	460b      	mov	r3, r1
 800c2de:	607a      	str	r2, [r7, #4]
 800c2e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c2e2:	4b35      	ldr	r3, [pc, #212]	; (800c3b8 <SDMMC_GetCmdResp6+0xe4>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	4a35      	ldr	r2, [pc, #212]	; (800c3bc <SDMMC_GetCmdResp6+0xe8>)
 800c2e8:	fba2 2303 	umull	r2, r3, r2, r3
 800c2ec:	0a5b      	lsrs	r3, r3, #9
 800c2ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2f2:	fb02 f303 	mul.w	r3, r2, r3
 800c2f6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c2f8:	69fb      	ldr	r3, [r7, #28]
 800c2fa:	1e5a      	subs	r2, r3, #1
 800c2fc:	61fa      	str	r2, [r7, #28]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d102      	bne.n	800c308 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c302:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c306:	e052      	b.n	800c3ae <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c30c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c30e:	69bb      	ldr	r3, [r7, #24]
 800c310:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c314:	2b00      	cmp	r3, #0
 800c316:	d0ef      	beq.n	800c2f8 <SDMMC_GetCmdResp6+0x24>
 800c318:	69bb      	ldr	r3, [r7, #24]
 800c31a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d1ea      	bne.n	800c2f8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c326:	f003 0304 	and.w	r3, r3, #4
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d004      	beq.n	800c338 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2204      	movs	r2, #4
 800c332:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c334:	2304      	movs	r3, #4
 800c336:	e03a      	b.n	800c3ae <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c33c:	f003 0301 	and.w	r3, r3, #1
 800c340:	2b00      	cmp	r3, #0
 800c342:	d004      	beq.n	800c34e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2201      	movs	r2, #1
 800c348:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c34a:	2301      	movs	r3, #1
 800c34c:	e02f      	b.n	800c3ae <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c34e:	68f8      	ldr	r0, [r7, #12]
 800c350:	f7ff fb7c 	bl	800ba4c <SDMMC_GetCommandResponse>
 800c354:	4603      	mov	r3, r0
 800c356:	461a      	mov	r2, r3
 800c358:	7afb      	ldrb	r3, [r7, #11]
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d001      	beq.n	800c362 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c35e:	2301      	movs	r3, #1
 800c360:	e025      	b.n	800c3ae <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	4a16      	ldr	r2, [pc, #88]	; (800c3c0 <SDMMC_GetCmdResp6+0xec>)
 800c366:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c368:	2100      	movs	r1, #0
 800c36a:	68f8      	ldr	r0, [r7, #12]
 800c36c:	f7ff fb7b 	bl	800ba66 <SDMMC_GetResponse>
 800c370:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d106      	bne.n	800c38a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	0c1b      	lsrs	r3, r3, #16
 800c380:	b29a      	uxth	r2, r3
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800c386:	2300      	movs	r3, #0
 800c388:	e011      	b.n	800c3ae <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c390:	2b00      	cmp	r3, #0
 800c392:	d002      	beq.n	800c39a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c394:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c398:	e009      	b.n	800c3ae <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d002      	beq.n	800c3aa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c3a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c3a8:	e001      	b.n	800c3ae <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c3aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3720      	adds	r7, #32
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}
 800c3b6:	bf00      	nop
 800c3b8:	24000008 	.word	0x24000008
 800c3bc:	10624dd3 	.word	0x10624dd3
 800c3c0:	002000c5 	.word	0x002000c5

0800c3c4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b085      	sub	sp, #20
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c3cc:	4b22      	ldr	r3, [pc, #136]	; (800c458 <SDMMC_GetCmdResp7+0x94>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a22      	ldr	r2, [pc, #136]	; (800c45c <SDMMC_GetCmdResp7+0x98>)
 800c3d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c3d6:	0a5b      	lsrs	r3, r3, #9
 800c3d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3dc:	fb02 f303 	mul.w	r3, r2, r3
 800c3e0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	1e5a      	subs	r2, r3, #1
 800c3e6:	60fa      	str	r2, [r7, #12]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d102      	bne.n	800c3f2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c3ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c3f0:	e02c      	b.n	800c44c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3f6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d0ef      	beq.n	800c3e2 <SDMMC_GetCmdResp7+0x1e>
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d1ea      	bne.n	800c3e2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c410:	f003 0304 	and.w	r3, r3, #4
 800c414:	2b00      	cmp	r3, #0
 800c416:	d004      	beq.n	800c422 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2204      	movs	r2, #4
 800c41c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c41e:	2304      	movs	r3, #4
 800c420:	e014      	b.n	800c44c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c426:	f003 0301 	and.w	r3, r3, #1
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d004      	beq.n	800c438 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2201      	movs	r2, #1
 800c432:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c434:	2301      	movs	r3, #1
 800c436:	e009      	b.n	800c44c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c43c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c440:	2b00      	cmp	r3, #0
 800c442:	d002      	beq.n	800c44a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2240      	movs	r2, #64	; 0x40
 800c448:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c44a:	2300      	movs	r3, #0

}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3714      	adds	r7, #20
 800c450:	46bd      	mov	sp, r7
 800c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c456:	4770      	bx	lr
 800c458:	24000008 	.word	0x24000008
 800c45c:	10624dd3 	.word	0x10624dd3

0800c460 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c460:	b480      	push	{r7}
 800c462:	b085      	sub	sp, #20
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c468:	4b11      	ldr	r3, [pc, #68]	; (800c4b0 <SDMMC_GetCmdError+0x50>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4a11      	ldr	r2, [pc, #68]	; (800c4b4 <SDMMC_GetCmdError+0x54>)
 800c46e:	fba2 2303 	umull	r2, r3, r2, r3
 800c472:	0a5b      	lsrs	r3, r3, #9
 800c474:	f241 3288 	movw	r2, #5000	; 0x1388
 800c478:	fb02 f303 	mul.w	r3, r2, r3
 800c47c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	1e5a      	subs	r2, r3, #1
 800c482:	60fa      	str	r2, [r7, #12]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d102      	bne.n	800c48e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c488:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c48c:	e009      	b.n	800c4a2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c496:	2b00      	cmp	r3, #0
 800c498:	d0f1      	beq.n	800c47e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	4a06      	ldr	r2, [pc, #24]	; (800c4b8 <SDMMC_GetCmdError+0x58>)
 800c49e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800c4a0:	2300      	movs	r3, #0
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3714      	adds	r7, #20
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr
 800c4ae:	bf00      	nop
 800c4b0:	24000008 	.word	0x24000008
 800c4b4:	10624dd3 	.word	0x10624dd3
 800c4b8:	002000c5 	.word	0x002000c5

0800c4bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c4c0:	4904      	ldr	r1, [pc, #16]	; (800c4d4 <MX_FATFS_Init+0x18>)
 800c4c2:	4805      	ldr	r0, [pc, #20]	; (800c4d8 <MX_FATFS_Init+0x1c>)
 800c4c4:	f003 f876 	bl	800f5b4 <FATFS_LinkDriver>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	461a      	mov	r2, r3
 800c4cc:	4b03      	ldr	r3, [pc, #12]	; (800c4dc <MX_FATFS_Init+0x20>)
 800c4ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c4d0:	bf00      	nop
 800c4d2:	bd80      	pop	{r7, pc}
 800c4d4:	240002f8 	.word	0x240002f8
 800c4d8:	08010858 	.word	0x08010858
 800c4dc:	240002f4 	.word	0x240002f4

0800c4e0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c4e4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b082      	sub	sp, #8
 800c4f4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c4fa:	f000 f885 	bl	800c608 <BSP_SD_IsDetected>
 800c4fe:	4603      	mov	r3, r0
 800c500:	2b01      	cmp	r3, #1
 800c502:	d001      	beq.n	800c508 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c504:	2302      	movs	r3, #2
 800c506:	e012      	b.n	800c52e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c508:	480b      	ldr	r0, [pc, #44]	; (800c538 <BSP_SD_Init+0x48>)
 800c50a:	f7fd fc0d 	bl	8009d28 <HAL_SD_Init>
 800c50e:	4603      	mov	r3, r0
 800c510:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c512:	79fb      	ldrb	r3, [r7, #7]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d109      	bne.n	800c52c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c518:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c51c:	4806      	ldr	r0, [pc, #24]	; (800c538 <BSP_SD_Init+0x48>)
 800c51e:	f7fe fac3 	bl	800aaa8 <HAL_SD_ConfigWideBusOperation>
 800c522:	4603      	mov	r3, r0
 800c524:	2b00      	cmp	r3, #0
 800c526:	d001      	beq.n	800c52c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c528:	2301      	movs	r3, #1
 800c52a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c52c:	79fb      	ldrb	r3, [r7, #7]
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3708      	adds	r7, #8
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	240001c8 	.word	0x240001c8

0800c53c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b086      	sub	sp, #24
 800c540:	af00      	add	r7, sp, #0
 800c542:	60f8      	str	r0, [r7, #12]
 800c544:	60b9      	str	r1, [r7, #8]
 800c546:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c548:	2300      	movs	r3, #0
 800c54a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	68ba      	ldr	r2, [r7, #8]
 800c550:	68f9      	ldr	r1, [r7, #12]
 800c552:	4806      	ldr	r0, [pc, #24]	; (800c56c <BSP_SD_ReadBlocks_DMA+0x30>)
 800c554:	f7fd fd08 	bl	8009f68 <HAL_SD_ReadBlocks_DMA>
 800c558:	4603      	mov	r3, r0
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d001      	beq.n	800c562 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c55e:	2301      	movs	r3, #1
 800c560:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c562:	7dfb      	ldrb	r3, [r7, #23]
}
 800c564:	4618      	mov	r0, r3
 800c566:	3718      	adds	r7, #24
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}
 800c56c:	240001c8 	.word	0x240001c8

0800c570 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b086      	sub	sp, #24
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c57c:	2300      	movs	r3, #0
 800c57e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	68ba      	ldr	r2, [r7, #8]
 800c584:	68f9      	ldr	r1, [r7, #12]
 800c586:	4806      	ldr	r0, [pc, #24]	; (800c5a0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c588:	f7fd fd96 	bl	800a0b8 <HAL_SD_WriteBlocks_DMA>
 800c58c:	4603      	mov	r3, r0
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d001      	beq.n	800c596 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c592:	2301      	movs	r3, #1
 800c594:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c596:	7dfb      	ldrb	r3, [r7, #23]
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3718      	adds	r7, #24
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}
 800c5a0:	240001c8 	.word	0x240001c8

0800c5a4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c5a8:	4805      	ldr	r0, [pc, #20]	; (800c5c0 <BSP_SD_GetCardState+0x1c>)
 800c5aa:	f7fe fb8f 	bl	800accc <HAL_SD_GetCardState>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	2b04      	cmp	r3, #4
 800c5b2:	bf14      	ite	ne
 800c5b4:	2301      	movne	r3, #1
 800c5b6:	2300      	moveq	r3, #0
 800c5b8:	b2db      	uxtb	r3, r3
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	240001c8 	.word	0x240001c8

0800c5c4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b082      	sub	sp, #8
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c5cc:	6879      	ldr	r1, [r7, #4]
 800c5ce:	4803      	ldr	r0, [pc, #12]	; (800c5dc <BSP_SD_GetCardInfo+0x18>)
 800c5d0:	f7fe fa3e 	bl	800aa50 <HAL_SD_GetCardInfo>
}
 800c5d4:	bf00      	nop
 800c5d6:	3708      	adds	r7, #8
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	240001c8 	.word	0x240001c8

0800c5e0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b082      	sub	sp, #8
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800c5e8:	f000 f9a0 	bl	800c92c <BSP_SD_WriteCpltCallback>
}
 800c5ec:	bf00      	nop
 800c5ee:	3708      	adds	r7, #8
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c5fc:	f000 f9a2 	bl	800c944 <BSP_SD_ReadCpltCallback>
}
 800c600:	bf00      	nop
 800c602:	3708      	adds	r7, #8
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}

0800c608 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b082      	sub	sp, #8
 800c60c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c60e:	2301      	movs	r3, #1
 800c610:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c612:	f000 f80b 	bl	800c62c <BSP_PlatformIsDetected>
 800c616:	4603      	mov	r3, r0
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d101      	bne.n	800c620 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c61c:	2300      	movs	r3, #0
 800c61e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c620:	79fb      	ldrb	r3, [r7, #7]
 800c622:	b2db      	uxtb	r3, r3
}
 800c624:	4618      	mov	r0, r3
 800c626:	3708      	adds	r7, #8
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}

0800c62c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b082      	sub	sp, #8
 800c630:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c632:	2301      	movs	r3, #1
 800c634:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c636:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c63a:	4806      	ldr	r0, [pc, #24]	; (800c654 <BSP_PlatformIsDetected+0x28>)
 800c63c:	f7f8 fa42 	bl	8004ac4 <HAL_GPIO_ReadPin>
 800c640:	4603      	mov	r3, r0
 800c642:	2b00      	cmp	r3, #0
 800c644:	d001      	beq.n	800c64a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c646:	2300      	movs	r3, #0
 800c648:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c64a:	79fb      	ldrb	r3, [r7, #7]
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3708      	adds	r7, #8
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	58021800 	.word	0x58021800

0800c658 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800c660:	f7f5 fb3e 	bl	8001ce0 <HAL_GetTick>
 800c664:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800c666:	e006      	b.n	800c676 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c668:	f7ff ff9c 	bl	800c5a4 <BSP_SD_GetCardState>
 800c66c:	4603      	mov	r3, r0
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d101      	bne.n	800c676 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c672:	2300      	movs	r3, #0
 800c674:	e009      	b.n	800c68a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800c676:	f7f5 fb33 	bl	8001ce0 <HAL_GetTick>
 800c67a:	4602      	mov	r2, r0
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	1ad3      	subs	r3, r2, r3
 800c680:	687a      	ldr	r2, [r7, #4]
 800c682:	429a      	cmp	r2, r3
 800c684:	d8f0      	bhi.n	800c668 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3710      	adds	r7, #16
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}
	...

0800c694 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b082      	sub	sp, #8
 800c698:	af00      	add	r7, sp, #0
 800c69a:	4603      	mov	r3, r0
 800c69c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c69e:	4b0b      	ldr	r3, [pc, #44]	; (800c6cc <SD_CheckStatus+0x38>)
 800c6a0:	2201      	movs	r2, #1
 800c6a2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c6a4:	f7ff ff7e 	bl	800c5a4 <BSP_SD_GetCardState>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d107      	bne.n	800c6be <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c6ae:	4b07      	ldr	r3, [pc, #28]	; (800c6cc <SD_CheckStatus+0x38>)
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	f023 0301 	bic.w	r3, r3, #1
 800c6b8:	b2da      	uxtb	r2, r3
 800c6ba:	4b04      	ldr	r3, [pc, #16]	; (800c6cc <SD_CheckStatus+0x38>)
 800c6bc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c6be:	4b03      	ldr	r3, [pc, #12]	; (800c6cc <SD_CheckStatus+0x38>)
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	b2db      	uxtb	r3, r3
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3708      	adds	r7, #8
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}
 800c6cc:	24000015 	.word	0x24000015

0800c6d0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c6da:	f7ff ff09 	bl	800c4f0 <BSP_SD_Init>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d107      	bne.n	800c6f4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800c6e4:	79fb      	ldrb	r3, [r7, #7]
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7ff ffd4 	bl	800c694 <SD_CheckStatus>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	4b04      	ldr	r3, [pc, #16]	; (800c704 <SD_initialize+0x34>)
 800c6f2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c6f4:	4b03      	ldr	r3, [pc, #12]	; (800c704 <SD_initialize+0x34>)
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	b2db      	uxtb	r3, r3
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3708      	adds	r7, #8
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop
 800c704:	24000015 	.word	0x24000015

0800c708 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	4603      	mov	r3, r0
 800c710:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c712:	79fb      	ldrb	r3, [r7, #7]
 800c714:	4618      	mov	r0, r3
 800c716:	f7ff ffbd 	bl	800c694 <SD_CheckStatus>
 800c71a:	4603      	mov	r3, r0
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3708      	adds	r7, #8
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}

0800c724 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b086      	sub	sp, #24
 800c728:	af00      	add	r7, sp, #0
 800c72a:	60b9      	str	r1, [r7, #8]
 800c72c:	607a      	str	r2, [r7, #4]
 800c72e:	603b      	str	r3, [r7, #0]
 800c730:	4603      	mov	r3, r0
 800c732:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c734:	2301      	movs	r3, #1
 800c736:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c738:	f247 5030 	movw	r0, #30000	; 0x7530
 800c73c:	f7ff ff8c 	bl	800c658 <SD_CheckStatusWithTimeout>
 800c740:	4603      	mov	r3, r0
 800c742:	2b00      	cmp	r3, #0
 800c744:	da01      	bge.n	800c74a <SD_read+0x26>
  {
    return res;
 800c746:	7dfb      	ldrb	r3, [r7, #23]
 800c748:	e03b      	b.n	800c7c2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800c74a:	683a      	ldr	r2, [r7, #0]
 800c74c:	6879      	ldr	r1, [r7, #4]
 800c74e:	68b8      	ldr	r0, [r7, #8]
 800c750:	f7ff fef4 	bl	800c53c <BSP_SD_ReadBlocks_DMA>
 800c754:	4603      	mov	r3, r0
 800c756:	2b00      	cmp	r3, #0
 800c758:	d132      	bne.n	800c7c0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800c75a:	4b1c      	ldr	r3, [pc, #112]	; (800c7cc <SD_read+0xa8>)
 800c75c:	2200      	movs	r2, #0
 800c75e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800c760:	f7f5 fabe 	bl	8001ce0 <HAL_GetTick>
 800c764:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c766:	bf00      	nop
 800c768:	4b18      	ldr	r3, [pc, #96]	; (800c7cc <SD_read+0xa8>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d108      	bne.n	800c782 <SD_read+0x5e>
 800c770:	f7f5 fab6 	bl	8001ce0 <HAL_GetTick>
 800c774:	4602      	mov	r2, r0
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	1ad3      	subs	r3, r2, r3
 800c77a:	f247 522f 	movw	r2, #29999	; 0x752f
 800c77e:	4293      	cmp	r3, r2
 800c780:	d9f2      	bls.n	800c768 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800c782:	4b12      	ldr	r3, [pc, #72]	; (800c7cc <SD_read+0xa8>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d102      	bne.n	800c790 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800c78a:	2301      	movs	r3, #1
 800c78c:	75fb      	strb	r3, [r7, #23]
 800c78e:	e017      	b.n	800c7c0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800c790:	4b0e      	ldr	r3, [pc, #56]	; (800c7cc <SD_read+0xa8>)
 800c792:	2200      	movs	r2, #0
 800c794:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c796:	f7f5 faa3 	bl	8001ce0 <HAL_GetTick>
 800c79a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c79c:	e007      	b.n	800c7ae <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c79e:	f7ff ff01 	bl	800c5a4 <BSP_SD_GetCardState>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d102      	bne.n	800c7ae <SD_read+0x8a>
          {
            res = RES_OK;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800c7ac:	e008      	b.n	800c7c0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c7ae:	f7f5 fa97 	bl	8001ce0 <HAL_GetTick>
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	1ad3      	subs	r3, r2, r3
 800c7b8:	f247 522f 	movw	r2, #29999	; 0x752f
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d9ee      	bls.n	800c79e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800c7c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3718      	adds	r7, #24
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	24000300 	.word	0x24000300

0800c7d0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b086      	sub	sp, #24
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	60b9      	str	r1, [r7, #8]
 800c7d8:	607a      	str	r2, [r7, #4]
 800c7da:	603b      	str	r3, [r7, #0]
 800c7dc:	4603      	mov	r3, r0
 800c7de:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800c7e4:	4b24      	ldr	r3, [pc, #144]	; (800c878 <SD_write+0xa8>)
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c7ea:	f247 5030 	movw	r0, #30000	; 0x7530
 800c7ee:	f7ff ff33 	bl	800c658 <SD_CheckStatusWithTimeout>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	da01      	bge.n	800c7fc <SD_write+0x2c>
  {
    return res;
 800c7f8:	7dfb      	ldrb	r3, [r7, #23]
 800c7fa:	e038      	b.n	800c86e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c7fc:	683a      	ldr	r2, [r7, #0]
 800c7fe:	6879      	ldr	r1, [r7, #4]
 800c800:	68b8      	ldr	r0, [r7, #8]
 800c802:	f7ff feb5 	bl	800c570 <BSP_SD_WriteBlocks_DMA>
 800c806:	4603      	mov	r3, r0
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d12f      	bne.n	800c86c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800c80c:	f7f5 fa68 	bl	8001ce0 <HAL_GetTick>
 800c810:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c812:	bf00      	nop
 800c814:	4b18      	ldr	r3, [pc, #96]	; (800c878 <SD_write+0xa8>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d108      	bne.n	800c82e <SD_write+0x5e>
 800c81c:	f7f5 fa60 	bl	8001ce0 <HAL_GetTick>
 800c820:	4602      	mov	r2, r0
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	1ad3      	subs	r3, r2, r3
 800c826:	f247 522f 	movw	r2, #29999	; 0x752f
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d9f2      	bls.n	800c814 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800c82e:	4b12      	ldr	r3, [pc, #72]	; (800c878 <SD_write+0xa8>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d102      	bne.n	800c83c <SD_write+0x6c>
      {
        res = RES_ERROR;
 800c836:	2301      	movs	r3, #1
 800c838:	75fb      	strb	r3, [r7, #23]
 800c83a:	e017      	b.n	800c86c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800c83c:	4b0e      	ldr	r3, [pc, #56]	; (800c878 <SD_write+0xa8>)
 800c83e:	2200      	movs	r2, #0
 800c840:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c842:	f7f5 fa4d 	bl	8001ce0 <HAL_GetTick>
 800c846:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c848:	e007      	b.n	800c85a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c84a:	f7ff feab 	bl	800c5a4 <BSP_SD_GetCardState>
 800c84e:	4603      	mov	r3, r0
 800c850:	2b00      	cmp	r3, #0
 800c852:	d102      	bne.n	800c85a <SD_write+0x8a>
          {
            res = RES_OK;
 800c854:	2300      	movs	r3, #0
 800c856:	75fb      	strb	r3, [r7, #23]
            break;
 800c858:	e008      	b.n	800c86c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c85a:	f7f5 fa41 	bl	8001ce0 <HAL_GetTick>
 800c85e:	4602      	mov	r2, r0
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	1ad3      	subs	r3, r2, r3
 800c864:	f247 522f 	movw	r2, #29999	; 0x752f
 800c868:	4293      	cmp	r3, r2
 800c86a:	d9ee      	bls.n	800c84a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800c86c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3718      	adds	r7, #24
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
 800c876:	bf00      	nop
 800c878:	240002fc 	.word	0x240002fc

0800c87c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b08c      	sub	sp, #48	; 0x30
 800c880:	af00      	add	r7, sp, #0
 800c882:	4603      	mov	r3, r0
 800c884:	603a      	str	r2, [r7, #0]
 800c886:	71fb      	strb	r3, [r7, #7]
 800c888:	460b      	mov	r3, r1
 800c88a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c88c:	2301      	movs	r3, #1
 800c88e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c892:	4b25      	ldr	r3, [pc, #148]	; (800c928 <SD_ioctl+0xac>)
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	b2db      	uxtb	r3, r3
 800c898:	f003 0301 	and.w	r3, r3, #1
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d001      	beq.n	800c8a4 <SD_ioctl+0x28>
 800c8a0:	2303      	movs	r3, #3
 800c8a2:	e03c      	b.n	800c91e <SD_ioctl+0xa2>

  switch (cmd)
 800c8a4:	79bb      	ldrb	r3, [r7, #6]
 800c8a6:	2b03      	cmp	r3, #3
 800c8a8:	d834      	bhi.n	800c914 <SD_ioctl+0x98>
 800c8aa:	a201      	add	r2, pc, #4	; (adr r2, 800c8b0 <SD_ioctl+0x34>)
 800c8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8b0:	0800c8c1 	.word	0x0800c8c1
 800c8b4:	0800c8c9 	.word	0x0800c8c9
 800c8b8:	0800c8e1 	.word	0x0800c8e1
 800c8bc:	0800c8fb 	.word	0x0800c8fb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c8c6:	e028      	b.n	800c91a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c8c8:	f107 0308 	add.w	r3, r7, #8
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f7ff fe79 	bl	800c5c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c8d2:	6a3a      	ldr	r2, [r7, #32]
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c8de:	e01c      	b.n	800c91a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c8e0:	f107 0308 	add.w	r3, r7, #8
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f7ff fe6d 	bl	800c5c4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ec:	b29a      	uxth	r2, r3
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c8f8:	e00f      	b.n	800c91a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c8fa:	f107 0308 	add.w	r3, r7, #8
 800c8fe:	4618      	mov	r0, r3
 800c900:	f7ff fe60 	bl	800c5c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c906:	0a5a      	lsrs	r2, r3, #9
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c90c:	2300      	movs	r3, #0
 800c90e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c912:	e002      	b.n	800c91a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c914:	2304      	movs	r3, #4
 800c916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c91a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3730      	adds	r7, #48	; 0x30
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop
 800c928:	24000015 	.word	0x24000015

0800c92c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800c92c:	b480      	push	{r7}
 800c92e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800c930:	4b03      	ldr	r3, [pc, #12]	; (800c940 <BSP_SD_WriteCpltCallback+0x14>)
 800c932:	2201      	movs	r2, #1
 800c934:	601a      	str	r2, [r3, #0]
}
 800c936:	bf00      	nop
 800c938:	46bd      	mov	sp, r7
 800c93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93e:	4770      	bx	lr
 800c940:	240002fc 	.word	0x240002fc

0800c944 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c944:	b480      	push	{r7}
 800c946:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800c948:	4b03      	ldr	r3, [pc, #12]	; (800c958 <BSP_SD_ReadCpltCallback+0x14>)
 800c94a:	2201      	movs	r2, #1
 800c94c:	601a      	str	r2, [r3, #0]
}
 800c94e:	bf00      	nop
 800c950:	46bd      	mov	sp, r7
 800c952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c956:	4770      	bx	lr
 800c958:	24000300 	.word	0x24000300

0800c95c <logger_init>:

static struct line_buffer_t __attribute__((section(".sdram"))) line_buffer;
static char __attribute__((section(".sdram"))) msg_parsed[LOGGER_PARSE_BUFFER_SIZE];

void logger_init(void)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	af00      	add	r7, sp, #0
	memset(&line_buffer, 0, sizeof(line_buffer));
 800c960:	2259      	movs	r2, #89	; 0x59
 800c962:	2100      	movs	r1, #0
 800c964:	4802      	ldr	r0, [pc, #8]	; (800c970 <logger_init+0x14>)
 800c966:	f002 ff4d 	bl	800f804 <memset>
}
 800c96a:	bf00      	nop
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	c001043c 	.word	0xc001043c

0800c974 <logger_log>:

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wformat-truncation"

void logger_log(const char *msg, ...)
{
 800c974:	b40f      	push	{r0, r1, r2, r3}
 800c976:	b580      	push	{r7, lr}
 800c978:	b086      	sub	sp, #24
 800c97a:	af00      	add	r7, sp, #0
	va_list arg_list;

	va_start(arg_list, msg);
 800c97c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c980:	603b      	str	r3, [r7, #0]
	int length = vsnprintf(msg_parsed, sizeof(msg_parsed), msg, arg_list);
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	6a3a      	ldr	r2, [r7, #32]
 800c986:	2180      	movs	r1, #128	; 0x80
 800c988:	4859      	ldr	r0, [pc, #356]	; (800caf0 <logger_log+0x17c>)
 800c98a:	f002 ffa3 	bl	800f8d4 <vsniprintf>
 800c98e:	60f8      	str	r0, [r7, #12]
	va_end(arg_list);

	if (length == 0) {
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	2b00      	cmp	r3, #0
 800c994:	f000 80a4 	beq.w	800cae0 <logger_log+0x16c>
		return;
	}

	size_t total_copied = 0;
 800c998:	2300      	movs	r3, #0
 800c99a:	617b      	str	r3, [r7, #20]
	while (total_copied < length) {
 800c99c:	e07c      	b.n	800ca98 <logger_log+0x124>
		if (line_buffer.lines_used < LOGGER_LINES) {
 800c99e:	4b55      	ldr	r3, [pc, #340]	; (800caf4 <logger_log+0x180>)
 800c9a0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c9a4:	2b03      	cmp	r3, #3
 800c9a6:	d845      	bhi.n	800ca34 <logger_log+0xc0>
			snprintf(&line_buffer.data[line_buffer.lines_used * LOGGER_LINE_SIZE], LOGGER_LINE_SIZE, "%s", &msg_parsed[total_copied]);
 800c9a8:	4b52      	ldr	r3, [pc, #328]	; (800caf4 <logger_log+0x180>)
 800c9aa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	2316      	movs	r3, #22
 800c9b2:	fb02 f303 	mul.w	r3, r2, r3
 800c9b6:	4a4f      	ldr	r2, [pc, #316]	; (800caf4 <logger_log+0x180>)
 800c9b8:	1898      	adds	r0, r3, r2
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	4a4c      	ldr	r2, [pc, #304]	; (800caf0 <logger_log+0x17c>)
 800c9be:	4413      	add	r3, r2
 800c9c0:	4a4d      	ldr	r2, [pc, #308]	; (800caf8 <logger_log+0x184>)
 800c9c2:	2116      	movs	r1, #22
 800c9c4:	f002 ff26 	bl	800f814 <sniprintf>

			const size_t copied = MIN(LOGGER_LINE_LENGTH, strlen(&msg_parsed[total_copied]));
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	4a49      	ldr	r2, [pc, #292]	; (800caf0 <logger_log+0x17c>)
 800c9cc:	4413      	add	r3, r2
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f7f3 fc86 	bl	80002e0 <strlen>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	2b15      	cmp	r3, #21
 800c9d8:	d807      	bhi.n	800c9ea <logger_log+0x76>
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	4a44      	ldr	r2, [pc, #272]	; (800caf0 <logger_log+0x17c>)
 800c9de:	4413      	add	r3, r2
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7f3 fc7d 	bl	80002e0 <strlen>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	e000      	b.n	800c9ec <logger_log+0x78>
 800c9ea:	2315      	movs	r3, #21
 800c9ec:	607b      	str	r3, [r7, #4]
			if (copied < LOGGER_LINE_LENGTH) {
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2b14      	cmp	r3, #20
 800c9f2:	d812      	bhi.n	800ca1a <logger_log+0xa6>
				memset(&line_buffer.data[line_buffer.lines_used * LOGGER_LINE_SIZE + copied], ' ', LOGGER_LINE_LENGTH - copied);
 800c9f4:	4b3f      	ldr	r3, [pc, #252]	; (800caf4 <logger_log+0x180>)
 800c9f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c9fa:	461a      	mov	r2, r3
 800c9fc:	2316      	movs	r3, #22
 800c9fe:	fb02 f303 	mul.w	r3, r2, r3
 800ca02:	461a      	mov	r2, r3
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	4413      	add	r3, r2
 800ca08:	4a3a      	ldr	r2, [pc, #232]	; (800caf4 <logger_log+0x180>)
 800ca0a:	1898      	adds	r0, r3, r2
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f1c3 0315 	rsb	r3, r3, #21
 800ca12:	461a      	mov	r2, r3
 800ca14:	2120      	movs	r1, #32
 800ca16:	f002 fef5 	bl	800f804 <memset>
			}
			total_copied += copied;
 800ca1a:	697a      	ldr	r2, [r7, #20]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	4413      	add	r3, r2
 800ca20:	617b      	str	r3, [r7, #20]

			++line_buffer.lines_used;
 800ca22:	4b34      	ldr	r3, [pc, #208]	; (800caf4 <logger_log+0x180>)
 800ca24:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ca28:	3301      	adds	r3, #1
 800ca2a:	b2da      	uxtb	r2, r3
 800ca2c:	4b31      	ldr	r3, [pc, #196]	; (800caf4 <logger_log+0x180>)
 800ca2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800ca32:	e031      	b.n	800ca98 <logger_log+0x124>
		}
		else {
			memmove(&line_buffer.data[0], &line_buffer.data[LOGGER_LINE_SIZE], (LOGGER_LINES - 1) * LOGGER_LINE_SIZE); // Move all lines one line up
 800ca34:	2242      	movs	r2, #66	; 0x42
 800ca36:	4931      	ldr	r1, [pc, #196]	; (800cafc <logger_log+0x188>)
 800ca38:	482e      	ldr	r0, [pc, #184]	; (800caf4 <logger_log+0x180>)
 800ca3a:	f002 fec9 	bl	800f7d0 <memmove>
			snprintf(&line_buffer.data[(LOGGER_LINES - 1) * LOGGER_LINE_SIZE], LOGGER_LINE_SIZE, "%s", &msg_parsed[total_copied]); // Write to last line
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	4a2b      	ldr	r2, [pc, #172]	; (800caf0 <logger_log+0x17c>)
 800ca42:	4413      	add	r3, r2
 800ca44:	4a2c      	ldr	r2, [pc, #176]	; (800caf8 <logger_log+0x184>)
 800ca46:	2116      	movs	r1, #22
 800ca48:	482d      	ldr	r0, [pc, #180]	; (800cb00 <logger_log+0x18c>)
 800ca4a:	f002 fee3 	bl	800f814 <sniprintf>

			const size_t copied = MIN(LOGGER_LINE_LENGTH, strlen(&msg_parsed[total_copied]));
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	4a27      	ldr	r2, [pc, #156]	; (800caf0 <logger_log+0x17c>)
 800ca52:	4413      	add	r3, r2
 800ca54:	4618      	mov	r0, r3
 800ca56:	f7f3 fc43 	bl	80002e0 <strlen>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	2b15      	cmp	r3, #21
 800ca5e:	d807      	bhi.n	800ca70 <logger_log+0xfc>
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	4a23      	ldr	r2, [pc, #140]	; (800caf0 <logger_log+0x17c>)
 800ca64:	4413      	add	r3, r2
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7f3 fc3a 	bl	80002e0 <strlen>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	e000      	b.n	800ca72 <logger_log+0xfe>
 800ca70:	2315      	movs	r3, #21
 800ca72:	60bb      	str	r3, [r7, #8]
			if (copied < LOGGER_LINE_LENGTH) {
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	2b14      	cmp	r3, #20
 800ca78:	d80a      	bhi.n	800ca90 <logger_log+0x11c>
				memset(&line_buffer.data[(LOGGER_LINES - 1) * LOGGER_LINE_SIZE + copied], ' ', LOGGER_LINE_LENGTH - copied);
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	3342      	adds	r3, #66	; 0x42
 800ca7e:	4a1d      	ldr	r2, [pc, #116]	; (800caf4 <logger_log+0x180>)
 800ca80:	1898      	adds	r0, r3, r2
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	f1c3 0315 	rsb	r3, r3, #21
 800ca88:	461a      	mov	r2, r3
 800ca8a:	2120      	movs	r1, #32
 800ca8c:	f002 feba 	bl	800f804 <memset>
			}
			total_copied += copied;
 800ca90:	697a      	ldr	r2, [r7, #20]
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	4413      	add	r3, r2
 800ca96:	617b      	str	r3, [r7, #20]
	while (total_copied < length) {
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	697a      	ldr	r2, [r7, #20]
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	f4ff af7e 	bcc.w	800c99e <logger_log+0x2a>
		}
	}

	for (size_t i = 0; i < LOGGER_LINES; ++i) {
 800caa2:	2300      	movs	r3, #0
 800caa4:	613b      	str	r3, [r7, #16]
 800caa6:	e015      	b.n	800cad4 <logger_log+0x160>
		ssd1306_SetCursor(0, i * LOGGER_FONT_HEIGHT);
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	b2db      	uxtb	r3, r3
 800caac:	00db      	lsls	r3, r3, #3
 800caae:	b2db      	uxtb	r3, r3
 800cab0:	4619      	mov	r1, r3
 800cab2:	2000      	movs	r0, #0
 800cab4:	f7f3 ff2a 	bl	800090c <ssd1306_SetCursor>
		ssd1306_WriteString(&line_buffer.data[i * LOGGER_LINE_SIZE], Font_6x8, White);
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	2216      	movs	r2, #22
 800cabc:	fb02 f303 	mul.w	r3, r2, r3
 800cac0:	4a0c      	ldr	r2, [pc, #48]	; (800caf4 <logger_log+0x180>)
 800cac2:	1898      	adds	r0, r3, r2
 800cac4:	4a0f      	ldr	r2, [pc, #60]	; (800cb04 <logger_log+0x190>)
 800cac6:	2301      	movs	r3, #1
 800cac8:	ca06      	ldmia	r2, {r1, r2}
 800caca:	f7f3 fef9 	bl	80008c0 <ssd1306_WriteString>
	for (size_t i = 0; i < LOGGER_LINES; ++i) {
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	3301      	adds	r3, #1
 800cad2:	613b      	str	r3, [r7, #16]
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	2b03      	cmp	r3, #3
 800cad8:	d9e6      	bls.n	800caa8 <logger_log+0x134>
	}
	ssd1306_UpdateScreen();
 800cada:	f7f3 fded 	bl	80006b8 <ssd1306_UpdateScreen>
 800cade:	e000      	b.n	800cae2 <logger_log+0x16e>
		return;
 800cae0:	bf00      	nop
}
 800cae2:	3718      	adds	r7, #24
 800cae4:	46bd      	mov	sp, r7
 800cae6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800caea:	b004      	add	sp, #16
 800caec:	4770      	bx	lr
 800caee:	bf00      	nop
 800caf0:	c0010498 	.word	0xc0010498
 800caf4:	c001043c 	.word	0xc001043c
 800caf8:	08010238 	.word	0x08010238
 800cafc:	c0010452 	.word	0xc0010452
 800cb00:	c001047e 	.word	0xc001047e
 800cb04:	24000000 	.word	0x24000000

0800cb08 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b084      	sub	sp, #16
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	4603      	mov	r3, r0
 800cb10:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cb12:	79fb      	ldrb	r3, [r7, #7]
 800cb14:	4a08      	ldr	r2, [pc, #32]	; (800cb38 <disk_status+0x30>)
 800cb16:	009b      	lsls	r3, r3, #2
 800cb18:	4413      	add	r3, r2
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	79fa      	ldrb	r2, [r7, #7]
 800cb20:	4905      	ldr	r1, [pc, #20]	; (800cb38 <disk_status+0x30>)
 800cb22:	440a      	add	r2, r1
 800cb24:	7a12      	ldrb	r2, [r2, #8]
 800cb26:	4610      	mov	r0, r2
 800cb28:	4798      	blx	r3
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cb2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3710      	adds	r7, #16
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	2400052c 	.word	0x2400052c

0800cb3c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b084      	sub	sp, #16
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	4603      	mov	r3, r0
 800cb44:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cb46:	2300      	movs	r3, #0
 800cb48:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cb4a:	79fb      	ldrb	r3, [r7, #7]
 800cb4c:	4a0d      	ldr	r2, [pc, #52]	; (800cb84 <disk_initialize+0x48>)
 800cb4e:	5cd3      	ldrb	r3, [r2, r3]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d111      	bne.n	800cb78 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800cb54:	79fb      	ldrb	r3, [r7, #7]
 800cb56:	4a0b      	ldr	r2, [pc, #44]	; (800cb84 <disk_initialize+0x48>)
 800cb58:	2101      	movs	r1, #1
 800cb5a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cb5c:	79fb      	ldrb	r3, [r7, #7]
 800cb5e:	4a09      	ldr	r2, [pc, #36]	; (800cb84 <disk_initialize+0x48>)
 800cb60:	009b      	lsls	r3, r3, #2
 800cb62:	4413      	add	r3, r2
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	79fa      	ldrb	r2, [r7, #7]
 800cb6a:	4906      	ldr	r1, [pc, #24]	; (800cb84 <disk_initialize+0x48>)
 800cb6c:	440a      	add	r2, r1
 800cb6e:	7a12      	ldrb	r2, [r2, #8]
 800cb70:	4610      	mov	r0, r2
 800cb72:	4798      	blx	r3
 800cb74:	4603      	mov	r3, r0
 800cb76:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cb78:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3710      	adds	r7, #16
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}
 800cb82:	bf00      	nop
 800cb84:	2400052c 	.word	0x2400052c

0800cb88 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cb88:	b590      	push	{r4, r7, lr}
 800cb8a:	b087      	sub	sp, #28
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	60b9      	str	r1, [r7, #8]
 800cb90:	607a      	str	r2, [r7, #4]
 800cb92:	603b      	str	r3, [r7, #0]
 800cb94:	4603      	mov	r3, r0
 800cb96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cb98:	7bfb      	ldrb	r3, [r7, #15]
 800cb9a:	4a0a      	ldr	r2, [pc, #40]	; (800cbc4 <disk_read+0x3c>)
 800cb9c:	009b      	lsls	r3, r3, #2
 800cb9e:	4413      	add	r3, r2
 800cba0:	685b      	ldr	r3, [r3, #4]
 800cba2:	689c      	ldr	r4, [r3, #8]
 800cba4:	7bfb      	ldrb	r3, [r7, #15]
 800cba6:	4a07      	ldr	r2, [pc, #28]	; (800cbc4 <disk_read+0x3c>)
 800cba8:	4413      	add	r3, r2
 800cbaa:	7a18      	ldrb	r0, [r3, #8]
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	687a      	ldr	r2, [r7, #4]
 800cbb0:	68b9      	ldr	r1, [r7, #8]
 800cbb2:	47a0      	blx	r4
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	75fb      	strb	r3, [r7, #23]
  return res;
 800cbb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	371c      	adds	r7, #28
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd90      	pop	{r4, r7, pc}
 800cbc2:	bf00      	nop
 800cbc4:	2400052c 	.word	0x2400052c

0800cbc8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cbc8:	b590      	push	{r4, r7, lr}
 800cbca:	b087      	sub	sp, #28
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	60b9      	str	r1, [r7, #8]
 800cbd0:	607a      	str	r2, [r7, #4]
 800cbd2:	603b      	str	r3, [r7, #0]
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cbd8:	7bfb      	ldrb	r3, [r7, #15]
 800cbda:	4a0a      	ldr	r2, [pc, #40]	; (800cc04 <disk_write+0x3c>)
 800cbdc:	009b      	lsls	r3, r3, #2
 800cbde:	4413      	add	r3, r2
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	68dc      	ldr	r4, [r3, #12]
 800cbe4:	7bfb      	ldrb	r3, [r7, #15]
 800cbe6:	4a07      	ldr	r2, [pc, #28]	; (800cc04 <disk_write+0x3c>)
 800cbe8:	4413      	add	r3, r2
 800cbea:	7a18      	ldrb	r0, [r3, #8]
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	687a      	ldr	r2, [r7, #4]
 800cbf0:	68b9      	ldr	r1, [r7, #8]
 800cbf2:	47a0      	blx	r4
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	75fb      	strb	r3, [r7, #23]
  return res;
 800cbf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	371c      	adds	r7, #28
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd90      	pop	{r4, r7, pc}
 800cc02:	bf00      	nop
 800cc04:	2400052c 	.word	0x2400052c

0800cc08 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b084      	sub	sp, #16
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	4603      	mov	r3, r0
 800cc10:	603a      	str	r2, [r7, #0]
 800cc12:	71fb      	strb	r3, [r7, #7]
 800cc14:	460b      	mov	r3, r1
 800cc16:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cc18:	79fb      	ldrb	r3, [r7, #7]
 800cc1a:	4a09      	ldr	r2, [pc, #36]	; (800cc40 <disk_ioctl+0x38>)
 800cc1c:	009b      	lsls	r3, r3, #2
 800cc1e:	4413      	add	r3, r2
 800cc20:	685b      	ldr	r3, [r3, #4]
 800cc22:	691b      	ldr	r3, [r3, #16]
 800cc24:	79fa      	ldrb	r2, [r7, #7]
 800cc26:	4906      	ldr	r1, [pc, #24]	; (800cc40 <disk_ioctl+0x38>)
 800cc28:	440a      	add	r2, r1
 800cc2a:	7a10      	ldrb	r0, [r2, #8]
 800cc2c:	79b9      	ldrb	r1, [r7, #6]
 800cc2e:	683a      	ldr	r2, [r7, #0]
 800cc30:	4798      	blx	r3
 800cc32:	4603      	mov	r3, r0
 800cc34:	73fb      	strb	r3, [r7, #15]
  return res;
 800cc36:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3710      	adds	r7, #16
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}
 800cc40:	2400052c 	.word	0x2400052c

0800cc44 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cc44:	b480      	push	{r7}
 800cc46:	b085      	sub	sp, #20
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	3301      	adds	r3, #1
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cc54:	89fb      	ldrh	r3, [r7, #14]
 800cc56:	021b      	lsls	r3, r3, #8
 800cc58:	b21a      	sxth	r2, r3
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	b21b      	sxth	r3, r3
 800cc60:	4313      	orrs	r3, r2
 800cc62:	b21b      	sxth	r3, r3
 800cc64:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cc66:	89fb      	ldrh	r3, [r7, #14]
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3714      	adds	r7, #20
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc72:	4770      	bx	lr

0800cc74 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cc74:	b480      	push	{r7}
 800cc76:	b085      	sub	sp, #20
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	3303      	adds	r3, #3
 800cc80:	781b      	ldrb	r3, [r3, #0]
 800cc82:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	021b      	lsls	r3, r3, #8
 800cc88:	687a      	ldr	r2, [r7, #4]
 800cc8a:	3202      	adds	r2, #2
 800cc8c:	7812      	ldrb	r2, [r2, #0]
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	021b      	lsls	r3, r3, #8
 800cc96:	687a      	ldr	r2, [r7, #4]
 800cc98:	3201      	adds	r2, #1
 800cc9a:	7812      	ldrb	r2, [r2, #0]
 800cc9c:	4313      	orrs	r3, r2
 800cc9e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	021b      	lsls	r3, r3, #8
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	7812      	ldrb	r2, [r2, #0]
 800cca8:	4313      	orrs	r3, r2
 800ccaa:	60fb      	str	r3, [r7, #12]
	return rv;
 800ccac:	68fb      	ldr	r3, [r7, #12]
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3714      	adds	r7, #20
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb8:	4770      	bx	lr

0800ccba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ccba:	b480      	push	{r7}
 800ccbc:	b083      	sub	sp, #12
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	6078      	str	r0, [r7, #4]
 800ccc2:	460b      	mov	r3, r1
 800ccc4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	1c5a      	adds	r2, r3, #1
 800ccca:	607a      	str	r2, [r7, #4]
 800cccc:	887a      	ldrh	r2, [r7, #2]
 800ccce:	b2d2      	uxtb	r2, r2
 800ccd0:	701a      	strb	r2, [r3, #0]
 800ccd2:	887b      	ldrh	r3, [r7, #2]
 800ccd4:	0a1b      	lsrs	r3, r3, #8
 800ccd6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	1c5a      	adds	r2, r3, #1
 800ccdc:	607a      	str	r2, [r7, #4]
 800ccde:	887a      	ldrh	r2, [r7, #2]
 800cce0:	b2d2      	uxtb	r2, r2
 800cce2:	701a      	strb	r2, [r3, #0]
}
 800cce4:	bf00      	nop
 800cce6:	370c      	adds	r7, #12
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr

0800ccf0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b083      	sub	sp, #12
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	1c5a      	adds	r2, r3, #1
 800ccfe:	607a      	str	r2, [r7, #4]
 800cd00:	683a      	ldr	r2, [r7, #0]
 800cd02:	b2d2      	uxtb	r2, r2
 800cd04:	701a      	strb	r2, [r3, #0]
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	0a1b      	lsrs	r3, r3, #8
 800cd0a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	1c5a      	adds	r2, r3, #1
 800cd10:	607a      	str	r2, [r7, #4]
 800cd12:	683a      	ldr	r2, [r7, #0]
 800cd14:	b2d2      	uxtb	r2, r2
 800cd16:	701a      	strb	r2, [r3, #0]
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	0a1b      	lsrs	r3, r3, #8
 800cd1c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	1c5a      	adds	r2, r3, #1
 800cd22:	607a      	str	r2, [r7, #4]
 800cd24:	683a      	ldr	r2, [r7, #0]
 800cd26:	b2d2      	uxtb	r2, r2
 800cd28:	701a      	strb	r2, [r3, #0]
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	0a1b      	lsrs	r3, r3, #8
 800cd2e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	1c5a      	adds	r2, r3, #1
 800cd34:	607a      	str	r2, [r7, #4]
 800cd36:	683a      	ldr	r2, [r7, #0]
 800cd38:	b2d2      	uxtb	r2, r2
 800cd3a:	701a      	strb	r2, [r3, #0]
}
 800cd3c:	bf00      	nop
 800cd3e:	370c      	adds	r7, #12
 800cd40:	46bd      	mov	sp, r7
 800cd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd46:	4770      	bx	lr

0800cd48 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cd48:	b480      	push	{r7}
 800cd4a:	b087      	sub	sp, #28
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	60f8      	str	r0, [r7, #12]
 800cd50:	60b9      	str	r1, [r7, #8]
 800cd52:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d00d      	beq.n	800cd7e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cd62:	693a      	ldr	r2, [r7, #16]
 800cd64:	1c53      	adds	r3, r2, #1
 800cd66:	613b      	str	r3, [r7, #16]
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	1c59      	adds	r1, r3, #1
 800cd6c:	6179      	str	r1, [r7, #20]
 800cd6e:	7812      	ldrb	r2, [r2, #0]
 800cd70:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	3b01      	subs	r3, #1
 800cd76:	607b      	str	r3, [r7, #4]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d1f1      	bne.n	800cd62 <mem_cpy+0x1a>
	}
}
 800cd7e:	bf00      	nop
 800cd80:	371c      	adds	r7, #28
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr

0800cd8a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cd8a:	b480      	push	{r7}
 800cd8c:	b087      	sub	sp, #28
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	60f8      	str	r0, [r7, #12]
 800cd92:	60b9      	str	r1, [r7, #8]
 800cd94:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	1c5a      	adds	r2, r3, #1
 800cd9e:	617a      	str	r2, [r7, #20]
 800cda0:	68ba      	ldr	r2, [r7, #8]
 800cda2:	b2d2      	uxtb	r2, r2
 800cda4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	3b01      	subs	r3, #1
 800cdaa:	607b      	str	r3, [r7, #4]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d1f3      	bne.n	800cd9a <mem_set+0x10>
}
 800cdb2:	bf00      	nop
 800cdb4:	bf00      	nop
 800cdb6:	371c      	adds	r7, #28
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800cdc0:	b480      	push	{r7}
 800cdc2:	b089      	sub	sp, #36	; 0x24
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	60b9      	str	r1, [r7, #8]
 800cdca:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	61fb      	str	r3, [r7, #28]
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800cdd8:	69fb      	ldr	r3, [r7, #28]
 800cdda:	1c5a      	adds	r2, r3, #1
 800cddc:	61fa      	str	r2, [r7, #28]
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	4619      	mov	r1, r3
 800cde2:	69bb      	ldr	r3, [r7, #24]
 800cde4:	1c5a      	adds	r2, r3, #1
 800cde6:	61ba      	str	r2, [r7, #24]
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	1acb      	subs	r3, r1, r3
 800cdec:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	3b01      	subs	r3, #1
 800cdf2:	607b      	str	r3, [r7, #4]
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d002      	beq.n	800ce00 <mem_cmp+0x40>
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d0eb      	beq.n	800cdd8 <mem_cmp+0x18>

	return r;
 800ce00:	697b      	ldr	r3, [r7, #20]
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3724      	adds	r7, #36	; 0x24
 800ce06:	46bd      	mov	sp, r7
 800ce08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0c:	4770      	bx	lr

0800ce0e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ce0e:	b480      	push	{r7}
 800ce10:	b083      	sub	sp, #12
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	6078      	str	r0, [r7, #4]
 800ce16:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ce18:	e002      	b.n	800ce20 <chk_chr+0x12>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	607b      	str	r3, [r7, #4]
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d005      	beq.n	800ce34 <chk_chr+0x26>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	461a      	mov	r2, r3
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d1f2      	bne.n	800ce1a <chk_chr+0xc>
	return *str;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	781b      	ldrb	r3, [r3, #0]
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	370c      	adds	r7, #12
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce42:	4770      	bx	lr

0800ce44 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ce44:	b480      	push	{r7}
 800ce46:	b085      	sub	sp, #20
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
 800ce4c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ce4e:	2300      	movs	r3, #0
 800ce50:	60bb      	str	r3, [r7, #8]
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	60fb      	str	r3, [r7, #12]
 800ce56:	e029      	b.n	800ceac <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ce58:	4a27      	ldr	r2, [pc, #156]	; (800cef8 <chk_lock+0xb4>)
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	011b      	lsls	r3, r3, #4
 800ce5e:	4413      	add	r3, r2
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d01d      	beq.n	800cea2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ce66:	4a24      	ldr	r2, [pc, #144]	; (800cef8 <chk_lock+0xb4>)
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	011b      	lsls	r3, r3, #4
 800ce6c:	4413      	add	r3, r2
 800ce6e:	681a      	ldr	r2, [r3, #0]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	429a      	cmp	r2, r3
 800ce76:	d116      	bne.n	800cea6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ce78:	4a1f      	ldr	r2, [pc, #124]	; (800cef8 <chk_lock+0xb4>)
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	011b      	lsls	r3, r3, #4
 800ce7e:	4413      	add	r3, r2
 800ce80:	3304      	adds	r3, #4
 800ce82:	681a      	ldr	r2, [r3, #0]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	d10c      	bne.n	800cea6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ce8c:	4a1a      	ldr	r2, [pc, #104]	; (800cef8 <chk_lock+0xb4>)
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	011b      	lsls	r3, r3, #4
 800ce92:	4413      	add	r3, r2
 800ce94:	3308      	adds	r3, #8
 800ce96:	681a      	ldr	r2, [r3, #0]
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d102      	bne.n	800cea6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cea0:	e007      	b.n	800ceb2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800cea2:	2301      	movs	r3, #1
 800cea4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	3301      	adds	r3, #1
 800ceaa:	60fb      	str	r3, [r7, #12]
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	2b01      	cmp	r3, #1
 800ceb0:	d9d2      	bls.n	800ce58 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2b02      	cmp	r3, #2
 800ceb6:	d109      	bne.n	800cecc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d102      	bne.n	800cec4 <chk_lock+0x80>
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	2b02      	cmp	r3, #2
 800cec2:	d101      	bne.n	800cec8 <chk_lock+0x84>
 800cec4:	2300      	movs	r3, #0
 800cec6:	e010      	b.n	800ceea <chk_lock+0xa6>
 800cec8:	2312      	movs	r3, #18
 800ceca:	e00e      	b.n	800ceea <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d108      	bne.n	800cee4 <chk_lock+0xa0>
 800ced2:	4a09      	ldr	r2, [pc, #36]	; (800cef8 <chk_lock+0xb4>)
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	011b      	lsls	r3, r3, #4
 800ced8:	4413      	add	r3, r2
 800ceda:	330c      	adds	r3, #12
 800cedc:	881b      	ldrh	r3, [r3, #0]
 800cede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cee2:	d101      	bne.n	800cee8 <chk_lock+0xa4>
 800cee4:	2310      	movs	r3, #16
 800cee6:	e000      	b.n	800ceea <chk_lock+0xa6>
 800cee8:	2300      	movs	r3, #0
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3714      	adds	r7, #20
 800ceee:	46bd      	mov	sp, r7
 800cef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef4:	4770      	bx	lr
 800cef6:	bf00      	nop
 800cef8:	2400030c 	.word	0x2400030c

0800cefc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cf02:	2300      	movs	r3, #0
 800cf04:	607b      	str	r3, [r7, #4]
 800cf06:	e002      	b.n	800cf0e <enq_lock+0x12>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	3301      	adds	r3, #1
 800cf0c:	607b      	str	r3, [r7, #4]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d806      	bhi.n	800cf22 <enq_lock+0x26>
 800cf14:	4a09      	ldr	r2, [pc, #36]	; (800cf3c <enq_lock+0x40>)
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	011b      	lsls	r3, r3, #4
 800cf1a:	4413      	add	r3, r2
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d1f2      	bne.n	800cf08 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2b02      	cmp	r3, #2
 800cf26:	bf14      	ite	ne
 800cf28:	2301      	movne	r3, #1
 800cf2a:	2300      	moveq	r3, #0
 800cf2c:	b2db      	uxtb	r3, r3
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	370c      	adds	r7, #12
 800cf32:	46bd      	mov	sp, r7
 800cf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf38:	4770      	bx	lr
 800cf3a:	bf00      	nop
 800cf3c:	2400030c 	.word	0x2400030c

0800cf40 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cf40:	b480      	push	{r7}
 800cf42:	b085      	sub	sp, #20
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
 800cf48:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	60fb      	str	r3, [r7, #12]
 800cf4e:	e01f      	b.n	800cf90 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cf50:	4a41      	ldr	r2, [pc, #260]	; (800d058 <inc_lock+0x118>)
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	011b      	lsls	r3, r3, #4
 800cf56:	4413      	add	r3, r2
 800cf58:	681a      	ldr	r2, [r3, #0]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d113      	bne.n	800cf8a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cf62:	4a3d      	ldr	r2, [pc, #244]	; (800d058 <inc_lock+0x118>)
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	011b      	lsls	r3, r3, #4
 800cf68:	4413      	add	r3, r2
 800cf6a:	3304      	adds	r3, #4
 800cf6c:	681a      	ldr	r2, [r3, #0]
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d109      	bne.n	800cf8a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800cf76:	4a38      	ldr	r2, [pc, #224]	; (800d058 <inc_lock+0x118>)
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	011b      	lsls	r3, r3, #4
 800cf7c:	4413      	add	r3, r2
 800cf7e:	3308      	adds	r3, #8
 800cf80:	681a      	ldr	r2, [r3, #0]
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d006      	beq.n	800cf98 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	60fb      	str	r3, [r7, #12]
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2b01      	cmp	r3, #1
 800cf94:	d9dc      	bls.n	800cf50 <inc_lock+0x10>
 800cf96:	e000      	b.n	800cf9a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cf98:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	2b02      	cmp	r3, #2
 800cf9e:	d132      	bne.n	800d006 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	60fb      	str	r3, [r7, #12]
 800cfa4:	e002      	b.n	800cfac <inc_lock+0x6c>
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	60fb      	str	r3, [r7, #12]
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	d806      	bhi.n	800cfc0 <inc_lock+0x80>
 800cfb2:	4a29      	ldr	r2, [pc, #164]	; (800d058 <inc_lock+0x118>)
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	011b      	lsls	r3, r3, #4
 800cfb8:	4413      	add	r3, r2
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d1f2      	bne.n	800cfa6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	2b02      	cmp	r3, #2
 800cfc4:	d101      	bne.n	800cfca <inc_lock+0x8a>
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	e040      	b.n	800d04c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	4922      	ldr	r1, [pc, #136]	; (800d058 <inc_lock+0x118>)
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	011b      	lsls	r3, r3, #4
 800cfd4:	440b      	add	r3, r1
 800cfd6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	689a      	ldr	r2, [r3, #8]
 800cfdc:	491e      	ldr	r1, [pc, #120]	; (800d058 <inc_lock+0x118>)
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	011b      	lsls	r3, r3, #4
 800cfe2:	440b      	add	r3, r1
 800cfe4:	3304      	adds	r3, #4
 800cfe6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	695a      	ldr	r2, [r3, #20]
 800cfec:	491a      	ldr	r1, [pc, #104]	; (800d058 <inc_lock+0x118>)
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	011b      	lsls	r3, r3, #4
 800cff2:	440b      	add	r3, r1
 800cff4:	3308      	adds	r3, #8
 800cff6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cff8:	4a17      	ldr	r2, [pc, #92]	; (800d058 <inc_lock+0x118>)
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	011b      	lsls	r3, r3, #4
 800cffe:	4413      	add	r3, r2
 800d000:	330c      	adds	r3, #12
 800d002:	2200      	movs	r2, #0
 800d004:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d009      	beq.n	800d020 <inc_lock+0xe0>
 800d00c:	4a12      	ldr	r2, [pc, #72]	; (800d058 <inc_lock+0x118>)
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	011b      	lsls	r3, r3, #4
 800d012:	4413      	add	r3, r2
 800d014:	330c      	adds	r3, #12
 800d016:	881b      	ldrh	r3, [r3, #0]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d001      	beq.n	800d020 <inc_lock+0xe0>
 800d01c:	2300      	movs	r3, #0
 800d01e:	e015      	b.n	800d04c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d108      	bne.n	800d038 <inc_lock+0xf8>
 800d026:	4a0c      	ldr	r2, [pc, #48]	; (800d058 <inc_lock+0x118>)
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	011b      	lsls	r3, r3, #4
 800d02c:	4413      	add	r3, r2
 800d02e:	330c      	adds	r3, #12
 800d030:	881b      	ldrh	r3, [r3, #0]
 800d032:	3301      	adds	r3, #1
 800d034:	b29a      	uxth	r2, r3
 800d036:	e001      	b.n	800d03c <inc_lock+0xfc>
 800d038:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d03c:	4906      	ldr	r1, [pc, #24]	; (800d058 <inc_lock+0x118>)
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	011b      	lsls	r3, r3, #4
 800d042:	440b      	add	r3, r1
 800d044:	330c      	adds	r3, #12
 800d046:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	3301      	adds	r3, #1
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	3714      	adds	r7, #20
 800d050:	46bd      	mov	sp, r7
 800d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d056:	4770      	bx	lr
 800d058:	2400030c 	.word	0x2400030c

0800d05c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b085      	sub	sp, #20
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	3b01      	subs	r3, #1
 800d068:	607b      	str	r3, [r7, #4]
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2b01      	cmp	r3, #1
 800d06e:	d825      	bhi.n	800d0bc <dec_lock+0x60>
		n = Files[i].ctr;
 800d070:	4a17      	ldr	r2, [pc, #92]	; (800d0d0 <dec_lock+0x74>)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	011b      	lsls	r3, r3, #4
 800d076:	4413      	add	r3, r2
 800d078:	330c      	adds	r3, #12
 800d07a:	881b      	ldrh	r3, [r3, #0]
 800d07c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d07e:	89fb      	ldrh	r3, [r7, #14]
 800d080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d084:	d101      	bne.n	800d08a <dec_lock+0x2e>
 800d086:	2300      	movs	r3, #0
 800d088:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d08a:	89fb      	ldrh	r3, [r7, #14]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d002      	beq.n	800d096 <dec_lock+0x3a>
 800d090:	89fb      	ldrh	r3, [r7, #14]
 800d092:	3b01      	subs	r3, #1
 800d094:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d096:	4a0e      	ldr	r2, [pc, #56]	; (800d0d0 <dec_lock+0x74>)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	011b      	lsls	r3, r3, #4
 800d09c:	4413      	add	r3, r2
 800d09e:	330c      	adds	r3, #12
 800d0a0:	89fa      	ldrh	r2, [r7, #14]
 800d0a2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d0a4:	89fb      	ldrh	r3, [r7, #14]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d105      	bne.n	800d0b6 <dec_lock+0x5a>
 800d0aa:	4a09      	ldr	r2, [pc, #36]	; (800d0d0 <dec_lock+0x74>)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	011b      	lsls	r3, r3, #4
 800d0b0:	4413      	add	r3, r2
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	737b      	strb	r3, [r7, #13]
 800d0ba:	e001      	b.n	800d0c0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d0bc:	2302      	movs	r3, #2
 800d0be:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d0c0:	7b7b      	ldrb	r3, [r7, #13]
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3714      	adds	r7, #20
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr
 800d0ce:	bf00      	nop
 800d0d0:	2400030c 	.word	0x2400030c

0800d0d4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d0d4:	b480      	push	{r7}
 800d0d6:	b085      	sub	sp, #20
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d0dc:	2300      	movs	r3, #0
 800d0de:	60fb      	str	r3, [r7, #12]
 800d0e0:	e010      	b.n	800d104 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d0e2:	4a0d      	ldr	r2, [pc, #52]	; (800d118 <clear_lock+0x44>)
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	011b      	lsls	r3, r3, #4
 800d0e8:	4413      	add	r3, r2
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d105      	bne.n	800d0fe <clear_lock+0x2a>
 800d0f2:	4a09      	ldr	r2, [pc, #36]	; (800d118 <clear_lock+0x44>)
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	011b      	lsls	r3, r3, #4
 800d0f8:	4413      	add	r3, r2
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	3301      	adds	r3, #1
 800d102:	60fb      	str	r3, [r7, #12]
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2b01      	cmp	r3, #1
 800d108:	d9eb      	bls.n	800d0e2 <clear_lock+0xe>
	}
}
 800d10a:	bf00      	nop
 800d10c:	bf00      	nop
 800d10e:	3714      	adds	r7, #20
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr
 800d118:	2400030c 	.word	0x2400030c

0800d11c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b086      	sub	sp, #24
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d124:	2300      	movs	r3, #0
 800d126:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	78db      	ldrb	r3, [r3, #3]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d034      	beq.n	800d19a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d134:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	7858      	ldrb	r0, [r3, #1]
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d140:	2301      	movs	r3, #1
 800d142:	697a      	ldr	r2, [r7, #20]
 800d144:	f7ff fd40 	bl	800cbc8 <disk_write>
 800d148:	4603      	mov	r3, r0
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d002      	beq.n	800d154 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d14e:	2301      	movs	r3, #1
 800d150:	73fb      	strb	r3, [r7, #15]
 800d152:	e022      	b.n	800d19a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2200      	movs	r2, #0
 800d158:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d15e:	697a      	ldr	r2, [r7, #20]
 800d160:	1ad2      	subs	r2, r2, r3
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	69db      	ldr	r3, [r3, #28]
 800d166:	429a      	cmp	r2, r3
 800d168:	d217      	bcs.n	800d19a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	789b      	ldrb	r3, [r3, #2]
 800d16e:	613b      	str	r3, [r7, #16]
 800d170:	e010      	b.n	800d194 <sync_window+0x78>
					wsect += fs->fsize;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	69db      	ldr	r3, [r3, #28]
 800d176:	697a      	ldr	r2, [r7, #20]
 800d178:	4413      	add	r3, r2
 800d17a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	7858      	ldrb	r0, [r3, #1]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d186:	2301      	movs	r3, #1
 800d188:	697a      	ldr	r2, [r7, #20]
 800d18a:	f7ff fd1d 	bl	800cbc8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	3b01      	subs	r3, #1
 800d192:	613b      	str	r3, [r7, #16]
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	2b01      	cmp	r3, #1
 800d198:	d8eb      	bhi.n	800d172 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d19a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	3718      	adds	r7, #24
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}

0800d1a4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b084      	sub	sp, #16
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1b6:	683a      	ldr	r2, [r7, #0]
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d01b      	beq.n	800d1f4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f7ff ffad 	bl	800d11c <sync_window>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d1c6:	7bfb      	ldrb	r3, [r7, #15]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d113      	bne.n	800d1f4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	7858      	ldrb	r0, [r3, #1]
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	683a      	ldr	r2, [r7, #0]
 800d1da:	f7ff fcd5 	bl	800cb88 <disk_read>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d004      	beq.n	800d1ee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d1e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d1e8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	683a      	ldr	r2, [r7, #0]
 800d1f2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	3710      	adds	r7, #16
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}
	...

0800d200 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b084      	sub	sp, #16
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f7ff ff87 	bl	800d11c <sync_window>
 800d20e:	4603      	mov	r3, r0
 800d210:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d212:	7bfb      	ldrb	r3, [r7, #15]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d158      	bne.n	800d2ca <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	781b      	ldrb	r3, [r3, #0]
 800d21c:	2b03      	cmp	r3, #3
 800d21e:	d148      	bne.n	800d2b2 <sync_fs+0xb2>
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	791b      	ldrb	r3, [r3, #4]
 800d224:	2b01      	cmp	r3, #1
 800d226:	d144      	bne.n	800d2b2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	3334      	adds	r3, #52	; 0x34
 800d22c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d230:	2100      	movs	r1, #0
 800d232:	4618      	mov	r0, r3
 800d234:	f7ff fda9 	bl	800cd8a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	3334      	adds	r3, #52	; 0x34
 800d23c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d240:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d244:	4618      	mov	r0, r3
 800d246:	f7ff fd38 	bl	800ccba <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	3334      	adds	r3, #52	; 0x34
 800d24e:	4921      	ldr	r1, [pc, #132]	; (800d2d4 <sync_fs+0xd4>)
 800d250:	4618      	mov	r0, r3
 800d252:	f7ff fd4d 	bl	800ccf0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	3334      	adds	r3, #52	; 0x34
 800d25a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d25e:	491e      	ldr	r1, [pc, #120]	; (800d2d8 <sync_fs+0xd8>)
 800d260:	4618      	mov	r0, r3
 800d262:	f7ff fd45 	bl	800ccf0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	3334      	adds	r3, #52	; 0x34
 800d26a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	695b      	ldr	r3, [r3, #20]
 800d272:	4619      	mov	r1, r3
 800d274:	4610      	mov	r0, r2
 800d276:	f7ff fd3b 	bl	800ccf0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	3334      	adds	r3, #52	; 0x34
 800d27e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	691b      	ldr	r3, [r3, #16]
 800d286:	4619      	mov	r1, r3
 800d288:	4610      	mov	r0, r2
 800d28a:	f7ff fd31 	bl	800ccf0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6a1b      	ldr	r3, [r3, #32]
 800d292:	1c5a      	adds	r2, r3, #1
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	7858      	ldrb	r0, [r3, #1]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	f7ff fc8e 	bl	800cbc8 <disk_write>
			fs->fsi_flag = 0;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	785b      	ldrb	r3, [r3, #1]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	2100      	movs	r1, #0
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7ff fca4 	bl	800cc08 <disk_ioctl>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d001      	beq.n	800d2ca <sync_fs+0xca>
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d2ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3710      	adds	r7, #16
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}
 800d2d4:	41615252 	.word	0x41615252
 800d2d8:	61417272 	.word	0x61417272

0800d2dc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b083      	sub	sp, #12
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	3b02      	subs	r3, #2
 800d2ea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	699b      	ldr	r3, [r3, #24]
 800d2f0:	3b02      	subs	r3, #2
 800d2f2:	683a      	ldr	r2, [r7, #0]
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d301      	bcc.n	800d2fc <clust2sect+0x20>
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	e008      	b.n	800d30e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	895b      	ldrh	r3, [r3, #10]
 800d300:	461a      	mov	r2, r3
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	fb03 f202 	mul.w	r2, r3, r2
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d30c:	4413      	add	r3, r2
}
 800d30e:	4618      	mov	r0, r3
 800d310:	370c      	adds	r7, #12
 800d312:	46bd      	mov	sp, r7
 800d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d318:	4770      	bx	lr

0800d31a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d31a:	b580      	push	{r7, lr}
 800d31c:	b086      	sub	sp, #24
 800d31e:	af00      	add	r7, sp, #0
 800d320:	6078      	str	r0, [r7, #4]
 800d322:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d904      	bls.n	800d33a <get_fat+0x20>
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	699b      	ldr	r3, [r3, #24]
 800d334:	683a      	ldr	r2, [r7, #0]
 800d336:	429a      	cmp	r2, r3
 800d338:	d302      	bcc.n	800d340 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d33a:	2301      	movs	r3, #1
 800d33c:	617b      	str	r3, [r7, #20]
 800d33e:	e08f      	b.n	800d460 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d340:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d344:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	781b      	ldrb	r3, [r3, #0]
 800d34a:	2b03      	cmp	r3, #3
 800d34c:	d062      	beq.n	800d414 <get_fat+0xfa>
 800d34e:	2b03      	cmp	r3, #3
 800d350:	dc7c      	bgt.n	800d44c <get_fat+0x132>
 800d352:	2b01      	cmp	r3, #1
 800d354:	d002      	beq.n	800d35c <get_fat+0x42>
 800d356:	2b02      	cmp	r3, #2
 800d358:	d042      	beq.n	800d3e0 <get_fat+0xc6>
 800d35a:	e077      	b.n	800d44c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	60fb      	str	r3, [r7, #12]
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	085b      	lsrs	r3, r3, #1
 800d364:	68fa      	ldr	r2, [r7, #12]
 800d366:	4413      	add	r3, r2
 800d368:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	0a5b      	lsrs	r3, r3, #9
 800d372:	4413      	add	r3, r2
 800d374:	4619      	mov	r1, r3
 800d376:	6938      	ldr	r0, [r7, #16]
 800d378:	f7ff ff14 	bl	800d1a4 <move_window>
 800d37c:	4603      	mov	r3, r0
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d167      	bne.n	800d452 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	1c5a      	adds	r2, r3, #1
 800d386:	60fa      	str	r2, [r7, #12]
 800d388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d38c:	693a      	ldr	r2, [r7, #16]
 800d38e:	4413      	add	r3, r2
 800d390:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d394:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	0a5b      	lsrs	r3, r3, #9
 800d39e:	4413      	add	r3, r2
 800d3a0:	4619      	mov	r1, r3
 800d3a2:	6938      	ldr	r0, [r7, #16]
 800d3a4:	f7ff fefe 	bl	800d1a4 <move_window>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d153      	bne.n	800d456 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3b4:	693a      	ldr	r2, [r7, #16]
 800d3b6:	4413      	add	r3, r2
 800d3b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d3bc:	021b      	lsls	r3, r3, #8
 800d3be:	461a      	mov	r2, r3
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	4313      	orrs	r3, r2
 800d3c4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	f003 0301 	and.w	r3, r3, #1
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d002      	beq.n	800d3d6 <get_fat+0xbc>
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	091b      	lsrs	r3, r3, #4
 800d3d4:	e002      	b.n	800d3dc <get_fat+0xc2>
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d3dc:	617b      	str	r3, [r7, #20]
			break;
 800d3de:	e03f      	b.n	800d460 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	0a1b      	lsrs	r3, r3, #8
 800d3e8:	4413      	add	r3, r2
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	6938      	ldr	r0, [r7, #16]
 800d3ee:	f7ff fed9 	bl	800d1a4 <move_window>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d130      	bne.n	800d45a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	005b      	lsls	r3, r3, #1
 800d402:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d406:	4413      	add	r3, r2
 800d408:	4618      	mov	r0, r3
 800d40a:	f7ff fc1b 	bl	800cc44 <ld_word>
 800d40e:	4603      	mov	r3, r0
 800d410:	617b      	str	r3, [r7, #20]
			break;
 800d412:	e025      	b.n	800d460 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	09db      	lsrs	r3, r3, #7
 800d41c:	4413      	add	r3, r2
 800d41e:	4619      	mov	r1, r3
 800d420:	6938      	ldr	r0, [r7, #16]
 800d422:	f7ff febf 	bl	800d1a4 <move_window>
 800d426:	4603      	mov	r3, r0
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d118      	bne.n	800d45e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	009b      	lsls	r3, r3, #2
 800d436:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d43a:	4413      	add	r3, r2
 800d43c:	4618      	mov	r0, r3
 800d43e:	f7ff fc19 	bl	800cc74 <ld_dword>
 800d442:	4603      	mov	r3, r0
 800d444:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d448:	617b      	str	r3, [r7, #20]
			break;
 800d44a:	e009      	b.n	800d460 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d44c:	2301      	movs	r3, #1
 800d44e:	617b      	str	r3, [r7, #20]
 800d450:	e006      	b.n	800d460 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d452:	bf00      	nop
 800d454:	e004      	b.n	800d460 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d456:	bf00      	nop
 800d458:	e002      	b.n	800d460 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d45a:	bf00      	nop
 800d45c:	e000      	b.n	800d460 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d45e:	bf00      	nop
		}
	}

	return val;
 800d460:	697b      	ldr	r3, [r7, #20]
}
 800d462:	4618      	mov	r0, r3
 800d464:	3718      	adds	r7, #24
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}

0800d46a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d46a:	b590      	push	{r4, r7, lr}
 800d46c:	b089      	sub	sp, #36	; 0x24
 800d46e:	af00      	add	r7, sp, #0
 800d470:	60f8      	str	r0, [r7, #12]
 800d472:	60b9      	str	r1, [r7, #8]
 800d474:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d476:	2302      	movs	r3, #2
 800d478:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	f240 80d2 	bls.w	800d626 <put_fat+0x1bc>
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	699b      	ldr	r3, [r3, #24]
 800d486:	68ba      	ldr	r2, [r7, #8]
 800d488:	429a      	cmp	r2, r3
 800d48a:	f080 80cc 	bcs.w	800d626 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	2b03      	cmp	r3, #3
 800d494:	f000 8096 	beq.w	800d5c4 <put_fat+0x15a>
 800d498:	2b03      	cmp	r3, #3
 800d49a:	f300 80cd 	bgt.w	800d638 <put_fat+0x1ce>
 800d49e:	2b01      	cmp	r3, #1
 800d4a0:	d002      	beq.n	800d4a8 <put_fat+0x3e>
 800d4a2:	2b02      	cmp	r3, #2
 800d4a4:	d06e      	beq.n	800d584 <put_fat+0x11a>
 800d4a6:	e0c7      	b.n	800d638 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	61bb      	str	r3, [r7, #24]
 800d4ac:	69bb      	ldr	r3, [r7, #24]
 800d4ae:	085b      	lsrs	r3, r3, #1
 800d4b0:	69ba      	ldr	r2, [r7, #24]
 800d4b2:	4413      	add	r3, r2
 800d4b4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d4ba:	69bb      	ldr	r3, [r7, #24]
 800d4bc:	0a5b      	lsrs	r3, r3, #9
 800d4be:	4413      	add	r3, r2
 800d4c0:	4619      	mov	r1, r3
 800d4c2:	68f8      	ldr	r0, [r7, #12]
 800d4c4:	f7ff fe6e 	bl	800d1a4 <move_window>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d4cc:	7ffb      	ldrb	r3, [r7, #31]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	f040 80ab 	bne.w	800d62a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d4da:	69bb      	ldr	r3, [r7, #24]
 800d4dc:	1c59      	adds	r1, r3, #1
 800d4de:	61b9      	str	r1, [r7, #24]
 800d4e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4e4:	4413      	add	r3, r2
 800d4e6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	f003 0301 	and.w	r3, r3, #1
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d00d      	beq.n	800d50e <put_fat+0xa4>
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	b25b      	sxtb	r3, r3
 800d4f8:	f003 030f 	and.w	r3, r3, #15
 800d4fc:	b25a      	sxtb	r2, r3
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	b2db      	uxtb	r3, r3
 800d502:	011b      	lsls	r3, r3, #4
 800d504:	b25b      	sxtb	r3, r3
 800d506:	4313      	orrs	r3, r2
 800d508:	b25b      	sxtb	r3, r3
 800d50a:	b2db      	uxtb	r3, r3
 800d50c:	e001      	b.n	800d512 <put_fat+0xa8>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	b2db      	uxtb	r3, r3
 800d512:	697a      	ldr	r2, [r7, #20]
 800d514:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	2201      	movs	r2, #1
 800d51a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d520:	69bb      	ldr	r3, [r7, #24]
 800d522:	0a5b      	lsrs	r3, r3, #9
 800d524:	4413      	add	r3, r2
 800d526:	4619      	mov	r1, r3
 800d528:	68f8      	ldr	r0, [r7, #12]
 800d52a:	f7ff fe3b 	bl	800d1a4 <move_window>
 800d52e:	4603      	mov	r3, r0
 800d530:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d532:	7ffb      	ldrb	r3, [r7, #31]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d17a      	bne.n	800d62e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d53e:	69bb      	ldr	r3, [r7, #24]
 800d540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d544:	4413      	add	r3, r2
 800d546:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	f003 0301 	and.w	r3, r3, #1
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d003      	beq.n	800d55a <put_fat+0xf0>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	091b      	lsrs	r3, r3, #4
 800d556:	b2db      	uxtb	r3, r3
 800d558:	e00e      	b.n	800d578 <put_fat+0x10e>
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	781b      	ldrb	r3, [r3, #0]
 800d55e:	b25b      	sxtb	r3, r3
 800d560:	f023 030f 	bic.w	r3, r3, #15
 800d564:	b25a      	sxtb	r2, r3
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	0a1b      	lsrs	r3, r3, #8
 800d56a:	b25b      	sxtb	r3, r3
 800d56c:	f003 030f 	and.w	r3, r3, #15
 800d570:	b25b      	sxtb	r3, r3
 800d572:	4313      	orrs	r3, r2
 800d574:	b25b      	sxtb	r3, r3
 800d576:	b2db      	uxtb	r3, r3
 800d578:	697a      	ldr	r2, [r7, #20]
 800d57a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2201      	movs	r2, #1
 800d580:	70da      	strb	r2, [r3, #3]
			break;
 800d582:	e059      	b.n	800d638 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	0a1b      	lsrs	r3, r3, #8
 800d58c:	4413      	add	r3, r2
 800d58e:	4619      	mov	r1, r3
 800d590:	68f8      	ldr	r0, [r7, #12]
 800d592:	f7ff fe07 	bl	800d1a4 <move_window>
 800d596:	4603      	mov	r3, r0
 800d598:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d59a:	7ffb      	ldrb	r3, [r7, #31]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d148      	bne.n	800d632 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	005b      	lsls	r3, r3, #1
 800d5aa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d5ae:	4413      	add	r3, r2
 800d5b0:	687a      	ldr	r2, [r7, #4]
 800d5b2:	b292      	uxth	r2, r2
 800d5b4:	4611      	mov	r1, r2
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f7ff fb7f 	bl	800ccba <st_word>
			fs->wflag = 1;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	2201      	movs	r2, #1
 800d5c0:	70da      	strb	r2, [r3, #3]
			break;
 800d5c2:	e039      	b.n	800d638 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	09db      	lsrs	r3, r3, #7
 800d5cc:	4413      	add	r3, r2
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	68f8      	ldr	r0, [r7, #12]
 800d5d2:	f7ff fde7 	bl	800d1a4 <move_window>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d5da:	7ffb      	ldrb	r3, [r7, #31]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d12a      	bne.n	800d636 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	009b      	lsls	r3, r3, #2
 800d5f0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d5f4:	4413      	add	r3, r2
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f7ff fb3c 	bl	800cc74 <ld_dword>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d602:	4323      	orrs	r3, r4
 800d604:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	009b      	lsls	r3, r3, #2
 800d610:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d614:	4413      	add	r3, r2
 800d616:	6879      	ldr	r1, [r7, #4]
 800d618:	4618      	mov	r0, r3
 800d61a:	f7ff fb69 	bl	800ccf0 <st_dword>
			fs->wflag = 1;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	2201      	movs	r2, #1
 800d622:	70da      	strb	r2, [r3, #3]
			break;
 800d624:	e008      	b.n	800d638 <put_fat+0x1ce>
		}
	}
 800d626:	bf00      	nop
 800d628:	e006      	b.n	800d638 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d62a:	bf00      	nop
 800d62c:	e004      	b.n	800d638 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d62e:	bf00      	nop
 800d630:	e002      	b.n	800d638 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d632:	bf00      	nop
 800d634:	e000      	b.n	800d638 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d636:	bf00      	nop
	return res;
 800d638:	7ffb      	ldrb	r3, [r7, #31]
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3724      	adds	r7, #36	; 0x24
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd90      	pop	{r4, r7, pc}

0800d642 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d642:	b580      	push	{r7, lr}
 800d644:	b088      	sub	sp, #32
 800d646:	af00      	add	r7, sp, #0
 800d648:	60f8      	str	r0, [r7, #12]
 800d64a:	60b9      	str	r1, [r7, #8]
 800d64c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d64e:	2300      	movs	r3, #0
 800d650:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	2b01      	cmp	r3, #1
 800d65c:	d904      	bls.n	800d668 <remove_chain+0x26>
 800d65e:	69bb      	ldr	r3, [r7, #24]
 800d660:	699b      	ldr	r3, [r3, #24]
 800d662:	68ba      	ldr	r2, [r7, #8]
 800d664:	429a      	cmp	r2, r3
 800d666:	d301      	bcc.n	800d66c <remove_chain+0x2a>
 800d668:	2302      	movs	r3, #2
 800d66a:	e04b      	b.n	800d704 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d00c      	beq.n	800d68c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d672:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d676:	6879      	ldr	r1, [r7, #4]
 800d678:	69b8      	ldr	r0, [r7, #24]
 800d67a:	f7ff fef6 	bl	800d46a <put_fat>
 800d67e:	4603      	mov	r3, r0
 800d680:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d682:	7ffb      	ldrb	r3, [r7, #31]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d001      	beq.n	800d68c <remove_chain+0x4a>
 800d688:	7ffb      	ldrb	r3, [r7, #31]
 800d68a:	e03b      	b.n	800d704 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d68c:	68b9      	ldr	r1, [r7, #8]
 800d68e:	68f8      	ldr	r0, [r7, #12]
 800d690:	f7ff fe43 	bl	800d31a <get_fat>
 800d694:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d031      	beq.n	800d700 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	2b01      	cmp	r3, #1
 800d6a0:	d101      	bne.n	800d6a6 <remove_chain+0x64>
 800d6a2:	2302      	movs	r3, #2
 800d6a4:	e02e      	b.n	800d704 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6ac:	d101      	bne.n	800d6b2 <remove_chain+0x70>
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	e028      	b.n	800d704 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	68b9      	ldr	r1, [r7, #8]
 800d6b6:	69b8      	ldr	r0, [r7, #24]
 800d6b8:	f7ff fed7 	bl	800d46a <put_fat>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d6c0:	7ffb      	ldrb	r3, [r7, #31]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d001      	beq.n	800d6ca <remove_chain+0x88>
 800d6c6:	7ffb      	ldrb	r3, [r7, #31]
 800d6c8:	e01c      	b.n	800d704 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d6ca:	69bb      	ldr	r3, [r7, #24]
 800d6cc:	695a      	ldr	r2, [r3, #20]
 800d6ce:	69bb      	ldr	r3, [r7, #24]
 800d6d0:	699b      	ldr	r3, [r3, #24]
 800d6d2:	3b02      	subs	r3, #2
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d20b      	bcs.n	800d6f0 <remove_chain+0xae>
			fs->free_clst++;
 800d6d8:	69bb      	ldr	r3, [r7, #24]
 800d6da:	695b      	ldr	r3, [r3, #20]
 800d6dc:	1c5a      	adds	r2, r3, #1
 800d6de:	69bb      	ldr	r3, [r7, #24]
 800d6e0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d6e2:	69bb      	ldr	r3, [r7, #24]
 800d6e4:	791b      	ldrb	r3, [r3, #4]
 800d6e6:	f043 0301 	orr.w	r3, r3, #1
 800d6ea:	b2da      	uxtb	r2, r3
 800d6ec:	69bb      	ldr	r3, [r7, #24]
 800d6ee:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d6f4:	69bb      	ldr	r3, [r7, #24]
 800d6f6:	699b      	ldr	r3, [r3, #24]
 800d6f8:	68ba      	ldr	r2, [r7, #8]
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d3c6      	bcc.n	800d68c <remove_chain+0x4a>
 800d6fe:	e000      	b.n	800d702 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d700:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d702:	2300      	movs	r3, #0
}
 800d704:	4618      	mov	r0, r3
 800d706:	3720      	adds	r7, #32
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b088      	sub	sp, #32
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d10d      	bne.n	800d73e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	691b      	ldr	r3, [r3, #16]
 800d726:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d728:	69bb      	ldr	r3, [r7, #24]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d004      	beq.n	800d738 <create_chain+0x2c>
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	699b      	ldr	r3, [r3, #24]
 800d732:	69ba      	ldr	r2, [r7, #24]
 800d734:	429a      	cmp	r2, r3
 800d736:	d31b      	bcc.n	800d770 <create_chain+0x64>
 800d738:	2301      	movs	r3, #1
 800d73a:	61bb      	str	r3, [r7, #24]
 800d73c:	e018      	b.n	800d770 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d73e:	6839      	ldr	r1, [r7, #0]
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f7ff fdea 	bl	800d31a <get_fat>
 800d746:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	2b01      	cmp	r3, #1
 800d74c:	d801      	bhi.n	800d752 <create_chain+0x46>
 800d74e:	2301      	movs	r3, #1
 800d750:	e070      	b.n	800d834 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d758:	d101      	bne.n	800d75e <create_chain+0x52>
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	e06a      	b.n	800d834 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	699b      	ldr	r3, [r3, #24]
 800d762:	68fa      	ldr	r2, [r7, #12]
 800d764:	429a      	cmp	r2, r3
 800d766:	d201      	bcs.n	800d76c <create_chain+0x60>
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	e063      	b.n	800d834 <create_chain+0x128>
		scl = clst;
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d770:	69bb      	ldr	r3, [r7, #24]
 800d772:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d774:	69fb      	ldr	r3, [r7, #28]
 800d776:	3301      	adds	r3, #1
 800d778:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	699b      	ldr	r3, [r3, #24]
 800d77e:	69fa      	ldr	r2, [r7, #28]
 800d780:	429a      	cmp	r2, r3
 800d782:	d307      	bcc.n	800d794 <create_chain+0x88>
				ncl = 2;
 800d784:	2302      	movs	r3, #2
 800d786:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d788:	69fa      	ldr	r2, [r7, #28]
 800d78a:	69bb      	ldr	r3, [r7, #24]
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d901      	bls.n	800d794 <create_chain+0x88>
 800d790:	2300      	movs	r3, #0
 800d792:	e04f      	b.n	800d834 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d794:	69f9      	ldr	r1, [r7, #28]
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f7ff fdbf 	bl	800d31a <get_fat>
 800d79c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d00e      	beq.n	800d7c2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	2b01      	cmp	r3, #1
 800d7a8:	d003      	beq.n	800d7b2 <create_chain+0xa6>
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d7b0:	d101      	bne.n	800d7b6 <create_chain+0xaa>
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	e03e      	b.n	800d834 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d7b6:	69fa      	ldr	r2, [r7, #28]
 800d7b8:	69bb      	ldr	r3, [r7, #24]
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d1da      	bne.n	800d774 <create_chain+0x68>
 800d7be:	2300      	movs	r3, #0
 800d7c0:	e038      	b.n	800d834 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d7c2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d7c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d7c8:	69f9      	ldr	r1, [r7, #28]
 800d7ca:	6938      	ldr	r0, [r7, #16]
 800d7cc:	f7ff fe4d 	bl	800d46a <put_fat>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d7d4:	7dfb      	ldrb	r3, [r7, #23]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d109      	bne.n	800d7ee <create_chain+0xe2>
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d006      	beq.n	800d7ee <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d7e0:	69fa      	ldr	r2, [r7, #28]
 800d7e2:	6839      	ldr	r1, [r7, #0]
 800d7e4:	6938      	ldr	r0, [r7, #16]
 800d7e6:	f7ff fe40 	bl	800d46a <put_fat>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d7ee:	7dfb      	ldrb	r3, [r7, #23]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d116      	bne.n	800d822 <create_chain+0x116>
		fs->last_clst = ncl;
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	69fa      	ldr	r2, [r7, #28]
 800d7f8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	695a      	ldr	r2, [r3, #20]
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	699b      	ldr	r3, [r3, #24]
 800d802:	3b02      	subs	r3, #2
 800d804:	429a      	cmp	r2, r3
 800d806:	d804      	bhi.n	800d812 <create_chain+0x106>
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	695b      	ldr	r3, [r3, #20]
 800d80c:	1e5a      	subs	r2, r3, #1
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	791b      	ldrb	r3, [r3, #4]
 800d816:	f043 0301 	orr.w	r3, r3, #1
 800d81a:	b2da      	uxtb	r2, r3
 800d81c:	693b      	ldr	r3, [r7, #16]
 800d81e:	711a      	strb	r2, [r3, #4]
 800d820:	e007      	b.n	800d832 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d822:	7dfb      	ldrb	r3, [r7, #23]
 800d824:	2b01      	cmp	r3, #1
 800d826:	d102      	bne.n	800d82e <create_chain+0x122>
 800d828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d82c:	e000      	b.n	800d830 <create_chain+0x124>
 800d82e:	2301      	movs	r3, #1
 800d830:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d832:	69fb      	ldr	r3, [r7, #28]
}
 800d834:	4618      	mov	r0, r3
 800d836:	3720      	adds	r7, #32
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}

0800d83c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d83c:	b480      	push	{r7}
 800d83e:	b087      	sub	sp, #28
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
 800d844:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d850:	3304      	adds	r3, #4
 800d852:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	0a5b      	lsrs	r3, r3, #9
 800d858:	68fa      	ldr	r2, [r7, #12]
 800d85a:	8952      	ldrh	r2, [r2, #10]
 800d85c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d860:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	1d1a      	adds	r2, r3, #4
 800d866:	613a      	str	r2, [r7, #16]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d101      	bne.n	800d876 <clmt_clust+0x3a>
 800d872:	2300      	movs	r3, #0
 800d874:	e010      	b.n	800d898 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d876:	697a      	ldr	r2, [r7, #20]
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d307      	bcc.n	800d88e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d87e:	697a      	ldr	r2, [r7, #20]
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	1ad3      	subs	r3, r2, r3
 800d884:	617b      	str	r3, [r7, #20]
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	3304      	adds	r3, #4
 800d88a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d88c:	e7e9      	b.n	800d862 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d88e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	681a      	ldr	r2, [r3, #0]
 800d894:	697b      	ldr	r3, [r7, #20]
 800d896:	4413      	add	r3, r2
}
 800d898:	4618      	mov	r0, r3
 800d89a:	371c      	adds	r7, #28
 800d89c:	46bd      	mov	sp, r7
 800d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a2:	4770      	bx	lr

0800d8a4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b086      	sub	sp, #24
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d8ba:	d204      	bcs.n	800d8c6 <dir_sdi+0x22>
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	f003 031f 	and.w	r3, r3, #31
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d001      	beq.n	800d8ca <dir_sdi+0x26>
		return FR_INT_ERR;
 800d8c6:	2302      	movs	r3, #2
 800d8c8:	e063      	b.n	800d992 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	683a      	ldr	r2, [r7, #0]
 800d8ce:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	689b      	ldr	r3, [r3, #8]
 800d8d4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d106      	bne.n	800d8ea <dir_sdi+0x46>
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	781b      	ldrb	r3, [r3, #0]
 800d8e0:	2b02      	cmp	r3, #2
 800d8e2:	d902      	bls.n	800d8ea <dir_sdi+0x46>
		clst = fs->dirbase;
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8e8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d10c      	bne.n	800d90a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	095b      	lsrs	r3, r3, #5
 800d8f4:	693a      	ldr	r2, [r7, #16]
 800d8f6:	8912      	ldrh	r2, [r2, #8]
 800d8f8:	4293      	cmp	r3, r2
 800d8fa:	d301      	bcc.n	800d900 <dir_sdi+0x5c>
 800d8fc:	2302      	movs	r3, #2
 800d8fe:	e048      	b.n	800d992 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	61da      	str	r2, [r3, #28]
 800d908:	e029      	b.n	800d95e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	895b      	ldrh	r3, [r3, #10]
 800d90e:	025b      	lsls	r3, r3, #9
 800d910:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d912:	e019      	b.n	800d948 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6979      	ldr	r1, [r7, #20]
 800d918:	4618      	mov	r0, r3
 800d91a:	f7ff fcfe 	bl	800d31a <get_fat>
 800d91e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d926:	d101      	bne.n	800d92c <dir_sdi+0x88>
 800d928:	2301      	movs	r3, #1
 800d92a:	e032      	b.n	800d992 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	2b01      	cmp	r3, #1
 800d930:	d904      	bls.n	800d93c <dir_sdi+0x98>
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	699b      	ldr	r3, [r3, #24]
 800d936:	697a      	ldr	r2, [r7, #20]
 800d938:	429a      	cmp	r2, r3
 800d93a:	d301      	bcc.n	800d940 <dir_sdi+0x9c>
 800d93c:	2302      	movs	r3, #2
 800d93e:	e028      	b.n	800d992 <dir_sdi+0xee>
			ofs -= csz;
 800d940:	683a      	ldr	r2, [r7, #0]
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	1ad3      	subs	r3, r2, r3
 800d946:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d948:	683a      	ldr	r2, [r7, #0]
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	429a      	cmp	r2, r3
 800d94e:	d2e1      	bcs.n	800d914 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d950:	6979      	ldr	r1, [r7, #20]
 800d952:	6938      	ldr	r0, [r7, #16]
 800d954:	f7ff fcc2 	bl	800d2dc <clust2sect>
 800d958:	4602      	mov	r2, r0
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	697a      	ldr	r2, [r7, #20]
 800d962:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	69db      	ldr	r3, [r3, #28]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d101      	bne.n	800d970 <dir_sdi+0xcc>
 800d96c:	2302      	movs	r3, #2
 800d96e:	e010      	b.n	800d992 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	69da      	ldr	r2, [r3, #28]
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	0a5b      	lsrs	r3, r3, #9
 800d978:	441a      	add	r2, r3
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d98a:	441a      	add	r2, r3
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d990:	2300      	movs	r3, #0
}
 800d992:	4618      	mov	r0, r3
 800d994:	3718      	adds	r7, #24
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}

0800d99a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d99a:	b580      	push	{r7, lr}
 800d99c:	b086      	sub	sp, #24
 800d99e:	af00      	add	r7, sp, #0
 800d9a0:	6078      	str	r0, [r7, #4]
 800d9a2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	695b      	ldr	r3, [r3, #20]
 800d9ae:	3320      	adds	r3, #32
 800d9b0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	69db      	ldr	r3, [r3, #28]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d003      	beq.n	800d9c2 <dir_next+0x28>
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d9c0:	d301      	bcc.n	800d9c6 <dir_next+0x2c>
 800d9c2:	2304      	movs	r3, #4
 800d9c4:	e0aa      	b.n	800db1c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	f040 8098 	bne.w	800db02 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	69db      	ldr	r3, [r3, #28]
 800d9d6:	1c5a      	adds	r2, r3, #1
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	699b      	ldr	r3, [r3, #24]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d10b      	bne.n	800d9fc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	095b      	lsrs	r3, r3, #5
 800d9e8:	68fa      	ldr	r2, [r7, #12]
 800d9ea:	8912      	ldrh	r2, [r2, #8]
 800d9ec:	4293      	cmp	r3, r2
 800d9ee:	f0c0 8088 	bcc.w	800db02 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	61da      	str	r2, [r3, #28]
 800d9f8:	2304      	movs	r3, #4
 800d9fa:	e08f      	b.n	800db1c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	0a5b      	lsrs	r3, r3, #9
 800da00:	68fa      	ldr	r2, [r7, #12]
 800da02:	8952      	ldrh	r2, [r2, #10]
 800da04:	3a01      	subs	r2, #1
 800da06:	4013      	ands	r3, r2
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d17a      	bne.n	800db02 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800da0c:	687a      	ldr	r2, [r7, #4]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	699b      	ldr	r3, [r3, #24]
 800da12:	4619      	mov	r1, r3
 800da14:	4610      	mov	r0, r2
 800da16:	f7ff fc80 	bl	800d31a <get_fat>
 800da1a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	2b01      	cmp	r3, #1
 800da20:	d801      	bhi.n	800da26 <dir_next+0x8c>
 800da22:	2302      	movs	r3, #2
 800da24:	e07a      	b.n	800db1c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da2c:	d101      	bne.n	800da32 <dir_next+0x98>
 800da2e:	2301      	movs	r3, #1
 800da30:	e074      	b.n	800db1c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	699b      	ldr	r3, [r3, #24]
 800da36:	697a      	ldr	r2, [r7, #20]
 800da38:	429a      	cmp	r2, r3
 800da3a:	d358      	bcc.n	800daee <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d104      	bne.n	800da4c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2200      	movs	r2, #0
 800da46:	61da      	str	r2, [r3, #28]
 800da48:	2304      	movs	r3, #4
 800da4a:	e067      	b.n	800db1c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800da4c:	687a      	ldr	r2, [r7, #4]
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	699b      	ldr	r3, [r3, #24]
 800da52:	4619      	mov	r1, r3
 800da54:	4610      	mov	r0, r2
 800da56:	f7ff fe59 	bl	800d70c <create_chain>
 800da5a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d101      	bne.n	800da66 <dir_next+0xcc>
 800da62:	2307      	movs	r3, #7
 800da64:	e05a      	b.n	800db1c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800da66:	697b      	ldr	r3, [r7, #20]
 800da68:	2b01      	cmp	r3, #1
 800da6a:	d101      	bne.n	800da70 <dir_next+0xd6>
 800da6c:	2302      	movs	r3, #2
 800da6e:	e055      	b.n	800db1c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da76:	d101      	bne.n	800da7c <dir_next+0xe2>
 800da78:	2301      	movs	r3, #1
 800da7a:	e04f      	b.n	800db1c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800da7c:	68f8      	ldr	r0, [r7, #12]
 800da7e:	f7ff fb4d 	bl	800d11c <sync_window>
 800da82:	4603      	mov	r3, r0
 800da84:	2b00      	cmp	r3, #0
 800da86:	d001      	beq.n	800da8c <dir_next+0xf2>
 800da88:	2301      	movs	r3, #1
 800da8a:	e047      	b.n	800db1c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	3334      	adds	r3, #52	; 0x34
 800da90:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da94:	2100      	movs	r1, #0
 800da96:	4618      	mov	r0, r3
 800da98:	f7ff f977 	bl	800cd8a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800da9c:	2300      	movs	r3, #0
 800da9e:	613b      	str	r3, [r7, #16]
 800daa0:	6979      	ldr	r1, [r7, #20]
 800daa2:	68f8      	ldr	r0, [r7, #12]
 800daa4:	f7ff fc1a 	bl	800d2dc <clust2sect>
 800daa8:	4602      	mov	r2, r0
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	631a      	str	r2, [r3, #48]	; 0x30
 800daae:	e012      	b.n	800dad6 <dir_next+0x13c>
						fs->wflag = 1;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2201      	movs	r2, #1
 800dab4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800dab6:	68f8      	ldr	r0, [r7, #12]
 800dab8:	f7ff fb30 	bl	800d11c <sync_window>
 800dabc:	4603      	mov	r3, r0
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d001      	beq.n	800dac6 <dir_next+0x12c>
 800dac2:	2301      	movs	r3, #1
 800dac4:	e02a      	b.n	800db1c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	3301      	adds	r3, #1
 800daca:	613b      	str	r3, [r7, #16]
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dad0:	1c5a      	adds	r2, r3, #1
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	631a      	str	r2, [r3, #48]	; 0x30
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	895b      	ldrh	r3, [r3, #10]
 800dada:	461a      	mov	r2, r3
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	4293      	cmp	r3, r2
 800dae0:	d3e6      	bcc.n	800dab0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	1ad2      	subs	r2, r2, r3
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	697a      	ldr	r2, [r7, #20]
 800daf2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800daf4:	6979      	ldr	r1, [r7, #20]
 800daf6:	68f8      	ldr	r0, [r7, #12]
 800daf8:	f7ff fbf0 	bl	800d2dc <clust2sect>
 800dafc:	4602      	mov	r2, r0
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	68ba      	ldr	r2, [r7, #8]
 800db06:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db14:	441a      	add	r2, r3
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800db1a:	2300      	movs	r3, #0
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3718      	adds	r7, #24
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}

0800db24 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b086      	sub	sp, #24
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
 800db2c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800db34:	2100      	movs	r1, #0
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f7ff feb4 	bl	800d8a4 <dir_sdi>
 800db3c:	4603      	mov	r3, r0
 800db3e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800db40:	7dfb      	ldrb	r3, [r7, #23]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d12b      	bne.n	800db9e <dir_alloc+0x7a>
		n = 0;
 800db46:	2300      	movs	r3, #0
 800db48:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	69db      	ldr	r3, [r3, #28]
 800db4e:	4619      	mov	r1, r3
 800db50:	68f8      	ldr	r0, [r7, #12]
 800db52:	f7ff fb27 	bl	800d1a4 <move_window>
 800db56:	4603      	mov	r3, r0
 800db58:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800db5a:	7dfb      	ldrb	r3, [r7, #23]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d11d      	bne.n	800db9c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6a1b      	ldr	r3, [r3, #32]
 800db64:	781b      	ldrb	r3, [r3, #0]
 800db66:	2be5      	cmp	r3, #229	; 0xe5
 800db68:	d004      	beq.n	800db74 <dir_alloc+0x50>
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6a1b      	ldr	r3, [r3, #32]
 800db6e:	781b      	ldrb	r3, [r3, #0]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d107      	bne.n	800db84 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	3301      	adds	r3, #1
 800db78:	613b      	str	r3, [r7, #16]
 800db7a:	693a      	ldr	r2, [r7, #16]
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	429a      	cmp	r2, r3
 800db80:	d102      	bne.n	800db88 <dir_alloc+0x64>
 800db82:	e00c      	b.n	800db9e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800db84:	2300      	movs	r3, #0
 800db86:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800db88:	2101      	movs	r1, #1
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f7ff ff05 	bl	800d99a <dir_next>
 800db90:	4603      	mov	r3, r0
 800db92:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800db94:	7dfb      	ldrb	r3, [r7, #23]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d0d7      	beq.n	800db4a <dir_alloc+0x26>
 800db9a:	e000      	b.n	800db9e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800db9c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800db9e:	7dfb      	ldrb	r3, [r7, #23]
 800dba0:	2b04      	cmp	r3, #4
 800dba2:	d101      	bne.n	800dba8 <dir_alloc+0x84>
 800dba4:	2307      	movs	r3, #7
 800dba6:	75fb      	strb	r3, [r7, #23]
	return res;
 800dba8:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3718      	adds	r7, #24
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}

0800dbb2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800dbb2:	b580      	push	{r7, lr}
 800dbb4:	b084      	sub	sp, #16
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	6078      	str	r0, [r7, #4]
 800dbba:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	331a      	adds	r3, #26
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f7ff f83f 	bl	800cc44 <ld_word>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	781b      	ldrb	r3, [r3, #0]
 800dbce:	2b03      	cmp	r3, #3
 800dbd0:	d109      	bne.n	800dbe6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	3314      	adds	r3, #20
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f7ff f834 	bl	800cc44 <ld_word>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	041b      	lsls	r3, r3, #16
 800dbe0:	68fa      	ldr	r2, [r7, #12]
 800dbe2:	4313      	orrs	r3, r2
 800dbe4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3710      	adds	r7, #16
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}

0800dbf0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b084      	sub	sp, #16
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	60f8      	str	r0, [r7, #12]
 800dbf8:	60b9      	str	r1, [r7, #8]
 800dbfa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	331a      	adds	r3, #26
 800dc00:	687a      	ldr	r2, [r7, #4]
 800dc02:	b292      	uxth	r2, r2
 800dc04:	4611      	mov	r1, r2
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7ff f857 	bl	800ccba <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	781b      	ldrb	r3, [r3, #0]
 800dc10:	2b03      	cmp	r3, #3
 800dc12:	d109      	bne.n	800dc28 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	f103 0214 	add.w	r2, r3, #20
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	0c1b      	lsrs	r3, r3, #16
 800dc1e:	b29b      	uxth	r3, r3
 800dc20:	4619      	mov	r1, r3
 800dc22:	4610      	mov	r0, r2
 800dc24:	f7ff f849 	bl	800ccba <st_word>
	}
}
 800dc28:	bf00      	nop
 800dc2a:	3710      	adds	r7, #16
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800dc30:	b590      	push	{r4, r7, lr}
 800dc32:	b087      	sub	sp, #28
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
 800dc38:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	331a      	adds	r3, #26
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f7ff f800 	bl	800cc44 <ld_word>
 800dc44:	4603      	mov	r3, r0
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d001      	beq.n	800dc4e <cmp_lfn+0x1e>
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	e059      	b.n	800dd02 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	781b      	ldrb	r3, [r3, #0]
 800dc52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc56:	1e5a      	subs	r2, r3, #1
 800dc58:	4613      	mov	r3, r2
 800dc5a:	005b      	lsls	r3, r3, #1
 800dc5c:	4413      	add	r3, r2
 800dc5e:	009b      	lsls	r3, r3, #2
 800dc60:	4413      	add	r3, r2
 800dc62:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dc64:	2301      	movs	r3, #1
 800dc66:	81fb      	strh	r3, [r7, #14]
 800dc68:	2300      	movs	r3, #0
 800dc6a:	613b      	str	r3, [r7, #16]
 800dc6c:	e033      	b.n	800dcd6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800dc6e:	4a27      	ldr	r2, [pc, #156]	; (800dd0c <cmp_lfn+0xdc>)
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	4413      	add	r3, r2
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	461a      	mov	r2, r3
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	4413      	add	r3, r2
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f7fe ffe1 	bl	800cc44 <ld_word>
 800dc82:	4603      	mov	r3, r0
 800dc84:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800dc86:	89fb      	ldrh	r3, [r7, #14]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d01a      	beq.n	800dcc2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	2bfe      	cmp	r3, #254	; 0xfe
 800dc90:	d812      	bhi.n	800dcb8 <cmp_lfn+0x88>
 800dc92:	89bb      	ldrh	r3, [r7, #12]
 800dc94:	4618      	mov	r0, r3
 800dc96:	f001 fcd9 	bl	800f64c <ff_wtoupper>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	461c      	mov	r4, r3
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	1c5a      	adds	r2, r3, #1
 800dca2:	617a      	str	r2, [r7, #20]
 800dca4:	005b      	lsls	r3, r3, #1
 800dca6:	687a      	ldr	r2, [r7, #4]
 800dca8:	4413      	add	r3, r2
 800dcaa:	881b      	ldrh	r3, [r3, #0]
 800dcac:	4618      	mov	r0, r3
 800dcae:	f001 fccd 	bl	800f64c <ff_wtoupper>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	429c      	cmp	r4, r3
 800dcb6:	d001      	beq.n	800dcbc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800dcb8:	2300      	movs	r3, #0
 800dcba:	e022      	b.n	800dd02 <cmp_lfn+0xd2>
			}
			wc = uc;
 800dcbc:	89bb      	ldrh	r3, [r7, #12]
 800dcbe:	81fb      	strh	r3, [r7, #14]
 800dcc0:	e006      	b.n	800dcd0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800dcc2:	89bb      	ldrh	r3, [r7, #12]
 800dcc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	d001      	beq.n	800dcd0 <cmp_lfn+0xa0>
 800dccc:	2300      	movs	r3, #0
 800dcce:	e018      	b.n	800dd02 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	3301      	adds	r3, #1
 800dcd4:	613b      	str	r3, [r7, #16]
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	2b0c      	cmp	r3, #12
 800dcda:	d9c8      	bls.n	800dc6e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d00b      	beq.n	800dd00 <cmp_lfn+0xd0>
 800dce8:	89fb      	ldrh	r3, [r7, #14]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d008      	beq.n	800dd00 <cmp_lfn+0xd0>
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	005b      	lsls	r3, r3, #1
 800dcf2:	687a      	ldr	r2, [r7, #4]
 800dcf4:	4413      	add	r3, r2
 800dcf6:	881b      	ldrh	r3, [r3, #0]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d001      	beq.n	800dd00 <cmp_lfn+0xd0>
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	e000      	b.n	800dd02 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800dd00:	2301      	movs	r3, #1
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	371c      	adds	r7, #28
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd90      	pop	{r4, r7, pc}
 800dd0a:	bf00      	nop
 800dd0c:	080108ec 	.word	0x080108ec

0800dd10 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b088      	sub	sp, #32
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	60f8      	str	r0, [r7, #12]
 800dd18:	60b9      	str	r1, [r7, #8]
 800dd1a:	4611      	mov	r1, r2
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	460b      	mov	r3, r1
 800dd20:	71fb      	strb	r3, [r7, #7]
 800dd22:	4613      	mov	r3, r2
 800dd24:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	330d      	adds	r3, #13
 800dd2a:	79ba      	ldrb	r2, [r7, #6]
 800dd2c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	330b      	adds	r3, #11
 800dd32:	220f      	movs	r2, #15
 800dd34:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	330c      	adds	r3, #12
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	331a      	adds	r3, #26
 800dd42:	2100      	movs	r1, #0
 800dd44:	4618      	mov	r0, r3
 800dd46:	f7fe ffb8 	bl	800ccba <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800dd4a:	79fb      	ldrb	r3, [r7, #7]
 800dd4c:	1e5a      	subs	r2, r3, #1
 800dd4e:	4613      	mov	r3, r2
 800dd50:	005b      	lsls	r3, r3, #1
 800dd52:	4413      	add	r3, r2
 800dd54:	009b      	lsls	r3, r3, #2
 800dd56:	4413      	add	r3, r2
 800dd58:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	82fb      	strh	r3, [r7, #22]
 800dd5e:	2300      	movs	r3, #0
 800dd60:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800dd62:	8afb      	ldrh	r3, [r7, #22]
 800dd64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	d007      	beq.n	800dd7c <put_lfn+0x6c>
 800dd6c:	69fb      	ldr	r3, [r7, #28]
 800dd6e:	1c5a      	adds	r2, r3, #1
 800dd70:	61fa      	str	r2, [r7, #28]
 800dd72:	005b      	lsls	r3, r3, #1
 800dd74:	68fa      	ldr	r2, [r7, #12]
 800dd76:	4413      	add	r3, r2
 800dd78:	881b      	ldrh	r3, [r3, #0]
 800dd7a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800dd7c:	4a17      	ldr	r2, [pc, #92]	; (800dddc <put_lfn+0xcc>)
 800dd7e:	69bb      	ldr	r3, [r7, #24]
 800dd80:	4413      	add	r3, r2
 800dd82:	781b      	ldrb	r3, [r3, #0]
 800dd84:	461a      	mov	r2, r3
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	4413      	add	r3, r2
 800dd8a:	8afa      	ldrh	r2, [r7, #22]
 800dd8c:	4611      	mov	r1, r2
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7fe ff93 	bl	800ccba <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800dd94:	8afb      	ldrh	r3, [r7, #22]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d102      	bne.n	800dda0 <put_lfn+0x90>
 800dd9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dd9e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800dda0:	69bb      	ldr	r3, [r7, #24]
 800dda2:	3301      	adds	r3, #1
 800dda4:	61bb      	str	r3, [r7, #24]
 800dda6:	69bb      	ldr	r3, [r7, #24]
 800dda8:	2b0c      	cmp	r3, #12
 800ddaa:	d9da      	bls.n	800dd62 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ddac:	8afb      	ldrh	r3, [r7, #22]
 800ddae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d006      	beq.n	800ddc4 <put_lfn+0xb4>
 800ddb6:	69fb      	ldr	r3, [r7, #28]
 800ddb8:	005b      	lsls	r3, r3, #1
 800ddba:	68fa      	ldr	r2, [r7, #12]
 800ddbc:	4413      	add	r3, r2
 800ddbe:	881b      	ldrh	r3, [r3, #0]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d103      	bne.n	800ddcc <put_lfn+0xbc>
 800ddc4:	79fb      	ldrb	r3, [r7, #7]
 800ddc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddca:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	79fa      	ldrb	r2, [r7, #7]
 800ddd0:	701a      	strb	r2, [r3, #0]
}
 800ddd2:	bf00      	nop
 800ddd4:	3720      	adds	r7, #32
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}
 800ddda:	bf00      	nop
 800dddc:	080108ec 	.word	0x080108ec

0800dde0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b08c      	sub	sp, #48	; 0x30
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	60f8      	str	r0, [r7, #12]
 800dde8:	60b9      	str	r1, [r7, #8]
 800ddea:	607a      	str	r2, [r7, #4]
 800ddec:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ddee:	220b      	movs	r2, #11
 800ddf0:	68b9      	ldr	r1, [r7, #8]
 800ddf2:	68f8      	ldr	r0, [r7, #12]
 800ddf4:	f7fe ffa8 	bl	800cd48 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	2b05      	cmp	r3, #5
 800ddfc:	d929      	bls.n	800de52 <gen_numname+0x72>
		sr = seq;
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800de02:	e020      	b.n	800de46 <gen_numname+0x66>
			wc = *lfn++;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	1c9a      	adds	r2, r3, #2
 800de08:	607a      	str	r2, [r7, #4]
 800de0a:	881b      	ldrh	r3, [r3, #0]
 800de0c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800de0e:	2300      	movs	r3, #0
 800de10:	62bb      	str	r3, [r7, #40]	; 0x28
 800de12:	e015      	b.n	800de40 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800de14:	69fb      	ldr	r3, [r7, #28]
 800de16:	005a      	lsls	r2, r3, #1
 800de18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de1a:	f003 0301 	and.w	r3, r3, #1
 800de1e:	4413      	add	r3, r2
 800de20:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800de22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de24:	085b      	lsrs	r3, r3, #1
 800de26:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800de28:	69fb      	ldr	r3, [r7, #28]
 800de2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d003      	beq.n	800de3a <gen_numname+0x5a>
 800de32:	69fa      	ldr	r2, [r7, #28]
 800de34:	4b30      	ldr	r3, [pc, #192]	; (800def8 <gen_numname+0x118>)
 800de36:	4053      	eors	r3, r2
 800de38:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800de3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de3c:	3301      	adds	r3, #1
 800de3e:	62bb      	str	r3, [r7, #40]	; 0x28
 800de40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de42:	2b0f      	cmp	r3, #15
 800de44:	d9e6      	bls.n	800de14 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	881b      	ldrh	r3, [r3, #0]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d1da      	bne.n	800de04 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800de4e:	69fb      	ldr	r3, [r7, #28]
 800de50:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800de52:	2307      	movs	r3, #7
 800de54:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	b2db      	uxtb	r3, r3
 800de5a:	f003 030f 	and.w	r3, r3, #15
 800de5e:	b2db      	uxtb	r3, r3
 800de60:	3330      	adds	r3, #48	; 0x30
 800de62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800de66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de6a:	2b39      	cmp	r3, #57	; 0x39
 800de6c:	d904      	bls.n	800de78 <gen_numname+0x98>
 800de6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de72:	3307      	adds	r3, #7
 800de74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800de78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de7a:	1e5a      	subs	r2, r3, #1
 800de7c:	62ba      	str	r2, [r7, #40]	; 0x28
 800de7e:	3330      	adds	r3, #48	; 0x30
 800de80:	443b      	add	r3, r7
 800de82:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800de86:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	091b      	lsrs	r3, r3, #4
 800de8e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d1df      	bne.n	800de56 <gen_numname+0x76>
	ns[i] = '~';
 800de96:	f107 0214 	add.w	r2, r7, #20
 800de9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de9c:	4413      	add	r3, r2
 800de9e:	227e      	movs	r2, #126	; 0x7e
 800dea0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800dea2:	2300      	movs	r3, #0
 800dea4:	627b      	str	r3, [r7, #36]	; 0x24
 800dea6:	e002      	b.n	800deae <gen_numname+0xce>
 800dea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deaa:	3301      	adds	r3, #1
 800deac:	627b      	str	r3, [r7, #36]	; 0x24
 800deae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d205      	bcs.n	800dec2 <gen_numname+0xe2>
 800deb6:	68fa      	ldr	r2, [r7, #12]
 800deb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deba:	4413      	add	r3, r2
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	2b20      	cmp	r3, #32
 800dec0:	d1f2      	bne.n	800dea8 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800dec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec4:	2b07      	cmp	r3, #7
 800dec6:	d807      	bhi.n	800ded8 <gen_numname+0xf8>
 800dec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deca:	1c5a      	adds	r2, r3, #1
 800decc:	62ba      	str	r2, [r7, #40]	; 0x28
 800dece:	3330      	adds	r3, #48	; 0x30
 800ded0:	443b      	add	r3, r7
 800ded2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ded6:	e000      	b.n	800deda <gen_numname+0xfa>
 800ded8:	2120      	movs	r1, #32
 800deda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dedc:	1c5a      	adds	r2, r3, #1
 800dede:	627a      	str	r2, [r7, #36]	; 0x24
 800dee0:	68fa      	ldr	r2, [r7, #12]
 800dee2:	4413      	add	r3, r2
 800dee4:	460a      	mov	r2, r1
 800dee6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800dee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deea:	2b07      	cmp	r3, #7
 800deec:	d9e9      	bls.n	800dec2 <gen_numname+0xe2>
}
 800deee:	bf00      	nop
 800def0:	bf00      	nop
 800def2:	3730      	adds	r7, #48	; 0x30
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}
 800def8:	00011021 	.word	0x00011021

0800defc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800defc:	b480      	push	{r7}
 800defe:	b085      	sub	sp, #20
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800df04:	2300      	movs	r3, #0
 800df06:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800df08:	230b      	movs	r3, #11
 800df0a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800df0c:	7bfb      	ldrb	r3, [r7, #15]
 800df0e:	b2da      	uxtb	r2, r3
 800df10:	0852      	lsrs	r2, r2, #1
 800df12:	01db      	lsls	r3, r3, #7
 800df14:	4313      	orrs	r3, r2
 800df16:	b2da      	uxtb	r2, r3
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	1c59      	adds	r1, r3, #1
 800df1c:	6079      	str	r1, [r7, #4]
 800df1e:	781b      	ldrb	r3, [r3, #0]
 800df20:	4413      	add	r3, r2
 800df22:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	3b01      	subs	r3, #1
 800df28:	60bb      	str	r3, [r7, #8]
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d1ed      	bne.n	800df0c <sum_sfn+0x10>
	return sum;
 800df30:	7bfb      	ldrb	r3, [r7, #15]
}
 800df32:	4618      	mov	r0, r3
 800df34:	3714      	adds	r7, #20
 800df36:	46bd      	mov	sp, r7
 800df38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3c:	4770      	bx	lr

0800df3e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800df3e:	b580      	push	{r7, lr}
 800df40:	b086      	sub	sp, #24
 800df42:	af00      	add	r7, sp, #0
 800df44:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800df4c:	2100      	movs	r1, #0
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f7ff fca8 	bl	800d8a4 <dir_sdi>
 800df54:	4603      	mov	r3, r0
 800df56:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800df58:	7dfb      	ldrb	r3, [r7, #23]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d001      	beq.n	800df62 <dir_find+0x24>
 800df5e:	7dfb      	ldrb	r3, [r7, #23]
 800df60:	e0a9      	b.n	800e0b6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800df62:	23ff      	movs	r3, #255	; 0xff
 800df64:	753b      	strb	r3, [r7, #20]
 800df66:	7d3b      	ldrb	r3, [r7, #20]
 800df68:	757b      	strb	r3, [r7, #21]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df70:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	69db      	ldr	r3, [r3, #28]
 800df76:	4619      	mov	r1, r3
 800df78:	6938      	ldr	r0, [r7, #16]
 800df7a:	f7ff f913 	bl	800d1a4 <move_window>
 800df7e:	4603      	mov	r3, r0
 800df80:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800df82:	7dfb      	ldrb	r3, [r7, #23]
 800df84:	2b00      	cmp	r3, #0
 800df86:	f040 8090 	bne.w	800e0aa <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6a1b      	ldr	r3, [r3, #32]
 800df8e:	781b      	ldrb	r3, [r3, #0]
 800df90:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800df92:	7dbb      	ldrb	r3, [r7, #22]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d102      	bne.n	800df9e <dir_find+0x60>
 800df98:	2304      	movs	r3, #4
 800df9a:	75fb      	strb	r3, [r7, #23]
 800df9c:	e08a      	b.n	800e0b4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6a1b      	ldr	r3, [r3, #32]
 800dfa2:	330b      	adds	r3, #11
 800dfa4:	781b      	ldrb	r3, [r3, #0]
 800dfa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dfaa:	73fb      	strb	r3, [r7, #15]
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	7bfa      	ldrb	r2, [r7, #15]
 800dfb0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800dfb2:	7dbb      	ldrb	r3, [r7, #22]
 800dfb4:	2be5      	cmp	r3, #229	; 0xe5
 800dfb6:	d007      	beq.n	800dfc8 <dir_find+0x8a>
 800dfb8:	7bfb      	ldrb	r3, [r7, #15]
 800dfba:	f003 0308 	and.w	r3, r3, #8
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d009      	beq.n	800dfd6 <dir_find+0x98>
 800dfc2:	7bfb      	ldrb	r3, [r7, #15]
 800dfc4:	2b0f      	cmp	r3, #15
 800dfc6:	d006      	beq.n	800dfd6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800dfc8:	23ff      	movs	r3, #255	; 0xff
 800dfca:	757b      	strb	r3, [r7, #21]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfd2:	631a      	str	r2, [r3, #48]	; 0x30
 800dfd4:	e05e      	b.n	800e094 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800dfd6:	7bfb      	ldrb	r3, [r7, #15]
 800dfd8:	2b0f      	cmp	r3, #15
 800dfda:	d136      	bne.n	800e04a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dfe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d154      	bne.n	800e094 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800dfea:	7dbb      	ldrb	r3, [r7, #22]
 800dfec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d00d      	beq.n	800e010 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6a1b      	ldr	r3, [r3, #32]
 800dff8:	7b5b      	ldrb	r3, [r3, #13]
 800dffa:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800dffc:	7dbb      	ldrb	r3, [r7, #22]
 800dffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e002:	75bb      	strb	r3, [r7, #22]
 800e004:	7dbb      	ldrb	r3, [r7, #22]
 800e006:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	695a      	ldr	r2, [r3, #20]
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e010:	7dba      	ldrb	r2, [r7, #22]
 800e012:	7d7b      	ldrb	r3, [r7, #21]
 800e014:	429a      	cmp	r2, r3
 800e016:	d115      	bne.n	800e044 <dir_find+0x106>
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	6a1b      	ldr	r3, [r3, #32]
 800e01c:	330d      	adds	r3, #13
 800e01e:	781b      	ldrb	r3, [r3, #0]
 800e020:	7d3a      	ldrb	r2, [r7, #20]
 800e022:	429a      	cmp	r2, r3
 800e024:	d10e      	bne.n	800e044 <dir_find+0x106>
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	68da      	ldr	r2, [r3, #12]
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6a1b      	ldr	r3, [r3, #32]
 800e02e:	4619      	mov	r1, r3
 800e030:	4610      	mov	r0, r2
 800e032:	f7ff fdfd 	bl	800dc30 <cmp_lfn>
 800e036:	4603      	mov	r3, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d003      	beq.n	800e044 <dir_find+0x106>
 800e03c:	7d7b      	ldrb	r3, [r7, #21]
 800e03e:	3b01      	subs	r3, #1
 800e040:	b2db      	uxtb	r3, r3
 800e042:	e000      	b.n	800e046 <dir_find+0x108>
 800e044:	23ff      	movs	r3, #255	; 0xff
 800e046:	757b      	strb	r3, [r7, #21]
 800e048:	e024      	b.n	800e094 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e04a:	7d7b      	ldrb	r3, [r7, #21]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d109      	bne.n	800e064 <dir_find+0x126>
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6a1b      	ldr	r3, [r3, #32]
 800e054:	4618      	mov	r0, r3
 800e056:	f7ff ff51 	bl	800defc <sum_sfn>
 800e05a:	4603      	mov	r3, r0
 800e05c:	461a      	mov	r2, r3
 800e05e:	7d3b      	ldrb	r3, [r7, #20]
 800e060:	4293      	cmp	r3, r2
 800e062:	d024      	beq.n	800e0ae <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e06a:	f003 0301 	and.w	r3, r3, #1
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d10a      	bne.n	800e088 <dir_find+0x14a>
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6a18      	ldr	r0, [r3, #32]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	3324      	adds	r3, #36	; 0x24
 800e07a:	220b      	movs	r2, #11
 800e07c:	4619      	mov	r1, r3
 800e07e:	f7fe fe9f 	bl	800cdc0 <mem_cmp>
 800e082:	4603      	mov	r3, r0
 800e084:	2b00      	cmp	r3, #0
 800e086:	d014      	beq.n	800e0b2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e088:	23ff      	movs	r3, #255	; 0xff
 800e08a:	757b      	strb	r3, [r7, #21]
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e092:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e094:	2100      	movs	r1, #0
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f7ff fc7f 	bl	800d99a <dir_next>
 800e09c:	4603      	mov	r3, r0
 800e09e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e0a0:	7dfb      	ldrb	r3, [r7, #23]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	f43f af65 	beq.w	800df72 <dir_find+0x34>
 800e0a8:	e004      	b.n	800e0b4 <dir_find+0x176>
		if (res != FR_OK) break;
 800e0aa:	bf00      	nop
 800e0ac:	e002      	b.n	800e0b4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e0ae:	bf00      	nop
 800e0b0:	e000      	b.n	800e0b4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e0b2:	bf00      	nop

	return res;
 800e0b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3718      	adds	r7, #24
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}
	...

0800e0c0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b08c      	sub	sp, #48	; 0x30
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e0d4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d001      	beq.n	800e0e0 <dir_register+0x20>
 800e0dc:	2306      	movs	r3, #6
 800e0de:	e0e0      	b.n	800e2a2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	627b      	str	r3, [r7, #36]	; 0x24
 800e0e4:	e002      	b.n	800e0ec <dir_register+0x2c>
 800e0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e8:	3301      	adds	r3, #1
 800e0ea:	627b      	str	r3, [r7, #36]	; 0x24
 800e0ec:	69fb      	ldr	r3, [r7, #28]
 800e0ee:	68da      	ldr	r2, [r3, #12]
 800e0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f2:	005b      	lsls	r3, r3, #1
 800e0f4:	4413      	add	r3, r2
 800e0f6:	881b      	ldrh	r3, [r3, #0]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d1f4      	bne.n	800e0e6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800e102:	f107 030c 	add.w	r3, r7, #12
 800e106:	220c      	movs	r2, #12
 800e108:	4618      	mov	r0, r3
 800e10a:	f7fe fe1d 	bl	800cd48 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e10e:	7dfb      	ldrb	r3, [r7, #23]
 800e110:	f003 0301 	and.w	r3, r3, #1
 800e114:	2b00      	cmp	r3, #0
 800e116:	d032      	beq.n	800e17e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2240      	movs	r2, #64	; 0x40
 800e11c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800e120:	2301      	movs	r3, #1
 800e122:	62bb      	str	r3, [r7, #40]	; 0x28
 800e124:	e016      	b.n	800e154 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800e12c:	69fb      	ldr	r3, [r7, #28]
 800e12e:	68da      	ldr	r2, [r3, #12]
 800e130:	f107 010c 	add.w	r1, r7, #12
 800e134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e136:	f7ff fe53 	bl	800dde0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f7ff feff 	bl	800df3e <dir_find>
 800e140:	4603      	mov	r3, r0
 800e142:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800e146:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d106      	bne.n	800e15c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e150:	3301      	adds	r3, #1
 800e152:	62bb      	str	r3, [r7, #40]	; 0x28
 800e154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e156:	2b63      	cmp	r3, #99	; 0x63
 800e158:	d9e5      	bls.n	800e126 <dir_register+0x66>
 800e15a:	e000      	b.n	800e15e <dir_register+0x9e>
			if (res != FR_OK) break;
 800e15c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e160:	2b64      	cmp	r3, #100	; 0x64
 800e162:	d101      	bne.n	800e168 <dir_register+0xa8>
 800e164:	2307      	movs	r3, #7
 800e166:	e09c      	b.n	800e2a2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e168:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e16c:	2b04      	cmp	r3, #4
 800e16e:	d002      	beq.n	800e176 <dir_register+0xb6>
 800e170:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e174:	e095      	b.n	800e2a2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e176:	7dfa      	ldrb	r2, [r7, #23]
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e17e:	7dfb      	ldrb	r3, [r7, #23]
 800e180:	f003 0302 	and.w	r3, r3, #2
 800e184:	2b00      	cmp	r3, #0
 800e186:	d007      	beq.n	800e198 <dir_register+0xd8>
 800e188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e18a:	330c      	adds	r3, #12
 800e18c:	4a47      	ldr	r2, [pc, #284]	; (800e2ac <dir_register+0x1ec>)
 800e18e:	fba2 2303 	umull	r2, r3, r2, r3
 800e192:	089b      	lsrs	r3, r3, #2
 800e194:	3301      	adds	r3, #1
 800e196:	e000      	b.n	800e19a <dir_register+0xda>
 800e198:	2301      	movs	r3, #1
 800e19a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e19c:	6a39      	ldr	r1, [r7, #32]
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	f7ff fcc0 	bl	800db24 <dir_alloc>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e1aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d148      	bne.n	800e244 <dir_register+0x184>
 800e1b2:	6a3b      	ldr	r3, [r7, #32]
 800e1b4:	3b01      	subs	r3, #1
 800e1b6:	623b      	str	r3, [r7, #32]
 800e1b8:	6a3b      	ldr	r3, [r7, #32]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d042      	beq.n	800e244 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	695a      	ldr	r2, [r3, #20]
 800e1c2:	6a3b      	ldr	r3, [r7, #32]
 800e1c4:	015b      	lsls	r3, r3, #5
 800e1c6:	1ad3      	subs	r3, r2, r3
 800e1c8:	4619      	mov	r1, r3
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f7ff fb6a 	bl	800d8a4 <dir_sdi>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e1d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d132      	bne.n	800e244 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	3324      	adds	r3, #36	; 0x24
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7ff fe8a 	bl	800defc <sum_sfn>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	69db      	ldr	r3, [r3, #28]
 800e1f0:	4619      	mov	r1, r3
 800e1f2:	69f8      	ldr	r0, [r7, #28]
 800e1f4:	f7fe ffd6 	bl	800d1a4 <move_window>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800e1fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e202:	2b00      	cmp	r3, #0
 800e204:	d11d      	bne.n	800e242 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e206:	69fb      	ldr	r3, [r7, #28]
 800e208:	68d8      	ldr	r0, [r3, #12]
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6a19      	ldr	r1, [r3, #32]
 800e20e:	6a3b      	ldr	r3, [r7, #32]
 800e210:	b2da      	uxtb	r2, r3
 800e212:	7efb      	ldrb	r3, [r7, #27]
 800e214:	f7ff fd7c 	bl	800dd10 <put_lfn>
				fs->wflag = 1;
 800e218:	69fb      	ldr	r3, [r7, #28]
 800e21a:	2201      	movs	r2, #1
 800e21c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e21e:	2100      	movs	r1, #0
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f7ff fbba 	bl	800d99a <dir_next>
 800e226:	4603      	mov	r3, r0
 800e228:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800e22c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e230:	2b00      	cmp	r3, #0
 800e232:	d107      	bne.n	800e244 <dir_register+0x184>
 800e234:	6a3b      	ldr	r3, [r7, #32]
 800e236:	3b01      	subs	r3, #1
 800e238:	623b      	str	r3, [r7, #32]
 800e23a:	6a3b      	ldr	r3, [r7, #32]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d1d5      	bne.n	800e1ec <dir_register+0x12c>
 800e240:	e000      	b.n	800e244 <dir_register+0x184>
				if (res != FR_OK) break;
 800e242:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e244:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d128      	bne.n	800e29e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	69db      	ldr	r3, [r3, #28]
 800e250:	4619      	mov	r1, r3
 800e252:	69f8      	ldr	r0, [r7, #28]
 800e254:	f7fe ffa6 	bl	800d1a4 <move_window>
 800e258:	4603      	mov	r3, r0
 800e25a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e25e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e262:	2b00      	cmp	r3, #0
 800e264:	d11b      	bne.n	800e29e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6a1b      	ldr	r3, [r3, #32]
 800e26a:	2220      	movs	r2, #32
 800e26c:	2100      	movs	r1, #0
 800e26e:	4618      	mov	r0, r3
 800e270:	f7fe fd8b 	bl	800cd8a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6a18      	ldr	r0, [r3, #32]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	3324      	adds	r3, #36	; 0x24
 800e27c:	220b      	movs	r2, #11
 800e27e:	4619      	mov	r1, r3
 800e280:	f7fe fd62 	bl	800cd48 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6a1b      	ldr	r3, [r3, #32]
 800e28e:	330c      	adds	r3, #12
 800e290:	f002 0218 	and.w	r2, r2, #24
 800e294:	b2d2      	uxtb	r2, r2
 800e296:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e298:	69fb      	ldr	r3, [r7, #28]
 800e29a:	2201      	movs	r2, #1
 800e29c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e29e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3730      	adds	r7, #48	; 0x30
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}
 800e2aa:	bf00      	nop
 800e2ac:	4ec4ec4f 	.word	0x4ec4ec4f

0800e2b0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b08a      	sub	sp, #40	; 0x28
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	613b      	str	r3, [r7, #16]
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	68db      	ldr	r3, [r3, #12]
 800e2c6:	60fb      	str	r3, [r7, #12]
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	617b      	str	r3, [r7, #20]
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e2d0:	69bb      	ldr	r3, [r7, #24]
 800e2d2:	1c5a      	adds	r2, r3, #1
 800e2d4:	61ba      	str	r2, [r7, #24]
 800e2d6:	693a      	ldr	r2, [r7, #16]
 800e2d8:	4413      	add	r3, r2
 800e2da:	781b      	ldrb	r3, [r3, #0]
 800e2dc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e2de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2e0:	2b1f      	cmp	r3, #31
 800e2e2:	d940      	bls.n	800e366 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e2e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2e6:	2b2f      	cmp	r3, #47	; 0x2f
 800e2e8:	d006      	beq.n	800e2f8 <create_name+0x48>
 800e2ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2ec:	2b5c      	cmp	r3, #92	; 0x5c
 800e2ee:	d110      	bne.n	800e312 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e2f0:	e002      	b.n	800e2f8 <create_name+0x48>
 800e2f2:	69bb      	ldr	r3, [r7, #24]
 800e2f4:	3301      	adds	r3, #1
 800e2f6:	61bb      	str	r3, [r7, #24]
 800e2f8:	693a      	ldr	r2, [r7, #16]
 800e2fa:	69bb      	ldr	r3, [r7, #24]
 800e2fc:	4413      	add	r3, r2
 800e2fe:	781b      	ldrb	r3, [r3, #0]
 800e300:	2b2f      	cmp	r3, #47	; 0x2f
 800e302:	d0f6      	beq.n	800e2f2 <create_name+0x42>
 800e304:	693a      	ldr	r2, [r7, #16]
 800e306:	69bb      	ldr	r3, [r7, #24]
 800e308:	4413      	add	r3, r2
 800e30a:	781b      	ldrb	r3, [r3, #0]
 800e30c:	2b5c      	cmp	r3, #92	; 0x5c
 800e30e:	d0f0      	beq.n	800e2f2 <create_name+0x42>
			break;
 800e310:	e02a      	b.n	800e368 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e312:	697b      	ldr	r3, [r7, #20]
 800e314:	2bfe      	cmp	r3, #254	; 0xfe
 800e316:	d901      	bls.n	800e31c <create_name+0x6c>
 800e318:	2306      	movs	r3, #6
 800e31a:	e17d      	b.n	800e618 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e31c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e31e:	b2db      	uxtb	r3, r3
 800e320:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e322:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e324:	2101      	movs	r1, #1
 800e326:	4618      	mov	r0, r3
 800e328:	f001 f954 	bl	800f5d4 <ff_convert>
 800e32c:	4603      	mov	r3, r0
 800e32e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e330:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e332:	2b00      	cmp	r3, #0
 800e334:	d101      	bne.n	800e33a <create_name+0x8a>
 800e336:	2306      	movs	r3, #6
 800e338:	e16e      	b.n	800e618 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e33a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e33c:	2b7f      	cmp	r3, #127	; 0x7f
 800e33e:	d809      	bhi.n	800e354 <create_name+0xa4>
 800e340:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e342:	4619      	mov	r1, r3
 800e344:	488d      	ldr	r0, [pc, #564]	; (800e57c <create_name+0x2cc>)
 800e346:	f7fe fd62 	bl	800ce0e <chk_chr>
 800e34a:	4603      	mov	r3, r0
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d001      	beq.n	800e354 <create_name+0xa4>
 800e350:	2306      	movs	r3, #6
 800e352:	e161      	b.n	800e618 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	1c5a      	adds	r2, r3, #1
 800e358:	617a      	str	r2, [r7, #20]
 800e35a:	005b      	lsls	r3, r3, #1
 800e35c:	68fa      	ldr	r2, [r7, #12]
 800e35e:	4413      	add	r3, r2
 800e360:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e362:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e364:	e7b4      	b.n	800e2d0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e366:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e368:	693a      	ldr	r2, [r7, #16]
 800e36a:	69bb      	ldr	r3, [r7, #24]
 800e36c:	441a      	add	r2, r3
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e374:	2b1f      	cmp	r3, #31
 800e376:	d801      	bhi.n	800e37c <create_name+0xcc>
 800e378:	2304      	movs	r3, #4
 800e37a:	e000      	b.n	800e37e <create_name+0xce>
 800e37c:	2300      	movs	r3, #0
 800e37e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e382:	e011      	b.n	800e3a8 <create_name+0xf8>
		w = lfn[di - 1];
 800e384:	697a      	ldr	r2, [r7, #20]
 800e386:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e38a:	4413      	add	r3, r2
 800e38c:	005b      	lsls	r3, r3, #1
 800e38e:	68fa      	ldr	r2, [r7, #12]
 800e390:	4413      	add	r3, r2
 800e392:	881b      	ldrh	r3, [r3, #0]
 800e394:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e396:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e398:	2b20      	cmp	r3, #32
 800e39a:	d002      	beq.n	800e3a2 <create_name+0xf2>
 800e39c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e39e:	2b2e      	cmp	r3, #46	; 0x2e
 800e3a0:	d106      	bne.n	800e3b0 <create_name+0x100>
		di--;
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	3b01      	subs	r3, #1
 800e3a6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d1ea      	bne.n	800e384 <create_name+0xd4>
 800e3ae:	e000      	b.n	800e3b2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e3b0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	005b      	lsls	r3, r3, #1
 800e3b6:	68fa      	ldr	r2, [r7, #12]
 800e3b8:	4413      	add	r3, r2
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e3be:	697b      	ldr	r3, [r7, #20]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d101      	bne.n	800e3c8 <create_name+0x118>
 800e3c4:	2306      	movs	r3, #6
 800e3c6:	e127      	b.n	800e618 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	3324      	adds	r3, #36	; 0x24
 800e3cc:	220b      	movs	r2, #11
 800e3ce:	2120      	movs	r1, #32
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f7fe fcda 	bl	800cd8a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	61bb      	str	r3, [r7, #24]
 800e3da:	e002      	b.n	800e3e2 <create_name+0x132>
 800e3dc:	69bb      	ldr	r3, [r7, #24]
 800e3de:	3301      	adds	r3, #1
 800e3e0:	61bb      	str	r3, [r7, #24]
 800e3e2:	69bb      	ldr	r3, [r7, #24]
 800e3e4:	005b      	lsls	r3, r3, #1
 800e3e6:	68fa      	ldr	r2, [r7, #12]
 800e3e8:	4413      	add	r3, r2
 800e3ea:	881b      	ldrh	r3, [r3, #0]
 800e3ec:	2b20      	cmp	r3, #32
 800e3ee:	d0f5      	beq.n	800e3dc <create_name+0x12c>
 800e3f0:	69bb      	ldr	r3, [r7, #24]
 800e3f2:	005b      	lsls	r3, r3, #1
 800e3f4:	68fa      	ldr	r2, [r7, #12]
 800e3f6:	4413      	add	r3, r2
 800e3f8:	881b      	ldrh	r3, [r3, #0]
 800e3fa:	2b2e      	cmp	r3, #46	; 0x2e
 800e3fc:	d0ee      	beq.n	800e3dc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e3fe:	69bb      	ldr	r3, [r7, #24]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d009      	beq.n	800e418 <create_name+0x168>
 800e404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e408:	f043 0303 	orr.w	r3, r3, #3
 800e40c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e410:	e002      	b.n	800e418 <create_name+0x168>
 800e412:	697b      	ldr	r3, [r7, #20]
 800e414:	3b01      	subs	r3, #1
 800e416:	617b      	str	r3, [r7, #20]
 800e418:	697b      	ldr	r3, [r7, #20]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d009      	beq.n	800e432 <create_name+0x182>
 800e41e:	697a      	ldr	r2, [r7, #20]
 800e420:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e424:	4413      	add	r3, r2
 800e426:	005b      	lsls	r3, r3, #1
 800e428:	68fa      	ldr	r2, [r7, #12]
 800e42a:	4413      	add	r3, r2
 800e42c:	881b      	ldrh	r3, [r3, #0]
 800e42e:	2b2e      	cmp	r3, #46	; 0x2e
 800e430:	d1ef      	bne.n	800e412 <create_name+0x162>

	i = b = 0; ni = 8;
 800e432:	2300      	movs	r3, #0
 800e434:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e438:	2300      	movs	r3, #0
 800e43a:	623b      	str	r3, [r7, #32]
 800e43c:	2308      	movs	r3, #8
 800e43e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e440:	69bb      	ldr	r3, [r7, #24]
 800e442:	1c5a      	adds	r2, r3, #1
 800e444:	61ba      	str	r2, [r7, #24]
 800e446:	005b      	lsls	r3, r3, #1
 800e448:	68fa      	ldr	r2, [r7, #12]
 800e44a:	4413      	add	r3, r2
 800e44c:	881b      	ldrh	r3, [r3, #0]
 800e44e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e450:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e452:	2b00      	cmp	r3, #0
 800e454:	f000 8090 	beq.w	800e578 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e458:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e45a:	2b20      	cmp	r3, #32
 800e45c:	d006      	beq.n	800e46c <create_name+0x1bc>
 800e45e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e460:	2b2e      	cmp	r3, #46	; 0x2e
 800e462:	d10a      	bne.n	800e47a <create_name+0x1ca>
 800e464:	69ba      	ldr	r2, [r7, #24]
 800e466:	697b      	ldr	r3, [r7, #20]
 800e468:	429a      	cmp	r2, r3
 800e46a:	d006      	beq.n	800e47a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e46c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e470:	f043 0303 	orr.w	r3, r3, #3
 800e474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e478:	e07d      	b.n	800e576 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e47a:	6a3a      	ldr	r2, [r7, #32]
 800e47c:	69fb      	ldr	r3, [r7, #28]
 800e47e:	429a      	cmp	r2, r3
 800e480:	d203      	bcs.n	800e48a <create_name+0x1da>
 800e482:	69ba      	ldr	r2, [r7, #24]
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	429a      	cmp	r2, r3
 800e488:	d123      	bne.n	800e4d2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e48a:	69fb      	ldr	r3, [r7, #28]
 800e48c:	2b0b      	cmp	r3, #11
 800e48e:	d106      	bne.n	800e49e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e494:	f043 0303 	orr.w	r3, r3, #3
 800e498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e49c:	e075      	b.n	800e58a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e49e:	69ba      	ldr	r2, [r7, #24]
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d005      	beq.n	800e4b2 <create_name+0x202>
 800e4a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4aa:	f043 0303 	orr.w	r3, r3, #3
 800e4ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e4b2:	69ba      	ldr	r2, [r7, #24]
 800e4b4:	697b      	ldr	r3, [r7, #20]
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d866      	bhi.n	800e588 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e4ba:	697b      	ldr	r3, [r7, #20]
 800e4bc:	61bb      	str	r3, [r7, #24]
 800e4be:	2308      	movs	r3, #8
 800e4c0:	623b      	str	r3, [r7, #32]
 800e4c2:	230b      	movs	r3, #11
 800e4c4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e4c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e4ca:	009b      	lsls	r3, r3, #2
 800e4cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e4d0:	e051      	b.n	800e576 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e4d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4d4:	2b7f      	cmp	r3, #127	; 0x7f
 800e4d6:	d914      	bls.n	800e502 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e4d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4da:	2100      	movs	r1, #0
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f001 f879 	bl	800f5d4 <ff_convert>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e4e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d004      	beq.n	800e4f6 <create_name+0x246>
 800e4ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4ee:	3b80      	subs	r3, #128	; 0x80
 800e4f0:	4a23      	ldr	r2, [pc, #140]	; (800e580 <create_name+0x2d0>)
 800e4f2:	5cd3      	ldrb	r3, [r2, r3]
 800e4f4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e4f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4fa:	f043 0302 	orr.w	r3, r3, #2
 800e4fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e502:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e504:	2b00      	cmp	r3, #0
 800e506:	d007      	beq.n	800e518 <create_name+0x268>
 800e508:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e50a:	4619      	mov	r1, r3
 800e50c:	481d      	ldr	r0, [pc, #116]	; (800e584 <create_name+0x2d4>)
 800e50e:	f7fe fc7e 	bl	800ce0e <chk_chr>
 800e512:	4603      	mov	r3, r0
 800e514:	2b00      	cmp	r3, #0
 800e516:	d008      	beq.n	800e52a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e518:	235f      	movs	r3, #95	; 0x5f
 800e51a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e51c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e520:	f043 0303 	orr.w	r3, r3, #3
 800e524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e528:	e01b      	b.n	800e562 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e52a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e52c:	2b40      	cmp	r3, #64	; 0x40
 800e52e:	d909      	bls.n	800e544 <create_name+0x294>
 800e530:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e532:	2b5a      	cmp	r3, #90	; 0x5a
 800e534:	d806      	bhi.n	800e544 <create_name+0x294>
					b |= 2;
 800e536:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e53a:	f043 0302 	orr.w	r3, r3, #2
 800e53e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e542:	e00e      	b.n	800e562 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e544:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e546:	2b60      	cmp	r3, #96	; 0x60
 800e548:	d90b      	bls.n	800e562 <create_name+0x2b2>
 800e54a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e54c:	2b7a      	cmp	r3, #122	; 0x7a
 800e54e:	d808      	bhi.n	800e562 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e550:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e554:	f043 0301 	orr.w	r3, r3, #1
 800e558:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e55c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e55e:	3b20      	subs	r3, #32
 800e560:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e562:	6a3b      	ldr	r3, [r7, #32]
 800e564:	1c5a      	adds	r2, r3, #1
 800e566:	623a      	str	r2, [r7, #32]
 800e568:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e56a:	b2d1      	uxtb	r1, r2
 800e56c:	687a      	ldr	r2, [r7, #4]
 800e56e:	4413      	add	r3, r2
 800e570:	460a      	mov	r2, r1
 800e572:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800e576:	e763      	b.n	800e440 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e578:	bf00      	nop
 800e57a:	e006      	b.n	800e58a <create_name+0x2da>
 800e57c:	0801023c 	.word	0x0801023c
 800e580:	0801086c 	.word	0x0801086c
 800e584:	08010248 	.word	0x08010248
			if (si > di) break;			/* No extension */
 800e588:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e590:	2be5      	cmp	r3, #229	; 0xe5
 800e592:	d103      	bne.n	800e59c <create_name+0x2ec>
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2205      	movs	r2, #5
 800e598:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800e59c:	69fb      	ldr	r3, [r7, #28]
 800e59e:	2b08      	cmp	r3, #8
 800e5a0:	d104      	bne.n	800e5ac <create_name+0x2fc>
 800e5a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e5a6:	009b      	lsls	r3, r3, #2
 800e5a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e5ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e5b0:	f003 030c 	and.w	r3, r3, #12
 800e5b4:	2b0c      	cmp	r3, #12
 800e5b6:	d005      	beq.n	800e5c4 <create_name+0x314>
 800e5b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e5bc:	f003 0303 	and.w	r3, r3, #3
 800e5c0:	2b03      	cmp	r3, #3
 800e5c2:	d105      	bne.n	800e5d0 <create_name+0x320>
 800e5c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5c8:	f043 0302 	orr.w	r3, r3, #2
 800e5cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e5d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5d4:	f003 0302 	and.w	r3, r3, #2
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d117      	bne.n	800e60c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e5dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e5e0:	f003 0303 	and.w	r3, r3, #3
 800e5e4:	2b01      	cmp	r3, #1
 800e5e6:	d105      	bne.n	800e5f4 <create_name+0x344>
 800e5e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5ec:	f043 0310 	orr.w	r3, r3, #16
 800e5f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e5f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e5f8:	f003 030c 	and.w	r3, r3, #12
 800e5fc:	2b04      	cmp	r3, #4
 800e5fe:	d105      	bne.n	800e60c <create_name+0x35c>
 800e600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e604:	f043 0308 	orr.w	r3, r3, #8
 800e608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e612:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800e616:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e618:	4618      	mov	r0, r3
 800e61a:	3728      	adds	r7, #40	; 0x28
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}

0800e620 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b086      	sub	sp, #24
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
 800e628:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e62e:	693b      	ldr	r3, [r7, #16]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e634:	e002      	b.n	800e63c <follow_path+0x1c>
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	3301      	adds	r3, #1
 800e63a:	603b      	str	r3, [r7, #0]
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	781b      	ldrb	r3, [r3, #0]
 800e640:	2b2f      	cmp	r3, #47	; 0x2f
 800e642:	d0f8      	beq.n	800e636 <follow_path+0x16>
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	781b      	ldrb	r3, [r3, #0]
 800e648:	2b5c      	cmp	r3, #92	; 0x5c
 800e64a:	d0f4      	beq.n	800e636 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e64c:	693b      	ldr	r3, [r7, #16]
 800e64e:	2200      	movs	r2, #0
 800e650:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	781b      	ldrb	r3, [r3, #0]
 800e656:	2b1f      	cmp	r3, #31
 800e658:	d80a      	bhi.n	800e670 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2280      	movs	r2, #128	; 0x80
 800e65e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e662:	2100      	movs	r1, #0
 800e664:	6878      	ldr	r0, [r7, #4]
 800e666:	f7ff f91d 	bl	800d8a4 <dir_sdi>
 800e66a:	4603      	mov	r3, r0
 800e66c:	75fb      	strb	r3, [r7, #23]
 800e66e:	e043      	b.n	800e6f8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e670:	463b      	mov	r3, r7
 800e672:	4619      	mov	r1, r3
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f7ff fe1b 	bl	800e2b0 <create_name>
 800e67a:	4603      	mov	r3, r0
 800e67c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e67e:	7dfb      	ldrb	r3, [r7, #23]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d134      	bne.n	800e6ee <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f7ff fc5a 	bl	800df3e <dir_find>
 800e68a:	4603      	mov	r3, r0
 800e68c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e694:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e696:	7dfb      	ldrb	r3, [r7, #23]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d00a      	beq.n	800e6b2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e69c:	7dfb      	ldrb	r3, [r7, #23]
 800e69e:	2b04      	cmp	r3, #4
 800e6a0:	d127      	bne.n	800e6f2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e6a2:	7afb      	ldrb	r3, [r7, #11]
 800e6a4:	f003 0304 	and.w	r3, r3, #4
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d122      	bne.n	800e6f2 <follow_path+0xd2>
 800e6ac:	2305      	movs	r3, #5
 800e6ae:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e6b0:	e01f      	b.n	800e6f2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e6b2:	7afb      	ldrb	r3, [r7, #11]
 800e6b4:	f003 0304 	and.w	r3, r3, #4
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d11c      	bne.n	800e6f6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e6bc:	693b      	ldr	r3, [r7, #16]
 800e6be:	799b      	ldrb	r3, [r3, #6]
 800e6c0:	f003 0310 	and.w	r3, r3, #16
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d102      	bne.n	800e6ce <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e6c8:	2305      	movs	r3, #5
 800e6ca:	75fb      	strb	r3, [r7, #23]
 800e6cc:	e014      	b.n	800e6f8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	695b      	ldr	r3, [r3, #20]
 800e6d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6dc:	4413      	add	r3, r2
 800e6de:	4619      	mov	r1, r3
 800e6e0:	68f8      	ldr	r0, [r7, #12]
 800e6e2:	f7ff fa66 	bl	800dbb2 <ld_clust>
 800e6e6:	4602      	mov	r2, r0
 800e6e8:	693b      	ldr	r3, [r7, #16]
 800e6ea:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e6ec:	e7c0      	b.n	800e670 <follow_path+0x50>
			if (res != FR_OK) break;
 800e6ee:	bf00      	nop
 800e6f0:	e002      	b.n	800e6f8 <follow_path+0xd8>
				break;
 800e6f2:	bf00      	nop
 800e6f4:	e000      	b.n	800e6f8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e6f6:	bf00      	nop
			}
		}
	}

	return res;
 800e6f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	3718      	adds	r7, #24
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}

0800e702 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e702:	b480      	push	{r7}
 800e704:	b087      	sub	sp, #28
 800e706:	af00      	add	r7, sp, #0
 800e708:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e70a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e70e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d031      	beq.n	800e77c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	617b      	str	r3, [r7, #20]
 800e71e:	e002      	b.n	800e726 <get_ldnumber+0x24>
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	3301      	adds	r3, #1
 800e724:	617b      	str	r3, [r7, #20]
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	781b      	ldrb	r3, [r3, #0]
 800e72a:	2b1f      	cmp	r3, #31
 800e72c:	d903      	bls.n	800e736 <get_ldnumber+0x34>
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	781b      	ldrb	r3, [r3, #0]
 800e732:	2b3a      	cmp	r3, #58	; 0x3a
 800e734:	d1f4      	bne.n	800e720 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	781b      	ldrb	r3, [r3, #0]
 800e73a:	2b3a      	cmp	r3, #58	; 0x3a
 800e73c:	d11c      	bne.n	800e778 <get_ldnumber+0x76>
			tp = *path;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	1c5a      	adds	r2, r3, #1
 800e748:	60fa      	str	r2, [r7, #12]
 800e74a:	781b      	ldrb	r3, [r3, #0]
 800e74c:	3b30      	subs	r3, #48	; 0x30
 800e74e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	2b09      	cmp	r3, #9
 800e754:	d80e      	bhi.n	800e774 <get_ldnumber+0x72>
 800e756:	68fa      	ldr	r2, [r7, #12]
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	429a      	cmp	r2, r3
 800e75c:	d10a      	bne.n	800e774 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d107      	bne.n	800e774 <get_ldnumber+0x72>
					vol = (int)i;
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	3301      	adds	r3, #1
 800e76c:	617b      	str	r3, [r7, #20]
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	697a      	ldr	r2, [r7, #20]
 800e772:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e774:	693b      	ldr	r3, [r7, #16]
 800e776:	e002      	b.n	800e77e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e778:	2300      	movs	r3, #0
 800e77a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e77c:	693b      	ldr	r3, [r7, #16]
}
 800e77e:	4618      	mov	r0, r3
 800e780:	371c      	adds	r7, #28
 800e782:	46bd      	mov	sp, r7
 800e784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e788:	4770      	bx	lr
	...

0800e78c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b082      	sub	sp, #8
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2200      	movs	r2, #0
 800e79a:	70da      	strb	r2, [r3, #3]
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e7a2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e7a4:	6839      	ldr	r1, [r7, #0]
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f7fe fcfc 	bl	800d1a4 <move_window>
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d001      	beq.n	800e7b6 <check_fs+0x2a>
 800e7b2:	2304      	movs	r3, #4
 800e7b4:	e038      	b.n	800e828 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	3334      	adds	r3, #52	; 0x34
 800e7ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e7be:	4618      	mov	r0, r3
 800e7c0:	f7fe fa40 	bl	800cc44 <ld_word>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	461a      	mov	r2, r3
 800e7c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d001      	beq.n	800e7d4 <check_fs+0x48>
 800e7d0:	2303      	movs	r3, #3
 800e7d2:	e029      	b.n	800e828 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e7da:	2be9      	cmp	r3, #233	; 0xe9
 800e7dc:	d009      	beq.n	800e7f2 <check_fs+0x66>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e7e4:	2beb      	cmp	r3, #235	; 0xeb
 800e7e6:	d11e      	bne.n	800e826 <check_fs+0x9a>
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e7ee:	2b90      	cmp	r3, #144	; 0x90
 800e7f0:	d119      	bne.n	800e826 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	3334      	adds	r3, #52	; 0x34
 800e7f6:	3336      	adds	r3, #54	; 0x36
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f7fe fa3b 	bl	800cc74 <ld_dword>
 800e7fe:	4603      	mov	r3, r0
 800e800:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e804:	4a0a      	ldr	r2, [pc, #40]	; (800e830 <check_fs+0xa4>)
 800e806:	4293      	cmp	r3, r2
 800e808:	d101      	bne.n	800e80e <check_fs+0x82>
 800e80a:	2300      	movs	r3, #0
 800e80c:	e00c      	b.n	800e828 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	3334      	adds	r3, #52	; 0x34
 800e812:	3352      	adds	r3, #82	; 0x52
 800e814:	4618      	mov	r0, r3
 800e816:	f7fe fa2d 	bl	800cc74 <ld_dword>
 800e81a:	4603      	mov	r3, r0
 800e81c:	4a05      	ldr	r2, [pc, #20]	; (800e834 <check_fs+0xa8>)
 800e81e:	4293      	cmp	r3, r2
 800e820:	d101      	bne.n	800e826 <check_fs+0x9a>
 800e822:	2300      	movs	r3, #0
 800e824:	e000      	b.n	800e828 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e826:	2302      	movs	r3, #2
}
 800e828:	4618      	mov	r0, r3
 800e82a:	3708      	adds	r7, #8
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}
 800e830:	00544146 	.word	0x00544146
 800e834:	33544146 	.word	0x33544146

0800e838 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b096      	sub	sp, #88	; 0x58
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	60f8      	str	r0, [r7, #12]
 800e840:	60b9      	str	r1, [r7, #8]
 800e842:	4613      	mov	r3, r2
 800e844:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	2200      	movs	r2, #0
 800e84a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e84c:	68f8      	ldr	r0, [r7, #12]
 800e84e:	f7ff ff58 	bl	800e702 <get_ldnumber>
 800e852:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e856:	2b00      	cmp	r3, #0
 800e858:	da01      	bge.n	800e85e <find_volume+0x26>
 800e85a:	230b      	movs	r3, #11
 800e85c:	e230      	b.n	800ecc0 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e85e:	4aa1      	ldr	r2, [pc, #644]	; (800eae4 <find_volume+0x2ac>)
 800e860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e866:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d101      	bne.n	800e872 <find_volume+0x3a>
 800e86e:	230c      	movs	r3, #12
 800e870:	e226      	b.n	800ecc0 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e876:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e878:	79fb      	ldrb	r3, [r7, #7]
 800e87a:	f023 0301 	bic.w	r3, r3, #1
 800e87e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d01a      	beq.n	800e8be <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e88a:	785b      	ldrb	r3, [r3, #1]
 800e88c:	4618      	mov	r0, r3
 800e88e:	f7fe f93b 	bl	800cb08 <disk_status>
 800e892:	4603      	mov	r3, r0
 800e894:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e898:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e89c:	f003 0301 	and.w	r3, r3, #1
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d10c      	bne.n	800e8be <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e8a4:	79fb      	ldrb	r3, [r7, #7]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d007      	beq.n	800e8ba <find_volume+0x82>
 800e8aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e8ae:	f003 0304 	and.w	r3, r3, #4
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d001      	beq.n	800e8ba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e8b6:	230a      	movs	r3, #10
 800e8b8:	e202      	b.n	800ecc0 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	e200      	b.n	800ecc0 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e8c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8c6:	b2da      	uxtb	r2, r3
 800e8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ce:	785b      	ldrb	r3, [r3, #1]
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7fe f933 	bl	800cb3c <disk_initialize>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e8dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e8e0:	f003 0301 	and.w	r3, r3, #1
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d001      	beq.n	800e8ec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e8e8:	2303      	movs	r3, #3
 800e8ea:	e1e9      	b.n	800ecc0 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e8ec:	79fb      	ldrb	r3, [r7, #7]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d007      	beq.n	800e902 <find_volume+0xca>
 800e8f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e8f6:	f003 0304 	and.w	r3, r3, #4
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d001      	beq.n	800e902 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e8fe:	230a      	movs	r3, #10
 800e900:	e1de      	b.n	800ecc0 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e902:	2300      	movs	r3, #0
 800e904:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e906:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e908:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e90a:	f7ff ff3f 	bl	800e78c <check_fs>
 800e90e:	4603      	mov	r3, r0
 800e910:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e914:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e918:	2b02      	cmp	r3, #2
 800e91a:	d149      	bne.n	800e9b0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e91c:	2300      	movs	r3, #0
 800e91e:	643b      	str	r3, [r7, #64]	; 0x40
 800e920:	e01e      	b.n	800e960 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e924:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e92a:	011b      	lsls	r3, r3, #4
 800e92c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e930:	4413      	add	r3, r2
 800e932:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e936:	3304      	adds	r3, #4
 800e938:	781b      	ldrb	r3, [r3, #0]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d006      	beq.n	800e94c <find_volume+0x114>
 800e93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e940:	3308      	adds	r3, #8
 800e942:	4618      	mov	r0, r3
 800e944:	f7fe f996 	bl	800cc74 <ld_dword>
 800e948:	4602      	mov	r2, r0
 800e94a:	e000      	b.n	800e94e <find_volume+0x116>
 800e94c:	2200      	movs	r2, #0
 800e94e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e950:	009b      	lsls	r3, r3, #2
 800e952:	3358      	adds	r3, #88	; 0x58
 800e954:	443b      	add	r3, r7
 800e956:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e95a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e95c:	3301      	adds	r3, #1
 800e95e:	643b      	str	r3, [r7, #64]	; 0x40
 800e960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e962:	2b03      	cmp	r3, #3
 800e964:	d9dd      	bls.n	800e922 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e966:	2300      	movs	r3, #0
 800e968:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e96a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d002      	beq.n	800e976 <find_volume+0x13e>
 800e970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e972:	3b01      	subs	r3, #1
 800e974:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e978:	009b      	lsls	r3, r3, #2
 800e97a:	3358      	adds	r3, #88	; 0x58
 800e97c:	443b      	add	r3, r7
 800e97e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e982:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e986:	2b00      	cmp	r3, #0
 800e988:	d005      	beq.n	800e996 <find_volume+0x15e>
 800e98a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e98c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e98e:	f7ff fefd 	bl	800e78c <check_fs>
 800e992:	4603      	mov	r3, r0
 800e994:	e000      	b.n	800e998 <find_volume+0x160>
 800e996:	2303      	movs	r3, #3
 800e998:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e99c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e9a0:	2b01      	cmp	r3, #1
 800e9a2:	d905      	bls.n	800e9b0 <find_volume+0x178>
 800e9a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9a6:	3301      	adds	r3, #1
 800e9a8:	643b      	str	r3, [r7, #64]	; 0x40
 800e9aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9ac:	2b03      	cmp	r3, #3
 800e9ae:	d9e2      	bls.n	800e976 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e9b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e9b4:	2b04      	cmp	r3, #4
 800e9b6:	d101      	bne.n	800e9bc <find_volume+0x184>
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	e181      	b.n	800ecc0 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e9bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e9c0:	2b01      	cmp	r3, #1
 800e9c2:	d901      	bls.n	800e9c8 <find_volume+0x190>
 800e9c4:	230d      	movs	r3, #13
 800e9c6:	e17b      	b.n	800ecc0 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ca:	3334      	adds	r3, #52	; 0x34
 800e9cc:	330b      	adds	r3, #11
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f7fe f938 	bl	800cc44 <ld_word>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9da:	d001      	beq.n	800e9e0 <find_volume+0x1a8>
 800e9dc:	230d      	movs	r3, #13
 800e9de:	e16f      	b.n	800ecc0 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9e2:	3334      	adds	r3, #52	; 0x34
 800e9e4:	3316      	adds	r3, #22
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f7fe f92c 	bl	800cc44 <ld_word>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e9f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d106      	bne.n	800ea04 <find_volume+0x1cc>
 800e9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9f8:	3334      	adds	r3, #52	; 0x34
 800e9fa:	3324      	adds	r3, #36	; 0x24
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f7fe f939 	bl	800cc74 <ld_dword>
 800ea02:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ea04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ea08:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ea0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea0c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ea10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea12:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ea14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea16:	789b      	ldrb	r3, [r3, #2]
 800ea18:	2b01      	cmp	r3, #1
 800ea1a:	d005      	beq.n	800ea28 <find_volume+0x1f0>
 800ea1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea1e:	789b      	ldrb	r3, [r3, #2]
 800ea20:	2b02      	cmp	r3, #2
 800ea22:	d001      	beq.n	800ea28 <find_volume+0x1f0>
 800ea24:	230d      	movs	r3, #13
 800ea26:	e14b      	b.n	800ecc0 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ea28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea2a:	789b      	ldrb	r3, [r3, #2]
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea30:	fb02 f303 	mul.w	r3, r2, r3
 800ea34:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ea36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ea3c:	b29a      	uxth	r2, r3
 800ea3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea40:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ea42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea44:	895b      	ldrh	r3, [r3, #10]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d008      	beq.n	800ea5c <find_volume+0x224>
 800ea4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea4c:	895b      	ldrh	r3, [r3, #10]
 800ea4e:	461a      	mov	r2, r3
 800ea50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea52:	895b      	ldrh	r3, [r3, #10]
 800ea54:	3b01      	subs	r3, #1
 800ea56:	4013      	ands	r3, r2
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d001      	beq.n	800ea60 <find_volume+0x228>
 800ea5c:	230d      	movs	r3, #13
 800ea5e:	e12f      	b.n	800ecc0 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ea60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea62:	3334      	adds	r3, #52	; 0x34
 800ea64:	3311      	adds	r3, #17
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7fe f8ec 	bl	800cc44 <ld_word>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	461a      	mov	r2, r3
 800ea70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea72:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ea74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea76:	891b      	ldrh	r3, [r3, #8]
 800ea78:	f003 030f 	and.w	r3, r3, #15
 800ea7c:	b29b      	uxth	r3, r3
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d001      	beq.n	800ea86 <find_volume+0x24e>
 800ea82:	230d      	movs	r3, #13
 800ea84:	e11c      	b.n	800ecc0 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ea86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea88:	3334      	adds	r3, #52	; 0x34
 800ea8a:	3313      	adds	r3, #19
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f7fe f8d9 	bl	800cc44 <ld_word>
 800ea92:	4603      	mov	r3, r0
 800ea94:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ea96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d106      	bne.n	800eaaa <find_volume+0x272>
 800ea9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea9e:	3334      	adds	r3, #52	; 0x34
 800eaa0:	3320      	adds	r3, #32
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f7fe f8e6 	bl	800cc74 <ld_dword>
 800eaa8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800eaaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaac:	3334      	adds	r3, #52	; 0x34
 800eaae:	330e      	adds	r3, #14
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7fe f8c7 	bl	800cc44 <ld_word>
 800eab6:	4603      	mov	r3, r0
 800eab8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800eaba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d101      	bne.n	800eac4 <find_volume+0x28c>
 800eac0:	230d      	movs	r3, #13
 800eac2:	e0fd      	b.n	800ecc0 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800eac4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800eac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eac8:	4413      	add	r3, r2
 800eaca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eacc:	8912      	ldrh	r2, [r2, #8]
 800eace:	0912      	lsrs	r2, r2, #4
 800ead0:	b292      	uxth	r2, r2
 800ead2:	4413      	add	r3, r2
 800ead4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ead6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ead8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eada:	429a      	cmp	r2, r3
 800eadc:	d204      	bcs.n	800eae8 <find_volume+0x2b0>
 800eade:	230d      	movs	r3, #13
 800eae0:	e0ee      	b.n	800ecc0 <find_volume+0x488>
 800eae2:	bf00      	nop
 800eae4:	24000304 	.word	0x24000304
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800eae8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eaea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaec:	1ad3      	subs	r3, r2, r3
 800eaee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eaf0:	8952      	ldrh	r2, [r2, #10]
 800eaf2:	fbb3 f3f2 	udiv	r3, r3, r2
 800eaf6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800eaf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d101      	bne.n	800eb02 <find_volume+0x2ca>
 800eafe:	230d      	movs	r3, #13
 800eb00:	e0de      	b.n	800ecc0 <find_volume+0x488>
		fmt = FS_FAT32;
 800eb02:	2303      	movs	r3, #3
 800eb04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800eb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb0a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800eb0e:	4293      	cmp	r3, r2
 800eb10:	d802      	bhi.n	800eb18 <find_volume+0x2e0>
 800eb12:	2302      	movs	r3, #2
 800eb14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800eb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb1a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800eb1e:	4293      	cmp	r3, r2
 800eb20:	d802      	bhi.n	800eb28 <find_volume+0x2f0>
 800eb22:	2301      	movs	r3, #1
 800eb24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800eb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2a:	1c9a      	adds	r2, r3, #2
 800eb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb2e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800eb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eb34:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800eb36:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800eb38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb3a:	441a      	add	r2, r3
 800eb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb3e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800eb40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb44:	441a      	add	r2, r3
 800eb46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb48:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800eb4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eb4e:	2b03      	cmp	r3, #3
 800eb50:	d11e      	bne.n	800eb90 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800eb52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb54:	3334      	adds	r3, #52	; 0x34
 800eb56:	332a      	adds	r3, #42	; 0x2a
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f7fe f873 	bl	800cc44 <ld_word>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d001      	beq.n	800eb68 <find_volume+0x330>
 800eb64:	230d      	movs	r3, #13
 800eb66:	e0ab      	b.n	800ecc0 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800eb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb6a:	891b      	ldrh	r3, [r3, #8]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d001      	beq.n	800eb74 <find_volume+0x33c>
 800eb70:	230d      	movs	r3, #13
 800eb72:	e0a5      	b.n	800ecc0 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800eb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb76:	3334      	adds	r3, #52	; 0x34
 800eb78:	332c      	adds	r3, #44	; 0x2c
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7fe f87a 	bl	800cc74 <ld_dword>
 800eb80:	4602      	mov	r2, r0
 800eb82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb84:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800eb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb88:	699b      	ldr	r3, [r3, #24]
 800eb8a:	009b      	lsls	r3, r3, #2
 800eb8c:	647b      	str	r3, [r7, #68]	; 0x44
 800eb8e:	e01f      	b.n	800ebd0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800eb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb92:	891b      	ldrh	r3, [r3, #8]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d101      	bne.n	800eb9c <find_volume+0x364>
 800eb98:	230d      	movs	r3, #13
 800eb9a:	e091      	b.n	800ecc0 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800eb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eba2:	441a      	add	r2, r3
 800eba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800eba8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ebac:	2b02      	cmp	r3, #2
 800ebae:	d103      	bne.n	800ebb8 <find_volume+0x380>
 800ebb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb2:	699b      	ldr	r3, [r3, #24]
 800ebb4:	005b      	lsls	r3, r3, #1
 800ebb6:	e00a      	b.n	800ebce <find_volume+0x396>
 800ebb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebba:	699a      	ldr	r2, [r3, #24]
 800ebbc:	4613      	mov	r3, r2
 800ebbe:	005b      	lsls	r3, r3, #1
 800ebc0:	4413      	add	r3, r2
 800ebc2:	085a      	lsrs	r2, r3, #1
 800ebc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebc6:	699b      	ldr	r3, [r3, #24]
 800ebc8:	f003 0301 	and.w	r3, r3, #1
 800ebcc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ebce:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ebd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebd2:	69da      	ldr	r2, [r3, #28]
 800ebd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebd6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ebda:	0a5b      	lsrs	r3, r3, #9
 800ebdc:	429a      	cmp	r2, r3
 800ebde:	d201      	bcs.n	800ebe4 <find_volume+0x3ac>
 800ebe0:	230d      	movs	r3, #13
 800ebe2:	e06d      	b.n	800ecc0 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ebe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebe6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ebea:	615a      	str	r2, [r3, #20]
 800ebec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebee:	695a      	ldr	r2, [r3, #20]
 800ebf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebf2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ebf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebf6:	2280      	movs	r2, #128	; 0x80
 800ebf8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ebfa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ebfe:	2b03      	cmp	r3, #3
 800ec00:	d149      	bne.n	800ec96 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ec02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec04:	3334      	adds	r3, #52	; 0x34
 800ec06:	3330      	adds	r3, #48	; 0x30
 800ec08:	4618      	mov	r0, r3
 800ec0a:	f7fe f81b 	bl	800cc44 <ld_word>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	2b01      	cmp	r3, #1
 800ec12:	d140      	bne.n	800ec96 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ec14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec16:	3301      	adds	r3, #1
 800ec18:	4619      	mov	r1, r3
 800ec1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ec1c:	f7fe fac2 	bl	800d1a4 <move_window>
 800ec20:	4603      	mov	r3, r0
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d137      	bne.n	800ec96 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800ec26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec28:	2200      	movs	r2, #0
 800ec2a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ec2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec2e:	3334      	adds	r3, #52	; 0x34
 800ec30:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ec34:	4618      	mov	r0, r3
 800ec36:	f7fe f805 	bl	800cc44 <ld_word>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	461a      	mov	r2, r3
 800ec3e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ec42:	429a      	cmp	r2, r3
 800ec44:	d127      	bne.n	800ec96 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ec46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec48:	3334      	adds	r3, #52	; 0x34
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f7fe f812 	bl	800cc74 <ld_dword>
 800ec50:	4603      	mov	r3, r0
 800ec52:	4a1d      	ldr	r2, [pc, #116]	; (800ecc8 <find_volume+0x490>)
 800ec54:	4293      	cmp	r3, r2
 800ec56:	d11e      	bne.n	800ec96 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ec58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec5a:	3334      	adds	r3, #52	; 0x34
 800ec5c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7fe f807 	bl	800cc74 <ld_dword>
 800ec66:	4603      	mov	r3, r0
 800ec68:	4a18      	ldr	r2, [pc, #96]	; (800eccc <find_volume+0x494>)
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	d113      	bne.n	800ec96 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ec6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec70:	3334      	adds	r3, #52	; 0x34
 800ec72:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7fd fffc 	bl	800cc74 <ld_dword>
 800ec7c:	4602      	mov	r2, r0
 800ec7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec80:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ec82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec84:	3334      	adds	r3, #52	; 0x34
 800ec86:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f7fd fff2 	bl	800cc74 <ld_dword>
 800ec90:	4602      	mov	r2, r0
 800ec92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec94:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ec96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec98:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ec9c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ec9e:	4b0c      	ldr	r3, [pc, #48]	; (800ecd0 <find_volume+0x498>)
 800eca0:	881b      	ldrh	r3, [r3, #0]
 800eca2:	3301      	adds	r3, #1
 800eca4:	b29a      	uxth	r2, r3
 800eca6:	4b0a      	ldr	r3, [pc, #40]	; (800ecd0 <find_volume+0x498>)
 800eca8:	801a      	strh	r2, [r3, #0]
 800ecaa:	4b09      	ldr	r3, [pc, #36]	; (800ecd0 <find_volume+0x498>)
 800ecac:	881a      	ldrh	r2, [r3, #0]
 800ecae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb0:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ecb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb4:	4a07      	ldr	r2, [pc, #28]	; (800ecd4 <find_volume+0x49c>)
 800ecb6:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ecb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ecba:	f7fe fa0b 	bl	800d0d4 <clear_lock>
#endif
	return FR_OK;
 800ecbe:	2300      	movs	r3, #0
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3758      	adds	r7, #88	; 0x58
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}
 800ecc8:	41615252 	.word	0x41615252
 800eccc:	61417272 	.word	0x61417272
 800ecd0:	24000308 	.word	0x24000308
 800ecd4:	2400032c 	.word	0x2400032c

0800ecd8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b084      	sub	sp, #16
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
 800ece0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ece2:	2309      	movs	r3, #9
 800ece4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d01c      	beq.n	800ed26 <validate+0x4e>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d018      	beq.n	800ed26 <validate+0x4e>
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	781b      	ldrb	r3, [r3, #0]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d013      	beq.n	800ed26 <validate+0x4e>
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	889a      	ldrh	r2, [r3, #4]
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	88db      	ldrh	r3, [r3, #6]
 800ed08:	429a      	cmp	r2, r3
 800ed0a:	d10c      	bne.n	800ed26 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	785b      	ldrb	r3, [r3, #1]
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7fd fef8 	bl	800cb08 <disk_status>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	f003 0301 	and.w	r3, r3, #1
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d101      	bne.n	800ed26 <validate+0x4e>
			res = FR_OK;
 800ed22:	2300      	movs	r3, #0
 800ed24:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ed26:	7bfb      	ldrb	r3, [r7, #15]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d102      	bne.n	800ed32 <validate+0x5a>
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	e000      	b.n	800ed34 <validate+0x5c>
 800ed32:	2300      	movs	r3, #0
 800ed34:	683a      	ldr	r2, [r7, #0]
 800ed36:	6013      	str	r3, [r2, #0]
	return res;
 800ed38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	3710      	adds	r7, #16
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}
	...

0800ed44 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b088      	sub	sp, #32
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	60f8      	str	r0, [r7, #12]
 800ed4c:	60b9      	str	r1, [r7, #8]
 800ed4e:	4613      	mov	r3, r2
 800ed50:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ed56:	f107 0310 	add.w	r3, r7, #16
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7ff fcd1 	bl	800e702 <get_ldnumber>
 800ed60:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ed62:	69fb      	ldr	r3, [r7, #28]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	da01      	bge.n	800ed6c <f_mount+0x28>
 800ed68:	230b      	movs	r3, #11
 800ed6a:	e02b      	b.n	800edc4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ed6c:	4a17      	ldr	r2, [pc, #92]	; (800edcc <f_mount+0x88>)
 800ed6e:	69fb      	ldr	r3, [r7, #28]
 800ed70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed74:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ed76:	69bb      	ldr	r3, [r7, #24]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d005      	beq.n	800ed88 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ed7c:	69b8      	ldr	r0, [r7, #24]
 800ed7e:	f7fe f9a9 	bl	800d0d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ed82:	69bb      	ldr	r3, [r7, #24]
 800ed84:	2200      	movs	r2, #0
 800ed86:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d002      	beq.n	800ed94 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	2200      	movs	r2, #0
 800ed92:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ed94:	68fa      	ldr	r2, [r7, #12]
 800ed96:	490d      	ldr	r1, [pc, #52]	; (800edcc <f_mount+0x88>)
 800ed98:	69fb      	ldr	r3, [r7, #28]
 800ed9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d002      	beq.n	800edaa <f_mount+0x66>
 800eda4:	79fb      	ldrb	r3, [r7, #7]
 800eda6:	2b01      	cmp	r3, #1
 800eda8:	d001      	beq.n	800edae <f_mount+0x6a>
 800edaa:	2300      	movs	r3, #0
 800edac:	e00a      	b.n	800edc4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800edae:	f107 010c 	add.w	r1, r7, #12
 800edb2:	f107 0308 	add.w	r3, r7, #8
 800edb6:	2200      	movs	r2, #0
 800edb8:	4618      	mov	r0, r3
 800edba:	f7ff fd3d 	bl	800e838 <find_volume>
 800edbe:	4603      	mov	r3, r0
 800edc0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800edc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	3720      	adds	r7, #32
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}
 800edcc:	24000304 	.word	0x24000304

0800edd0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b09a      	sub	sp, #104	; 0x68
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	60f8      	str	r0, [r7, #12]
 800edd8:	60b9      	str	r1, [r7, #8]
 800edda:	4613      	mov	r3, r2
 800eddc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d101      	bne.n	800ede8 <f_open+0x18>
 800ede4:	2309      	movs	r3, #9
 800ede6:	e1ad      	b.n	800f144 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ede8:	79fb      	ldrb	r3, [r7, #7]
 800edea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800edee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800edf0:	79fa      	ldrb	r2, [r7, #7]
 800edf2:	f107 0114 	add.w	r1, r7, #20
 800edf6:	f107 0308 	add.w	r3, r7, #8
 800edfa:	4618      	mov	r0, r3
 800edfc:	f7ff fd1c 	bl	800e838 <find_volume>
 800ee00:	4603      	mov	r3, r0
 800ee02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800ee06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	f040 8191 	bne.w	800f132 <f_open+0x362>
		dj.obj.fs = fs;
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ee14:	68ba      	ldr	r2, [r7, #8]
 800ee16:	f107 0318 	add.w	r3, r7, #24
 800ee1a:	4611      	mov	r1, r2
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f7ff fbff 	bl	800e620 <follow_path>
 800ee22:	4603      	mov	r3, r0
 800ee24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ee28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d11a      	bne.n	800ee66 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ee30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ee34:	b25b      	sxtb	r3, r3
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	da03      	bge.n	800ee42 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ee3a:	2306      	movs	r3, #6
 800ee3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ee40:	e011      	b.n	800ee66 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ee42:	79fb      	ldrb	r3, [r7, #7]
 800ee44:	f023 0301 	bic.w	r3, r3, #1
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	bf14      	ite	ne
 800ee4c:	2301      	movne	r3, #1
 800ee4e:	2300      	moveq	r3, #0
 800ee50:	b2db      	uxtb	r3, r3
 800ee52:	461a      	mov	r2, r3
 800ee54:	f107 0318 	add.w	r3, r7, #24
 800ee58:	4611      	mov	r1, r2
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f7fd fff2 	bl	800ce44 <chk_lock>
 800ee60:	4603      	mov	r3, r0
 800ee62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ee66:	79fb      	ldrb	r3, [r7, #7]
 800ee68:	f003 031c 	and.w	r3, r3, #28
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d07f      	beq.n	800ef70 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ee70:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d017      	beq.n	800eea8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ee78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ee7c:	2b04      	cmp	r3, #4
 800ee7e:	d10e      	bne.n	800ee9e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ee80:	f7fe f83c 	bl	800cefc <enq_lock>
 800ee84:	4603      	mov	r3, r0
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d006      	beq.n	800ee98 <f_open+0xc8>
 800ee8a:	f107 0318 	add.w	r3, r7, #24
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f7ff f916 	bl	800e0c0 <dir_register>
 800ee94:	4603      	mov	r3, r0
 800ee96:	e000      	b.n	800ee9a <f_open+0xca>
 800ee98:	2312      	movs	r3, #18
 800ee9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ee9e:	79fb      	ldrb	r3, [r7, #7]
 800eea0:	f043 0308 	orr.w	r3, r3, #8
 800eea4:	71fb      	strb	r3, [r7, #7]
 800eea6:	e010      	b.n	800eeca <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800eea8:	7fbb      	ldrb	r3, [r7, #30]
 800eeaa:	f003 0311 	and.w	r3, r3, #17
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d003      	beq.n	800eeba <f_open+0xea>
					res = FR_DENIED;
 800eeb2:	2307      	movs	r3, #7
 800eeb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800eeb8:	e007      	b.n	800eeca <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800eeba:	79fb      	ldrb	r3, [r7, #7]
 800eebc:	f003 0304 	and.w	r3, r3, #4
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d002      	beq.n	800eeca <f_open+0xfa>
 800eec4:	2308      	movs	r3, #8
 800eec6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800eeca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d168      	bne.n	800efa4 <f_open+0x1d4>
 800eed2:	79fb      	ldrb	r3, [r7, #7]
 800eed4:	f003 0308 	and.w	r3, r3, #8
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d063      	beq.n	800efa4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800eedc:	f7fd fb00 	bl	800c4e0 <get_fattime>
 800eee0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800eee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eee4:	330e      	adds	r3, #14
 800eee6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7fd ff01 	bl	800ccf0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800eeee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef0:	3316      	adds	r3, #22
 800eef2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eef4:	4618      	mov	r0, r3
 800eef6:	f7fd fefb 	bl	800ccf0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800eefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eefc:	330b      	adds	r3, #11
 800eefe:	2220      	movs	r2, #32
 800ef00:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef06:	4611      	mov	r1, r2
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f7fe fe52 	bl	800dbb2 <ld_clust>
 800ef0e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ef10:	697b      	ldr	r3, [r7, #20]
 800ef12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef14:	2200      	movs	r2, #0
 800ef16:	4618      	mov	r0, r3
 800ef18:	f7fe fe6a 	bl	800dbf0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ef1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef1e:	331c      	adds	r3, #28
 800ef20:	2100      	movs	r1, #0
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7fd fee4 	bl	800ccf0 <st_dword>
					fs->wflag = 1;
 800ef28:	697b      	ldr	r3, [r7, #20]
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ef2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d037      	beq.n	800efa4 <f_open+0x1d4>
						dw = fs->winsect;
 800ef34:	697b      	ldr	r3, [r7, #20]
 800ef36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef38:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800ef3a:	f107 0318 	add.w	r3, r7, #24
 800ef3e:	2200      	movs	r2, #0
 800ef40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7fe fb7d 	bl	800d642 <remove_chain>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800ef4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d126      	bne.n	800efa4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f7fe f922 	bl	800d1a4 <move_window>
 800ef60:	4603      	mov	r3, r0
 800ef62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ef6a:	3a01      	subs	r2, #1
 800ef6c:	611a      	str	r2, [r3, #16]
 800ef6e:	e019      	b.n	800efa4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ef70:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d115      	bne.n	800efa4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ef78:	7fbb      	ldrb	r3, [r7, #30]
 800ef7a:	f003 0310 	and.w	r3, r3, #16
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d003      	beq.n	800ef8a <f_open+0x1ba>
					res = FR_NO_FILE;
 800ef82:	2304      	movs	r3, #4
 800ef84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ef88:	e00c      	b.n	800efa4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ef8a:	79fb      	ldrb	r3, [r7, #7]
 800ef8c:	f003 0302 	and.w	r3, r3, #2
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d007      	beq.n	800efa4 <f_open+0x1d4>
 800ef94:	7fbb      	ldrb	r3, [r7, #30]
 800ef96:	f003 0301 	and.w	r3, r3, #1
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d002      	beq.n	800efa4 <f_open+0x1d4>
						res = FR_DENIED;
 800ef9e:	2307      	movs	r3, #7
 800efa0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800efa4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d128      	bne.n	800effe <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800efac:	79fb      	ldrb	r3, [r7, #7]
 800efae:	f003 0308 	and.w	r3, r3, #8
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d003      	beq.n	800efbe <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800efb6:	79fb      	ldrb	r3, [r7, #7]
 800efb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efbc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800efc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800efcc:	79fb      	ldrb	r3, [r7, #7]
 800efce:	f023 0301 	bic.w	r3, r3, #1
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	bf14      	ite	ne
 800efd6:	2301      	movne	r3, #1
 800efd8:	2300      	moveq	r3, #0
 800efda:	b2db      	uxtb	r3, r3
 800efdc:	461a      	mov	r2, r3
 800efde:	f107 0318 	add.w	r3, r7, #24
 800efe2:	4611      	mov	r1, r2
 800efe4:	4618      	mov	r0, r3
 800efe6:	f7fd ffab 	bl	800cf40 <inc_lock>
 800efea:	4602      	mov	r2, r0
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	691b      	ldr	r3, [r3, #16]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d102      	bne.n	800effe <f_open+0x22e>
 800eff8:	2302      	movs	r3, #2
 800effa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800effe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f002:	2b00      	cmp	r3, #0
 800f004:	f040 8095 	bne.w	800f132 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f008:	697b      	ldr	r3, [r7, #20]
 800f00a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f00c:	4611      	mov	r1, r2
 800f00e:	4618      	mov	r0, r3
 800f010:	f7fe fdcf 	bl	800dbb2 <ld_clust>
 800f014:	4602      	mov	r2, r0
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f01c:	331c      	adds	r3, #28
 800f01e:	4618      	mov	r0, r3
 800f020:	f7fd fe28 	bl	800cc74 <ld_dword>
 800f024:	4602      	mov	r2, r0
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	2200      	movs	r2, #0
 800f02e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f030:	697a      	ldr	r2, [r7, #20]
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f036:	697b      	ldr	r3, [r7, #20]
 800f038:	88da      	ldrh	r2, [r3, #6]
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	79fa      	ldrb	r2, [r7, #7]
 800f042:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2200      	movs	r2, #0
 800f048:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	2200      	movs	r2, #0
 800f04e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	2200      	movs	r2, #0
 800f054:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	3330      	adds	r3, #48	; 0x30
 800f05a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f05e:	2100      	movs	r1, #0
 800f060:	4618      	mov	r0, r3
 800f062:	f7fd fe92 	bl	800cd8a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f066:	79fb      	ldrb	r3, [r7, #7]
 800f068:	f003 0320 	and.w	r3, r3, #32
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d060      	beq.n	800f132 <f_open+0x362>
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	68db      	ldr	r3, [r3, #12]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d05c      	beq.n	800f132 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	68da      	ldr	r2, [r3, #12]
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f080:	697b      	ldr	r3, [r7, #20]
 800f082:	895b      	ldrh	r3, [r3, #10]
 800f084:	025b      	lsls	r3, r3, #9
 800f086:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	689b      	ldr	r3, [r3, #8]
 800f08c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	68db      	ldr	r3, [r3, #12]
 800f092:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f094:	e016      	b.n	800f0c4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7fe f93d 	bl	800d31a <get_fat>
 800f0a0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f0a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f0a4:	2b01      	cmp	r3, #1
 800f0a6:	d802      	bhi.n	800f0ae <f_open+0x2de>
 800f0a8:	2302      	movs	r3, #2
 800f0aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f0ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f0b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f0b4:	d102      	bne.n	800f0bc <f_open+0x2ec>
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f0bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f0be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0c0:	1ad3      	subs	r3, r2, r3
 800f0c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f0c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d103      	bne.n	800f0d4 <f_open+0x304>
 800f0cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f0ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0d0:	429a      	cmp	r2, r3
 800f0d2:	d8e0      	bhi.n	800f096 <f_open+0x2c6>
				}
				fp->clust = clst;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f0d8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f0da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d127      	bne.n	800f132 <f_open+0x362>
 800f0e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d022      	beq.n	800f132 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f0ec:	697b      	ldr	r3, [r7, #20]
 800f0ee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f7fe f8f3 	bl	800d2dc <clust2sect>
 800f0f6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f0f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d103      	bne.n	800f106 <f_open+0x336>
						res = FR_INT_ERR;
 800f0fe:	2302      	movs	r3, #2
 800f100:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f104:	e015      	b.n	800f132 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f108:	0a5a      	lsrs	r2, r3, #9
 800f10a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f10c:	441a      	add	r2, r3
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	7858      	ldrb	r0, [r3, #1]
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	6a1a      	ldr	r2, [r3, #32]
 800f120:	2301      	movs	r3, #1
 800f122:	f7fd fd31 	bl	800cb88 <disk_read>
 800f126:	4603      	mov	r3, r0
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d002      	beq.n	800f132 <f_open+0x362>
 800f12c:	2301      	movs	r3, #1
 800f12e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f132:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f136:	2b00      	cmp	r3, #0
 800f138:	d002      	beq.n	800f140 <f_open+0x370>
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	2200      	movs	r2, #0
 800f13e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f140:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800f144:	4618      	mov	r0, r3
 800f146:	3768      	adds	r7, #104	; 0x68
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}

0800f14c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b08e      	sub	sp, #56	; 0x38
 800f150:	af00      	add	r7, sp, #0
 800f152:	60f8      	str	r0, [r7, #12]
 800f154:	60b9      	str	r1, [r7, #8]
 800f156:	607a      	str	r2, [r7, #4]
 800f158:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	2200      	movs	r2, #0
 800f162:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	f107 0214 	add.w	r2, r7, #20
 800f16a:	4611      	mov	r1, r2
 800f16c:	4618      	mov	r0, r3
 800f16e:	f7ff fdb3 	bl	800ecd8 <validate>
 800f172:	4603      	mov	r3, r0
 800f174:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f178:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d107      	bne.n	800f190 <f_read+0x44>
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	7d5b      	ldrb	r3, [r3, #21]
 800f184:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f188:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d002      	beq.n	800f196 <f_read+0x4a>
 800f190:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f194:	e115      	b.n	800f3c2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	7d1b      	ldrb	r3, [r3, #20]
 800f19a:	f003 0301 	and.w	r3, r3, #1
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d101      	bne.n	800f1a6 <f_read+0x5a>
 800f1a2:	2307      	movs	r3, #7
 800f1a4:	e10d      	b.n	800f3c2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	68da      	ldr	r2, [r3, #12]
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	699b      	ldr	r3, [r3, #24]
 800f1ae:	1ad3      	subs	r3, r2, r3
 800f1b0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800f1b2:	687a      	ldr	r2, [r7, #4]
 800f1b4:	6a3b      	ldr	r3, [r7, #32]
 800f1b6:	429a      	cmp	r2, r3
 800f1b8:	f240 80fe 	bls.w	800f3b8 <f_read+0x26c>
 800f1bc:	6a3b      	ldr	r3, [r7, #32]
 800f1be:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800f1c0:	e0fa      	b.n	800f3b8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	699b      	ldr	r3, [r3, #24]
 800f1c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	f040 80c6 	bne.w	800f35c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	699b      	ldr	r3, [r3, #24]
 800f1d4:	0a5b      	lsrs	r3, r3, #9
 800f1d6:	697a      	ldr	r2, [r7, #20]
 800f1d8:	8952      	ldrh	r2, [r2, #10]
 800f1da:	3a01      	subs	r2, #1
 800f1dc:	4013      	ands	r3, r2
 800f1de:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800f1e0:	69fb      	ldr	r3, [r7, #28]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d12f      	bne.n	800f246 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	699b      	ldr	r3, [r3, #24]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d103      	bne.n	800f1f6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	689b      	ldr	r3, [r3, #8]
 800f1f2:	633b      	str	r3, [r7, #48]	; 0x30
 800f1f4:	e013      	b.n	800f21e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d007      	beq.n	800f20e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	699b      	ldr	r3, [r3, #24]
 800f202:	4619      	mov	r1, r3
 800f204:	68f8      	ldr	r0, [r7, #12]
 800f206:	f7fe fb19 	bl	800d83c <clmt_clust>
 800f20a:	6338      	str	r0, [r7, #48]	; 0x30
 800f20c:	e007      	b.n	800f21e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f20e:	68fa      	ldr	r2, [r7, #12]
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	69db      	ldr	r3, [r3, #28]
 800f214:	4619      	mov	r1, r3
 800f216:	4610      	mov	r0, r2
 800f218:	f7fe f87f 	bl	800d31a <get_fat>
 800f21c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f220:	2b01      	cmp	r3, #1
 800f222:	d804      	bhi.n	800f22e <f_read+0xe2>
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	2202      	movs	r2, #2
 800f228:	755a      	strb	r2, [r3, #21]
 800f22a:	2302      	movs	r3, #2
 800f22c:	e0c9      	b.n	800f3c2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f234:	d104      	bne.n	800f240 <f_read+0xf4>
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	2201      	movs	r2, #1
 800f23a:	755a      	strb	r2, [r3, #21]
 800f23c:	2301      	movs	r3, #1
 800f23e:	e0c0      	b.n	800f3c2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f244:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f246:	697a      	ldr	r2, [r7, #20]
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	69db      	ldr	r3, [r3, #28]
 800f24c:	4619      	mov	r1, r3
 800f24e:	4610      	mov	r0, r2
 800f250:	f7fe f844 	bl	800d2dc <clust2sect>
 800f254:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f256:	69bb      	ldr	r3, [r7, #24]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d104      	bne.n	800f266 <f_read+0x11a>
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	2202      	movs	r2, #2
 800f260:	755a      	strb	r2, [r3, #21]
 800f262:	2302      	movs	r3, #2
 800f264:	e0ad      	b.n	800f3c2 <f_read+0x276>
			sect += csect;
 800f266:	69ba      	ldr	r2, [r7, #24]
 800f268:	69fb      	ldr	r3, [r7, #28]
 800f26a:	4413      	add	r3, r2
 800f26c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	0a5b      	lsrs	r3, r3, #9
 800f272:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f276:	2b00      	cmp	r3, #0
 800f278:	d039      	beq.n	800f2ee <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f27a:	69fa      	ldr	r2, [r7, #28]
 800f27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f27e:	4413      	add	r3, r2
 800f280:	697a      	ldr	r2, [r7, #20]
 800f282:	8952      	ldrh	r2, [r2, #10]
 800f284:	4293      	cmp	r3, r2
 800f286:	d905      	bls.n	800f294 <f_read+0x148>
					cc = fs->csize - csect;
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	895b      	ldrh	r3, [r3, #10]
 800f28c:	461a      	mov	r2, r3
 800f28e:	69fb      	ldr	r3, [r7, #28]
 800f290:	1ad3      	subs	r3, r2, r3
 800f292:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f294:	697b      	ldr	r3, [r7, #20]
 800f296:	7858      	ldrb	r0, [r3, #1]
 800f298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f29a:	69ba      	ldr	r2, [r7, #24]
 800f29c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f29e:	f7fd fc73 	bl	800cb88 <disk_read>
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d004      	beq.n	800f2b2 <f_read+0x166>
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	2201      	movs	r2, #1
 800f2ac:	755a      	strb	r2, [r3, #21]
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	e087      	b.n	800f3c2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	7d1b      	ldrb	r3, [r3, #20]
 800f2b6:	b25b      	sxtb	r3, r3
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	da14      	bge.n	800f2e6 <f_read+0x19a>
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	6a1a      	ldr	r2, [r3, #32]
 800f2c0:	69bb      	ldr	r3, [r7, #24]
 800f2c2:	1ad3      	subs	r3, r2, r3
 800f2c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2c6:	429a      	cmp	r2, r3
 800f2c8:	d90d      	bls.n	800f2e6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	6a1a      	ldr	r2, [r3, #32]
 800f2ce:	69bb      	ldr	r3, [r7, #24]
 800f2d0:	1ad3      	subs	r3, r2, r3
 800f2d2:	025b      	lsls	r3, r3, #9
 800f2d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2d6:	18d0      	adds	r0, r2, r3
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	3330      	adds	r3, #48	; 0x30
 800f2dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f2e0:	4619      	mov	r1, r3
 800f2e2:	f7fd fd31 	bl	800cd48 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e8:	025b      	lsls	r3, r3, #9
 800f2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800f2ec:	e050      	b.n	800f390 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	6a1b      	ldr	r3, [r3, #32]
 800f2f2:	69ba      	ldr	r2, [r7, #24]
 800f2f4:	429a      	cmp	r2, r3
 800f2f6:	d02e      	beq.n	800f356 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	7d1b      	ldrb	r3, [r3, #20]
 800f2fc:	b25b      	sxtb	r3, r3
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	da18      	bge.n	800f334 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	7858      	ldrb	r0, [r3, #1]
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	6a1a      	ldr	r2, [r3, #32]
 800f310:	2301      	movs	r3, #1
 800f312:	f7fd fc59 	bl	800cbc8 <disk_write>
 800f316:	4603      	mov	r3, r0
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d004      	beq.n	800f326 <f_read+0x1da>
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	2201      	movs	r2, #1
 800f320:	755a      	strb	r2, [r3, #21]
 800f322:	2301      	movs	r3, #1
 800f324:	e04d      	b.n	800f3c2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	7d1b      	ldrb	r3, [r3, #20]
 800f32a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f32e:	b2da      	uxtb	r2, r3
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	7858      	ldrb	r0, [r3, #1]
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f33e:	2301      	movs	r3, #1
 800f340:	69ba      	ldr	r2, [r7, #24]
 800f342:	f7fd fc21 	bl	800cb88 <disk_read>
 800f346:	4603      	mov	r3, r0
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d004      	beq.n	800f356 <f_read+0x20a>
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	2201      	movs	r2, #1
 800f350:	755a      	strb	r2, [r3, #21]
 800f352:	2301      	movs	r3, #1
 800f354:	e035      	b.n	800f3c2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	69ba      	ldr	r2, [r7, #24]
 800f35a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	699b      	ldr	r3, [r3, #24]
 800f360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f364:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f368:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f36a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	429a      	cmp	r2, r3
 800f370:	d901      	bls.n	800f376 <f_read+0x22a>
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	699b      	ldr	r3, [r3, #24]
 800f380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f384:	4413      	add	r3, r2
 800f386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f388:	4619      	mov	r1, r3
 800f38a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f38c:	f7fd fcdc 	bl	800cd48 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f394:	4413      	add	r3, r2
 800f396:	627b      	str	r3, [r7, #36]	; 0x24
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	699a      	ldr	r2, [r3, #24]
 800f39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f39e:	441a      	add	r2, r3
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	619a      	str	r2, [r3, #24]
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	681a      	ldr	r2, [r3, #0]
 800f3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3aa:	441a      	add	r2, r3
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	601a      	str	r2, [r3, #0]
 800f3b0:	687a      	ldr	r2, [r7, #4]
 800f3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b4:	1ad3      	subs	r3, r2, r3
 800f3b6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	f47f af01 	bne.w	800f1c2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800f3c0:	2300      	movs	r3, #0
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3738      	adds	r7, #56	; 0x38
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}

0800f3ca <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f3ca:	b580      	push	{r7, lr}
 800f3cc:	b086      	sub	sp, #24
 800f3ce:	af00      	add	r7, sp, #0
 800f3d0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	f107 0208 	add.w	r2, r7, #8
 800f3d8:	4611      	mov	r1, r2
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f7ff fc7c 	bl	800ecd8 <validate>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f3e4:	7dfb      	ldrb	r3, [r7, #23]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d168      	bne.n	800f4bc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	7d1b      	ldrb	r3, [r3, #20]
 800f3ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d062      	beq.n	800f4bc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	7d1b      	ldrb	r3, [r3, #20]
 800f3fa:	b25b      	sxtb	r3, r3
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	da15      	bge.n	800f42c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	7858      	ldrb	r0, [r3, #1]
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	6a1a      	ldr	r2, [r3, #32]
 800f40e:	2301      	movs	r3, #1
 800f410:	f7fd fbda 	bl	800cbc8 <disk_write>
 800f414:	4603      	mov	r3, r0
 800f416:	2b00      	cmp	r3, #0
 800f418:	d001      	beq.n	800f41e <f_sync+0x54>
 800f41a:	2301      	movs	r3, #1
 800f41c:	e04f      	b.n	800f4be <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	7d1b      	ldrb	r3, [r3, #20]
 800f422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f426:	b2da      	uxtb	r2, r3
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f42c:	f7fd f858 	bl	800c4e0 <get_fattime>
 800f430:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f432:	68ba      	ldr	r2, [r7, #8]
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f438:	4619      	mov	r1, r3
 800f43a:	4610      	mov	r0, r2
 800f43c:	f7fd feb2 	bl	800d1a4 <move_window>
 800f440:	4603      	mov	r3, r0
 800f442:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f444:	7dfb      	ldrb	r3, [r7, #23]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d138      	bne.n	800f4bc <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f44e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	330b      	adds	r3, #11
 800f454:	781a      	ldrb	r2, [r3, #0]
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	330b      	adds	r3, #11
 800f45a:	f042 0220 	orr.w	r2, r2, #32
 800f45e:	b2d2      	uxtb	r2, r2
 800f460:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	6818      	ldr	r0, [r3, #0]
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	689b      	ldr	r3, [r3, #8]
 800f46a:	461a      	mov	r2, r3
 800f46c:	68f9      	ldr	r1, [r7, #12]
 800f46e:	f7fe fbbf 	bl	800dbf0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	f103 021c 	add.w	r2, r3, #28
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	68db      	ldr	r3, [r3, #12]
 800f47c:	4619      	mov	r1, r3
 800f47e:	4610      	mov	r0, r2
 800f480:	f7fd fc36 	bl	800ccf0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	3316      	adds	r3, #22
 800f488:	6939      	ldr	r1, [r7, #16]
 800f48a:	4618      	mov	r0, r3
 800f48c:	f7fd fc30 	bl	800ccf0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	3312      	adds	r3, #18
 800f494:	2100      	movs	r1, #0
 800f496:	4618      	mov	r0, r3
 800f498:	f7fd fc0f 	bl	800ccba <st_word>
					fs->wflag = 1;
 800f49c:	68bb      	ldr	r3, [r7, #8]
 800f49e:	2201      	movs	r2, #1
 800f4a0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f7fd feab 	bl	800d200 <sync_fs>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	7d1b      	ldrb	r3, [r3, #20]
 800f4b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f4b6:	b2da      	uxtb	r2, r3
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f4bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	3718      	adds	r7, #24
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}

0800f4c6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f4c6:	b580      	push	{r7, lr}
 800f4c8:	b084      	sub	sp, #16
 800f4ca:	af00      	add	r7, sp, #0
 800f4cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f7ff ff7b 	bl	800f3ca <f_sync>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f4d8:	7bfb      	ldrb	r3, [r7, #15]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d118      	bne.n	800f510 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f107 0208 	add.w	r2, r7, #8
 800f4e4:	4611      	mov	r1, r2
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f7ff fbf6 	bl	800ecd8 <validate>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f4f0:	7bfb      	ldrb	r3, [r7, #15]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d10c      	bne.n	800f510 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	691b      	ldr	r3, [r3, #16]
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f7fd fdae 	bl	800d05c <dec_lock>
 800f500:	4603      	mov	r3, r0
 800f502:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f504:	7bfb      	ldrb	r3, [r7, #15]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d102      	bne.n	800f510 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2200      	movs	r2, #0
 800f50e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f510:	7bfb      	ldrb	r3, [r7, #15]
}
 800f512:	4618      	mov	r0, r3
 800f514:	3710      	adds	r7, #16
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
	...

0800f51c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f51c:	b480      	push	{r7}
 800f51e:	b087      	sub	sp, #28
 800f520:	af00      	add	r7, sp, #0
 800f522:	60f8      	str	r0, [r7, #12]
 800f524:	60b9      	str	r1, [r7, #8]
 800f526:	4613      	mov	r3, r2
 800f528:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f52a:	2301      	movs	r3, #1
 800f52c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f52e:	2300      	movs	r3, #0
 800f530:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f532:	4b1f      	ldr	r3, [pc, #124]	; (800f5b0 <FATFS_LinkDriverEx+0x94>)
 800f534:	7a5b      	ldrb	r3, [r3, #9]
 800f536:	b2db      	uxtb	r3, r3
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d131      	bne.n	800f5a0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f53c:	4b1c      	ldr	r3, [pc, #112]	; (800f5b0 <FATFS_LinkDriverEx+0x94>)
 800f53e:	7a5b      	ldrb	r3, [r3, #9]
 800f540:	b2db      	uxtb	r3, r3
 800f542:	461a      	mov	r2, r3
 800f544:	4b1a      	ldr	r3, [pc, #104]	; (800f5b0 <FATFS_LinkDriverEx+0x94>)
 800f546:	2100      	movs	r1, #0
 800f548:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f54a:	4b19      	ldr	r3, [pc, #100]	; (800f5b0 <FATFS_LinkDriverEx+0x94>)
 800f54c:	7a5b      	ldrb	r3, [r3, #9]
 800f54e:	b2db      	uxtb	r3, r3
 800f550:	4a17      	ldr	r2, [pc, #92]	; (800f5b0 <FATFS_LinkDriverEx+0x94>)
 800f552:	009b      	lsls	r3, r3, #2
 800f554:	4413      	add	r3, r2
 800f556:	68fa      	ldr	r2, [r7, #12]
 800f558:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f55a:	4b15      	ldr	r3, [pc, #84]	; (800f5b0 <FATFS_LinkDriverEx+0x94>)
 800f55c:	7a5b      	ldrb	r3, [r3, #9]
 800f55e:	b2db      	uxtb	r3, r3
 800f560:	461a      	mov	r2, r3
 800f562:	4b13      	ldr	r3, [pc, #76]	; (800f5b0 <FATFS_LinkDriverEx+0x94>)
 800f564:	4413      	add	r3, r2
 800f566:	79fa      	ldrb	r2, [r7, #7]
 800f568:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f56a:	4b11      	ldr	r3, [pc, #68]	; (800f5b0 <FATFS_LinkDriverEx+0x94>)
 800f56c:	7a5b      	ldrb	r3, [r3, #9]
 800f56e:	b2db      	uxtb	r3, r3
 800f570:	1c5a      	adds	r2, r3, #1
 800f572:	b2d1      	uxtb	r1, r2
 800f574:	4a0e      	ldr	r2, [pc, #56]	; (800f5b0 <FATFS_LinkDriverEx+0x94>)
 800f576:	7251      	strb	r1, [r2, #9]
 800f578:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f57a:	7dbb      	ldrb	r3, [r7, #22]
 800f57c:	3330      	adds	r3, #48	; 0x30
 800f57e:	b2da      	uxtb	r2, r3
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	3301      	adds	r3, #1
 800f588:	223a      	movs	r2, #58	; 0x3a
 800f58a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f58c:	68bb      	ldr	r3, [r7, #8]
 800f58e:	3302      	adds	r3, #2
 800f590:	222f      	movs	r2, #47	; 0x2f
 800f592:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	3303      	adds	r3, #3
 800f598:	2200      	movs	r2, #0
 800f59a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f59c:	2300      	movs	r3, #0
 800f59e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f5a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	371c      	adds	r7, #28
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ac:	4770      	bx	lr
 800f5ae:	bf00      	nop
 800f5b0:	2400052c 	.word	0x2400052c

0800f5b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b082      	sub	sp, #8
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
 800f5bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f5be:	2200      	movs	r2, #0
 800f5c0:	6839      	ldr	r1, [r7, #0]
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f7ff ffaa 	bl	800f51c <FATFS_LinkDriverEx>
 800f5c8:	4603      	mov	r3, r0
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	3708      	adds	r7, #8
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}
	...

0800f5d4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b085      	sub	sp, #20
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	4603      	mov	r3, r0
 800f5dc:	6039      	str	r1, [r7, #0]
 800f5de:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f5e0:	88fb      	ldrh	r3, [r7, #6]
 800f5e2:	2b7f      	cmp	r3, #127	; 0x7f
 800f5e4:	d802      	bhi.n	800f5ec <ff_convert+0x18>
		c = chr;
 800f5e6:	88fb      	ldrh	r3, [r7, #6]
 800f5e8:	81fb      	strh	r3, [r7, #14]
 800f5ea:	e025      	b.n	800f638 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d00b      	beq.n	800f60a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f5f2:	88fb      	ldrh	r3, [r7, #6]
 800f5f4:	2bff      	cmp	r3, #255	; 0xff
 800f5f6:	d805      	bhi.n	800f604 <ff_convert+0x30>
 800f5f8:	88fb      	ldrh	r3, [r7, #6]
 800f5fa:	3b80      	subs	r3, #128	; 0x80
 800f5fc:	4a12      	ldr	r2, [pc, #72]	; (800f648 <ff_convert+0x74>)
 800f5fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f602:	e000      	b.n	800f606 <ff_convert+0x32>
 800f604:	2300      	movs	r3, #0
 800f606:	81fb      	strh	r3, [r7, #14]
 800f608:	e016      	b.n	800f638 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f60a:	2300      	movs	r3, #0
 800f60c:	81fb      	strh	r3, [r7, #14]
 800f60e:	e009      	b.n	800f624 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f610:	89fb      	ldrh	r3, [r7, #14]
 800f612:	4a0d      	ldr	r2, [pc, #52]	; (800f648 <ff_convert+0x74>)
 800f614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f618:	88fa      	ldrh	r2, [r7, #6]
 800f61a:	429a      	cmp	r2, r3
 800f61c:	d006      	beq.n	800f62c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f61e:	89fb      	ldrh	r3, [r7, #14]
 800f620:	3301      	adds	r3, #1
 800f622:	81fb      	strh	r3, [r7, #14]
 800f624:	89fb      	ldrh	r3, [r7, #14]
 800f626:	2b7f      	cmp	r3, #127	; 0x7f
 800f628:	d9f2      	bls.n	800f610 <ff_convert+0x3c>
 800f62a:	e000      	b.n	800f62e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f62c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f62e:	89fb      	ldrh	r3, [r7, #14]
 800f630:	3380      	adds	r3, #128	; 0x80
 800f632:	b29b      	uxth	r3, r3
 800f634:	b2db      	uxtb	r3, r3
 800f636:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f638:	89fb      	ldrh	r3, [r7, #14]
}
 800f63a:	4618      	mov	r0, r3
 800f63c:	3714      	adds	r7, #20
 800f63e:	46bd      	mov	sp, r7
 800f640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f644:	4770      	bx	lr
 800f646:	bf00      	nop
 800f648:	080108fc 	.word	0x080108fc

0800f64c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f64c:	b480      	push	{r7}
 800f64e:	b087      	sub	sp, #28
 800f650:	af00      	add	r7, sp, #0
 800f652:	4603      	mov	r3, r0
 800f654:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f656:	88fb      	ldrh	r3, [r7, #6]
 800f658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f65c:	d201      	bcs.n	800f662 <ff_wtoupper+0x16>
 800f65e:	4b3e      	ldr	r3, [pc, #248]	; (800f758 <ff_wtoupper+0x10c>)
 800f660:	e000      	b.n	800f664 <ff_wtoupper+0x18>
 800f662:	4b3e      	ldr	r3, [pc, #248]	; (800f75c <ff_wtoupper+0x110>)
 800f664:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	1c9a      	adds	r2, r3, #2
 800f66a:	617a      	str	r2, [r7, #20]
 800f66c:	881b      	ldrh	r3, [r3, #0]
 800f66e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f670:	8a7b      	ldrh	r3, [r7, #18]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d068      	beq.n	800f748 <ff_wtoupper+0xfc>
 800f676:	88fa      	ldrh	r2, [r7, #6]
 800f678:	8a7b      	ldrh	r3, [r7, #18]
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d364      	bcc.n	800f748 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f67e:	697b      	ldr	r3, [r7, #20]
 800f680:	1c9a      	adds	r2, r3, #2
 800f682:	617a      	str	r2, [r7, #20]
 800f684:	881b      	ldrh	r3, [r3, #0]
 800f686:	823b      	strh	r3, [r7, #16]
 800f688:	8a3b      	ldrh	r3, [r7, #16]
 800f68a:	0a1b      	lsrs	r3, r3, #8
 800f68c:	81fb      	strh	r3, [r7, #14]
 800f68e:	8a3b      	ldrh	r3, [r7, #16]
 800f690:	b2db      	uxtb	r3, r3
 800f692:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f694:	88fa      	ldrh	r2, [r7, #6]
 800f696:	8a79      	ldrh	r1, [r7, #18]
 800f698:	8a3b      	ldrh	r3, [r7, #16]
 800f69a:	440b      	add	r3, r1
 800f69c:	429a      	cmp	r2, r3
 800f69e:	da49      	bge.n	800f734 <ff_wtoupper+0xe8>
			switch (cmd) {
 800f6a0:	89fb      	ldrh	r3, [r7, #14]
 800f6a2:	2b08      	cmp	r3, #8
 800f6a4:	d84f      	bhi.n	800f746 <ff_wtoupper+0xfa>
 800f6a6:	a201      	add	r2, pc, #4	; (adr r2, 800f6ac <ff_wtoupper+0x60>)
 800f6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6ac:	0800f6d1 	.word	0x0800f6d1
 800f6b0:	0800f6e3 	.word	0x0800f6e3
 800f6b4:	0800f6f9 	.word	0x0800f6f9
 800f6b8:	0800f701 	.word	0x0800f701
 800f6bc:	0800f709 	.word	0x0800f709
 800f6c0:	0800f711 	.word	0x0800f711
 800f6c4:	0800f719 	.word	0x0800f719
 800f6c8:	0800f721 	.word	0x0800f721
 800f6cc:	0800f729 	.word	0x0800f729
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f6d0:	88fa      	ldrh	r2, [r7, #6]
 800f6d2:	8a7b      	ldrh	r3, [r7, #18]
 800f6d4:	1ad3      	subs	r3, r2, r3
 800f6d6:	005b      	lsls	r3, r3, #1
 800f6d8:	697a      	ldr	r2, [r7, #20]
 800f6da:	4413      	add	r3, r2
 800f6dc:	881b      	ldrh	r3, [r3, #0]
 800f6de:	80fb      	strh	r3, [r7, #6]
 800f6e0:	e027      	b.n	800f732 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f6e2:	88fa      	ldrh	r2, [r7, #6]
 800f6e4:	8a7b      	ldrh	r3, [r7, #18]
 800f6e6:	1ad3      	subs	r3, r2, r3
 800f6e8:	b29b      	uxth	r3, r3
 800f6ea:	f003 0301 	and.w	r3, r3, #1
 800f6ee:	b29b      	uxth	r3, r3
 800f6f0:	88fa      	ldrh	r2, [r7, #6]
 800f6f2:	1ad3      	subs	r3, r2, r3
 800f6f4:	80fb      	strh	r3, [r7, #6]
 800f6f6:	e01c      	b.n	800f732 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f6f8:	88fb      	ldrh	r3, [r7, #6]
 800f6fa:	3b10      	subs	r3, #16
 800f6fc:	80fb      	strh	r3, [r7, #6]
 800f6fe:	e018      	b.n	800f732 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f700:	88fb      	ldrh	r3, [r7, #6]
 800f702:	3b20      	subs	r3, #32
 800f704:	80fb      	strh	r3, [r7, #6]
 800f706:	e014      	b.n	800f732 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f708:	88fb      	ldrh	r3, [r7, #6]
 800f70a:	3b30      	subs	r3, #48	; 0x30
 800f70c:	80fb      	strh	r3, [r7, #6]
 800f70e:	e010      	b.n	800f732 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f710:	88fb      	ldrh	r3, [r7, #6]
 800f712:	3b1a      	subs	r3, #26
 800f714:	80fb      	strh	r3, [r7, #6]
 800f716:	e00c      	b.n	800f732 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f718:	88fb      	ldrh	r3, [r7, #6]
 800f71a:	3308      	adds	r3, #8
 800f71c:	80fb      	strh	r3, [r7, #6]
 800f71e:	e008      	b.n	800f732 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f720:	88fb      	ldrh	r3, [r7, #6]
 800f722:	3b50      	subs	r3, #80	; 0x50
 800f724:	80fb      	strh	r3, [r7, #6]
 800f726:	e004      	b.n	800f732 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f728:	88fb      	ldrh	r3, [r7, #6]
 800f72a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800f72e:	80fb      	strh	r3, [r7, #6]
 800f730:	bf00      	nop
			}
			break;
 800f732:	e008      	b.n	800f746 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f734:	89fb      	ldrh	r3, [r7, #14]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d195      	bne.n	800f666 <ff_wtoupper+0x1a>
 800f73a:	8a3b      	ldrh	r3, [r7, #16]
 800f73c:	005b      	lsls	r3, r3, #1
 800f73e:	697a      	ldr	r2, [r7, #20]
 800f740:	4413      	add	r3, r2
 800f742:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f744:	e78f      	b.n	800f666 <ff_wtoupper+0x1a>
			break;
 800f746:	bf00      	nop
	}

	return chr;
 800f748:	88fb      	ldrh	r3, [r7, #6]
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	371c      	adds	r7, #28
 800f74e:	46bd      	mov	sp, r7
 800f750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f754:	4770      	bx	lr
 800f756:	bf00      	nop
 800f758:	080109fc 	.word	0x080109fc
 800f75c:	08010bf0 	.word	0x08010bf0

0800f760 <__errno>:
 800f760:	4b01      	ldr	r3, [pc, #4]	; (800f768 <__errno+0x8>)
 800f762:	6818      	ldr	r0, [r3, #0]
 800f764:	4770      	bx	lr
 800f766:	bf00      	nop
 800f768:	24000018 	.word	0x24000018

0800f76c <__libc_init_array>:
 800f76c:	b570      	push	{r4, r5, r6, lr}
 800f76e:	4d0d      	ldr	r5, [pc, #52]	; (800f7a4 <__libc_init_array+0x38>)
 800f770:	4c0d      	ldr	r4, [pc, #52]	; (800f7a8 <__libc_init_array+0x3c>)
 800f772:	1b64      	subs	r4, r4, r5
 800f774:	10a4      	asrs	r4, r4, #2
 800f776:	2600      	movs	r6, #0
 800f778:	42a6      	cmp	r6, r4
 800f77a:	d109      	bne.n	800f790 <__libc_init_array+0x24>
 800f77c:	4d0b      	ldr	r5, [pc, #44]	; (800f7ac <__libc_init_array+0x40>)
 800f77e:	4c0c      	ldr	r4, [pc, #48]	; (800f7b0 <__libc_init_array+0x44>)
 800f780:	f000 fcdc 	bl	801013c <_init>
 800f784:	1b64      	subs	r4, r4, r5
 800f786:	10a4      	asrs	r4, r4, #2
 800f788:	2600      	movs	r6, #0
 800f78a:	42a6      	cmp	r6, r4
 800f78c:	d105      	bne.n	800f79a <__libc_init_array+0x2e>
 800f78e:	bd70      	pop	{r4, r5, r6, pc}
 800f790:	f855 3b04 	ldr.w	r3, [r5], #4
 800f794:	4798      	blx	r3
 800f796:	3601      	adds	r6, #1
 800f798:	e7ee      	b.n	800f778 <__libc_init_array+0xc>
 800f79a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f79e:	4798      	blx	r3
 800f7a0:	3601      	adds	r6, #1
 800f7a2:	e7f2      	b.n	800f78a <__libc_init_array+0x1e>
 800f7a4:	08010ce0 	.word	0x08010ce0
 800f7a8:	08010ce0 	.word	0x08010ce0
 800f7ac:	08010ce0 	.word	0x08010ce0
 800f7b0:	08010ce4 	.word	0x08010ce4

0800f7b4 <memcpy>:
 800f7b4:	440a      	add	r2, r1
 800f7b6:	4291      	cmp	r1, r2
 800f7b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f7bc:	d100      	bne.n	800f7c0 <memcpy+0xc>
 800f7be:	4770      	bx	lr
 800f7c0:	b510      	push	{r4, lr}
 800f7c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f7c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f7ca:	4291      	cmp	r1, r2
 800f7cc:	d1f9      	bne.n	800f7c2 <memcpy+0xe>
 800f7ce:	bd10      	pop	{r4, pc}

0800f7d0 <memmove>:
 800f7d0:	4288      	cmp	r0, r1
 800f7d2:	b510      	push	{r4, lr}
 800f7d4:	eb01 0402 	add.w	r4, r1, r2
 800f7d8:	d902      	bls.n	800f7e0 <memmove+0x10>
 800f7da:	4284      	cmp	r4, r0
 800f7dc:	4623      	mov	r3, r4
 800f7de:	d807      	bhi.n	800f7f0 <memmove+0x20>
 800f7e0:	1e43      	subs	r3, r0, #1
 800f7e2:	42a1      	cmp	r1, r4
 800f7e4:	d008      	beq.n	800f7f8 <memmove+0x28>
 800f7e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f7ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f7ee:	e7f8      	b.n	800f7e2 <memmove+0x12>
 800f7f0:	4402      	add	r2, r0
 800f7f2:	4601      	mov	r1, r0
 800f7f4:	428a      	cmp	r2, r1
 800f7f6:	d100      	bne.n	800f7fa <memmove+0x2a>
 800f7f8:	bd10      	pop	{r4, pc}
 800f7fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f7fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f802:	e7f7      	b.n	800f7f4 <memmove+0x24>

0800f804 <memset>:
 800f804:	4402      	add	r2, r0
 800f806:	4603      	mov	r3, r0
 800f808:	4293      	cmp	r3, r2
 800f80a:	d100      	bne.n	800f80e <memset+0xa>
 800f80c:	4770      	bx	lr
 800f80e:	f803 1b01 	strb.w	r1, [r3], #1
 800f812:	e7f9      	b.n	800f808 <memset+0x4>

0800f814 <sniprintf>:
 800f814:	b40c      	push	{r2, r3}
 800f816:	b530      	push	{r4, r5, lr}
 800f818:	4b17      	ldr	r3, [pc, #92]	; (800f878 <sniprintf+0x64>)
 800f81a:	1e0c      	subs	r4, r1, #0
 800f81c:	681d      	ldr	r5, [r3, #0]
 800f81e:	b09d      	sub	sp, #116	; 0x74
 800f820:	da08      	bge.n	800f834 <sniprintf+0x20>
 800f822:	238b      	movs	r3, #139	; 0x8b
 800f824:	602b      	str	r3, [r5, #0]
 800f826:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f82a:	b01d      	add	sp, #116	; 0x74
 800f82c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f830:	b002      	add	sp, #8
 800f832:	4770      	bx	lr
 800f834:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f838:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f83c:	bf14      	ite	ne
 800f83e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800f842:	4623      	moveq	r3, r4
 800f844:	9304      	str	r3, [sp, #16]
 800f846:	9307      	str	r3, [sp, #28]
 800f848:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f84c:	9002      	str	r0, [sp, #8]
 800f84e:	9006      	str	r0, [sp, #24]
 800f850:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f854:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f856:	ab21      	add	r3, sp, #132	; 0x84
 800f858:	a902      	add	r1, sp, #8
 800f85a:	4628      	mov	r0, r5
 800f85c:	9301      	str	r3, [sp, #4]
 800f85e:	f000 f8a3 	bl	800f9a8 <_svfiprintf_r>
 800f862:	1c43      	adds	r3, r0, #1
 800f864:	bfbc      	itt	lt
 800f866:	238b      	movlt	r3, #139	; 0x8b
 800f868:	602b      	strlt	r3, [r5, #0]
 800f86a:	2c00      	cmp	r4, #0
 800f86c:	d0dd      	beq.n	800f82a <sniprintf+0x16>
 800f86e:	9b02      	ldr	r3, [sp, #8]
 800f870:	2200      	movs	r2, #0
 800f872:	701a      	strb	r2, [r3, #0]
 800f874:	e7d9      	b.n	800f82a <sniprintf+0x16>
 800f876:	bf00      	nop
 800f878:	24000018 	.word	0x24000018

0800f87c <_vsniprintf_r>:
 800f87c:	b530      	push	{r4, r5, lr}
 800f87e:	4614      	mov	r4, r2
 800f880:	2c00      	cmp	r4, #0
 800f882:	b09b      	sub	sp, #108	; 0x6c
 800f884:	4605      	mov	r5, r0
 800f886:	461a      	mov	r2, r3
 800f888:	da05      	bge.n	800f896 <_vsniprintf_r+0x1a>
 800f88a:	238b      	movs	r3, #139	; 0x8b
 800f88c:	6003      	str	r3, [r0, #0]
 800f88e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f892:	b01b      	add	sp, #108	; 0x6c
 800f894:	bd30      	pop	{r4, r5, pc}
 800f896:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f89a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f89e:	bf14      	ite	ne
 800f8a0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800f8a4:	4623      	moveq	r3, r4
 800f8a6:	9302      	str	r3, [sp, #8]
 800f8a8:	9305      	str	r3, [sp, #20]
 800f8aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f8ae:	9100      	str	r1, [sp, #0]
 800f8b0:	9104      	str	r1, [sp, #16]
 800f8b2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f8b6:	4669      	mov	r1, sp
 800f8b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f8ba:	f000 f875 	bl	800f9a8 <_svfiprintf_r>
 800f8be:	1c43      	adds	r3, r0, #1
 800f8c0:	bfbc      	itt	lt
 800f8c2:	238b      	movlt	r3, #139	; 0x8b
 800f8c4:	602b      	strlt	r3, [r5, #0]
 800f8c6:	2c00      	cmp	r4, #0
 800f8c8:	d0e3      	beq.n	800f892 <_vsniprintf_r+0x16>
 800f8ca:	9b00      	ldr	r3, [sp, #0]
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	701a      	strb	r2, [r3, #0]
 800f8d0:	e7df      	b.n	800f892 <_vsniprintf_r+0x16>
	...

0800f8d4 <vsniprintf>:
 800f8d4:	b507      	push	{r0, r1, r2, lr}
 800f8d6:	9300      	str	r3, [sp, #0]
 800f8d8:	4613      	mov	r3, r2
 800f8da:	460a      	mov	r2, r1
 800f8dc:	4601      	mov	r1, r0
 800f8de:	4803      	ldr	r0, [pc, #12]	; (800f8ec <vsniprintf+0x18>)
 800f8e0:	6800      	ldr	r0, [r0, #0]
 800f8e2:	f7ff ffcb 	bl	800f87c <_vsniprintf_r>
 800f8e6:	b003      	add	sp, #12
 800f8e8:	f85d fb04 	ldr.w	pc, [sp], #4
 800f8ec:	24000018 	.word	0x24000018

0800f8f0 <__ssputs_r>:
 800f8f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8f4:	688e      	ldr	r6, [r1, #8]
 800f8f6:	429e      	cmp	r6, r3
 800f8f8:	4682      	mov	sl, r0
 800f8fa:	460c      	mov	r4, r1
 800f8fc:	4690      	mov	r8, r2
 800f8fe:	461f      	mov	r7, r3
 800f900:	d838      	bhi.n	800f974 <__ssputs_r+0x84>
 800f902:	898a      	ldrh	r2, [r1, #12]
 800f904:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f908:	d032      	beq.n	800f970 <__ssputs_r+0x80>
 800f90a:	6825      	ldr	r5, [r4, #0]
 800f90c:	6909      	ldr	r1, [r1, #16]
 800f90e:	eba5 0901 	sub.w	r9, r5, r1
 800f912:	6965      	ldr	r5, [r4, #20]
 800f914:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f918:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f91c:	3301      	adds	r3, #1
 800f91e:	444b      	add	r3, r9
 800f920:	106d      	asrs	r5, r5, #1
 800f922:	429d      	cmp	r5, r3
 800f924:	bf38      	it	cc
 800f926:	461d      	movcc	r5, r3
 800f928:	0553      	lsls	r3, r2, #21
 800f92a:	d531      	bpl.n	800f990 <__ssputs_r+0xa0>
 800f92c:	4629      	mov	r1, r5
 800f92e:	f000 fb3b 	bl	800ffa8 <_malloc_r>
 800f932:	4606      	mov	r6, r0
 800f934:	b950      	cbnz	r0, 800f94c <__ssputs_r+0x5c>
 800f936:	230c      	movs	r3, #12
 800f938:	f8ca 3000 	str.w	r3, [sl]
 800f93c:	89a3      	ldrh	r3, [r4, #12]
 800f93e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f942:	81a3      	strh	r3, [r4, #12]
 800f944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f94c:	6921      	ldr	r1, [r4, #16]
 800f94e:	464a      	mov	r2, r9
 800f950:	f7ff ff30 	bl	800f7b4 <memcpy>
 800f954:	89a3      	ldrh	r3, [r4, #12]
 800f956:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f95a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f95e:	81a3      	strh	r3, [r4, #12]
 800f960:	6126      	str	r6, [r4, #16]
 800f962:	6165      	str	r5, [r4, #20]
 800f964:	444e      	add	r6, r9
 800f966:	eba5 0509 	sub.w	r5, r5, r9
 800f96a:	6026      	str	r6, [r4, #0]
 800f96c:	60a5      	str	r5, [r4, #8]
 800f96e:	463e      	mov	r6, r7
 800f970:	42be      	cmp	r6, r7
 800f972:	d900      	bls.n	800f976 <__ssputs_r+0x86>
 800f974:	463e      	mov	r6, r7
 800f976:	6820      	ldr	r0, [r4, #0]
 800f978:	4632      	mov	r2, r6
 800f97a:	4641      	mov	r1, r8
 800f97c:	f7ff ff28 	bl	800f7d0 <memmove>
 800f980:	68a3      	ldr	r3, [r4, #8]
 800f982:	1b9b      	subs	r3, r3, r6
 800f984:	60a3      	str	r3, [r4, #8]
 800f986:	6823      	ldr	r3, [r4, #0]
 800f988:	4433      	add	r3, r6
 800f98a:	6023      	str	r3, [r4, #0]
 800f98c:	2000      	movs	r0, #0
 800f98e:	e7db      	b.n	800f948 <__ssputs_r+0x58>
 800f990:	462a      	mov	r2, r5
 800f992:	f000 fb7d 	bl	8010090 <_realloc_r>
 800f996:	4606      	mov	r6, r0
 800f998:	2800      	cmp	r0, #0
 800f99a:	d1e1      	bne.n	800f960 <__ssputs_r+0x70>
 800f99c:	6921      	ldr	r1, [r4, #16]
 800f99e:	4650      	mov	r0, sl
 800f9a0:	f000 fa96 	bl	800fed0 <_free_r>
 800f9a4:	e7c7      	b.n	800f936 <__ssputs_r+0x46>
	...

0800f9a8 <_svfiprintf_r>:
 800f9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ac:	4698      	mov	r8, r3
 800f9ae:	898b      	ldrh	r3, [r1, #12]
 800f9b0:	061b      	lsls	r3, r3, #24
 800f9b2:	b09d      	sub	sp, #116	; 0x74
 800f9b4:	4607      	mov	r7, r0
 800f9b6:	460d      	mov	r5, r1
 800f9b8:	4614      	mov	r4, r2
 800f9ba:	d50e      	bpl.n	800f9da <_svfiprintf_r+0x32>
 800f9bc:	690b      	ldr	r3, [r1, #16]
 800f9be:	b963      	cbnz	r3, 800f9da <_svfiprintf_r+0x32>
 800f9c0:	2140      	movs	r1, #64	; 0x40
 800f9c2:	f000 faf1 	bl	800ffa8 <_malloc_r>
 800f9c6:	6028      	str	r0, [r5, #0]
 800f9c8:	6128      	str	r0, [r5, #16]
 800f9ca:	b920      	cbnz	r0, 800f9d6 <_svfiprintf_r+0x2e>
 800f9cc:	230c      	movs	r3, #12
 800f9ce:	603b      	str	r3, [r7, #0]
 800f9d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f9d4:	e0d1      	b.n	800fb7a <_svfiprintf_r+0x1d2>
 800f9d6:	2340      	movs	r3, #64	; 0x40
 800f9d8:	616b      	str	r3, [r5, #20]
 800f9da:	2300      	movs	r3, #0
 800f9dc:	9309      	str	r3, [sp, #36]	; 0x24
 800f9de:	2320      	movs	r3, #32
 800f9e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f9e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9e8:	2330      	movs	r3, #48	; 0x30
 800f9ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fb94 <_svfiprintf_r+0x1ec>
 800f9ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f9f2:	f04f 0901 	mov.w	r9, #1
 800f9f6:	4623      	mov	r3, r4
 800f9f8:	469a      	mov	sl, r3
 800f9fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9fe:	b10a      	cbz	r2, 800fa04 <_svfiprintf_r+0x5c>
 800fa00:	2a25      	cmp	r2, #37	; 0x25
 800fa02:	d1f9      	bne.n	800f9f8 <_svfiprintf_r+0x50>
 800fa04:	ebba 0b04 	subs.w	fp, sl, r4
 800fa08:	d00b      	beq.n	800fa22 <_svfiprintf_r+0x7a>
 800fa0a:	465b      	mov	r3, fp
 800fa0c:	4622      	mov	r2, r4
 800fa0e:	4629      	mov	r1, r5
 800fa10:	4638      	mov	r0, r7
 800fa12:	f7ff ff6d 	bl	800f8f0 <__ssputs_r>
 800fa16:	3001      	adds	r0, #1
 800fa18:	f000 80aa 	beq.w	800fb70 <_svfiprintf_r+0x1c8>
 800fa1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa1e:	445a      	add	r2, fp
 800fa20:	9209      	str	r2, [sp, #36]	; 0x24
 800fa22:	f89a 3000 	ldrb.w	r3, [sl]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	f000 80a2 	beq.w	800fb70 <_svfiprintf_r+0x1c8>
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fa32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa36:	f10a 0a01 	add.w	sl, sl, #1
 800fa3a:	9304      	str	r3, [sp, #16]
 800fa3c:	9307      	str	r3, [sp, #28]
 800fa3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa42:	931a      	str	r3, [sp, #104]	; 0x68
 800fa44:	4654      	mov	r4, sl
 800fa46:	2205      	movs	r2, #5
 800fa48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa4c:	4851      	ldr	r0, [pc, #324]	; (800fb94 <_svfiprintf_r+0x1ec>)
 800fa4e:	f7f0 fc4f 	bl	80002f0 <memchr>
 800fa52:	9a04      	ldr	r2, [sp, #16]
 800fa54:	b9d8      	cbnz	r0, 800fa8e <_svfiprintf_r+0xe6>
 800fa56:	06d0      	lsls	r0, r2, #27
 800fa58:	bf44      	itt	mi
 800fa5a:	2320      	movmi	r3, #32
 800fa5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa60:	0711      	lsls	r1, r2, #28
 800fa62:	bf44      	itt	mi
 800fa64:	232b      	movmi	r3, #43	; 0x2b
 800fa66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa6a:	f89a 3000 	ldrb.w	r3, [sl]
 800fa6e:	2b2a      	cmp	r3, #42	; 0x2a
 800fa70:	d015      	beq.n	800fa9e <_svfiprintf_r+0xf6>
 800fa72:	9a07      	ldr	r2, [sp, #28]
 800fa74:	4654      	mov	r4, sl
 800fa76:	2000      	movs	r0, #0
 800fa78:	f04f 0c0a 	mov.w	ip, #10
 800fa7c:	4621      	mov	r1, r4
 800fa7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa82:	3b30      	subs	r3, #48	; 0x30
 800fa84:	2b09      	cmp	r3, #9
 800fa86:	d94e      	bls.n	800fb26 <_svfiprintf_r+0x17e>
 800fa88:	b1b0      	cbz	r0, 800fab8 <_svfiprintf_r+0x110>
 800fa8a:	9207      	str	r2, [sp, #28]
 800fa8c:	e014      	b.n	800fab8 <_svfiprintf_r+0x110>
 800fa8e:	eba0 0308 	sub.w	r3, r0, r8
 800fa92:	fa09 f303 	lsl.w	r3, r9, r3
 800fa96:	4313      	orrs	r3, r2
 800fa98:	9304      	str	r3, [sp, #16]
 800fa9a:	46a2      	mov	sl, r4
 800fa9c:	e7d2      	b.n	800fa44 <_svfiprintf_r+0x9c>
 800fa9e:	9b03      	ldr	r3, [sp, #12]
 800faa0:	1d19      	adds	r1, r3, #4
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	9103      	str	r1, [sp, #12]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	bfbb      	ittet	lt
 800faaa:	425b      	neglt	r3, r3
 800faac:	f042 0202 	orrlt.w	r2, r2, #2
 800fab0:	9307      	strge	r3, [sp, #28]
 800fab2:	9307      	strlt	r3, [sp, #28]
 800fab4:	bfb8      	it	lt
 800fab6:	9204      	strlt	r2, [sp, #16]
 800fab8:	7823      	ldrb	r3, [r4, #0]
 800faba:	2b2e      	cmp	r3, #46	; 0x2e
 800fabc:	d10c      	bne.n	800fad8 <_svfiprintf_r+0x130>
 800fabe:	7863      	ldrb	r3, [r4, #1]
 800fac0:	2b2a      	cmp	r3, #42	; 0x2a
 800fac2:	d135      	bne.n	800fb30 <_svfiprintf_r+0x188>
 800fac4:	9b03      	ldr	r3, [sp, #12]
 800fac6:	1d1a      	adds	r2, r3, #4
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	9203      	str	r2, [sp, #12]
 800facc:	2b00      	cmp	r3, #0
 800face:	bfb8      	it	lt
 800fad0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fad4:	3402      	adds	r4, #2
 800fad6:	9305      	str	r3, [sp, #20]
 800fad8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fba4 <_svfiprintf_r+0x1fc>
 800fadc:	7821      	ldrb	r1, [r4, #0]
 800fade:	2203      	movs	r2, #3
 800fae0:	4650      	mov	r0, sl
 800fae2:	f7f0 fc05 	bl	80002f0 <memchr>
 800fae6:	b140      	cbz	r0, 800fafa <_svfiprintf_r+0x152>
 800fae8:	2340      	movs	r3, #64	; 0x40
 800faea:	eba0 000a 	sub.w	r0, r0, sl
 800faee:	fa03 f000 	lsl.w	r0, r3, r0
 800faf2:	9b04      	ldr	r3, [sp, #16]
 800faf4:	4303      	orrs	r3, r0
 800faf6:	3401      	adds	r4, #1
 800faf8:	9304      	str	r3, [sp, #16]
 800fafa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fafe:	4826      	ldr	r0, [pc, #152]	; (800fb98 <_svfiprintf_r+0x1f0>)
 800fb00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb04:	2206      	movs	r2, #6
 800fb06:	f7f0 fbf3 	bl	80002f0 <memchr>
 800fb0a:	2800      	cmp	r0, #0
 800fb0c:	d038      	beq.n	800fb80 <_svfiprintf_r+0x1d8>
 800fb0e:	4b23      	ldr	r3, [pc, #140]	; (800fb9c <_svfiprintf_r+0x1f4>)
 800fb10:	bb1b      	cbnz	r3, 800fb5a <_svfiprintf_r+0x1b2>
 800fb12:	9b03      	ldr	r3, [sp, #12]
 800fb14:	3307      	adds	r3, #7
 800fb16:	f023 0307 	bic.w	r3, r3, #7
 800fb1a:	3308      	adds	r3, #8
 800fb1c:	9303      	str	r3, [sp, #12]
 800fb1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb20:	4433      	add	r3, r6
 800fb22:	9309      	str	r3, [sp, #36]	; 0x24
 800fb24:	e767      	b.n	800f9f6 <_svfiprintf_r+0x4e>
 800fb26:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb2a:	460c      	mov	r4, r1
 800fb2c:	2001      	movs	r0, #1
 800fb2e:	e7a5      	b.n	800fa7c <_svfiprintf_r+0xd4>
 800fb30:	2300      	movs	r3, #0
 800fb32:	3401      	adds	r4, #1
 800fb34:	9305      	str	r3, [sp, #20]
 800fb36:	4619      	mov	r1, r3
 800fb38:	f04f 0c0a 	mov.w	ip, #10
 800fb3c:	4620      	mov	r0, r4
 800fb3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb42:	3a30      	subs	r2, #48	; 0x30
 800fb44:	2a09      	cmp	r2, #9
 800fb46:	d903      	bls.n	800fb50 <_svfiprintf_r+0x1a8>
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d0c5      	beq.n	800fad8 <_svfiprintf_r+0x130>
 800fb4c:	9105      	str	r1, [sp, #20]
 800fb4e:	e7c3      	b.n	800fad8 <_svfiprintf_r+0x130>
 800fb50:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb54:	4604      	mov	r4, r0
 800fb56:	2301      	movs	r3, #1
 800fb58:	e7f0      	b.n	800fb3c <_svfiprintf_r+0x194>
 800fb5a:	ab03      	add	r3, sp, #12
 800fb5c:	9300      	str	r3, [sp, #0]
 800fb5e:	462a      	mov	r2, r5
 800fb60:	4b0f      	ldr	r3, [pc, #60]	; (800fba0 <_svfiprintf_r+0x1f8>)
 800fb62:	a904      	add	r1, sp, #16
 800fb64:	4638      	mov	r0, r7
 800fb66:	f3af 8000 	nop.w
 800fb6a:	1c42      	adds	r2, r0, #1
 800fb6c:	4606      	mov	r6, r0
 800fb6e:	d1d6      	bne.n	800fb1e <_svfiprintf_r+0x176>
 800fb70:	89ab      	ldrh	r3, [r5, #12]
 800fb72:	065b      	lsls	r3, r3, #25
 800fb74:	f53f af2c 	bmi.w	800f9d0 <_svfiprintf_r+0x28>
 800fb78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb7a:	b01d      	add	sp, #116	; 0x74
 800fb7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb80:	ab03      	add	r3, sp, #12
 800fb82:	9300      	str	r3, [sp, #0]
 800fb84:	462a      	mov	r2, r5
 800fb86:	4b06      	ldr	r3, [pc, #24]	; (800fba0 <_svfiprintf_r+0x1f8>)
 800fb88:	a904      	add	r1, sp, #16
 800fb8a:	4638      	mov	r0, r7
 800fb8c:	f000 f87a 	bl	800fc84 <_printf_i>
 800fb90:	e7eb      	b.n	800fb6a <_svfiprintf_r+0x1c2>
 800fb92:	bf00      	nop
 800fb94:	08010cac 	.word	0x08010cac
 800fb98:	08010cb6 	.word	0x08010cb6
 800fb9c:	00000000 	.word	0x00000000
 800fba0:	0800f8f1 	.word	0x0800f8f1
 800fba4:	08010cb2 	.word	0x08010cb2

0800fba8 <_printf_common>:
 800fba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbac:	4616      	mov	r6, r2
 800fbae:	4699      	mov	r9, r3
 800fbb0:	688a      	ldr	r2, [r1, #8]
 800fbb2:	690b      	ldr	r3, [r1, #16]
 800fbb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fbb8:	4293      	cmp	r3, r2
 800fbba:	bfb8      	it	lt
 800fbbc:	4613      	movlt	r3, r2
 800fbbe:	6033      	str	r3, [r6, #0]
 800fbc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fbc4:	4607      	mov	r7, r0
 800fbc6:	460c      	mov	r4, r1
 800fbc8:	b10a      	cbz	r2, 800fbce <_printf_common+0x26>
 800fbca:	3301      	adds	r3, #1
 800fbcc:	6033      	str	r3, [r6, #0]
 800fbce:	6823      	ldr	r3, [r4, #0]
 800fbd0:	0699      	lsls	r1, r3, #26
 800fbd2:	bf42      	ittt	mi
 800fbd4:	6833      	ldrmi	r3, [r6, #0]
 800fbd6:	3302      	addmi	r3, #2
 800fbd8:	6033      	strmi	r3, [r6, #0]
 800fbda:	6825      	ldr	r5, [r4, #0]
 800fbdc:	f015 0506 	ands.w	r5, r5, #6
 800fbe0:	d106      	bne.n	800fbf0 <_printf_common+0x48>
 800fbe2:	f104 0a19 	add.w	sl, r4, #25
 800fbe6:	68e3      	ldr	r3, [r4, #12]
 800fbe8:	6832      	ldr	r2, [r6, #0]
 800fbea:	1a9b      	subs	r3, r3, r2
 800fbec:	42ab      	cmp	r3, r5
 800fbee:	dc26      	bgt.n	800fc3e <_printf_common+0x96>
 800fbf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fbf4:	1e13      	subs	r3, r2, #0
 800fbf6:	6822      	ldr	r2, [r4, #0]
 800fbf8:	bf18      	it	ne
 800fbfa:	2301      	movne	r3, #1
 800fbfc:	0692      	lsls	r2, r2, #26
 800fbfe:	d42b      	bmi.n	800fc58 <_printf_common+0xb0>
 800fc00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fc04:	4649      	mov	r1, r9
 800fc06:	4638      	mov	r0, r7
 800fc08:	47c0      	blx	r8
 800fc0a:	3001      	adds	r0, #1
 800fc0c:	d01e      	beq.n	800fc4c <_printf_common+0xa4>
 800fc0e:	6823      	ldr	r3, [r4, #0]
 800fc10:	68e5      	ldr	r5, [r4, #12]
 800fc12:	6832      	ldr	r2, [r6, #0]
 800fc14:	f003 0306 	and.w	r3, r3, #6
 800fc18:	2b04      	cmp	r3, #4
 800fc1a:	bf08      	it	eq
 800fc1c:	1aad      	subeq	r5, r5, r2
 800fc1e:	68a3      	ldr	r3, [r4, #8]
 800fc20:	6922      	ldr	r2, [r4, #16]
 800fc22:	bf0c      	ite	eq
 800fc24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fc28:	2500      	movne	r5, #0
 800fc2a:	4293      	cmp	r3, r2
 800fc2c:	bfc4      	itt	gt
 800fc2e:	1a9b      	subgt	r3, r3, r2
 800fc30:	18ed      	addgt	r5, r5, r3
 800fc32:	2600      	movs	r6, #0
 800fc34:	341a      	adds	r4, #26
 800fc36:	42b5      	cmp	r5, r6
 800fc38:	d11a      	bne.n	800fc70 <_printf_common+0xc8>
 800fc3a:	2000      	movs	r0, #0
 800fc3c:	e008      	b.n	800fc50 <_printf_common+0xa8>
 800fc3e:	2301      	movs	r3, #1
 800fc40:	4652      	mov	r2, sl
 800fc42:	4649      	mov	r1, r9
 800fc44:	4638      	mov	r0, r7
 800fc46:	47c0      	blx	r8
 800fc48:	3001      	adds	r0, #1
 800fc4a:	d103      	bne.n	800fc54 <_printf_common+0xac>
 800fc4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fc50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc54:	3501      	adds	r5, #1
 800fc56:	e7c6      	b.n	800fbe6 <_printf_common+0x3e>
 800fc58:	18e1      	adds	r1, r4, r3
 800fc5a:	1c5a      	adds	r2, r3, #1
 800fc5c:	2030      	movs	r0, #48	; 0x30
 800fc5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fc62:	4422      	add	r2, r4
 800fc64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fc68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fc6c:	3302      	adds	r3, #2
 800fc6e:	e7c7      	b.n	800fc00 <_printf_common+0x58>
 800fc70:	2301      	movs	r3, #1
 800fc72:	4622      	mov	r2, r4
 800fc74:	4649      	mov	r1, r9
 800fc76:	4638      	mov	r0, r7
 800fc78:	47c0      	blx	r8
 800fc7a:	3001      	adds	r0, #1
 800fc7c:	d0e6      	beq.n	800fc4c <_printf_common+0xa4>
 800fc7e:	3601      	adds	r6, #1
 800fc80:	e7d9      	b.n	800fc36 <_printf_common+0x8e>
	...

0800fc84 <_printf_i>:
 800fc84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc88:	7e0f      	ldrb	r7, [r1, #24]
 800fc8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fc8c:	2f78      	cmp	r7, #120	; 0x78
 800fc8e:	4691      	mov	r9, r2
 800fc90:	4680      	mov	r8, r0
 800fc92:	460c      	mov	r4, r1
 800fc94:	469a      	mov	sl, r3
 800fc96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fc9a:	d807      	bhi.n	800fcac <_printf_i+0x28>
 800fc9c:	2f62      	cmp	r7, #98	; 0x62
 800fc9e:	d80a      	bhi.n	800fcb6 <_printf_i+0x32>
 800fca0:	2f00      	cmp	r7, #0
 800fca2:	f000 80d8 	beq.w	800fe56 <_printf_i+0x1d2>
 800fca6:	2f58      	cmp	r7, #88	; 0x58
 800fca8:	f000 80a3 	beq.w	800fdf2 <_printf_i+0x16e>
 800fcac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fcb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fcb4:	e03a      	b.n	800fd2c <_printf_i+0xa8>
 800fcb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fcba:	2b15      	cmp	r3, #21
 800fcbc:	d8f6      	bhi.n	800fcac <_printf_i+0x28>
 800fcbe:	a101      	add	r1, pc, #4	; (adr r1, 800fcc4 <_printf_i+0x40>)
 800fcc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fcc4:	0800fd1d 	.word	0x0800fd1d
 800fcc8:	0800fd31 	.word	0x0800fd31
 800fccc:	0800fcad 	.word	0x0800fcad
 800fcd0:	0800fcad 	.word	0x0800fcad
 800fcd4:	0800fcad 	.word	0x0800fcad
 800fcd8:	0800fcad 	.word	0x0800fcad
 800fcdc:	0800fd31 	.word	0x0800fd31
 800fce0:	0800fcad 	.word	0x0800fcad
 800fce4:	0800fcad 	.word	0x0800fcad
 800fce8:	0800fcad 	.word	0x0800fcad
 800fcec:	0800fcad 	.word	0x0800fcad
 800fcf0:	0800fe3d 	.word	0x0800fe3d
 800fcf4:	0800fd61 	.word	0x0800fd61
 800fcf8:	0800fe1f 	.word	0x0800fe1f
 800fcfc:	0800fcad 	.word	0x0800fcad
 800fd00:	0800fcad 	.word	0x0800fcad
 800fd04:	0800fe5f 	.word	0x0800fe5f
 800fd08:	0800fcad 	.word	0x0800fcad
 800fd0c:	0800fd61 	.word	0x0800fd61
 800fd10:	0800fcad 	.word	0x0800fcad
 800fd14:	0800fcad 	.word	0x0800fcad
 800fd18:	0800fe27 	.word	0x0800fe27
 800fd1c:	682b      	ldr	r3, [r5, #0]
 800fd1e:	1d1a      	adds	r2, r3, #4
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	602a      	str	r2, [r5, #0]
 800fd24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fd28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fd2c:	2301      	movs	r3, #1
 800fd2e:	e0a3      	b.n	800fe78 <_printf_i+0x1f4>
 800fd30:	6820      	ldr	r0, [r4, #0]
 800fd32:	6829      	ldr	r1, [r5, #0]
 800fd34:	0606      	lsls	r6, r0, #24
 800fd36:	f101 0304 	add.w	r3, r1, #4
 800fd3a:	d50a      	bpl.n	800fd52 <_printf_i+0xce>
 800fd3c:	680e      	ldr	r6, [r1, #0]
 800fd3e:	602b      	str	r3, [r5, #0]
 800fd40:	2e00      	cmp	r6, #0
 800fd42:	da03      	bge.n	800fd4c <_printf_i+0xc8>
 800fd44:	232d      	movs	r3, #45	; 0x2d
 800fd46:	4276      	negs	r6, r6
 800fd48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd4c:	485e      	ldr	r0, [pc, #376]	; (800fec8 <_printf_i+0x244>)
 800fd4e:	230a      	movs	r3, #10
 800fd50:	e019      	b.n	800fd86 <_printf_i+0x102>
 800fd52:	680e      	ldr	r6, [r1, #0]
 800fd54:	602b      	str	r3, [r5, #0]
 800fd56:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fd5a:	bf18      	it	ne
 800fd5c:	b236      	sxthne	r6, r6
 800fd5e:	e7ef      	b.n	800fd40 <_printf_i+0xbc>
 800fd60:	682b      	ldr	r3, [r5, #0]
 800fd62:	6820      	ldr	r0, [r4, #0]
 800fd64:	1d19      	adds	r1, r3, #4
 800fd66:	6029      	str	r1, [r5, #0]
 800fd68:	0601      	lsls	r1, r0, #24
 800fd6a:	d501      	bpl.n	800fd70 <_printf_i+0xec>
 800fd6c:	681e      	ldr	r6, [r3, #0]
 800fd6e:	e002      	b.n	800fd76 <_printf_i+0xf2>
 800fd70:	0646      	lsls	r6, r0, #25
 800fd72:	d5fb      	bpl.n	800fd6c <_printf_i+0xe8>
 800fd74:	881e      	ldrh	r6, [r3, #0]
 800fd76:	4854      	ldr	r0, [pc, #336]	; (800fec8 <_printf_i+0x244>)
 800fd78:	2f6f      	cmp	r7, #111	; 0x6f
 800fd7a:	bf0c      	ite	eq
 800fd7c:	2308      	moveq	r3, #8
 800fd7e:	230a      	movne	r3, #10
 800fd80:	2100      	movs	r1, #0
 800fd82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fd86:	6865      	ldr	r5, [r4, #4]
 800fd88:	60a5      	str	r5, [r4, #8]
 800fd8a:	2d00      	cmp	r5, #0
 800fd8c:	bfa2      	ittt	ge
 800fd8e:	6821      	ldrge	r1, [r4, #0]
 800fd90:	f021 0104 	bicge.w	r1, r1, #4
 800fd94:	6021      	strge	r1, [r4, #0]
 800fd96:	b90e      	cbnz	r6, 800fd9c <_printf_i+0x118>
 800fd98:	2d00      	cmp	r5, #0
 800fd9a:	d04d      	beq.n	800fe38 <_printf_i+0x1b4>
 800fd9c:	4615      	mov	r5, r2
 800fd9e:	fbb6 f1f3 	udiv	r1, r6, r3
 800fda2:	fb03 6711 	mls	r7, r3, r1, r6
 800fda6:	5dc7      	ldrb	r7, [r0, r7]
 800fda8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fdac:	4637      	mov	r7, r6
 800fdae:	42bb      	cmp	r3, r7
 800fdb0:	460e      	mov	r6, r1
 800fdb2:	d9f4      	bls.n	800fd9e <_printf_i+0x11a>
 800fdb4:	2b08      	cmp	r3, #8
 800fdb6:	d10b      	bne.n	800fdd0 <_printf_i+0x14c>
 800fdb8:	6823      	ldr	r3, [r4, #0]
 800fdba:	07de      	lsls	r6, r3, #31
 800fdbc:	d508      	bpl.n	800fdd0 <_printf_i+0x14c>
 800fdbe:	6923      	ldr	r3, [r4, #16]
 800fdc0:	6861      	ldr	r1, [r4, #4]
 800fdc2:	4299      	cmp	r1, r3
 800fdc4:	bfde      	ittt	le
 800fdc6:	2330      	movle	r3, #48	; 0x30
 800fdc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fdcc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800fdd0:	1b52      	subs	r2, r2, r5
 800fdd2:	6122      	str	r2, [r4, #16]
 800fdd4:	f8cd a000 	str.w	sl, [sp]
 800fdd8:	464b      	mov	r3, r9
 800fdda:	aa03      	add	r2, sp, #12
 800fddc:	4621      	mov	r1, r4
 800fdde:	4640      	mov	r0, r8
 800fde0:	f7ff fee2 	bl	800fba8 <_printf_common>
 800fde4:	3001      	adds	r0, #1
 800fde6:	d14c      	bne.n	800fe82 <_printf_i+0x1fe>
 800fde8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fdec:	b004      	add	sp, #16
 800fdee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdf2:	4835      	ldr	r0, [pc, #212]	; (800fec8 <_printf_i+0x244>)
 800fdf4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fdf8:	6829      	ldr	r1, [r5, #0]
 800fdfa:	6823      	ldr	r3, [r4, #0]
 800fdfc:	f851 6b04 	ldr.w	r6, [r1], #4
 800fe00:	6029      	str	r1, [r5, #0]
 800fe02:	061d      	lsls	r5, r3, #24
 800fe04:	d514      	bpl.n	800fe30 <_printf_i+0x1ac>
 800fe06:	07df      	lsls	r7, r3, #31
 800fe08:	bf44      	itt	mi
 800fe0a:	f043 0320 	orrmi.w	r3, r3, #32
 800fe0e:	6023      	strmi	r3, [r4, #0]
 800fe10:	b91e      	cbnz	r6, 800fe1a <_printf_i+0x196>
 800fe12:	6823      	ldr	r3, [r4, #0]
 800fe14:	f023 0320 	bic.w	r3, r3, #32
 800fe18:	6023      	str	r3, [r4, #0]
 800fe1a:	2310      	movs	r3, #16
 800fe1c:	e7b0      	b.n	800fd80 <_printf_i+0xfc>
 800fe1e:	6823      	ldr	r3, [r4, #0]
 800fe20:	f043 0320 	orr.w	r3, r3, #32
 800fe24:	6023      	str	r3, [r4, #0]
 800fe26:	2378      	movs	r3, #120	; 0x78
 800fe28:	4828      	ldr	r0, [pc, #160]	; (800fecc <_printf_i+0x248>)
 800fe2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fe2e:	e7e3      	b.n	800fdf8 <_printf_i+0x174>
 800fe30:	0659      	lsls	r1, r3, #25
 800fe32:	bf48      	it	mi
 800fe34:	b2b6      	uxthmi	r6, r6
 800fe36:	e7e6      	b.n	800fe06 <_printf_i+0x182>
 800fe38:	4615      	mov	r5, r2
 800fe3a:	e7bb      	b.n	800fdb4 <_printf_i+0x130>
 800fe3c:	682b      	ldr	r3, [r5, #0]
 800fe3e:	6826      	ldr	r6, [r4, #0]
 800fe40:	6961      	ldr	r1, [r4, #20]
 800fe42:	1d18      	adds	r0, r3, #4
 800fe44:	6028      	str	r0, [r5, #0]
 800fe46:	0635      	lsls	r5, r6, #24
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	d501      	bpl.n	800fe50 <_printf_i+0x1cc>
 800fe4c:	6019      	str	r1, [r3, #0]
 800fe4e:	e002      	b.n	800fe56 <_printf_i+0x1d2>
 800fe50:	0670      	lsls	r0, r6, #25
 800fe52:	d5fb      	bpl.n	800fe4c <_printf_i+0x1c8>
 800fe54:	8019      	strh	r1, [r3, #0]
 800fe56:	2300      	movs	r3, #0
 800fe58:	6123      	str	r3, [r4, #16]
 800fe5a:	4615      	mov	r5, r2
 800fe5c:	e7ba      	b.n	800fdd4 <_printf_i+0x150>
 800fe5e:	682b      	ldr	r3, [r5, #0]
 800fe60:	1d1a      	adds	r2, r3, #4
 800fe62:	602a      	str	r2, [r5, #0]
 800fe64:	681d      	ldr	r5, [r3, #0]
 800fe66:	6862      	ldr	r2, [r4, #4]
 800fe68:	2100      	movs	r1, #0
 800fe6a:	4628      	mov	r0, r5
 800fe6c:	f7f0 fa40 	bl	80002f0 <memchr>
 800fe70:	b108      	cbz	r0, 800fe76 <_printf_i+0x1f2>
 800fe72:	1b40      	subs	r0, r0, r5
 800fe74:	6060      	str	r0, [r4, #4]
 800fe76:	6863      	ldr	r3, [r4, #4]
 800fe78:	6123      	str	r3, [r4, #16]
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe80:	e7a8      	b.n	800fdd4 <_printf_i+0x150>
 800fe82:	6923      	ldr	r3, [r4, #16]
 800fe84:	462a      	mov	r2, r5
 800fe86:	4649      	mov	r1, r9
 800fe88:	4640      	mov	r0, r8
 800fe8a:	47d0      	blx	sl
 800fe8c:	3001      	adds	r0, #1
 800fe8e:	d0ab      	beq.n	800fde8 <_printf_i+0x164>
 800fe90:	6823      	ldr	r3, [r4, #0]
 800fe92:	079b      	lsls	r3, r3, #30
 800fe94:	d413      	bmi.n	800febe <_printf_i+0x23a>
 800fe96:	68e0      	ldr	r0, [r4, #12]
 800fe98:	9b03      	ldr	r3, [sp, #12]
 800fe9a:	4298      	cmp	r0, r3
 800fe9c:	bfb8      	it	lt
 800fe9e:	4618      	movlt	r0, r3
 800fea0:	e7a4      	b.n	800fdec <_printf_i+0x168>
 800fea2:	2301      	movs	r3, #1
 800fea4:	4632      	mov	r2, r6
 800fea6:	4649      	mov	r1, r9
 800fea8:	4640      	mov	r0, r8
 800feaa:	47d0      	blx	sl
 800feac:	3001      	adds	r0, #1
 800feae:	d09b      	beq.n	800fde8 <_printf_i+0x164>
 800feb0:	3501      	adds	r5, #1
 800feb2:	68e3      	ldr	r3, [r4, #12]
 800feb4:	9903      	ldr	r1, [sp, #12]
 800feb6:	1a5b      	subs	r3, r3, r1
 800feb8:	42ab      	cmp	r3, r5
 800feba:	dcf2      	bgt.n	800fea2 <_printf_i+0x21e>
 800febc:	e7eb      	b.n	800fe96 <_printf_i+0x212>
 800febe:	2500      	movs	r5, #0
 800fec0:	f104 0619 	add.w	r6, r4, #25
 800fec4:	e7f5      	b.n	800feb2 <_printf_i+0x22e>
 800fec6:	bf00      	nop
 800fec8:	08010cbd 	.word	0x08010cbd
 800fecc:	08010cce 	.word	0x08010cce

0800fed0 <_free_r>:
 800fed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fed2:	2900      	cmp	r1, #0
 800fed4:	d044      	beq.n	800ff60 <_free_r+0x90>
 800fed6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800feda:	9001      	str	r0, [sp, #4]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	f1a1 0404 	sub.w	r4, r1, #4
 800fee2:	bfb8      	it	lt
 800fee4:	18e4      	addlt	r4, r4, r3
 800fee6:	f000 f913 	bl	8010110 <__malloc_lock>
 800feea:	4a1e      	ldr	r2, [pc, #120]	; (800ff64 <_free_r+0x94>)
 800feec:	9801      	ldr	r0, [sp, #4]
 800feee:	6813      	ldr	r3, [r2, #0]
 800fef0:	b933      	cbnz	r3, 800ff00 <_free_r+0x30>
 800fef2:	6063      	str	r3, [r4, #4]
 800fef4:	6014      	str	r4, [r2, #0]
 800fef6:	b003      	add	sp, #12
 800fef8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fefc:	f000 b90e 	b.w	801011c <__malloc_unlock>
 800ff00:	42a3      	cmp	r3, r4
 800ff02:	d908      	bls.n	800ff16 <_free_r+0x46>
 800ff04:	6825      	ldr	r5, [r4, #0]
 800ff06:	1961      	adds	r1, r4, r5
 800ff08:	428b      	cmp	r3, r1
 800ff0a:	bf01      	itttt	eq
 800ff0c:	6819      	ldreq	r1, [r3, #0]
 800ff0e:	685b      	ldreq	r3, [r3, #4]
 800ff10:	1949      	addeq	r1, r1, r5
 800ff12:	6021      	streq	r1, [r4, #0]
 800ff14:	e7ed      	b.n	800fef2 <_free_r+0x22>
 800ff16:	461a      	mov	r2, r3
 800ff18:	685b      	ldr	r3, [r3, #4]
 800ff1a:	b10b      	cbz	r3, 800ff20 <_free_r+0x50>
 800ff1c:	42a3      	cmp	r3, r4
 800ff1e:	d9fa      	bls.n	800ff16 <_free_r+0x46>
 800ff20:	6811      	ldr	r1, [r2, #0]
 800ff22:	1855      	adds	r5, r2, r1
 800ff24:	42a5      	cmp	r5, r4
 800ff26:	d10b      	bne.n	800ff40 <_free_r+0x70>
 800ff28:	6824      	ldr	r4, [r4, #0]
 800ff2a:	4421      	add	r1, r4
 800ff2c:	1854      	adds	r4, r2, r1
 800ff2e:	42a3      	cmp	r3, r4
 800ff30:	6011      	str	r1, [r2, #0]
 800ff32:	d1e0      	bne.n	800fef6 <_free_r+0x26>
 800ff34:	681c      	ldr	r4, [r3, #0]
 800ff36:	685b      	ldr	r3, [r3, #4]
 800ff38:	6053      	str	r3, [r2, #4]
 800ff3a:	4421      	add	r1, r4
 800ff3c:	6011      	str	r1, [r2, #0]
 800ff3e:	e7da      	b.n	800fef6 <_free_r+0x26>
 800ff40:	d902      	bls.n	800ff48 <_free_r+0x78>
 800ff42:	230c      	movs	r3, #12
 800ff44:	6003      	str	r3, [r0, #0]
 800ff46:	e7d6      	b.n	800fef6 <_free_r+0x26>
 800ff48:	6825      	ldr	r5, [r4, #0]
 800ff4a:	1961      	adds	r1, r4, r5
 800ff4c:	428b      	cmp	r3, r1
 800ff4e:	bf04      	itt	eq
 800ff50:	6819      	ldreq	r1, [r3, #0]
 800ff52:	685b      	ldreq	r3, [r3, #4]
 800ff54:	6063      	str	r3, [r4, #4]
 800ff56:	bf04      	itt	eq
 800ff58:	1949      	addeq	r1, r1, r5
 800ff5a:	6021      	streq	r1, [r4, #0]
 800ff5c:	6054      	str	r4, [r2, #4]
 800ff5e:	e7ca      	b.n	800fef6 <_free_r+0x26>
 800ff60:	b003      	add	sp, #12
 800ff62:	bd30      	pop	{r4, r5, pc}
 800ff64:	24000538 	.word	0x24000538

0800ff68 <sbrk_aligned>:
 800ff68:	b570      	push	{r4, r5, r6, lr}
 800ff6a:	4e0e      	ldr	r6, [pc, #56]	; (800ffa4 <sbrk_aligned+0x3c>)
 800ff6c:	460c      	mov	r4, r1
 800ff6e:	6831      	ldr	r1, [r6, #0]
 800ff70:	4605      	mov	r5, r0
 800ff72:	b911      	cbnz	r1, 800ff7a <sbrk_aligned+0x12>
 800ff74:	f000 f8bc 	bl	80100f0 <_sbrk_r>
 800ff78:	6030      	str	r0, [r6, #0]
 800ff7a:	4621      	mov	r1, r4
 800ff7c:	4628      	mov	r0, r5
 800ff7e:	f000 f8b7 	bl	80100f0 <_sbrk_r>
 800ff82:	1c43      	adds	r3, r0, #1
 800ff84:	d00a      	beq.n	800ff9c <sbrk_aligned+0x34>
 800ff86:	1cc4      	adds	r4, r0, #3
 800ff88:	f024 0403 	bic.w	r4, r4, #3
 800ff8c:	42a0      	cmp	r0, r4
 800ff8e:	d007      	beq.n	800ffa0 <sbrk_aligned+0x38>
 800ff90:	1a21      	subs	r1, r4, r0
 800ff92:	4628      	mov	r0, r5
 800ff94:	f000 f8ac 	bl	80100f0 <_sbrk_r>
 800ff98:	3001      	adds	r0, #1
 800ff9a:	d101      	bne.n	800ffa0 <sbrk_aligned+0x38>
 800ff9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ffa0:	4620      	mov	r0, r4
 800ffa2:	bd70      	pop	{r4, r5, r6, pc}
 800ffa4:	2400053c 	.word	0x2400053c

0800ffa8 <_malloc_r>:
 800ffa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffac:	1ccd      	adds	r5, r1, #3
 800ffae:	f025 0503 	bic.w	r5, r5, #3
 800ffb2:	3508      	adds	r5, #8
 800ffb4:	2d0c      	cmp	r5, #12
 800ffb6:	bf38      	it	cc
 800ffb8:	250c      	movcc	r5, #12
 800ffba:	2d00      	cmp	r5, #0
 800ffbc:	4607      	mov	r7, r0
 800ffbe:	db01      	blt.n	800ffc4 <_malloc_r+0x1c>
 800ffc0:	42a9      	cmp	r1, r5
 800ffc2:	d905      	bls.n	800ffd0 <_malloc_r+0x28>
 800ffc4:	230c      	movs	r3, #12
 800ffc6:	603b      	str	r3, [r7, #0]
 800ffc8:	2600      	movs	r6, #0
 800ffca:	4630      	mov	r0, r6
 800ffcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffd0:	4e2e      	ldr	r6, [pc, #184]	; (801008c <_malloc_r+0xe4>)
 800ffd2:	f000 f89d 	bl	8010110 <__malloc_lock>
 800ffd6:	6833      	ldr	r3, [r6, #0]
 800ffd8:	461c      	mov	r4, r3
 800ffda:	bb34      	cbnz	r4, 801002a <_malloc_r+0x82>
 800ffdc:	4629      	mov	r1, r5
 800ffde:	4638      	mov	r0, r7
 800ffe0:	f7ff ffc2 	bl	800ff68 <sbrk_aligned>
 800ffe4:	1c43      	adds	r3, r0, #1
 800ffe6:	4604      	mov	r4, r0
 800ffe8:	d14d      	bne.n	8010086 <_malloc_r+0xde>
 800ffea:	6834      	ldr	r4, [r6, #0]
 800ffec:	4626      	mov	r6, r4
 800ffee:	2e00      	cmp	r6, #0
 800fff0:	d140      	bne.n	8010074 <_malloc_r+0xcc>
 800fff2:	6823      	ldr	r3, [r4, #0]
 800fff4:	4631      	mov	r1, r6
 800fff6:	4638      	mov	r0, r7
 800fff8:	eb04 0803 	add.w	r8, r4, r3
 800fffc:	f000 f878 	bl	80100f0 <_sbrk_r>
 8010000:	4580      	cmp	r8, r0
 8010002:	d13a      	bne.n	801007a <_malloc_r+0xd2>
 8010004:	6821      	ldr	r1, [r4, #0]
 8010006:	3503      	adds	r5, #3
 8010008:	1a6d      	subs	r5, r5, r1
 801000a:	f025 0503 	bic.w	r5, r5, #3
 801000e:	3508      	adds	r5, #8
 8010010:	2d0c      	cmp	r5, #12
 8010012:	bf38      	it	cc
 8010014:	250c      	movcc	r5, #12
 8010016:	4629      	mov	r1, r5
 8010018:	4638      	mov	r0, r7
 801001a:	f7ff ffa5 	bl	800ff68 <sbrk_aligned>
 801001e:	3001      	adds	r0, #1
 8010020:	d02b      	beq.n	801007a <_malloc_r+0xd2>
 8010022:	6823      	ldr	r3, [r4, #0]
 8010024:	442b      	add	r3, r5
 8010026:	6023      	str	r3, [r4, #0]
 8010028:	e00e      	b.n	8010048 <_malloc_r+0xa0>
 801002a:	6822      	ldr	r2, [r4, #0]
 801002c:	1b52      	subs	r2, r2, r5
 801002e:	d41e      	bmi.n	801006e <_malloc_r+0xc6>
 8010030:	2a0b      	cmp	r2, #11
 8010032:	d916      	bls.n	8010062 <_malloc_r+0xba>
 8010034:	1961      	adds	r1, r4, r5
 8010036:	42a3      	cmp	r3, r4
 8010038:	6025      	str	r5, [r4, #0]
 801003a:	bf18      	it	ne
 801003c:	6059      	strne	r1, [r3, #4]
 801003e:	6863      	ldr	r3, [r4, #4]
 8010040:	bf08      	it	eq
 8010042:	6031      	streq	r1, [r6, #0]
 8010044:	5162      	str	r2, [r4, r5]
 8010046:	604b      	str	r3, [r1, #4]
 8010048:	4638      	mov	r0, r7
 801004a:	f104 060b 	add.w	r6, r4, #11
 801004e:	f000 f865 	bl	801011c <__malloc_unlock>
 8010052:	f026 0607 	bic.w	r6, r6, #7
 8010056:	1d23      	adds	r3, r4, #4
 8010058:	1af2      	subs	r2, r6, r3
 801005a:	d0b6      	beq.n	800ffca <_malloc_r+0x22>
 801005c:	1b9b      	subs	r3, r3, r6
 801005e:	50a3      	str	r3, [r4, r2]
 8010060:	e7b3      	b.n	800ffca <_malloc_r+0x22>
 8010062:	6862      	ldr	r2, [r4, #4]
 8010064:	42a3      	cmp	r3, r4
 8010066:	bf0c      	ite	eq
 8010068:	6032      	streq	r2, [r6, #0]
 801006a:	605a      	strne	r2, [r3, #4]
 801006c:	e7ec      	b.n	8010048 <_malloc_r+0xa0>
 801006e:	4623      	mov	r3, r4
 8010070:	6864      	ldr	r4, [r4, #4]
 8010072:	e7b2      	b.n	800ffda <_malloc_r+0x32>
 8010074:	4634      	mov	r4, r6
 8010076:	6876      	ldr	r6, [r6, #4]
 8010078:	e7b9      	b.n	800ffee <_malloc_r+0x46>
 801007a:	230c      	movs	r3, #12
 801007c:	603b      	str	r3, [r7, #0]
 801007e:	4638      	mov	r0, r7
 8010080:	f000 f84c 	bl	801011c <__malloc_unlock>
 8010084:	e7a1      	b.n	800ffca <_malloc_r+0x22>
 8010086:	6025      	str	r5, [r4, #0]
 8010088:	e7de      	b.n	8010048 <_malloc_r+0xa0>
 801008a:	bf00      	nop
 801008c:	24000538 	.word	0x24000538

08010090 <_realloc_r>:
 8010090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010094:	4680      	mov	r8, r0
 8010096:	4614      	mov	r4, r2
 8010098:	460e      	mov	r6, r1
 801009a:	b921      	cbnz	r1, 80100a6 <_realloc_r+0x16>
 801009c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100a0:	4611      	mov	r1, r2
 80100a2:	f7ff bf81 	b.w	800ffa8 <_malloc_r>
 80100a6:	b92a      	cbnz	r2, 80100b4 <_realloc_r+0x24>
 80100a8:	f7ff ff12 	bl	800fed0 <_free_r>
 80100ac:	4625      	mov	r5, r4
 80100ae:	4628      	mov	r0, r5
 80100b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100b4:	f000 f838 	bl	8010128 <_malloc_usable_size_r>
 80100b8:	4284      	cmp	r4, r0
 80100ba:	4607      	mov	r7, r0
 80100bc:	d802      	bhi.n	80100c4 <_realloc_r+0x34>
 80100be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80100c2:	d812      	bhi.n	80100ea <_realloc_r+0x5a>
 80100c4:	4621      	mov	r1, r4
 80100c6:	4640      	mov	r0, r8
 80100c8:	f7ff ff6e 	bl	800ffa8 <_malloc_r>
 80100cc:	4605      	mov	r5, r0
 80100ce:	2800      	cmp	r0, #0
 80100d0:	d0ed      	beq.n	80100ae <_realloc_r+0x1e>
 80100d2:	42bc      	cmp	r4, r7
 80100d4:	4622      	mov	r2, r4
 80100d6:	4631      	mov	r1, r6
 80100d8:	bf28      	it	cs
 80100da:	463a      	movcs	r2, r7
 80100dc:	f7ff fb6a 	bl	800f7b4 <memcpy>
 80100e0:	4631      	mov	r1, r6
 80100e2:	4640      	mov	r0, r8
 80100e4:	f7ff fef4 	bl	800fed0 <_free_r>
 80100e8:	e7e1      	b.n	80100ae <_realloc_r+0x1e>
 80100ea:	4635      	mov	r5, r6
 80100ec:	e7df      	b.n	80100ae <_realloc_r+0x1e>
	...

080100f0 <_sbrk_r>:
 80100f0:	b538      	push	{r3, r4, r5, lr}
 80100f2:	4d06      	ldr	r5, [pc, #24]	; (801010c <_sbrk_r+0x1c>)
 80100f4:	2300      	movs	r3, #0
 80100f6:	4604      	mov	r4, r0
 80100f8:	4608      	mov	r0, r1
 80100fa:	602b      	str	r3, [r5, #0]
 80100fc:	f7f1 fc82 	bl	8001a04 <_sbrk>
 8010100:	1c43      	adds	r3, r0, #1
 8010102:	d102      	bne.n	801010a <_sbrk_r+0x1a>
 8010104:	682b      	ldr	r3, [r5, #0]
 8010106:	b103      	cbz	r3, 801010a <_sbrk_r+0x1a>
 8010108:	6023      	str	r3, [r4, #0]
 801010a:	bd38      	pop	{r3, r4, r5, pc}
 801010c:	24000540 	.word	0x24000540

08010110 <__malloc_lock>:
 8010110:	4801      	ldr	r0, [pc, #4]	; (8010118 <__malloc_lock+0x8>)
 8010112:	f000 b811 	b.w	8010138 <__retarget_lock_acquire_recursive>
 8010116:	bf00      	nop
 8010118:	24000544 	.word	0x24000544

0801011c <__malloc_unlock>:
 801011c:	4801      	ldr	r0, [pc, #4]	; (8010124 <__malloc_unlock+0x8>)
 801011e:	f000 b80c 	b.w	801013a <__retarget_lock_release_recursive>
 8010122:	bf00      	nop
 8010124:	24000544 	.word	0x24000544

08010128 <_malloc_usable_size_r>:
 8010128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801012c:	1f18      	subs	r0, r3, #4
 801012e:	2b00      	cmp	r3, #0
 8010130:	bfbc      	itt	lt
 8010132:	580b      	ldrlt	r3, [r1, r0]
 8010134:	18c0      	addlt	r0, r0, r3
 8010136:	4770      	bx	lr

08010138 <__retarget_lock_acquire_recursive>:
 8010138:	4770      	bx	lr

0801013a <__retarget_lock_release_recursive>:
 801013a:	4770      	bx	lr

0801013c <_init>:
 801013c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801013e:	bf00      	nop
 8010140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010142:	bc08      	pop	{r3}
 8010144:	469e      	mov	lr, r3
 8010146:	4770      	bx	lr

08010148 <_fini>:
 8010148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801014a:	bf00      	nop
 801014c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801014e:	bc08      	pop	{r3}
 8010150:	469e      	mov	lr, r3
 8010152:	4770      	bx	lr
